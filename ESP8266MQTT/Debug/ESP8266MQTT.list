
ESP8266MQTT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000111a0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008e8  08011330  08011330  00021330  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011c18  08011c18  00030a98  2**0
                  CONTENTS
  4 .ARM          00000008  08011c18  08011c18  00021c18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011c20  08011c20  00030a98  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08011c20  08011c20  00021c20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011c28  08011c28  00021c28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000a98  20000000  08011c2c  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006e4  20000a98  080126c4  00030a98  2**2
                  ALLOC
 10 ._user_heap_stack 00001fe4  2000117c  080126c4  0003117c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030a98  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004ca0c  00000000  00000000  00030ac8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00009980  00000000  00000000  0007d4d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002410  00000000  00000000  00086e58  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001fd8  00000000  00000000  00089268  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002e6e4  00000000  00000000  0008b240  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000267af  00000000  00000000  000b9924  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ec054  00000000  00000000  000e00d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001cc127  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009e90  00000000  00000000  001cc1a4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000a98 	.word	0x20000a98
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08011318 	.word	0x08011318

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000a9c 	.word	0x20000a9c
 80001cc:	08011318 	.word	0x08011318

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b972 	b.w	8000fa4 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f806 	bl	8000cd8 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__udivmoddi4>:
 8000cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cdc:	9e08      	ldr	r6, [sp, #32]
 8000cde:	4604      	mov	r4, r0
 8000ce0:	4688      	mov	r8, r1
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d14b      	bne.n	8000d7e <__udivmoddi4+0xa6>
 8000ce6:	428a      	cmp	r2, r1
 8000ce8:	4615      	mov	r5, r2
 8000cea:	d967      	bls.n	8000dbc <__udivmoddi4+0xe4>
 8000cec:	fab2 f282 	clz	r2, r2
 8000cf0:	b14a      	cbz	r2, 8000d06 <__udivmoddi4+0x2e>
 8000cf2:	f1c2 0720 	rsb	r7, r2, #32
 8000cf6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cfa:	fa20 f707 	lsr.w	r7, r0, r7
 8000cfe:	4095      	lsls	r5, r2
 8000d00:	ea47 0803 	orr.w	r8, r7, r3
 8000d04:	4094      	lsls	r4, r2
 8000d06:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d0a:	0c23      	lsrs	r3, r4, #16
 8000d0c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d10:	fa1f fc85 	uxth.w	ip, r5
 8000d14:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d18:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d1c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d20:	4299      	cmp	r1, r3
 8000d22:	d909      	bls.n	8000d38 <__udivmoddi4+0x60>
 8000d24:	18eb      	adds	r3, r5, r3
 8000d26:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d2a:	f080 811b 	bcs.w	8000f64 <__udivmoddi4+0x28c>
 8000d2e:	4299      	cmp	r1, r3
 8000d30:	f240 8118 	bls.w	8000f64 <__udivmoddi4+0x28c>
 8000d34:	3f02      	subs	r7, #2
 8000d36:	442b      	add	r3, r5
 8000d38:	1a5b      	subs	r3, r3, r1
 8000d3a:	b2a4      	uxth	r4, r4
 8000d3c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d40:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d48:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d4c:	45a4      	cmp	ip, r4
 8000d4e:	d909      	bls.n	8000d64 <__udivmoddi4+0x8c>
 8000d50:	192c      	adds	r4, r5, r4
 8000d52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d56:	f080 8107 	bcs.w	8000f68 <__udivmoddi4+0x290>
 8000d5a:	45a4      	cmp	ip, r4
 8000d5c:	f240 8104 	bls.w	8000f68 <__udivmoddi4+0x290>
 8000d60:	3802      	subs	r0, #2
 8000d62:	442c      	add	r4, r5
 8000d64:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d68:	eba4 040c 	sub.w	r4, r4, ip
 8000d6c:	2700      	movs	r7, #0
 8000d6e:	b11e      	cbz	r6, 8000d78 <__udivmoddi4+0xa0>
 8000d70:	40d4      	lsrs	r4, r2
 8000d72:	2300      	movs	r3, #0
 8000d74:	e9c6 4300 	strd	r4, r3, [r6]
 8000d78:	4639      	mov	r1, r7
 8000d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d909      	bls.n	8000d96 <__udivmoddi4+0xbe>
 8000d82:	2e00      	cmp	r6, #0
 8000d84:	f000 80eb 	beq.w	8000f5e <__udivmoddi4+0x286>
 8000d88:	2700      	movs	r7, #0
 8000d8a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d8e:	4638      	mov	r0, r7
 8000d90:	4639      	mov	r1, r7
 8000d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d96:	fab3 f783 	clz	r7, r3
 8000d9a:	2f00      	cmp	r7, #0
 8000d9c:	d147      	bne.n	8000e2e <__udivmoddi4+0x156>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d302      	bcc.n	8000da8 <__udivmoddi4+0xd0>
 8000da2:	4282      	cmp	r2, r0
 8000da4:	f200 80fa 	bhi.w	8000f9c <__udivmoddi4+0x2c4>
 8000da8:	1a84      	subs	r4, r0, r2
 8000daa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dae:	2001      	movs	r0, #1
 8000db0:	4698      	mov	r8, r3
 8000db2:	2e00      	cmp	r6, #0
 8000db4:	d0e0      	beq.n	8000d78 <__udivmoddi4+0xa0>
 8000db6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dba:	e7dd      	b.n	8000d78 <__udivmoddi4+0xa0>
 8000dbc:	b902      	cbnz	r2, 8000dc0 <__udivmoddi4+0xe8>
 8000dbe:	deff      	udf	#255	; 0xff
 8000dc0:	fab2 f282 	clz	r2, r2
 8000dc4:	2a00      	cmp	r2, #0
 8000dc6:	f040 808f 	bne.w	8000ee8 <__udivmoddi4+0x210>
 8000dca:	1b49      	subs	r1, r1, r5
 8000dcc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dd0:	fa1f f885 	uxth.w	r8, r5
 8000dd4:	2701      	movs	r7, #1
 8000dd6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dda:	0c23      	lsrs	r3, r4, #16
 8000ddc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000de0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000de4:	fb08 f10c 	mul.w	r1, r8, ip
 8000de8:	4299      	cmp	r1, r3
 8000dea:	d907      	bls.n	8000dfc <__udivmoddi4+0x124>
 8000dec:	18eb      	adds	r3, r5, r3
 8000dee:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000df2:	d202      	bcs.n	8000dfa <__udivmoddi4+0x122>
 8000df4:	4299      	cmp	r1, r3
 8000df6:	f200 80cd 	bhi.w	8000f94 <__udivmoddi4+0x2bc>
 8000dfa:	4684      	mov	ip, r0
 8000dfc:	1a59      	subs	r1, r3, r1
 8000dfe:	b2a3      	uxth	r3, r4
 8000e00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e04:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e08:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e0c:	fb08 f800 	mul.w	r8, r8, r0
 8000e10:	45a0      	cmp	r8, r4
 8000e12:	d907      	bls.n	8000e24 <__udivmoddi4+0x14c>
 8000e14:	192c      	adds	r4, r5, r4
 8000e16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e1a:	d202      	bcs.n	8000e22 <__udivmoddi4+0x14a>
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	f200 80b6 	bhi.w	8000f8e <__udivmoddi4+0x2b6>
 8000e22:	4618      	mov	r0, r3
 8000e24:	eba4 0408 	sub.w	r4, r4, r8
 8000e28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e2c:	e79f      	b.n	8000d6e <__udivmoddi4+0x96>
 8000e2e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e32:	40bb      	lsls	r3, r7
 8000e34:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e38:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e3c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e40:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e44:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e48:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e4c:	4325      	orrs	r5, r4
 8000e4e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e52:	0c2c      	lsrs	r4, r5, #16
 8000e54:	fb08 3319 	mls	r3, r8, r9, r3
 8000e58:	fa1f fa8e 	uxth.w	sl, lr
 8000e5c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e60:	fb09 f40a 	mul.w	r4, r9, sl
 8000e64:	429c      	cmp	r4, r3
 8000e66:	fa02 f207 	lsl.w	r2, r2, r7
 8000e6a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e6e:	d90b      	bls.n	8000e88 <__udivmoddi4+0x1b0>
 8000e70:	eb1e 0303 	adds.w	r3, lr, r3
 8000e74:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e78:	f080 8087 	bcs.w	8000f8a <__udivmoddi4+0x2b2>
 8000e7c:	429c      	cmp	r4, r3
 8000e7e:	f240 8084 	bls.w	8000f8a <__udivmoddi4+0x2b2>
 8000e82:	f1a9 0902 	sub.w	r9, r9, #2
 8000e86:	4473      	add	r3, lr
 8000e88:	1b1b      	subs	r3, r3, r4
 8000e8a:	b2ad      	uxth	r5, r5
 8000e8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e90:	fb08 3310 	mls	r3, r8, r0, r3
 8000e94:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e98:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e9c:	45a2      	cmp	sl, r4
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x1da>
 8000ea0:	eb1e 0404 	adds.w	r4, lr, r4
 8000ea4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ea8:	d26b      	bcs.n	8000f82 <__udivmoddi4+0x2aa>
 8000eaa:	45a2      	cmp	sl, r4
 8000eac:	d969      	bls.n	8000f82 <__udivmoddi4+0x2aa>
 8000eae:	3802      	subs	r0, #2
 8000eb0:	4474      	add	r4, lr
 8000eb2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000eb6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eba:	eba4 040a 	sub.w	r4, r4, sl
 8000ebe:	454c      	cmp	r4, r9
 8000ec0:	46c2      	mov	sl, r8
 8000ec2:	464b      	mov	r3, r9
 8000ec4:	d354      	bcc.n	8000f70 <__udivmoddi4+0x298>
 8000ec6:	d051      	beq.n	8000f6c <__udivmoddi4+0x294>
 8000ec8:	2e00      	cmp	r6, #0
 8000eca:	d069      	beq.n	8000fa0 <__udivmoddi4+0x2c8>
 8000ecc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ed0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ed4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ed8:	40fd      	lsrs	r5, r7
 8000eda:	40fc      	lsrs	r4, r7
 8000edc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ee0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ee4:	2700      	movs	r7, #0
 8000ee6:	e747      	b.n	8000d78 <__udivmoddi4+0xa0>
 8000ee8:	f1c2 0320 	rsb	r3, r2, #32
 8000eec:	fa20 f703 	lsr.w	r7, r0, r3
 8000ef0:	4095      	lsls	r5, r2
 8000ef2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ef6:	fa21 f303 	lsr.w	r3, r1, r3
 8000efa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000efe:	4338      	orrs	r0, r7
 8000f00:	0c01      	lsrs	r1, r0, #16
 8000f02:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f06:	fa1f f885 	uxth.w	r8, r5
 8000f0a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f12:	fb07 f308 	mul.w	r3, r7, r8
 8000f16:	428b      	cmp	r3, r1
 8000f18:	fa04 f402 	lsl.w	r4, r4, r2
 8000f1c:	d907      	bls.n	8000f2e <__udivmoddi4+0x256>
 8000f1e:	1869      	adds	r1, r5, r1
 8000f20:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f24:	d22f      	bcs.n	8000f86 <__udivmoddi4+0x2ae>
 8000f26:	428b      	cmp	r3, r1
 8000f28:	d92d      	bls.n	8000f86 <__udivmoddi4+0x2ae>
 8000f2a:	3f02      	subs	r7, #2
 8000f2c:	4429      	add	r1, r5
 8000f2e:	1acb      	subs	r3, r1, r3
 8000f30:	b281      	uxth	r1, r0
 8000f32:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f36:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f3a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f3e:	fb00 f308 	mul.w	r3, r0, r8
 8000f42:	428b      	cmp	r3, r1
 8000f44:	d907      	bls.n	8000f56 <__udivmoddi4+0x27e>
 8000f46:	1869      	adds	r1, r5, r1
 8000f48:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f4c:	d217      	bcs.n	8000f7e <__udivmoddi4+0x2a6>
 8000f4e:	428b      	cmp	r3, r1
 8000f50:	d915      	bls.n	8000f7e <__udivmoddi4+0x2a6>
 8000f52:	3802      	subs	r0, #2
 8000f54:	4429      	add	r1, r5
 8000f56:	1ac9      	subs	r1, r1, r3
 8000f58:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f5c:	e73b      	b.n	8000dd6 <__udivmoddi4+0xfe>
 8000f5e:	4637      	mov	r7, r6
 8000f60:	4630      	mov	r0, r6
 8000f62:	e709      	b.n	8000d78 <__udivmoddi4+0xa0>
 8000f64:	4607      	mov	r7, r0
 8000f66:	e6e7      	b.n	8000d38 <__udivmoddi4+0x60>
 8000f68:	4618      	mov	r0, r3
 8000f6a:	e6fb      	b.n	8000d64 <__udivmoddi4+0x8c>
 8000f6c:	4541      	cmp	r1, r8
 8000f6e:	d2ab      	bcs.n	8000ec8 <__udivmoddi4+0x1f0>
 8000f70:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f74:	eb69 020e 	sbc.w	r2, r9, lr
 8000f78:	3801      	subs	r0, #1
 8000f7a:	4613      	mov	r3, r2
 8000f7c:	e7a4      	b.n	8000ec8 <__udivmoddi4+0x1f0>
 8000f7e:	4660      	mov	r0, ip
 8000f80:	e7e9      	b.n	8000f56 <__udivmoddi4+0x27e>
 8000f82:	4618      	mov	r0, r3
 8000f84:	e795      	b.n	8000eb2 <__udivmoddi4+0x1da>
 8000f86:	4667      	mov	r7, ip
 8000f88:	e7d1      	b.n	8000f2e <__udivmoddi4+0x256>
 8000f8a:	4681      	mov	r9, r0
 8000f8c:	e77c      	b.n	8000e88 <__udivmoddi4+0x1b0>
 8000f8e:	3802      	subs	r0, #2
 8000f90:	442c      	add	r4, r5
 8000f92:	e747      	b.n	8000e24 <__udivmoddi4+0x14c>
 8000f94:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f98:	442b      	add	r3, r5
 8000f9a:	e72f      	b.n	8000dfc <__udivmoddi4+0x124>
 8000f9c:	4638      	mov	r0, r7
 8000f9e:	e708      	b.n	8000db2 <__udivmoddi4+0xda>
 8000fa0:	4637      	mov	r7, r6
 8000fa2:	e6e9      	b.n	8000d78 <__udivmoddi4+0xa0>

08000fa4 <__aeabi_idiv0>:
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop

08000fa8 <app_init>:
sen0169*				sensor_sen0169		= NULL;
sen0189*				sensor_sen0189		= NULL;
sen0237a*				sensor_sen0237a		= NULL;
char*					message				= NULL;

void app_init(ADC_HandleTypeDef* hadc){
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
	configure_delay();
 8000fb0:	f000 f81b 	bl	8000fea <configure_delay>
	configure_ssd1306();
 8000fb4:	f000 f81f 	bl	8000ff6 <configure_ssd1306>
	configure_init_screen();
 8000fb8:	f000 f826 	bl	8001008 <configure_init_screen>
	configure_esp();
 8000fbc:	f000 f840 	bl	8001040 <configure_esp>
	configure_dma(hadc);
 8000fc0:	6878      	ldr	r0, [r7, #4]
 8000fc2:	f000 f875 	bl	80010b0 <configure_dma>

	configure_ds18b20();
 8000fc6:	f000 f895 	bl	80010f4 <configure_ds18b20>
	configure_sen0161();
 8000fca:	f000 f8b5 	bl	8001138 <configure_sen0161>
	configure_sen0165();
 8000fce:	f000 f8db 	bl	8001188 <configure_sen0165>
	configure_sen0169();
 8000fd2:	f000 f901 	bl	80011d8 <configure_sen0169>
	configure_sen0189();
 8000fd6:	f000 f927 	bl	8001228 <configure_sen0189>
	configure_sen0237a();
 8000fda:	f000 f947 	bl	800126c <configure_sen0237a>

	configure_mqtt_client();
 8000fde:	f000 f98f 	bl	8001300 <configure_mqtt_client>
}
 8000fe2:	bf00      	nop
 8000fe4:	3708      	adds	r7, #8
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}

08000fea <configure_delay>:

void configure_delay(void){
 8000fea:	b580      	push	{r7, lr}
 8000fec:	af00      	add	r7, sp, #0
	DWT_Init();
 8000fee:	f006 fb09 	bl	8007604 <DWT_Init>
}
 8000ff2:	bf00      	nop
 8000ff4:	bd80      	pop	{r7, pc}

08000ff6 <configure_ssd1306>:

void configure_ssd1306(void){
 8000ff6:	b580      	push	{r7, lr}
 8000ff8:	af00      	add	r7, sp, #0
	SSD1306_Init();
 8000ffa:	f006 faa5 	bl	8007548 <SSD1306_Init>
	SDD1306_Clear_Screen();
 8000ffe:	f006 fa73 	bl	80074e8 <SDD1306_Clear_Screen>
}
 8001002:	bf00      	nop
 8001004:	bd80      	pop	{r7, pc}
	...

08001008 <configure_init_screen>:

void configure_init_screen(void){
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
	SSD1306_Write_Centered_String((uint8_t*) "FI-GUARDIAN", (uint8_t) 2);
 800100c:	2102      	movs	r1, #2
 800100e:	4809      	ldr	r0, [pc, #36]	; (8001034 <configure_init_screen+0x2c>)
 8001010:	f006 fa44 	bl	800749c <SSD1306_Write_Centered_String>
	SSD1306_Write_Centered_String((uint8_t*) "SMART WATER", (uint8_t) 3);
 8001014:	2103      	movs	r1, #3
 8001016:	4808      	ldr	r0, [pc, #32]	; (8001038 <configure_init_screen+0x30>)
 8001018:	f006 fa40 	bl	800749c <SSD1306_Write_Centered_String>
	SSD1306_Write_Centered_String((uint8_t*) "powered by UFU & VM9", (uint8_t) 5);
 800101c:	2105      	movs	r1, #5
 800101e:	4807      	ldr	r0, [pc, #28]	; (800103c <configure_init_screen+0x34>)
 8001020:	f006 fa3c 	bl	800749c <SSD1306_Write_Centered_String>
	stm32_util_delay_in_seconds(8);
 8001024:	2008      	movs	r0, #8
 8001026:	f007 f867 	bl	80080f8 <stm32_util_delay_in_seconds>
	SDD1306_Clear_Screen();
 800102a:	f006 fa5d 	bl	80074e8 <SDD1306_Clear_Screen>
}
 800102e:	bf00      	nop
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	08011330 	.word	0x08011330
 8001038:	0801133c 	.word	0x0801133c
 800103c:	08011348 	.word	0x08011348

08001040 <configure_esp>:

void configure_esp(void){
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
	logger_info(logger_get_instance(), (char*) "Configurando ESP8266");
 8001044:	f006 fb24 	bl	8007690 <logger_get_instance>
 8001048:	4603      	mov	r3, r0
 800104a:	4913      	ldr	r1, [pc, #76]	; (8001098 <configure_esp+0x58>)
 800104c:	4618      	mov	r0, r3
 800104e:	f006 fb3d 	bl	80076cc <logger_info>
	esp = esp8266_init();
 8001052:	f001 fed6 	bl	8002e02 <esp8266_init>
 8001056:	4602      	mov	r2, r0
 8001058:	4b10      	ldr	r3, [pc, #64]	; (800109c <configure_esp+0x5c>)
 800105a:	601a      	str	r2, [r3, #0]
	esp8266_setOprToStationSoftAP(esp);
 800105c:	4b0f      	ldr	r3, [pc, #60]	; (800109c <configure_esp+0x5c>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4618      	mov	r0, r3
 8001062:	f001 ff4b 	bl	8002efc <esp8266_setOprToStationSoftAP>
	esp8266_enableMUX(esp);
 8001066:	4b0d      	ldr	r3, [pc, #52]	; (800109c <configure_esp+0x5c>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4618      	mov	r0, r3
 800106c:	f001 ffa6 	bl	8002fbc <esp8266_enableMUX>
	esp8266_joinAP(esp, SMART_WATER_PROPERTIES_SSID, SMART_WATER_PROPERTIES_PASSWORD_SSID);
 8001070:	4b0a      	ldr	r3, [pc, #40]	; (800109c <configure_esp+0x5c>)
 8001072:	6818      	ldr	r0, [r3, #0]
 8001074:	4b0a      	ldr	r3, [pc, #40]	; (80010a0 <configure_esp+0x60>)
 8001076:	6819      	ldr	r1, [r3, #0]
 8001078:	4b0a      	ldr	r3, [pc, #40]	; (80010a4 <configure_esp+0x64>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	461a      	mov	r2, r3
 800107e:	f001 ff65 	bl	8002f4c <esp8266_joinAP>
	esp8266_createTCP(esp, (uint8_t*) SMART_WATER_PROPERTIES_API_GATEWAY_HOST, SMART_WATER_PROPERTIES_API_GATEWAY_PORT);
 8001082:	4b06      	ldr	r3, [pc, #24]	; (800109c <configure_esp+0x5c>)
 8001084:	6818      	ldr	r0, [r3, #0]
 8001086:	4b08      	ldr	r3, [pc, #32]	; (80010a8 <configure_esp+0x68>)
 8001088:	6819      	ldr	r1, [r3, #0]
 800108a:	4b08      	ldr	r3, [pc, #32]	; (80010ac <configure_esp+0x6c>)
 800108c:	881b      	ldrh	r3, [r3, #0]
 800108e:	461a      	mov	r2, r3
 8001090:	f001 ffb0 	bl	8002ff4 <esp8266_createTCP>
}
 8001094:	bf00      	nop
 8001096:	bd80      	pop	{r7, pc}
 8001098:	08011360 	.word	0x08011360
 800109c:	20000ab4 	.word	0x20000ab4
 80010a0:	20000008 	.word	0x20000008
 80010a4:	2000000c 	.word	0x2000000c
 80010a8:	20000010 	.word	0x20000010
 80010ac:	20000014 	.word	0x20000014

080010b0 <configure_dma>:

void configure_dma(ADC_HandleTypeDef* hadc){
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
	if( hadc != NULL ){
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d012      	beq.n	80010e4 <configure_dma+0x34>
		logger_info(logger_get_instance(), (char*) "Configurando DMA");
 80010be:	f006 fae7 	bl	8007690 <logger_get_instance>
 80010c2:	4603      	mov	r3, r0
 80010c4:	4909      	ldr	r1, [pc, #36]	; (80010ec <configure_dma+0x3c>)
 80010c6:	4618      	mov	r0, r3
 80010c8:	f006 fb00 	bl	80076cc <logger_info>
		dma = direct_memory_access_init(hadc, 4);
 80010cc:	2104      	movs	r1, #4
 80010ce:	6878      	ldr	r0, [r7, #4]
 80010d0:	f000 ffc0 	bl	8002054 <direct_memory_access_init>
 80010d4:	4602      	mov	r2, r0
 80010d6:	4b06      	ldr	r3, [pc, #24]	; (80010f0 <configure_dma+0x40>)
 80010d8:	601a      	str	r2, [r3, #0]
		direct_memory_access_start(dma);
 80010da:	4b05      	ldr	r3, [pc, #20]	; (80010f0 <configure_dma+0x40>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4618      	mov	r0, r3
 80010e0:	f000 ffe9 	bl	80020b6 <direct_memory_access_start>
	}
}
 80010e4:	bf00      	nop
 80010e6:	3708      	adds	r7, #8
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	08011378 	.word	0x08011378
 80010f0:	20000ab8 	.word	0x20000ab8

080010f4 <configure_ds18b20>:

void configure_ds18b20(void){
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
	if( DS18B20_PROPERTIES_PORT != NULL ){
 80010f8:	4b0b      	ldr	r3, [pc, #44]	; (8001128 <configure_ds18b20+0x34>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d011      	beq.n	8001124 <configure_ds18b20+0x30>
		logger_info(logger_get_instance(), (char*) "Configurando DS18B20");
 8001100:	f006 fac6 	bl	8007690 <logger_get_instance>
 8001104:	4603      	mov	r3, r0
 8001106:	4909      	ldr	r1, [pc, #36]	; (800112c <configure_ds18b20+0x38>)
 8001108:	4618      	mov	r0, r3
 800110a:	f006 fadf 	bl	80076cc <logger_info>
		sensor_ds18b20 = ds18b20_init(DS18B20_PROPERTIES_PORT, DS18B20_PROPERTIES_PIN);
 800110e:	4b06      	ldr	r3, [pc, #24]	; (8001128 <configure_ds18b20+0x34>)
 8001110:	681a      	ldr	r2, [r3, #0]
 8001112:	4b07      	ldr	r3, [pc, #28]	; (8001130 <configure_ds18b20+0x3c>)
 8001114:	881b      	ldrh	r3, [r3, #0]
 8001116:	4619      	mov	r1, r3
 8001118:	4610      	mov	r0, r2
 800111a:	f001 f825 	bl	8002168 <ds18b20_init>
 800111e:	4602      	mov	r2, r0
 8001120:	4b04      	ldr	r3, [pc, #16]	; (8001134 <configure_ds18b20+0x40>)
 8001122:	601a      	str	r2, [r3, #0]
	}
}
 8001124:	bf00      	nop
 8001126:	bd80      	pop	{r7, pc}
 8001128:	20000034 	.word	0x20000034
 800112c:	0801138c 	.word	0x0801138c
 8001130:	20000038 	.word	0x20000038
 8001134:	20000ac0 	.word	0x20000ac0

08001138 <configure_sen0161>:

void configure_sen0161(void){
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
	if( SEN0161_PROPERTIES_PIN != 0 ){
 800113c:	4b0d      	ldr	r3, [pc, #52]	; (8001174 <configure_sen0161+0x3c>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d015      	beq.n	8001170 <configure_sen0161+0x38>
		logger_info(logger_get_instance(), (char*) "Configurando SEN0161");
 8001144:	f006 faa4 	bl	8007690 <logger_get_instance>
 8001148:	4603      	mov	r3, r0
 800114a:	490b      	ldr	r1, [pc, #44]	; (8001178 <configure_sen0161+0x40>)
 800114c:	4618      	mov	r0, r3
 800114e:	f006 fabd 	bl	80076cc <logger_info>
		sensor_sen0161 = sen0161_init(dma, SEN0161_PROPERTIES_PIN, SEN0161_PROPERTIES_OFFSET);
 8001152:	4b0a      	ldr	r3, [pc, #40]	; (800117c <configure_sen0161+0x44>)
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	4b07      	ldr	r3, [pc, #28]	; (8001174 <configure_sen0161+0x3c>)
 8001158:	6819      	ldr	r1, [r3, #0]
 800115a:	4b09      	ldr	r3, [pc, #36]	; (8001180 <configure_sen0161+0x48>)
 800115c:	edd3 7a00 	vldr	s15, [r3]
 8001160:	eeb0 0a67 	vmov.f32	s0, s15
 8001164:	4610      	mov	r0, r2
 8001166:	f005 f819 	bl	800619c <sen0161_init>
 800116a:	4602      	mov	r2, r0
 800116c:	4b05      	ldr	r3, [pc, #20]	; (8001184 <configure_sen0161+0x4c>)
 800116e:	601a      	str	r2, [r3, #0]
	}
}
 8001170:	bf00      	nop
 8001172:	bd80      	pop	{r7, pc}
 8001174:	20000040 	.word	0x20000040
 8001178:	080113a4 	.word	0x080113a4
 800117c:	20000ab8 	.word	0x20000ab8
 8001180:	20000044 	.word	0x20000044
 8001184:	20000ac4 	.word	0x20000ac4

08001188 <configure_sen0165>:

void configure_sen0165(void){
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
	if( SEN0165_PROPERTIES_PIN != 0 ){
 800118c:	4b0d      	ldr	r3, [pc, #52]	; (80011c4 <configure_sen0165+0x3c>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d015      	beq.n	80011c0 <configure_sen0165+0x38>
		logger_info(logger_get_instance(), (char*) "Configurando SEN0165");
 8001194:	f006 fa7c 	bl	8007690 <logger_get_instance>
 8001198:	4603      	mov	r3, r0
 800119a:	490b      	ldr	r1, [pc, #44]	; (80011c8 <configure_sen0165+0x40>)
 800119c:	4618      	mov	r0, r3
 800119e:	f006 fa95 	bl	80076cc <logger_info>
		sensor_sen0165 = sen0165_init(dma, SEN0165_PROPERTIES_PIN, SEN0165_PROPERTIES_OFFSET);
 80011a2:	4b0a      	ldr	r3, [pc, #40]	; (80011cc <configure_sen0165+0x44>)
 80011a4:	681a      	ldr	r2, [r3, #0]
 80011a6:	4b07      	ldr	r3, [pc, #28]	; (80011c4 <configure_sen0165+0x3c>)
 80011a8:	6819      	ldr	r1, [r3, #0]
 80011aa:	4b09      	ldr	r3, [pc, #36]	; (80011d0 <configure_sen0165+0x48>)
 80011ac:	edd3 7a00 	vldr	s15, [r3]
 80011b0:	eeb0 0a67 	vmov.f32	s0, s15
 80011b4:	4610      	mov	r0, r2
 80011b6:	f005 f9a7 	bl	8006508 <sen0165_init>
 80011ba:	4602      	mov	r2, r0
 80011bc:	4b05      	ldr	r3, [pc, #20]	; (80011d4 <configure_sen0165+0x4c>)
 80011be:	601a      	str	r2, [r3, #0]
	}
}
 80011c0:	bf00      	nop
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	2000004c 	.word	0x2000004c
 80011c8:	080113bc 	.word	0x080113bc
 80011cc:	20000ab8 	.word	0x20000ab8
 80011d0:	20000ae0 	.word	0x20000ae0
 80011d4:	20000ac8 	.word	0x20000ac8

080011d8 <configure_sen0169>:

void configure_sen0169(void){
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
	if( SEN0169_PROPERTIES_PIN != 0 ){
 80011dc:	4b0d      	ldr	r3, [pc, #52]	; (8001214 <configure_sen0169+0x3c>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d015      	beq.n	8001210 <configure_sen0169+0x38>
		logger_info(logger_get_instance(), (char*) "Configurando SEN0169");
 80011e4:	f006 fa54 	bl	8007690 <logger_get_instance>
 80011e8:	4603      	mov	r3, r0
 80011ea:	490b      	ldr	r1, [pc, #44]	; (8001218 <configure_sen0169+0x40>)
 80011ec:	4618      	mov	r0, r3
 80011ee:	f006 fa6d 	bl	80076cc <logger_info>
		sensor_sen0169 = sen0169_init(dma, SEN0169_PROPERTIES_PIN, SEN0169_PROPERTIES_OFFSET);
 80011f2:	4b0a      	ldr	r3, [pc, #40]	; (800121c <configure_sen0169+0x44>)
 80011f4:	681a      	ldr	r2, [r3, #0]
 80011f6:	4b07      	ldr	r3, [pc, #28]	; (8001214 <configure_sen0169+0x3c>)
 80011f8:	6819      	ldr	r1, [r3, #0]
 80011fa:	4b09      	ldr	r3, [pc, #36]	; (8001220 <configure_sen0169+0x48>)
 80011fc:	edd3 7a00 	vldr	s15, [r3]
 8001200:	eeb0 0a67 	vmov.f32	s0, s15
 8001204:	4610      	mov	r0, r2
 8001206:	f005 fb6d 	bl	80068e4 <sen0169_init>
 800120a:	4602      	mov	r2, r0
 800120c:	4b05      	ldr	r3, [pc, #20]	; (8001224 <configure_sen0169+0x4c>)
 800120e:	601a      	str	r2, [r3, #0]
	}

}
 8001210:	bf00      	nop
 8001212:	bd80      	pop	{r7, pc}
 8001214:	20000ae4 	.word	0x20000ae4
 8001218:	080113d4 	.word	0x080113d4
 800121c:	20000ab8 	.word	0x20000ab8
 8001220:	20000ae8 	.word	0x20000ae8
 8001224:	20000acc 	.word	0x20000acc

08001228 <configure_sen0189>:

void configure_sen0189(void){
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
	if( SEN0189_PROPERTIES_PIN != 0 ){
 800122c:	4b0b      	ldr	r3, [pc, #44]	; (800125c <configure_sen0189+0x34>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d011      	beq.n	8001258 <configure_sen0189+0x30>
		logger_info(logger_get_instance(), (char*) "Configurando SEN0189");
 8001234:	f006 fa2c 	bl	8007690 <logger_get_instance>
 8001238:	4603      	mov	r3, r0
 800123a:	4909      	ldr	r1, [pc, #36]	; (8001260 <configure_sen0189+0x38>)
 800123c:	4618      	mov	r0, r3
 800123e:	f006 fa45 	bl	80076cc <logger_info>
		sensor_sen0189 = sen0189_init(dma, SEN0189_PROPERTIES_PIN);
 8001242:	4b08      	ldr	r3, [pc, #32]	; (8001264 <configure_sen0189+0x3c>)
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	4b05      	ldr	r3, [pc, #20]	; (800125c <configure_sen0189+0x34>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4619      	mov	r1, r3
 800124c:	4610      	mov	r0, r2
 800124e:	f005 fd07 	bl	8006c60 <sen0189_init>
 8001252:	4602      	mov	r2, r0
 8001254:	4b04      	ldr	r3, [pc, #16]	; (8001268 <configure_sen0189+0x40>)
 8001256:	601a      	str	r2, [r3, #0]
	}
}
 8001258:	bf00      	nop
 800125a:	bd80      	pop	{r7, pc}
 800125c:	20000058 	.word	0x20000058
 8001260:	080113ec 	.word	0x080113ec
 8001264:	20000ab8 	.word	0x20000ab8
 8001268:	20000ad0 	.word	0x20000ad0

0800126c <configure_sen0237a>:

void configure_sen0237a(void){
 800126c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800126e:	b087      	sub	sp, #28
 8001270:	af06      	add	r7, sp, #24
	if( SEN0237A_PROPERTIES_PIN != 0 ){
 8001272:	4b18      	ldr	r3, [pc, #96]	; (80012d4 <configure_sen0237a+0x68>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d028      	beq.n	80012cc <configure_sen0237a+0x60>
		logger_info(logger_get_instance(), (char*) "Configurando SEN0237A");
 800127a:	f006 fa09 	bl	8007690 <logger_get_instance>
 800127e:	4603      	mov	r3, r0
 8001280:	4915      	ldr	r1, [pc, #84]	; (80012d8 <configure_sen0237a+0x6c>)
 8001282:	4618      	mov	r0, r3
 8001284:	f006 fa22 	bl	80076cc <logger_info>
		sensor_sen0237a = sen0237a_init(dma,
 8001288:	4b14      	ldr	r3, [pc, #80]	; (80012dc <configure_sen0237a+0x70>)
 800128a:	681d      	ldr	r5, [r3, #0]
 800128c:	4b11      	ldr	r3, [pc, #68]	; (80012d4 <configure_sen0237a+0x68>)
 800128e:	681e      	ldr	r6, [r3, #0]
 8001290:	4b13      	ldr	r3, [pc, #76]	; (80012e0 <configure_sen0237a+0x74>)
 8001292:	f893 c000 	ldrb.w	ip, [r3]
 8001296:	4b13      	ldr	r3, [pc, #76]	; (80012e4 <configure_sen0237a+0x78>)
 8001298:	f893 e000 	ldrb.w	lr, [r3]
 800129c:	4b12      	ldr	r3, [pc, #72]	; (80012e8 <configure_sen0237a+0x7c>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a12      	ldr	r2, [pc, #72]	; (80012ec <configure_sen0237a+0x80>)
 80012a2:	7812      	ldrb	r2, [r2, #0]
 80012a4:	4912      	ldr	r1, [pc, #72]	; (80012f0 <configure_sen0237a+0x84>)
 80012a6:	6809      	ldr	r1, [r1, #0]
 80012a8:	4812      	ldr	r0, [pc, #72]	; (80012f4 <configure_sen0237a+0x88>)
 80012aa:	7800      	ldrb	r0, [r0, #0]
 80012ac:	4c12      	ldr	r4, [pc, #72]	; (80012f8 <configure_sen0237a+0x8c>)
 80012ae:	7824      	ldrb	r4, [r4, #0]
 80012b0:	9404      	str	r4, [sp, #16]
 80012b2:	9003      	str	r0, [sp, #12]
 80012b4:	9102      	str	r1, [sp, #8]
 80012b6:	9201      	str	r2, [sp, #4]
 80012b8:	9300      	str	r3, [sp, #0]
 80012ba:	4673      	mov	r3, lr
 80012bc:	4662      	mov	r2, ip
 80012be:	4631      	mov	r1, r6
 80012c0:	4628      	mov	r0, r5
 80012c2:	f005 fd39 	bl	8006d38 <sen0237a_init>
 80012c6:	4602      	mov	r2, r0
 80012c8:	4b0c      	ldr	r3, [pc, #48]	; (80012fc <configure_sen0237a+0x90>)
 80012ca:	601a      	str	r2, [r3, #0]
				SEN0237A_PROPERTIES_TEMPERATURE_POINT_1,
				SEN0237A_PROPERTIES_VOLTAGE_POINT_2,
				SEN0237A_PROPERTIES_TEMPERATURE_POINT_2,
				SEN0237A_PROPERTIES_TEMPERATURE_CURRENT);
	}
}
 80012cc:	bf00      	nop
 80012ce:	3704      	adds	r7, #4
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012d4:	20000060 	.word	0x20000060
 80012d8:	08011404 	.word	0x08011404
 80012dc:	20000ab8 	.word	0x20000ab8
 80012e0:	20000aec 	.word	0x20000aec
 80012e4:	20000064 	.word	0x20000064
 80012e8:	20000af0 	.word	0x20000af0
 80012ec:	20000065 	.word	0x20000065
 80012f0:	20000af4 	.word	0x20000af4
 80012f4:	20000066 	.word	0x20000066
 80012f8:	20000af8 	.word	0x20000af8
 80012fc:	20000ad4 	.word	0x20000ad4

08001300 <configure_mqtt_client>:

void configure_mqtt_client(void){
 8001300:	b590      	push	{r4, r7, lr}
 8001302:	b083      	sub	sp, #12
 8001304:	af02      	add	r7, sp, #8
	logger_info(logger_get_instance(), (char*) "Conectando ao Gateway");
 8001306:	f006 f9c3 	bl	8007690 <logger_get_instance>
 800130a:	4603      	mov	r3, r0
 800130c:	490f      	ldr	r1, [pc, #60]	; (800134c <configure_mqtt_client+0x4c>)
 800130e:	4618      	mov	r0, r3
 8001310:	f006 f9dc 	bl	80076cc <logger_info>
	mqtt = mqtt_client_init(esp);
 8001314:	4b0e      	ldr	r3, [pc, #56]	; (8001350 <configure_mqtt_client+0x50>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4618      	mov	r0, r3
 800131a:	f003 f975 	bl	8004608 <mqtt_client_init>
 800131e:	4602      	mov	r2, r0
 8001320:	4b0c      	ldr	r3, [pc, #48]	; (8001354 <configure_mqtt_client+0x54>)
 8001322:	601a      	str	r2, [r3, #0]
	mqtt_client_connect(mqtt, SMART_WATER_PROPERTIES_SMART_WATER_ID, SMART_WATER_PROPERTIES_API_GATEWAY_HOST, SMART_WATER_PROPERTIES_API_GATEWAY_PORT, 60, true);
 8001324:	4b0b      	ldr	r3, [pc, #44]	; (8001354 <configure_mqtt_client+0x54>)
 8001326:	6818      	ldr	r0, [r3, #0]
 8001328:	4b0b      	ldr	r3, [pc, #44]	; (8001358 <configure_mqtt_client+0x58>)
 800132a:	6819      	ldr	r1, [r3, #0]
 800132c:	4b0b      	ldr	r3, [pc, #44]	; (800135c <configure_mqtt_client+0x5c>)
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	4b0b      	ldr	r3, [pc, #44]	; (8001360 <configure_mqtt_client+0x60>)
 8001332:	881b      	ldrh	r3, [r3, #0]
 8001334:	461c      	mov	r4, r3
 8001336:	2301      	movs	r3, #1
 8001338:	9301      	str	r3, [sp, #4]
 800133a:	233c      	movs	r3, #60	; 0x3c
 800133c:	9300      	str	r3, [sp, #0]
 800133e:	4623      	mov	r3, r4
 8001340:	f003 fa82 	bl	8004848 <mqtt_client_connect>
}
 8001344:	bf00      	nop
 8001346:	3704      	adds	r7, #4
 8001348:	46bd      	mov	sp, r7
 800134a:	bd90      	pop	{r4, r7, pc}
 800134c:	0801141c 	.word	0x0801141c
 8001350:	20000ab4 	.word	0x20000ab4
 8001354:	20000abc 	.word	0x20000abc
 8001358:	20000004 	.word	0x20000004
 800135c:	20000010 	.word	0x20000010
 8001360:	20000014 	.word	0x20000014

08001364 <app_measure>:

void app_measure(void){
 8001364:	b590      	push	{r4, r7, lr}
 8001366:	b095      	sub	sp, #84	; 0x54
 8001368:	af00      	add	r7, sp, #0
	logger_clean(logger_get_instance());
 800136a:	f006 f991 	bl	8007690 <logger_get_instance>
 800136e:	4603      	mov	r3, r0
 8001370:	4618      	mov	r0, r3
 8001372:	f006 f9df 	bl	8007734 <logger_clean>

	message_builder* message_builder_instance = message_builder_get_instance();
 8001376:	f006 fc1b 	bl	8007bb0 <message_builder_get_instance>
 800137a:	64f8      	str	r0, [r7, #76]	; 0x4c
	message_builder_instance = message_builder_set_reply_host(message_builder_instance, SMART_WATER_PROPERTIES_REPLY_HOST);
 800137c:	4bb6      	ldr	r3, [pc, #728]	; (8001658 <app_measure+0x2f4>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4619      	mov	r1, r3
 8001382:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001384:	f006 fc6a 	bl	8007c5c <message_builder_set_reply_host>
 8001388:	64f8      	str	r0, [r7, #76]	; 0x4c
	message_builder_instance = message_builder_set_reply_port(message_builder_instance, SMART_WATER_PROPERTIES_REPLY_PORT);
 800138a:	4bb4      	ldr	r3, [pc, #720]	; (800165c <app_measure+0x2f8>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4619      	mov	r1, r3
 8001390:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001392:	f006 fc77 	bl	8007c84 <message_builder_set_reply_port>
 8001396:	64f8      	str	r0, [r7, #76]	; 0x4c
	message_builder_instance = message_builder_set_reply_channel(message_builder_instance, SMART_WATER_PROPERTIES_REPLY_CHANNEL);
 8001398:	4bb1      	ldr	r3, [pc, #708]	; (8001660 <app_measure+0x2fc>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4619      	mov	r1, r3
 800139e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80013a0:	f006 fc84 	bl	8007cac <message_builder_set_reply_channel>
 80013a4:	64f8      	str	r0, [r7, #76]	; 0x4c
	message_builder_instance = message_builder_set_method(message_builder_instance, SMART_WATER_PROPERTIES_METHOD);
 80013a6:	4baf      	ldr	r3, [pc, #700]	; (8001664 <app_measure+0x300>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4619      	mov	r1, r3
 80013ac:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80013ae:	f006 fc91 	bl	8007cd4 <message_builder_set_method>
 80013b2:	64f8      	str	r0, [r7, #76]	; 0x4c
	message_builder_instance = message_builder_set_uri(message_builder_instance, SMART_WATER_PROPERTIES_URI);
 80013b4:	4bac      	ldr	r3, [pc, #688]	; (8001668 <app_measure+0x304>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4619      	mov	r1, r3
 80013ba:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80013bc:	f006 fc9e 	bl	8007cfc <message_builder_set_uri>
 80013c0:	64f8      	str	r0, [r7, #76]	; 0x4c

	char* buffer_ds18b20 = NULL;
 80013c2:	2300      	movs	r3, #0
 80013c4:	64bb      	str	r3, [r7, #72]	; 0x48
	char* buffer_sen0161 = NULL;
 80013c6:	2300      	movs	r3, #0
 80013c8:	647b      	str	r3, [r7, #68]	; 0x44
	char* buffer_sen0165 = NULL;
 80013ca:	2300      	movs	r3, #0
 80013cc:	643b      	str	r3, [r7, #64]	; 0x40
	char* buffer_sen0169 = NULL;
 80013ce:	2300      	movs	r3, #0
 80013d0:	63fb      	str	r3, [r7, #60]	; 0x3c
	char* buffer_sen0189 = NULL;
 80013d2:	2300      	movs	r3, #0
 80013d4:	63bb      	str	r3, [r7, #56]	; 0x38
	char* buffer_sen0237a = NULL;
 80013d6:	2300      	movs	r3, #0
 80013d8:	637b      	str	r3, [r7, #52]	; 0x34


	if( sensor_ds18b20 != NULL ){
 80013da:	4ba4      	ldr	r3, [pc, #656]	; (800166c <app_measure+0x308>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d031      	beq.n	8001446 <app_measure+0xe2>
		float temperature = ds18b20_read(sensor_ds18b20);
 80013e2:	4ba2      	ldr	r3, [pc, #648]	; (800166c <app_measure+0x308>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4618      	mov	r0, r3
 80013e8:	f000 ff80 	bl	80022ec <ds18b20_read>
 80013ec:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30
		buffer_ds18b20 = (char*) malloc(10*sizeof(char));
 80013f0:	200a      	movs	r0, #10
 80013f2:	f00b f985 	bl	800c700 <malloc>
 80013f6:	4603      	mov	r3, r0
 80013f8:	64bb      	str	r3, [r7, #72]	; 0x48
		gcvt(temperature, 6, buffer_ds18b20);
 80013fa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80013fc:	f7ff f8b4 	bl	8000568 <__aeabi_f2d>
 8001400:	4603      	mov	r3, r0
 8001402:	460c      	mov	r4, r1
 8001404:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001406:	2006      	movs	r0, #6
 8001408:	ec44 3b10 	vmov	d0, r3, r4
 800140c:	f00b f922 	bl	800c654 <gcvt>
		message_builder_instance = message_builder_put_body(message_builder_instance, DS18B20_PROPERTIES_LABEL, buffer_ds18b20);
 8001410:	4b97      	ldr	r3, [pc, #604]	; (8001670 <app_measure+0x30c>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001416:	4619      	mov	r1, r3
 8001418:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800141a:	f006 fc83 	bl	8007d24 <message_builder_put_body>
 800141e:	64f8      	str	r0, [r7, #76]	; 0x4c

		char* property_value = string_util_property(DS18B20_PROPERTIES_LABEL, buffer_ds18b20);
 8001420:	4b93      	ldr	r3, [pc, #588]	; (8001670 <app_measure+0x30c>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001426:	4618      	mov	r0, r3
 8001428:	f006 fea2 	bl	8008170 <string_util_property>
 800142c:	62f8      	str	r0, [r7, #44]	; 0x2c
		logger_info(logger_get_instance(), property_value);
 800142e:	f006 f92f 	bl	8007690 <logger_get_instance>
 8001432:	4603      	mov	r3, r0
 8001434:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001436:	4618      	mov	r0, r3
 8001438:	f006 f948 	bl	80076cc <logger_info>
		free(property_value);
 800143c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800143e:	f00b f967 	bl	800c710 <free>
		property_value = NULL;
 8001442:	2300      	movs	r3, #0
 8001444:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	if( sensor_sen0161 != NULL ){
 8001446:	4b8b      	ldr	r3, [pc, #556]	; (8001674 <app_measure+0x310>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d031      	beq.n	80014b2 <app_measure+0x14e>
		float ph = sen0161_read(sensor_sen0161);
 800144e:	4b89      	ldr	r3, [pc, #548]	; (8001674 <app_measure+0x310>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4618      	mov	r0, r3
 8001454:	f004 ff50 	bl	80062f8 <sen0161_read>
 8001458:	ed87 0a0a 	vstr	s0, [r7, #40]	; 0x28
		buffer_sen0161 = (char*) malloc(10*sizeof(char));
 800145c:	200a      	movs	r0, #10
 800145e:	f00b f94f 	bl	800c700 <malloc>
 8001462:	4603      	mov	r3, r0
 8001464:	647b      	str	r3, [r7, #68]	; 0x44
		gcvt(ph, 6, buffer_sen0161);
 8001466:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001468:	f7ff f87e 	bl	8000568 <__aeabi_f2d>
 800146c:	4603      	mov	r3, r0
 800146e:	460c      	mov	r4, r1
 8001470:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001472:	2006      	movs	r0, #6
 8001474:	ec44 3b10 	vmov	d0, r3, r4
 8001478:	f00b f8ec 	bl	800c654 <gcvt>
		message_builder_instance = message_builder_put_body(message_builder_instance, SEN0161_PROPERTIES_LABEL, buffer_sen0161);
 800147c:	4b7e      	ldr	r3, [pc, #504]	; (8001678 <app_measure+0x314>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001482:	4619      	mov	r1, r3
 8001484:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001486:	f006 fc4d 	bl	8007d24 <message_builder_put_body>
 800148a:	64f8      	str	r0, [r7, #76]	; 0x4c

		char* property_value = string_util_property(SEN0161_PROPERTIES_LABEL, buffer_sen0161);
 800148c:	4b7a      	ldr	r3, [pc, #488]	; (8001678 <app_measure+0x314>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001492:	4618      	mov	r0, r3
 8001494:	f006 fe6c 	bl	8008170 <string_util_property>
 8001498:	6278      	str	r0, [r7, #36]	; 0x24
		logger_info(logger_get_instance(), property_value);
 800149a:	f006 f8f9 	bl	8007690 <logger_get_instance>
 800149e:	4603      	mov	r3, r0
 80014a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80014a2:	4618      	mov	r0, r3
 80014a4:	f006 f912 	bl	80076cc <logger_info>
		free(property_value);
 80014a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80014aa:	f00b f931 	bl	800c710 <free>
		property_value = NULL;
 80014ae:	2300      	movs	r3, #0
 80014b0:	627b      	str	r3, [r7, #36]	; 0x24
	}

	if( sensor_sen0165 != NULL ){
 80014b2:	4b72      	ldr	r3, [pc, #456]	; (800167c <app_measure+0x318>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d031      	beq.n	800151e <app_measure+0x1ba>
		float orp = sen0165_read(sensor_sen0165);
 80014ba:	4b70      	ldr	r3, [pc, #448]	; (800167c <app_measure+0x318>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4618      	mov	r0, r3
 80014c0:	f005 f8e4 	bl	800668c <sen0165_read>
 80014c4:	ed87 0a08 	vstr	s0, [r7, #32]
		buffer_sen0165 = (char*) malloc(10*sizeof(char));
 80014c8:	200a      	movs	r0, #10
 80014ca:	f00b f919 	bl	800c700 <malloc>
 80014ce:	4603      	mov	r3, r0
 80014d0:	643b      	str	r3, [r7, #64]	; 0x40
		gcvt(orp, 6, buffer_sen0165);
 80014d2:	6a38      	ldr	r0, [r7, #32]
 80014d4:	f7ff f848 	bl	8000568 <__aeabi_f2d>
 80014d8:	4603      	mov	r3, r0
 80014da:	460c      	mov	r4, r1
 80014dc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80014de:	2006      	movs	r0, #6
 80014e0:	ec44 3b10 	vmov	d0, r3, r4
 80014e4:	f00b f8b6 	bl	800c654 <gcvt>
		message_builder_instance = message_builder_put_body(message_builder_instance, SEN0165_PROPERTIES_LABEL, buffer_sen0165);
 80014e8:	4b65      	ldr	r3, [pc, #404]	; (8001680 <app_measure+0x31c>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80014ee:	4619      	mov	r1, r3
 80014f0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80014f2:	f006 fc17 	bl	8007d24 <message_builder_put_body>
 80014f6:	64f8      	str	r0, [r7, #76]	; 0x4c

		char* property_value = string_util_property(SEN0165_PROPERTIES_LABEL, buffer_sen0165);
 80014f8:	4b61      	ldr	r3, [pc, #388]	; (8001680 <app_measure+0x31c>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80014fe:	4618      	mov	r0, r3
 8001500:	f006 fe36 	bl	8008170 <string_util_property>
 8001504:	61f8      	str	r0, [r7, #28]
		logger_info(logger_get_instance(), property_value);
 8001506:	f006 f8c3 	bl	8007690 <logger_get_instance>
 800150a:	4603      	mov	r3, r0
 800150c:	69f9      	ldr	r1, [r7, #28]
 800150e:	4618      	mov	r0, r3
 8001510:	f006 f8dc 	bl	80076cc <logger_info>
		free(property_value);
 8001514:	69f8      	ldr	r0, [r7, #28]
 8001516:	f00b f8fb 	bl	800c710 <free>
		property_value = NULL;
 800151a:	2300      	movs	r3, #0
 800151c:	61fb      	str	r3, [r7, #28]
	}

	if( sensor_sen0169 != NULL ){
 800151e:	4b59      	ldr	r3, [pc, #356]	; (8001684 <app_measure+0x320>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d031      	beq.n	800158a <app_measure+0x226>
		float ph = sen0169_read(sensor_sen0169);
 8001526:	4b57      	ldr	r3, [pc, #348]	; (8001684 <app_measure+0x320>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4618      	mov	r0, r3
 800152c:	f005 fa88 	bl	8006a40 <sen0169_read>
 8001530:	ed87 0a06 	vstr	s0, [r7, #24]
		buffer_sen0169 = (char*) malloc(10*sizeof(char));
 8001534:	200a      	movs	r0, #10
 8001536:	f00b f8e3 	bl	800c700 <malloc>
 800153a:	4603      	mov	r3, r0
 800153c:	63fb      	str	r3, [r7, #60]	; 0x3c
		gcvt(ph, 6, buffer_sen0169);
 800153e:	69b8      	ldr	r0, [r7, #24]
 8001540:	f7ff f812 	bl	8000568 <__aeabi_f2d>
 8001544:	4603      	mov	r3, r0
 8001546:	460c      	mov	r4, r1
 8001548:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800154a:	2006      	movs	r0, #6
 800154c:	ec44 3b10 	vmov	d0, r3, r4
 8001550:	f00b f880 	bl	800c654 <gcvt>
		message_builder_instance = message_builder_put_body(message_builder_instance, SEN0169_PROPERTIES_LABEL, buffer_sen0169);
 8001554:	4b4c      	ldr	r3, [pc, #304]	; (8001688 <app_measure+0x324>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800155a:	4619      	mov	r1, r3
 800155c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800155e:	f006 fbe1 	bl	8007d24 <message_builder_put_body>
 8001562:	64f8      	str	r0, [r7, #76]	; 0x4c

		char* property_value = string_util_property(SEN0169_PROPERTIES_LABEL, buffer_sen0169);
 8001564:	4b48      	ldr	r3, [pc, #288]	; (8001688 <app_measure+0x324>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800156a:	4618      	mov	r0, r3
 800156c:	f006 fe00 	bl	8008170 <string_util_property>
 8001570:	6178      	str	r0, [r7, #20]
		logger_info(logger_get_instance(), property_value);
 8001572:	f006 f88d 	bl	8007690 <logger_get_instance>
 8001576:	4603      	mov	r3, r0
 8001578:	6979      	ldr	r1, [r7, #20]
 800157a:	4618      	mov	r0, r3
 800157c:	f006 f8a6 	bl	80076cc <logger_info>
		free(property_value);
 8001580:	6978      	ldr	r0, [r7, #20]
 8001582:	f00b f8c5 	bl	800c710 <free>
		property_value = NULL;
 8001586:	2300      	movs	r3, #0
 8001588:	617b      	str	r3, [r7, #20]
	}

	if( sensor_sen0189 != NULL ){
 800158a:	4b40      	ldr	r3, [pc, #256]	; (800168c <app_measure+0x328>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d031      	beq.n	80015f6 <app_measure+0x292>
		float turbidity = sen0189_read(sensor_sen0189);
 8001592:	4b3e      	ldr	r3, [pc, #248]	; (800168c <app_measure+0x328>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4618      	mov	r0, r3
 8001598:	f005 fb9a 	bl	8006cd0 <sen0189_read>
 800159c:	ed87 0a04 	vstr	s0, [r7, #16]
		buffer_sen0189 = (char*) malloc(10*sizeof(char));
 80015a0:	200a      	movs	r0, #10
 80015a2:	f00b f8ad 	bl	800c700 <malloc>
 80015a6:	4603      	mov	r3, r0
 80015a8:	63bb      	str	r3, [r7, #56]	; 0x38
		gcvt(turbidity, 6, buffer_sen0189);
 80015aa:	6938      	ldr	r0, [r7, #16]
 80015ac:	f7fe ffdc 	bl	8000568 <__aeabi_f2d>
 80015b0:	4603      	mov	r3, r0
 80015b2:	460c      	mov	r4, r1
 80015b4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80015b6:	2006      	movs	r0, #6
 80015b8:	ec44 3b10 	vmov	d0, r3, r4
 80015bc:	f00b f84a 	bl	800c654 <gcvt>
		message_builder_instance = message_builder_put_body(message_builder_instance, SEN0189_PROPERTIES_LABEL, buffer_sen0189);
 80015c0:	4b33      	ldr	r3, [pc, #204]	; (8001690 <app_measure+0x32c>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80015c6:	4619      	mov	r1, r3
 80015c8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80015ca:	f006 fbab 	bl	8007d24 <message_builder_put_body>
 80015ce:	64f8      	str	r0, [r7, #76]	; 0x4c

		char* property_value = string_util_property(SEN0189_PROPERTIES_LABEL, buffer_sen0189);
 80015d0:	4b2f      	ldr	r3, [pc, #188]	; (8001690 <app_measure+0x32c>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80015d6:	4618      	mov	r0, r3
 80015d8:	f006 fdca 	bl	8008170 <string_util_property>
 80015dc:	60f8      	str	r0, [r7, #12]
		logger_info(logger_get_instance(), property_value);
 80015de:	f006 f857 	bl	8007690 <logger_get_instance>
 80015e2:	4603      	mov	r3, r0
 80015e4:	68f9      	ldr	r1, [r7, #12]
 80015e6:	4618      	mov	r0, r3
 80015e8:	f006 f870 	bl	80076cc <logger_info>
		free(property_value);
 80015ec:	68f8      	ldr	r0, [r7, #12]
 80015ee:	f00b f88f 	bl	800c710 <free>
		property_value = NULL;
 80015f2:	2300      	movs	r3, #0
 80015f4:	60fb      	str	r3, [r7, #12]
	}

	if( sensor_sen0237a != NULL ){
 80015f6:	4b27      	ldr	r3, [pc, #156]	; (8001694 <app_measure+0x330>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d055      	beq.n	80016aa <app_measure+0x346>
		float dissolved_oxygen = sen0237a_read(sensor_sen0237a);
 80015fe:	4b25      	ldr	r3, [pc, #148]	; (8001694 <app_measure+0x330>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4618      	mov	r0, r3
 8001604:	f005 fd98 	bl	8007138 <sen0237a_read>
 8001608:	ed87 0a02 	vstr	s0, [r7, #8]
		buffer_sen0237a = (char*) malloc(10*sizeof(char));
 800160c:	200a      	movs	r0, #10
 800160e:	f00b f877 	bl	800c700 <malloc>
 8001612:	4603      	mov	r3, r0
 8001614:	637b      	str	r3, [r7, #52]	; 0x34
		gcvt(dissolved_oxygen, 6, buffer_sen0237a);
 8001616:	68b8      	ldr	r0, [r7, #8]
 8001618:	f7fe ffa6 	bl	8000568 <__aeabi_f2d>
 800161c:	4603      	mov	r3, r0
 800161e:	460c      	mov	r4, r1
 8001620:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001622:	2006      	movs	r0, #6
 8001624:	ec44 3b10 	vmov	d0, r3, r4
 8001628:	f00b f814 	bl	800c654 <gcvt>
		message_builder_instance = message_builder_put_body(message_builder_instance, SEN0237A_PROPERTIES_LABEL, buffer_sen0237a);
 800162c:	4b1a      	ldr	r3, [pc, #104]	; (8001698 <app_measure+0x334>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001632:	4619      	mov	r1, r3
 8001634:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001636:	f006 fb75 	bl	8007d24 <message_builder_put_body>
 800163a:	64f8      	str	r0, [r7, #76]	; 0x4c

		char* property_value = string_util_property(SEN0237A_PROPERTIES_LABEL, buffer_sen0237a);
 800163c:	4b16      	ldr	r3, [pc, #88]	; (8001698 <app_measure+0x334>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001642:	4618      	mov	r0, r3
 8001644:	f006 fd94 	bl	8008170 <string_util_property>
 8001648:	6078      	str	r0, [r7, #4]
		logger_info(logger_get_instance(), property_value);
 800164a:	f006 f821 	bl	8007690 <logger_get_instance>
 800164e:	4603      	mov	r3, r0
 8001650:	6879      	ldr	r1, [r7, #4]
 8001652:	4618      	mov	r0, r3
 8001654:	e022      	b.n	800169c <app_measure+0x338>
 8001656:	bf00      	nop
 8001658:	2000001c 	.word	0x2000001c
 800165c:	20000020 	.word	0x20000020
 8001660:	20000024 	.word	0x20000024
 8001664:	20000028 	.word	0x20000028
 8001668:	2000002c 	.word	0x2000002c
 800166c:	20000ac0 	.word	0x20000ac0
 8001670:	2000003c 	.word	0x2000003c
 8001674:	20000ac4 	.word	0x20000ac4
 8001678:	20000048 	.word	0x20000048
 800167c:	20000ac8 	.word	0x20000ac8
 8001680:	20000050 	.word	0x20000050
 8001684:	20000acc 	.word	0x20000acc
 8001688:	20000054 	.word	0x20000054
 800168c:	20000ad0 	.word	0x20000ad0
 8001690:	2000005c 	.word	0x2000005c
 8001694:	20000ad4 	.word	0x20000ad4
 8001698:	20000068 	.word	0x20000068
 800169c:	f006 f816 	bl	80076cc <logger_info>
		free(property_value);
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	f00b f835 	bl	800c710 <free>
		property_value = NULL;
 80016a6:	2300      	movs	r3, #0
 80016a8:	607b      	str	r3, [r7, #4]
	}

	message = message_builder_build(message_builder_instance);
 80016aa:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80016ac:	f006 fb52 	bl	8007d54 <message_builder_build>
 80016b0:	4602      	mov	r2, r0
 80016b2:	4b1c      	ldr	r3, [pc, #112]	; (8001724 <app_measure+0x3c0>)
 80016b4:	601a      	str	r2, [r3, #0]

	if( buffer_ds18b20 != NULL ) free(buffer_ds18b20);
 80016b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d002      	beq.n	80016c2 <app_measure+0x35e>
 80016bc:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80016be:	f00b f827 	bl	800c710 <free>
	if( buffer_sen0161 != NULL ) free(buffer_sen0161);
 80016c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d002      	beq.n	80016ce <app_measure+0x36a>
 80016c8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80016ca:	f00b f821 	bl	800c710 <free>
	if( buffer_sen0165 != NULL ) free(buffer_sen0165);
 80016ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d002      	beq.n	80016da <app_measure+0x376>
 80016d4:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80016d6:	f00b f81b 	bl	800c710 <free>
	if( buffer_sen0169 != NULL ) free(buffer_sen0169);
 80016da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d002      	beq.n	80016e6 <app_measure+0x382>
 80016e0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80016e2:	f00b f815 	bl	800c710 <free>
	if( buffer_sen0189 != NULL ) free(buffer_sen0189);
 80016e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d002      	beq.n	80016f2 <app_measure+0x38e>
 80016ec:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80016ee:	f00b f80f 	bl	800c710 <free>
	if( buffer_sen0237a != NULL ) free(buffer_sen0237a);
 80016f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d002      	beq.n	80016fe <app_measure+0x39a>
 80016f8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80016fa:	f00b f809 	bl	800c710 <free>

	buffer_ds18b20 = NULL;
 80016fe:	2300      	movs	r3, #0
 8001700:	64bb      	str	r3, [r7, #72]	; 0x48
	buffer_sen0161 = NULL;
 8001702:	2300      	movs	r3, #0
 8001704:	647b      	str	r3, [r7, #68]	; 0x44
	buffer_sen0165 = NULL;
 8001706:	2300      	movs	r3, #0
 8001708:	643b      	str	r3, [r7, #64]	; 0x40
	buffer_sen0169 = NULL;
 800170a:	2300      	movs	r3, #0
 800170c:	63fb      	str	r3, [r7, #60]	; 0x3c
	buffer_sen0189 = NULL;
 800170e:	2300      	movs	r3, #0
 8001710:	63bb      	str	r3, [r7, #56]	; 0x38
	buffer_sen0237a = NULL;
 8001712:	2300      	movs	r3, #0
 8001714:	637b      	str	r3, [r7, #52]	; 0x34

	message_builder_destroy();
 8001716:	f006 fc4d 	bl	8007fb4 <message_builder_destroy>
}
 800171a:	bf00      	nop
 800171c:	3754      	adds	r7, #84	; 0x54
 800171e:	46bd      	mov	sp, r7
 8001720:	bd90      	pop	{r4, r7, pc}
 8001722:	bf00      	nop
 8001724:	20000ad8 	.word	0x20000ad8

08001728 <app_send>:

void app_send(void){
 8001728:	b590      	push	{r4, r7, lr}
 800172a:	b085      	sub	sp, #20
 800172c:	af02      	add	r7, sp, #8
	unsigned char MQTT_QOS_LEVEL = QOS_LEVEL == 0x00 || QOS_LEVEL == 0x01 || QOS_LEVEL == 0x02 ? QOS_LEVEL : 0x00;
 800172e:	4b16      	ldr	r3, [pc, #88]	; (8001788 <app_send+0x60>)
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d007      	beq.n	8001746 <app_send+0x1e>
 8001736:	4b14      	ldr	r3, [pc, #80]	; (8001788 <app_send+0x60>)
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	2b01      	cmp	r3, #1
 800173c:	d003      	beq.n	8001746 <app_send+0x1e>
 800173e:	4b12      	ldr	r3, [pc, #72]	; (8001788 <app_send+0x60>)
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	2b02      	cmp	r3, #2
 8001744:	d102      	bne.n	800174c <app_send+0x24>
 8001746:	4b10      	ldr	r3, [pc, #64]	; (8001788 <app_send+0x60>)
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	e000      	b.n	800174e <app_send+0x26>
 800174c:	2300      	movs	r3, #0
 800174e:	71fb      	strb	r3, [r7, #7]
	mqtt_client_publish(mqtt, (char*) SMART_WATER_PROPERTIES_API_GATEWAY_CHANNEL, (char*) message, MQTT_QOS_LEVEL, false);
 8001750:	4b0e      	ldr	r3, [pc, #56]	; (800178c <app_send+0x64>)
 8001752:	6818      	ldr	r0, [r3, #0]
 8001754:	4b0e      	ldr	r3, [pc, #56]	; (8001790 <app_send+0x68>)
 8001756:	6819      	ldr	r1, [r3, #0]
 8001758:	4b0e      	ldr	r3, [pc, #56]	; (8001794 <app_send+0x6c>)
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	79fc      	ldrb	r4, [r7, #7]
 800175e:	2300      	movs	r3, #0
 8001760:	9300      	str	r3, [sp, #0]
 8001762:	4623      	mov	r3, r4
 8001764:	f003 f898 	bl	8004898 <mqtt_client_publish>
	if( message != NULL ) free(message);
 8001768:	4b0a      	ldr	r3, [pc, #40]	; (8001794 <app_send+0x6c>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d004      	beq.n	800177a <app_send+0x52>
 8001770:	4b08      	ldr	r3, [pc, #32]	; (8001794 <app_send+0x6c>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4618      	mov	r0, r3
 8001776:	f00a ffcb 	bl	800c710 <free>
	message = NULL;
 800177a:	4b06      	ldr	r3, [pc, #24]	; (8001794 <app_send+0x6c>)
 800177c:	2200      	movs	r2, #0
 800177e:	601a      	str	r2, [r3, #0]
}
 8001780:	bf00      	nop
 8001782:	370c      	adds	r7, #12
 8001784:	46bd      	mov	sp, r7
 8001786:	bd90      	pop	{r4, r7, pc}
 8001788:	20000adc 	.word	0x20000adc
 800178c:	20000abc 	.word	0x20000abc
 8001790:	20000018 	.word	0x20000018
 8001794:	20000ad8 	.word	0x20000ad8

08001798 <app_wait>:

void app_wait(void){
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
	stm32_util_delay_in_seconds(SMART_WATER_PROPERTIES_MEASUREMENT_CYCLE_IN_SECONDS);
 800179c:	4b03      	ldr	r3, [pc, #12]	; (80017ac <app_wait+0x14>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4618      	mov	r0, r3
 80017a2:	f006 fca9 	bl	80080f8 <stm32_util_delay_in_seconds>
}
 80017a6:	bf00      	nop
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	20000030 	.word	0x20000030

080017b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017b4:	f006 fd9b 	bl	80082ee <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017b8:	f000 f818 	bl	80017ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017bc:	f000 fa0c 	bl	8001bd8 <MX_GPIO_Init>
  MX_DMA_Init();
 80017c0:	f000 f9e4 	bl	8001b8c <MX_DMA_Init>
  MX_ADC1_Init();
 80017c4:	f000 f892 	bl	80018ec <MX_ADC1_Init>
  MX_I2C2_Init();
 80017c8:	f000 f940 	bl	8001a4c <MX_I2C2_Init>
  MX_USART2_UART_Init();
 80017cc:	f000 f9ae 	bl	8001b2c <MX_USART2_UART_Init>
  MX_TIM6_Init();
 80017d0:	f000 f97c 	bl	8001acc <MX_TIM6_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  app_init(&hadc1);
 80017d4:	4804      	ldr	r0, [pc, #16]	; (80017e8 <main+0x38>)
 80017d6:	f7ff fbe7 	bl	8000fa8 <app_init>
  while (1){
	  app_measure();
 80017da:	f7ff fdc3 	bl	8001364 <app_measure>
	  app_send();
 80017de:	f7ff ffa3 	bl	8001728 <app_send>
	  app_wait();
 80017e2:	f7ff ffd9 	bl	8001798 <app_wait>
	  app_measure();
 80017e6:	e7f8      	b.n	80017da <main+0x2a>
 80017e8:	20000b98 	.word	0x20000b98

080017ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b0ae      	sub	sp, #184	; 0xb8
 80017f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017f2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80017f6:	2244      	movs	r2, #68	; 0x44
 80017f8:	2100      	movs	r1, #0
 80017fa:	4618      	mov	r0, r3
 80017fc:	f00b f9c6 	bl	800cb8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001800:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001804:	2200      	movs	r2, #0
 8001806:	601a      	str	r2, [r3, #0]
 8001808:	605a      	str	r2, [r3, #4]
 800180a:	609a      	str	r2, [r3, #8]
 800180c:	60da      	str	r2, [r3, #12]
 800180e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001810:	463b      	mov	r3, r7
 8001812:	2260      	movs	r2, #96	; 0x60
 8001814:	2100      	movs	r1, #0
 8001816:	4618      	mov	r0, r3
 8001818:	f00b f9b8 	bl	800cb8c <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800181c:	2301      	movs	r3, #1
 800181e:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001820:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001824:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001826:	2302      	movs	r3, #2
 8001828:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800182c:	2303      	movs	r3, #3
 800182e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001832:	2301      	movs	r3, #1
 8001834:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLN = 20;
 8001838:	2314      	movs	r3, #20
 800183a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800183e:	2307      	movs	r3, #7
 8001840:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001844:	2302      	movs	r3, #2
 8001846:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800184a:	2302      	movs	r3, #2
 800184c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001850:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001854:	4618      	mov	r0, r3
 8001856:	f009 f863 	bl	800a920 <HAL_RCC_OscConfig>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d001      	beq.n	8001864 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8001860:	f000 fa34 	bl	8001ccc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001864:	230f      	movs	r3, #15
 8001866:	663b      	str	r3, [r7, #96]	; 0x60
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001868:	2303      	movs	r3, #3
 800186a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800186c:	2300      	movs	r3, #0
 800186e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001870:	2300      	movs	r3, #0
 8001872:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001874:	2300      	movs	r3, #0
 8001876:	673b      	str	r3, [r7, #112]	; 0x70

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001878:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800187c:	2104      	movs	r1, #4
 800187e:	4618      	mov	r0, r3
 8001880:	f009 fc6e 	bl	800b160 <HAL_RCC_ClockConfig>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d001      	beq.n	800188e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800188a:	f000 fa1f 	bl	8001ccc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C2
 800188e:	f244 0382 	movw	r3, #16514	; 0x4082
 8001892:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001894:	2300      	movs	r3, #0
 8001896:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001898:	2300      	movs	r3, #0
 800189a:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800189c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80018a0:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 80018a2:	2303      	movs	r3, #3
 80018a4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80018a6:	2301      	movs	r3, #1
 80018a8:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80018aa:	2308      	movs	r3, #8
 80018ac:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80018ae:	2307      	movs	r3, #7
 80018b0:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80018b2:	2302      	movs	r3, #2
 80018b4:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80018b6:	2302      	movs	r3, #2
 80018b8:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80018ba:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80018be:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018c0:	463b      	mov	r3, r7
 80018c2:	4618      	mov	r0, r3
 80018c4:	f009 fe50 	bl	800b568 <HAL_RCCEx_PeriphCLKConfig>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d001      	beq.n	80018d2 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 80018ce:	f000 f9fd 	bl	8001ccc <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80018d2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80018d6:	f008 ffcd 	bl	800a874 <HAL_PWREx_ControlVoltageScaling>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d001      	beq.n	80018e4 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 80018e0:	f000 f9f4 	bl	8001ccc <Error_Handler>
  }
}
 80018e4:	bf00      	nop
 80018e6:	37b8      	adds	r7, #184	; 0xb8
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}

080018ec <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b086      	sub	sp, #24
 80018f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80018f2:	463b      	mov	r3, r7
 80018f4:	2200      	movs	r2, #0
 80018f6:	601a      	str	r2, [r3, #0]
 80018f8:	605a      	str	r2, [r3, #4]
 80018fa:	609a      	str	r2, [r3, #8]
 80018fc:	60da      	str	r2, [r3, #12]
 80018fe:	611a      	str	r2, [r3, #16]
 8001900:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 8001902:	4b4c      	ldr	r3, [pc, #304]	; (8001a34 <MX_ADC1_Init+0x148>)
 8001904:	4a4c      	ldr	r2, [pc, #304]	; (8001a38 <MX_ADC1_Init+0x14c>)
 8001906:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001908:	4b4a      	ldr	r3, [pc, #296]	; (8001a34 <MX_ADC1_Init+0x148>)
 800190a:	2200      	movs	r2, #0
 800190c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800190e:	4b49      	ldr	r3, [pc, #292]	; (8001a34 <MX_ADC1_Init+0x148>)
 8001910:	2200      	movs	r2, #0
 8001912:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001914:	4b47      	ldr	r3, [pc, #284]	; (8001a34 <MX_ADC1_Init+0x148>)
 8001916:	2200      	movs	r2, #0
 8001918:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800191a:	4b46      	ldr	r3, [pc, #280]	; (8001a34 <MX_ADC1_Init+0x148>)
 800191c:	2200      	movs	r2, #0
 800191e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001920:	4b44      	ldr	r3, [pc, #272]	; (8001a34 <MX_ADC1_Init+0x148>)
 8001922:	2204      	movs	r2, #4
 8001924:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001926:	4b43      	ldr	r3, [pc, #268]	; (8001a34 <MX_ADC1_Init+0x148>)
 8001928:	2200      	movs	r2, #0
 800192a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800192c:	4b41      	ldr	r3, [pc, #260]	; (8001a34 <MX_ADC1_Init+0x148>)
 800192e:	2201      	movs	r2, #1
 8001930:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001932:	4b40      	ldr	r3, [pc, #256]	; (8001a34 <MX_ADC1_Init+0x148>)
 8001934:	2201      	movs	r2, #1
 8001936:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001938:	4b3e      	ldr	r3, [pc, #248]	; (8001a34 <MX_ADC1_Init+0x148>)
 800193a:	2200      	movs	r2, #0
 800193c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 8001940:	4b3c      	ldr	r3, [pc, #240]	; (8001a34 <MX_ADC1_Init+0x148>)
 8001942:	2201      	movs	r2, #1
 8001944:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001946:	4b3b      	ldr	r3, [pc, #236]	; (8001a34 <MX_ADC1_Init+0x148>)
 8001948:	2200      	movs	r2, #0
 800194a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800194c:	4b39      	ldr	r3, [pc, #228]	; (8001a34 <MX_ADC1_Init+0x148>)
 800194e:	2200      	movs	r2, #0
 8001950:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001952:	4b38      	ldr	r3, [pc, #224]	; (8001a34 <MX_ADC1_Init+0x148>)
 8001954:	2200      	movs	r2, #0
 8001956:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800195a:	4b36      	ldr	r3, [pc, #216]	; (8001a34 <MX_ADC1_Init+0x148>)
 800195c:	2200      	movs	r2, #0
 800195e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001960:	4b34      	ldr	r3, [pc, #208]	; (8001a34 <MX_ADC1_Init+0x148>)
 8001962:	2200      	movs	r2, #0
 8001964:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001968:	4832      	ldr	r0, [pc, #200]	; (8001a34 <MX_ADC1_Init+0x148>)
 800196a:	f006 ff21 	bl	80087b0 <HAL_ADC_Init>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	d001      	beq.n	8001978 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8001974:	f000 f9aa 	bl	8001ccc <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001978:	4b30      	ldr	r3, [pc, #192]	; (8001a3c <MX_ADC1_Init+0x150>)
 800197a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800197c:	2306      	movs	r3, #6
 800197e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001980:	2300      	movs	r3, #0
 8001982:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001984:	237f      	movs	r3, #127	; 0x7f
 8001986:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001988:	2304      	movs	r3, #4
 800198a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800198c:	2300      	movs	r3, #0
 800198e:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001990:	463b      	mov	r3, r7
 8001992:	4619      	mov	r1, r3
 8001994:	4827      	ldr	r0, [pc, #156]	; (8001a34 <MX_ADC1_Init+0x148>)
 8001996:	f007 faa7 	bl	8008ee8 <HAL_ADC_ConfigChannel>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d001      	beq.n	80019a4 <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 80019a0:	f000 f994 	bl	8001ccc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  sConfig.Channel = ADC_CHANNEL_2;
 80019a4:	4b26      	ldr	r3, [pc, #152]	; (8001a40 <MX_ADC1_Init+0x154>)
 80019a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80019a8:	230c      	movs	r3, #12
 80019aa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80019ac:	2300      	movs	r3, #0
 80019ae:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80019b0:	237f      	movs	r3, #127	; 0x7f
 80019b2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80019b4:	2304      	movs	r3, #4
 80019b6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80019b8:	2300      	movs	r3, #0
 80019ba:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019bc:	463b      	mov	r3, r7
 80019be:	4619      	mov	r1, r3
 80019c0:	481c      	ldr	r0, [pc, #112]	; (8001a34 <MX_ADC1_Init+0x148>)
 80019c2:	f007 fa91 	bl	8008ee8 <HAL_ADC_ConfigChannel>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d001      	beq.n	80019d0 <MX_ADC1_Init+0xe4>
  {
	Error_Handler();
 80019cc:	f000 f97e 	bl	8001ccc <Error_Handler>
  }

  sConfig.Channel = ADC_CHANNEL_3;
 80019d0:	4b1c      	ldr	r3, [pc, #112]	; (8001a44 <MX_ADC1_Init+0x158>)
 80019d2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80019d4:	2312      	movs	r3, #18
 80019d6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80019d8:	2300      	movs	r3, #0
 80019da:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80019dc:	237f      	movs	r3, #127	; 0x7f
 80019de:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80019e0:	2304      	movs	r3, #4
 80019e2:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80019e4:	2300      	movs	r3, #0
 80019e6:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019e8:	463b      	mov	r3, r7
 80019ea:	4619      	mov	r1, r3
 80019ec:	4811      	ldr	r0, [pc, #68]	; (8001a34 <MX_ADC1_Init+0x148>)
 80019ee:	f007 fa7b 	bl	8008ee8 <HAL_ADC_ConfigChannel>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d001      	beq.n	80019fc <MX_ADC1_Init+0x110>
  {
	Error_Handler();
 80019f8:	f000 f968 	bl	8001ccc <Error_Handler>
  }

  sConfig.Channel = ADC_CHANNEL_12;
 80019fc:	4b12      	ldr	r3, [pc, #72]	; (8001a48 <MX_ADC1_Init+0x15c>)
 80019fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_12;
 8001a00:	f44f 7303 	mov.w	r3, #524	; 0x20c
 8001a04:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001a06:	2300      	movs	r3, #0
 8001a08:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001a0a:	237f      	movs	r3, #127	; 0x7f
 8001a0c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001a0e:	2304      	movs	r3, #4
 8001a10:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001a12:	2300      	movs	r3, #0
 8001a14:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a16:	463b      	mov	r3, r7
 8001a18:	4619      	mov	r1, r3
 8001a1a:	4806      	ldr	r0, [pc, #24]	; (8001a34 <MX_ADC1_Init+0x148>)
 8001a1c:	f007 fa64 	bl	8008ee8 <HAL_ADC_ConfigChannel>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <MX_ADC1_Init+0x13e>
  {
	Error_Handler();
 8001a26:	f000 f951 	bl	8001ccc <Error_Handler>
  }

  /* USER CODE END ADC1_Init 2 */
  /* USER CODE END ADC1_Init 2 */

}
 8001a2a:	bf00      	nop
 8001a2c:	3718      	adds	r7, #24
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	20000b98 	.word	0x20000b98
 8001a38:	50040000 	.word	0x50040000
 8001a3c:	04300002 	.word	0x04300002
 8001a40:	08600004 	.word	0x08600004
 8001a44:	0c900008 	.word	0x0c900008
 8001a48:	32601000 	.word	0x32601000

08001a4c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001a50:	4b1b      	ldr	r3, [pc, #108]	; (8001ac0 <MX_I2C2_Init+0x74>)
 8001a52:	4a1c      	ldr	r2, [pc, #112]	; (8001ac4 <MX_I2C2_Init+0x78>)
 8001a54:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 8001a56:	4b1a      	ldr	r3, [pc, #104]	; (8001ac0 <MX_I2C2_Init+0x74>)
 8001a58:	4a1b      	ldr	r2, [pc, #108]	; (8001ac8 <MX_I2C2_Init+0x7c>)
 8001a5a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001a5c:	4b18      	ldr	r3, [pc, #96]	; (8001ac0 <MX_I2C2_Init+0x74>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a62:	4b17      	ldr	r3, [pc, #92]	; (8001ac0 <MX_I2C2_Init+0x74>)
 8001a64:	2201      	movs	r2, #1
 8001a66:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a68:	4b15      	ldr	r3, [pc, #84]	; (8001ac0 <MX_I2C2_Init+0x74>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001a6e:	4b14      	ldr	r3, [pc, #80]	; (8001ac0 <MX_I2C2_Init+0x74>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001a74:	4b12      	ldr	r3, [pc, #72]	; (8001ac0 <MX_I2C2_Init+0x74>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a7a:	4b11      	ldr	r3, [pc, #68]	; (8001ac0 <MX_I2C2_Init+0x74>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a80:	4b0f      	ldr	r3, [pc, #60]	; (8001ac0 <MX_I2C2_Init+0x74>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001a86:	480e      	ldr	r0, [pc, #56]	; (8001ac0 <MX_I2C2_Init+0x74>)
 8001a88:	f008 fb56 	bl	800a138 <HAL_I2C_Init>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d001      	beq.n	8001a96 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001a92:	f000 f91b 	bl	8001ccc <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001a96:	2100      	movs	r1, #0
 8001a98:	4809      	ldr	r0, [pc, #36]	; (8001ac0 <MX_I2C2_Init+0x74>)
 8001a9a:	f008 fe45 	bl	800a728 <HAL_I2CEx_ConfigAnalogFilter>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d001      	beq.n	8001aa8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001aa4:	f000 f912 	bl	8001ccc <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001aa8:	2100      	movs	r1, #0
 8001aaa:	4805      	ldr	r0, [pc, #20]	; (8001ac0 <MX_I2C2_Init+0x74>)
 8001aac:	f008 fe87 	bl	800a7be <HAL_I2CEx_ConfigDigitalFilter>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d001      	beq.n	8001aba <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001ab6:	f000 f909 	bl	8001ccc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001aba:	bf00      	nop
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	20000b4c 	.word	0x20000b4c
 8001ac4:	40005800 	.word	0x40005800
 8001ac8:	10909cec 	.word	0x10909cec

08001acc <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b084      	sub	sp, #16
 8001ad0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ad2:	1d3b      	adds	r3, r7, #4
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	601a      	str	r2, [r3, #0]
 8001ad8:	605a      	str	r2, [r3, #4]
 8001ada:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001adc:	4b11      	ldr	r3, [pc, #68]	; (8001b24 <MX_TIM6_Init+0x58>)
 8001ade:	4a12      	ldr	r2, [pc, #72]	; (8001b28 <MX_TIM6_Init+0x5c>)
 8001ae0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 83;
 8001ae2:	4b10      	ldr	r3, [pc, #64]	; (8001b24 <MX_TIM6_Init+0x58>)
 8001ae4:	2253      	movs	r2, #83	; 0x53
 8001ae6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ae8:	4b0e      	ldr	r3, [pc, #56]	; (8001b24 <MX_TIM6_Init+0x58>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 4200;
 8001aee:	4b0d      	ldr	r3, [pc, #52]	; (8001b24 <MX_TIM6_Init+0x58>)
 8001af0:	f241 0268 	movw	r2, #4200	; 0x1068
 8001af4:	60da      	str	r2, [r3, #12]
    htim6.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1; // Adicionada
 8001af6:	4b0b      	ldr	r3, [pc, #44]	; (8001b24 <MX_TIM6_Init+0x58>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	611a      	str	r2, [r3, #16]
  //htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
  {
    Error_Handler();
 8001afc:	f000 f8e6 	bl	8001ccc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b00:	2300      	movs	r3, #0
 8001b02:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b04:	2300      	movs	r3, #0
 8001b06:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001b08:	1d3b      	adds	r3, r7, #4
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	4805      	ldr	r0, [pc, #20]	; (8001b24 <MX_TIM6_Init+0x58>)
 8001b0e:	f00a f85f 	bl	800bbd0 <HAL_TIMEx_MasterConfigSynchronization>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d001      	beq.n	8001b1c <MX_TIM6_Init+0x50>
  {
    Error_Handler();
 8001b18:	f000 f8d8 	bl	8001ccc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001b1c:	bf00      	nop
 8001b1e:	3710      	adds	r7, #16
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	20000c8c 	.word	0x20000c8c
 8001b28:	40001000 	.word	0x40001000

08001b2c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b30:	4b14      	ldr	r3, [pc, #80]	; (8001b84 <MX_USART2_UART_Init+0x58>)
 8001b32:	4a15      	ldr	r2, [pc, #84]	; (8001b88 <MX_USART2_UART_Init+0x5c>)
 8001b34:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001b36:	4b13      	ldr	r3, [pc, #76]	; (8001b84 <MX_USART2_UART_Init+0x58>)
 8001b38:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b3c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b3e:	4b11      	ldr	r3, [pc, #68]	; (8001b84 <MX_USART2_UART_Init+0x58>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b44:	4b0f      	ldr	r3, [pc, #60]	; (8001b84 <MX_USART2_UART_Init+0x58>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b4a:	4b0e      	ldr	r3, [pc, #56]	; (8001b84 <MX_USART2_UART_Init+0x58>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b50:	4b0c      	ldr	r3, [pc, #48]	; (8001b84 <MX_USART2_UART_Init+0x58>)
 8001b52:	220c      	movs	r2, #12
 8001b54:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b56:	4b0b      	ldr	r3, [pc, #44]	; (8001b84 <MX_USART2_UART_Init+0x58>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b5c:	4b09      	ldr	r3, [pc, #36]	; (8001b84 <MX_USART2_UART_Init+0x58>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b62:	4b08      	ldr	r3, [pc, #32]	; (8001b84 <MX_USART2_UART_Init+0x58>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b68:	4b06      	ldr	r3, [pc, #24]	; (8001b84 <MX_USART2_UART_Init+0x58>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b6e:	4805      	ldr	r0, [pc, #20]	; (8001b84 <MX_USART2_UART_Init+0x58>)
 8001b70:	f00a f894 	bl	800bc9c <HAL_UART_Init>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d001      	beq.n	8001b7e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001b7a:	f000 f8a7 	bl	8001ccc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b7e:	bf00      	nop
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	20000ccc 	.word	0x20000ccc
 8001b88:	40004400 	.word	0x40004400

08001b8c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001b92:	4b10      	ldr	r3, [pc, #64]	; (8001bd4 <MX_DMA_Init+0x48>)
 8001b94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b96:	4a0f      	ldr	r2, [pc, #60]	; (8001bd4 <MX_DMA_Init+0x48>)
 8001b98:	f043 0301 	orr.w	r3, r3, #1
 8001b9c:	6493      	str	r3, [r2, #72]	; 0x48
 8001b9e:	4b0d      	ldr	r3, [pc, #52]	; (8001bd4 <MX_DMA_Init+0x48>)
 8001ba0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ba2:	f003 0301 	and.w	r3, r3, #1
 8001ba6:	607b      	str	r3, [r7, #4]
 8001ba8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 8001baa:	2200      	movs	r2, #0
 8001bac:	2101      	movs	r1, #1
 8001bae:	200b      	movs	r0, #11
 8001bb0:	f007 fee9 	bl	8009986 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001bb4:	200b      	movs	r0, #11
 8001bb6:	f007 ff02 	bl	80099be <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001bba:	2200      	movs	r2, #0
 8001bbc:	2100      	movs	r1, #0
 8001bbe:	200d      	movs	r0, #13
 8001bc0:	f007 fee1 	bl	8009986 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001bc4:	200d      	movs	r0, #13
 8001bc6:	f007 fefa 	bl	80099be <HAL_NVIC_EnableIRQ>

}
 8001bca:	bf00      	nop
 8001bcc:	3708      	adds	r7, #8
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	40021000 	.word	0x40021000

08001bd8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b08a      	sub	sp, #40	; 0x28
 8001bdc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bde:	f107 0314 	add.w	r3, r7, #20
 8001be2:	2200      	movs	r2, #0
 8001be4:	601a      	str	r2, [r3, #0]
 8001be6:	605a      	str	r2, [r3, #4]
 8001be8:	609a      	str	r2, [r3, #8]
 8001bea:	60da      	str	r2, [r3, #12]
 8001bec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bee:	4b35      	ldr	r3, [pc, #212]	; (8001cc4 <MX_GPIO_Init+0xec>)
 8001bf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bf2:	4a34      	ldr	r2, [pc, #208]	; (8001cc4 <MX_GPIO_Init+0xec>)
 8001bf4:	f043 0304 	orr.w	r3, r3, #4
 8001bf8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bfa:	4b32      	ldr	r3, [pc, #200]	; (8001cc4 <MX_GPIO_Init+0xec>)
 8001bfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bfe:	f003 0304 	and.w	r3, r3, #4
 8001c02:	613b      	str	r3, [r7, #16]
 8001c04:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c06:	4b2f      	ldr	r3, [pc, #188]	; (8001cc4 <MX_GPIO_Init+0xec>)
 8001c08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c0a:	4a2e      	ldr	r2, [pc, #184]	; (8001cc4 <MX_GPIO_Init+0xec>)
 8001c0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c12:	4b2c      	ldr	r3, [pc, #176]	; (8001cc4 <MX_GPIO_Init+0xec>)
 8001c14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c1a:	60fb      	str	r3, [r7, #12]
 8001c1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c1e:	4b29      	ldr	r3, [pc, #164]	; (8001cc4 <MX_GPIO_Init+0xec>)
 8001c20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c22:	4a28      	ldr	r2, [pc, #160]	; (8001cc4 <MX_GPIO_Init+0xec>)
 8001c24:	f043 0301 	orr.w	r3, r3, #1
 8001c28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c2a:	4b26      	ldr	r3, [pc, #152]	; (8001cc4 <MX_GPIO_Init+0xec>)
 8001c2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c2e:	f003 0301 	and.w	r3, r3, #1
 8001c32:	60bb      	str	r3, [r7, #8]
 8001c34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c36:	4b23      	ldr	r3, [pc, #140]	; (8001cc4 <MX_GPIO_Init+0xec>)
 8001c38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c3a:	4a22      	ldr	r2, [pc, #136]	; (8001cc4 <MX_GPIO_Init+0xec>)
 8001c3c:	f043 0302 	orr.w	r3, r3, #2
 8001c40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c42:	4b20      	ldr	r3, [pc, #128]	; (8001cc4 <MX_GPIO_Init+0xec>)
 8001c44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c46:	f003 0302 	and.w	r3, r3, #2
 8001c4a:	607b      	str	r3, [r7, #4]
 8001c4c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP_EN_GPIO_Port, ESP_EN_Pin, GPIO_PIN_RESET);
 8001c4e:	2200      	movs	r2, #0
 8001c50:	2120      	movs	r1, #32
 8001c52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c56:	f008 fa57 	bl	800a108 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP_POWER_EN_GPIO_Port, ESP_POWER_EN_Pin, GPIO_PIN_SET);
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c60:	4819      	ldr	r0, [pc, #100]	; (8001cc8 <MX_GPIO_Init+0xf0>)
 8001c62:	f008 fa51 	bl	800a108 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001c66:	2301      	movs	r3, #1
 8001c68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c72:	f107 0314 	add.w	r3, r7, #20
 8001c76:	4619      	mov	r1, r3
 8001c78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c7c:	f008 f8b2 	bl	8009de4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ESP_EN_Pin */
  GPIO_InitStruct.Pin = ESP_EN_Pin;
 8001c80:	2320      	movs	r3, #32
 8001c82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c84:	2301      	movs	r3, #1
 8001c86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ESP_EN_GPIO_Port, &GPIO_InitStruct);
 8001c90:	f107 0314 	add.w	r3, r7, #20
 8001c94:	4619      	mov	r1, r3
 8001c96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c9a:	f008 f8a3 	bl	8009de4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ESP_POWER_EN_Pin */
  GPIO_InitStruct.Pin = ESP_POWER_EN_Pin;
 8001c9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ca2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cac:	2300      	movs	r3, #0
 8001cae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ESP_POWER_EN_GPIO_Port, &GPIO_InitStruct);
 8001cb0:	f107 0314 	add.w	r3, r7, #20
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	4804      	ldr	r0, [pc, #16]	; (8001cc8 <MX_GPIO_Init+0xf0>)
 8001cb8:	f008 f894 	bl	8009de4 <HAL_GPIO_Init>

}
 8001cbc:	bf00      	nop
 8001cbe:	3728      	adds	r7, #40	; 0x28
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	40021000 	.word	0x40021000
 8001cc8:	48000400 	.word	0x48000400

08001ccc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001cd0:	bf00      	nop
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
	...

08001cdc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ce2:	4b0f      	ldr	r3, [pc, #60]	; (8001d20 <HAL_MspInit+0x44>)
 8001ce4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ce6:	4a0e      	ldr	r2, [pc, #56]	; (8001d20 <HAL_MspInit+0x44>)
 8001ce8:	f043 0301 	orr.w	r3, r3, #1
 8001cec:	6613      	str	r3, [r2, #96]	; 0x60
 8001cee:	4b0c      	ldr	r3, [pc, #48]	; (8001d20 <HAL_MspInit+0x44>)
 8001cf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cf2:	f003 0301 	and.w	r3, r3, #1
 8001cf6:	607b      	str	r3, [r7, #4]
 8001cf8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cfa:	4b09      	ldr	r3, [pc, #36]	; (8001d20 <HAL_MspInit+0x44>)
 8001cfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cfe:	4a08      	ldr	r2, [pc, #32]	; (8001d20 <HAL_MspInit+0x44>)
 8001d00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d04:	6593      	str	r3, [r2, #88]	; 0x58
 8001d06:	4b06      	ldr	r3, [pc, #24]	; (8001d20 <HAL_MspInit+0x44>)
 8001d08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d0e:	603b      	str	r3, [r7, #0]
 8001d10:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d12:	bf00      	nop
 8001d14:	370c      	adds	r7, #12
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr
 8001d1e:	bf00      	nop
 8001d20:	40021000 	.word	0x40021000

08001d24 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b08a      	sub	sp, #40	; 0x28
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d2c:	f107 0314 	add.w	r3, r7, #20
 8001d30:	2200      	movs	r2, #0
 8001d32:	601a      	str	r2, [r3, #0]
 8001d34:	605a      	str	r2, [r3, #4]
 8001d36:	609a      	str	r2, [r3, #8]
 8001d38:	60da      	str	r2, [r3, #12]
 8001d3a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a3b      	ldr	r2, [pc, #236]	; (8001e30 <HAL_ADC_MspInit+0x10c>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d16f      	bne.n	8001e26 <HAL_ADC_MspInit+0x102>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001d46:	4b3b      	ldr	r3, [pc, #236]	; (8001e34 <HAL_ADC_MspInit+0x110>)
 8001d48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d4a:	4a3a      	ldr	r2, [pc, #232]	; (8001e34 <HAL_ADC_MspInit+0x110>)
 8001d4c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001d50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d52:	4b38      	ldr	r3, [pc, #224]	; (8001e34 <HAL_ADC_MspInit+0x110>)
 8001d54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d56:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d5a:	613b      	str	r3, [r7, #16]
 8001d5c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d5e:	4b35      	ldr	r3, [pc, #212]	; (8001e34 <HAL_ADC_MspInit+0x110>)
 8001d60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d62:	4a34      	ldr	r2, [pc, #208]	; (8001e34 <HAL_ADC_MspInit+0x110>)
 8001d64:	f043 0304 	orr.w	r3, r3, #4
 8001d68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d6a:	4b32      	ldr	r3, [pc, #200]	; (8001e34 <HAL_ADC_MspInit+0x110>)
 8001d6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d6e:	f003 0304 	and.w	r3, r3, #4
 8001d72:	60fb      	str	r3, [r7, #12]
 8001d74:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d76:	4b2f      	ldr	r3, [pc, #188]	; (8001e34 <HAL_ADC_MspInit+0x110>)
 8001d78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d7a:	4a2e      	ldr	r2, [pc, #184]	; (8001e34 <HAL_ADC_MspInit+0x110>)
 8001d7c:	f043 0301 	orr.w	r3, r3, #1
 8001d80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d82:	4b2c      	ldr	r3, [pc, #176]	; (8001e34 <HAL_ADC_MspInit+0x110>)
 8001d84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d86:	f003 0301 	and.w	r3, r3, #1
 8001d8a:	60bb      	str	r3, [r7, #8]
 8001d8c:	68bb      	ldr	r3, [r7, #8]
    PC0     ------> ADC1_IN1
    PC1     ------> ADC1_IN2
    PC2     ------> ADC1_IN3
    PA7     ------> ADC1_IN12 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001d8e:	2307      	movs	r3, #7
 8001d90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001d92:	230b      	movs	r3, #11
 8001d94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d96:	2300      	movs	r3, #0
 8001d98:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d9a:	f107 0314 	add.w	r3, r7, #20
 8001d9e:	4619      	mov	r1, r3
 8001da0:	4825      	ldr	r0, [pc, #148]	; (8001e38 <HAL_ADC_MspInit+0x114>)
 8001da2:	f008 f81f 	bl	8009de4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001da6:	2380      	movs	r3, #128	; 0x80
 8001da8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001daa:	230b      	movs	r3, #11
 8001dac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dae:	2300      	movs	r3, #0
 8001db0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001db2:	f107 0314 	add.w	r3, r7, #20
 8001db6:	4619      	mov	r1, r3
 8001db8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dbc:	f008 f812 	bl	8009de4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001dc0:	4b1e      	ldr	r3, [pc, #120]	; (8001e3c <HAL_ADC_MspInit+0x118>)
 8001dc2:	4a1f      	ldr	r2, [pc, #124]	; (8001e40 <HAL_ADC_MspInit+0x11c>)
 8001dc4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8001dc6:	4b1d      	ldr	r3, [pc, #116]	; (8001e3c <HAL_ADC_MspInit+0x118>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001dcc:	4b1b      	ldr	r3, [pc, #108]	; (8001e3c <HAL_ADC_MspInit+0x118>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001dd2:	4b1a      	ldr	r3, [pc, #104]	; (8001e3c <HAL_ADC_MspInit+0x118>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001dd8:	4b18      	ldr	r3, [pc, #96]	; (8001e3c <HAL_ADC_MspInit+0x118>)
 8001dda:	2280      	movs	r2, #128	; 0x80
 8001ddc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001dde:	4b17      	ldr	r3, [pc, #92]	; (8001e3c <HAL_ADC_MspInit+0x118>)
 8001de0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001de4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001de6:	4b15      	ldr	r3, [pc, #84]	; (8001e3c <HAL_ADC_MspInit+0x118>)
 8001de8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001dec:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001dee:	4b13      	ldr	r3, [pc, #76]	; (8001e3c <HAL_ADC_MspInit+0x118>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001df4:	4b11      	ldr	r3, [pc, #68]	; (8001e3c <HAL_ADC_MspInit+0x118>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001dfa:	4810      	ldr	r0, [pc, #64]	; (8001e3c <HAL_ADC_MspInit+0x118>)
 8001dfc:	f007 fdfa 	bl	80099f4 <HAL_DMA_Init>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d001      	beq.n	8001e0a <HAL_ADC_MspInit+0xe6>
    {
      Error_Handler();
 8001e06:	f7ff ff61 	bl	8001ccc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4a0b      	ldr	r2, [pc, #44]	; (8001e3c <HAL_ADC_MspInit+0x118>)
 8001e0e:	64da      	str	r2, [r3, #76]	; 0x4c
 8001e10:	4a0a      	ldr	r2, [pc, #40]	; (8001e3c <HAL_ADC_MspInit+0x118>)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 1, 0);
 8001e16:	2200      	movs	r2, #0
 8001e18:	2101      	movs	r1, #1
 8001e1a:	2012      	movs	r0, #18
 8001e1c:	f007 fdb3 	bl	8009986 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8001e20:	2012      	movs	r0, #18
 8001e22:	f007 fdcc 	bl	80099be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001e26:	bf00      	nop
 8001e28:	3728      	adds	r7, #40	; 0x28
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	50040000 	.word	0x50040000
 8001e34:	40021000 	.word	0x40021000
 8001e38:	48000800 	.word	0x48000800
 8001e3c:	20000c44 	.word	0x20000c44
 8001e40:	40020008 	.word	0x40020008

08001e44 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b08a      	sub	sp, #40	; 0x28
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e4c:	f107 0314 	add.w	r3, r7, #20
 8001e50:	2200      	movs	r2, #0
 8001e52:	601a      	str	r2, [r3, #0]
 8001e54:	605a      	str	r2, [r3, #4]
 8001e56:	609a      	str	r2, [r3, #8]
 8001e58:	60da      	str	r2, [r3, #12]
 8001e5a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a17      	ldr	r2, [pc, #92]	; (8001ec0 <HAL_I2C_MspInit+0x7c>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d128      	bne.n	8001eb8 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e66:	4b17      	ldr	r3, [pc, #92]	; (8001ec4 <HAL_I2C_MspInit+0x80>)
 8001e68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e6a:	4a16      	ldr	r2, [pc, #88]	; (8001ec4 <HAL_I2C_MspInit+0x80>)
 8001e6c:	f043 0302 	orr.w	r3, r3, #2
 8001e70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e72:	4b14      	ldr	r3, [pc, #80]	; (8001ec4 <HAL_I2C_MspInit+0x80>)
 8001e74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e76:	f003 0302 	and.w	r3, r3, #2
 8001e7a:	613b      	str	r3, [r7, #16]
 8001e7c:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration    
    PB11     ------> I2C2_SDA
    PB13     ------> I2C2_SCL 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8001e7e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001e82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e84:	2312      	movs	r3, #18
 8001e86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e8c:	2303      	movs	r3, #3
 8001e8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001e90:	2304      	movs	r3, #4
 8001e92:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e94:	f107 0314 	add.w	r3, r7, #20
 8001e98:	4619      	mov	r1, r3
 8001e9a:	480b      	ldr	r0, [pc, #44]	; (8001ec8 <HAL_I2C_MspInit+0x84>)
 8001e9c:	f007 ffa2 	bl	8009de4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001ea0:	4b08      	ldr	r3, [pc, #32]	; (8001ec4 <HAL_I2C_MspInit+0x80>)
 8001ea2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ea4:	4a07      	ldr	r2, [pc, #28]	; (8001ec4 <HAL_I2C_MspInit+0x80>)
 8001ea6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001eaa:	6593      	str	r3, [r2, #88]	; 0x58
 8001eac:	4b05      	ldr	r3, [pc, #20]	; (8001ec4 <HAL_I2C_MspInit+0x80>)
 8001eae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eb0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001eb4:	60fb      	str	r3, [r7, #12]
 8001eb6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001eb8:	bf00      	nop
 8001eba:	3728      	adds	r7, #40	; 0x28
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	40005800 	.word	0x40005800
 8001ec4:	40021000 	.word	0x40021000
 8001ec8:	48000400 	.word	0x48000400

08001ecc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b08a      	sub	sp, #40	; 0x28
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ed4:	f107 0314 	add.w	r3, r7, #20
 8001ed8:	2200      	movs	r2, #0
 8001eda:	601a      	str	r2, [r3, #0]
 8001edc:	605a      	str	r2, [r3, #4]
 8001ede:	609a      	str	r2, [r3, #8]
 8001ee0:	60da      	str	r2, [r3, #12]
 8001ee2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a17      	ldr	r2, [pc, #92]	; (8001f48 <HAL_UART_MspInit+0x7c>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d128      	bne.n	8001f40 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001eee:	4b17      	ldr	r3, [pc, #92]	; (8001f4c <HAL_UART_MspInit+0x80>)
 8001ef0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ef2:	4a16      	ldr	r2, [pc, #88]	; (8001f4c <HAL_UART_MspInit+0x80>)
 8001ef4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ef8:	6593      	str	r3, [r2, #88]	; 0x58
 8001efa:	4b14      	ldr	r3, [pc, #80]	; (8001f4c <HAL_UART_MspInit+0x80>)
 8001efc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001efe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f02:	613b      	str	r3, [r7, #16]
 8001f04:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f06:	4b11      	ldr	r3, [pc, #68]	; (8001f4c <HAL_UART_MspInit+0x80>)
 8001f08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f0a:	4a10      	ldr	r2, [pc, #64]	; (8001f4c <HAL_UART_MspInit+0x80>)
 8001f0c:	f043 0301 	orr.w	r3, r3, #1
 8001f10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f12:	4b0e      	ldr	r3, [pc, #56]	; (8001f4c <HAL_UART_MspInit+0x80>)
 8001f14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f16:	f003 0301 	and.w	r3, r3, #1
 8001f1a:	60fb      	str	r3, [r7, #12]
 8001f1c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001f1e:	230c      	movs	r3, #12
 8001f20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f22:	2302      	movs	r3, #2
 8001f24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f26:	2300      	movs	r3, #0
 8001f28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f2e:	2307      	movs	r3, #7
 8001f30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f32:	f107 0314 	add.w	r3, r7, #20
 8001f36:	4619      	mov	r1, r3
 8001f38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f3c:	f007 ff52 	bl	8009de4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001f40:	bf00      	nop
 8001f42:	3728      	adds	r7, #40	; 0x28
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	40004400 	.word	0x40004400
 8001f4c:	40021000 	.word	0x40021000

08001f50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f50:	b480      	push	{r7}
 8001f52:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001f54:	bf00      	nop
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr

08001f5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f5e:	b480      	push	{r7}
 8001f60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f62:	e7fe      	b.n	8001f62 <HardFault_Handler+0x4>

08001f64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f68:	e7fe      	b.n	8001f68 <MemManage_Handler+0x4>

08001f6a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f6a:	b480      	push	{r7}
 8001f6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f6e:	e7fe      	b.n	8001f6e <BusFault_Handler+0x4>

08001f70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f74:	e7fe      	b.n	8001f74 <UsageFault_Handler+0x4>

08001f76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f76:	b480      	push	{r7}
 8001f78:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f7a:	bf00      	nop
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr

08001f84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f88:	bf00      	nop
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr

08001f92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f92:	b480      	push	{r7}
 8001f94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f96:	bf00      	nop
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr

08001fa0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fa4:	f006 f9f6 	bl	8008394 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fa8:	bf00      	nop
 8001faa:	bd80      	pop	{r7, pc}

08001fac <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001fb0:	4802      	ldr	r0, [pc, #8]	; (8001fbc <DMA1_Channel1_IRQHandler+0x10>)
 8001fb2:	f007 fe37 	bl	8009c24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001fb6:	bf00      	nop
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	20000c44 	.word	0x20000c44

08001fc0 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim6_up);
 8001fc4:	4802      	ldr	r0, [pc, #8]	; (8001fd0 <DMA1_Channel3_IRQHandler+0x10>)
 8001fc6:	f007 fe2d 	bl	8009c24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001fca:	bf00      	nop
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	20000bfc 	.word	0x20000bfc

08001fd4 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001fd8:	4802      	ldr	r0, [pc, #8]	; (8001fe4 <ADC1_IRQHandler+0x10>)
 8001fda:	f006 fdb3 	bl	8008b44 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8001fde:	bf00      	nop
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	20000b98 	.word	0x20000b98

08001fe8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001fec:	4b17      	ldr	r3, [pc, #92]	; (800204c <SystemInit+0x64>)
 8001fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ff2:	4a16      	ldr	r2, [pc, #88]	; (800204c <SystemInit+0x64>)
 8001ff4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ff8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001ffc:	4b14      	ldr	r3, [pc, #80]	; (8002050 <SystemInit+0x68>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a13      	ldr	r2, [pc, #76]	; (8002050 <SystemInit+0x68>)
 8002002:	f043 0301 	orr.w	r3, r3, #1
 8002006:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8002008:	4b11      	ldr	r3, [pc, #68]	; (8002050 <SystemInit+0x68>)
 800200a:	2200      	movs	r2, #0
 800200c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800200e:	4b10      	ldr	r3, [pc, #64]	; (8002050 <SystemInit+0x68>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a0f      	ldr	r2, [pc, #60]	; (8002050 <SystemInit+0x68>)
 8002014:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8002018:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800201c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800201e:	4b0c      	ldr	r3, [pc, #48]	; (8002050 <SystemInit+0x68>)
 8002020:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002024:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002026:	4b0a      	ldr	r3, [pc, #40]	; (8002050 <SystemInit+0x68>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a09      	ldr	r2, [pc, #36]	; (8002050 <SystemInit+0x68>)
 800202c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002030:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8002032:	4b07      	ldr	r3, [pc, #28]	; (8002050 <SystemInit+0x68>)
 8002034:	2200      	movs	r2, #0
 8002036:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002038:	4b04      	ldr	r3, [pc, #16]	; (800204c <SystemInit+0x64>)
 800203a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800203e:	609a      	str	r2, [r3, #8]
#endif
}
 8002040:	bf00      	nop
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr
 800204a:	bf00      	nop
 800204c:	e000ed00 	.word	0xe000ed00
 8002050:	40021000 	.word	0x40021000

08002054 <direct_memory_access_init>:
#include <dma/direct_memory_access.h>

direct_memory_access* direct_memory_access_init(ADC_HandleTypeDef* hadc, uint32_t number_channels){
 8002054:	b590      	push	{r4, r7, lr}
 8002056:	b085      	sub	sp, #20
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
 800205c:	6039      	str	r1, [r7, #0]
	if( number_channels == 0 ) return NULL;
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d101      	bne.n	8002068 <direct_memory_access_init+0x14>
 8002064:	2300      	movs	r3, #0
 8002066:	e022      	b.n	80020ae <direct_memory_access_init+0x5a>
	direct_memory_access* result = (direct_memory_access*) malloc(sizeof(direct_memory_access));
 8002068:	2018      	movs	r0, #24
 800206a:	f00a fb49 	bl	800c700 <malloc>
 800206e:	4603      	mov	r3, r0
 8002070:	60fb      	str	r3, [r7, #12]
	result->hadc = hadc;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	687a      	ldr	r2, [r7, #4]
 8002076:	601a      	str	r2, [r3, #0]
	result->number_channels = number_channels;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	683a      	ldr	r2, [r7, #0]
 800207c:	605a      	str	r2, [r3, #4]
	for(register uint32_t i = 0; i < number_channels; i++)
 800207e:	2400      	movs	r4, #0
 8002080:	e011      	b.n	80020a6 <direct_memory_access_init+0x52>
		result->adc_values[i] = (uint32_t) 0;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	1ca2      	adds	r2, r4, #2
 8002086:	2100      	movs	r1, #0
 8002088:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
 800208c:	0091      	lsls	r1, r2, #2
 800208e:	4419      	add	r1, r3
 8002090:	2000      	movs	r0, #0
 8002092:	7048      	strb	r0, [r1, #1]
 8002094:	0091      	lsls	r1, r2, #2
 8002096:	4419      	add	r1, r3
 8002098:	2000      	movs	r0, #0
 800209a:	7088      	strb	r0, [r1, #2]
 800209c:	0092      	lsls	r2, r2, #2
 800209e:	441a      	add	r2, r3
 80020a0:	2300      	movs	r3, #0
 80020a2:	70d3      	strb	r3, [r2, #3]
	for(register uint32_t i = 0; i < number_channels; i++)
 80020a4:	3401      	adds	r4, #1
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	429c      	cmp	r4, r3
 80020aa:	d3ea      	bcc.n	8002082 <direct_memory_access_init+0x2e>
	return result;
 80020ac:	68fb      	ldr	r3, [r7, #12]
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3714      	adds	r7, #20
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd90      	pop	{r4, r7, pc}

080020b6 <direct_memory_access_start>:

void direct_memory_access_start(direct_memory_access* dma){
 80020b6:	b580      	push	{r7, lr}
 80020b8:	b082      	sub	sp, #8
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	6078      	str	r0, [r7, #4]
	if( dma == NULL ) return;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d00a      	beq.n	80020da <direct_memory_access_start+0x24>
	HAL_ADC_Start_DMA(dma->hadc, dma->adc_values, dma->number_channels);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6818      	ldr	r0, [r3, #0]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	f103 0108 	add.w	r1, r3, #8
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	461a      	mov	r2, r3
 80020d4:	f006 fcb2 	bl	8008a3c <HAL_ADC_Start_DMA>
 80020d8:	e000      	b.n	80020dc <direct_memory_access_start+0x26>
	if( dma == NULL ) return;
 80020da:	bf00      	nop
}
 80020dc:	3708      	adds	r7, #8
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
	...

080020e4 <direct_memory_access_get_adc_value>:

uint32_t direct_memory_access_get_adc_value(direct_memory_access* dma, uint32_t channel){
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
 80020ec:	6039      	str	r1, [r7, #0]
	if( dma == NULL || channel < 0 ) return 0;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d101      	bne.n	80020f8 <direct_memory_access_get_adc_value+0x14>
 80020f4:	2300      	movs	r3, #0
 80020f6:	e01e      	b.n	8002136 <direct_memory_access_get_adc_value+0x52>

	switch( channel ){
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	4a12      	ldr	r2, [pc, #72]	; (8002144 <direct_memory_access_get_adc_value+0x60>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d010      	beq.n	8002122 <direct_memory_access_get_adc_value+0x3e>
 8002100:	4a10      	ldr	r2, [pc, #64]	; (8002144 <direct_memory_access_get_adc_value+0x60>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d803      	bhi.n	800210e <direct_memory_access_get_adc_value+0x2a>
 8002106:	4a10      	ldr	r2, [pc, #64]	; (8002148 <direct_memory_access_get_adc_value+0x64>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d007      	beq.n	800211c <direct_memory_access_get_adc_value+0x38>
 800210c:	e012      	b.n	8002134 <direct_memory_access_get_adc_value+0x50>
 800210e:	4a0f      	ldr	r2, [pc, #60]	; (800214c <direct_memory_access_get_adc_value+0x68>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d009      	beq.n	8002128 <direct_memory_access_get_adc_value+0x44>
 8002114:	4a0e      	ldr	r2, [pc, #56]	; (8002150 <direct_memory_access_get_adc_value+0x6c>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d009      	beq.n	800212e <direct_memory_access_get_adc_value+0x4a>
 800211a:	e00b      	b.n	8002134 <direct_memory_access_get_adc_value+0x50>
		case ADC_CHANNEL_1: return dma->adc_values[0];
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	e009      	b.n	8002136 <direct_memory_access_get_adc_value+0x52>
		case ADC_CHANNEL_2: return dma->adc_values[1];
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	68db      	ldr	r3, [r3, #12]
 8002126:	e006      	b.n	8002136 <direct_memory_access_get_adc_value+0x52>
		case ADC_CHANNEL_3: return dma->adc_values[2];
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	691b      	ldr	r3, [r3, #16]
 800212c:	e003      	b.n	8002136 <direct_memory_access_get_adc_value+0x52>
		case ADC_CHANNEL_12: return dma->adc_values[3];
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	695b      	ldr	r3, [r3, #20]
 8002132:	e000      	b.n	8002136 <direct_memory_access_get_adc_value+0x52>
		default: return 0;
 8002134:	2300      	movs	r3, #0
	}

}
 8002136:	4618      	mov	r0, r3
 8002138:	370c      	adds	r7, #12
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr
 8002142:	bf00      	nop
 8002144:	08600004 	.word	0x08600004
 8002148:	04300002 	.word	0x04300002
 800214c:	0c900008 	.word	0x0c900008
 8002150:	32601000 	.word	0x32601000

08002154 <HAL_ADC_ConvCpltCallback>:

// This function is based on a callback whenever the DMA reads from peripherals to memory
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]

}
 800215c:	bf00      	nop
 800215e:	370c      	adds	r7, #12
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr

08002168 <ds18b20_init>:
#include<ds18b20/ds18b20.h>

ds18b20* ds18b20_init(GPIO_TypeDef* port, uint16_t pin){
 8002168:	b580      	push	{r7, lr}
 800216a:	b084      	sub	sp, #16
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	460b      	mov	r3, r1
 8002172:	807b      	strh	r3, [r7, #2]
	ds18b20* result = (ds18b20*) malloc(sizeof(ds18b20));
 8002174:	2006      	movs	r0, #6
 8002176:	f00a fac3 	bl	800c700 <malloc>
 800217a:	4603      	mov	r3, r0
 800217c:	60fb      	str	r3, [r7, #12]
	result->port = port;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	687a      	ldr	r2, [r7, #4]
 8002182:	601a      	str	r2, [r3, #0]
	result->pin = pin;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	887a      	ldrh	r2, [r7, #2]
 8002188:	809a      	strh	r2, [r3, #4]
	return result;
 800218a:	68fb      	ldr	r3, [r7, #12]
}
 800218c:	4618      	mov	r0, r3
 800218e:	3710      	adds	r7, #16
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}

08002194 <dsb18b20_is_presence>:
	if( ds18b20 == NULL ) return;
	free(ds18b20);
	ds18b20 = NULL;
}

uint8_t dsb18b20_is_presence(ds18b20* ds18b20){
 8002194:	b580      	push	{r7, lr}
 8002196:	b084      	sub	sp, #16
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
	if( ds18b20 == NULL ) return 0;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d101      	bne.n	80021a6 <dsb18b20_is_presence+0x12>
 80021a2:	2300      	movs	r3, #0
 80021a4:	e036      	b.n	8002214 <dsb18b20_is_presence+0x80>

	stm32_util_set_pin_output(ds18b20->port, ds18b20->pin);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	889b      	ldrh	r3, [r3, #4]
 80021ae:	b29b      	uxth	r3, r3
 80021b0:	4619      	mov	r1, r3
 80021b2:	4610      	mov	r0, r2
 80021b4:	f005 ff64 	bl	8008080 <stm32_util_set_pin_output>
	HAL_GPIO_WritePin(ds18b20->port, ds18b20->pin, 0);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6818      	ldr	r0, [r3, #0]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	889b      	ldrh	r3, [r3, #4]
 80021c0:	b29b      	uxth	r3, r3
 80021c2:	2200      	movs	r2, #0
 80021c4:	4619      	mov	r1, r3
 80021c6:	f007 ff9f 	bl	800a108 <HAL_GPIO_WritePin>
	stm32_util_delay_in_microseconds(480);
 80021ca:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 80021ce:	f005 ffa3 	bl	8008118 <stm32_util_delay_in_microseconds>
	stm32_util_set_pin_input(ds18b20->port, ds18b20->pin);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	889b      	ldrh	r3, [r3, #4]
 80021da:	b29b      	uxth	r3, r3
 80021dc:	4619      	mov	r1, r3
 80021de:	4610      	mov	r0, r2
 80021e0:	f005 ff6c 	bl	80080bc <stm32_util_set_pin_input>
	stm32_util_delay_in_microseconds(80);
 80021e4:	2050      	movs	r0, #80	; 0x50
 80021e6:	f005 ff97 	bl	8008118 <stm32_util_delay_in_microseconds>

	uint8_t result = 0;
 80021ea:	2300      	movs	r3, #0
 80021ec:	73fb      	strb	r3, [r7, #15]
	if( ! HAL_GPIO_ReadPin(ds18b20->port, ds18b20->pin) ) result = 1;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	889b      	ldrh	r3, [r3, #4]
 80021f6:	b29b      	uxth	r3, r3
 80021f8:	4619      	mov	r1, r3
 80021fa:	4610      	mov	r0, r2
 80021fc:	f007 ff6c 	bl	800a0d8 <HAL_GPIO_ReadPin>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d101      	bne.n	800220a <dsb18b20_is_presence+0x76>
 8002206:	2301      	movs	r3, #1
 8002208:	73fb      	strb	r3, [r7, #15]
	stm32_util_delay_in_microseconds(400);
 800220a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800220e:	f005 ff83 	bl	8008118 <stm32_util_delay_in_microseconds>
	return result;
 8002212:	7bfb      	ldrb	r3, [r7, #15]

}
 8002214:	4618      	mov	r0, r3
 8002216:	3710      	adds	r7, #16
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}

0800221c <ds18b20_write>:

void ds18b20_write(ds18b20* ds18b20, uint8_t data){
 800221c:	b580      	push	{r7, lr}
 800221e:	b084      	sub	sp, #16
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
 8002224:	460b      	mov	r3, r1
 8002226:	70fb      	strb	r3, [r7, #3]
	if( ds18b20 == NULL ) return;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d05a      	beq.n	80022e4 <ds18b20_write+0xc8>

	stm32_util_set_pin_output(ds18b20->port, ds18b20->pin);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	889b      	ldrh	r3, [r3, #4]
 8002236:	b29b      	uxth	r3, r3
 8002238:	4619      	mov	r1, r3
 800223a:	4610      	mov	r0, r2
 800223c:	f005 ff20 	bl	8008080 <stm32_util_set_pin_output>
	for (int i=0; i<8; i++){
 8002240:	2300      	movs	r3, #0
 8002242:	60fb      	str	r3, [r7, #12]
 8002244:	e04a      	b.n	80022dc <ds18b20_write+0xc0>
		if ( (data & (1<<i)) != 0 ){
 8002246:	78fa      	ldrb	r2, [r7, #3]
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	fa42 f303 	asr.w	r3, r2, r3
 800224e:	f003 0301 	and.w	r3, r3, #1
 8002252:	2b00      	cmp	r3, #0
 8002254:	d021      	beq.n	800229a <ds18b20_write+0x7e>
			stm32_util_set_pin_output(ds18b20->port, ds18b20->pin);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	889b      	ldrh	r3, [r3, #4]
 800225e:	b29b      	uxth	r3, r3
 8002260:	4619      	mov	r1, r3
 8002262:	4610      	mov	r0, r2
 8002264:	f005 ff0c 	bl	8008080 <stm32_util_set_pin_output>
			HAL_GPIO_WritePin(ds18b20->port, ds18b20->pin, 0);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6818      	ldr	r0, [r3, #0]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	889b      	ldrh	r3, [r3, #4]
 8002270:	b29b      	uxth	r3, r3
 8002272:	2200      	movs	r2, #0
 8002274:	4619      	mov	r1, r3
 8002276:	f007 ff47 	bl	800a108 <HAL_GPIO_WritePin>
			stm32_util_delay_in_microseconds(1);
 800227a:	2001      	movs	r0, #1
 800227c:	f005 ff4c 	bl	8008118 <stm32_util_delay_in_microseconds>
			stm32_util_set_pin_input(ds18b20->port, ds18b20->pin);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	889b      	ldrh	r3, [r3, #4]
 8002288:	b29b      	uxth	r3, r3
 800228a:	4619      	mov	r1, r3
 800228c:	4610      	mov	r0, r2
 800228e:	f005 ff15 	bl	80080bc <stm32_util_set_pin_input>
			stm32_util_delay_in_microseconds(50);
 8002292:	2032      	movs	r0, #50	; 0x32
 8002294:	f005 ff40 	bl	8008118 <stm32_util_delay_in_microseconds>
 8002298:	e01d      	b.n	80022d6 <ds18b20_write+0xba>
		} else {
			stm32_util_set_pin_output(ds18b20->port, ds18b20->pin);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	889b      	ldrh	r3, [r3, #4]
 80022a2:	b29b      	uxth	r3, r3
 80022a4:	4619      	mov	r1, r3
 80022a6:	4610      	mov	r0, r2
 80022a8:	f005 feea 	bl	8008080 <stm32_util_set_pin_output>
			HAL_GPIO_WritePin(ds18b20->port, ds18b20->pin, 0);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6818      	ldr	r0, [r3, #0]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	889b      	ldrh	r3, [r3, #4]
 80022b4:	b29b      	uxth	r3, r3
 80022b6:	2200      	movs	r2, #0
 80022b8:	4619      	mov	r1, r3
 80022ba:	f007 ff25 	bl	800a108 <HAL_GPIO_WritePin>
			stm32_util_delay_in_microseconds(50);
 80022be:	2032      	movs	r0, #50	; 0x32
 80022c0:	f005 ff2a 	bl	8008118 <stm32_util_delay_in_microseconds>
			stm32_util_set_pin_input(ds18b20->port, ds18b20->pin);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	889b      	ldrh	r3, [r3, #4]
 80022cc:	b29b      	uxth	r3, r3
 80022ce:	4619      	mov	r1, r3
 80022d0:	4610      	mov	r0, r2
 80022d2:	f005 fef3 	bl	80080bc <stm32_util_set_pin_input>
	for (int i=0; i<8; i++){
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	3301      	adds	r3, #1
 80022da:	60fb      	str	r3, [r7, #12]
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	2b07      	cmp	r3, #7
 80022e0:	ddb1      	ble.n	8002246 <ds18b20_write+0x2a>
 80022e2:	e000      	b.n	80022e6 <ds18b20_write+0xca>
	if( ds18b20 == NULL ) return;
 80022e4:	bf00      	nop
		}
	}
}
 80022e6:	3710      	adds	r7, #16
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}

080022ec <ds18b20_read>:

float ds18b20_read(ds18b20* ds18b20){
 80022ec:	b5b0      	push	{r4, r5, r7, lr}
 80022ee:	b084      	sub	sp, #16
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
	if( ds18b20 == NULL ) return 0;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d102      	bne.n	8002300 <ds18b20_read+0x14>
 80022fa:	f04f 0300 	mov.w	r3, #0
 80022fe:	e089      	b.n	8002414 <ds18b20_read+0x128>

	dsb18b20_is_presence(ds18b20);
 8002300:	6878      	ldr	r0, [r7, #4]
 8002302:	f7ff ff47 	bl	8002194 <dsb18b20_is_presence>
	stm32_util_delay_in_milliseconds(1);
 8002306:	2001      	movs	r0, #1
 8002308:	f005 ff11 	bl	800812e <stm32_util_delay_in_milliseconds>
	ds18b20_write(ds18b20, 0xCC);
 800230c:	21cc      	movs	r1, #204	; 0xcc
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	f7ff ff84 	bl	800221c <ds18b20_write>
	ds18b20_write(ds18b20, 0x44);
 8002314:	2144      	movs	r1, #68	; 0x44
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	f7ff ff80 	bl	800221c <ds18b20_write>
	stm32_util_delay_in_milliseconds(800);
 800231c:	f44f 7048 	mov.w	r0, #800	; 0x320
 8002320:	f005 ff05 	bl	800812e <stm32_util_delay_in_milliseconds>

	dsb18b20_is_presence(ds18b20);
 8002324:	6878      	ldr	r0, [r7, #4]
 8002326:	f7ff ff35 	bl	8002194 <dsb18b20_is_presence>
	stm32_util_delay_in_milliseconds(1);
 800232a:	2001      	movs	r0, #1
 800232c:	f005 feff 	bl	800812e <stm32_util_delay_in_milliseconds>
	ds18b20_write(ds18b20, 0xCC);
 8002330:	21cc      	movs	r1, #204	; 0xcc
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	f7ff ff72 	bl	800221c <ds18b20_write>
	ds18b20_write(ds18b20, 0xBE);
 8002338:	21be      	movs	r1, #190	; 0xbe
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	f7ff ff6e 	bl	800221c <ds18b20_write>

	uint8_t value[] = {0,0};
 8002340:	2300      	movs	r3, #0
 8002342:	723b      	strb	r3, [r7, #8]
 8002344:	2300      	movs	r3, #0
 8002346:	727b      	strb	r3, [r7, #9]
	for(register int j = 0; j < 2; j++){
 8002348:	2400      	movs	r4, #0
 800234a:	e04c      	b.n	80023e6 <ds18b20_read+0xfa>
		stm32_util_set_pin_input(ds18b20->port, ds18b20->pin);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	889b      	ldrh	r3, [r3, #4]
 8002354:	b29b      	uxth	r3, r3
 8002356:	4619      	mov	r1, r3
 8002358:	4610      	mov	r0, r2
 800235a:	f005 feaf 	bl	80080bc <stm32_util_set_pin_input>
		for (register int i=0; i < 8; i++){
 800235e:	2500      	movs	r5, #0
 8002360:	e03e      	b.n	80023e0 <ds18b20_read+0xf4>
			stm32_util_set_pin_output(ds18b20->port, ds18b20->pin);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	889b      	ldrh	r3, [r3, #4]
 800236a:	b29b      	uxth	r3, r3
 800236c:	4619      	mov	r1, r3
 800236e:	4610      	mov	r0, r2
 8002370:	f005 fe86 	bl	8008080 <stm32_util_set_pin_output>
			HAL_GPIO_WritePin(ds18b20->port, ds18b20->pin, 0);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6818      	ldr	r0, [r3, #0]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	889b      	ldrh	r3, [r3, #4]
 800237c:	b29b      	uxth	r3, r3
 800237e:	2200      	movs	r2, #0
 8002380:	4619      	mov	r1, r3
 8002382:	f007 fec1 	bl	800a108 <HAL_GPIO_WritePin>
			stm32_util_delay_in_microseconds(1);
 8002386:	2001      	movs	r0, #1
 8002388:	f005 fec6 	bl	8008118 <stm32_util_delay_in_microseconds>
			stm32_util_set_pin_input(ds18b20->port, ds18b20->pin);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	889b      	ldrh	r3, [r3, #4]
 8002394:	b29b      	uxth	r3, r3
 8002396:	4619      	mov	r1, r3
 8002398:	4610      	mov	r0, r2
 800239a:	f005 fe8f 	bl	80080bc <stm32_util_set_pin_input>
			if (HAL_GPIO_ReadPin(ds18b20->port, ds18b20->pin)) value[j] |= 1<<i;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	889b      	ldrh	r3, [r3, #4]
 80023a6:	b29b      	uxth	r3, r3
 80023a8:	4619      	mov	r1, r3
 80023aa:	4610      	mov	r0, r2
 80023ac:	f007 fe94 	bl	800a0d8 <HAL_GPIO_ReadPin>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d010      	beq.n	80023d8 <ds18b20_read+0xec>
 80023b6:	f107 0310 	add.w	r3, r7, #16
 80023ba:	4423      	add	r3, r4
 80023bc:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 80023c0:	b25a      	sxtb	r2, r3
 80023c2:	2301      	movs	r3, #1
 80023c4:	40ab      	lsls	r3, r5
 80023c6:	b25b      	sxtb	r3, r3
 80023c8:	4313      	orrs	r3, r2
 80023ca:	b25b      	sxtb	r3, r3
 80023cc:	b2da      	uxtb	r2, r3
 80023ce:	f107 0310 	add.w	r3, r7, #16
 80023d2:	4423      	add	r3, r4
 80023d4:	f803 2c08 	strb.w	r2, [r3, #-8]
			stm32_util_delay_in_microseconds(50);
 80023d8:	2032      	movs	r0, #50	; 0x32
 80023da:	f005 fe9d 	bl	8008118 <stm32_util_delay_in_microseconds>
		for (register int i=0; i < 8; i++){
 80023de:	3501      	adds	r5, #1
 80023e0:	2d07      	cmp	r5, #7
 80023e2:	ddbe      	ble.n	8002362 <ds18b20_read+0x76>
	for(register int j = 0; j < 2; j++){
 80023e4:	3401      	adds	r4, #1
 80023e6:	2c01      	cmp	r4, #1
 80023e8:	ddb0      	ble.n	800234c <ds18b20_read+0x60>
		}
	}
	float result =  ( (value[1] << 8) | value[0] ) / 16.0;
 80023ea:	7a7b      	ldrb	r3, [r7, #9]
 80023ec:	021b      	lsls	r3, r3, #8
 80023ee:	7a3a      	ldrb	r2, [r7, #8]
 80023f0:	4313      	orrs	r3, r2
 80023f2:	4618      	mov	r0, r3
 80023f4:	f7fe f8a6 	bl	8000544 <__aeabi_i2d>
 80023f8:	f04f 0200 	mov.w	r2, #0
 80023fc:	4b09      	ldr	r3, [pc, #36]	; (8002424 <ds18b20_read+0x138>)
 80023fe:	f7fe fa35 	bl	800086c <__aeabi_ddiv>
 8002402:	4603      	mov	r3, r0
 8002404:	460c      	mov	r4, r1
 8002406:	4618      	mov	r0, r3
 8002408:	4621      	mov	r1, r4
 800240a:	f7fe fbfd 	bl	8000c08 <__aeabi_d2f>
 800240e:	4603      	mov	r3, r0
 8002410:	60fb      	str	r3, [r7, #12]
	return result;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	ee07 3a90 	vmov	s15, r3
}
 8002418:	eeb0 0a67 	vmov.f32	s0, s15
 800241c:	3710      	adds	r7, #16
 800241e:	46bd      	mov	sp, r7
 8002420:	bdb0      	pop	{r4, r5, r7, pc}
 8002422:	bf00      	nop
 8002424:	40300000 	.word	0x40300000

08002428 <at_init>:
uint8_t at_rx_cbuf_area[AT_CBUF_MAX];
ceb_cbuf_t at_cb;
at_cmd_t cmd;
volatile bool at_started = false;

bool at_init(void) {
 8002428:	b580      	push	{r7, lr}
 800242a:	af00      	add	r7, sp, #0
    if(ceb_cbuf_init(&at_cb, at_rx_cbuf_area, AT_CBUF_MAX) == CEB_CBUF_OK)
 800242c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002430:	4907      	ldr	r1, [pc, #28]	; (8002450 <at_init+0x28>)
 8002432:	4808      	ldr	r0, [pc, #32]	; (8002454 <at_init+0x2c>)
 8002434:	f000 fbaa 	bl	8002b8c <ceb_cbuf_init>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d102      	bne.n	8002444 <at_init+0x1c>
    	at_started = true;
 800243e:	4b06      	ldr	r3, [pc, #24]	; (8002458 <at_init+0x30>)
 8002440:	2201      	movs	r2, #1
 8002442:	701a      	strb	r2, [r3, #0]

    return at_started;
 8002444:	4b04      	ldr	r3, [pc, #16]	; (8002458 <at_init+0x30>)
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	b2db      	uxtb	r3, r3
}   
 800244a:	4618      	mov	r0, r3
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	20000d58 	.word	0x20000d58
 8002454:	20000d4c 	.word	0x20000d4c
 8002458:	20000af9 	.word	0x20000af9

0800245c <at_send_cmd_blocking>:

ceb_cbuf_t* at_get_cbuf(void){
    return &at_cb;
}

at_status_t at_send_cmd_blocking(at_cmd_t* cmd, uint32_t tmrout_ms){
 800245c:	b5b0      	push	{r4, r5, r7, lr}
 800245e:	b0aa      	sub	sp, #168	; 0xa8
 8002460:	af04      	add	r7, sp, #16
 8002462:	6078      	str	r0, [r7, #4]
 8002464:	6039      	str	r1, [r7, #0]
    if(cmd->id >= AT_CMD_NONE)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	781b      	ldrb	r3, [r3, #0]
 800246a:	2b13      	cmp	r3, #19
 800246c:	d901      	bls.n	8002472 <at_send_cmd_blocking+0x16>
        return AT_STATUS_INVAL_CMD;
 800246e:	2303      	movs	r3, #3
 8002470:	e366      	b.n	8002b40 <at_send_cmd_blocking+0x6e4>

    // AT, if any
    hw_serial_tx(at_at, strlen((const char*)at_at));
 8002472:	4bb1      	ldr	r3, [pc, #708]	; (8002738 <at_send_cmd_blocking+0x2dc>)
 8002474:	681c      	ldr	r4, [r3, #0]
 8002476:	4bb0      	ldr	r3, [pc, #704]	; (8002738 <at_send_cmd_blocking+0x2dc>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4618      	mov	r0, r3
 800247c:	f7fd feb2 	bl	80001e4 <strlen>
 8002480:	4603      	mov	r3, r0
 8002482:	b29b      	uxth	r3, r3
 8002484:	4619      	mov	r1, r3
 8002486:	4620      	mov	r0, r4
 8002488:	f000 ff20 	bl	80032cc <hw_serial_tx>

    // base command name
    hw_serial_tx(at_cmd_basename_str[cmd->id], strlen((const char*)at_cmd_basename_str[cmd->id]));
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	781b      	ldrb	r3, [r3, #0]
 8002490:	461a      	mov	r2, r3
 8002492:	4baa      	ldr	r3, [pc, #680]	; (800273c <at_send_cmd_blocking+0x2e0>)
 8002494:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	461a      	mov	r2, r3
 800249e:	4ba7      	ldr	r3, [pc, #668]	; (800273c <at_send_cmd_blocking+0x2e0>)
 80024a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024a4:	4618      	mov	r0, r3
 80024a6:	f7fd fe9d 	bl	80001e4 <strlen>
 80024aa:	4603      	mov	r3, r0
 80024ac:	b29b      	uxth	r3, r3
 80024ae:	4619      	mov	r1, r3
 80024b0:	4620      	mov	r0, r4
 80024b2:	f000 ff0b 	bl	80032cc <hw_serial_tx>

    // parameters, if any
    switch(cmd->id){
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	781b      	ldrb	r3, [r3, #0]
 80024ba:	3b02      	subs	r3, #2
 80024bc:	2b11      	cmp	r3, #17
 80024be:	f200 82ce 	bhi.w	8002a5e <at_send_cmd_blocking+0x602>
 80024c2:	a201      	add	r2, pc, #4	; (adr r2, 80024c8 <at_send_cmd_blocking+0x6c>)
 80024c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024c8:	0800257d 	.word	0x0800257d
 80024cc:	08002599 	.word	0x08002599
 80024d0:	08002511 	.word	0x08002511
 80024d4:	08002a5f 	.word	0x08002a5f
 80024d8:	080025bd 	.word	0x080025bd
 80024dc:	08002613 	.word	0x08002613
 80024e0:	080026c1 	.word	0x080026c1
 80024e4:	08002645 	.word	0x08002645
 80024e8:	08002759 	.word	0x08002759
 80024ec:	080027eb 	.word	0x080027eb
 80024f0:	0800281f 	.word	0x0800281f
 80024f4:	08002535 	.word	0x08002535
 80024f8:	08002887 	.word	0x08002887
 80024fc:	080029e5 	.word	0x080029e5
 8002500:	08002983 	.word	0x08002983
 8002504:	08002853 	.word	0x08002853
 8002508:	08002559 	.word	0x08002559
 800250c:	08002a13 	.word	0x08002a13
        case AT_CMD_WIFI_AP_MODE: {
            uint8_t mode = '0' + cmd->payload.wifi_mode.ap_station;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	785b      	ldrb	r3, [r3, #1]
 8002514:	3330      	adds	r3, #48	; 0x30
 8002516:	b2db      	uxtb	r3, r3
 8002518:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
            hw_serial_tx((uint8_t *)"=", 1);
 800251c:	2101      	movs	r1, #1
 800251e:	4888      	ldr	r0, [pc, #544]	; (8002740 <at_send_cmd_blocking+0x2e4>)
 8002520:	f000 fed4 	bl	80032cc <hw_serial_tx>
            hw_serial_tx(&mode, 1);
 8002524:	f107 0393 	add.w	r3, r7, #147	; 0x93
 8002528:	2101      	movs	r1, #1
 800252a:	4618      	mov	r0, r3
 800252c:	f000 fece 	bl	80032cc <hw_serial_tx>
            break;
 8002530:	bf00      	nop
 8002532:	e2ae      	b.n	8002a92 <at_send_cmd_blocking+0x636>
        }

        case AT_CMD_CON_MUX: {
            uint8_t mode = '0' + cmd->payload.mux.enabled;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	785b      	ldrb	r3, [r3, #1]
 8002538:	3330      	adds	r3, #48	; 0x30
 800253a:	b2db      	uxtb	r3, r3
 800253c:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
            hw_serial_tx((uint8_t *)"=", 1);
 8002540:	2101      	movs	r1, #1
 8002542:	487f      	ldr	r0, [pc, #508]	; (8002740 <at_send_cmd_blocking+0x2e4>)
 8002544:	f000 fec2 	bl	80032cc <hw_serial_tx>
            hw_serial_tx(&mode, 1);
 8002548:	f107 0392 	add.w	r3, r7, #146	; 0x92
 800254c:	2101      	movs	r1, #1
 800254e:	4618      	mov	r0, r3
 8002550:	f000 febc 	bl	80032cc <hw_serial_tx>
            break;
 8002554:	bf00      	nop
 8002556:	e29c      	b.n	8002a92 <at_send_cmd_blocking+0x636>
        }

        case AT_CMD_CON_MODE: {
            uint8_t mode = '0' + cmd->payload.con_mode.mode;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	785b      	ldrb	r3, [r3, #1]
 800255c:	3330      	adds	r3, #48	; 0x30
 800255e:	b2db      	uxtb	r3, r3
 8002560:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91
            hw_serial_tx((uint8_t *)"=", 1);
 8002564:	2101      	movs	r1, #1
 8002566:	4876      	ldr	r0, [pc, #472]	; (8002740 <at_send_cmd_blocking+0x2e4>)
 8002568:	f000 feb0 	bl	80032cc <hw_serial_tx>
            hw_serial_tx(&mode, 1);
 800256c:	f107 0391 	add.w	r3, r7, #145	; 0x91
 8002570:	2101      	movs	r1, #1
 8002572:	4618      	mov	r0, r3
 8002574:	f000 feaa 	bl	80032cc <hw_serial_tx>
            break;            
 8002578:	bf00      	nop
 800257a:	e28a      	b.n	8002a92 <at_send_cmd_blocking+0x636>
        }

        case AT_CMD_ECHO: {
            uint8_t mode = '0' + cmd->payload.echo.enabled;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	785b      	ldrb	r3, [r3, #1]
 8002580:	3330      	adds	r3, #48	; 0x30
 8002582:	b2db      	uxtb	r3, r3
 8002584:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
            hw_serial_tx(&mode, 1);
 8002588:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800258c:	2101      	movs	r1, #1
 800258e:	4618      	mov	r0, r3
 8002590:	f000 fe9c 	bl	80032cc <hw_serial_tx>
            break;                        
 8002594:	bf00      	nop
 8002596:	e27c      	b.n	8002a92 <at_send_cmd_blocking+0x636>
        }

        case AT_CMD_WIFI_AUTO_CON: {
            uint8_t enabled = '0' + cmd->payload.wifi_autocon.enabled;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	785b      	ldrb	r3, [r3, #1]
 800259c:	3330      	adds	r3, #48	; 0x30
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            hw_serial_tx((uint8_t *)"=", 1);
 80025a4:	2101      	movs	r1, #1
 80025a6:	4866      	ldr	r0, [pc, #408]	; (8002740 <at_send_cmd_blocking+0x2e4>)
 80025a8:	f000 fe90 	bl	80032cc <hw_serial_tx>
            hw_serial_tx(&enabled, 1);
 80025ac:	f107 038f 	add.w	r3, r7, #143	; 0x8f
 80025b0:	2101      	movs	r1, #1
 80025b2:	4618      	mov	r0, r3
 80025b4:	f000 fe8a 	bl	80032cc <hw_serial_tx>
        	break;
 80025b8:	bf00      	nop
 80025ba:	e26a      	b.n	8002a92 <at_send_cmd_blocking+0x636>
        }

        case AT_CMD_WIFI_AP_SET: {
            hw_serial_tx((uint8_t *)"=\"", 2);
 80025bc:	2102      	movs	r1, #2
 80025be:	4861      	ldr	r0, [pc, #388]	; (8002744 <at_send_cmd_blocking+0x2e8>)
 80025c0:	f000 fe84 	bl	80032cc <hw_serial_tx>
            hw_serial_tx(cmd->payload.wifi_ap.ssid, strlen((char*)cmd->payload.wifi_ap.ssid));
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	f8d3 4001 	ldr.w	r4, [r3, #1]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	f8d3 3001 	ldr.w	r3, [r3, #1]
 80025d0:	4618      	mov	r0, r3
 80025d2:	f7fd fe07 	bl	80001e4 <strlen>
 80025d6:	4603      	mov	r3, r0
 80025d8:	b29b      	uxth	r3, r3
 80025da:	4619      	mov	r1, r3
 80025dc:	4620      	mov	r0, r4
 80025de:	f000 fe75 	bl	80032cc <hw_serial_tx>
            hw_serial_tx((uint8_t *)"\",\"", 3);
 80025e2:	2103      	movs	r1, #3
 80025e4:	4858      	ldr	r0, [pc, #352]	; (8002748 <at_send_cmd_blocking+0x2ec>)
 80025e6:	f000 fe71 	bl	80032cc <hw_serial_tx>
            hw_serial_tx(cmd->payload.wifi_ap.pwd, strlen((char*)cmd->payload.wifi_ap.pwd));
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	f8d3 4005 	ldr.w	r4, [r3, #5]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	f8d3 3005 	ldr.w	r3, [r3, #5]
 80025f6:	4618      	mov	r0, r3
 80025f8:	f7fd fdf4 	bl	80001e4 <strlen>
 80025fc:	4603      	mov	r3, r0
 80025fe:	b29b      	uxth	r3, r3
 8002600:	4619      	mov	r1, r3
 8002602:	4620      	mov	r0, r4
 8002604:	f000 fe62 	bl	80032cc <hw_serial_tx>
            hw_serial_tx((uint8_t *)"\"", 1);
 8002608:	2101      	movs	r1, #1
 800260a:	4850      	ldr	r0, [pc, #320]	; (800274c <at_send_cmd_blocking+0x2f0>)
 800260c:	f000 fe5e 	bl	80032cc <hw_serial_tx>
            break;
 8002610:	e23f      	b.n	8002a92 <at_send_cmd_blocking+0x636>
        }

        case AT_CMD_WIFI_AP_DHCP: {
            uint8_t val[10];
            sprintf((char*)val, "=%d,%d", cmd->payload.wifi_dhcp.ap_station, cmd->payload.wifi_dhcp.enabled);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	785b      	ldrb	r3, [r3, #1]
 8002616:	461a      	mov	r2, r3
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	789b      	ldrb	r3, [r3, #2]
 800261c:	f107 0084 	add.w	r0, r7, #132	; 0x84
 8002620:	494b      	ldr	r1, [pc, #300]	; (8002750 <at_send_cmd_blocking+0x2f4>)
 8002622:	f00a fad7 	bl	800cbd4 <sprintf>
            hw_serial_tx(val, strlen((char*)val));
 8002626:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800262a:	4618      	mov	r0, r3
 800262c:	f7fd fdda 	bl	80001e4 <strlen>
 8002630:	4603      	mov	r3, r0
 8002632:	b29a      	uxth	r2, r3
 8002634:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002638:	4611      	mov	r1, r2
 800263a:	4618      	mov	r0, r3
 800263c:	f000 fe46 	bl	80032cc <hw_serial_tx>
            break;
 8002640:	bf00      	nop
 8002642:	e226      	b.n	8002a92 <at_send_cmd_blocking+0x636>
        }

        case AT_CMD_WIFI_AP_NET_CFG: {
            hw_serial_tx((uint8_t *)"=\"", 2);
 8002644:	2102      	movs	r1, #2
 8002646:	483f      	ldr	r0, [pc, #252]	; (8002744 <at_send_cmd_blocking+0x2e8>)
 8002648:	f000 fe40 	bl	80032cc <hw_serial_tx>
            hw_serial_tx(cmd->payload.wifi_net_cfg.ip, strlen((char*)cmd->payload.wifi_net_cfg.ip));
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	f8d3 4001 	ldr.w	r4, [r3, #1]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8002658:	4618      	mov	r0, r3
 800265a:	f7fd fdc3 	bl	80001e4 <strlen>
 800265e:	4603      	mov	r3, r0
 8002660:	b29b      	uxth	r3, r3
 8002662:	4619      	mov	r1, r3
 8002664:	4620      	mov	r0, r4
 8002666:	f000 fe31 	bl	80032cc <hw_serial_tx>
            hw_serial_tx((uint8_t *)"\",\"", 3);
 800266a:	2103      	movs	r1, #3
 800266c:	4836      	ldr	r0, [pc, #216]	; (8002748 <at_send_cmd_blocking+0x2ec>)
 800266e:	f000 fe2d 	bl	80032cc <hw_serial_tx>
            hw_serial_tx(cmd->payload.wifi_net_cfg.gateway, strlen((char*)cmd->payload.wifi_net_cfg.gateway));
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	f8d3 4005 	ldr.w	r4, [r3, #5]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	f8d3 3005 	ldr.w	r3, [r3, #5]
 800267e:	4618      	mov	r0, r3
 8002680:	f7fd fdb0 	bl	80001e4 <strlen>
 8002684:	4603      	mov	r3, r0
 8002686:	b29b      	uxth	r3, r3
 8002688:	4619      	mov	r1, r3
 800268a:	4620      	mov	r0, r4
 800268c:	f000 fe1e 	bl	80032cc <hw_serial_tx>
            hw_serial_tx((uint8_t *)"\",\"", 3);
 8002690:	2103      	movs	r1, #3
 8002692:	482d      	ldr	r0, [pc, #180]	; (8002748 <at_send_cmd_blocking+0x2ec>)
 8002694:	f000 fe1a 	bl	80032cc <hw_serial_tx>
            hw_serial_tx(cmd->payload.wifi_net_cfg.mask, strlen((char*)cmd->payload.wifi_net_cfg.mask));
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	f8d3 4009 	ldr.w	r4, [r3, #9]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	f8d3 3009 	ldr.w	r3, [r3, #9]
 80026a4:	4618      	mov	r0, r3
 80026a6:	f7fd fd9d 	bl	80001e4 <strlen>
 80026aa:	4603      	mov	r3, r0
 80026ac:	b29b      	uxth	r3, r3
 80026ae:	4619      	mov	r1, r3
 80026b0:	4620      	mov	r0, r4
 80026b2:	f000 fe0b 	bl	80032cc <hw_serial_tx>
            hw_serial_tx((uint8_t *)"\"", 1);
 80026b6:	2101      	movs	r1, #1
 80026b8:	4824      	ldr	r0, [pc, #144]	; (800274c <at_send_cmd_blocking+0x2f0>)
 80026ba:	f000 fe07 	bl	80032cc <hw_serial_tx>
            break;
 80026be:	e1e8      	b.n	8002a92 <at_send_cmd_blocking+0x636>
        }

        case AT_CMD_WIFI_AP_DHCP_CFG: {
            uint8_t val[10];
            sprintf((char *)val, "=%d,%d,\"", cmd->payload.wifi_dhcp_cfg.enabled, cmd->payload.wifi_dhcp_cfg.lease_time_min);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	785b      	ldrb	r3, [r3, #1]
 80026c4:	461a      	mov	r2, r3
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	885b      	ldrh	r3, [r3, #2]
 80026ca:	b29b      	uxth	r3, r3
 80026cc:	f107 0078 	add.w	r0, r7, #120	; 0x78
 80026d0:	4920      	ldr	r1, [pc, #128]	; (8002754 <at_send_cmd_blocking+0x2f8>)
 80026d2:	f00a fa7f 	bl	800cbd4 <sprintf>
            hw_serial_tx(val, strlen((char*)val));
 80026d6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80026da:	4618      	mov	r0, r3
 80026dc:	f7fd fd82 	bl	80001e4 <strlen>
 80026e0:	4603      	mov	r3, r0
 80026e2:	b29a      	uxth	r2, r3
 80026e4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80026e8:	4611      	mov	r1, r2
 80026ea:	4618      	mov	r0, r3
 80026ec:	f000 fdee 	bl	80032cc <hw_serial_tx>
            hw_serial_tx(cmd->payload.wifi_dhcp_cfg.ip_begin, strlen((char*)cmd->payload.wifi_dhcp_cfg.ip_begin));
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	685c      	ldr	r4, [r3, #4]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	4618      	mov	r0, r3
 80026fa:	f7fd fd73 	bl	80001e4 <strlen>
 80026fe:	4603      	mov	r3, r0
 8002700:	b29b      	uxth	r3, r3
 8002702:	4619      	mov	r1, r3
 8002704:	4620      	mov	r0, r4
 8002706:	f000 fde1 	bl	80032cc <hw_serial_tx>
            hw_serial_tx((uint8_t *)"\",\"", 3);
 800270a:	2103      	movs	r1, #3
 800270c:	480e      	ldr	r0, [pc, #56]	; (8002748 <at_send_cmd_blocking+0x2ec>)
 800270e:	f000 fddd 	bl	80032cc <hw_serial_tx>
            hw_serial_tx(cmd->payload.wifi_dhcp_cfg.ip_end, strlen((char*)cmd->payload.wifi_dhcp_cfg.ip_end));
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	689c      	ldr	r4, [r3, #8]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	4618      	mov	r0, r3
 800271c:	f7fd fd62 	bl	80001e4 <strlen>
 8002720:	4603      	mov	r3, r0
 8002722:	b29b      	uxth	r3, r3
 8002724:	4619      	mov	r1, r3
 8002726:	4620      	mov	r0, r4
 8002728:	f000 fdd0 	bl	80032cc <hw_serial_tx>
            hw_serial_tx((uint8_t *)"\"", 1);
 800272c:	2101      	movs	r1, #1
 800272e:	4807      	ldr	r0, [pc, #28]	; (800274c <at_send_cmd_blocking+0x2f0>)
 8002730:	f000 fdcc 	bl	80032cc <hw_serial_tx>
            break;
 8002734:	bf00      	nop
 8002736:	e1ac      	b.n	8002a92 <at_send_cmd_blocking+0x636>
 8002738:	200000d0 	.word	0x200000d0
 800273c:	2000006c 	.word	0x2000006c
 8002740:	080115e4 	.word	0x080115e4
 8002744:	080115e8 	.word	0x080115e8
 8002748:	080115ec 	.word	0x080115ec
 800274c:	080115f0 	.word	0x080115f0
 8002750:	080115f4 	.word	0x080115f4
 8002754:	080115fc 	.word	0x080115fc
        }
        case AT_CMD_WIFI_AP_SECURITY: {
            uint8_t val[16];
            hw_serial_tx((uint8_t *)"=\"", 2);
 8002758:	2102      	movs	r1, #2
 800275a:	48c3      	ldr	r0, [pc, #780]	; (8002a68 <at_send_cmd_blocking+0x60c>)
 800275c:	f000 fdb6 	bl	80032cc <hw_serial_tx>
            hw_serial_tx(cmd->payload.wifi_security.ssid, strlen((char*)cmd->payload.wifi_security.ssid));
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	f8d3 4001 	ldr.w	r4, [r3, #1]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	f8d3 3001 	ldr.w	r3, [r3, #1]
 800276c:	4618      	mov	r0, r3
 800276e:	f7fd fd39 	bl	80001e4 <strlen>
 8002772:	4603      	mov	r3, r0
 8002774:	b29b      	uxth	r3, r3
 8002776:	4619      	mov	r1, r3
 8002778:	4620      	mov	r0, r4
 800277a:	f000 fda7 	bl	80032cc <hw_serial_tx>
            hw_serial_tx((uint8_t *)"\",\"", 3);
 800277e:	2103      	movs	r1, #3
 8002780:	48ba      	ldr	r0, [pc, #744]	; (8002a6c <at_send_cmd_blocking+0x610>)
 8002782:	f000 fda3 	bl	80032cc <hw_serial_tx>
            hw_serial_tx(cmd->payload.wifi_security.pwd, strlen((char*)cmd->payload.wifi_security.pwd));
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	f8d3 4005 	ldr.w	r4, [r3, #5]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	f8d3 3005 	ldr.w	r3, [r3, #5]
 8002792:	4618      	mov	r0, r3
 8002794:	f7fd fd26 	bl	80001e4 <strlen>
 8002798:	4603      	mov	r3, r0
 800279a:	b29b      	uxth	r3, r3
 800279c:	4619      	mov	r1, r3
 800279e:	4620      	mov	r0, r4
 80027a0:	f000 fd94 	bl	80032cc <hw_serial_tx>
            sprintf((char*)val, "\",%d,%d,%d,%d", cmd->payload.wifi_security.channel, cmd->payload.wifi_security.crypto, cmd->payload.wifi_security.max_conn, cmd->payload.wifi_security.ssid_hidden);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	7a5b      	ldrb	r3, [r3, #9]
 80027a8:	4619      	mov	r1, r3
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	7a9b      	ldrb	r3, [r3, #10]
 80027ae:	461c      	mov	r4, r3
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	7adb      	ldrb	r3, [r3, #11]
 80027b4:	461a      	mov	r2, r3
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	7b1b      	ldrb	r3, [r3, #12]
 80027ba:	f107 0068 	add.w	r0, r7, #104	; 0x68
 80027be:	9301      	str	r3, [sp, #4]
 80027c0:	9200      	str	r2, [sp, #0]
 80027c2:	4623      	mov	r3, r4
 80027c4:	460a      	mov	r2, r1
 80027c6:	49aa      	ldr	r1, [pc, #680]	; (8002a70 <at_send_cmd_blocking+0x614>)
 80027c8:	f00a fa04 	bl	800cbd4 <sprintf>
            hw_serial_tx(val, strlen((char*)val));
 80027cc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80027d0:	4618      	mov	r0, r3
 80027d2:	f7fd fd07 	bl	80001e4 <strlen>
 80027d6:	4603      	mov	r3, r0
 80027d8:	b29a      	uxth	r2, r3
 80027da:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80027de:	4611      	mov	r1, r2
 80027e0:	4618      	mov	r0, r3
 80027e2:	f000 fd73 	bl	80032cc <hw_serial_tx>
            break;
 80027e6:	bf00      	nop
 80027e8:	e153      	b.n	8002a92 <at_send_cmd_blocking+0x636>
        }

        case AT_CMD_CON_SERVER: {
            uint8_t val[10];
            sprintf((char*)val,"=%d,%d", cmd->payload.con_server.create, cmd->payload.con_server.port);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	785b      	ldrb	r3, [r3, #1]
 80027ee:	461a      	mov	r2, r3
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	885b      	ldrh	r3, [r3, #2]
 80027f4:	b29b      	uxth	r3, r3
 80027f6:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 80027fa:	499e      	ldr	r1, [pc, #632]	; (8002a74 <at_send_cmd_blocking+0x618>)
 80027fc:	f00a f9ea 	bl	800cbd4 <sprintf>
            hw_serial_tx(val, strlen((char*)val));
 8002800:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002804:	4618      	mov	r0, r3
 8002806:	f7fd fced 	bl	80001e4 <strlen>
 800280a:	4603      	mov	r3, r0
 800280c:	b29a      	uxth	r2, r3
 800280e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002812:	4611      	mov	r1, r2
 8002814:	4618      	mov	r0, r3
 8002816:	f000 fd59 	bl	80032cc <hw_serial_tx>
            break;
 800281a:	bf00      	nop
 800281c:	e139      	b.n	8002a92 <at_send_cmd_blocking+0x636>
        }

        case AT_CMD_CON_SERVER_TMROUT: {
            uint8_t val[10];
            sprintf((char*)val, "=%d", cmd->payload.con_server_tmrout.timeout_s);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8002824:	b29b      	uxth	r3, r3
 8002826:	461a      	mov	r2, r3
 8002828:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800282c:	4992      	ldr	r1, [pc, #584]	; (8002a78 <at_send_cmd_blocking+0x61c>)
 800282e:	4618      	mov	r0, r3
 8002830:	f00a f9d0 	bl	800cbd4 <sprintf>
            hw_serial_tx(val, strlen((char*)val));
 8002834:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002838:	4618      	mov	r0, r3
 800283a:	f7fd fcd3 	bl	80001e4 <strlen>
 800283e:	4603      	mov	r3, r0
 8002840:	b29a      	uxth	r2, r3
 8002842:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002846:	4611      	mov	r1, r2
 8002848:	4618      	mov	r0, r3
 800284a:	f000 fd3f 	bl	80032cc <hw_serial_tx>
            break;
 800284e:	bf00      	nop
 8002850:	e11f      	b.n	8002a92 <at_send_cmd_blocking+0x636>
        }

        case AT_CMD_SLL_BUFFER_SIZE: {
            uint8_t val[10];
            sprintf((char *)val, "=%d", cmd->payload.ssl_buffer.size);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8002858:	b29b      	uxth	r3, r3
 800285a:	461a      	mov	r2, r3
 800285c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002860:	4985      	ldr	r1, [pc, #532]	; (8002a78 <at_send_cmd_blocking+0x61c>)
 8002862:	4618      	mov	r0, r3
 8002864:	f00a f9b6 	bl	800cbd4 <sprintf>
            hw_serial_tx(val, strlen((char*)val));
 8002868:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800286c:	4618      	mov	r0, r3
 800286e:	f7fd fcb9 	bl	80001e4 <strlen>
 8002872:	4603      	mov	r3, r0
 8002874:	b29a      	uxth	r2, r3
 8002876:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800287a:	4611      	mov	r1, r2
 800287c:	4618      	mov	r0, r3
 800287e:	f000 fd25 	bl	80032cc <hw_serial_tx>
            break;
 8002882:	bf00      	nop
 8002884:	e105      	b.n	8002a92 <at_send_cmd_blocking+0x636>
        }

        case AT_CMD_CON_START: {
            uint8_t val[10];
            if(cmd->payload.con_start.channel >= 0) {
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	f993 3009 	ldrsb.w	r3, [r3, #9]
 800288c:	2b00      	cmp	r3, #0
 800288e:	db17      	blt.n	80028c0 <at_send_cmd_blocking+0x464>
                sprintf((char *)val, "=%d,\"", cmd->payload.con_start.channel);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8002896:	461a      	mov	r2, r3
 8002898:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800289c:	4977      	ldr	r1, [pc, #476]	; (8002a7c <at_send_cmd_blocking+0x620>)
 800289e:	4618      	mov	r0, r3
 80028a0:	f00a f998 	bl	800cbd4 <sprintf>
                hw_serial_tx(val,strlen((char*)val));
 80028a4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80028a8:	4618      	mov	r0, r3
 80028aa:	f7fd fc9b 	bl	80001e4 <strlen>
 80028ae:	4603      	mov	r3, r0
 80028b0:	b29a      	uxth	r2, r3
 80028b2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80028b6:	4611      	mov	r1, r2
 80028b8:	4618      	mov	r0, r3
 80028ba:	f000 fd07 	bl	80032cc <hw_serial_tx>
 80028be:	e003      	b.n	80028c8 <at_send_cmd_blocking+0x46c>
            }
            else hw_serial_tx((uint8_t *)"=\"", 2);
 80028c0:	2102      	movs	r1, #2
 80028c2:	4869      	ldr	r0, [pc, #420]	; (8002a68 <at_send_cmd_blocking+0x60c>)
 80028c4:	f000 fd02 	bl	80032cc <hw_serial_tx>
            
            hw_serial_tx(cmd->payload.con_start.transport, strlen((char*)cmd->payload.con_start.transport));
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	f8d3 4005 	ldr.w	r4, [r3, #5]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	f8d3 3005 	ldr.w	r3, [r3, #5]
 80028d4:	4618      	mov	r0, r3
 80028d6:	f7fd fc85 	bl	80001e4 <strlen>
 80028da:	4603      	mov	r3, r0
 80028dc:	b29b      	uxth	r3, r3
 80028de:	4619      	mov	r1, r3
 80028e0:	4620      	mov	r0, r4
 80028e2:	f000 fcf3 	bl	80032cc <hw_serial_tx>
            hw_serial_tx((uint8_t *)"\",\"", 3);
 80028e6:	2103      	movs	r1, #3
 80028e8:	4860      	ldr	r0, [pc, #384]	; (8002a6c <at_send_cmd_blocking+0x610>)
 80028ea:	f000 fcef 	bl	80032cc <hw_serial_tx>
            hw_serial_tx(cmd->payload.con_start.site, strlen((char*)cmd->payload.con_start.site));
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	f8d3 4001 	ldr.w	r4, [r3, #1]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	f8d3 3001 	ldr.w	r3, [r3, #1]
 80028fa:	4618      	mov	r0, r3
 80028fc:	f7fd fc72 	bl	80001e4 <strlen>
 8002900:	4603      	mov	r3, r0
 8002902:	b29b      	uxth	r3, r3
 8002904:	4619      	mov	r1, r3
 8002906:	4620      	mov	r0, r4
 8002908:	f000 fce0 	bl	80032cc <hw_serial_tx>
            sprintf((char*)val, "\",%d", cmd->payload.con_start.port);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	895b      	ldrh	r3, [r3, #10]
 8002910:	b29b      	uxth	r3, r3
 8002912:	461a      	mov	r2, r3
 8002914:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002918:	4959      	ldr	r1, [pc, #356]	; (8002a80 <at_send_cmd_blocking+0x624>)
 800291a:	4618      	mov	r0, r3
 800291c:	f00a f95a 	bl	800cbd4 <sprintf>
            hw_serial_tx(val, strlen((char*)val));
 8002920:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002924:	4618      	mov	r0, r3
 8002926:	f7fd fc5d 	bl	80001e4 <strlen>
 800292a:	4603      	mov	r3, r0
 800292c:	b29a      	uxth	r2, r3
 800292e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002932:	4611      	mov	r1, r2
 8002934:	4618      	mov	r0, r3
 8002936:	f000 fcc9 	bl	80032cc <hw_serial_tx>

            if(strcmp((char*)cmd->payload.con_start.transport, "UDP") == 0) {
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	f8d3 3005 	ldr.w	r3, [r3, #5]
 8002940:	4950      	ldr	r1, [pc, #320]	; (8002a84 <at_send_cmd_blocking+0x628>)
 8002942:	4618      	mov	r0, r3
 8002944:	f7fd fc44 	bl	80001d0 <strcmp>
 8002948:	4603      	mov	r3, r0
 800294a:	2b00      	cmp	r3, #0
 800294c:	f040 8089 	bne.w	8002a62 <at_send_cmd_blocking+0x606>
                sprintf((char*) val, ",%d,0", cmd->payload.con_start.port);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	895b      	ldrh	r3, [r3, #10]
 8002954:	b29b      	uxth	r3, r3
 8002956:	461a      	mov	r2, r3
 8002958:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800295c:	494a      	ldr	r1, [pc, #296]	; (8002a88 <at_send_cmd_blocking+0x62c>)
 800295e:	4618      	mov	r0, r3
 8002960:	f00a f938 	bl	800cbd4 <sprintf>
                hw_serial_tx(val, strlen((char*)val));
 8002964:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002968:	4618      	mov	r0, r3
 800296a:	f7fd fc3b 	bl	80001e4 <strlen>
 800296e:	4603      	mov	r3, r0
 8002970:	b29a      	uxth	r2, r3
 8002972:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002976:	4611      	mov	r1, r2
 8002978:	4618      	mov	r0, r3
 800297a:	f000 fca7 	bl	80032cc <hw_serial_tx>
            }            

            break;
 800297e:	bf00      	nop
 8002980:	e06f      	b.n	8002a62 <at_send_cmd_blocking+0x606>
        }

        case AT_CMD_CON_SEND: {
            if(cmd->payload.con_send.transparent == 0){
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	7a9b      	ldrb	r3, [r3, #10]
 8002986:	2b00      	cmp	r3, #0
 8002988:	f040 8082 	bne.w	8002a90 <at_send_cmd_blocking+0x634>
                uint8_t val[10];
                if(cmd->payload.con_send.channel >= 0)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8002992:	2b00      	cmp	r3, #0
 8002994:	db0d      	blt.n	80029b2 <at_send_cmd_blocking+0x556>
                    sprintf((char*)val, "=%d,%d", cmd->payload.con_send.channel, cmd->payload.con_send.size);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	f993 3003 	ldrsb.w	r3, [r3, #3]
 800299c:	461a      	mov	r2, r3
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80029a4:	b29b      	uxth	r3, r3
 80029a6:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 80029aa:	4932      	ldr	r1, [pc, #200]	; (8002a74 <at_send_cmd_blocking+0x618>)
 80029ac:	f00a f912 	bl	800cbd4 <sprintf>
 80029b0:	e00a      	b.n	80029c8 <at_send_cmd_blocking+0x56c>
                else
                    sprintf((char*)val, "=%d", cmd->payload.con_send.size);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80029b8:	b29b      	uxth	r3, r3
 80029ba:	461a      	mov	r2, r3
 80029bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80029c0:	492d      	ldr	r1, [pc, #180]	; (8002a78 <at_send_cmd_blocking+0x61c>)
 80029c2:	4618      	mov	r0, r3
 80029c4:	f00a f906 	bl	800cbd4 <sprintf>

                hw_serial_tx(val, strlen((char*) val));
 80029c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80029cc:	4618      	mov	r0, r3
 80029ce:	f7fd fc09 	bl	80001e4 <strlen>
 80029d2:	4603      	mov	r3, r0
 80029d4:	b29a      	uxth	r2, r3
 80029d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80029da:	4611      	mov	r1, r2
 80029dc:	4618      	mov	r0, r3
 80029de:	f000 fc75 	bl	80032cc <hw_serial_tx>
                    sprintf((char*)val, "\",%d", cmd->payload.con_send.port);
                    hw_serial_tx(val, strlen((char*)val));
                }
                */
            }            
            break;
 80029e2:	e055      	b.n	8002a90 <at_send_cmd_blocking+0x634>
        }

        case AT_CMD_CON_CLOSE: {
            if(cmd->payload.con_close.channel >= 0){
            	uint8_t val[10];
                sprintf((char*)val, "=%d", cmd->payload.con_close.channel);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	785b      	ldrb	r3, [r3, #1]
 80029e8:	461a      	mov	r2, r3
 80029ea:	f107 0320 	add.w	r3, r7, #32
 80029ee:	4922      	ldr	r1, [pc, #136]	; (8002a78 <at_send_cmd_blocking+0x61c>)
 80029f0:	4618      	mov	r0, r3
 80029f2:	f00a f8ef 	bl	800cbd4 <sprintf>
                hw_serial_tx(val, strlen((char*)val));
 80029f6:	f107 0320 	add.w	r3, r7, #32
 80029fa:	4618      	mov	r0, r3
 80029fc:	f7fd fbf2 	bl	80001e4 <strlen>
 8002a00:	4603      	mov	r3, r0
 8002a02:	b29a      	uxth	r2, r3
 8002a04:	f107 0320 	add.w	r3, r7, #32
 8002a08:	4611      	mov	r1, r2
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f000 fc5e 	bl	80032cc <hw_serial_tx>
            }
            break;
 8002a10:	e03f      	b.n	8002a92 <at_send_cmd_blocking+0x636>
        }

        case AT_CMD_UART:{
            uint8_t val[20];
            sprintf((char*)val, "=%u,%d,%d,%d,%d", (unsigned int) cmd->payload.uart.baud_rate, cmd->payload.uart.data_bits, cmd->payload.uart.stop_bit, cmd->payload.uart.parity, cmd->payload.uart.flow_control);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	f8d3 2001 	ldr.w	r2, [r3, #1]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	795b      	ldrb	r3, [r3, #5]
 8002a1c:	461d      	mov	r5, r3
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	799b      	ldrb	r3, [r3, #6]
 8002a22:	4619      	mov	r1, r3
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	79db      	ldrb	r3, [r3, #7]
 8002a28:	461c      	mov	r4, r3
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	7a1b      	ldrb	r3, [r3, #8]
 8002a2e:	f107 000c 	add.w	r0, r7, #12
 8002a32:	9302      	str	r3, [sp, #8]
 8002a34:	9401      	str	r4, [sp, #4]
 8002a36:	9100      	str	r1, [sp, #0]
 8002a38:	462b      	mov	r3, r5
 8002a3a:	4914      	ldr	r1, [pc, #80]	; (8002a8c <at_send_cmd_blocking+0x630>)
 8002a3c:	f00a f8ca 	bl	800cbd4 <sprintf>
            hw_serial_tx(val, strlen((char*)val));
 8002a40:	f107 030c 	add.w	r3, r7, #12
 8002a44:	4618      	mov	r0, r3
 8002a46:	f7fd fbcd 	bl	80001e4 <strlen>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	b29a      	uxth	r2, r3
 8002a4e:	f107 030c 	add.w	r3, r7, #12
 8002a52:	4611      	mov	r1, r2
 8002a54:	4618      	mov	r0, r3
 8002a56:	f000 fc39 	bl	80032cc <hw_serial_tx>
        	break;
 8002a5a:	bf00      	nop
 8002a5c:	e019      	b.n	8002a92 <at_send_cmd_blocking+0x636>
        }

        default:
            break;
 8002a5e:	bf00      	nop
 8002a60:	e017      	b.n	8002a92 <at_send_cmd_blocking+0x636>
            break;
 8002a62:	bf00      	nop
 8002a64:	e015      	b.n	8002a92 <at_send_cmd_blocking+0x636>
 8002a66:	bf00      	nop
 8002a68:	080115e8 	.word	0x080115e8
 8002a6c:	080115ec 	.word	0x080115ec
 8002a70:	08011608 	.word	0x08011608
 8002a74:	080115f4 	.word	0x080115f4
 8002a78:	08011618 	.word	0x08011618
 8002a7c:	0801161c 	.word	0x0801161c
 8002a80:	08011624 	.word	0x08011624
 8002a84:	0801162c 	.word	0x0801162c
 8002a88:	08011630 	.word	0x08011630
 8002a8c:	08011638 	.word	0x08011638
            break;
 8002a90:	bf00      	nop
    }

    // end of line, if any
    hw_serial_tx(at_eol, strlen((const char*)at_eol));
 8002a92:	4b2d      	ldr	r3, [pc, #180]	; (8002b48 <at_send_cmd_blocking+0x6ec>)
 8002a94:	681c      	ldr	r4, [r3, #0]
 8002a96:	4b2c      	ldr	r3, [pc, #176]	; (8002b48 <at_send_cmd_blocking+0x6ec>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f7fd fba2 	bl	80001e4 <strlen>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	b29b      	uxth	r3, r3
 8002aa4:	4619      	mov	r1, r3
 8002aa6:	4620      	mov	r0, r4
 8002aa8:	f000 fc10 	bl	80032cc <hw_serial_tx>
    
    // set expected answer
    int16_t ans;
    uint16_t nb;
    switch(cmd->id){
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	781b      	ldrb	r3, [r3, #0]
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d002      	beq.n	8002aba <at_send_cmd_blocking+0x65e>
 8002ab4:	2b10      	cmp	r3, #16
 8002ab6:	d016      	beq.n	8002ae6 <at_send_cmd_blocking+0x68a>
 8002ab8:	e023      	b.n	8002b02 <at_send_cmd_blocking+0x6a6>
        case AT_CMD_RST:
            ans = ceb_cbuf_find_str(&at_cb, (uint8_t*) at_ready, strlen((const char*)at_ready), &nb, tmrout_ms);
 8002aba:	4b24      	ldr	r3, [pc, #144]	; (8002b4c <at_send_cmd_blocking+0x6f0>)
 8002abc:	681c      	ldr	r4, [r3, #0]
 8002abe:	4b23      	ldr	r3, [pc, #140]	; (8002b4c <at_send_cmd_blocking+0x6f0>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f7fd fb8e 	bl	80001e4 <strlen>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	b29a      	uxth	r2, r3
 8002acc:	f107 0194 	add.w	r1, r7, #148	; 0x94
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	9300      	str	r3, [sp, #0]
 8002ad4:	460b      	mov	r3, r1
 8002ad6:	4621      	mov	r1, r4
 8002ad8:	481d      	ldr	r0, [pc, #116]	; (8002b50 <at_send_cmd_blocking+0x6f4>)
 8002ada:	f000 f8d7 	bl	8002c8c <ceb_cbuf_find_str>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
            break;
 8002ae4:	e017      	b.n	8002b16 <at_send_cmd_blocking+0x6ba>
        case AT_CMD_CON_SEND:
            ans = ceb_cbuf_find_str(&at_cb, (uint8_t *)">", 1, &nb, tmrout_ms);
 8002ae6:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	9300      	str	r3, [sp, #0]
 8002aee:	4613      	mov	r3, r2
 8002af0:	2201      	movs	r2, #1
 8002af2:	4918      	ldr	r1, [pc, #96]	; (8002b54 <at_send_cmd_blocking+0x6f8>)
 8002af4:	4816      	ldr	r0, [pc, #88]	; (8002b50 <at_send_cmd_blocking+0x6f4>)
 8002af6:	f000 f8c9 	bl	8002c8c <ceb_cbuf_find_str>
 8002afa:	4603      	mov	r3, r0
 8002afc:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
            break;
 8002b00:	e009      	b.n	8002b16 <at_send_cmd_blocking+0x6ba>
        default:
            ans = ceb_cbuf_find_multi_str(&at_cb, at_ok_error, 2, tmrout_ms);
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	2202      	movs	r2, #2
 8002b06:	4914      	ldr	r1, [pc, #80]	; (8002b58 <at_send_cmd_blocking+0x6fc>)
 8002b08:	4811      	ldr	r0, [pc, #68]	; (8002b50 <at_send_cmd_blocking+0x6f4>)
 8002b0a:	f000 f904 	bl	8002d16 <ceb_cbuf_find_multi_str>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
            break;
 8002b14:	bf00      	nop
    }

    switch(ans){
 8002b16:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d007      	beq.n	8002b2e <at_send_cmd_blocking+0x6d2>
 8002b1e:	2b02      	cmp	r3, #2
 8002b20:	d001      	beq.n	8002b26 <at_send_cmd_blocking+0x6ca>
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d107      	bne.n	8002b36 <at_send_cmd_blocking+0x6da>
        case 0:
        case 2:
            cmd->status = AT_STATUS_OK;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	735a      	strb	r2, [r3, #13]
            break;
 8002b2c:	e007      	b.n	8002b3e <at_send_cmd_blocking+0x6e2>
        case 1:
            cmd->status = AT_STATUS_ERROR;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2201      	movs	r2, #1
 8002b32:	735a      	strb	r2, [r3, #13]
            break;
 8002b34:	e003      	b.n	8002b3e <at_send_cmd_blocking+0x6e2>
        case -1:
        default:
            cmd->status = AT_STATUS_NO_ANSWER;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2204      	movs	r2, #4
 8002b3a:	735a      	strb	r2, [r3, #13]
            break;
 8002b3c:	bf00      	nop
    }
    return AT_STATUS_OK;
 8002b3e:	2300      	movs	r3, #0
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	3798      	adds	r7, #152	; 0x98
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bdb0      	pop	{r4, r5, r7, pc}
 8002b48:	200000cc 	.word	0x200000cc
 8002b4c:	200000d4 	.word	0x200000d4
 8002b50:	20000d4c 	.word	0x20000d4c
 8002b54:	08011648 	.word	0x08011648
 8002b58:	200000bc 	.word	0x200000bc

08002b5c <at_rx_interrupt>:

void at_rx_interrupt(uint8_t c){
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b082      	sub	sp, #8
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	4603      	mov	r3, r0
 8002b64:	71fb      	strb	r3, [r7, #7]
	if(at_started){
 8002b66:	4b07      	ldr	r3, [pc, #28]	; (8002b84 <at_rx_interrupt+0x28>)
 8002b68:	781b      	ldrb	r3, [r3, #0]
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d004      	beq.n	8002b7a <at_rx_interrupt+0x1e>
		if(ceb_cbuf_put(&at_cb, c) == CEB_CBUF_FULL){
 8002b70:	79fb      	ldrb	r3, [r7, #7]
 8002b72:	4619      	mov	r1, r3
 8002b74:	4804      	ldr	r0, [pc, #16]	; (8002b88 <at_rx_interrupt+0x2c>)
 8002b76:	f000 f857 	bl	8002c28 <ceb_cbuf_put>
			//printf("%02X-",buffer[0]);
			//printf("%c",c);
			//fflush(stdout);
		}
	}
}
 8002b7a:	bf00      	nop
 8002b7c:	3708      	adds	r7, #8
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	20000af9 	.word	0x20000af9
 8002b88:	20000d4c 	.word	0x20000d4c

08002b8c <ceb_cbuf_init>:
#include <esp8266/ceb_cbuf.h>

#define CEB_CBUF_INC(v,mv)   ((((v) + 1) >= (mv)) ? 0 : (v) + 1)

cbuf_status_t ceb_cbuf_init(ceb_cbuf_t *cb, uint8_t *area, uint16_t size)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b085      	sub	sp, #20
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	60f8      	str	r0, [r7, #12]
 8002b94:	60b9      	str	r1, [r7, #8]
 8002b96:	4613      	mov	r3, r2
 8002b98:	80fb      	strh	r3, [r7, #6]
	cb->buffer = area;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	68ba      	ldr	r2, [r7, #8]
 8002b9e:	f8c3 2006 	str.w	r2, [r3, #6]
	cb->size = size;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	88fa      	ldrh	r2, [r7, #6]
 8002ba6:	809a      	strh	r2, [r3, #4]
	cb->prod = cb->cons = 0;
 8002ba8:	2100      	movs	r1, #0
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	460a      	mov	r2, r1
 8002bae:	805a      	strh	r2, [r3, #2]
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	460a      	mov	r2, r1
 8002bb4:	801a      	strh	r2, [r3, #0]

	return CEB_CBUF_OK;
 8002bb6:	2300      	movs	r3, #0
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	3714      	adds	r7, #20
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr

08002bc4 <ceb_cbuf_get>:

	return CEB_CBUF_OK;
}

cbuf_status_t ceb_cbuf_get(ceb_cbuf_t *cb, uint8_t *c)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
 8002bcc:	6039      	str	r1, [r7, #0]
	if(cb->cons == cb->prod)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	885b      	ldrh	r3, [r3, #2]
 8002bd2:	b29a      	uxth	r2, r3
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	881b      	ldrh	r3, [r3, #0]
 8002bd8:	b29b      	uxth	r3, r3
 8002bda:	429a      	cmp	r2, r3
 8002bdc:	d101      	bne.n	8002be2 <ceb_cbuf_get+0x1e>
		return CEB_CBUF_EMPTY;
 8002bde:	2302      	movs	r3, #2
 8002be0:	e01c      	b.n	8002c1c <ceb_cbuf_get+0x58>

	*c = cb->buffer[cb->cons];
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	f8d3 3006 	ldr.w	r3, [r3, #6]
 8002be8:	687a      	ldr	r2, [r7, #4]
 8002bea:	8852      	ldrh	r2, [r2, #2]
 8002bec:	b292      	uxth	r2, r2
 8002bee:	4413      	add	r3, r2
 8002bf0:	781a      	ldrb	r2, [r3, #0]
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	701a      	strb	r2, [r3, #0]
	cb->cons = CEB_CBUF_INC(cb->cons,cb->size);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	885b      	ldrh	r3, [r3, #2]
 8002bfa:	b29b      	uxth	r3, r3
 8002bfc:	3301      	adds	r3, #1
 8002bfe:	687a      	ldr	r2, [r7, #4]
 8002c00:	8892      	ldrh	r2, [r2, #4]
 8002c02:	b292      	uxth	r2, r2
 8002c04:	4293      	cmp	r3, r2
 8002c06:	da05      	bge.n	8002c14 <ceb_cbuf_get+0x50>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	885b      	ldrh	r3, [r3, #2]
 8002c0c:	b29b      	uxth	r3, r3
 8002c0e:	3301      	adds	r3, #1
 8002c10:	b29a      	uxth	r2, r3
 8002c12:	e000      	b.n	8002c16 <ceb_cbuf_get+0x52>
 8002c14:	2200      	movs	r2, #0
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	805a      	strh	r2, [r3, #2]

	return CEB_CBUF_OK;
 8002c1a:	2300      	movs	r3, #0
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	370c      	adds	r7, #12
 8002c20:	46bd      	mov	sp, r7
 8002c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c26:	4770      	bx	lr

08002c28 <ceb_cbuf_put>:

cbuf_status_t ceb_cbuf_put(ceb_cbuf_t *cb, uint8_t c)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b085      	sub	sp, #20
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
 8002c30:	460b      	mov	r3, r1
 8002c32:	70fb      	strb	r3, [r7, #3]
	uint16_t next_prod = CEB_CBUF_INC(cb->prod,cb->size);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	881b      	ldrh	r3, [r3, #0]
 8002c38:	b29b      	uxth	r3, r3
 8002c3a:	3301      	adds	r3, #1
 8002c3c:	687a      	ldr	r2, [r7, #4]
 8002c3e:	8892      	ldrh	r2, [r2, #4]
 8002c40:	b292      	uxth	r2, r2
 8002c42:	4293      	cmp	r3, r2
 8002c44:	da05      	bge.n	8002c52 <ceb_cbuf_put+0x2a>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	881b      	ldrh	r3, [r3, #0]
 8002c4a:	b29b      	uxth	r3, r3
 8002c4c:	3301      	adds	r3, #1
 8002c4e:	b29b      	uxth	r3, r3
 8002c50:	e000      	b.n	8002c54 <ceb_cbuf_put+0x2c>
 8002c52:	2300      	movs	r3, #0
 8002c54:	81fb      	strh	r3, [r7, #14]

	if(next_prod == cb->cons)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	885b      	ldrh	r3, [r3, #2]
 8002c5a:	b29b      	uxth	r3, r3
 8002c5c:	89fa      	ldrh	r2, [r7, #14]
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	d101      	bne.n	8002c66 <ceb_cbuf_put+0x3e>
		return CEB_CBUF_FULL;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e00c      	b.n	8002c80 <ceb_cbuf_put+0x58>

	cb->buffer[cb->prod] = c;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	f8d3 3006 	ldr.w	r3, [r3, #6]
 8002c6c:	687a      	ldr	r2, [r7, #4]
 8002c6e:	8812      	ldrh	r2, [r2, #0]
 8002c70:	b292      	uxth	r2, r2
 8002c72:	4413      	add	r3, r2
 8002c74:	78fa      	ldrb	r2, [r7, #3]
 8002c76:	701a      	strb	r2, [r3, #0]
	cb->prod = next_prod;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	89fa      	ldrh	r2, [r7, #14]
 8002c7c:	801a      	strh	r2, [r3, #0]

	return CEB_CBUF_OK;
 8002c7e:	2300      	movs	r3, #0
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	3714      	adds	r7, #20
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr

08002c8c <ceb_cbuf_find_str>:

#if 1
int16_t ceb_cbuf_find_str(ceb_cbuf_t *cb, uint8_t *str, uint16_t len, uint16_t *nb, uint32_t tmrout_ms)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b088      	sub	sp, #32
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	60f8      	str	r0, [r7, #12]
 8002c94:	60b9      	str	r1, [r7, #8]
 8002c96:	603b      	str	r3, [r7, #0]
 8002c98:	4613      	mov	r3, r2
 8002c9a:	80fb      	strh	r3, [r7, #6]
	uint16_t n_match = 0;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	83fb      	strh	r3, [r7, #30]
	uint8_t c;
	uint32_t tmr = hw_time_get();
 8002ca0:	f000 fb3c 	bl	800331c <hw_time_get>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	61bb      	str	r3, [r7, #24]

	*nb = 0;
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	2200      	movs	r2, #0
 8002cac:	801a      	strh	r2, [r3, #0]
	do
	{
		if(ceb_cbuf_get(cb,&c) == CEB_CBUF_OK)
 8002cae:	f107 0317 	add.w	r3, r7, #23
 8002cb2:	4619      	mov	r1, r3
 8002cb4:	68f8      	ldr	r0, [r7, #12]
 8002cb6:	f7ff ff85 	bl	8002bc4 <ceb_cbuf_get>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d118      	bne.n	8002cf2 <ceb_cbuf_find_str+0x66>
		{
			*nb = *nb + 1;
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	881b      	ldrh	r3, [r3, #0]
 8002cc4:	3301      	adds	r3, #1
 8002cc6:	b29a      	uxth	r2, r3
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	801a      	strh	r2, [r3, #0]
			if(str[n_match] == c)
 8002ccc:	8bfb      	ldrh	r3, [r7, #30]
 8002cce:	68ba      	ldr	r2, [r7, #8]
 8002cd0:	4413      	add	r3, r2
 8002cd2:	781a      	ldrb	r2, [r3, #0]
 8002cd4:	7dfb      	ldrb	r3, [r7, #23]
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	d103      	bne.n	8002ce2 <ceb_cbuf_find_str+0x56>
				n_match++;
 8002cda:	8bfb      	ldrh	r3, [r7, #30]
 8002cdc:	3301      	adds	r3, #1
 8002cde:	83fb      	strh	r3, [r7, #30]
 8002ce0:	e001      	b.n	8002ce6 <ceb_cbuf_find_str+0x5a>
			else
				n_match = 0;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	83fb      	strh	r3, [r7, #30]

			if(n_match >= len)
 8002ce6:	8bfa      	ldrh	r2, [r7, #30]
 8002ce8:	88fb      	ldrh	r3, [r7, #6]
 8002cea:	429a      	cmp	r2, r3
 8002cec:	d301      	bcc.n	8002cf2 <ceb_cbuf_find_str+0x66>
				return 0;		
 8002cee:	2300      	movs	r3, #0
 8002cf0:	e00d      	b.n	8002d0e <ceb_cbuf_find_str+0x82>
		}
	} while (hw_time_elapsed(tmr,hw_time_get()) < tmrout_ms);
 8002cf2:	f000 fb13 	bl	800331c <hw_time_get>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	4619      	mov	r1, r3
 8002cfa:	69b8      	ldr	r0, [r7, #24]
 8002cfc:	f000 fb15 	bl	800332a <hw_time_elapsed>
 8002d00:	4603      	mov	r3, r0
 8002d02:	461a      	mov	r2, r3
 8002d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d8d1      	bhi.n	8002cae <ceb_cbuf_find_str+0x22>

	return -1;
 8002d0a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3720      	adds	r7, #32
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}

08002d16 <ceb_cbuf_find_multi_str>:

int16_t ceb_cbuf_find_multi_str(ceb_cbuf_t *cb, ceb_cbuf_str_t *str_list, uint16_t len_list, uint32_t tmrout_ms)
{
 8002d16:	b580      	push	{r7, lr}
 8002d18:	b088      	sub	sp, #32
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	60f8      	str	r0, [r7, #12]
 8002d1e:	60b9      	str	r1, [r7, #8]
 8002d20:	603b      	str	r3, [r7, #0]
 8002d22:	4613      	mov	r3, r2
 8002d24:	80fb      	strh	r3, [r7, #6]
	uint16_t n;
	uint8_t c;
	uint32_t tmr = hw_time_get();
 8002d26:	f000 faf9 	bl	800331c <hw_time_get>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	61bb      	str	r3, [r7, #24]

	for(n = 0; n < len_list ; n++)
 8002d2e:	2300      	movs	r3, #0
 8002d30:	83fb      	strh	r3, [r7, #30]
 8002d32:	e00a      	b.n	8002d4a <ceb_cbuf_find_multi_str+0x34>
		str_list[n].n_match = 0;
 8002d34:	8bfb      	ldrh	r3, [r7, #30]
 8002d36:	00db      	lsls	r3, r3, #3
 8002d38:	68ba      	ldr	r2, [r7, #8]
 8002d3a:	4413      	add	r3, r2
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	719a      	strb	r2, [r3, #6]
 8002d40:	2200      	movs	r2, #0
 8002d42:	71da      	strb	r2, [r3, #7]
	for(n = 0; n < len_list ; n++)
 8002d44:	8bfb      	ldrh	r3, [r7, #30]
 8002d46:	3301      	adds	r3, #1
 8002d48:	83fb      	strh	r3, [r7, #30]
 8002d4a:	8bfa      	ldrh	r2, [r7, #30]
 8002d4c:	88fb      	ldrh	r3, [r7, #6]
 8002d4e:	429a      	cmp	r2, r3
 8002d50:	d3f0      	bcc.n	8002d34 <ceb_cbuf_find_multi_str+0x1e>

	do
	{
		if(ceb_cbuf_get(cb,&c) == CEB_CBUF_OK)
 8002d52:	f107 0317 	add.w	r3, r7, #23
 8002d56:	4619      	mov	r1, r3
 8002d58:	68f8      	ldr	r0, [r7, #12]
 8002d5a:	f7ff ff33 	bl	8002bc4 <ceb_cbuf_get>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d13c      	bne.n	8002dde <ceb_cbuf_find_multi_str+0xc8>
		{
			for(n = 0; n < len_list ; n++)
 8002d64:	2300      	movs	r3, #0
 8002d66:	83fb      	strh	r3, [r7, #30]
 8002d68:	e035      	b.n	8002dd6 <ceb_cbuf_find_multi_str+0xc0>
			{
				if(str_list[n].str[str_list[n].n_match] == c)
 8002d6a:	8bfb      	ldrh	r3, [r7, #30]
 8002d6c:	00db      	lsls	r3, r3, #3
 8002d6e:	68ba      	ldr	r2, [r7, #8]
 8002d70:	4413      	add	r3, r2
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	8bfa      	ldrh	r2, [r7, #30]
 8002d76:	00d2      	lsls	r2, r2, #3
 8002d78:	68b9      	ldr	r1, [r7, #8]
 8002d7a:	440a      	add	r2, r1
 8002d7c:	88d2      	ldrh	r2, [r2, #6]
 8002d7e:	b292      	uxth	r2, r2
 8002d80:	4413      	add	r3, r2
 8002d82:	781a      	ldrb	r2, [r3, #0]
 8002d84:	7dfb      	ldrb	r3, [r7, #23]
 8002d86:	429a      	cmp	r2, r3
 8002d88:	d109      	bne.n	8002d9e <ceb_cbuf_find_multi_str+0x88>
					str_list[n].n_match++;
 8002d8a:	8bfb      	ldrh	r3, [r7, #30]
 8002d8c:	00db      	lsls	r3, r3, #3
 8002d8e:	68ba      	ldr	r2, [r7, #8]
 8002d90:	4413      	add	r3, r2
 8002d92:	88da      	ldrh	r2, [r3, #6]
 8002d94:	b292      	uxth	r2, r2
 8002d96:	3201      	adds	r2, #1
 8002d98:	b292      	uxth	r2, r2
 8002d9a:	80da      	strh	r2, [r3, #6]
 8002d9c:	e007      	b.n	8002dae <ceb_cbuf_find_multi_str+0x98>
				else
					str_list[n].n_match = 0;
 8002d9e:	8bfb      	ldrh	r3, [r7, #30]
 8002da0:	00db      	lsls	r3, r3, #3
 8002da2:	68ba      	ldr	r2, [r7, #8]
 8002da4:	4413      	add	r3, r2
 8002da6:	2200      	movs	r2, #0
 8002da8:	719a      	strb	r2, [r3, #6]
 8002daa:	2200      	movs	r2, #0
 8002dac:	71da      	strb	r2, [r3, #7]

				if(str_list[n].n_match >= str_list[n].len)
 8002dae:	8bfb      	ldrh	r3, [r7, #30]
 8002db0:	00db      	lsls	r3, r3, #3
 8002db2:	68ba      	ldr	r2, [r7, #8]
 8002db4:	4413      	add	r3, r2
 8002db6:	88db      	ldrh	r3, [r3, #6]
 8002db8:	b29a      	uxth	r2, r3
 8002dba:	8bfb      	ldrh	r3, [r7, #30]
 8002dbc:	00db      	lsls	r3, r3, #3
 8002dbe:	68b9      	ldr	r1, [r7, #8]
 8002dc0:	440b      	add	r3, r1
 8002dc2:	889b      	ldrh	r3, [r3, #4]
 8002dc4:	b29b      	uxth	r3, r3
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	d302      	bcc.n	8002dd0 <ceb_cbuf_find_multi_str+0xba>
					return n;
 8002dca:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002dce:	e014      	b.n	8002dfa <ceb_cbuf_find_multi_str+0xe4>
			for(n = 0; n < len_list ; n++)
 8002dd0:	8bfb      	ldrh	r3, [r7, #30]
 8002dd2:	3301      	adds	r3, #1
 8002dd4:	83fb      	strh	r3, [r7, #30]
 8002dd6:	8bfa      	ldrh	r2, [r7, #30]
 8002dd8:	88fb      	ldrh	r3, [r7, #6]
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d3c5      	bcc.n	8002d6a <ceb_cbuf_find_multi_str+0x54>
			}
		}
	} while (hw_time_elapsed(tmr,hw_time_get()) < tmrout_ms);
 8002dde:	f000 fa9d 	bl	800331c <hw_time_get>
 8002de2:	4603      	mov	r3, r0
 8002de4:	4619      	mov	r1, r3
 8002de6:	69b8      	ldr	r0, [r7, #24]
 8002de8:	f000 fa9f 	bl	800332a <hw_time_elapsed>
 8002dec:	4603      	mov	r3, r0
 8002dee:	461a      	mov	r2, r3
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d8ad      	bhi.n	8002d52 <ceb_cbuf_find_multi_str+0x3c>

	return -1;	
 8002df6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3720      	adds	r7, #32
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}

08002e02 <esp8266_init>:
#include <esp8266/esp8266.h>

esp8266* esp8266_init(void){
 8002e02:	b580      	push	{r7, lr}
 8002e04:	b082      	sub	sp, #8
 8002e06:	af00      	add	r7, sp, #0
	esp8266* esp = (esp8266*) malloc(sizeof(esp8266));
 8002e08:	200f      	movs	r0, #15
 8002e0a:	f009 fc79 	bl	800c700 <malloc>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	607b      	str	r3, [r7, #4]
    esp->ssid = NULL;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2200      	movs	r2, #0
 8002e16:	701a      	strb	r2, [r3, #0]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	705a      	strb	r2, [r3, #1]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	709a      	strb	r2, [r3, #2]
 8002e20:	2200      	movs	r2, #0
 8002e22:	70da      	strb	r2, [r3, #3]
    esp->password = NULL;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2200      	movs	r2, #0
 8002e28:	711a      	strb	r2, [r3, #4]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	715a      	strb	r2, [r3, #5]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	719a      	strb	r2, [r3, #6]
 8002e32:	2200      	movs	r2, #0
 8002e34:	71da      	strb	r2, [r3, #7]
    esp->connected = false;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	721a      	strb	r2, [r3, #8]
    esp->ip = NULL;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	725a      	strb	r2, [r3, #9]
 8002e42:	2200      	movs	r2, #0
 8002e44:	729a      	strb	r2, [r3, #10]
 8002e46:	2200      	movs	r2, #0
 8002e48:	72da      	strb	r2, [r3, #11]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	731a      	strb	r2, [r3, #12]
    esp->port = 1883;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2200      	movs	r2, #0
 8002e52:	f042 025b 	orr.w	r2, r2, #91	; 0x5b
 8002e56:	735a      	strb	r2, [r3, #13]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	f042 0207 	orr.w	r2, r2, #7
 8002e5e:	739a      	strb	r2, [r3, #14]
    esp8266_turn_on(esp);
 8002e60:	6878      	ldr	r0, [r7, #4]
 8002e62:	f000 f805 	bl	8002e70 <esp8266_turn_on>
    return esp;
 8002e66:	687b      	ldr	r3, [r7, #4]
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	3708      	adds	r7, #8
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}

08002e70 <esp8266_turn_on>:
	esp8266_turn_off(esp8266);
	free(esp8266);
	esp8266 = NULL;
}

void esp8266_turn_on(esp8266* esp8266){
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b082      	sub	sp, #8
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
	if( esp8266 == NULL ) return;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d036      	beq.n	8002eec <esp8266_turn_on+0x7c>
	// app_init
	hw_esp_power_set(true);
 8002e7e:	2001      	movs	r0, #1
 8002e80:	f000 f91a 	bl	80030b8 <hw_esp_power_set>
	hw_time_sleep(100);
 8002e84:	2064      	movs	r0, #100	; 0x64
 8002e86:	f000 fa69 	bl	800335c <hw_time_sleep>
	hw_uart_init();
 8002e8a:	f000 fa7d 	bl	8003388 <hw_uart_init>

	// iot_on
	// WifiOn
	hw_esp_power_set(true);
 8002e8e:	2001      	movs	r0, #1
 8002e90:	f000 f912 	bl	80030b8 <hw_esp_power_set>
	hw_esp_reset_set(false);
 8002e94:	2000      	movs	r0, #0
 8002e96:	f000 f92b 	bl	80030f0 <hw_esp_reset_set>
	hw_esp_enable_set(true);
 8002e9a:	2001      	movs	r0, #1
 8002e9c:	f000 f933 	bl	8003106 <hw_esp_enable_set>

	// iot_on
	hw_time_sleep(1000);
 8002ea0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002ea4:	f000 fa5a 	bl	800335c <hw_time_sleep>
	at_init();
 8002ea8:	f7ff fabe 	bl	8002428 <at_init>

	cmd.id = AT_CMD_READY;
 8002eac:	4b12      	ldr	r3, [pc, #72]	; (8002ef8 <esp8266_turn_on+0x88>)
 8002eae:	2200      	movs	r2, #0
 8002eb0:	701a      	strb	r2, [r3, #0]
	at_send_cmd_blocking(&cmd,1000);
 8002eb2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002eb6:	4810      	ldr	r0, [pc, #64]	; (8002ef8 <esp8266_turn_on+0x88>)
 8002eb8:	f7ff fad0 	bl	800245c <at_send_cmd_blocking>

	cmd.id = AT_CMD_READY;
 8002ebc:	4b0e      	ldr	r3, [pc, #56]	; (8002ef8 <esp8266_turn_on+0x88>)
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	701a      	strb	r2, [r3, #0]
	at_send_cmd_blocking(&cmd,3000);
 8002ec2:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8002ec6:	480c      	ldr	r0, [pc, #48]	; (8002ef8 <esp8266_turn_on+0x88>)
 8002ec8:	f7ff fac8 	bl	800245c <at_send_cmd_blocking>

	if(cmd.status != AT_STATUS_OK) return;
 8002ecc:	4b0a      	ldr	r3, [pc, #40]	; (8002ef8 <esp8266_turn_on+0x88>)
 8002ece:	7b5b      	ldrb	r3, [r3, #13]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d10d      	bne.n	8002ef0 <esp8266_turn_on+0x80>

	cmd.id = AT_CMD_WIFI_AUTO_CON;
 8002ed4:	4b08      	ldr	r3, [pc, #32]	; (8002ef8 <esp8266_turn_on+0x88>)
 8002ed6:	2203      	movs	r2, #3
 8002ed8:	701a      	strb	r2, [r3, #0]
	cmd.payload.wifi_autocon.enabled = 0;
 8002eda:	4b07      	ldr	r3, [pc, #28]	; (8002ef8 <esp8266_turn_on+0x88>)
 8002edc:	2200      	movs	r2, #0
 8002ede:	705a      	strb	r2, [r3, #1]
	at_send_cmd_blocking(&cmd,1000);
 8002ee0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002ee4:	4804      	ldr	r0, [pc, #16]	; (8002ef8 <esp8266_turn_on+0x88>)
 8002ee6:	f7ff fab9 	bl	800245c <at_send_cmd_blocking>
 8002eea:	e002      	b.n	8002ef2 <esp8266_turn_on+0x82>
	if( esp8266 == NULL ) return;
 8002eec:	bf00      	nop
 8002eee:	e000      	b.n	8002ef2 <esp8266_turn_on+0x82>
	if(cmd.status != AT_STATUS_OK) return;
 8002ef0:	bf00      	nop
}
 8002ef2:	3708      	adds	r7, #8
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}
 8002ef8:	20001158 	.word	0x20001158

08002efc <esp8266_setOprToStationSoftAP>:
	if( esp8266 == NULL ) return;
	cmd.id = AT_CMD_RST;
	at_send_cmd_blocking(&cmd, 6000);
}

void esp8266_setOprToStationSoftAP(esp8266* esp8266){
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b082      	sub	sp, #8
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
	if ( esp8266 == NULL ) return;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d019      	beq.n	8002f3e <esp8266_setOprToStationSoftAP+0x42>

	cmd.id = AT_CMD_WIFI_AP_MODE;
 8002f0a:	4b0f      	ldr	r3, [pc, #60]	; (8002f48 <esp8266_setOprToStationSoftAP+0x4c>)
 8002f0c:	2204      	movs	r2, #4
 8002f0e:	701a      	strb	r2, [r3, #0]
	cmd.payload.wifi_mode.ap_station = AT_WIFI_MODE_STATION;
 8002f10:	4b0d      	ldr	r3, [pc, #52]	; (8002f48 <esp8266_setOprToStationSoftAP+0x4c>)
 8002f12:	2201      	movs	r2, #1
 8002f14:	705a      	strb	r2, [r3, #1]
	at_send_cmd_blocking(&cmd,2000);
 8002f16:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8002f1a:	480b      	ldr	r0, [pc, #44]	; (8002f48 <esp8266_setOprToStationSoftAP+0x4c>)
 8002f1c:	f7ff fa9e 	bl	800245c <at_send_cmd_blocking>

    cmd.id = AT_CMD_WIFI_AP_DHCP;
 8002f20:	4b09      	ldr	r3, [pc, #36]	; (8002f48 <esp8266_setOprToStationSoftAP+0x4c>)
 8002f22:	2207      	movs	r2, #7
 8002f24:	701a      	strb	r2, [r3, #0]
    cmd.payload.wifi_dhcp.ap_station = 1;
 8002f26:	4b08      	ldr	r3, [pc, #32]	; (8002f48 <esp8266_setOprToStationSoftAP+0x4c>)
 8002f28:	2201      	movs	r2, #1
 8002f2a:	705a      	strb	r2, [r3, #1]
    cmd.payload.wifi_dhcp.enabled = 1;
 8002f2c:	4b06      	ldr	r3, [pc, #24]	; (8002f48 <esp8266_setOprToStationSoftAP+0x4c>)
 8002f2e:	2201      	movs	r2, #1
 8002f30:	709a      	strb	r2, [r3, #2]
    at_send_cmd_blocking(&cmd,2000);
 8002f32:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8002f36:	4804      	ldr	r0, [pc, #16]	; (8002f48 <esp8266_setOprToStationSoftAP+0x4c>)
 8002f38:	f7ff fa90 	bl	800245c <at_send_cmd_blocking>
 8002f3c:	e000      	b.n	8002f40 <esp8266_setOprToStationSoftAP+0x44>
	if ( esp8266 == NULL ) return;
 8002f3e:	bf00      	nop
}
 8002f40:	3708      	adds	r7, #8
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	bf00      	nop
 8002f48:	20001158 	.word	0x20001158

08002f4c <esp8266_joinAP>:

bool esp8266_joinAP(esp8266* esp8266, uint8_t* ssid, uint8_t* password){
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b084      	sub	sp, #16
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	60f8      	str	r0, [r7, #12]
 8002f54:	60b9      	str	r1, [r7, #8]
 8002f56:	607a      	str	r2, [r7, #4]
	if( esp8266 == NULL ) return false;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d101      	bne.n	8002f62 <esp8266_joinAP+0x16>
 8002f5e:	2300      	movs	r3, #0
 8002f60:	e025      	b.n	8002fae <esp8266_joinAP+0x62>

	cmd.id = AT_CMD_WIFI_AP_SET;
 8002f62:	4b15      	ldr	r3, [pc, #84]	; (8002fb8 <esp8266_joinAP+0x6c>)
 8002f64:	2206      	movs	r2, #6
 8002f66:	701a      	strb	r2, [r3, #0]
	cmd.payload.wifi_ap.ssid = ssid;
 8002f68:	4a13      	ldr	r2, [pc, #76]	; (8002fb8 <esp8266_joinAP+0x6c>)
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	f8c2 3001 	str.w	r3, [r2, #1]
	cmd.payload.wifi_ap.pwd = password;
 8002f70:	4a11      	ldr	r2, [pc, #68]	; (8002fb8 <esp8266_joinAP+0x6c>)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	f8c2 3005 	str.w	r3, [r2, #5]

	at_send_cmd_blocking(&cmd, 30000);
 8002f78:	f247 5130 	movw	r1, #30000	; 0x7530
 8002f7c:	480e      	ldr	r0, [pc, #56]	; (8002fb8 <esp8266_joinAP+0x6c>)
 8002f7e:	f7ff fa6d 	bl	800245c <at_send_cmd_blocking>
	if( cmd.status != AT_STATUS_OK ) return false;
 8002f82:	4b0d      	ldr	r3, [pc, #52]	; (8002fb8 <esp8266_joinAP+0x6c>)
 8002f84:	7b5b      	ldrb	r3, [r3, #13]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d001      	beq.n	8002f8e <esp8266_joinAP+0x42>
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	e00f      	b.n	8002fae <esp8266_joinAP+0x62>

	cmd.id = AT_CMD_SLL_BUFFER_SIZE;
 8002f8e:	4b0a      	ldr	r3, [pc, #40]	; (8002fb8 <esp8266_joinAP+0x6c>)
 8002f90:	2211      	movs	r2, #17
 8002f92:	701a      	strb	r2, [r3, #0]
	cmd.payload.ssl_buffer.size = 4096;
 8002f94:	4b08      	ldr	r3, [pc, #32]	; (8002fb8 <esp8266_joinAP+0x6c>)
 8002f96:	2200      	movs	r2, #0
 8002f98:	705a      	strb	r2, [r3, #1]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	f042 0210 	orr.w	r2, r2, #16
 8002fa0:	709a      	strb	r2, [r3, #2]
	at_send_cmd_blocking(&cmd, 2000);
 8002fa2:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8002fa6:	4804      	ldr	r0, [pc, #16]	; (8002fb8 <esp8266_joinAP+0x6c>)
 8002fa8:	f7ff fa58 	bl	800245c <at_send_cmd_blocking>

	return true;
 8002fac:	2301      	movs	r3, #1

}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	3710      	adds	r7, #16
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	bf00      	nop
 8002fb8:	20001158 	.word	0x20001158

08002fbc <esp8266_enableMUX>:

bool esp8266_enableMUX(esp8266* esp8266){
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b082      	sub	sp, #8
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
	if ( esp8266 == NULL ) return false;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d101      	bne.n	8002fce <esp8266_enableMUX+0x12>
 8002fca:	2300      	movs	r3, #0
 8002fcc:	e00b      	b.n	8002fe6 <esp8266_enableMUX+0x2a>
    cmd.id = AT_CMD_CON_MUX;
 8002fce:	4b08      	ldr	r3, [pc, #32]	; (8002ff0 <esp8266_enableMUX+0x34>)
 8002fd0:	220d      	movs	r2, #13
 8002fd2:	701a      	strb	r2, [r3, #0]
    cmd.payload.mux.enabled = 1;
 8002fd4:	4b06      	ldr	r3, [pc, #24]	; (8002ff0 <esp8266_enableMUX+0x34>)
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	705a      	strb	r2, [r3, #1]
    at_send_cmd_blocking(&cmd, 2000);
 8002fda:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8002fde:	4804      	ldr	r0, [pc, #16]	; (8002ff0 <esp8266_enableMUX+0x34>)
 8002fe0:	f7ff fa3c 	bl	800245c <at_send_cmd_blocking>

    return true;
 8002fe4:	2301      	movs	r3, #1
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	3708      	adds	r7, #8
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	bf00      	nop
 8002ff0:	20001158 	.word	0x20001158

08002ff4 <esp8266_createTCP>:
    cmd.payload.mux.enabled = 0;
    at_send_cmd_blocking(&cmd, 2000);
    return true;
}

bool esp8266_createTCP(esp8266* esp8266, uint8_t* ip, uint16_t port){
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b084      	sub	sp, #16
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	60f8      	str	r0, [r7, #12]
 8002ffc:	60b9      	str	r1, [r7, #8]
 8002ffe:	4613      	mov	r3, r2
 8003000:	80fb      	strh	r3, [r7, #6]
	if ( esp8266 == NULL ) return false;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d101      	bne.n	800300c <esp8266_createTCP+0x18>
 8003008:	2300      	movs	r3, #0
 800300a:	e01a      	b.n	8003042 <esp8266_createTCP+0x4e>

	cmd.id = AT_CMD_CON_START;
 800300c:	4b0f      	ldr	r3, [pc, #60]	; (800304c <esp8266_createTCP+0x58>)
 800300e:	220e      	movs	r2, #14
 8003010:	701a      	strb	r2, [r3, #0]
	cmd.payload.con_start.port = port;
 8003012:	4b0e      	ldr	r3, [pc, #56]	; (800304c <esp8266_createTCP+0x58>)
 8003014:	88fa      	ldrh	r2, [r7, #6]
 8003016:	815a      	strh	r2, [r3, #10]
	cmd.payload.con_start.transport = (uint8_t*) "TCP";
 8003018:	4b0c      	ldr	r3, [pc, #48]	; (800304c <esp8266_createTCP+0x58>)
 800301a:	4a0d      	ldr	r2, [pc, #52]	; (8003050 <esp8266_createTCP+0x5c>)
 800301c:	f8c3 2005 	str.w	r2, [r3, #5]
	cmd.payload.con_start.site = ip;
 8003020:	4a0a      	ldr	r2, [pc, #40]	; (800304c <esp8266_createTCP+0x58>)
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	f8c2 3001 	str.w	r3, [r2, #1]
	cmd.payload.con_start.channel = 0;
 8003028:	4b08      	ldr	r3, [pc, #32]	; (800304c <esp8266_createTCP+0x58>)
 800302a:	2200      	movs	r2, #0
 800302c:	725a      	strb	r2, [r3, #9]
	at_send_cmd_blocking(&cmd, 10000);
 800302e:	f242 7110 	movw	r1, #10000	; 0x2710
 8003032:	4806      	ldr	r0, [pc, #24]	; (800304c <esp8266_createTCP+0x58>)
 8003034:	f7ff fa12 	bl	800245c <at_send_cmd_blocking>

	esp8266->connected = true; //cmd.status != AT_STATUS_OK ? false : true;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2201      	movs	r2, #1
 800303c:	721a      	strb	r2, [r3, #8]

	return esp8266->connected;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	7a1b      	ldrb	r3, [r3, #8]
}
 8003042:	4618      	mov	r0, r3
 8003044:	3710      	adds	r7, #16
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop
 800304c:	20001158 	.word	0x20001158
 8003050:	0801164c 	.word	0x0801164c

08003054 <esp8266_send>:

uint32_t esp8266_recv(esp8266* esp8266){
	return 0;
}

bool esp8266_send(esp8266* esp8266, uint8_t* buffer, uint16_t buffer_size){
 8003054:	b580      	push	{r7, lr}
 8003056:	b086      	sub	sp, #24
 8003058:	af00      	add	r7, sp, #0
 800305a:	60f8      	str	r0, [r7, #12]
 800305c:	60b9      	str	r1, [r7, #8]
 800305e:	4613      	mov	r3, r2
 8003060:	80fb      	strh	r3, [r7, #6]
	if( esp8266 == NULL ) return false;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d101      	bne.n	800306c <esp8266_send+0x18>
 8003068:	2300      	movs	r3, #0
 800306a:	e01e      	b.n	80030aa <esp8266_send+0x56>

    cmd.id = AT_CMD_CON_SEND;
 800306c:	4b11      	ldr	r3, [pc, #68]	; (80030b4 <esp8266_send+0x60>)
 800306e:	2210      	movs	r2, #16
 8003070:	701a      	strb	r2, [r3, #0]
    cmd.payload.con_send.size = buffer_size;
 8003072:	4b10      	ldr	r3, [pc, #64]	; (80030b4 <esp8266_send+0x60>)
 8003074:	88fa      	ldrh	r2, [r7, #6]
 8003076:	f8a3 2001 	strh.w	r2, [r3, #1]
    cmd.payload.con_send.transparent = 0;
 800307a:	4b0e      	ldr	r3, [pc, #56]	; (80030b4 <esp8266_send+0x60>)
 800307c:	2200      	movs	r2, #0
 800307e:	729a      	strb	r2, [r3, #10]
    cmd.payload.con_send.channel = 0;
 8003080:	4b0c      	ldr	r3, [pc, #48]	; (80030b4 <esp8266_send+0x60>)
 8003082:	2200      	movs	r2, #0
 8003084:	70da      	strb	r2, [r3, #3]
    at_send_cmd_blocking(&cmd, 2000);
 8003086:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800308a:	480a      	ldr	r0, [pc, #40]	; (80030b4 <esp8266_send+0x60>)
 800308c:	f7ff f9e6 	bl	800245c <at_send_cmd_blocking>

    hw_serial_tx(buffer, buffer_size);
 8003090:	88fb      	ldrh	r3, [r7, #6]
 8003092:	4619      	mov	r1, r3
 8003094:	68b8      	ldr	r0, [r7, #8]
 8003096:	f000 f919 	bl	80032cc <hw_serial_tx>

    bool result = cmd.status != AT_STATUS_OK ? false : true;
 800309a:	4b06      	ldr	r3, [pc, #24]	; (80030b4 <esp8266_send+0x60>)
 800309c:	7b5b      	ldrb	r3, [r3, #13]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	bf0c      	ite	eq
 80030a2:	2301      	moveq	r3, #1
 80030a4:	2300      	movne	r3, #0
 80030a6:	75fb      	strb	r3, [r7, #23]

    return result;
 80030a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3718      	adds	r7, #24
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop
 80030b4:	20001158 	.word	0x20001158

080030b8 <hw_esp_power_set>:
//		HAL_GPIO_WritePin(DSP_ON_GPIO_Port,DSP_ON_Pin,GPIO_PIN_RESET);
//	else
//		HAL_GPIO_WritePin(DSP_ON_GPIO_Port,DSP_ON_Pin,GPIO_PIN_SET);
}

void hw_esp_power_set(bool value){
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b082      	sub	sp, #8
 80030bc:	af00      	add	r7, sp, #0
 80030be:	4603      	mov	r3, r0
 80030c0:	71fb      	strb	r3, [r7, #7]
	if(value)
 80030c2:	79fb      	ldrb	r3, [r7, #7]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d006      	beq.n	80030d6 <hw_esp_power_set+0x1e>
		HAL_GPIO_WritePin(ESP_POWER_EN_GPIO_Port, ESP_POWER_EN_Pin, GPIO_PIN_RESET);
 80030c8:	2200      	movs	r2, #0
 80030ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80030ce:	4807      	ldr	r0, [pc, #28]	; (80030ec <hw_esp_power_set+0x34>)
 80030d0:	f007 f81a 	bl	800a108 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(ESP_POWER_EN_GPIO_Port, ESP_POWER_EN_Pin, GPIO_PIN_SET);
}
 80030d4:	e005      	b.n	80030e2 <hw_esp_power_set+0x2a>
		HAL_GPIO_WritePin(ESP_POWER_EN_GPIO_Port, ESP_POWER_EN_Pin, GPIO_PIN_SET);
 80030d6:	2201      	movs	r2, #1
 80030d8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80030dc:	4803      	ldr	r0, [pc, #12]	; (80030ec <hw_esp_power_set+0x34>)
 80030de:	f007 f813 	bl	800a108 <HAL_GPIO_WritePin>
}
 80030e2:	bf00      	nop
 80030e4:	3708      	adds	r7, #8
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	bf00      	nop
 80030ec:	48000400 	.word	0x48000400

080030f0 <hw_esp_reset_set>:

void hw_esp_reset_set(bool value){
 80030f0:	b480      	push	{r7}
 80030f2:	b083      	sub	sp, #12
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	4603      	mov	r3, r0
 80030f8:	71fb      	strb	r3, [r7, #7]
//	if(value)
//		HAL_GPIO_WritePin(ESP_RST_GPIO_Port,ESP_RST_Pin,GPIO_PIN_RESET);
//	else
//		HAL_GPIO_WritePin(ESP_RST_GPIO_Port,ESP_RST_Pin,GPIO_PIN_SET);
}
 80030fa:	bf00      	nop
 80030fc:	370c      	adds	r7, #12
 80030fe:	46bd      	mov	sp, r7
 8003100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003104:	4770      	bx	lr

08003106 <hw_esp_enable_set>:

void hw_esp_enable_set(bool value){
 8003106:	b580      	push	{r7, lr}
 8003108:	b082      	sub	sp, #8
 800310a:	af00      	add	r7, sp, #0
 800310c:	4603      	mov	r3, r0
 800310e:	71fb      	strb	r3, [r7, #7]
	if(value)
 8003110:	79fb      	ldrb	r3, [r7, #7]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d006      	beq.n	8003124 <hw_esp_enable_set+0x1e>
		HAL_GPIO_WritePin(ESP_EN_GPIO_Port, ESP_EN_Pin, GPIO_PIN_SET);
 8003116:	2201      	movs	r2, #1
 8003118:	2120      	movs	r1, #32
 800311a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800311e:	f006 fff3 	bl	800a108 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(ESP_EN_GPIO_Port, ESP_EN_Pin, GPIO_PIN_RESET);
}
 8003122:	e005      	b.n	8003130 <hw_esp_enable_set+0x2a>
		HAL_GPIO_WritePin(ESP_EN_GPIO_Port, ESP_EN_Pin, GPIO_PIN_RESET);
 8003124:	2200      	movs	r2, #0
 8003126:	2120      	movs	r1, #32
 8003128:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800312c:	f006 ffec 	bl	800a108 <HAL_GPIO_WritePin>
}
 8003130:	bf00      	nop
 8003132:	3708      	adds	r7, #8
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}

08003138 <hw_debug>:
#if 0
{
	CDC_Transmit_FS((uint8_t*)msg,len);
}
#else
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b084      	sub	sp, #16
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
 8003140:	460b      	mov	r3, r1
 8003142:	807b      	strh	r3, [r7, #2]
	static uint8_t col 	= 0;
	static uint8_t row 	= 0;
	uint8_t nrow 		= 0;
 8003144:	2300      	movs	r3, #0
 8003146:	73fb      	strb	r3, [r7, #15]
	int n;

	SSD1306_Goto(col*6, row);
 8003148:	4b34      	ldr	r3, [pc, #208]	; (800321c <hw_debug+0xe4>)
 800314a:	781b      	ldrb	r3, [r3, #0]
 800314c:	461a      	mov	r2, r3
 800314e:	0052      	lsls	r2, r2, #1
 8003150:	4413      	add	r3, r2
 8003152:	005b      	lsls	r3, r3, #1
 8003154:	b2da      	uxtb	r2, r3
 8003156:	4b32      	ldr	r3, [pc, #200]	; (8003220 <hw_debug+0xe8>)
 8003158:	781b      	ldrb	r3, [r3, #0]
 800315a:	4619      	mov	r1, r3
 800315c:	4610      	mov	r0, r2
 800315e:	f004 f8ed 	bl	800733c <SSD1306_Goto>

	for(n = 0 ; n < len; n++){
 8003162:	2300      	movs	r3, #0
 8003164:	60bb      	str	r3, [r7, #8]
 8003166:	e051      	b.n	800320c <hw_debug+0xd4>
		if(msg[n] == '\n' || msg[n] == '\r'){
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	687a      	ldr	r2, [r7, #4]
 800316c:	4413      	add	r3, r2
 800316e:	781b      	ldrb	r3, [r3, #0]
 8003170:	2b0a      	cmp	r3, #10
 8003172:	d005      	beq.n	8003180 <hw_debug+0x48>
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	687a      	ldr	r2, [r7, #4]
 8003178:	4413      	add	r3, r2
 800317a:	781b      	ldrb	r3, [r3, #0]
 800317c:	2b0d      	cmp	r3, #13
 800317e:	d10c      	bne.n	800319a <hw_debug+0x62>
			nrow = (row+1) >= SSD1306_HEIGHT/8 ? 0 : row+1;
 8003180:	4b27      	ldr	r3, [pc, #156]	; (8003220 <hw_debug+0xe8>)
 8003182:	781b      	ldrb	r3, [r3, #0]
 8003184:	3301      	adds	r3, #1
 8003186:	2b07      	cmp	r3, #7
 8003188:	dc04      	bgt.n	8003194 <hw_debug+0x5c>
 800318a:	4b25      	ldr	r3, [pc, #148]	; (8003220 <hw_debug+0xe8>)
 800318c:	781b      	ldrb	r3, [r3, #0]
 800318e:	3301      	adds	r3, #1
 8003190:	b2db      	uxtb	r3, r3
 8003192:	e000      	b.n	8003196 <hw_debug+0x5e>
 8003194:	2300      	movs	r3, #0
 8003196:	73fb      	strb	r3, [r7, #15]
 8003198:	e020      	b.n	80031dc <hw_debug+0xa4>
		}
		else {
			SSD1306_Write_Char(msg[n], &SSD1306_Font_07X05);
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	687a      	ldr	r2, [r7, #4]
 800319e:	4413      	add	r3, r2
 80031a0:	781b      	ldrb	r3, [r3, #0]
 80031a2:	4920      	ldr	r1, [pc, #128]	; (8003224 <hw_debug+0xec>)
 80031a4:	4618      	mov	r0, r3
 80031a6:	f004 f8f7 	bl	8007398 <SSD1306_Write_Char>
			col++;
 80031aa:	4b1c      	ldr	r3, [pc, #112]	; (800321c <hw_debug+0xe4>)
 80031ac:	781b      	ldrb	r3, [r3, #0]
 80031ae:	3301      	adds	r3, #1
 80031b0:	b2da      	uxtb	r2, r3
 80031b2:	4b1a      	ldr	r3, [pc, #104]	; (800321c <hw_debug+0xe4>)
 80031b4:	701a      	strb	r2, [r3, #0]
			if(col >= SSD1306_WIDTH/6){
 80031b6:	4b19      	ldr	r3, [pc, #100]	; (800321c <hw_debug+0xe4>)
 80031b8:	781b      	ldrb	r3, [r3, #0]
 80031ba:	2b14      	cmp	r3, #20
 80031bc:	d90e      	bls.n	80031dc <hw_debug+0xa4>
				col = 0;
 80031be:	4b17      	ldr	r3, [pc, #92]	; (800321c <hw_debug+0xe4>)
 80031c0:	2200      	movs	r2, #0
 80031c2:	701a      	strb	r2, [r3, #0]
				nrow = (row+1) >= SSD1306_HEIGHT/8 ? 0 : row+1;
 80031c4:	4b16      	ldr	r3, [pc, #88]	; (8003220 <hw_debug+0xe8>)
 80031c6:	781b      	ldrb	r3, [r3, #0]
 80031c8:	3301      	adds	r3, #1
 80031ca:	2b07      	cmp	r3, #7
 80031cc:	dc04      	bgt.n	80031d8 <hw_debug+0xa0>
 80031ce:	4b14      	ldr	r3, [pc, #80]	; (8003220 <hw_debug+0xe8>)
 80031d0:	781b      	ldrb	r3, [r3, #0]
 80031d2:	3301      	adds	r3, #1
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	e000      	b.n	80031da <hw_debug+0xa2>
 80031d8:	2300      	movs	r3, #0
 80031da:	73fb      	strb	r3, [r7, #15]
			}
		}

		if(row != nrow){
 80031dc:	4b10      	ldr	r3, [pc, #64]	; (8003220 <hw_debug+0xe8>)
 80031de:	781b      	ldrb	r3, [r3, #0]
 80031e0:	7bfa      	ldrb	r2, [r7, #15]
 80031e2:	429a      	cmp	r2, r3
 80031e4:	d00f      	beq.n	8003206 <hw_debug+0xce>
			row = nrow;
 80031e6:	4a0e      	ldr	r2, [pc, #56]	; (8003220 <hw_debug+0xe8>)
 80031e8:	7bfb      	ldrb	r3, [r7, #15]
 80031ea:	7013      	strb	r3, [r2, #0]
			SSD1306_Goto(col*6, row);
 80031ec:	4b0b      	ldr	r3, [pc, #44]	; (800321c <hw_debug+0xe4>)
 80031ee:	781b      	ldrb	r3, [r3, #0]
 80031f0:	461a      	mov	r2, r3
 80031f2:	0052      	lsls	r2, r2, #1
 80031f4:	4413      	add	r3, r2
 80031f6:	005b      	lsls	r3, r3, #1
 80031f8:	b2da      	uxtb	r2, r3
 80031fa:	4b09      	ldr	r3, [pc, #36]	; (8003220 <hw_debug+0xe8>)
 80031fc:	781b      	ldrb	r3, [r3, #0]
 80031fe:	4619      	mov	r1, r3
 8003200:	4610      	mov	r0, r2
 8003202:	f004 f89b 	bl	800733c <SSD1306_Goto>
	for(n = 0 ; n < len; n++){
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	3301      	adds	r3, #1
 800320a:	60bb      	str	r3, [r7, #8]
 800320c:	887b      	ldrh	r3, [r7, #2]
 800320e:	68ba      	ldr	r2, [r7, #8]
 8003210:	429a      	cmp	r2, r3
 8003212:	dba9      	blt.n	8003168 <hw_debug+0x30>
		}
	}
}
 8003214:	bf00      	nop
 8003216:	3710      	adds	r7, #16
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}
 800321c:	20000afb 	.word	0x20000afb
 8003220:	20000afc 	.word	0x20000afc
 8003224:	200000dc 	.word	0x200000dc

08003228 <USART2_IRQHandler>:
#endif

void USART2_IRQHandler(void){
 8003228:	b580      	push	{r7, lr}
 800322a:	b084      	sub	sp, #16
 800322c:	af00      	add	r7, sp, #0
    uint8_t c = 0;
 800322e:	2300      	movs	r3, #0
 8003230:	71fb      	strb	r3, [r7, #7]
    uint32_t sr;
    USART_TypeDef* h = UART_HANDLE.Instance;
 8003232:	4b16      	ldr	r3, [pc, #88]	; (800328c <USART2_IRQHandler+0x64>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	60bb      	str	r3, [r7, #8]

    // lê o status register e trata erros até que desapareçam
    // (o manual manda ler o SR e em seguida DR)

    sr = h->ISR;
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	69db      	ldr	r3, [r3, #28]
 800323c:	60fb      	str	r3, [r7, #12]

    while(sr & (UART_FLAG_ORE | UART_FLAG_PE | UART_FLAG_FE | UART_FLAG_NE)){
 800323e:	e005      	b.n	800324c <USART2_IRQHandler+0x24>
    	h->ICR = UART_CLEAR_OREF | UART_CLEAR_PEF | UART_CLEAR_FEF | UART_CLEAR_NEF;
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	220f      	movs	r2, #15
 8003244:	621a      	str	r2, [r3, #32]
    	sr = h->ISR;
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	69db      	ldr	r3, [r3, #28]
 800324a:	60fb      	str	r3, [r7, #12]
    while(sr & (UART_FLAG_ORE | UART_FLAG_PE | UART_FLAG_FE | UART_FLAG_NE)){
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	f003 030f 	and.w	r3, r3, #15
 8003252:	2b00      	cmp	r3, #0
 8003254:	d1f4      	bne.n	8003240 <USART2_IRQHandler+0x18>
        //c = h->RDR;
    }

    if(sr & UART_FLAG_RXNE){
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	f003 0320 	and.w	r3, r3, #32
 800325c:	2b00      	cmp	r3, #0
 800325e:	d011      	beq.n	8003284 <USART2_IRQHandler+0x5c>
        c = h->RDR;
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003264:	b29b      	uxth	r3, r3
 8003266:	b2db      	uxtb	r3, r3
 8003268:	71fb      	strb	r3, [r7, #7]

        if(hw_debug_enable)
 800326a:	4b09      	ldr	r3, [pc, #36]	; (8003290 <USART2_IRQHandler+0x68>)
 800326c:	781b      	ldrb	r3, [r3, #0]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d004      	beq.n	800327c <USART2_IRQHandler+0x54>
        	hw_debug(&c, 1);
 8003272:	1dfb      	adds	r3, r7, #7
 8003274:	2101      	movs	r1, #1
 8003276:	4618      	mov	r0, r3
 8003278:	f7ff ff5e 	bl	8003138 <hw_debug>

        at_rx_interrupt(c);
 800327c:	79fb      	ldrb	r3, [r7, #7]
 800327e:	4618      	mov	r0, r3
 8003280:	f7ff fc6c 	bl	8002b5c <at_rx_interrupt>
        // some action here
    }
}
 8003284:	bf00      	nop
 8003286:	3710      	adds	r7, #16
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}
 800328c:	20000ccc 	.word	0x20000ccc
 8003290:	20000afa 	.word	0x20000afa

08003294 <hw_serial_send_byte>:

static void hw_serial_send_byte(uint8_t c){
 8003294:	b480      	push	{r7}
 8003296:	b085      	sub	sp, #20
 8003298:	af00      	add	r7, sp, #0
 800329a:	4603      	mov	r3, r0
 800329c:	71fb      	strb	r3, [r7, #7]
	USART_TypeDef* h = UART_HANDLE.Instance;
 800329e:	4b0a      	ldr	r3, [pc, #40]	; (80032c8 <hw_serial_send_byte+0x34>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	60fb      	str	r3, [r7, #12]
	while( !(h->ISR & UART_FLAG_TXE) ) {}
 80032a4:	bf00      	nop
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	69db      	ldr	r3, [r3, #28]
 80032aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d0f9      	beq.n	80032a6 <hw_serial_send_byte+0x12>
	h->TDR = c;
 80032b2:	79fb      	ldrb	r3, [r7, #7]
 80032b4:	b29a      	uxth	r2, r3
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	851a      	strh	r2, [r3, #40]	; 0x28
}
 80032ba:	bf00      	nop
 80032bc:	3714      	adds	r7, #20
 80032be:	46bd      	mov	sp, r7
 80032c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c4:	4770      	bx	lr
 80032c6:	bf00      	nop
 80032c8:	20000ccc 	.word	0x20000ccc

080032cc <hw_serial_tx>:

uint32_t hw_serial_tx(const uint8_t* str, uint16_t len){
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b084      	sub	sp, #16
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
 80032d4:	460b      	mov	r3, r1
 80032d6:	807b      	strh	r3, [r7, #2]
	uint16_t n;

	if(hw_debug_enable)
 80032d8:	4b0f      	ldr	r3, [pc, #60]	; (8003318 <hw_serial_tx+0x4c>)
 80032da:	781b      	ldrb	r3, [r3, #0]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d004      	beq.n	80032ea <hw_serial_tx+0x1e>
		hw_debug(str, len);
 80032e0:	887b      	ldrh	r3, [r7, #2]
 80032e2:	4619      	mov	r1, r3
 80032e4:	6878      	ldr	r0, [r7, #4]
 80032e6:	f7ff ff27 	bl	8003138 <hw_debug>

	for(n = 0 ; n < len ; n++)
 80032ea:	2300      	movs	r3, #0
 80032ec:	81fb      	strh	r3, [r7, #14]
 80032ee:	e009      	b.n	8003304 <hw_serial_tx+0x38>
		hw_serial_send_byte(str[n]);
 80032f0:	89fb      	ldrh	r3, [r7, #14]
 80032f2:	687a      	ldr	r2, [r7, #4]
 80032f4:	4413      	add	r3, r2
 80032f6:	781b      	ldrb	r3, [r3, #0]
 80032f8:	4618      	mov	r0, r3
 80032fa:	f7ff ffcb 	bl	8003294 <hw_serial_send_byte>
	for(n = 0 ; n < len ; n++)
 80032fe:	89fb      	ldrh	r3, [r7, #14]
 8003300:	3301      	adds	r3, #1
 8003302:	81fb      	strh	r3, [r7, #14]
 8003304:	89fa      	ldrh	r2, [r7, #14]
 8003306:	887b      	ldrh	r3, [r7, #2]
 8003308:	429a      	cmp	r2, r3
 800330a:	d3f1      	bcc.n	80032f0 <hw_serial_tx+0x24>

	return len;
 800330c:	887b      	ldrh	r3, [r7, #2]
}
 800330e:	4618      	mov	r0, r3
 8003310:	3710      	adds	r7, #16
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}
 8003316:	bf00      	nop
 8003318:	20000afa 	.word	0x20000afa

0800331c <hw_time_get>:

uint32_t hw_time_get(void){
 800331c:	b580      	push	{r7, lr}
 800331e:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 8003320:	f005 f84a 	bl	80083b8 <HAL_GetTick>
 8003324:	4603      	mov	r3, r0
}
 8003326:	4618      	mov	r0, r3
 8003328:	bd80      	pop	{r7, pc}

0800332a <hw_time_elapsed>:

uint32_t hw_time_elapsed(uint32_t tmr_old_ms, uint32_t tmr_new_ms){
 800332a:	b480      	push	{r7}
 800332c:	b085      	sub	sp, #20
 800332e:	af00      	add	r7, sp, #0
 8003330:	6078      	str	r0, [r7, #4]
 8003332:	6039      	str	r1, [r7, #0]
    uint32_t elapsed_ms;

    if(tmr_new_ms < tmr_old_ms)
 8003334:	683a      	ldr	r2, [r7, #0]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	429a      	cmp	r2, r3
 800333a:	d204      	bcs.n	8003346 <hw_time_elapsed+0x1c>
        elapsed_ms = UINT32_MAX - tmr_old_ms + tmr_new_ms + 1;
 800333c:	683a      	ldr	r2, [r7, #0]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	1ad3      	subs	r3, r2, r3
 8003342:	60fb      	str	r3, [r7, #12]
 8003344:	e003      	b.n	800334e <hw_time_elapsed+0x24>
    else
        elapsed_ms = tmr_new_ms - tmr_old_ms;
 8003346:	683a      	ldr	r2, [r7, #0]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	1ad3      	subs	r3, r2, r3
 800334c:	60fb      	str	r3, [r7, #12]

    return elapsed_ms;
 800334e:	68fb      	ldr	r3, [r7, #12]
}
 8003350:	4618      	mov	r0, r3
 8003352:	3714      	adds	r7, #20
 8003354:	46bd      	mov	sp, r7
 8003356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335a:	4770      	bx	lr

0800335c <hw_time_sleep>:

void hw_time_sleep(uint32_t tmr_ms){
 800335c:	b580      	push	{r7, lr}
 800335e:	b084      	sub	sp, #16
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
    uint32_t tmr_new_ms;
    uint32_t tmr_old_ms = hw_time_get();
 8003364:	f7ff ffda 	bl	800331c <hw_time_get>
 8003368:	60f8      	str	r0, [r7, #12]

    do{
        tmr_new_ms = hw_time_get();
 800336a:	f7ff ffd7 	bl	800331c <hw_time_get>
 800336e:	60b8      	str	r0, [r7, #8]
    } while(hw_time_elapsed(tmr_old_ms, tmr_new_ms) < tmr_ms);
 8003370:	68b9      	ldr	r1, [r7, #8]
 8003372:	68f8      	ldr	r0, [r7, #12]
 8003374:	f7ff ffd9 	bl	800332a <hw_time_elapsed>
 8003378:	4602      	mov	r2, r0
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	4293      	cmp	r3, r2
 800337e:	d8f4      	bhi.n	800336a <hw_time_sleep+0xe>
}
 8003380:	bf00      	nop
 8003382:	3710      	adds	r7, #16
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}

08003388 <hw_uart_init>:

void hw_debug_set(bool state){
	hw_debug_enable = state;
}

void hw_uart_init(void){
 8003388:	b580      	push	{r7, lr}
 800338a:	af00      	add	r7, sp, #0
	UART_HANDLE.Instance->CR3 |= USART_CR3_EIE;
 800338c:	4b0c      	ldr	r3, [pc, #48]	; (80033c0 <hw_uart_init+0x38>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	689a      	ldr	r2, [r3, #8]
 8003392:	4b0b      	ldr	r3, [pc, #44]	; (80033c0 <hw_uart_init+0x38>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f042 0201 	orr.w	r2, r2, #1
 800339a:	609a      	str	r2, [r3, #8]
	UART_HANDLE.Instance->CR1 |= USART_CR1_PEIE | USART_CR1_RXNEIE;
 800339c:	4b08      	ldr	r3, [pc, #32]	; (80033c0 <hw_uart_init+0x38>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	4b07      	ldr	r3, [pc, #28]	; (80033c0 <hw_uart_init+0x38>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 80033aa:	601a      	str	r2, [r3, #0]
	HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 80033ac:	2200      	movs	r2, #0
 80033ae:	2101      	movs	r1, #1
 80033b0:	2026      	movs	r0, #38	; 0x26
 80033b2:	f006 fae8 	bl	8009986 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART2_IRQn);
 80033b6:	2026      	movs	r0, #38	; 0x26
 80033b8:	f006 fb01 	bl	80099be <HAL_NVIC_EnableIRQ>
}
 80033bc:	bf00      	nop
 80033be:	bd80      	pop	{r7, pc}
 80033c0:	20000ccc 	.word	0x20000ccc

080033c4 <_times>:
int _unlink(char* name){
	errno = ENOENT;
	return -1;
}

int _times(struct tms *buf){
 80033c4:	b480      	push	{r7}
 80033c6:	b083      	sub	sp, #12
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
	return -1;
 80033cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	370c      	adds	r7, #12
 80033d4:	46bd      	mov	sp, r7
 80033d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033da:	4770      	bx	lr

080033dc <_sbrk>:

/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr){
 80033dc:	b580      	push	{r7, lr}
 80033de:	b084      	sub	sp, #16
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80033e4:	4b11      	ldr	r3, [pc, #68]	; (800342c <_sbrk+0x50>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d102      	bne.n	80033f2 <_sbrk+0x16>
		heap_end = &end;
 80033ec:	4b0f      	ldr	r3, [pc, #60]	; (800342c <_sbrk+0x50>)
 80033ee:	4a10      	ldr	r2, [pc, #64]	; (8003430 <_sbrk+0x54>)
 80033f0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80033f2:	4b0e      	ldr	r3, [pc, #56]	; (800342c <_sbrk+0x50>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr){
 80033f8:	4b0c      	ldr	r3, [pc, #48]	; (800342c <_sbrk+0x50>)
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	4413      	add	r3, r2
 8003400:	466a      	mov	r2, sp
 8003402:	4293      	cmp	r3, r2
 8003404:	d907      	bls.n	8003416 <_sbrk+0x3a>
		errno = ENOMEM;
 8003406:	f009 f951 	bl	800c6ac <__errno>
 800340a:	4602      	mov	r2, r0
 800340c:	230c      	movs	r3, #12
 800340e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8003410:	f04f 33ff 	mov.w	r3, #4294967295
 8003414:	e006      	b.n	8003424 <_sbrk+0x48>
	}

	heap_end += incr;
 8003416:	4b05      	ldr	r3, [pc, #20]	; (800342c <_sbrk+0x50>)
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	4413      	add	r3, r2
 800341e:	4a03      	ldr	r2, [pc, #12]	; (800342c <_sbrk+0x50>)
 8003420:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8003422:	68fb      	ldr	r3, [r7, #12]
}
 8003424:	4618      	mov	r0, r3
 8003426:	3710      	adds	r7, #16
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}
 800342c:	20000b00 	.word	0x20000b00
 8003430:	20001180 	.word	0x20001180

08003434 <assembler_build_to_control_packet>:
#include <mqtt_client/assembler.h>

control_packet* assembler_build_to_control_packet(bytes* bytes){
 8003434:	b580      	push	{r7, lr}
 8003436:	b084      	sub	sp, #16
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
	if( bytes == NULL ) return NULL;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d101      	bne.n	8003446 <assembler_build_to_control_packet+0x12>
 8003442:	2300      	movs	r3, #0
 8003444:	e020      	b.n	8003488 <assembler_build_to_control_packet+0x54>
	control_packet* result = (control_packet*) malloc(sizeof(control_packet));
 8003446:	2006      	movs	r0, #6
 8003448:	f009 f95a 	bl	800c700 <malloc>
 800344c:	4603      	mov	r3, r0
 800344e:	60fb      	str	r3, [r7, #12]

	unsigned char typeAndFlags	= bytes_at(bytes, 0);
 8003450:	2100      	movs	r1, #0
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f000 fa61 	bl	800391a <bytes_at>
 8003458:	4603      	mov	r3, r0
 800345a:	72fb      	strb	r3, [r7, #11]
	result->type                	= typeAndFlags & 0xF0;
 800345c:	7afb      	ldrb	r3, [r7, #11]
 800345e:	f023 030f 	bic.w	r3, r3, #15
 8003462:	b2da      	uxtb	r2, r3
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	701a      	strb	r2, [r3, #0]
	result->flags               	= typeAndFlags & 0x0F;
 8003468:	7afb      	ldrb	r3, [r7, #11]
 800346a:	f003 030f 	and.w	r3, r3, #15
 800346e:	b2da      	uxtb	r2, r3
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	705a      	strb	r2, [r3, #1]
	result->remaining_length    	= bytes_at(bytes, 1);
 8003474:	2101      	movs	r1, #1
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f000 fa4f 	bl	800391a <bytes_at>
 800347c:	4603      	mov	r3, r0
 800347e:	461a      	mov	r2, r3
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	f8c3 2002 	str.w	r2, [r3, #2]

	return result;
 8003486:	68fb      	ldr	r3, [r7, #12]
}
 8003488:	4618      	mov	r0, r3
 800348a:	3710      	adds	r7, #16
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}

08003490 <assembler_build_to_connect>:
	result->clean_session = bytes_at(bytes, 2) == 0x00 ? true : false;
	result->return_code = bytes_at(bytes, 3);
	return result;
}

connect* assembler_build_to_connect(bytes* bytes){
 8003490:	b590      	push	{r4, r7, lr}
 8003492:	b089      	sub	sp, #36	; 0x24
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
	if( bytes == NULL ) return NULL;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d101      	bne.n	80034a2 <assembler_build_to_connect+0x12>
 800349e:	2300      	movs	r3, #0
 80034a0:	e0ea      	b.n	8003678 <assembler_build_to_connect+0x1e8>
	connect* result = (connect*) malloc(sizeof(connect));
 80034a2:	201e      	movs	r0, #30
 80034a4:	f009 f92c 	bl	800c700 <malloc>
 80034a8:	4603      	mov	r3, r0
 80034aa:	61fb      	str	r3, [r7, #28]
	result->control_packet = assembler_build_to_control_packet(bytes);
 80034ac:	6878      	ldr	r0, [r7, #4]
 80034ae:	f7ff ffc1 	bl	8003434 <assembler_build_to_control_packet>
 80034b2:	4602      	mov	r2, r0
 80034b4:	69fb      	ldr	r3, [r7, #28]
 80034b6:	601a      	str	r2, [r3, #0]

	unsigned int index = 2;
 80034b8:	2302      	movs	r3, #2
 80034ba:	60fb      	str	r3, [r7, #12]

	// Protocol Name
	result->variable_header = bytes_init();
 80034bc:	f000 f9bc 	bl	8003838 <bytes_init>
 80034c0:	4602      	mov	r2, r0
 80034c2:	69fb      	ldr	r3, [r7, #28]
 80034c4:	605a      	str	r2, [r3, #4]
	bytes_push_back( result->variable_header, (unsigned char) bytes_at(bytes, (index++)) );
 80034c6:	69fb      	ldr	r3, [r7, #28]
 80034c8:	685c      	ldr	r4, [r3, #4]
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	1c5a      	adds	r2, r3, #1
 80034ce:	60fa      	str	r2, [r7, #12]
 80034d0:	4619      	mov	r1, r3
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	f000 fa21 	bl	800391a <bytes_at>
 80034d8:	4603      	mov	r3, r0
 80034da:	4619      	mov	r1, r3
 80034dc:	4620      	mov	r0, r4
 80034de:	f000 fa4a 	bl	8003976 <bytes_push_back>
	bytes_push_back( result->variable_header, (unsigned char) bytes_at(bytes, (index++)) );
 80034e2:	69fb      	ldr	r3, [r7, #28]
 80034e4:	685c      	ldr	r4, [r3, #4]
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	1c5a      	adds	r2, r3, #1
 80034ea:	60fa      	str	r2, [r7, #12]
 80034ec:	4619      	mov	r1, r3
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f000 fa13 	bl	800391a <bytes_at>
 80034f4:	4603      	mov	r3, r0
 80034f6:	4619      	mov	r1, r3
 80034f8:	4620      	mov	r0, r4
 80034fa:	f000 fa3c 	bl	8003976 <bytes_push_back>
	bytes_push_back( result->variable_header, (unsigned char) bytes_at(bytes, (index++)) );
 80034fe:	69fb      	ldr	r3, [r7, #28]
 8003500:	685c      	ldr	r4, [r3, #4]
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	1c5a      	adds	r2, r3, #1
 8003506:	60fa      	str	r2, [r7, #12]
 8003508:	4619      	mov	r1, r3
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f000 fa05 	bl	800391a <bytes_at>
 8003510:	4603      	mov	r3, r0
 8003512:	4619      	mov	r1, r3
 8003514:	4620      	mov	r0, r4
 8003516:	f000 fa2e 	bl	8003976 <bytes_push_back>
	bytes_push_back( result->variable_header, (unsigned char) bytes_at(bytes, (index++)) );
 800351a:	69fb      	ldr	r3, [r7, #28]
 800351c:	685c      	ldr	r4, [r3, #4]
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	1c5a      	adds	r2, r3, #1
 8003522:	60fa      	str	r2, [r7, #12]
 8003524:	4619      	mov	r1, r3
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f000 f9f7 	bl	800391a <bytes_at>
 800352c:	4603      	mov	r3, r0
 800352e:	4619      	mov	r1, r3
 8003530:	4620      	mov	r0, r4
 8003532:	f000 fa20 	bl	8003976 <bytes_push_back>
	bytes_push_back( result->variable_header, (unsigned char) bytes_at(bytes, (index++)) );
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	685c      	ldr	r4, [r3, #4]
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	1c5a      	adds	r2, r3, #1
 800353e:	60fa      	str	r2, [r7, #12]
 8003540:	4619      	mov	r1, r3
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f000 f9e9 	bl	800391a <bytes_at>
 8003548:	4603      	mov	r3, r0
 800354a:	4619      	mov	r1, r3
 800354c:	4620      	mov	r0, r4
 800354e:	f000 fa12 	bl	8003976 <bytes_push_back>
	bytes_push_back( result->variable_header, (unsigned char) bytes_at(bytes, (index++)) );
 8003552:	69fb      	ldr	r3, [r7, #28]
 8003554:	685c      	ldr	r4, [r3, #4]
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	1c5a      	adds	r2, r3, #1
 800355a:	60fa      	str	r2, [r7, #12]
 800355c:	4619      	mov	r1, r3
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f000 f9db 	bl	800391a <bytes_at>
 8003564:	4603      	mov	r3, r0
 8003566:	4619      	mov	r1, r3
 8003568:	4620      	mov	r0, r4
 800356a:	f000 fa04 	bl	8003976 <bytes_push_back>

	// Protocol Level
	bytes_push_back( result->variable_header, (unsigned char) bytes_at(bytes, (index++)) );
 800356e:	69fb      	ldr	r3, [r7, #28]
 8003570:	685c      	ldr	r4, [r3, #4]
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	1c5a      	adds	r2, r3, #1
 8003576:	60fa      	str	r2, [r7, #12]
 8003578:	4619      	mov	r1, r3
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f000 f9cd 	bl	800391a <bytes_at>
 8003580:	4603      	mov	r3, r0
 8003582:	4619      	mov	r1, r3
 8003584:	4620      	mov	r0, r4
 8003586:	f000 f9f6 	bl	8003976 <bytes_push_back>

	// Flags
	bytes_push_back( result->variable_header, (unsigned char) bytes_at(bytes, (index++)));
 800358a:	69fb      	ldr	r3, [r7, #28]
 800358c:	685c      	ldr	r4, [r3, #4]
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	1c5a      	adds	r2, r3, #1
 8003592:	60fa      	str	r2, [r7, #12]
 8003594:	4619      	mov	r1, r3
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f000 f9bf 	bl	800391a <bytes_at>
 800359c:	4603      	mov	r3, r0
 800359e:	4619      	mov	r1, r3
 80035a0:	4620      	mov	r0, r4
 80035a2:	f000 f9e8 	bl	8003976 <bytes_push_back>

	// Keep Alive
	unsigned int msb_keep_alive = (unsigned int) (bytes_at(bytes, (index++)) << 8);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	1c5a      	adds	r2, r3, #1
 80035aa:	60fa      	str	r2, [r7, #12]
 80035ac:	4619      	mov	r1, r3
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f000 f9b3 	bl	800391a <bytes_at>
 80035b4:	4603      	mov	r3, r0
 80035b6:	021b      	lsls	r3, r3, #8
 80035b8:	61bb      	str	r3, [r7, #24]
	unsigned int lsb_keep_alive = (unsigned int) bytes_at(bytes, (index++));
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	1c5a      	adds	r2, r3, #1
 80035be:	60fa      	str	r2, [r7, #12]
 80035c0:	4619      	mov	r1, r3
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f000 f9a9 	bl	800391a <bytes_at>
 80035c8:	4603      	mov	r3, r0
 80035ca:	617b      	str	r3, [r7, #20]
	result->keep_alive = msb_keep_alive + lsb_keep_alive;
 80035cc:	69bb      	ldr	r3, [r7, #24]
 80035ce:	b29a      	uxth	r2, r3
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	b29b      	uxth	r3, r3
 80035d4:	4413      	add	r3, r2
 80035d6:	b29a      	uxth	r2, r3
 80035d8:	69fb      	ldr	r3, [r7, #28]
 80035da:	811a      	strh	r2, [r3, #8]

	// Client Identifier
	result->client_identifier = packet_util_build_string(bytes, &index);
 80035dc:	f107 030c 	add.w	r3, r7, #12
 80035e0:	4619      	mov	r1, r3
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f001 fb90 	bl	8004d08 <packet_util_build_string>
 80035e8:	4602      	mov	r2, r0
 80035ea:	69fb      	ldr	r3, [r7, #28]
 80035ec:	f8c3 200a 	str.w	r2, [r3, #10]

	// Flags
	unsigned char flags = bytes_at(result->variable_header, 7);
 80035f0:	69fb      	ldr	r3, [r7, #28]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	2107      	movs	r1, #7
 80035f6:	4618      	mov	r0, r3
 80035f8:	f000 f98f 	bl	800391a <bytes_at>
 80035fc:	4603      	mov	r3, r0
 80035fe:	74fb      	strb	r3, [r7, #19]
	if ( flags & ( 0x01 << 2 ) ){
 8003600:	7cfb      	ldrb	r3, [r7, #19]
 8003602:	f003 0304 	and.w	r3, r3, #4
 8003606:	2b00      	cmp	r3, #0
 8003608:	d035      	beq.n	8003676 <assembler_build_to_connect+0x1e6>
		result->will_topic = packet_util_build_string(bytes, &index);
 800360a:	f107 030c 	add.w	r3, r7, #12
 800360e:	4619      	mov	r1, r3
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	f001 fb79 	bl	8004d08 <packet_util_build_string>
 8003616:	4602      	mov	r2, r0
 8003618:	69fb      	ldr	r3, [r7, #28]
 800361a:	f8c3 200e 	str.w	r2, [r3, #14]
		if ( flags & ( 0x01 << 2 ) )
 800361e:	7cfb      	ldrb	r3, [r7, #19]
 8003620:	f003 0304 	and.w	r3, r3, #4
 8003624:	2b00      	cmp	r3, #0
 8003626:	d009      	beq.n	800363c <assembler_build_to_connect+0x1ac>
			result->will_message = packet_util_build_string(bytes, &index);
 8003628:	f107 030c 	add.w	r3, r7, #12
 800362c:	4619      	mov	r1, r3
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f001 fb6a 	bl	8004d08 <packet_util_build_string>
 8003634:	4602      	mov	r2, r0
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	f8c3 2012 	str.w	r2, [r3, #18]
		if ( flags & ( 0x01 << 7 ) ){
 800363c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8003640:	2b00      	cmp	r3, #0
 8003642:	da18      	bge.n	8003676 <assembler_build_to_connect+0x1e6>
			result->username = packet_util_build_string(bytes, &index);
 8003644:	f107 030c 	add.w	r3, r7, #12
 8003648:	4619      	mov	r1, r3
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f001 fb5c 	bl	8004d08 <packet_util_build_string>
 8003650:	4602      	mov	r2, r0
 8003652:	69fb      	ldr	r3, [r7, #28]
 8003654:	f8c3 2016 	str.w	r2, [r3, #22]
			if ( flags & ( 0x01 << 6 ) )
 8003658:	7cfb      	ldrb	r3, [r7, #19]
 800365a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800365e:	2b00      	cmp	r3, #0
 8003660:	d009      	beq.n	8003676 <assembler_build_to_connect+0x1e6>
				result->password = packet_util_build_string(bytes, &index);
 8003662:	f107 030c 	add.w	r3, r7, #12
 8003666:	4619      	mov	r1, r3
 8003668:	6878      	ldr	r0, [r7, #4]
 800366a:	f001 fb4d 	bl	8004d08 <packet_util_build_string>
 800366e:	4602      	mov	r2, r0
 8003670:	69fb      	ldr	r3, [r7, #28]
 8003672:	f8c3 201a 	str.w	r2, [r3, #26]
		}
	}

	return result;
 8003676:	69fb      	ldr	r3, [r7, #28]
}
 8003678:	4618      	mov	r0, r3
 800367a:	3724      	adds	r7, #36	; 0x24
 800367c:	46bd      	mov	sp, r7
 800367e:	bd90      	pop	{r4, r7, pc}

08003680 <assembler_build_to_publish>:
	unsigned int lsb_packet_identifier = (unsigned int) bytes_at(bytes, 3);
	result->packet_identifier = msb_packet_identifier + lsb_packet_identifier;
	return result;
}

publish* assembler_build_to_publish(bytes* bytes){
 8003680:	b580      	push	{r7, lr}
 8003682:	b086      	sub	sp, #24
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
	if( bytes == NULL ) return NULL;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d101      	bne.n	8003692 <assembler_build_to_publish+0x12>
 800368e:	2300      	movs	r3, #0
 8003690:	e06e      	b.n	8003770 <assembler_build_to_publish+0xf0>

	publish* result = (publish*) malloc(sizeof(publish));
 8003692:	2011      	movs	r0, #17
 8003694:	f009 f834 	bl	800c700 <malloc>
 8003698:	4603      	mov	r3, r0
 800369a:	617b      	str	r3, [r7, #20]
	result->dup       	= control_packet_get_flags(result->control_packet) & 0x08 ? true : false;
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4618      	mov	r0, r3
 80036a2:	f000 fe55 	bl	8004350 <control_packet_get_flags>
 80036a6:	4603      	mov	r3, r0
 80036a8:	f003 0308 	and.w	r3, r3, #8
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	bf14      	ite	ne
 80036b0:	2301      	movne	r3, #1
 80036b2:	2300      	moveq	r3, #0
 80036b4:	b2da      	uxtb	r2, r3
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	711a      	strb	r2, [r3, #4]
	result->qos_level 	= (unsigned char) ( (control_packet_get_flags(result->control_packet) & 0x06) >> 1 );
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4618      	mov	r0, r3
 80036c0:	f000 fe46 	bl	8004350 <control_packet_get_flags>
 80036c4:	4603      	mov	r3, r0
 80036c6:	105b      	asrs	r3, r3, #1
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	f003 0303 	and.w	r3, r3, #3
 80036ce:	b2da      	uxtb	r2, r3
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	715a      	strb	r2, [r3, #5]
	result->retain    	= control_packet_get_flags(result->control_packet) & 0x01 ? true : false;
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4618      	mov	r0, r3
 80036da:	f000 fe39 	bl	8004350 <control_packet_get_flags>
 80036de:	4603      	mov	r3, r0
 80036e0:	f003 0301 	and.w	r3, r3, #1
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	bf14      	ite	ne
 80036e8:	2301      	movne	r3, #1
 80036ea:	2300      	moveq	r3, #0
 80036ec:	b2da      	uxtb	r2, r3
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	719a      	strb	r2, [r3, #6]

	unsigned int index = 2;
 80036f2:	2302      	movs	r3, #2
 80036f4:	60bb      	str	r3, [r7, #8]
	result->topic_name = packet_util_build_string(bytes, &index);
 80036f6:	f107 0308 	add.w	r3, r7, #8
 80036fa:	4619      	mov	r1, r3
 80036fc:	6878      	ldr	r0, [r7, #4]
 80036fe:	f001 fb03 	bl	8004d08 <packet_util_build_string>
 8003702:	4602      	mov	r2, r0
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	f8c3 2007 	str.w	r2, [r3, #7]
	if( result->qos_level == PUBLISH_QOS_LEVEL_1 || result->qos_level == PUBLISH_QOS_LEVEL_2 ) {
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	795a      	ldrb	r2, [r3, #5]
 800370e:	4b1a      	ldr	r3, [pc, #104]	; (8003778 <assembler_build_to_publish+0xf8>)
 8003710:	781b      	ldrb	r3, [r3, #0]
 8003712:	429a      	cmp	r2, r3
 8003714:	d005      	beq.n	8003722 <assembler_build_to_publish+0xa2>
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	795a      	ldrb	r2, [r3, #5]
 800371a:	4b18      	ldr	r3, [pc, #96]	; (800377c <assembler_build_to_publish+0xfc>)
 800371c:	781b      	ldrb	r3, [r3, #0]
 800371e:	429a      	cmp	r2, r3
 8003720:	d11b      	bne.n	800375a <assembler_build_to_publish+0xda>
		unsigned int msb_packet_identifier = (unsigned int) ( bytes_at(bytes,index++) << 8 );
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	1c5a      	adds	r2, r3, #1
 8003726:	60ba      	str	r2, [r7, #8]
 8003728:	4619      	mov	r1, r3
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f000 f8f5 	bl	800391a <bytes_at>
 8003730:	4603      	mov	r3, r0
 8003732:	021b      	lsls	r3, r3, #8
 8003734:	613b      	str	r3, [r7, #16]
		unsigned int lsb_packet_identifier = (unsigned int) bytes_at(bytes, index++);
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	1c5a      	adds	r2, r3, #1
 800373a:	60ba      	str	r2, [r7, #8]
 800373c:	4619      	mov	r1, r3
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f000 f8eb 	bl	800391a <bytes_at>
 8003744:	4603      	mov	r3, r0
 8003746:	60fb      	str	r3, [r7, #12]
		result->packet_identifier = msb_packet_identifier + lsb_packet_identifier;
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	b29a      	uxth	r2, r3
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	b29b      	uxth	r3, r3
 8003750:	4413      	add	r3, r2
 8003752:	b29a      	uxth	r2, r3
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	f8a3 200b 	strh.w	r2, [r3, #11]
	}

	result->payload = packet_util_build_string(bytes, &index);
 800375a:	f107 0308 	add.w	r3, r7, #8
 800375e:	4619      	mov	r1, r3
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	f001 fad1 	bl	8004d08 <packet_util_build_string>
 8003766:	4602      	mov	r2, r0
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	f8c3 200d 	str.w	r2, [r3, #13]

	return result;
 800376e:	697b      	ldr	r3, [r7, #20]
}
 8003770:	4618      	mov	r0, r3
 8003772:	3718      	adds	r7, #24
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}
 8003778:	200000d8 	.word	0x200000d8
 800377c:	200000d9 	.word	0x200000d9

08003780 <assembler_build_to_pub_rel>:
	unsigned int lsb_packet_identifier = (unsigned int) bytes_at(bytes, 3);
	result->packet_identifier = msb_packet_identifier + lsb_packet_identifier;
	return result;
}

pub_rel* assembler_build_to_pub_rel(bytes* bytes){
 8003780:	b580      	push	{r7, lr}
 8003782:	b086      	sub	sp, #24
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
	if( bytes == NULL ) return NULL;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d101      	bne.n	8003792 <assembler_build_to_pub_rel+0x12>
 800378e:	2300      	movs	r3, #0
 8003790:	e01d      	b.n	80037ce <assembler_build_to_pub_rel+0x4e>
	pub_rel* result = (pub_rel*) malloc(sizeof(pub_rel));
 8003792:	2008      	movs	r0, #8
 8003794:	f008 ffb4 	bl	800c700 <malloc>
 8003798:	4603      	mov	r3, r0
 800379a:	617b      	str	r3, [r7, #20]
	result->control_packet = assembler_build_to_control_packet(bytes);
 800379c:	6878      	ldr	r0, [r7, #4]
 800379e:	f7ff fe49 	bl	8003434 <assembler_build_to_control_packet>
 80037a2:	4602      	mov	r2, r0
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	601a      	str	r2, [r3, #0]
	unsigned int msb_packet_identifier = (unsigned int) ( bytes_at(bytes, 2) << 8);
 80037a8:	2102      	movs	r1, #2
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f000 f8b5 	bl	800391a <bytes_at>
 80037b0:	4603      	mov	r3, r0
 80037b2:	021b      	lsls	r3, r3, #8
 80037b4:	613b      	str	r3, [r7, #16]
	unsigned int lsb_packet_identifier = (unsigned int) bytes_at(bytes, 3);
 80037b6:	2103      	movs	r1, #3
 80037b8:	6878      	ldr	r0, [r7, #4]
 80037ba:	f000 f8ae 	bl	800391a <bytes_at>
 80037be:	4603      	mov	r3, r0
 80037c0:	60fb      	str	r3, [r7, #12]
	result->packet_identifier = msb_packet_identifier + lsb_packet_identifier;
 80037c2:	693a      	ldr	r2, [r7, #16]
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	441a      	add	r2, r3
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	605a      	str	r2, [r3, #4]
	return result;
 80037cc:	697b      	ldr	r3, [r7, #20]
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	3718      	adds	r7, #24
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}

080037d6 <node_init>:
#include <mqtt_client/bytes.h>

node* node_init(const unsigned char value, node* previous, node* next){
 80037d6:	b580      	push	{r7, lr}
 80037d8:	b086      	sub	sp, #24
 80037da:	af00      	add	r7, sp, #0
 80037dc:	4603      	mov	r3, r0
 80037de:	60b9      	str	r1, [r7, #8]
 80037e0:	607a      	str	r2, [r7, #4]
 80037e2:	73fb      	strb	r3, [r7, #15]
	node* result = (node*) malloc(sizeof(node));
 80037e4:	200c      	movs	r0, #12
 80037e6:	f008 ff8b 	bl	800c700 <malloc>
 80037ea:	4603      	mov	r3, r0
 80037ec:	617b      	str	r3, [r7, #20]
	result->value = value;
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	7bfa      	ldrb	r2, [r7, #15]
 80037f2:	701a      	strb	r2, [r3, #0]
	result->previous = previous;
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	68ba      	ldr	r2, [r7, #8]
 80037f8:	605a      	str	r2, [r3, #4]
	result->next = next;
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	687a      	ldr	r2, [r7, #4]
 80037fe:	609a      	str	r2, [r3, #8]
	return result;
 8003800:	697b      	ldr	r3, [r7, #20]
}
 8003802:	4618      	mov	r0, r3
 8003804:	3718      	adds	r7, #24
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}

0800380a <node_destroy>:

void node_destroy(node* node){
 800380a:	b580      	push	{r7, lr}
 800380c:	b082      	sub	sp, #8
 800380e:	af00      	add	r7, sp, #0
 8003810:	6078      	str	r0, [r7, #4]
	if( node == NULL ) return;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d00b      	beq.n	8003830 <node_destroy+0x26>
	node->previous = NULL;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2200      	movs	r2, #0
 800381c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2200      	movs	r2, #0
 8003822:	609a      	str	r2, [r3, #8]
	free(node);
 8003824:	6878      	ldr	r0, [r7, #4]
 8003826:	f008 ff73 	bl	800c710 <free>
	node = NULL;
 800382a:	2300      	movs	r3, #0
 800382c:	607b      	str	r3, [r7, #4]
 800382e:	e000      	b.n	8003832 <node_destroy+0x28>
	if( node == NULL ) return;
 8003830:	bf00      	nop
}
 8003832:	3708      	adds	r7, #8
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}

08003838 <bytes_init>:

bytes* bytes_init(){
 8003838:	b580      	push	{r7, lr}
 800383a:	b082      	sub	sp, #8
 800383c:	af00      	add	r7, sp, #0
	bytes* result = (bytes*) malloc(sizeof(bytes));
 800383e:	200c      	movs	r0, #12
 8003840:	f008 ff5e 	bl	800c700 <malloc>
 8003844:	4603      	mov	r3, r0
 8003846:	607b      	str	r3, [r7, #4]
	result->front = NULL;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2200      	movs	r2, #0
 800384c:	701a      	strb	r2, [r3, #0]
 800384e:	2200      	movs	r2, #0
 8003850:	705a      	strb	r2, [r3, #1]
 8003852:	2200      	movs	r2, #0
 8003854:	709a      	strb	r2, [r3, #2]
 8003856:	2200      	movs	r2, #0
 8003858:	70da      	strb	r2, [r3, #3]
	result->back = NULL;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2200      	movs	r2, #0
 800385e:	711a      	strb	r2, [r3, #4]
 8003860:	2200      	movs	r2, #0
 8003862:	715a      	strb	r2, [r3, #5]
 8003864:	2200      	movs	r2, #0
 8003866:	719a      	strb	r2, [r3, #6]
 8003868:	2200      	movs	r2, #0
 800386a:	71da      	strb	r2, [r3, #7]
	result->size = 0;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2200      	movs	r2, #0
 8003870:	721a      	strb	r2, [r3, #8]
 8003872:	2200      	movs	r2, #0
 8003874:	725a      	strb	r2, [r3, #9]
 8003876:	2200      	movs	r2, #0
 8003878:	729a      	strb	r2, [r3, #10]
 800387a:	2200      	movs	r2, #0
 800387c:	72da      	strb	r2, [r3, #11]
	return result;
 800387e:	687b      	ldr	r3, [r7, #4]
}
 8003880:	4618      	mov	r0, r3
 8003882:	3708      	adds	r7, #8
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}

08003888 <bytes_destroy>:

void bytes_destroy(bytes* bytes){
 8003888:	b580      	push	{r7, lr}
 800388a:	b084      	sub	sp, #16
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
	if( bytes == NULL ) return;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d028      	beq.n	80038e8 <bytes_destroy+0x60>

	node* next = NULL;
 8003896:	2300      	movs	r3, #0
 8003898:	60bb      	str	r3, [r7, #8]
	node* actual = bytes->front;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	60fb      	str	r3, [r7, #12]
	while( actual != NULL ){
 80038a0:	e007      	b.n	80038b2 <bytes_destroy+0x2a>
		next = actual->next;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	60bb      	str	r3, [r7, #8]
		node_destroy(actual);
 80038a8:	68f8      	ldr	r0, [r7, #12]
 80038aa:	f7ff ffae 	bl	800380a <node_destroy>
		actual = next;
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	60fb      	str	r3, [r7, #12]
	while( actual != NULL ){
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d1f4      	bne.n	80038a2 <bytes_destroy+0x1a>
	}
	bytes->front = NULL;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2200      	movs	r2, #0
 80038bc:	701a      	strb	r2, [r3, #0]
 80038be:	2200      	movs	r2, #0
 80038c0:	705a      	strb	r2, [r3, #1]
 80038c2:	2200      	movs	r2, #0
 80038c4:	709a      	strb	r2, [r3, #2]
 80038c6:	2200      	movs	r2, #0
 80038c8:	70da      	strb	r2, [r3, #3]
	bytes->back = NULL;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2200      	movs	r2, #0
 80038ce:	711a      	strb	r2, [r3, #4]
 80038d0:	2200      	movs	r2, #0
 80038d2:	715a      	strb	r2, [r3, #5]
 80038d4:	2200      	movs	r2, #0
 80038d6:	719a      	strb	r2, [r3, #6]
 80038d8:	2200      	movs	r2, #0
 80038da:	71da      	strb	r2, [r3, #7]
	free(bytes);
 80038dc:	6878      	ldr	r0, [r7, #4]
 80038de:	f008 ff17 	bl	800c710 <free>
	bytes = NULL;
 80038e2:	2300      	movs	r3, #0
 80038e4:	607b      	str	r3, [r7, #4]
 80038e6:	e000      	b.n	80038ea <bytes_destroy+0x62>
	if( bytes == NULL ) return;
 80038e8:	bf00      	nop
}
 80038ea:	3710      	adds	r7, #16
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}

080038f0 <bytes_is_empty>:

unsigned char bytes_is_empty(bytes* bytes){
 80038f0:	b480      	push	{r7}
 80038f2:	b083      	sub	sp, #12
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
	return bytes == NULL || bytes->size == 0 ? 1 : 0;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d003      	beq.n	8003906 <bytes_is_empty+0x16>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d101      	bne.n	800390a <bytes_is_empty+0x1a>
 8003906:	2301      	movs	r3, #1
 8003908:	e000      	b.n	800390c <bytes_is_empty+0x1c>
 800390a:	2300      	movs	r3, #0
 800390c:	b2db      	uxtb	r3, r3
}
 800390e:	4618      	mov	r0, r3
 8003910:	370c      	adds	r7, #12
 8003912:	46bd      	mov	sp, r7
 8003914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003918:	4770      	bx	lr

0800391a <bytes_at>:

unsigned char bytes_at(bytes* bytes, const unsigned int index){
 800391a:	b480      	push	{r7}
 800391c:	b085      	sub	sp, #20
 800391e:	af00      	add	r7, sp, #0
 8003920:	6078      	str	r0, [r7, #4]
 8003922:	6039      	str	r1, [r7, #0]
	if( bytes == NULL || index >= bytes->size )
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d004      	beq.n	8003934 <bytes_at+0x1a>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	683a      	ldr	r2, [r7, #0]
 8003930:	429a      	cmp	r2, r3
 8003932:	d301      	bcc.n	8003938 <bytes_at+0x1e>
		return (unsigned char) 0;
 8003934:	2300      	movs	r3, #0
 8003936:	e018      	b.n	800396a <bytes_at+0x50>

	int position = index;
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	60fb      	str	r3, [r7, #12]
	node* current = bytes->front;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	60bb      	str	r3, [r7, #8]
	while( position != 0 && current != NULL) {
 8003942:	e005      	b.n	8003950 <bytes_at+0x36>
		current = current->next;
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	60bb      	str	r3, [r7, #8]
		position--;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	3b01      	subs	r3, #1
 800394e:	60fb      	str	r3, [r7, #12]
	while( position != 0 && current != NULL) {
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d002      	beq.n	800395c <bytes_at+0x42>
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d1f3      	bne.n	8003944 <bytes_at+0x2a>
	}

	return current == NULL ? (unsigned char) 0 : current->value;
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d002      	beq.n	8003968 <bytes_at+0x4e>
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	781b      	ldrb	r3, [r3, #0]
 8003966:	e000      	b.n	800396a <bytes_at+0x50>
 8003968:	2300      	movs	r3, #0
}
 800396a:	4618      	mov	r0, r3
 800396c:	3714      	adds	r7, #20
 800396e:	46bd      	mov	sp, r7
 8003970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003974:	4770      	bx	lr

08003976 <bytes_push_back>:
	if( bytes_is_empty(bytes) )
		return (unsigned char) 0;
	return bytes->back->value;
}

void bytes_push_back(bytes* bytes, const unsigned char value){
 8003976:	b580      	push	{r7, lr}
 8003978:	b084      	sub	sp, #16
 800397a:	af00      	add	r7, sp, #0
 800397c:	6078      	str	r0, [r7, #4]
 800397e:	460b      	mov	r3, r1
 8003980:	70fb      	strb	r3, [r7, #3]
	node* node = node_init(value, bytes->back, NULL);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6859      	ldr	r1, [r3, #4]
 8003986:	78fb      	ldrb	r3, [r7, #3]
 8003988:	2200      	movs	r2, #0
 800398a:	4618      	mov	r0, r3
 800398c:	f7ff ff23 	bl	80037d6 <node_init>
 8003990:	60f8      	str	r0, [r7, #12]
	if( bytes->front == NULL ){
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d107      	bne.n	80039aa <bytes_push_back+0x34>
		bytes->front = bytes->back = node;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	68fa      	ldr	r2, [r7, #12]
 800399e:	605a      	str	r2, [r3, #4]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	685a      	ldr	r2, [r3, #4]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	601a      	str	r2, [r3, #0]
 80039a8:	e006      	b.n	80039b8 <bytes_push_back+0x42>
	} else {
		bytes->back->next = node;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	68fa      	ldr	r2, [r7, #12]
 80039b0:	609a      	str	r2, [r3, #8]
		bytes->back = node;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	68fa      	ldr	r2, [r7, #12]
 80039b6:	605a      	str	r2, [r3, #4]
	}
	bytes->size++;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	1c5a      	adds	r2, r3, #1
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	609a      	str	r2, [r3, #8]
}
 80039c2:	bf00      	nop
 80039c4:	3710      	adds	r7, #16
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}

080039ca <bytes_get_size>:
	}

	bytes->size--;
}

unsigned int bytes_get_size(bytes* bytes){
 80039ca:	b580      	push	{r7, lr}
 80039cc:	b082      	sub	sp, #8
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	6078      	str	r0, [r7, #4]
	return bytes_is_empty(bytes) ? 0 : bytes->size;
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f7ff ff8c 	bl	80038f0 <bytes_is_empty>
 80039d8:	4603      	mov	r3, r0
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d102      	bne.n	80039e4 <bytes_get_size+0x1a>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	e000      	b.n	80039e6 <bytes_get_size+0x1c>
 80039e4:	2300      	movs	r3, #0
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3708      	adds	r7, #8
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}

080039ee <bytes_concat>:

void bytes_concat(bytes* destiny, bytes* source){
 80039ee:	b590      	push	{r4, r7, lr}
 80039f0:	b083      	sub	sp, #12
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	6078      	str	r0, [r7, #4]
 80039f6:	6039      	str	r1, [r7, #0]
	if ( bytes_is_empty(source) ) return;
 80039f8:	6838      	ldr	r0, [r7, #0]
 80039fa:	f7ff ff79 	bl	80038f0 <bytes_is_empty>
 80039fe:	4603      	mov	r3, r0
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d112      	bne.n	8003a2a <bytes_concat+0x3c>
	for(register unsigned int i = 0; i < bytes_get_size(source); i++){
 8003a04:	2400      	movs	r4, #0
 8003a06:	e009      	b.n	8003a1c <bytes_concat+0x2e>
		bytes_push_back(destiny, bytes_at(source, i));
 8003a08:	4621      	mov	r1, r4
 8003a0a:	6838      	ldr	r0, [r7, #0]
 8003a0c:	f7ff ff85 	bl	800391a <bytes_at>
 8003a10:	4603      	mov	r3, r0
 8003a12:	4619      	mov	r1, r3
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	f7ff ffae 	bl	8003976 <bytes_push_back>
	for(register unsigned int i = 0; i < bytes_get_size(source); i++){
 8003a1a:	3401      	adds	r4, #1
 8003a1c:	6838      	ldr	r0, [r7, #0]
 8003a1e:	f7ff ffd4 	bl	80039ca <bytes_get_size>
 8003a22:	4603      	mov	r3, r0
 8003a24:	429c      	cmp	r4, r3
 8003a26:	d3ef      	bcc.n	8003a08 <bytes_concat+0x1a>
 8003a28:	e000      	b.n	8003a2c <bytes_concat+0x3e>
	if ( bytes_is_empty(source) ) return;
 8003a2a:	bf00      	nop
	}
}
 8003a2c:	370c      	adds	r7, #12
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd90      	pop	{r4, r7, pc}

08003a32 <bytes_to_array>:

unsigned char* bytes_to_array(bytes* bytes){
 8003a32:	b5b0      	push	{r4, r5, r7, lr}
 8003a34:	b084      	sub	sp, #16
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	6078      	str	r0, [r7, #4]
	if ( bytes_is_empty(bytes) ) return NULL;
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	f7ff ff58 	bl	80038f0 <bytes_is_empty>
 8003a40:	4603      	mov	r3, r0
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d001      	beq.n	8003a4a <bytes_to_array+0x18>
 8003a46:	2300      	movs	r3, #0
 8003a48:	e017      	b.n	8003a7a <bytes_to_array+0x48>

	unsigned int size = bytes_get_size(bytes);
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f7ff ffbd 	bl	80039ca <bytes_get_size>
 8003a50:	60f8      	str	r0, [r7, #12]
	unsigned char* result = (unsigned char*) malloc(size*sizeof(unsigned char));
 8003a52:	68f8      	ldr	r0, [r7, #12]
 8003a54:	f008 fe54 	bl	800c700 <malloc>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	60bb      	str	r3, [r7, #8]
	for(register unsigned int i = 0; i < size; i++) result[i] = bytes_at(bytes, i);
 8003a5c:	2400      	movs	r4, #0
 8003a5e:	e008      	b.n	8003a72 <bytes_to_array+0x40>
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	191d      	adds	r5, r3, r4
 8003a64:	4621      	mov	r1, r4
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f7ff ff57 	bl	800391a <bytes_at>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	702b      	strb	r3, [r5, #0]
 8003a70:	3401      	adds	r4, #1
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	429c      	cmp	r4, r3
 8003a76:	d3f3      	bcc.n	8003a60 <bytes_to_array+0x2e>
	return result;
 8003a78:	68bb      	ldr	r3, [r7, #8]
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	3710      	adds	r7, #16
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bdb0      	pop	{r4, r5, r7, pc}

08003a82 <connack_init>:

const unsigned char CONNACK_RETURN_CODE_CONNECTION_REFUSED_BAD_USERNAME_OR_PASSWORD      = 0x04;

const unsigned char CONNACK_RETURN_CODE_CONNECTION_REFUSED_NOT_AUTHORIZED                = 0x05;

connack* connack_init(const bool clean_session, const unsigned char return_code){
 8003a82:	b580      	push	{r7, lr}
 8003a84:	b084      	sub	sp, #16
 8003a86:	af00      	add	r7, sp, #0
 8003a88:	4603      	mov	r3, r0
 8003a8a:	460a      	mov	r2, r1
 8003a8c:	71fb      	strb	r3, [r7, #7]
 8003a8e:	4613      	mov	r3, r2
 8003a90:	71bb      	strb	r3, [r7, #6]
	connack* result = (connack*) malloc(sizeof(connack));
 8003a92:	2006      	movs	r0, #6
 8003a94:	f008 fe34 	bl	800c700 <malloc>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	60fb      	str	r3, [r7, #12]
	result->clean_session      	= clean_session;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	79fa      	ldrb	r2, [r7, #7]
 8003aa0:	711a      	strb	r2, [r3, #4]
	result->return_code        	= return_code;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	79ba      	ldrb	r2, [r7, #6]
 8003aa6:	715a      	strb	r2, [r3, #5]
	return result;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	3710      	adds	r7, #16
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}

08003ab2 <connack_destroy>:

void connack_destroy(connack* connack){
 8003ab2:	b580      	push	{r7, lr}
 8003ab4:	b082      	sub	sp, #8
 8003ab6:	af00      	add	r7, sp, #0
 8003ab8:	6078      	str	r0, [r7, #4]
	if( connack == NULL ) return;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d00e      	beq.n	8003ade <connack_destroy+0x2c>

	connack->control_packet = NULL;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	701a      	strb	r2, [r3, #0]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	705a      	strb	r2, [r3, #1]
 8003aca:	2200      	movs	r2, #0
 8003acc:	709a      	strb	r2, [r3, #2]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	70da      	strb	r2, [r3, #3]
	free(connack);
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	f008 fe1c 	bl	800c710 <free>
	connack = NULL;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	607b      	str	r3, [r7, #4]
 8003adc:	e000      	b.n	8003ae0 <connack_destroy+0x2e>
	if( connack == NULL ) return;
 8003ade:	bf00      	nop
}
 8003ae0:	3708      	adds	r7, #8
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}

08003ae6 <connack_is_connection_accepted>:
void connack_set_return_code(connack* connack, const unsigned char return_code){
	if( connack == NULL ) return;
	connack->return_code = return_code;
}

bool connack_is_connection_accepted(connack* connack){
 8003ae6:	b480      	push	{r7}
 8003ae8:	b083      	sub	sp, #12
 8003aea:	af00      	add	r7, sp, #0
 8003aec:	6078      	str	r0, [r7, #4]
	return connack == NULL ? false : connack->return_code == CONNACK_RETURN_CODE_CONNECTION_ACCEPTED;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d006      	beq.n	8003b02 <connack_is_connection_accepted+0x1c>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	795b      	ldrb	r3, [r3, #5]
 8003af8:	2200      	movs	r2, #0
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d101      	bne.n	8003b02 <connack_is_connection_accepted+0x1c>
 8003afe:	2301      	movs	r3, #1
 8003b00:	e000      	b.n	8003b04 <connack_is_connection_accepted+0x1e>
 8003b02:	2300      	movs	r3, #0
 8003b04:	f003 0301 	and.w	r3, r3, #1
 8003b08:	b2db      	uxtb	r3, r3
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	370c      	adds	r7, #12
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b14:	4770      	bx	lr

08003b16 <connack_service_init>:
#include "../../Inc/mqtt_client/connack_service.h"

connack_service* connack_service_init(control_packet_proxy* control_packet_proxy){
 8003b16:	b580      	push	{r7, lr}
 8003b18:	b084      	sub	sp, #16
 8003b1a:	af00      	add	r7, sp, #0
 8003b1c:	6078      	str	r0, [r7, #4]
	if(control_packet_proxy == NULL) return NULL;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d101      	bne.n	8003b28 <connack_service_init+0x12>
 8003b24:	2300      	movs	r3, #0
 8003b26:	e008      	b.n	8003b3a <connack_service_init+0x24>
	connack_service* result = (connack_service*) malloc(sizeof(connack_service));
 8003b28:	2004      	movs	r0, #4
 8003b2a:	f008 fde9 	bl	800c700 <malloc>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	60fb      	str	r3, [r7, #12]
	result->control_packet_proxy = control_packet_proxy;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	687a      	ldr	r2, [r7, #4]
 8003b36:	601a      	str	r2, [r3, #0]
	return result;
 8003b38:	68fb      	ldr	r3, [r7, #12]
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3710      	adds	r7, #16
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}

08003b42 <connack_service_destroy>:

void connack_service_destroy(connack_service* connack_service){
 8003b42:	b580      	push	{r7, lr}
 8003b44:	b082      	sub	sp, #8
 8003b46:	af00      	add	r7, sp, #0
 8003b48:	6078      	str	r0, [r7, #4]
	if( connack_service == NULL ) return;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d00e      	beq.n	8003b6e <connack_service_destroy+0x2c>
	connack_service->control_packet_proxy = NULL;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2200      	movs	r2, #0
 8003b54:	701a      	strb	r2, [r3, #0]
 8003b56:	2200      	movs	r2, #0
 8003b58:	705a      	strb	r2, [r3, #1]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	709a      	strb	r2, [r3, #2]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	70da      	strb	r2, [r3, #3]
	free(connack_service);
 8003b62:	6878      	ldr	r0, [r7, #4]
 8003b64:	f008 fdd4 	bl	800c710 <free>
	connack_service = NULL;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	607b      	str	r3, [r7, #4]
 8003b6c:	e000      	b.n	8003b70 <connack_service_destroy+0x2e>
	if( connack_service == NULL ) return;
 8003b6e:	bf00      	nop
}
 8003b70:	3708      	adds	r7, #8
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}
	...

08003b78 <connack_service_create>:

connack* connack_service_create(connack_service* connack_service){
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b086      	sub	sp, #24
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
	if( connack_service == NULL ) return NULL;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d101      	bne.n	8003b8a <connack_service_create+0x12>
 8003b86:	2300      	movs	r3, #0
 8003b88:	e010      	b.n	8003bac <connack_service_create+0x34>
	session* session = session_get_instance();
 8003b8a:	f001 ff05 	bl	8005998 <session_get_instance>
 8003b8e:	6178      	str	r0, [r7, #20]
	bool clean_session = session_is_clean(session);
 8003b90:	6978      	ldr	r0, [r7, #20]
 8003b92:	f001 ffe0 	bl	8005b56 <session_is_clean>
 8003b96:	4603      	mov	r3, r0
 8003b98:	74fb      	strb	r3, [r7, #19]
	connack* result = connack_init(clean_session, CONNACK_RETURN_CODE_CONNECTION_ACCEPTED);
 8003b9a:	4b06      	ldr	r3, [pc, #24]	; (8003bb4 <connack_service_create+0x3c>)
 8003b9c:	781a      	ldrb	r2, [r3, #0]
 8003b9e:	7cfb      	ldrb	r3, [r7, #19]
 8003ba0:	4611      	mov	r1, r2
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f7ff ff6d 	bl	8003a82 <connack_init>
 8003ba8:	60f8      	str	r0, [r7, #12]
	return result;
 8003baa:	68fb      	ldr	r3, [r7, #12]
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3718      	adds	r7, #24
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}
 8003bb4:	0801175c 	.word	0x0801175c

08003bb8 <connect_init>:
const unsigned char CONNECT_QOS_LEVEL_1 = 0x01;

const unsigned char CONNECT_QOS_LEVEL_2 = 0x02;


connect* connect_init(const bool username, const bool password, const bool will_retain, const unsigned char will_QoS, const bool will_flag, const bool clean_session, const unsigned int keep_alive){
 8003bb8:	b590      	push	{r4, r7, lr}
 8003bba:	b085      	sub	sp, #20
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	4604      	mov	r4, r0
 8003bc0:	4608      	mov	r0, r1
 8003bc2:	4611      	mov	r1, r2
 8003bc4:	461a      	mov	r2, r3
 8003bc6:	4623      	mov	r3, r4
 8003bc8:	71fb      	strb	r3, [r7, #7]
 8003bca:	4603      	mov	r3, r0
 8003bcc:	71bb      	strb	r3, [r7, #6]
 8003bce:	460b      	mov	r3, r1
 8003bd0:	717b      	strb	r3, [r7, #5]
 8003bd2:	4613      	mov	r3, r2
 8003bd4:	713b      	strb	r3, [r7, #4]
	connect* result = (connect*) malloc(sizeof(connect));
 8003bd6:	201e      	movs	r0, #30
 8003bd8:	f008 fd92 	bl	800c700 <malloc>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	60bb      	str	r3, [r7, #8]
	result->control_packet = control_packet_init(CONTROL_PACKET_TYPE_CONNECT, CONTROL_PACKET_FLAG_CONNECT, 0x00);
 8003be0:	4b5f      	ldr	r3, [pc, #380]	; (8003d60 <connect_init+0x1a8>)
 8003be2:	7818      	ldrb	r0, [r3, #0]
 8003be4:	4b5f      	ldr	r3, [pc, #380]	; (8003d64 <connect_init+0x1ac>)
 8003be6:	781b      	ldrb	r3, [r3, #0]
 8003be8:	2200      	movs	r2, #0
 8003bea:	4619      	mov	r1, r3
 8003bec:	f000 fb94 	bl	8004318 <control_packet_init>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	601a      	str	r2, [r3, #0]

	result->variable_header = bytes_init();
 8003bf6:	f7ff fe1f 	bl	8003838 <bytes_init>
 8003bfa:	4602      	mov	r2, r0
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	605a      	str	r2, [r3, #4]
	bytes_push_back( result->variable_header, (unsigned char) 0 );
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	2100      	movs	r1, #0
 8003c06:	4618      	mov	r0, r3
 8003c08:	f7ff feb5 	bl	8003976 <bytes_push_back>
	bytes_push_back( result->variable_header, (unsigned char) 4 );
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	2104      	movs	r1, #4
 8003c12:	4618      	mov	r0, r3
 8003c14:	f7ff feaf 	bl	8003976 <bytes_push_back>
	bytes_push_back( result->variable_header, (unsigned char) 'M' );
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	214d      	movs	r1, #77	; 0x4d
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f7ff fea9 	bl	8003976 <bytes_push_back>
	bytes_push_back( result->variable_header, (unsigned char) 'Q' );
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	2151      	movs	r1, #81	; 0x51
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f7ff fea3 	bl	8003976 <bytes_push_back>
	bytes_push_back( result->variable_header, (unsigned char) 'T' );
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	2154      	movs	r1, #84	; 0x54
 8003c36:	4618      	mov	r0, r3
 8003c38:	f7ff fe9d 	bl	8003976 <bytes_push_back>
	bytes_push_back( result->variable_header, (unsigned char) 'T' );
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	2154      	movs	r1, #84	; 0x54
 8003c42:	4618      	mov	r0, r3
 8003c44:	f7ff fe97 	bl	8003976 <bytes_push_back>
	bytes_push_back( result->variable_header, (unsigned char) 4 );
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	2104      	movs	r1, #4
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f7ff fe91 	bl	8003976 <bytes_push_back>

	// Connect Flag bits
	unsigned char flags = (unsigned char) 0;
 8003c54:	2300      	movs	r3, #0
 8003c56:	73fb      	strb	r3, [r7, #15]
	flags = flags | ( (username ? 0x01 : 0x00) << 7 ); // User Name Flag
 8003c58:	79fb      	ldrb	r3, [r7, #7]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d002      	beq.n	8003c64 <connect_init+0xac>
 8003c5e:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 8003c62:	e000      	b.n	8003c66 <connect_init+0xae>
 8003c64:	2200      	movs	r2, #0
 8003c66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	b25b      	sxtb	r3, r3
 8003c6e:	73fb      	strb	r3, [r7, #15]
	flags = flags | ( (password ? 0x01 : 0x00) << 6 ); // Password Flag
 8003c70:	79bb      	ldrb	r3, [r7, #6]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d001      	beq.n	8003c7a <connect_init+0xc2>
 8003c76:	2240      	movs	r2, #64	; 0x40
 8003c78:	e000      	b.n	8003c7c <connect_init+0xc4>
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c80:	4313      	orrs	r3, r2
 8003c82:	b25b      	sxtb	r3, r3
 8003c84:	73fb      	strb	r3, [r7, #15]
	flags = flags | ( (will_retain ? 0x01 : 0x00) << 5 ); // Will Retain
 8003c86:	797b      	ldrb	r3, [r7, #5]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d001      	beq.n	8003c90 <connect_init+0xd8>
 8003c8c:	2220      	movs	r2, #32
 8003c8e:	e000      	b.n	8003c92 <connect_init+0xda>
 8003c90:	2200      	movs	r2, #0
 8003c92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c96:	4313      	orrs	r3, r2
 8003c98:	b25b      	sxtb	r3, r3
 8003c9a:	73fb      	strb	r3, [r7, #15]
	flags = flags | ( (will_QoS & 0x03) << 3 ); // Will QoS
 8003c9c:	793b      	ldrb	r3, [r7, #4]
 8003c9e:	00db      	lsls	r3, r3, #3
 8003ca0:	b25b      	sxtb	r3, r3
 8003ca2:	f003 0318 	and.w	r3, r3, #24
 8003ca6:	b25a      	sxtb	r2, r3
 8003ca8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003cac:	4313      	orrs	r3, r2
 8003cae:	b25b      	sxtb	r3, r3
 8003cb0:	73fb      	strb	r3, [r7, #15]
	flags = flags | ( (will_flag ? 0x01 : 0x00) << 2 ); // Will Flag
 8003cb2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d001      	beq.n	8003cbe <connect_init+0x106>
 8003cba:	2204      	movs	r2, #4
 8003cbc:	e000      	b.n	8003cc0 <connect_init+0x108>
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	b25b      	sxtb	r3, r3
 8003cc8:	73fb      	strb	r3, [r7, #15]
	flags = flags | ( (clean_session ? 0x01 : 0x00) << 1 ); // Clean Session
 8003cca:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d001      	beq.n	8003cd6 <connect_init+0x11e>
 8003cd2:	2202      	movs	r2, #2
 8003cd4:	e000      	b.n	8003cd8 <connect_init+0x120>
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	b25b      	sxtb	r3, r3
 8003ce0:	73fb      	strb	r3, [r7, #15]

	// Condition of will_flag
	if ( ! will_flag ){
 8003ce2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003ce6:	f083 0301 	eor.w	r3, r3, #1
 8003cea:	b2db      	uxtb	r3, r3
 8003cec:	2b00      	cmp	r3, #0
		flags = flags | ( 0x00 << 5 ); // Will Retain
	    flags = flags | ( 0x00 << 3 ); // Will QoS
	}

	if ( ! username ){
 8003cee:	79fb      	ldrb	r3, [r7, #7]
 8003cf0:	f083 0301 	eor.w	r3, r3, #1
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	2b00      	cmp	r3, #0
		flags = flags | ( 0x00 << 6 ); // Password Flag
	}

	bytes_push_back( result->variable_header, flags);
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	7bfa      	ldrb	r2, [r7, #15]
 8003cfe:	4611      	mov	r1, r2
 8003d00:	4618      	mov	r0, r3
 8003d02:	f7ff fe38 	bl	8003976 <bytes_push_back>
	result->keep_alive = keep_alive;
 8003d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d08:	b29a      	uxth	r2, r3
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	811a      	strh	r2, [r3, #8]

	result->will_topic = NULL;
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	2200      	movs	r2, #0
 8003d12:	739a      	strb	r2, [r3, #14]
 8003d14:	2200      	movs	r2, #0
 8003d16:	73da      	strb	r2, [r3, #15]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	741a      	strb	r2, [r3, #16]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	745a      	strb	r2, [r3, #17]
	result->will_message = NULL;
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	2200      	movs	r2, #0
 8003d24:	749a      	strb	r2, [r3, #18]
 8003d26:	2200      	movs	r2, #0
 8003d28:	74da      	strb	r2, [r3, #19]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	751a      	strb	r2, [r3, #20]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	755a      	strb	r2, [r3, #21]
	result->username = NULL;
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	2200      	movs	r2, #0
 8003d36:	759a      	strb	r2, [r3, #22]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	75da      	strb	r2, [r3, #23]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	761a      	strb	r2, [r3, #24]
 8003d40:	2200      	movs	r2, #0
 8003d42:	765a      	strb	r2, [r3, #25]
	result->password = NULL;
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	2200      	movs	r2, #0
 8003d48:	769a      	strb	r2, [r3, #26]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	76da      	strb	r2, [r3, #27]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	771a      	strb	r2, [r3, #28]
 8003d52:	2200      	movs	r2, #0
 8003d54:	775a      	strb	r2, [r3, #29]

	return result;
 8003d56:	68bb      	ldr	r3, [r7, #8]
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	3714      	adds	r7, #20
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd90      	pop	{r4, r7, pc}
 8003d60:	08011760 	.word	0x08011760
 8003d64:	08011768 	.word	0x08011768

08003d68 <connect_destroy>:

void connect_destroy(connect* connect){
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b082      	sub	sp, #8
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
	if(connect == NULL) return;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d049      	beq.n	8003e0a <connect_destroy+0xa2>

	connect->control_packet = NULL;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	701a      	strb	r2, [r3, #0]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	705a      	strb	r2, [r3, #1]
 8003d80:	2200      	movs	r2, #0
 8003d82:	709a      	strb	r2, [r3, #2]
 8003d84:	2200      	movs	r2, #0
 8003d86:	70da      	strb	r2, [r3, #3]

	bytes_destroy(connect->variable_header);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f7ff fd7b 	bl	8003888 <bytes_destroy>

	connect->variable_header = NULL;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2200      	movs	r2, #0
 8003d96:	711a      	strb	r2, [r3, #4]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	715a      	strb	r2, [r3, #5]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	719a      	strb	r2, [r3, #6]
 8003da0:	2200      	movs	r2, #0
 8003da2:	71da      	strb	r2, [r3, #7]
	connect->client_identifier = NULL;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2200      	movs	r2, #0
 8003da8:	729a      	strb	r2, [r3, #10]
 8003daa:	2200      	movs	r2, #0
 8003dac:	72da      	strb	r2, [r3, #11]
 8003dae:	2200      	movs	r2, #0
 8003db0:	731a      	strb	r2, [r3, #12]
 8003db2:	2200      	movs	r2, #0
 8003db4:	735a      	strb	r2, [r3, #13]
	connect->will_topic = NULL;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2200      	movs	r2, #0
 8003dba:	739a      	strb	r2, [r3, #14]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	73da      	strb	r2, [r3, #15]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	741a      	strb	r2, [r3, #16]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	745a      	strb	r2, [r3, #17]
	connect->will_message = NULL;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	749a      	strb	r2, [r3, #18]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	74da      	strb	r2, [r3, #19]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	751a      	strb	r2, [r3, #20]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	755a      	strb	r2, [r3, #21]
	connect->username = NULL;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	759a      	strb	r2, [r3, #22]
 8003de0:	2200      	movs	r2, #0
 8003de2:	75da      	strb	r2, [r3, #23]
 8003de4:	2200      	movs	r2, #0
 8003de6:	761a      	strb	r2, [r3, #24]
 8003de8:	2200      	movs	r2, #0
 8003dea:	765a      	strb	r2, [r3, #25]
	connect->password = NULL;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2200      	movs	r2, #0
 8003df0:	769a      	strb	r2, [r3, #26]
 8003df2:	2200      	movs	r2, #0
 8003df4:	76da      	strb	r2, [r3, #27]
 8003df6:	2200      	movs	r2, #0
 8003df8:	771a      	strb	r2, [r3, #28]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	775a      	strb	r2, [r3, #29]

	free(connect);
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f008 fc86 	bl	800c710 <free>
	connect = NULL;
 8003e04:	2300      	movs	r3, #0
 8003e06:	607b      	str	r3, [r7, #4]
 8003e08:	e000      	b.n	8003e0c <connect_destroy+0xa4>
	if(connect == NULL) return;
 8003e0a:	bf00      	nop
}
 8003e0c:	3708      	adds	r7, #8
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}

08003e12 <connect_get_client_identifier>:
void connect_set_keep_alive(connect* connect, const unsigned int keep_alive){
	if( connect == NULL) return;
	connect->keep_alive = keep_alive;
}

char* connect_get_client_identifier(connect* connect){
 8003e12:	b480      	push	{r7}
 8003e14:	b083      	sub	sp, #12
 8003e16:	af00      	add	r7, sp, #0
 8003e18:	6078      	str	r0, [r7, #4]
	return connect == NULL ? NULL : connect->client_identifier;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d003      	beq.n	8003e28 <connect_get_client_identifier+0x16>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	f8d3 300a 	ldr.w	r3, [r3, #10]
 8003e26:	e000      	b.n	8003e2a <connect_get_client_identifier+0x18>
 8003e28:	2300      	movs	r3, #0
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	370c      	adds	r7, #12
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e34:	4770      	bx	lr

08003e36 <connect_set_client_identifier>:

void connect_set_client_identifier(connect* connect, char* client_identifier){
 8003e36:	b480      	push	{r7}
 8003e38:	b083      	sub	sp, #12
 8003e3a:	af00      	add	r7, sp, #0
 8003e3c:	6078      	str	r0, [r7, #4]
 8003e3e:	6039      	str	r1, [r7, #0]
	if( connect == NULL) return;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d004      	beq.n	8003e50 <connect_set_client_identifier+0x1a>
	connect->client_identifier = client_identifier;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	683a      	ldr	r2, [r7, #0]
 8003e4a:	f8c3 200a 	str.w	r2, [r3, #10]
 8003e4e:	e000      	b.n	8003e52 <connect_set_client_identifier+0x1c>
	if( connect == NULL) return;
 8003e50:	bf00      	nop
}
 8003e52:	370c      	adds	r7, #12
 8003e54:	46bd      	mov	sp, r7
 8003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5a:	4770      	bx	lr

08003e5c <connect_set_username>:

char* connect_get_username(connect* connect){
	return connect == NULL ? NULL : connect->username;
}

void connect_set_username(connect* connect, char* username){
 8003e5c:	b480      	push	{r7}
 8003e5e:	b083      	sub	sp, #12
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
 8003e64:	6039      	str	r1, [r7, #0]
	if( connect == NULL) return;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d004      	beq.n	8003e76 <connect_set_username+0x1a>
	connect->username = username;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	683a      	ldr	r2, [r7, #0]
 8003e70:	f8c3 2016 	str.w	r2, [r3, #22]
 8003e74:	e000      	b.n	8003e78 <connect_set_username+0x1c>
	if( connect == NULL) return;
 8003e76:	bf00      	nop
}
 8003e78:	370c      	adds	r7, #12
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e80:	4770      	bx	lr

08003e82 <connect_set_password>:

char* connect_get_password(connect* connect){
	return connect == NULL ? NULL : connect->password;
}

void connect_set_password(connect* connect, char* password){
 8003e82:	b480      	push	{r7}
 8003e84:	b083      	sub	sp, #12
 8003e86:	af00      	add	r7, sp, #0
 8003e88:	6078      	str	r0, [r7, #4]
 8003e8a:	6039      	str	r1, [r7, #0]
	if( connect == NULL) return;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d004      	beq.n	8003e9c <connect_set_password+0x1a>
	connect->password = password;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	683a      	ldr	r2, [r7, #0]
 8003e96:	f8c3 201a 	str.w	r2, [r3, #26]
 8003e9a:	e000      	b.n	8003e9e <connect_set_password+0x1c>
	if( connect == NULL) return;
 8003e9c:	bf00      	nop
}
 8003e9e:	370c      	adds	r7, #12
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea6:	4770      	bx	lr

08003ea8 <connect_to_bytes>:

bytes* connect_to_bytes(connect* connect){
 8003ea8:	b590      	push	{r4, r7, lr}
 8003eaa:	b08f      	sub	sp, #60	; 0x3c
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
	if( connect == NULL) return NULL;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d101      	bne.n	8003eba <connect_to_bytes+0x12>
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	e0f5      	b.n	80040a6 <connect_to_bytes+0x1fe>

	bytes* payload = bytes_init();
 8003eba:	f7ff fcbd 	bl	8003838 <bytes_init>
 8003ebe:	6378      	str	r0, [r7, #52]	; 0x34

	char* client_identifier = connect_get_client_identifier(connect);
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	f7ff ffa6 	bl	8003e12 <connect_get_client_identifier>
 8003ec6:	6338      	str	r0, [r7, #48]	; 0x30
	if ( ! string_util_is_empty(client_identifier) ){
 8003ec8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003eca:	f004 f93b 	bl	8008144 <string_util_is_empty>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	f083 0301 	eor.w	r3, r3, #1
 8003ed4:	b2db      	uxtb	r3, r3
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d025      	beq.n	8003f26 <connect_to_bytes+0x7e>
		if ( string_util_length(client_identifier) >= 24 ){ // Deve ter no maximo 23 caracteres
 8003eda:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003edc:	f004 f9a9 	bl	8008232 <string_util_length>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	2b17      	cmp	r3, #23
 8003ee4:	d914      	bls.n	8003f10 <connect_to_bytes+0x68>
			char* client_identifier_sub_string = string_util_build_empty_string(23+1);
 8003ee6:	2018      	movs	r0, #24
 8003ee8:	f004 f9af 	bl	800824a <string_util_build_empty_string>
 8003eec:	62b8      	str	r0, [r7, #40]	; 0x28
			string_util_copy(client_identifier_sub_string, client_identifier, 23);
 8003eee:	2217      	movs	r2, #23
 8003ef0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003ef2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ef4:	f004 f9c3 	bl	800827e <string_util_copy>
			bytes* client_identifier_bytes = packet_util_build_bytes(client_identifier_sub_string);
 8003ef8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003efa:	f000 fed7 	bl	8004cac <packet_util_build_bytes>
 8003efe:	6278      	str	r0, [r7, #36]	; 0x24
			bytes_concat(payload, client_identifier_bytes);
 8003f00:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003f02:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003f04:	f7ff fd73 	bl	80039ee <bytes_concat>
			bytes_destroy(client_identifier_bytes);
 8003f08:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003f0a:	f7ff fcbd 	bl	8003888 <bytes_destroy>
 8003f0e:	e00a      	b.n	8003f26 <connect_to_bytes+0x7e>
		} else {
			bytes* client_identifier_bytes = packet_util_build_bytes(client_identifier);
 8003f10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003f12:	f000 fecb 	bl	8004cac <packet_util_build_bytes>
 8003f16:	62f8      	str	r0, [r7, #44]	; 0x2c
			bytes_concat(payload, client_identifier_bytes);
 8003f18:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003f1a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003f1c:	f7ff fd67 	bl	80039ee <bytes_concat>
			bytes_destroy(client_identifier_bytes);
 8003f20:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003f22:	f7ff fcb1 	bl	8003888 <bytes_destroy>
		}
	}


	unsigned char flags = bytes_at(connect->variable_header, 7);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	2107      	movs	r1, #7
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f7ff fcf4 	bl	800391a <bytes_at>
 8003f32:	4603      	mov	r3, r0
 8003f34:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	if ( ( flags & ( 0x01 << 2 ) ) && ! string_util_is_empty(connect->will_topic) ){
 8003f38:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003f3c:	f003 0304 	and.w	r3, r3, #4
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d019      	beq.n	8003f78 <connect_to_bytes+0xd0>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	f8d3 300e 	ldr.w	r3, [r3, #14]
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f004 f8fa 	bl	8008144 <string_util_is_empty>
 8003f50:	4603      	mov	r3, r0
 8003f52:	f083 0301 	eor.w	r3, r3, #1
 8003f56:	b2db      	uxtb	r3, r3
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d00d      	beq.n	8003f78 <connect_to_bytes+0xd0>
		bytes* will_topic_bytes = packet_util_build_bytes(connect->will_topic);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	f8d3 300e 	ldr.w	r3, [r3, #14]
 8003f62:	4618      	mov	r0, r3
 8003f64:	f000 fea2 	bl	8004cac <packet_util_build_bytes>
 8003f68:	61f8      	str	r0, [r7, #28]
		bytes_concat(payload, will_topic_bytes);
 8003f6a:	69f9      	ldr	r1, [r7, #28]
 8003f6c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003f6e:	f7ff fd3e 	bl	80039ee <bytes_concat>
		bytes_destroy(will_topic_bytes);
 8003f72:	69f8      	ldr	r0, [r7, #28]
 8003f74:	f7ff fc88 	bl	8003888 <bytes_destroy>
	}

	if ( ( flags & ( 0x01 << 2 ) ) && ! string_util_is_empty(connect->will_message) ){
 8003f78:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003f7c:	f003 0304 	and.w	r3, r3, #4
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d019      	beq.n	8003fb8 <connect_to_bytes+0x110>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	f8d3 3012 	ldr.w	r3, [r3, #18]
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f004 f8da 	bl	8008144 <string_util_is_empty>
 8003f90:	4603      	mov	r3, r0
 8003f92:	f083 0301 	eor.w	r3, r3, #1
 8003f96:	b2db      	uxtb	r3, r3
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d00d      	beq.n	8003fb8 <connect_to_bytes+0x110>
		bytes* will_message_bytes = packet_util_build_bytes(connect->will_message);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	f8d3 3012 	ldr.w	r3, [r3, #18]
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f000 fe82 	bl	8004cac <packet_util_build_bytes>
 8003fa8:	61b8      	str	r0, [r7, #24]
		bytes_concat(payload, will_message_bytes);
 8003faa:	69b9      	ldr	r1, [r7, #24]
 8003fac:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003fae:	f7ff fd1e 	bl	80039ee <bytes_concat>
		bytes_destroy(will_message_bytes);
 8003fb2:	69b8      	ldr	r0, [r7, #24]
 8003fb4:	f7ff fc68 	bl	8003888 <bytes_destroy>
	}

	if ( ( flags & ( 0x01 << 7 ) ) && ! string_util_is_empty(connect->username) ){
 8003fb8:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	da39      	bge.n	8004034 <connect_to_bytes+0x18c>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	f8d3 3016 	ldr.w	r3, [r3, #22]
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f004 f8bc 	bl	8008144 <string_util_is_empty>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	f083 0301 	eor.w	r3, r3, #1
 8003fd2:	b2db      	uxtb	r3, r3
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d02d      	beq.n	8004034 <connect_to_bytes+0x18c>
		bytes* username_bytes = packet_util_build_bytes(connect->username);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	f8d3 3016 	ldr.w	r3, [r3, #22]
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f000 fe64 	bl	8004cac <packet_util_build_bytes>
 8003fe4:	6178      	str	r0, [r7, #20]
		bytes_concat(payload, username_bytes);
 8003fe6:	6979      	ldr	r1, [r7, #20]
 8003fe8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003fea:	f7ff fd00 	bl	80039ee <bytes_concat>
	    if ( ( flags & ( 0x01 << 6 ) ) && ! string_util_is_empty(connect->password) ){
 8003fee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003ff2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d019      	beq.n	800402e <connect_to_bytes+0x186>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	f8d3 301a 	ldr.w	r3, [r3, #26]
 8004000:	4618      	mov	r0, r3
 8004002:	f004 f89f 	bl	8008144 <string_util_is_empty>
 8004006:	4603      	mov	r3, r0
 8004008:	f083 0301 	eor.w	r3, r3, #1
 800400c:	b2db      	uxtb	r3, r3
 800400e:	2b00      	cmp	r3, #0
 8004010:	d00d      	beq.n	800402e <connect_to_bytes+0x186>
	    	bytes* password_bytes = packet_util_build_bytes(connect->password);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	f8d3 301a 	ldr.w	r3, [r3, #26]
 8004018:	4618      	mov	r0, r3
 800401a:	f000 fe47 	bl	8004cac <packet_util_build_bytes>
 800401e:	6138      	str	r0, [r7, #16]
	    	bytes_concat(payload, password_bytes);
 8004020:	6939      	ldr	r1, [r7, #16]
 8004022:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004024:	f7ff fce3 	bl	80039ee <bytes_concat>
	    	bytes_destroy(password_bytes);
 8004028:	6938      	ldr	r0, [r7, #16]
 800402a:	f7ff fc2d 	bl	8003888 <bytes_destroy>
	    }
	    bytes_destroy(username_bytes);
 800402e:	6978      	ldr	r0, [r7, #20]
 8004030:	f7ff fc2a 	bl	8003888 <bytes_destroy>
	}

	long int remaining_length = bytes_get_size(connect->variable_header) + bytes_get_size(payload) + sizeof(connect->keep_alive);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	4618      	mov	r0, r3
 800403a:	f7ff fcc6 	bl	80039ca <bytes_get_size>
 800403e:	4604      	mov	r4, r0
 8004040:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004042:	f7ff fcc2 	bl	80039ca <bytes_get_size>
 8004046:	4603      	mov	r3, r0
 8004048:	4423      	add	r3, r4
 800404a:	3302      	adds	r3, #2
 800404c:	60fb      	str	r3, [r7, #12]
	control_packet_set_remaining_length(connect->control_packet, remaining_length);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	68f9      	ldr	r1, [r7, #12]
 8004054:	4618      	mov	r0, r3
 8004056:	f000 f99f 	bl	8004398 <control_packet_set_remaining_length>

	bytes* result = control_packet_to_bytes(connect->control_packet);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4618      	mov	r0, r3
 8004060:	f000 f9ad 	bl	80043be <control_packet_to_bytes>
 8004064:	60b8      	str	r0, [r7, #8]
	bytes_concat(result, connect->variable_header);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	4619      	mov	r1, r3
 800406c:	68b8      	ldr	r0, [r7, #8]
 800406e:	f7ff fcbe 	bl	80039ee <bytes_concat>
	bytes_push_back( result, (unsigned char) ( (connect->keep_alive & 0xFF00) >> 8) );
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	891b      	ldrh	r3, [r3, #8]
 8004076:	b29b      	uxth	r3, r3
 8004078:	0a1b      	lsrs	r3, r3, #8
 800407a:	b29b      	uxth	r3, r3
 800407c:	b2db      	uxtb	r3, r3
 800407e:	4619      	mov	r1, r3
 8004080:	68b8      	ldr	r0, [r7, #8]
 8004082:	f7ff fc78 	bl	8003976 <bytes_push_back>
	bytes_push_back( result, (unsigned char) ( (connect->keep_alive & 0x00FF) ) );
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	891b      	ldrh	r3, [r3, #8]
 800408a:	b29b      	uxth	r3, r3
 800408c:	b2db      	uxtb	r3, r3
 800408e:	4619      	mov	r1, r3
 8004090:	68b8      	ldr	r0, [r7, #8]
 8004092:	f7ff fc70 	bl	8003976 <bytes_push_back>
	bytes_concat( result, payload);
 8004096:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004098:	68b8      	ldr	r0, [r7, #8]
 800409a:	f7ff fca8 	bl	80039ee <bytes_concat>
	bytes_destroy(payload);
 800409e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80040a0:	f7ff fbf2 	bl	8003888 <bytes_destroy>
	return result;
 80040a4:	68bb      	ldr	r3, [r7, #8]
}
 80040a6:	4618      	mov	r0, r3
 80040a8:	373c      	adds	r7, #60	; 0x3c
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd90      	pop	{r4, r7, pc}

080040ae <connect_service_init>:
#include <mqtt_client/connect_service.h>

connect_service* connect_service_init(control_packet_proxy* control_packet_proxy){
 80040ae:	b580      	push	{r7, lr}
 80040b0:	b084      	sub	sp, #16
 80040b2:	af00      	add	r7, sp, #0
 80040b4:	6078      	str	r0, [r7, #4]
	if( control_packet_proxy == NULL ) return NULL;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d101      	bne.n	80040c0 <connect_service_init+0x12>
 80040bc:	2300      	movs	r3, #0
 80040be:	e008      	b.n	80040d2 <connect_service_init+0x24>
	connect_service* result = (connect_service*) malloc(sizeof(connect_service));
 80040c0:	2004      	movs	r0, #4
 80040c2:	f008 fb1d 	bl	800c700 <malloc>
 80040c6:	4603      	mov	r3, r0
 80040c8:	60fb      	str	r3, [r7, #12]
	result->control_packet_proxy = control_packet_proxy;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	687a      	ldr	r2, [r7, #4]
 80040ce:	601a      	str	r2, [r3, #0]
	return result;
 80040d0:	68fb      	ldr	r3, [r7, #12]
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	3710      	adds	r7, #16
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}

080040da <connect_service_destroy>:

void connect_service_destroy(connect_service* connect_service){
 80040da:	b580      	push	{r7, lr}
 80040dc:	b082      	sub	sp, #8
 80040de:	af00      	add	r7, sp, #0
 80040e0:	6078      	str	r0, [r7, #4]
	if( connect_service == NULL ) return;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d00e      	beq.n	8004106 <connect_service_destroy+0x2c>
	connect_service->control_packet_proxy = NULL;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2200      	movs	r2, #0
 80040ec:	701a      	strb	r2, [r3, #0]
 80040ee:	2200      	movs	r2, #0
 80040f0:	705a      	strb	r2, [r3, #1]
 80040f2:	2200      	movs	r2, #0
 80040f4:	709a      	strb	r2, [r3, #2]
 80040f6:	2200      	movs	r2, #0
 80040f8:	70da      	strb	r2, [r3, #3]
	free(connect_service);
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f008 fb08 	bl	800c710 <free>
	connect_service = NULL;
 8004100:	2300      	movs	r3, #0
 8004102:	607b      	str	r3, [r7, #4]
 8004104:	e000      	b.n	8004108 <connect_service_destroy+0x2e>
	if( connect_service == NULL ) return;
 8004106:	bf00      	nop
}
 8004108:	3708      	adds	r7, #8
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}
	...

08004110 <connect_service_create>:

connect* connect_service_create(connect_service* connect_service){
 8004110:	b580      	push	{r7, lr}
 8004112:	b08c      	sub	sp, #48	; 0x30
 8004114:	af04      	add	r7, sp, #16
 8004116:	6078      	str	r0, [r7, #4]
	if( connect_service == NULL ) return NULL;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d101      	bne.n	8004122 <connect_service_create+0x12>
 800411e:	2300      	movs	r3, #0
 8004120:	e0ac      	b.n	800427c <connect_service_create+0x16c>

	session* session 		= session_get_instance();
 8004122:	f001 fc39 	bl	8005998 <session_get_instance>
 8004126:	61b8      	str	r0, [r7, #24]
	bool has_username		= string_util_is_empty(session_get_username(session)) ? false : true;
 8004128:	69b8      	ldr	r0, [r7, #24]
 800412a:	f001 fe20 	bl	8005d6e <session_get_username>
 800412e:	4603      	mov	r3, r0
 8004130:	4618      	mov	r0, r3
 8004132:	f004 f807 	bl	8008144 <string_util_is_empty>
 8004136:	4603      	mov	r3, r0
 8004138:	f083 0301 	eor.w	r3, r3, #1
 800413c:	75fb      	strb	r3, [r7, #23]
	bool has_password       = string_util_is_empty(session_get_password(session)) ? false : true;
 800413e:	69b8      	ldr	r0, [r7, #24]
 8004140:	f001 fe26 	bl	8005d90 <session_get_password>
 8004144:	4603      	mov	r3, r0
 8004146:	4618      	mov	r0, r3
 8004148:	f003 fffc 	bl	8008144 <string_util_is_empty>
 800414c:	4603      	mov	r3, r0
 800414e:	f083 0301 	eor.w	r3, r3, #1
 8004152:	75bb      	strb	r3, [r7, #22]
	bool is_id_empty        = string_util_is_empty(session_get_id(session));
 8004154:	69b8      	ldr	r0, [r7, #24]
 8004156:	f001 fcdb 	bl	8005b10 <session_get_id>
 800415a:	4603      	mov	r3, r0
 800415c:	4618      	mov	r0, r3
 800415e:	f003 fff1 	bl	8008144 <string_util_is_empty>
 8004162:	4603      	mov	r3, r0
 8004164:	757b      	strb	r3, [r7, #21]
	bool clean              = is_id_empty ? true : session_is_clean(session);
 8004166:	7d7b      	ldrb	r3, [r7, #21]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d105      	bne.n	8004178 <connect_service_create+0x68>
 800416c:	69b8      	ldr	r0, [r7, #24]
 800416e:	f001 fcf2 	bl	8005b56 <session_is_clean>
 8004172:	4603      	mov	r3, r0
 8004174:	2b00      	cmp	r3, #0
 8004176:	d001      	beq.n	800417c <connect_service_create+0x6c>
 8004178:	2301      	movs	r3, #1
 800417a:	e000      	b.n	800417e <connect_service_create+0x6e>
 800417c:	2300      	movs	r3, #0
 800417e:	753b      	strb	r3, [r7, #20]
	unsigned int keep_alive = session_get_keep_alive(session);
 8004180:	69b8      	ldr	r0, [r7, #24]
 8004182:	f001 fd5a 	bl	8005c3a <session_get_keep_alive>
 8004186:	6138      	str	r0, [r7, #16]

	connect* connect = NULL;
 8004188:	2300      	movs	r3, #0
 800418a:	61fb      	str	r3, [r7, #28]
	unsigned char qos = session_get_qos(session);
 800418c:	69b8      	ldr	r0, [r7, #24]
 800418e:	f001 fd79 	bl	8005c84 <session_get_qos>
 8004192:	4603      	mov	r3, r0
 8004194:	73fb      	strb	r3, [r7, #15]
	if ( qos == CONNECT_QOS_LEVEL_0){
 8004196:	4b3b      	ldr	r3, [pc, #236]	; (8004284 <connect_service_create+0x174>)
 8004198:	781b      	ldrb	r3, [r3, #0]
 800419a:	7bfa      	ldrb	r2, [r7, #15]
 800419c:	429a      	cmp	r2, r3
 800419e:	d10f      	bne.n	80041c0 <connect_service_create+0xb0>
		connect = connect_init(has_username, has_password, false, CONNECT_QOS_LEVEL_0, false, clean, keep_alive);
 80041a0:	4b38      	ldr	r3, [pc, #224]	; (8004284 <connect_service_create+0x174>)
 80041a2:	781a      	ldrb	r2, [r3, #0]
 80041a4:	7db9      	ldrb	r1, [r7, #22]
 80041a6:	7df8      	ldrb	r0, [r7, #23]
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	9302      	str	r3, [sp, #8]
 80041ac:	7d3b      	ldrb	r3, [r7, #20]
 80041ae:	9301      	str	r3, [sp, #4]
 80041b0:	2300      	movs	r3, #0
 80041b2:	9300      	str	r3, [sp, #0]
 80041b4:	4613      	mov	r3, r2
 80041b6:	2200      	movs	r2, #0
 80041b8:	f7ff fcfe 	bl	8003bb8 <connect_init>
 80041bc:	61f8      	str	r0, [r7, #28]
 80041be:	e038      	b.n	8004232 <connect_service_create+0x122>
	} else if ( qos == CONNECT_QOS_LEVEL_1 ){
 80041c0:	4b31      	ldr	r3, [pc, #196]	; (8004288 <connect_service_create+0x178>)
 80041c2:	781b      	ldrb	r3, [r3, #0]
 80041c4:	7bfa      	ldrb	r2, [r7, #15]
 80041c6:	429a      	cmp	r2, r3
 80041c8:	d10f      	bne.n	80041ea <connect_service_create+0xda>
		connect = connect_init(has_username, has_password, false, CONNECT_QOS_LEVEL_1, false, clean, keep_alive);
 80041ca:	4b2f      	ldr	r3, [pc, #188]	; (8004288 <connect_service_create+0x178>)
 80041cc:	781a      	ldrb	r2, [r3, #0]
 80041ce:	7db9      	ldrb	r1, [r7, #22]
 80041d0:	7df8      	ldrb	r0, [r7, #23]
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	9302      	str	r3, [sp, #8]
 80041d6:	7d3b      	ldrb	r3, [r7, #20]
 80041d8:	9301      	str	r3, [sp, #4]
 80041da:	2300      	movs	r3, #0
 80041dc:	9300      	str	r3, [sp, #0]
 80041de:	4613      	mov	r3, r2
 80041e0:	2200      	movs	r2, #0
 80041e2:	f7ff fce9 	bl	8003bb8 <connect_init>
 80041e6:	61f8      	str	r0, [r7, #28]
 80041e8:	e023      	b.n	8004232 <connect_service_create+0x122>
	} else if ( qos == CONNECT_QOS_LEVEL_2 ){
 80041ea:	4b28      	ldr	r3, [pc, #160]	; (800428c <connect_service_create+0x17c>)
 80041ec:	781b      	ldrb	r3, [r3, #0]
 80041ee:	7bfa      	ldrb	r2, [r7, #15]
 80041f0:	429a      	cmp	r2, r3
 80041f2:	d10f      	bne.n	8004214 <connect_service_create+0x104>
		connect = connect_init(has_username, has_password, false, CONNECT_QOS_LEVEL_2, false, clean, keep_alive);
 80041f4:	4b25      	ldr	r3, [pc, #148]	; (800428c <connect_service_create+0x17c>)
 80041f6:	781a      	ldrb	r2, [r3, #0]
 80041f8:	7db9      	ldrb	r1, [r7, #22]
 80041fa:	7df8      	ldrb	r0, [r7, #23]
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	9302      	str	r3, [sp, #8]
 8004200:	7d3b      	ldrb	r3, [r7, #20]
 8004202:	9301      	str	r3, [sp, #4]
 8004204:	2300      	movs	r3, #0
 8004206:	9300      	str	r3, [sp, #0]
 8004208:	4613      	mov	r3, r2
 800420a:	2200      	movs	r2, #0
 800420c:	f7ff fcd4 	bl	8003bb8 <connect_init>
 8004210:	61f8      	str	r0, [r7, #28]
 8004212:	e00e      	b.n	8004232 <connect_service_create+0x122>
	} else {
		connect = connect_init(has_username, has_password, false, CONNECT_QOS_LEVEL_0, false, clean, keep_alive);
 8004214:	4b1b      	ldr	r3, [pc, #108]	; (8004284 <connect_service_create+0x174>)
 8004216:	781a      	ldrb	r2, [r3, #0]
 8004218:	7db9      	ldrb	r1, [r7, #22]
 800421a:	7df8      	ldrb	r0, [r7, #23]
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	9302      	str	r3, [sp, #8]
 8004220:	7d3b      	ldrb	r3, [r7, #20]
 8004222:	9301      	str	r3, [sp, #4]
 8004224:	2300      	movs	r3, #0
 8004226:	9300      	str	r3, [sp, #0]
 8004228:	4613      	mov	r3, r2
 800422a:	2200      	movs	r2, #0
 800422c:	f7ff fcc4 	bl	8003bb8 <connect_init>
 8004230:	61f8      	str	r0, [r7, #28]
	}

	if ( has_username ) connect_set_username(connect, session_get_username(session));
 8004232:	7dfb      	ldrb	r3, [r7, #23]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d007      	beq.n	8004248 <connect_service_create+0x138>
 8004238:	69b8      	ldr	r0, [r7, #24]
 800423a:	f001 fd98 	bl	8005d6e <session_get_username>
 800423e:	4603      	mov	r3, r0
 8004240:	4619      	mov	r1, r3
 8004242:	69f8      	ldr	r0, [r7, #28]
 8004244:	f7ff fe0a 	bl	8003e5c <connect_set_username>
	if ( has_password ) connect_set_password(connect, session_get_password(session));
 8004248:	7dbb      	ldrb	r3, [r7, #22]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d007      	beq.n	800425e <connect_service_create+0x14e>
 800424e:	69b8      	ldr	r0, [r7, #24]
 8004250:	f001 fd9e 	bl	8005d90 <session_get_password>
 8004254:	4603      	mov	r3, r0
 8004256:	4619      	mov	r1, r3
 8004258:	69f8      	ldr	r0, [r7, #28]
 800425a:	f7ff fe12 	bl	8003e82 <connect_set_password>
	if ( ! is_id_empty ) connect_set_client_identifier(connect, session_get_id(session));
 800425e:	7d7b      	ldrb	r3, [r7, #21]
 8004260:	f083 0301 	eor.w	r3, r3, #1
 8004264:	b2db      	uxtb	r3, r3
 8004266:	2b00      	cmp	r3, #0
 8004268:	d007      	beq.n	800427a <connect_service_create+0x16a>
 800426a:	69b8      	ldr	r0, [r7, #24]
 800426c:	f001 fc50 	bl	8005b10 <session_get_id>
 8004270:	4603      	mov	r3, r0
 8004272:	4619      	mov	r1, r3
 8004274:	69f8      	ldr	r0, [r7, #28]
 8004276:	f7ff fdde 	bl	8003e36 <connect_set_client_identifier>

	return connect;
 800427a:	69fb      	ldr	r3, [r7, #28]
}
 800427c:	4618      	mov	r0, r3
 800427e:	3720      	adds	r7, #32
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}
 8004284:	0801175d 	.word	0x0801175d
 8004288:	0801175e 	.word	0x0801175e
 800428c:	0801175f 	.word	0x0801175f

08004290 <connect_service_write>:
	connect* connect = bytes_is_empty(bytes) ? NULL : assembler_build_to_connect(bytes);
	bytes_destroy(bytes);
	return connect;
}

void connect_service_write(connect_service* connect_service, connect* connect){
 8004290:	b580      	push	{r7, lr}
 8004292:	b088      	sub	sp, #32
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
 8004298:	6039      	str	r1, [r7, #0]
	if ( connect_service == NULL || connect == NULL ) return;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d037      	beq.n	8004310 <connect_service_write+0x80>
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d034      	beq.n	8004310 <connect_service_write+0x80>
	session* session = session_get_instance();
 80042a6:	f001 fb77 	bl	8005998 <session_get_instance>
 80042aa:	61f8      	str	r0, [r7, #28]
	if ( ! session_is_connected(session) ){
 80042ac:	69f8      	ldr	r0, [r7, #28]
 80042ae:	f001 fd37 	bl	8005d20 <session_is_connected>
 80042b2:	4603      	mov	r3, r0
 80042b4:	f083 0301 	eor.w	r3, r3, #1
 80042b8:	b2db      	uxtb	r3, r3
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d01a      	beq.n	80042f4 <connect_service_write+0x64>
		char* host = session_get_host(session);
 80042be:	69f8      	ldr	r0, [r7, #28]
 80042c0:	f001 fc70 	bl	8005ba4 <session_get_host>
 80042c4:	61b8      	str	r0, [r7, #24]
		unsigned int port = session_get_port(session);
 80042c6:	69f8      	ldr	r0, [r7, #28]
 80042c8:	f001 fc91 	bl	8005bee <session_get_port>
 80042cc:	6178      	str	r0, [r7, #20]
		control_packet_proxy_connect(connect_service->control_packet_proxy, host, port);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	697a      	ldr	r2, [r7, #20]
 80042d4:	69b9      	ldr	r1, [r7, #24]
 80042d6:	4618      	mov	r0, r3
 80042d8:	f000 f905 	bl	80044e6 <control_packet_proxy_connect>
		bool connected = control_packet_proxy_is_connected(connect_service->control_packet_proxy);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4618      	mov	r0, r3
 80042e2:	f000 f915 	bl	8004510 <control_packet_proxy_is_connected>
 80042e6:	4603      	mov	r3, r0
 80042e8:	74fb      	strb	r3, [r7, #19]
		session_set_connected(session, connected);
 80042ea:	7cfb      	ldrb	r3, [r7, #19]
 80042ec:	4619      	mov	r1, r3
 80042ee:	69f8      	ldr	r0, [r7, #28]
 80042f0:	f001 fd2a 	bl	8005d48 <session_set_connected>
	}
	bytes* bytes = connect_to_bytes(connect);
 80042f4:	6838      	ldr	r0, [r7, #0]
 80042f6:	f7ff fdd7 	bl	8003ea8 <connect_to_bytes>
 80042fa:	60f8      	str	r0, [r7, #12]
	control_packet_proxy_write(connect_service->control_packet_proxy, bytes);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	68f9      	ldr	r1, [r7, #12]
 8004302:	4618      	mov	r0, r3
 8004304:	f000 f917 	bl	8004536 <control_packet_proxy_write>
	bytes_destroy(bytes);
 8004308:	68f8      	ldr	r0, [r7, #12]
 800430a:	f7ff fabd 	bl	8003888 <bytes_destroy>
 800430e:	e000      	b.n	8004312 <connect_service_write+0x82>
	if ( connect_service == NULL || connect == NULL ) return;
 8004310:	bf00      	nop
}
 8004312:	3720      	adds	r7, #32
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}

08004318 <control_packet_init>:
const unsigned char CONTROL_PACKET_FLAG_UNSUBACK     = 0x00;
const unsigned char CONTROL_PACKET_FLAG_PINGREQ      = 0x00;
const unsigned char CONTROL_PACKET_FLAG_PINGRESP     = 0x00;
const unsigned char CONTROL_PACKET_FLAG_DISCONNECT   = 0x00;

control_packet* control_packet_init(const unsigned char type, const unsigned char flags, const long int remaining_length){
 8004318:	b580      	push	{r7, lr}
 800431a:	b084      	sub	sp, #16
 800431c:	af00      	add	r7, sp, #0
 800431e:	4603      	mov	r3, r0
 8004320:	603a      	str	r2, [r7, #0]
 8004322:	71fb      	strb	r3, [r7, #7]
 8004324:	460b      	mov	r3, r1
 8004326:	71bb      	strb	r3, [r7, #6]
	control_packet* result = (control_packet*) malloc(sizeof(control_packet));
 8004328:	2006      	movs	r0, #6
 800432a:	f008 f9e9 	bl	800c700 <malloc>
 800432e:	4603      	mov	r3, r0
 8004330:	60fb      	str	r3, [r7, #12]
	result->type 				= type;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	79fa      	ldrb	r2, [r7, #7]
 8004336:	701a      	strb	r2, [r3, #0]
	result->flags 				= flags;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	79ba      	ldrb	r2, [r7, #6]
 800433c:	705a      	strb	r2, [r3, #1]
	result->remaining_length 	= remaining_length;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	683a      	ldr	r2, [r7, #0]
 8004342:	f8c3 2002 	str.w	r2, [r3, #2]

	return result;
 8004346:	68fb      	ldr	r3, [r7, #12]
}
 8004348:	4618      	mov	r0, r3
 800434a:	3710      	adds	r7, #16
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}

08004350 <control_packet_get_flags>:
void control_packet_set_type(control_packet* control_packet, const unsigned char type){
	if( control_packet == NULL ) return;
	control_packet->type = type;
}

unsigned char control_packet_get_flags(control_packet* control_packet){
 8004350:	b480      	push	{r7}
 8004352:	b083      	sub	sp, #12
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
	return control_packet == NULL ? (unsigned char) 0 : control_packet->flags;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d002      	beq.n	8004364 <control_packet_get_flags+0x14>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	785b      	ldrb	r3, [r3, #1]
 8004362:	e000      	b.n	8004366 <control_packet_get_flags+0x16>
 8004364:	2300      	movs	r3, #0
}
 8004366:	4618      	mov	r0, r3
 8004368:	370c      	adds	r7, #12
 800436a:	46bd      	mov	sp, r7
 800436c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004370:	4770      	bx	lr

08004372 <control_packet_set_flags>:

void control_packet_set_flags(control_packet* control_packet, const unsigned char flags){
 8004372:	b480      	push	{r7}
 8004374:	b083      	sub	sp, #12
 8004376:	af00      	add	r7, sp, #0
 8004378:	6078      	str	r0, [r7, #4]
 800437a:	460b      	mov	r3, r1
 800437c:	70fb      	strb	r3, [r7, #3]
	if( control_packet == NULL ) return;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d003      	beq.n	800438c <control_packet_set_flags+0x1a>
	control_packet->flags = flags;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	78fa      	ldrb	r2, [r7, #3]
 8004388:	705a      	strb	r2, [r3, #1]
 800438a:	e000      	b.n	800438e <control_packet_set_flags+0x1c>
	if( control_packet == NULL ) return;
 800438c:	bf00      	nop
}
 800438e:	370c      	adds	r7, #12
 8004390:	46bd      	mov	sp, r7
 8004392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004396:	4770      	bx	lr

08004398 <control_packet_set_remaining_length>:

long int control_packet_get_remaining_length(control_packet* control_packet){
	return control_packet == NULL ? (long int) 0 : control_packet->remaining_length;
}

void control_packet_set_remaining_length(control_packet* control_packet, const long int remaining_length){
 8004398:	b480      	push	{r7}
 800439a:	b083      	sub	sp, #12
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
 80043a0:	6039      	str	r1, [r7, #0]
	if( control_packet == NULL ) return;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d004      	beq.n	80043b2 <control_packet_set_remaining_length+0x1a>
	control_packet->remaining_length = remaining_length;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	683a      	ldr	r2, [r7, #0]
 80043ac:	f8c3 2002 	str.w	r2, [r3, #2]
 80043b0:	e000      	b.n	80043b4 <control_packet_set_remaining_length+0x1c>
	if( control_packet == NULL ) return;
 80043b2:	bf00      	nop
}
 80043b4:	370c      	adds	r7, #12
 80043b6:	46bd      	mov	sp, r7
 80043b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043bc:	4770      	bx	lr

080043be <control_packet_to_bytes>:

bytes* control_packet_to_bytes(control_packet* control_packet){
 80043be:	b580      	push	{r7, lr}
 80043c0:	b086      	sub	sp, #24
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	6078      	str	r0, [r7, #4]
	if( control_packet == NULL ) return NULL;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d101      	bne.n	80043d0 <control_packet_to_bytes+0x12>
 80043cc:	2300      	movs	r3, #0
 80043ce:	e02f      	b.n	8004430 <control_packet_to_bytes+0x72>

	bytes* result = bytes_init();
 80043d0:	f7ff fa32 	bl	8003838 <bytes_init>
 80043d4:	60f8      	str	r0, [r7, #12]
	bytes_push_back(result, (unsigned char) ( control_packet->type | control_packet->flags ));
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	781a      	ldrb	r2, [r3, #0]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	785b      	ldrb	r3, [r3, #1]
 80043de:	4313      	orrs	r3, r2
 80043e0:	b2db      	uxtb	r3, r3
 80043e2:	4619      	mov	r1, r3
 80043e4:	68f8      	ldr	r0, [r7, #12]
 80043e6:	f7ff fac6 	bl	8003976 <bytes_push_back>

	unsigned char encode_byte;
	long int remaining_length = control_packet->remaining_length;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	f8d3 3002 	ldr.w	r3, [r3, #2]
 80043f0:	613b      	str	r3, [r7, #16]
	do {
		encode_byte = remaining_length % 128;
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	425a      	negs	r2, r3
 80043f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80043fa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80043fe:	bf58      	it	pl
 8004400:	4253      	negpl	r3, r2
 8004402:	75fb      	strb	r3, [r7, #23]
		remaining_length = remaining_length / 128;
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	2b00      	cmp	r3, #0
 8004408:	da00      	bge.n	800440c <control_packet_to_bytes+0x4e>
 800440a:	337f      	adds	r3, #127	; 0x7f
 800440c:	11db      	asrs	r3, r3, #7
 800440e:	613b      	str	r3, [r7, #16]
		if( remaining_length ) encode_byte = encode_byte | 0x80;
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d003      	beq.n	800441e <control_packet_to_bytes+0x60>
 8004416:	7dfb      	ldrb	r3, [r7, #23]
 8004418:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800441c:	75fb      	strb	r3, [r7, #23]
		bytes_push_back(result, (unsigned char) encode_byte);
 800441e:	7dfb      	ldrb	r3, [r7, #23]
 8004420:	4619      	mov	r1, r3
 8004422:	68f8      	ldr	r0, [r7, #12]
 8004424:	f7ff faa7 	bl	8003976 <bytes_push_back>
	} while ( remaining_length > 0 );
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	2b00      	cmp	r3, #0
 800442c:	dce1      	bgt.n	80043f2 <control_packet_to_bytes+0x34>

	return result;
 800442e:	68fb      	ldr	r3, [r7, #12]
}
 8004430:	4618      	mov	r0, r3
 8004432:	3718      	adds	r7, #24
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}

08004438 <control_packet_proxy_init>:
#include "../../Inc/mqtt_client/control_packet_proxy.h"

control_packet_proxy* control_packet_proxy_init(wifi* wifi, ping_req_service* ping_req_service, ping_resp_service* ping_resp_service, unsigned int connection_attempts){
 8004438:	b580      	push	{r7, lr}
 800443a:	b086      	sub	sp, #24
 800443c:	af00      	add	r7, sp, #0
 800443e:	60f8      	str	r0, [r7, #12]
 8004440:	60b9      	str	r1, [r7, #8]
 8004442:	607a      	str	r2, [r7, #4]
 8004444:	603b      	str	r3, [r7, #0]
	if( wifi == NULL || ping_req_service == NULL ||  ping_resp_service == NULL || connection_attempts == 0 ) return NULL;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d008      	beq.n	800445e <control_packet_proxy_init+0x26>
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d005      	beq.n	800445e <control_packet_proxy_init+0x26>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d002      	beq.n	800445e <control_packet_proxy_init+0x26>
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d101      	bne.n	8004462 <control_packet_proxy_init+0x2a>
 800445e:	2300      	movs	r3, #0
 8004460:	e011      	b.n	8004486 <control_packet_proxy_init+0x4e>
	control_packet_proxy* result = (control_packet_proxy*) malloc(sizeof(control_packet_proxy));
 8004462:	2010      	movs	r0, #16
 8004464:	f008 f94c 	bl	800c700 <malloc>
 8004468:	4603      	mov	r3, r0
 800446a:	617b      	str	r3, [r7, #20]
	result->wifi = wifi;
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	68fa      	ldr	r2, [r7, #12]
 8004470:	601a      	str	r2, [r3, #0]
	result->ping_req_service = ping_req_service;
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	68ba      	ldr	r2, [r7, #8]
 8004476:	605a      	str	r2, [r3, #4]
	result->ping_resp_service = ping_resp_service;
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	687a      	ldr	r2, [r7, #4]
 800447c:	609a      	str	r2, [r3, #8]
	result->connection_attempts = connection_attempts;
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	683a      	ldr	r2, [r7, #0]
 8004482:	60da      	str	r2, [r3, #12]
	return result;
 8004484:	697b      	ldr	r3, [r7, #20]
}
 8004486:	4618      	mov	r0, r3
 8004488:	3718      	adds	r7, #24
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}

0800448e <control_packet_proxy_destroy>:

void control_packet_proxy_destroy(control_packet_proxy* control_packet_proxy){
 800448e:	b580      	push	{r7, lr}
 8004490:	b082      	sub	sp, #8
 8004492:	af00      	add	r7, sp, #0
 8004494:	6078      	str	r0, [r7, #4]
	if( control_packet_proxy == NULL ) return;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d020      	beq.n	80044de <control_packet_proxy_destroy+0x50>
	control_packet_proxy->wifi = NULL;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2200      	movs	r2, #0
 80044a0:	701a      	strb	r2, [r3, #0]
 80044a2:	2200      	movs	r2, #0
 80044a4:	705a      	strb	r2, [r3, #1]
 80044a6:	2200      	movs	r2, #0
 80044a8:	709a      	strb	r2, [r3, #2]
 80044aa:	2200      	movs	r2, #0
 80044ac:	70da      	strb	r2, [r3, #3]
	control_packet_proxy->ping_req_service = NULL;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2200      	movs	r2, #0
 80044b2:	711a      	strb	r2, [r3, #4]
 80044b4:	2200      	movs	r2, #0
 80044b6:	715a      	strb	r2, [r3, #5]
 80044b8:	2200      	movs	r2, #0
 80044ba:	719a      	strb	r2, [r3, #6]
 80044bc:	2200      	movs	r2, #0
 80044be:	71da      	strb	r2, [r3, #7]
	control_packet_proxy->ping_resp_service = NULL;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2200      	movs	r2, #0
 80044c4:	721a      	strb	r2, [r3, #8]
 80044c6:	2200      	movs	r2, #0
 80044c8:	725a      	strb	r2, [r3, #9]
 80044ca:	2200      	movs	r2, #0
 80044cc:	729a      	strb	r2, [r3, #10]
 80044ce:	2200      	movs	r2, #0
 80044d0:	72da      	strb	r2, [r3, #11]
	free(control_packet_proxy);
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	f008 f91c 	bl	800c710 <free>
	control_packet_proxy = NULL;
 80044d8:	2300      	movs	r3, #0
 80044da:	607b      	str	r3, [r7, #4]
 80044dc:	e000      	b.n	80044e0 <control_packet_proxy_destroy+0x52>
	if( control_packet_proxy == NULL ) return;
 80044de:	bf00      	nop
}
 80044e0:	3708      	adds	r7, #8
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}

080044e6 <control_packet_proxy_connect>:

void control_packet_proxy_connect(control_packet_proxy* control_packet_proxy, char* ip, unsigned int port){
 80044e6:	b580      	push	{r7, lr}
 80044e8:	b084      	sub	sp, #16
 80044ea:	af00      	add	r7, sp, #0
 80044ec:	60f8      	str	r0, [r7, #12]
 80044ee:	60b9      	str	r1, [r7, #8]
 80044f0:	607a      	str	r2, [r7, #4]
	if( control_packet_proxy == NULL ) return;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d007      	beq.n	8004508 <control_packet_proxy_connect+0x22>
	wifi_connect(control_packet_proxy->wifi, ip, port);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	687a      	ldr	r2, [r7, #4]
 80044fe:	68b9      	ldr	r1, [r7, #8]
 8004500:	4618      	mov	r0, r3
 8004502:	f001 fdc0 	bl	8006086 <wifi_connect>
 8004506:	e000      	b.n	800450a <control_packet_proxy_connect+0x24>
	if( control_packet_proxy == NULL ) return;
 8004508:	bf00      	nop
}
 800450a:	3710      	adds	r7, #16
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}

08004510 <control_packet_proxy_is_connected>:
void control_packet_proxy_disconnect(control_packet_proxy* control_packet_proxy){
	if( control_packet_proxy == NULL ) return;
	wifi_disconnect(control_packet_proxy->wifi);
}

bool control_packet_proxy_is_connected(control_packet_proxy* control_packet_proxy){
 8004510:	b580      	push	{r7, lr}
 8004512:	b082      	sub	sp, #8
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
	if( control_packet_proxy == NULL ) return false;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d101      	bne.n	8004522 <control_packet_proxy_is_connected+0x12>
 800451e:	2300      	movs	r3, #0
 8004520:	e005      	b.n	800452e <control_packet_proxy_is_connected+0x1e>
	return wifi_is_connected(control_packet_proxy->wifi);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4618      	mov	r0, r3
 8004528:	f001 fdd3 	bl	80060d2 <wifi_is_connected>
 800452c:	4603      	mov	r3, r0
}
 800452e:	4618      	mov	r0, r3
 8004530:	3708      	adds	r7, #8
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}

08004536 <control_packet_proxy_write>:
bytes* control_packet_proxy_read(control_packet_proxy* control_packet_proxy){
	if( control_packet_proxy == NULL ) return NULL;
	return wifi_read(control_packet_proxy->wifi);
}

void control_packet_proxy_write(control_packet_proxy* control_packet_proxy, bytes* bytes){
 8004536:	b580      	push	{r7, lr}
 8004538:	b086      	sub	sp, #24
 800453a:	af00      	add	r7, sp, #0
 800453c:	6078      	str	r0, [r7, #4]
 800453e:	6039      	str	r1, [r7, #0]
	if(control_packet_proxy == NULL || bytes == NULL ) return;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d02a      	beq.n	800459c <control_packet_proxy_write+0x66>
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d027      	beq.n	800459c <control_packet_proxy_write+0x66>
	session* session = session_get_instance();
 800454c:	f001 fa24 	bl	8005998 <session_get_instance>
 8004550:	6178      	str	r0, [r7, #20]
	if( session_is_expired(session) ){
 8004552:	6978      	ldr	r0, [r7, #20]
 8004554:	f001 fc46 	bl	8005de4 <session_is_expired>
 8004558:	4603      	mov	r3, r0
 800455a:	2b00      	cmp	r3, #0
 800455c:	d014      	beq.n	8004588 <control_packet_proxy_write+0x52>
		ping_req* ping_req = ping_req_service_create(control_packet_proxy->ping_req_service);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	4618      	mov	r0, r3
 8004564:	f000 fc6f 	bl	8004e46 <ping_req_service_create>
 8004568:	6138      	str	r0, [r7, #16]
		ping_req_service_write(control_packet_proxy->ping_req_service, ping_req);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	6939      	ldr	r1, [r7, #16]
 8004570:	4618      	mov	r0, r3
 8004572:	f000 fc78 	bl	8004e66 <ping_req_service_write>

		ping_resp* ping_resp = ping_resp_service_read(control_packet_proxy->ping_resp_service);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	4618      	mov	r0, r3
 800457c:	f000 fcda 	bl	8004f34 <ping_resp_service_read>
 8004580:	60f8      	str	r0, [r7, #12]
		if( ping_resp == NULL ) return;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d00b      	beq.n	80045a0 <control_packet_proxy_write+0x6a>
	}
	wifi_write(control_packet_proxy->wifi, bytes);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	6839      	ldr	r1, [r7, #0]
 800458e:	4618      	mov	r0, r3
 8004590:	f001 fdc3 	bl	800611a <wifi_write>
	session_signal_time_last_package(session);
 8004594:	6978      	ldr	r0, [r7, #20]
 8004596:	f001 fc0d 	bl	8005db4 <session_signal_time_last_package>
 800459a:	e002      	b.n	80045a2 <control_packet_proxy_write+0x6c>
	if(control_packet_proxy == NULL || bytes == NULL ) return;
 800459c:	bf00      	nop
 800459e:	e000      	b.n	80045a2 <control_packet_proxy_write+0x6c>
		if( ping_resp == NULL ) return;
 80045a0:	bf00      	nop
}
 80045a2:	3718      	adds	r7, #24
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bd80      	pop	{r7, pc}

080045a8 <disconnect_service_init>:
#include "../../Inc/mqtt_client/disconnect_service.h"


disconnect_service* disconnect_service_init(control_packet_proxy* control_packet_proxy){
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b084      	sub	sp, #16
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
	if( control_packet_proxy == NULL ) return NULL;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d101      	bne.n	80045ba <disconnect_service_init+0x12>
 80045b6:	2300      	movs	r3, #0
 80045b8:	e008      	b.n	80045cc <disconnect_service_init+0x24>
	disconnect_service* result = (disconnect_service*) malloc(sizeof(disconnect_service));
 80045ba:	2004      	movs	r0, #4
 80045bc:	f008 f8a0 	bl	800c700 <malloc>
 80045c0:	4603      	mov	r3, r0
 80045c2:	60fb      	str	r3, [r7, #12]
	result->control_packet_proxy = control_packet_proxy;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	687a      	ldr	r2, [r7, #4]
 80045c8:	601a      	str	r2, [r3, #0]
	return result;
 80045ca:	68fb      	ldr	r3, [r7, #12]
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	3710      	adds	r7, #16
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}

080045d4 <disconnect_service_destroy>:

void disconnect_service_destroy(disconnect_service* disconnect_service){
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b082      	sub	sp, #8
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
	if( disconnect_service == NULL ) return;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d00e      	beq.n	8004600 <disconnect_service_destroy+0x2c>
	disconnect_service->control_packet_proxy = NULL;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2200      	movs	r2, #0
 80045e6:	701a      	strb	r2, [r3, #0]
 80045e8:	2200      	movs	r2, #0
 80045ea:	705a      	strb	r2, [r3, #1]
 80045ec:	2200      	movs	r2, #0
 80045ee:	709a      	strb	r2, [r3, #2]
 80045f0:	2200      	movs	r2, #0
 80045f2:	70da      	strb	r2, [r3, #3]
	free(disconnect_service);
 80045f4:	6878      	ldr	r0, [r7, #4]
 80045f6:	f008 f88b 	bl	800c710 <free>
	disconnect_service = NULL;
 80045fa:	2300      	movs	r3, #0
 80045fc:	607b      	str	r3, [r7, #4]
 80045fe:	e000      	b.n	8004602 <disconnect_service_destroy+0x2e>
	if( disconnect_service == NULL ) return;
 8004600:	bf00      	nop
}
 8004602:	3708      	adds	r7, #8
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}

08004608 <mqtt_client_init>:
unsigned char MQTT_CLIENT_QOS_LEVEL_1 = 0x01;

unsigned char MQTT_CLIENT_QOS_LEVEL_2 = 0x02;


mqtt_client* mqtt_client_init(esp8266* esp8266){
 8004608:	b5f0      	push	{r4, r5, r6, r7, lr}
 800460a:	b08b      	sub	sp, #44	; 0x2c
 800460c:	af06      	add	r7, sp, #24
 800460e:	6078      	str	r0, [r7, #4]
	if( esp8266 == NULL ) return NULL;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d101      	bne.n	800461a <mqtt_client_init+0x12>
 8004616:	2300      	movs	r3, #0
 8004618:	e0c0      	b.n	800479c <mqtt_client_init+0x194>

	mqtt_client* result = (mqtt_client*) malloc(sizeof(mqtt_client));
 800461a:	2034      	movs	r0, #52	; 0x34
 800461c:	f008 f870 	bl	800c700 <malloc>
 8004620:	4603      	mov	r3, r0
 8004622:	60fb      	str	r3, [r7, #12]

	result->wifi 					= wifi_init(esp8266, 1000);
 8004624:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004628:	6878      	ldr	r0, [r7, #4]
 800462a:	f001 fcbe 	bl	8005faa <wifi_init>
 800462e:	4602      	mov	r2, r0
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	601a      	str	r2, [r3, #0]
	result->ping_req_service 		= ping_req_service_init(result->wifi);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4618      	mov	r0, r3
 800463a:	f000 fbd4 	bl	8004de6 <ping_req_service_init>
 800463e:	4602      	mov	r2, r0
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	605a      	str	r2, [r3, #4]
	result->ping_resp_service		= ping_resp_service_init(result->wifi);
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4618      	mov	r0, r3
 800464a:	f000 fc43 	bl	8004ed4 <ping_resp_service_init>
 800464e:	4602      	mov	r2, r0
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	609a      	str	r2, [r3, #8]
	result->control_packet_proxy 	= control_packet_proxy_init(result->wifi, result->ping_req_service, result->ping_resp_service, 3);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	6818      	ldr	r0, [r3, #0]
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	6859      	ldr	r1, [r3, #4]
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	689a      	ldr	r2, [r3, #8]
 8004660:	2303      	movs	r3, #3
 8004662:	f7ff fee9 	bl	8004438 <control_packet_proxy_init>
 8004666:	4602      	mov	r2, r0
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	60da      	str	r2, [r3, #12]
	result->connack_service			= connack_service_init(result->control_packet_proxy);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	68db      	ldr	r3, [r3, #12]
 8004670:	4618      	mov	r0, r3
 8004672:	f7ff fa50 	bl	8003b16 <connack_service_init>
 8004676:	4602      	mov	r2, r0
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	611a      	str	r2, [r3, #16]
	result->connect_service			= connect_service_init(result->control_packet_proxy);
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	68db      	ldr	r3, [r3, #12]
 8004680:	4618      	mov	r0, r3
 8004682:	f7ff fd14 	bl	80040ae <connect_service_init>
 8004686:	4602      	mov	r2, r0
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	615a      	str	r2, [r3, #20]
	result->disconnect_service		= disconnect_service_init(result->control_packet_proxy);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	68db      	ldr	r3, [r3, #12]
 8004690:	4618      	mov	r0, r3
 8004692:	f7ff ff89 	bl	80045a8 <disconnect_service_init>
 8004696:	4602      	mov	r2, r0
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	619a      	str	r2, [r3, #24]
	result->pub_ack_service			= pub_ack_service_init(result->control_packet_proxy);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	68db      	ldr	r3, [r3, #12]
 80046a0:	4618      	mov	r0, r3
 80046a2:	f000 fcb4 	bl	800500e <pub_ack_service_init>
 80046a6:	4602      	mov	r2, r0
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	61da      	str	r2, [r3, #28]
	result->pub_comp_service			= pub_comp_service_init(result->control_packet_proxy);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	68db      	ldr	r3, [r3, #12]
 80046b0:	4618      	mov	r0, r3
 80046b2:	f000 fd40 	bl	8005136 <pub_comp_service_init>
 80046b6:	4602      	mov	r2, r0
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	621a      	str	r2, [r3, #32]
	result->publish_service			= publish_service_init(result->control_packet_proxy);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	68db      	ldr	r3, [r3, #12]
 80046c0:	4618      	mov	r0, r3
 80046c2:	f001 f8b7 	bl	8005834 <publish_service_init>
 80046c6:	4602      	mov	r2, r0
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	625a      	str	r2, [r3, #36]	; 0x24
	result->pub_rec_service			= pub_rec_service_init(result->control_packet_proxy);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	68db      	ldr	r3, [r3, #12]
 80046d0:	4618      	mov	r0, r3
 80046d2:	f000 fdc4 	bl	800525e <pub_rec_service_init>
 80046d6:	4602      	mov	r2, r0
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	629a      	str	r2, [r3, #40]	; 0x28
	result->pub_rel_service			= pub_rel_service_init(result->control_packet_proxy);
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	68db      	ldr	r3, [r3, #12]
 80046e0:	4618      	mov	r0, r3
 80046e2:	f000 fe91 	bl	8005408 <pub_rel_service_init>
 80046e6:	4602      	mov	r2, r0
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	62da      	str	r2, [r3, #44]	; 0x2c
	result->mqtt_service				= mqtt_service_init(result->control_packet_proxy, result->connack_service, result->connect_service, result->disconnect_service, result->pub_ack_service, result->pub_comp_service, result->publish_service, result->pub_rec_service, result->pub_rel_service);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	68dd      	ldr	r5, [r3, #12]
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	691e      	ldr	r6, [r3, #16]
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	f8d3 c014 	ldr.w	ip, [r3, #20]
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	f8d3 e018 	ldr.w	lr, [r3, #24]
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	69db      	ldr	r3, [r3, #28]
 8004704:	68fa      	ldr	r2, [r7, #12]
 8004706:	6a12      	ldr	r2, [r2, #32]
 8004708:	68f9      	ldr	r1, [r7, #12]
 800470a:	6a49      	ldr	r1, [r1, #36]	; 0x24
 800470c:	68f8      	ldr	r0, [r7, #12]
 800470e:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8004710:	68fc      	ldr	r4, [r7, #12]
 8004712:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
 8004714:	9404      	str	r4, [sp, #16]
 8004716:	9003      	str	r0, [sp, #12]
 8004718:	9102      	str	r1, [sp, #8]
 800471a:	9201      	str	r2, [sp, #4]
 800471c:	9300      	str	r3, [sp, #0]
 800471e:	4673      	mov	r3, lr
 8004720:	4662      	mov	r2, ip
 8004722:	4631      	mov	r1, r6
 8004724:	4628      	mov	r0, r5
 8004726:	f000 f8fc 	bl	8004922 <mqtt_service_init>
 800472a:	4602      	mov	r2, r0
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	631a      	str	r2, [r3, #48]	; 0x30

	if( result->wifi == NULL || result->ping_req_service == NULL || result->ping_resp_service == NULL ||
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d02b      	beq.n	8004790 <mqtt_client_init+0x188>
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d027      	beq.n	8004790 <mqtt_client_init+0x188>
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d023      	beq.n	8004790 <mqtt_client_init+0x188>
		result->control_packet_proxy == NULL || result->connack_service == NULL || result->connect_service == NULL ||
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	68db      	ldr	r3, [r3, #12]
	if( result->wifi == NULL || result->ping_req_service == NULL || result->ping_resp_service == NULL ||
 800474c:	2b00      	cmp	r3, #0
 800474e:	d01f      	beq.n	8004790 <mqtt_client_init+0x188>
		result->control_packet_proxy == NULL || result->connack_service == NULL || result->connect_service == NULL ||
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	691b      	ldr	r3, [r3, #16]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d01b      	beq.n	8004790 <mqtt_client_init+0x188>
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	695b      	ldr	r3, [r3, #20]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d017      	beq.n	8004790 <mqtt_client_init+0x188>
		result->disconnect_service == NULL || result->pub_ack_service == NULL || result->pub_comp_service == NULL ||
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	699b      	ldr	r3, [r3, #24]
		result->control_packet_proxy == NULL || result->connack_service == NULL || result->connect_service == NULL ||
 8004764:	2b00      	cmp	r3, #0
 8004766:	d013      	beq.n	8004790 <mqtt_client_init+0x188>
		result->disconnect_service == NULL || result->pub_ack_service == NULL || result->pub_comp_service == NULL ||
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	69db      	ldr	r3, [r3, #28]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d00f      	beq.n	8004790 <mqtt_client_init+0x188>
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	6a1b      	ldr	r3, [r3, #32]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d00b      	beq.n	8004790 <mqtt_client_init+0x188>
		result->publish_service == NULL || result->pub_rec_service == NULL || result->pub_rel_service == NULL ){
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
		result->disconnect_service == NULL || result->pub_ack_service == NULL || result->pub_comp_service == NULL ||
 800477c:	2b00      	cmp	r3, #0
 800477e:	d007      	beq.n	8004790 <mqtt_client_init+0x188>
		result->publish_service == NULL || result->pub_rec_service == NULL || result->pub_rel_service == NULL ){
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004784:	2b00      	cmp	r3, #0
 8004786:	d003      	beq.n	8004790 <mqtt_client_init+0x188>
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800478c:	2b00      	cmp	r3, #0
 800478e:	d104      	bne.n	800479a <mqtt_client_init+0x192>

		mqtt_client_destroy(result);
 8004790:	68f8      	ldr	r0, [r7, #12]
 8004792:	f000 f807 	bl	80047a4 <mqtt_client_destroy>

		return NULL;
 8004796:	2300      	movs	r3, #0
 8004798:	e000      	b.n	800479c <mqtt_client_init+0x194>
	}

	return result;
 800479a:	68fb      	ldr	r3, [r7, #12]
}
 800479c:	4618      	mov	r0, r3
 800479e:	3714      	adds	r7, #20
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080047a4 <mqtt_client_destroy>:

void mqtt_client_destroy(mqtt_client* mqtt_client){
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b082      	sub	sp, #8
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
	if ( mqtt_client == NULL ) return;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d046      	beq.n	8004840 <mqtt_client_destroy+0x9c>

	wifi_destroy(mqtt_client->wifi);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4618      	mov	r0, r3
 80047b8:	f001 fc2b 	bl	8006012 <wifi_destroy>
	ping_req_service_destroy(mqtt_client->ping_req_service);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	4618      	mov	r0, r3
 80047c2:	f000 fb26 	bl	8004e12 <ping_req_service_destroy>
	ping_resp_service_destroy(mqtt_client->ping_resp_service);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	4618      	mov	r0, r3
 80047cc:	f000 fb98 	bl	8004f00 <ping_resp_service_destroy>
	control_packet_proxy_destroy(mqtt_client->control_packet_proxy);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	68db      	ldr	r3, [r3, #12]
 80047d4:	4618      	mov	r0, r3
 80047d6:	f7ff fe5a 	bl	800448e <control_packet_proxy_destroy>
	connack_service_destroy(mqtt_client->connack_service);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	691b      	ldr	r3, [r3, #16]
 80047de:	4618      	mov	r0, r3
 80047e0:	f7ff f9af 	bl	8003b42 <connack_service_destroy>
	connect_service_destroy(mqtt_client->connect_service);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	695b      	ldr	r3, [r3, #20]
 80047e8:	4618      	mov	r0, r3
 80047ea:	f7ff fc76 	bl	80040da <connect_service_destroy>
	disconnect_service_destroy(mqtt_client->disconnect_service);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	699b      	ldr	r3, [r3, #24]
 80047f2:	4618      	mov	r0, r3
 80047f4:	f7ff feee 	bl	80045d4 <disconnect_service_destroy>
	pub_ack_service_destroy(mqtt_client->pub_ack_service);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	69db      	ldr	r3, [r3, #28]
 80047fc:	4618      	mov	r0, r3
 80047fe:	f000 fc1c 	bl	800503a <pub_ack_service_destroy>
	pub_comp_service_destroy(mqtt_client->pub_comp_service);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6a1b      	ldr	r3, [r3, #32]
 8004806:	4618      	mov	r0, r3
 8004808:	f000 fcab 	bl	8005162 <pub_comp_service_destroy>
	publish_service_destroy(mqtt_client->publish_service);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004810:	4618      	mov	r0, r3
 8004812:	f001 f825 	bl	8005860 <publish_service_destroy>
	pub_rec_service_destroy(mqtt_client->pub_rec_service);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800481a:	4618      	mov	r0, r3
 800481c:	f000 fd35 	bl	800528a <pub_rec_service_destroy>
	pub_rel_service_destroy(mqtt_client->pub_rel_service);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004824:	4618      	mov	r0, r3
 8004826:	f000 fe00 	bl	800542a <pub_rel_service_destroy>
	mqtt_service_destroy(mqtt_client->mqtt_service);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800482e:	4618      	mov	r0, r3
 8004830:	f000 f8a3 	bl	800497a <mqtt_service_destroy>

	free(mqtt_client);
 8004834:	6878      	ldr	r0, [r7, #4]
 8004836:	f007 ff6b 	bl	800c710 <free>
	mqtt_client = NULL;
 800483a:	2300      	movs	r3, #0
 800483c:	607b      	str	r3, [r7, #4]
 800483e:	e000      	b.n	8004842 <mqtt_client_destroy+0x9e>
	if ( mqtt_client == NULL ) return;
 8004840:	bf00      	nop
}
 8004842:	3708      	adds	r7, #8
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}

08004848 <mqtt_client_connect>:

void mqtt_client_connect(mqtt_client* mqtt_client, char* id, char* host, unsigned int port, unsigned int keep_alive, bool clean_session){
 8004848:	b580      	push	{r7, lr}
 800484a:	b086      	sub	sp, #24
 800484c:	af02      	add	r7, sp, #8
 800484e:	60f8      	str	r0, [r7, #12]
 8004850:	60b9      	str	r1, [r7, #8]
 8004852:	607a      	str	r2, [r7, #4]
 8004854:	603b      	str	r3, [r7, #0]
	if( mqtt_client == NULL ) return;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d014      	beq.n	8004886 <mqtt_client_connect+0x3e>
	wifi_connect(mqtt_client->wifi, (uint8_t*) SMART_WATER_PROPERTIES_API_GATEWAY_HOST, (unsigned int) SMART_WATER_PROPERTIES_API_GATEWAY_PORT);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	6818      	ldr	r0, [r3, #0]
 8004860:	4b0b      	ldr	r3, [pc, #44]	; (8004890 <mqtt_client_connect+0x48>)
 8004862:	6819      	ldr	r1, [r3, #0]
 8004864:	4b0b      	ldr	r3, [pc, #44]	; (8004894 <mqtt_client_connect+0x4c>)
 8004866:	881b      	ldrh	r3, [r3, #0]
 8004868:	461a      	mov	r2, r3
 800486a:	f001 fc0c 	bl	8006086 <wifi_connect>
	mqtt_service_connect(mqtt_client->mqtt_service, id, host, port, keep_alive, clean_session);
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004872:	7f3b      	ldrb	r3, [r7, #28]
 8004874:	9301      	str	r3, [sp, #4]
 8004876:	69bb      	ldr	r3, [r7, #24]
 8004878:	9300      	str	r3, [sp, #0]
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	687a      	ldr	r2, [r7, #4]
 800487e:	68b9      	ldr	r1, [r7, #8]
 8004880:	f000 f90f 	bl	8004aa2 <mqtt_service_connect>
 8004884:	e000      	b.n	8004888 <mqtt_client_connect+0x40>
	if( mqtt_client == NULL ) return;
 8004886:	bf00      	nop
}
 8004888:	3710      	adds	r7, #16
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}
 800488e:	bf00      	nop
 8004890:	20000010 	.word	0x20000010
 8004894:	20000014 	.word	0x20000014

08004898 <mqtt_client_publish>:

void mqtt_client_publish(mqtt_client* mqtt_client, char* topic, char* payload, unsigned char qos, bool retain){
 8004898:	b580      	push	{r7, lr}
 800489a:	b086      	sub	sp, #24
 800489c:	af02      	add	r7, sp, #8
 800489e:	60f8      	str	r0, [r7, #12]
 80048a0:	60b9      	str	r1, [r7, #8]
 80048a2:	607a      	str	r2, [r7, #4]
 80048a4:	70fb      	strb	r3, [r7, #3]
	if( mqtt_client == NULL ) return;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d00a      	beq.n	80048c2 <mqtt_client_publish+0x2a>
	mqtt_service_publish(mqtt_client->mqtt_service, topic, payload, qos, retain);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80048b0:	78fa      	ldrb	r2, [r7, #3]
 80048b2:	7e3b      	ldrb	r3, [r7, #24]
 80048b4:	9300      	str	r3, [sp, #0]
 80048b6:	4613      	mov	r3, r2
 80048b8:	687a      	ldr	r2, [r7, #4]
 80048ba:	68b9      	ldr	r1, [r7, #8]
 80048bc:	f000 f944 	bl	8004b48 <mqtt_service_publish>
 80048c0:	e000      	b.n	80048c4 <mqtt_client_publish+0x2c>
	if( mqtt_client == NULL ) return;
 80048c2:	bf00      	nop
}
 80048c4:	3710      	adds	r7, #16
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}

080048ca <mqtt_server_request>:

	free(mqtt_server);
	mqtt_server = NULL;
}

void mqtt_server_request(mqtt_server* mqtt_server, bytes* bytes){
 80048ca:	b580      	push	{r7, lr}
 80048cc:	b082      	sub	sp, #8
 80048ce:	af00      	add	r7, sp, #0
 80048d0:	6078      	str	r0, [r7, #4]
 80048d2:	6039      	str	r1, [r7, #0]
	if( mqtt_server == NULL || bytes == NULL) return;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d01f      	beq.n	800491a <mqtt_server_request+0x50>
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d01c      	beq.n	800491a <mqtt_server_request+0x50>

	if( mqtt_server->connect == NULL ){
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d106      	bne.n	80048f6 <mqtt_server_request+0x2c>
		mqtt_server->connect = assembler_build_to_connect(bytes);
 80048e8:	6838      	ldr	r0, [r7, #0]
 80048ea:	f7fe fdd1 	bl	8003490 <assembler_build_to_connect>
 80048ee:	4602      	mov	r2, r0
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	601a      	str	r2, [r3, #0]
 80048f4:	e012      	b.n	800491c <mqtt_server_request+0x52>
	} else if ( mqtt_server->publish == NULL ){
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	689b      	ldr	r3, [r3, #8]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d106      	bne.n	800490c <mqtt_server_request+0x42>
		mqtt_server->publish = assembler_build_to_publish(bytes);
 80048fe:	6838      	ldr	r0, [r7, #0]
 8004900:	f7fe febe 	bl	8003680 <assembler_build_to_publish>
 8004904:	4602      	mov	r2, r0
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	609a      	str	r2, [r3, #8]
 800490a:	e007      	b.n	800491c <mqtt_server_request+0x52>
	} else {
		mqtt_server->pub_rel = assembler_build_to_pub_rel(bytes);
 800490c:	6838      	ldr	r0, [r7, #0]
 800490e:	f7fe ff37 	bl	8003780 <assembler_build_to_pub_rel>
 8004912:	4602      	mov	r2, r0
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	611a      	str	r2, [r3, #16]
 8004918:	e000      	b.n	800491c <mqtt_server_request+0x52>
	if( mqtt_server == NULL || bytes == NULL) return;
 800491a:	bf00      	nop
	}
}
 800491c:	3708      	adds	r7, #8
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}

08004922 <mqtt_service_init>:
unsigned char MQTT_SERVICE_QOS_LEVEL_1 = 0x01;

unsigned char MQTT_SERVICE_QOS_LEVEL_2 = 0x02;


mqtt_service* mqtt_service_init(control_packet_proxy* control_packet_proxy, connack_service* connack_service, connect_service* connect_service, disconnect_service* disconnect_service, pub_ack_service* pub_ack_service, pub_comp_service* pub_comp_service, publish_service* publish_service, pub_rec_service* pub_rec_service, pub_rel_service* pub_rel_service){
 8004922:	b580      	push	{r7, lr}
 8004924:	b086      	sub	sp, #24
 8004926:	af00      	add	r7, sp, #0
 8004928:	60f8      	str	r0, [r7, #12]
 800492a:	60b9      	str	r1, [r7, #8]
 800492c:	607a      	str	r2, [r7, #4]
 800492e:	603b      	str	r3, [r7, #0]
	mqtt_service* result = (mqtt_service*) malloc(sizeof(mqtt_service));
 8004930:	2024      	movs	r0, #36	; 0x24
 8004932:	f007 fee5 	bl	800c700 <malloc>
 8004936:	4603      	mov	r3, r0
 8004938:	617b      	str	r3, [r7, #20]
	result->control_packet_proxy   = control_packet_proxy;
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	68fa      	ldr	r2, [r7, #12]
 800493e:	601a      	str	r2, [r3, #0]
	result->connack_service        = connack_service;
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	68ba      	ldr	r2, [r7, #8]
 8004944:	605a      	str	r2, [r3, #4]
	result->connect_service        = connect_service;
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	687a      	ldr	r2, [r7, #4]
 800494a:	609a      	str	r2, [r3, #8]
	result->disconnect_service     = disconnect_service;
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	683a      	ldr	r2, [r7, #0]
 8004950:	60da      	str	r2, [r3, #12]
	result->pub_ack_service        = pub_ack_service;
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	6a3a      	ldr	r2, [r7, #32]
 8004956:	611a      	str	r2, [r3, #16]
	result->pub_comp_service       = pub_comp_service;
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800495c:	615a      	str	r2, [r3, #20]
	result->publish_service        = publish_service;
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004962:	619a      	str	r2, [r3, #24]
	result->pub_rec_service        = pub_rec_service;
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004968:	61da      	str	r2, [r3, #28]
	result->pub_rel_service        = pub_rel_service;
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800496e:	621a      	str	r2, [r3, #32]
	return result;
 8004970:	697b      	ldr	r3, [r7, #20]
}
 8004972:	4618      	mov	r0, r3
 8004974:	3718      	adds	r7, #24
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}

0800497a <mqtt_service_destroy>:

void mqtt_service_destroy(mqtt_service* mqtt_service){
 800497a:	b580      	push	{r7, lr}
 800497c:	b082      	sub	sp, #8
 800497e:	af00      	add	r7, sp, #0
 8004980:	6078      	str	r0, [r7, #4]
	if( mqtt_service == NULL ) return;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2b00      	cmp	r3, #0
 8004986:	f000 8088 	beq.w	8004a9a <mqtt_service_destroy+0x120>

	control_packet_proxy_destroy(mqtt_service->control_packet_proxy);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4618      	mov	r0, r3
 8004990:	f7ff fd7d 	bl	800448e <control_packet_proxy_destroy>
	connack_service_destroy(mqtt_service->connack_service);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	4618      	mov	r0, r3
 800499a:	f7ff f8d2 	bl	8003b42 <connack_service_destroy>
	connect_service_destroy(mqtt_service->connect_service);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	4618      	mov	r0, r3
 80049a4:	f7ff fb99 	bl	80040da <connect_service_destroy>
	disconnect_service_destroy(mqtt_service->disconnect_service);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	68db      	ldr	r3, [r3, #12]
 80049ac:	4618      	mov	r0, r3
 80049ae:	f7ff fe11 	bl	80045d4 <disconnect_service_destroy>
	pub_ack_service_destroy(mqtt_service->pub_ack_service);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	691b      	ldr	r3, [r3, #16]
 80049b6:	4618      	mov	r0, r3
 80049b8:	f000 fb3f 	bl	800503a <pub_ack_service_destroy>
	pub_comp_service_destroy(mqtt_service->pub_comp_service);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	695b      	ldr	r3, [r3, #20]
 80049c0:	4618      	mov	r0, r3
 80049c2:	f000 fbce 	bl	8005162 <pub_comp_service_destroy>
	publish_service_destroy(mqtt_service->publish_service);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	699b      	ldr	r3, [r3, #24]
 80049ca:	4618      	mov	r0, r3
 80049cc:	f000 ff48 	bl	8005860 <publish_service_destroy>
	pub_rec_service_destroy(mqtt_service->pub_rec_service);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	69db      	ldr	r3, [r3, #28]
 80049d4:	4618      	mov	r0, r3
 80049d6:	f000 fc58 	bl	800528a <pub_rec_service_destroy>
	pub_rel_service_destroy(mqtt_service->pub_rel_service);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6a1b      	ldr	r3, [r3, #32]
 80049de:	4618      	mov	r0, r3
 80049e0:	f000 fd23 	bl	800542a <pub_rel_service_destroy>

	mqtt_service->control_packet_proxy = NULL;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2200      	movs	r2, #0
 80049e8:	701a      	strb	r2, [r3, #0]
 80049ea:	2200      	movs	r2, #0
 80049ec:	705a      	strb	r2, [r3, #1]
 80049ee:	2200      	movs	r2, #0
 80049f0:	709a      	strb	r2, [r3, #2]
 80049f2:	2200      	movs	r2, #0
 80049f4:	70da      	strb	r2, [r3, #3]
	mqtt_service->connack_service = NULL;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2200      	movs	r2, #0
 80049fa:	711a      	strb	r2, [r3, #4]
 80049fc:	2200      	movs	r2, #0
 80049fe:	715a      	strb	r2, [r3, #5]
 8004a00:	2200      	movs	r2, #0
 8004a02:	719a      	strb	r2, [r3, #6]
 8004a04:	2200      	movs	r2, #0
 8004a06:	71da      	strb	r2, [r3, #7]
	mqtt_service->connect_service = NULL;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	721a      	strb	r2, [r3, #8]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	725a      	strb	r2, [r3, #9]
 8004a12:	2200      	movs	r2, #0
 8004a14:	729a      	strb	r2, [r3, #10]
 8004a16:	2200      	movs	r2, #0
 8004a18:	72da      	strb	r2, [r3, #11]
	mqtt_service->disconnect_service = NULL;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	731a      	strb	r2, [r3, #12]
 8004a20:	2200      	movs	r2, #0
 8004a22:	735a      	strb	r2, [r3, #13]
 8004a24:	2200      	movs	r2, #0
 8004a26:	739a      	strb	r2, [r3, #14]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	73da      	strb	r2, [r3, #15]
	mqtt_service->pub_ack_service = NULL;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	741a      	strb	r2, [r3, #16]
 8004a32:	2200      	movs	r2, #0
 8004a34:	745a      	strb	r2, [r3, #17]
 8004a36:	2200      	movs	r2, #0
 8004a38:	749a      	strb	r2, [r3, #18]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	74da      	strb	r2, [r3, #19]
	mqtt_service->pub_comp_service = NULL;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2200      	movs	r2, #0
 8004a42:	751a      	strb	r2, [r3, #20]
 8004a44:	2200      	movs	r2, #0
 8004a46:	755a      	strb	r2, [r3, #21]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	759a      	strb	r2, [r3, #22]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	75da      	strb	r2, [r3, #23]
	mqtt_service->publish_service = NULL;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2200      	movs	r2, #0
 8004a54:	761a      	strb	r2, [r3, #24]
 8004a56:	2200      	movs	r2, #0
 8004a58:	765a      	strb	r2, [r3, #25]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	769a      	strb	r2, [r3, #26]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	76da      	strb	r2, [r3, #27]
	mqtt_service->pub_rec_service = NULL;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2200      	movs	r2, #0
 8004a66:	771a      	strb	r2, [r3, #28]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	775a      	strb	r2, [r3, #29]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	779a      	strb	r2, [r3, #30]
 8004a70:	2200      	movs	r2, #0
 8004a72:	77da      	strb	r2, [r3, #31]
	mqtt_service->pub_rel_service = NULL;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2200      	movs	r2, #0
 8004a78:	f883 2020 	strb.w	r2, [r3, #32]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8004a82:	2200      	movs	r2, #0
 8004a84:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8004a88:	2200      	movs	r2, #0
 8004a8a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

	free(mqtt_service);
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	f007 fe3e 	bl	800c710 <free>
	mqtt_service = NULL;
 8004a94:	2300      	movs	r3, #0
 8004a96:	607b      	str	r3, [r7, #4]
 8004a98:	e000      	b.n	8004a9c <mqtt_service_destroy+0x122>
	if( mqtt_service == NULL ) return;
 8004a9a:	bf00      	nop
}
 8004a9c:	3708      	adds	r7, #8
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}

08004aa2 <mqtt_service_connect>:

void mqtt_service_connect(mqtt_service* mqtt_service, char* id, char* host, unsigned int port, unsigned int keep_alive, bool clean_session){
 8004aa2:	b580      	push	{r7, lr}
 8004aa4:	b088      	sub	sp, #32
 8004aa6:	af00      	add	r7, sp, #0
 8004aa8:	60f8      	str	r0, [r7, #12]
 8004aaa:	60b9      	str	r1, [r7, #8]
 8004aac:	607a      	str	r2, [r7, #4]
 8004aae:	603b      	str	r3, [r7, #0]
    session* session = session_get_instance();
 8004ab0:	f000 ff72 	bl	8005998 <session_get_instance>
 8004ab4:	61f8      	str	r0, [r7, #28]
    session_set_id(session, id);
 8004ab6:	68b9      	ldr	r1, [r7, #8]
 8004ab8:	69f8      	ldr	r0, [r7, #28]
 8004aba:	f001 f83a 	bl	8005b32 <session_set_id>
    session_set_host(session, host);
 8004abe:	6879      	ldr	r1, [r7, #4]
 8004ac0:	69f8      	ldr	r0, [r7, #28]
 8004ac2:	f001 f881 	bl	8005bc8 <session_set_host>
    session_set_port(session, port);
 8004ac6:	6839      	ldr	r1, [r7, #0]
 8004ac8:	69f8      	ldr	r0, [r7, #28]
 8004aca:	f001 f8a3 	bl	8005c14 <session_set_port>
    session_set_keep_alive(session, keep_alive);
 8004ace:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004ad0:	69f8      	ldr	r0, [r7, #28]
 8004ad2:	f001 f8c4 	bl	8005c5e <session_set_keep_alive>
    session_set_clean(session, clean_session);
 8004ad6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004ada:	4619      	mov	r1, r3
 8004adc:	69f8      	ldr	r0, [r7, #28]
 8004ade:	f001 f84e 	bl	8005b7e <session_set_clean>

    connect* connect = connect_service_create(mqtt_service->connect_service);
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f7ff fb12 	bl	8004110 <connect_service_create>
 8004aec:	61b8      	str	r0, [r7, #24]
    connect_service_write(mqtt_service->connect_service, connect);
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	689b      	ldr	r3, [r3, #8]
 8004af2:	69b9      	ldr	r1, [r7, #24]
 8004af4:	4618      	mov	r0, r3
 8004af6:	f7ff fbcb 	bl	8004290 <connect_service_write>
    connack* connack = connack_service_create(mqtt_service->connack_service);
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	4618      	mov	r0, r3
 8004b00:	f7ff f83a 	bl	8003b78 <connack_service_create>
 8004b04:	6178      	str	r0, [r7, #20]

    session_set_connected(session,  session_is_connected(session) && connack_is_connection_accepted(connack) );
 8004b06:	69f8      	ldr	r0, [r7, #28]
 8004b08:	f001 f90a 	bl	8005d20 <session_is_connected>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d007      	beq.n	8004b22 <mqtt_service_connect+0x80>
 8004b12:	6978      	ldr	r0, [r7, #20]
 8004b14:	f7fe ffe7 	bl	8003ae6 <connack_is_connection_accepted>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d001      	beq.n	8004b22 <mqtt_service_connect+0x80>
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e000      	b.n	8004b24 <mqtt_service_connect+0x82>
 8004b22:	2300      	movs	r3, #0
 8004b24:	f003 0301 	and.w	r3, r3, #1
 8004b28:	b2db      	uxtb	r3, r3
 8004b2a:	4619      	mov	r1, r3
 8004b2c:	69f8      	ldr	r0, [r7, #28]
 8004b2e:	f001 f90b 	bl	8005d48 <session_set_connected>

    connack_destroy(connack);
 8004b32:	6978      	ldr	r0, [r7, #20]
 8004b34:	f7fe ffbd 	bl	8003ab2 <connack_destroy>
    connect_destroy(connect);
 8004b38:	69b8      	ldr	r0, [r7, #24]
 8004b3a:	f7ff f915 	bl	8003d68 <connect_destroy>
}
 8004b3e:	bf00      	nop
 8004b40:	3720      	adds	r7, #32
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}
	...

08004b48 <mqtt_service_publish>:

void mqtt_service_publish(mqtt_service* mqtt_service, char* topic, char* payload, unsigned char qos, bool retain){
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b08a      	sub	sp, #40	; 0x28
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	60f8      	str	r0, [r7, #12]
 8004b50:	60b9      	str	r1, [r7, #8]
 8004b52:	607a      	str	r2, [r7, #4]
 8004b54:	70fb      	strb	r3, [r7, #3]
	if( mqtt_service == NULL || topic == NULL || payload == NULL ) return;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	f000 809e 	beq.w	8004c9a <mqtt_service_publish+0x152>
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	f000 809a 	beq.w	8004c9a <mqtt_service_publish+0x152>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	f000 8096 	beq.w	8004c9a <mqtt_service_publish+0x152>

	session* session = session_get_instance();
 8004b6e:	f000 ff13 	bl	8005998 <session_get_instance>
 8004b72:	6278      	str	r0, [r7, #36]	; 0x24
	session_set_qos(session, qos);
 8004b74:	78fb      	ldrb	r3, [r7, #3]
 8004b76:	4619      	mov	r1, r3
 8004b78:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004b7a:	f001 f897 	bl	8005cac <session_set_qos>
	session_set_retain(session, retain);
 8004b7e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004b82:	4619      	mov	r1, r3
 8004b84:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004b86:	f001 f8b8 	bl	8005cfa <session_set_retain>

	if( session_is_connected(session) ){
 8004b8a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004b8c:	f001 f8c8 	bl	8005d20 <session_is_connected>
 8004b90:	4603      	mov	r3, r0
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	f000 8082 	beq.w	8004c9c <mqtt_service_publish+0x154>
		publish* publish = publish_service_create(mqtt_service->publish_service);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	699b      	ldr	r3, [r3, #24]
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	f000 fe79 	bl	8005894 <publish_service_create>
 8004ba2:	6238      	str	r0, [r7, #32]
		publish_set_payload(publish, payload);
 8004ba4:	6879      	ldr	r1, [r7, #4]
 8004ba6:	6a38      	ldr	r0, [r7, #32]
 8004ba8:	f000 fd8a 	bl	80056c0 <publish_set_payload>
		publish_set_topic_name(publish, topic);
 8004bac:	68b9      	ldr	r1, [r7, #8]
 8004bae:	6a38      	ldr	r0, [r7, #32]
 8004bb0:	f000 fd4c 	bl	800564c <publish_set_topic_name>
		publish_service_write(mqtt_service->publish_service, publish);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	699b      	ldr	r3, [r3, #24]
 8004bb8:	6a39      	ldr	r1, [r7, #32]
 8004bba:	4618      	mov	r0, r3
 8004bbc:	f000 fece 	bl	800595c <publish_service_write>

		if ( session_get_qos(session) == PUBLISH_QOS_LEVEL_1 ){
 8004bc0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004bc2:	f001 f85f 	bl	8005c84 <session_get_qos>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	461a      	mov	r2, r3
 8004bca:	4b36      	ldr	r3, [pc, #216]	; (8004ca4 <mqtt_service_publish+0x15c>)
 8004bcc:	781b      	ldrb	r3, [r3, #0]
 8004bce:	429a      	cmp	r2, r3
 8004bd0:	d115      	bne.n	8004bfe <mqtt_service_publish+0xb6>
			session_set_unacknowledged_publish(session, publish);
 8004bd2:	6a39      	ldr	r1, [r7, #32]
 8004bd4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004bd6:	f001 f925 	bl	8005e24 <session_set_unacknowledged_publish>
			pub_ack* pub_ack = pub_ack_service_create(mqtt_service->pub_ack_service);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	691b      	ldr	r3, [r3, #16]
 8004bde:	4618      	mov	r0, r3
 8004be0:	f000 fa45 	bl	800506e <pub_ack_service_create>
 8004be4:	6138      	str	r0, [r7, #16]
			session_confirm(session, pub_ack_get_packet_identifier(pub_ack));
 8004be6:	6938      	ldr	r0, [r7, #16]
 8004be8:	f000 fa00 	bl	8004fec <pub_ack_get_packet_identifier>
 8004bec:	4603      	mov	r3, r0
 8004bee:	4619      	mov	r1, r3
 8004bf0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004bf2:	f001 f941 	bl	8005e78 <session_confirm>

			pub_ack_destroy(pub_ack);
 8004bf6:	6938      	ldr	r0, [r7, #16]
 8004bf8:	f000 f9de 	bl	8004fb8 <pub_ack_destroy>
 8004bfc:	e049      	b.n	8004c92 <mqtt_service_publish+0x14a>
		} else if ( session_get_qos(session) == PUBLISH_QOS_LEVEL_2 ){
 8004bfe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004c00:	f001 f840 	bl	8005c84 <session_get_qos>
 8004c04:	4603      	mov	r3, r0
 8004c06:	461a      	mov	r2, r3
 8004c08:	4b27      	ldr	r3, [pc, #156]	; (8004ca8 <mqtt_service_publish+0x160>)
 8004c0a:	781b      	ldrb	r3, [r3, #0]
 8004c0c:	429a      	cmp	r2, r3
 8004c0e:	d140      	bne.n	8004c92 <mqtt_service_publish+0x14a>
			session_set_unacknowledged_publish(session, publish);
 8004c10:	6a39      	ldr	r1, [r7, #32]
 8004c12:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004c14:	f001 f906 	bl	8005e24 <session_set_unacknowledged_publish>

			pub_rec* pub_rec = pub_rec_service_create(mqtt_service->pub_rec_service);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	69db      	ldr	r3, [r3, #28]
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	f000 fb4d 	bl	80052bc <pub_rec_service_create>
 8004c22:	61f8      	str	r0, [r7, #28]
			session_confirm(session, pub_rec_get_packet_identifier(pub_rec));
 8004c24:	69f8      	ldr	r0, [r7, #28]
 8004c26:	f000 fb09 	bl	800523c <pub_rec_get_packet_identifier>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	4619      	mov	r1, r3
 8004c2e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004c30:	f001 f922 	bl	8005e78 <session_confirm>
			session_set_unacknowledged_pub_rec(session, pub_rec);
 8004c34:	69f9      	ldr	r1, [r7, #28]
 8004c36:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004c38:	f001 f909 	bl	8005e4e <session_set_unacknowledged_pub_rec>

			pub_rel* pub_rel = pub_rel_service_create(mqtt_service->pub_rel_service);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	6a1b      	ldr	r3, [r3, #32]
 8004c40:	4618      	mov	r0, r3
 8004c42:	f000 fc0c 	bl	800545e <pub_rel_service_create>
 8004c46:	61b8      	str	r0, [r7, #24]
			pub_rel_set_packet_identifier(pub_rel, publish_get_packet_identifier(publish));
 8004c48:	6a38      	ldr	r0, [r7, #32]
 8004c4a:	f000 fd12 	bl	8005672 <publish_get_packet_identifier>
 8004c4e:	4603      	mov	r3, r0
 8004c50:	4619      	mov	r1, r3
 8004c52:	69b8      	ldr	r0, [r7, #24]
 8004c54:	f000 fb97 	bl	8005386 <pub_rel_set_packet_identifier>
			pub_rel_service_write(mqtt_service->pub_rel_service, pub_rel);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	6a1b      	ldr	r3, [r3, #32]
 8004c5c:	69b9      	ldr	r1, [r7, #24]
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f000 fc16 	bl	8005490 <pub_rel_service_write>

			pub_comp* pub_comp = pub_comp_service_create(mqtt_service->pub_comp_service);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	695b      	ldr	r3, [r3, #20]
 8004c68:	4618      	mov	r0, r3
 8004c6a:	f000 fa94 	bl	8005196 <pub_comp_service_create>
 8004c6e:	6178      	str	r0, [r7, #20]
			session_confirm(session, pub_comp_get_packet_identifier(pub_comp));
 8004c70:	6978      	ldr	r0, [r7, #20]
 8004c72:	f000 fa4f 	bl	8005114 <pub_comp_get_packet_identifier>
 8004c76:	4603      	mov	r3, r0
 8004c78:	4619      	mov	r1, r3
 8004c7a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004c7c:	f001 f8fc 	bl	8005e78 <session_confirm>

			pub_comp_destroy(pub_comp);
 8004c80:	6978      	ldr	r0, [r7, #20]
 8004c82:	f000 fa2d 	bl	80050e0 <pub_comp_destroy>
			pub_rel_destroy(pub_rel);
 8004c86:	69b8      	ldr	r0, [r7, #24]
 8004c88:	f000 fb52 	bl	8005330 <pub_rel_destroy>
			pub_rec_destroy(pub_rec);
 8004c8c:	69f8      	ldr	r0, [r7, #28]
 8004c8e:	f000 fabb 	bl	8005208 <pub_rec_destroy>
		}

		publish_destroy(publish);
 8004c92:	6a38      	ldr	r0, [r7, #32]
 8004c94:	f000 fcae 	bl	80055f4 <publish_destroy>
 8004c98:	e000      	b.n	8004c9c <mqtt_service_publish+0x154>
	if( mqtt_service == NULL || topic == NULL || payload == NULL ) return;
 8004c9a:	bf00      	nop
	}
}
 8004c9c:	3728      	adds	r7, #40	; 0x28
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}
 8004ca2:	bf00      	nop
 8004ca4:	200000d8 	.word	0x200000d8
 8004ca8:	200000d9 	.word	0x200000d9

08004cac <packet_util_build_bytes>:
#include "../../Inc/mqtt_client/packet_util.h"

bytes* packet_util_build_bytes(char* input){
 8004cac:	b590      	push	{r4, r7, lr}
 8004cae:	b087      	sub	sp, #28
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
	bytes* result = bytes_init();
 8004cb4:	f7fe fdc0 	bl	8003838 <bytes_init>
 8004cb8:	6178      	str	r0, [r7, #20]

	unsigned int length = string_util_length(input);
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f003 fab9 	bl	8008232 <string_util_length>
 8004cc0:	6138      	str	r0, [r7, #16]
	unsigned char msb_length = (unsigned char) ( (0xFF00 & length) >> 8 );
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	0a1b      	lsrs	r3, r3, #8
 8004cc6:	73fb      	strb	r3, [r7, #15]
	unsigned char lsb_length = (unsigned char) ( 0x00FF & length );
 8004cc8:	693b      	ldr	r3, [r7, #16]
 8004cca:	73bb      	strb	r3, [r7, #14]
	bytes_push_back(result, msb_length);
 8004ccc:	7bfb      	ldrb	r3, [r7, #15]
 8004cce:	4619      	mov	r1, r3
 8004cd0:	6978      	ldr	r0, [r7, #20]
 8004cd2:	f7fe fe50 	bl	8003976 <bytes_push_back>
	bytes_push_back(result, lsb_length);
 8004cd6:	7bbb      	ldrb	r3, [r7, #14]
 8004cd8:	4619      	mov	r1, r3
 8004cda:	6978      	ldr	r0, [r7, #20]
 8004cdc:	f7fe fe4b 	bl	8003976 <bytes_push_back>

	for(register int i = 0; i < length; i++)
 8004ce0:	2400      	movs	r4, #0
 8004ce2:	e008      	b.n	8004cf6 <packet_util_build_bytes+0x4a>
		bytes_push_back(result, (unsigned char) input[i] );
 8004ce4:	4622      	mov	r2, r4
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	4413      	add	r3, r2
 8004cea:	781b      	ldrb	r3, [r3, #0]
 8004cec:	4619      	mov	r1, r3
 8004cee:	6978      	ldr	r0, [r7, #20]
 8004cf0:	f7fe fe41 	bl	8003976 <bytes_push_back>
	for(register int i = 0; i < length; i++)
 8004cf4:	3401      	adds	r4, #1
 8004cf6:	4622      	mov	r2, r4
 8004cf8:	693b      	ldr	r3, [r7, #16]
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d8f2      	bhi.n	8004ce4 <packet_util_build_bytes+0x38>

	return result;
 8004cfe:	697b      	ldr	r3, [r7, #20]
}
 8004d00:	4618      	mov	r0, r3
 8004d02:	371c      	adds	r7, #28
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bd90      	pop	{r4, r7, pc}

08004d08 <packet_util_build_string>:



char* packet_util_build_string(bytes* bytes, unsigned int* from){
 8004d08:	b5b0      	push	{r4, r5, r7, lr}
 8004d0a:	b086      	sub	sp, #24
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
 8004d10:	6039      	str	r1, [r7, #0]
	unsigned int msb_length = (unsigned int) ( bytes_at(bytes, *from) << 8);
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4619      	mov	r1, r3
 8004d18:	6878      	ldr	r0, [r7, #4]
 8004d1a:	f7fe fdfe 	bl	800391a <bytes_at>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	021b      	lsls	r3, r3, #8
 8004d22:	617b      	str	r3, [r7, #20]
	unsigned int lsb_length = (unsigned int) (bytes_at(bytes, (*from)+1));
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	3301      	adds	r3, #1
 8004d2a:	4619      	mov	r1, r3
 8004d2c:	6878      	ldr	r0, [r7, #4]
 8004d2e:	f7fe fdf4 	bl	800391a <bytes_at>
 8004d32:	4603      	mov	r3, r0
 8004d34:	613b      	str	r3, [r7, #16]
	unsigned int length = msb_length + lsb_length;
 8004d36:	697a      	ldr	r2, [r7, #20]
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	4413      	add	r3, r2
 8004d3c:	60fb      	str	r3, [r7, #12]

	char* field = string_util_build_empty_string(length+1);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	3301      	adds	r3, #1
 8004d42:	4618      	mov	r0, r3
 8004d44:	f003 fa81 	bl	800824a <string_util_build_empty_string>
 8004d48:	60b8      	str	r0, [r7, #8]

	for(register unsigned int i = 0; i < length; i++ )
 8004d4a:	2400      	movs	r4, #0
 8004d4c:	e00c      	b.n	8004d68 <packet_util_build_string+0x60>
		field[i] = (char) bytes_at(bytes, *from + i + 2);
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4423      	add	r3, r4
 8004d54:	1c9a      	adds	r2, r3, #2
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	191d      	adds	r5, r3, r4
 8004d5a:	4611      	mov	r1, r2
 8004d5c:	6878      	ldr	r0, [r7, #4]
 8004d5e:	f7fe fddc 	bl	800391a <bytes_at>
 8004d62:	4603      	mov	r3, r0
 8004d64:	702b      	strb	r3, [r5, #0]
	for(register unsigned int i = 0; i < length; i++ )
 8004d66:	3401      	adds	r4, #1
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	429c      	cmp	r4, r3
 8004d6c:	d3ef      	bcc.n	8004d4e <packet_util_build_string+0x46>

	*from = *from + length + 2;
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	681a      	ldr	r2, [r3, #0]
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	4413      	add	r3, r2
 8004d76:	1c9a      	adds	r2, r3, #2
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	601a      	str	r2, [r3, #0]
	return field;
 8004d7c:	68bb      	ldr	r3, [r7, #8]
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3718      	adds	r7, #24
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bdb0      	pop	{r4, r5, r7, pc}
	...

08004d88 <ping_req_init>:
#include "../../Inc/mqtt_client/ping_req.h"


ping_req* ping_req_init(){
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b082      	sub	sp, #8
 8004d8c:	af00      	add	r7, sp, #0
	ping_req* result = (ping_req*) malloc(sizeof(ping_req));
 8004d8e:	2004      	movs	r0, #4
 8004d90:	f007 fcb6 	bl	800c700 <malloc>
 8004d94:	4603      	mov	r3, r0
 8004d96:	607b      	str	r3, [r7, #4]
	result->control_packet = control_packet_init(CONTROL_PACKET_TYPE_PINGREQ, CONTROL_PACKET_FLAG_PINGREQ, 0x00);
 8004d98:	4b07      	ldr	r3, [pc, #28]	; (8004db8 <ping_req_init+0x30>)
 8004d9a:	7818      	ldrb	r0, [r3, #0]
 8004d9c:	4b07      	ldr	r3, [pc, #28]	; (8004dbc <ping_req_init+0x34>)
 8004d9e:	781b      	ldrb	r3, [r3, #0]
 8004da0:	2200      	movs	r2, #0
 8004da2:	4619      	mov	r1, r3
 8004da4:	f7ff fab8 	bl	8004318 <control_packet_init>
 8004da8:	4602      	mov	r2, r0
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	601a      	str	r2, [r3, #0]
	return result;
 8004dae:	687b      	ldr	r3, [r7, #4]
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	3708      	adds	r7, #8
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}
 8004db8:	08011766 	.word	0x08011766
 8004dbc:	0801176e 	.word	0x0801176e

08004dc0 <ping_req_to_bytes>:

	free(ping_req);
	ping_req = NULL;
}

bytes* ping_req_to_bytes(ping_req* ping_req){
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b082      	sub	sp, #8
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
	if( ping_req == NULL ) return NULL;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d101      	bne.n	8004dd2 <ping_req_to_bytes+0x12>
 8004dce:	2300      	movs	r3, #0
 8004dd0:	e005      	b.n	8004dde <ping_req_to_bytes+0x1e>
	return control_packet_to_bytes(ping_req->control_packet);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f7ff faf1 	bl	80043be <control_packet_to_bytes>
 8004ddc:	4603      	mov	r3, r0
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	3708      	adds	r7, #8
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}

08004de6 <ping_req_service_init>:
#include "../../Inc/mqtt_client/ping_req_service.h"


ping_req_service* ping_req_service_init(wifi* wifi){
 8004de6:	b580      	push	{r7, lr}
 8004de8:	b084      	sub	sp, #16
 8004dea:	af00      	add	r7, sp, #0
 8004dec:	6078      	str	r0, [r7, #4]
	if( wifi == NULL ) return NULL;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d101      	bne.n	8004df8 <ping_req_service_init+0x12>
 8004df4:	2300      	movs	r3, #0
 8004df6:	e008      	b.n	8004e0a <ping_req_service_init+0x24>
	ping_req_service* result = (ping_req_service*) malloc(sizeof(ping_req_service));
 8004df8:	2004      	movs	r0, #4
 8004dfa:	f007 fc81 	bl	800c700 <malloc>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	60fb      	str	r3, [r7, #12]
	result->wifi = wifi;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	687a      	ldr	r2, [r7, #4]
 8004e06:	601a      	str	r2, [r3, #0]
	return result;
 8004e08:	68fb      	ldr	r3, [r7, #12]
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	3710      	adds	r7, #16
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}

08004e12 <ping_req_service_destroy>:

void ping_req_service_destroy(ping_req_service* ping_req_service){
 8004e12:	b580      	push	{r7, lr}
 8004e14:	b082      	sub	sp, #8
 8004e16:	af00      	add	r7, sp, #0
 8004e18:	6078      	str	r0, [r7, #4]
	if( ping_req_service == NULL ) return;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d00e      	beq.n	8004e3e <ping_req_service_destroy+0x2c>
	ping_req_service->wifi = NULL;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2200      	movs	r2, #0
 8004e24:	701a      	strb	r2, [r3, #0]
 8004e26:	2200      	movs	r2, #0
 8004e28:	705a      	strb	r2, [r3, #1]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	709a      	strb	r2, [r3, #2]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	70da      	strb	r2, [r3, #3]
	free(ping_req_service);
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	f007 fc6c 	bl	800c710 <free>
	ping_req_service = NULL;
 8004e38:	2300      	movs	r3, #0
 8004e3a:	607b      	str	r3, [r7, #4]
 8004e3c:	e000      	b.n	8004e40 <ping_req_service_destroy+0x2e>
	if( ping_req_service == NULL ) return;
 8004e3e:	bf00      	nop
}
 8004e40:	3708      	adds	r7, #8
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd80      	pop	{r7, pc}

08004e46 <ping_req_service_create>:

ping_req* ping_req_service_create(ping_req_service* ping_req_service){
 8004e46:	b580      	push	{r7, lr}
 8004e48:	b082      	sub	sp, #8
 8004e4a:	af00      	add	r7, sp, #0
 8004e4c:	6078      	str	r0, [r7, #4]
	if( ping_req_service == NULL ) return NULL;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d101      	bne.n	8004e58 <ping_req_service_create+0x12>
 8004e54:	2300      	movs	r3, #0
 8004e56:	e002      	b.n	8004e5e <ping_req_service_create+0x18>
	return ping_req_init();
 8004e58:	f7ff ff96 	bl	8004d88 <ping_req_init>
 8004e5c:	4603      	mov	r3, r0
}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	3708      	adds	r7, #8
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}

08004e66 <ping_req_service_write>:
    ping_req* ping_req = bytes_is_empty(bytes)? NULL : ping_req_init(bytes);
    bytes_destroy(bytes);
    return ping_req;
}

void ping_req_service_write(ping_req_service* ping_req_service, ping_req* ping_req){
 8004e66:	b580      	push	{r7, lr}
 8004e68:	b084      	sub	sp, #16
 8004e6a:	af00      	add	r7, sp, #0
 8004e6c:	6078      	str	r0, [r7, #4]
 8004e6e:	6039      	str	r1, [r7, #0]
	if( ping_req == NULL ) return;
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d00d      	beq.n	8004e92 <ping_req_service_write+0x2c>
	bytes* bytes = ping_req_to_bytes(ping_req);
 8004e76:	6838      	ldr	r0, [r7, #0]
 8004e78:	f7ff ffa2 	bl	8004dc0 <ping_req_to_bytes>
 8004e7c:	60f8      	str	r0, [r7, #12]
	wifi_write(ping_req_service->wifi, bytes);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	68f9      	ldr	r1, [r7, #12]
 8004e84:	4618      	mov	r0, r3
 8004e86:	f001 f948 	bl	800611a <wifi_write>
	bytes_destroy(bytes);
 8004e8a:	68f8      	ldr	r0, [r7, #12]
 8004e8c:	f7fe fcfc 	bl	8003888 <bytes_destroy>
 8004e90:	e000      	b.n	8004e94 <ping_req_service_write+0x2e>
	if( ping_req == NULL ) return;
 8004e92:	bf00      	nop
}
 8004e94:	3710      	adds	r7, #16
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}
	...

08004e9c <ping_resp_init>:
#include "../../Inc/mqtt_client/ping_resp.h"


ping_resp* ping_resp_init(){
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b082      	sub	sp, #8
 8004ea0:	af00      	add	r7, sp, #0
	ping_resp* result = (ping_resp*) malloc(sizeof(ping_resp));
 8004ea2:	2004      	movs	r0, #4
 8004ea4:	f007 fc2c 	bl	800c700 <malloc>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	607b      	str	r3, [r7, #4]
	result->control_packet = control_packet_init(CONTROL_PACKET_TYPE_PINGRESP, CONTROL_PACKET_FLAG_PINGRESP, 0x00);
 8004eac:	4b07      	ldr	r3, [pc, #28]	; (8004ecc <ping_resp_init+0x30>)
 8004eae:	7818      	ldrb	r0, [r3, #0]
 8004eb0:	4b07      	ldr	r3, [pc, #28]	; (8004ed0 <ping_resp_init+0x34>)
 8004eb2:	781b      	ldrb	r3, [r3, #0]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	4619      	mov	r1, r3
 8004eb8:	f7ff fa2e 	bl	8004318 <control_packet_init>
 8004ebc:	4602      	mov	r2, r0
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	601a      	str	r2, [r3, #0]
	return result;
 8004ec2:	687b      	ldr	r3, [r7, #4]
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	3708      	adds	r7, #8
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bd80      	pop	{r7, pc}
 8004ecc:	08011767 	.word	0x08011767
 8004ed0:	0801176f 	.word	0x0801176f

08004ed4 <ping_resp_service_init>:
#include "../../Inc/mqtt_client/ping_resp_service.h"


ping_resp_service* ping_resp_service_init(wifi* wifi){
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b084      	sub	sp, #16
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
	if( wifi == NULL ) return NULL;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d101      	bne.n	8004ee6 <ping_resp_service_init+0x12>
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	e008      	b.n	8004ef8 <ping_resp_service_init+0x24>
	ping_resp_service* result = (ping_resp_service*) malloc(sizeof(ping_resp_service));
 8004ee6:	2004      	movs	r0, #4
 8004ee8:	f007 fc0a 	bl	800c700 <malloc>
 8004eec:	4603      	mov	r3, r0
 8004eee:	60fb      	str	r3, [r7, #12]
	result->wifi = wifi;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	687a      	ldr	r2, [r7, #4]
 8004ef4:	601a      	str	r2, [r3, #0]
	return result;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	3710      	adds	r7, #16
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}

08004f00 <ping_resp_service_destroy>:

void ping_resp_service_destroy(ping_resp_service* ping_resp_service){
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b082      	sub	sp, #8
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
	if( ping_resp_service == NULL ) return;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d00e      	beq.n	8004f2c <ping_resp_service_destroy+0x2c>
	ping_resp_service->wifi = NULL;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2200      	movs	r2, #0
 8004f12:	701a      	strb	r2, [r3, #0]
 8004f14:	2200      	movs	r2, #0
 8004f16:	705a      	strb	r2, [r3, #1]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	709a      	strb	r2, [r3, #2]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	70da      	strb	r2, [r3, #3]
	free(ping_resp_service);
 8004f20:	6878      	ldr	r0, [r7, #4]
 8004f22:	f007 fbf5 	bl	800c710 <free>
	ping_resp_service = NULL;
 8004f26:	2300      	movs	r3, #0
 8004f28:	607b      	str	r3, [r7, #4]
 8004f2a:	e000      	b.n	8004f2e <ping_resp_service_destroy+0x2e>
	if( ping_resp_service == NULL ) return;
 8004f2c:	bf00      	nop
}
 8004f2e:	3708      	adds	r7, #8
 8004f30:	46bd      	mov	sp, r7
 8004f32:	bd80      	pop	{r7, pc}

08004f34 <ping_resp_service_read>:
ping_resp* ping_resp_service_create(ping_resp_service* ping_resp_service){
	if( ping_resp_service == NULL ) return NULL;
	return ping_resp_init();
}

ping_resp* ping_resp_service_read(ping_resp_service* ping_resp_service){
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b084      	sub	sp, #16
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
	if( ping_resp_service == NULL ) return NULL;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d101      	bne.n	8004f46 <ping_resp_service_read+0x12>
 8004f42:	2300      	movs	r3, #0
 8004f44:	e013      	b.n	8004f6e <ping_resp_service_read+0x3a>
    bytes* bytes = wifi_read(ping_resp_service->wifi);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	f001 f8d5 	bl	80060fa <wifi_read>
 8004f50:	60f8      	str	r0, [r7, #12]
    ping_resp* ping_resp = bytes_is_empty(bytes)? NULL : ping_resp_init(bytes);
 8004f52:	68f8      	ldr	r0, [r7, #12]
 8004f54:	f7fe fccc 	bl	80038f0 <bytes_is_empty>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d104      	bne.n	8004f68 <ping_resp_service_read+0x34>
 8004f5e:	68f8      	ldr	r0, [r7, #12]
 8004f60:	f7ff ff9c 	bl	8004e9c <ping_resp_init>
 8004f64:	4603      	mov	r3, r0
 8004f66:	e000      	b.n	8004f6a <ping_resp_service_read+0x36>
 8004f68:	2300      	movs	r3, #0
 8004f6a:	60bb      	str	r3, [r7, #8]
    return ping_resp;
 8004f6c:	68bb      	ldr	r3, [r7, #8]
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3710      	adds	r7, #16
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}
	...

08004f78 <pub_ack_init>:
#include "../../Inc/mqtt_client/pub_ack.h"


pub_ack* pub_ack_init(unsigned int packet_identifier){
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b084      	sub	sp, #16
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
	pub_ack* result = (pub_ack*) malloc(sizeof(pub_ack));
 8004f80:	2008      	movs	r0, #8
 8004f82:	f007 fbbd 	bl	800c700 <malloc>
 8004f86:	4603      	mov	r3, r0
 8004f88:	60fb      	str	r3, [r7, #12]
	result->control_packet = control_packet_init(CONTROL_PACKET_TYPE_PUBACK, CONTROL_PACKET_FLAG_PUBACK, 0x00);
 8004f8a:	4b09      	ldr	r3, [pc, #36]	; (8004fb0 <pub_ack_init+0x38>)
 8004f8c:	7818      	ldrb	r0, [r3, #0]
 8004f8e:	4b09      	ldr	r3, [pc, #36]	; (8004fb4 <pub_ack_init+0x3c>)
 8004f90:	781b      	ldrb	r3, [r3, #0]
 8004f92:	2200      	movs	r2, #0
 8004f94:	4619      	mov	r1, r3
 8004f96:	f7ff f9bf 	bl	8004318 <control_packet_init>
 8004f9a:	4602      	mov	r2, r0
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	601a      	str	r2, [r3, #0]
	result->packet_identifier = packet_identifier;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	687a      	ldr	r2, [r7, #4]
 8004fa4:	605a      	str	r2, [r3, #4]
	return result;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	3710      	adds	r7, #16
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bd80      	pop	{r7, pc}
 8004fb0:	08011762 	.word	0x08011762
 8004fb4:	0801176a 	.word	0x0801176a

08004fb8 <pub_ack_destroy>:

void pub_ack_destroy(pub_ack* pub_ack){
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b082      	sub	sp, #8
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
	if( pub_ack == NULL ) return;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d00e      	beq.n	8004fe4 <pub_ack_destroy+0x2c>

	pub_ack->control_packet = NULL;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	701a      	strb	r2, [r3, #0]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	705a      	strb	r2, [r3, #1]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	709a      	strb	r2, [r3, #2]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	70da      	strb	r2, [r3, #3]

	free(pub_ack);
 8004fd8:	6878      	ldr	r0, [r7, #4]
 8004fda:	f007 fb99 	bl	800c710 <free>
	pub_ack = NULL;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	607b      	str	r3, [r7, #4]
 8004fe2:	e000      	b.n	8004fe6 <pub_ack_destroy+0x2e>
	if( pub_ack == NULL ) return;
 8004fe4:	bf00      	nop
}
 8004fe6:	3708      	adds	r7, #8
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bd80      	pop	{r7, pc}

08004fec <pub_ack_get_packet_identifier>:

unsigned int pub_ack_get_packet_identifier(pub_ack* pub_ack){
 8004fec:	b480      	push	{r7}
 8004fee:	b083      	sub	sp, #12
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
	return pub_ack == NULL ? 0 : pub_ack->packet_identifier;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d002      	beq.n	8005000 <pub_ack_get_packet_identifier+0x14>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	e000      	b.n	8005002 <pub_ack_get_packet_identifier+0x16>
 8005000:	2300      	movs	r3, #0
}
 8005002:	4618      	mov	r0, r3
 8005004:	370c      	adds	r7, #12
 8005006:	46bd      	mov	sp, r7
 8005008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500c:	4770      	bx	lr

0800500e <pub_ack_service_init>:
#include "../../Inc/mqtt_client/pub_ack_service.h"


pub_ack_service* pub_ack_service_init(control_packet_proxy* control_packet_proxy){
 800500e:	b580      	push	{r7, lr}
 8005010:	b084      	sub	sp, #16
 8005012:	af00      	add	r7, sp, #0
 8005014:	6078      	str	r0, [r7, #4]
	if( control_packet_proxy == NULL ) return NULL;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d101      	bne.n	8005020 <pub_ack_service_init+0x12>
 800501c:	2300      	movs	r3, #0
 800501e:	e008      	b.n	8005032 <pub_ack_service_init+0x24>
	pub_ack_service* result = (pub_ack_service*) malloc(sizeof(pub_ack_service));
 8005020:	2004      	movs	r0, #4
 8005022:	f007 fb6d 	bl	800c700 <malloc>
 8005026:	4603      	mov	r3, r0
 8005028:	60fb      	str	r3, [r7, #12]
	result->control_packet_proxy = control_packet_proxy;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	687a      	ldr	r2, [r7, #4]
 800502e:	601a      	str	r2, [r3, #0]
	return result;
 8005030:	68fb      	ldr	r3, [r7, #12]
}
 8005032:	4618      	mov	r0, r3
 8005034:	3710      	adds	r7, #16
 8005036:	46bd      	mov	sp, r7
 8005038:	bd80      	pop	{r7, pc}

0800503a <pub_ack_service_destroy>:

void pub_ack_service_destroy(pub_ack_service* pub_ack_service){
 800503a:	b580      	push	{r7, lr}
 800503c:	b082      	sub	sp, #8
 800503e:	af00      	add	r7, sp, #0
 8005040:	6078      	str	r0, [r7, #4]
	if( pub_ack_service == NULL ) return;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d00e      	beq.n	8005066 <pub_ack_service_destroy+0x2c>
	pub_ack_service->control_packet_proxy = NULL;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2200      	movs	r2, #0
 800504c:	701a      	strb	r2, [r3, #0]
 800504e:	2200      	movs	r2, #0
 8005050:	705a      	strb	r2, [r3, #1]
 8005052:	2200      	movs	r2, #0
 8005054:	709a      	strb	r2, [r3, #2]
 8005056:	2200      	movs	r2, #0
 8005058:	70da      	strb	r2, [r3, #3]
	free(pub_ack_service);
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	f007 fb58 	bl	800c710 <free>
	pub_ack_service = NULL;
 8005060:	2300      	movs	r3, #0
 8005062:	607b      	str	r3, [r7, #4]
 8005064:	e000      	b.n	8005068 <pub_ack_service_destroy+0x2e>
	if( pub_ack_service == NULL ) return;
 8005066:	bf00      	nop
}
 8005068:	3708      	adds	r7, #8
 800506a:	46bd      	mov	sp, r7
 800506c:	bd80      	pop	{r7, pc}

0800506e <pub_ack_service_create>:

pub_ack* pub_ack_service_create(pub_ack_service* pub_ack_service){
 800506e:	b580      	push	{r7, lr}
 8005070:	b086      	sub	sp, #24
 8005072:	af00      	add	r7, sp, #0
 8005074:	6078      	str	r0, [r7, #4]
	if( pub_ack_service == NULL ) return NULL;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d101      	bne.n	8005080 <pub_ack_service_create+0x12>
 800507c:	2300      	movs	r3, #0
 800507e:	e00b      	b.n	8005098 <pub_ack_service_create+0x2a>
	session* session = session_get_instance();
 8005080:	f000 fc8a 	bl	8005998 <session_get_instance>
 8005084:	6178      	str	r0, [r7, #20]
	unsigned int packet_identifier = session_get_last_packet_identifier(session);
 8005086:	6978      	ldr	r0, [r7, #20]
 8005088:	f000 ff76 	bl	8005f78 <session_get_last_packet_identifier>
 800508c:	6138      	str	r0, [r7, #16]
	pub_ack* pub_ack = pub_ack_init(packet_identifier);
 800508e:	6938      	ldr	r0, [r7, #16]
 8005090:	f7ff ff72 	bl	8004f78 <pub_ack_init>
 8005094:	60f8      	str	r0, [r7, #12]
	return pub_ack;
 8005096:	68fb      	ldr	r3, [r7, #12]
}
 8005098:	4618      	mov	r0, r3
 800509a:	3718      	adds	r7, #24
 800509c:	46bd      	mov	sp, r7
 800509e:	bd80      	pop	{r7, pc}

080050a0 <pub_comp_init>:
#include "../../Inc/mqtt_client/pub_comp.h"

pub_comp* pub_comp_init(unsigned int packet_identifier){
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b084      	sub	sp, #16
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
	pub_comp* result = (pub_comp*) malloc(sizeof(pub_comp));
 80050a8:	2008      	movs	r0, #8
 80050aa:	f007 fb29 	bl	800c700 <malloc>
 80050ae:	4603      	mov	r3, r0
 80050b0:	60fb      	str	r3, [r7, #12]
	result->control_packet = control_packet_init(CONTROL_PACKET_TYPE_PUBCOMP, CONTROL_PACKET_FLAG_PUBCOMP, 0x00);
 80050b2:	4b09      	ldr	r3, [pc, #36]	; (80050d8 <pub_comp_init+0x38>)
 80050b4:	7818      	ldrb	r0, [r3, #0]
 80050b6:	4b09      	ldr	r3, [pc, #36]	; (80050dc <pub_comp_init+0x3c>)
 80050b8:	781b      	ldrb	r3, [r3, #0]
 80050ba:	2200      	movs	r2, #0
 80050bc:	4619      	mov	r1, r3
 80050be:	f7ff f92b 	bl	8004318 <control_packet_init>
 80050c2:	4602      	mov	r2, r0
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	601a      	str	r2, [r3, #0]
	result->packet_identifier = packet_identifier;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	687a      	ldr	r2, [r7, #4]
 80050cc:	605a      	str	r2, [r3, #4]
	return result;
 80050ce:	68fb      	ldr	r3, [r7, #12]
}
 80050d0:	4618      	mov	r0, r3
 80050d2:	3710      	adds	r7, #16
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bd80      	pop	{r7, pc}
 80050d8:	08011765 	.word	0x08011765
 80050dc:	0801176d 	.word	0x0801176d

080050e0 <pub_comp_destroy>:

void pub_comp_destroy(pub_comp* pub_comp){
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b082      	sub	sp, #8
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
	if( pub_comp == NULL ) return;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d00e      	beq.n	800510c <pub_comp_destroy+0x2c>

	pub_comp->control_packet = NULL;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2200      	movs	r2, #0
 80050f2:	701a      	strb	r2, [r3, #0]
 80050f4:	2200      	movs	r2, #0
 80050f6:	705a      	strb	r2, [r3, #1]
 80050f8:	2200      	movs	r2, #0
 80050fa:	709a      	strb	r2, [r3, #2]
 80050fc:	2200      	movs	r2, #0
 80050fe:	70da      	strb	r2, [r3, #3]

	free(pub_comp);
 8005100:	6878      	ldr	r0, [r7, #4]
 8005102:	f007 fb05 	bl	800c710 <free>
	pub_comp = NULL;
 8005106:	2300      	movs	r3, #0
 8005108:	607b      	str	r3, [r7, #4]
 800510a:	e000      	b.n	800510e <pub_comp_destroy+0x2e>
	if( pub_comp == NULL ) return;
 800510c:	bf00      	nop
}
 800510e:	3708      	adds	r7, #8
 8005110:	46bd      	mov	sp, r7
 8005112:	bd80      	pop	{r7, pc}

08005114 <pub_comp_get_packet_identifier>:

unsigned int pub_comp_get_packet_identifier(pub_comp* pub_comp){
 8005114:	b480      	push	{r7}
 8005116:	b083      	sub	sp, #12
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
	return pub_comp == NULL ? 0 : pub_comp->packet_identifier;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d002      	beq.n	8005128 <pub_comp_get_packet_identifier+0x14>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	e000      	b.n	800512a <pub_comp_get_packet_identifier+0x16>
 8005128:	2300      	movs	r3, #0
}
 800512a:	4618      	mov	r0, r3
 800512c:	370c      	adds	r7, #12
 800512e:	46bd      	mov	sp, r7
 8005130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005134:	4770      	bx	lr

08005136 <pub_comp_service_init>:
#include "../../Inc/mqtt_client/pub_comp_service.h"


pub_comp_service* pub_comp_service_init(control_packet_proxy* control_packet_proxy){
 8005136:	b580      	push	{r7, lr}
 8005138:	b084      	sub	sp, #16
 800513a:	af00      	add	r7, sp, #0
 800513c:	6078      	str	r0, [r7, #4]
	if( control_packet_proxy == NULL ) return NULL;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d101      	bne.n	8005148 <pub_comp_service_init+0x12>
 8005144:	2300      	movs	r3, #0
 8005146:	e008      	b.n	800515a <pub_comp_service_init+0x24>
	pub_comp_service* result = (pub_comp_service*) malloc(sizeof(pub_comp_service));
 8005148:	2004      	movs	r0, #4
 800514a:	f007 fad9 	bl	800c700 <malloc>
 800514e:	4603      	mov	r3, r0
 8005150:	60fb      	str	r3, [r7, #12]
	result->control_packet_proxy = control_packet_proxy;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	687a      	ldr	r2, [r7, #4]
 8005156:	601a      	str	r2, [r3, #0]
	return result;
 8005158:	68fb      	ldr	r3, [r7, #12]
}
 800515a:	4618      	mov	r0, r3
 800515c:	3710      	adds	r7, #16
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}

08005162 <pub_comp_service_destroy>:

void pub_comp_service_destroy(pub_comp_service* pub_comp_service){
 8005162:	b580      	push	{r7, lr}
 8005164:	b082      	sub	sp, #8
 8005166:	af00      	add	r7, sp, #0
 8005168:	6078      	str	r0, [r7, #4]
	if( pub_comp_service == NULL ) return;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d00e      	beq.n	800518e <pub_comp_service_destroy+0x2c>
	pub_comp_service->control_packet_proxy = NULL;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2200      	movs	r2, #0
 8005174:	701a      	strb	r2, [r3, #0]
 8005176:	2200      	movs	r2, #0
 8005178:	705a      	strb	r2, [r3, #1]
 800517a:	2200      	movs	r2, #0
 800517c:	709a      	strb	r2, [r3, #2]
 800517e:	2200      	movs	r2, #0
 8005180:	70da      	strb	r2, [r3, #3]
	free(pub_comp_service);
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	f007 fac4 	bl	800c710 <free>
	pub_comp_service = NULL;
 8005188:	2300      	movs	r3, #0
 800518a:	607b      	str	r3, [r7, #4]
 800518c:	e000      	b.n	8005190 <pub_comp_service_destroy+0x2e>
	if( pub_comp_service == NULL ) return;
 800518e:	bf00      	nop
}
 8005190:	3708      	adds	r7, #8
 8005192:	46bd      	mov	sp, r7
 8005194:	bd80      	pop	{r7, pc}

08005196 <pub_comp_service_create>:

pub_comp* pub_comp_service_create(pub_comp_service* pub_comp_service){
 8005196:	b580      	push	{r7, lr}
 8005198:	b086      	sub	sp, #24
 800519a:	af00      	add	r7, sp, #0
 800519c:	6078      	str	r0, [r7, #4]
	if( pub_comp_service == NULL ) return NULL;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d101      	bne.n	80051a8 <pub_comp_service_create+0x12>
 80051a4:	2300      	movs	r3, #0
 80051a6:	e00b      	b.n	80051c0 <pub_comp_service_create+0x2a>
    session* session = session_get_instance();
 80051a8:	f000 fbf6 	bl	8005998 <session_get_instance>
 80051ac:	6178      	str	r0, [r7, #20]
    unsigned int packet_identifier = session_get_last_packet_identifier(session);
 80051ae:	6978      	ldr	r0, [r7, #20]
 80051b0:	f000 fee2 	bl	8005f78 <session_get_last_packet_identifier>
 80051b4:	6138      	str	r0, [r7, #16]
    pub_comp* pub_comp = pub_comp_init(packet_identifier);
 80051b6:	6938      	ldr	r0, [r7, #16]
 80051b8:	f7ff ff72 	bl	80050a0 <pub_comp_init>
 80051bc:	60f8      	str	r0, [r7, #12]
    return pub_comp;
 80051be:	68fb      	ldr	r3, [r7, #12]
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	3718      	adds	r7, #24
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd80      	pop	{r7, pc}

080051c8 <pub_rec_init>:
#include "../../Inc/mqtt_client/pub_rec.h"


pub_rec* pub_rec_init(unsigned int packet_identifier){
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b084      	sub	sp, #16
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
	pub_rec* result = (pub_rec*) malloc(sizeof(pub_rec));
 80051d0:	2008      	movs	r0, #8
 80051d2:	f007 fa95 	bl	800c700 <malloc>
 80051d6:	4603      	mov	r3, r0
 80051d8:	60fb      	str	r3, [r7, #12]
	result->control_packet = control_packet_init(CONTROL_PACKET_TYPE_PUBREC, CONTROL_PACKET_FLAG_PUBREC, 0x00);
 80051da:	4b09      	ldr	r3, [pc, #36]	; (8005200 <pub_rec_init+0x38>)
 80051dc:	7818      	ldrb	r0, [r3, #0]
 80051de:	4b09      	ldr	r3, [pc, #36]	; (8005204 <pub_rec_init+0x3c>)
 80051e0:	781b      	ldrb	r3, [r3, #0]
 80051e2:	2200      	movs	r2, #0
 80051e4:	4619      	mov	r1, r3
 80051e6:	f7ff f897 	bl	8004318 <control_packet_init>
 80051ea:	4602      	mov	r2, r0
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	601a      	str	r2, [r3, #0]
	result->packet_identifier = packet_identifier;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	687a      	ldr	r2, [r7, #4]
 80051f4:	605a      	str	r2, [r3, #4]
	return result;
 80051f6:	68fb      	ldr	r3, [r7, #12]
}
 80051f8:	4618      	mov	r0, r3
 80051fa:	3710      	adds	r7, #16
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bd80      	pop	{r7, pc}
 8005200:	08011763 	.word	0x08011763
 8005204:	0801176b 	.word	0x0801176b

08005208 <pub_rec_destroy>:

void pub_rec_destroy(pub_rec* pub_rec){
 8005208:	b580      	push	{r7, lr}
 800520a:	b082      	sub	sp, #8
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
	if( pub_rec == NULL ) return;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d00e      	beq.n	8005234 <pub_rec_destroy+0x2c>

	pub_rec->control_packet = NULL;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2200      	movs	r2, #0
 800521a:	701a      	strb	r2, [r3, #0]
 800521c:	2200      	movs	r2, #0
 800521e:	705a      	strb	r2, [r3, #1]
 8005220:	2200      	movs	r2, #0
 8005222:	709a      	strb	r2, [r3, #2]
 8005224:	2200      	movs	r2, #0
 8005226:	70da      	strb	r2, [r3, #3]

	free(pub_rec);
 8005228:	6878      	ldr	r0, [r7, #4]
 800522a:	f007 fa71 	bl	800c710 <free>
	pub_rec = NULL;
 800522e:	2300      	movs	r3, #0
 8005230:	607b      	str	r3, [r7, #4]
 8005232:	e000      	b.n	8005236 <pub_rec_destroy+0x2e>
	if( pub_rec == NULL ) return;
 8005234:	bf00      	nop
}
 8005236:	3708      	adds	r7, #8
 8005238:	46bd      	mov	sp, r7
 800523a:	bd80      	pop	{r7, pc}

0800523c <pub_rec_get_packet_identifier>:

unsigned int pub_rec_get_packet_identifier(pub_rec* pub_rec){
 800523c:	b480      	push	{r7}
 800523e:	b083      	sub	sp, #12
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
	return pub_rec == NULL ? 0 : pub_rec->packet_identifier;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d002      	beq.n	8005250 <pub_rec_get_packet_identifier+0x14>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	e000      	b.n	8005252 <pub_rec_get_packet_identifier+0x16>
 8005250:	2300      	movs	r3, #0
}
 8005252:	4618      	mov	r0, r3
 8005254:	370c      	adds	r7, #12
 8005256:	46bd      	mov	sp, r7
 8005258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525c:	4770      	bx	lr

0800525e <pub_rec_service_init>:
#include "../../Inc/mqtt_client/pub_rec_service.h"


pub_rec_service* pub_rec_service_init(control_packet_proxy* control_packet_proxy){
 800525e:	b580      	push	{r7, lr}
 8005260:	b084      	sub	sp, #16
 8005262:	af00      	add	r7, sp, #0
 8005264:	6078      	str	r0, [r7, #4]
	if( control_packet_proxy == NULL ) return NULL;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d101      	bne.n	8005270 <pub_rec_service_init+0x12>
 800526c:	2300      	movs	r3, #0
 800526e:	e008      	b.n	8005282 <pub_rec_service_init+0x24>
	pub_rec_service* result = (pub_rec_service*) malloc(sizeof(pub_rec_service));
 8005270:	2004      	movs	r0, #4
 8005272:	f007 fa45 	bl	800c700 <malloc>
 8005276:	4603      	mov	r3, r0
 8005278:	60fb      	str	r3, [r7, #12]
	result->control_packet_proxy = control_packet_proxy;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	687a      	ldr	r2, [r7, #4]
 800527e:	601a      	str	r2, [r3, #0]
	return result;
 8005280:	68fb      	ldr	r3, [r7, #12]
}
 8005282:	4618      	mov	r0, r3
 8005284:	3710      	adds	r7, #16
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}

0800528a <pub_rec_service_destroy>:

void pub_rec_service_destroy(pub_rec_service* pub_rec_service){
 800528a:	b480      	push	{r7}
 800528c:	b083      	sub	sp, #12
 800528e:	af00      	add	r7, sp, #0
 8005290:	6078      	str	r0, [r7, #4]
	if( pub_rec_service == NULL ) return;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d00b      	beq.n	80052b0 <pub_rec_service_destroy+0x26>
	pub_rec_service->control_packet_proxy = NULL;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2200      	movs	r2, #0
 800529c:	701a      	strb	r2, [r3, #0]
 800529e:	2200      	movs	r2, #0
 80052a0:	705a      	strb	r2, [r3, #1]
 80052a2:	2200      	movs	r2, #0
 80052a4:	709a      	strb	r2, [r3, #2]
 80052a6:	2200      	movs	r2, #0
 80052a8:	70da      	strb	r2, [r3, #3]
	pub_rec_service = NULL;
 80052aa:	2300      	movs	r3, #0
 80052ac:	607b      	str	r3, [r7, #4]
 80052ae:	e000      	b.n	80052b2 <pub_rec_service_destroy+0x28>
	if( pub_rec_service == NULL ) return;
 80052b0:	bf00      	nop
}
 80052b2:	370c      	adds	r7, #12
 80052b4:	46bd      	mov	sp, r7
 80052b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ba:	4770      	bx	lr

080052bc <pub_rec_service_create>:

pub_rec* pub_rec_service_create(pub_rec_service* pub_rec_service){
 80052bc:	b580      	push	{r7, lr}
 80052be:	b086      	sub	sp, #24
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
	if( pub_rec_service == NULL ) return NULL;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d101      	bne.n	80052ce <pub_rec_service_create+0x12>
 80052ca:	2300      	movs	r3, #0
 80052cc:	e00b      	b.n	80052e6 <pub_rec_service_create+0x2a>
    session* session = session_get_instance();
 80052ce:	f000 fb63 	bl	8005998 <session_get_instance>
 80052d2:	6178      	str	r0, [r7, #20]
    unsigned int packet_identifier = session_get_last_packet_identifier(session);
 80052d4:	6978      	ldr	r0, [r7, #20]
 80052d6:	f000 fe4f 	bl	8005f78 <session_get_last_packet_identifier>
 80052da:	6138      	str	r0, [r7, #16]
    pub_rec* result = pub_rec_init(packet_identifier);
 80052dc:	6938      	ldr	r0, [r7, #16]
 80052de:	f7ff ff73 	bl	80051c8 <pub_rec_init>
 80052e2:	60f8      	str	r0, [r7, #12]
    return result;
 80052e4:	68fb      	ldr	r3, [r7, #12]
}
 80052e6:	4618      	mov	r0, r3
 80052e8:	3718      	adds	r7, #24
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}
	...

080052f0 <pub_rel_init>:
#include "../../Inc/mqtt_client/pub_rel.h"

pub_rel* pub_rel_init(unsigned int packet_identifier){
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b084      	sub	sp, #16
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
	pub_rel* result = (pub_rel*) malloc(sizeof(pub_rel));
 80052f8:	2008      	movs	r0, #8
 80052fa:	f007 fa01 	bl	800c700 <malloc>
 80052fe:	4603      	mov	r3, r0
 8005300:	60fb      	str	r3, [r7, #12]
	result->control_packet = control_packet_init(CONTROL_PACKET_TYPE_PUBREL, CONTROL_PACKET_FLAG_PUBREL, 0x02);
 8005302:	4b09      	ldr	r3, [pc, #36]	; (8005328 <pub_rel_init+0x38>)
 8005304:	7818      	ldrb	r0, [r3, #0]
 8005306:	4b09      	ldr	r3, [pc, #36]	; (800532c <pub_rel_init+0x3c>)
 8005308:	781b      	ldrb	r3, [r3, #0]
 800530a:	2202      	movs	r2, #2
 800530c:	4619      	mov	r1, r3
 800530e:	f7ff f803 	bl	8004318 <control_packet_init>
 8005312:	4602      	mov	r2, r0
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	601a      	str	r2, [r3, #0]
	result->packet_identifier = packet_identifier;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	687a      	ldr	r2, [r7, #4]
 800531c:	605a      	str	r2, [r3, #4]

	return result;
 800531e:	68fb      	ldr	r3, [r7, #12]
}
 8005320:	4618      	mov	r0, r3
 8005322:	3710      	adds	r7, #16
 8005324:	46bd      	mov	sp, r7
 8005326:	bd80      	pop	{r7, pc}
 8005328:	08011764 	.word	0x08011764
 800532c:	0801176c 	.word	0x0801176c

08005330 <pub_rel_destroy>:

void pub_rel_destroy(pub_rel* pub_rel){
 8005330:	b580      	push	{r7, lr}
 8005332:	b082      	sub	sp, #8
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
	if( pub_rel == NULL ) return;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d00e      	beq.n	800535c <pub_rel_destroy+0x2c>

	pub_rel->control_packet = NULL;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2200      	movs	r2, #0
 8005342:	701a      	strb	r2, [r3, #0]
 8005344:	2200      	movs	r2, #0
 8005346:	705a      	strb	r2, [r3, #1]
 8005348:	2200      	movs	r2, #0
 800534a:	709a      	strb	r2, [r3, #2]
 800534c:	2200      	movs	r2, #0
 800534e:	70da      	strb	r2, [r3, #3]

	free(pub_rel);
 8005350:	6878      	ldr	r0, [r7, #4]
 8005352:	f007 f9dd 	bl	800c710 <free>
	pub_rel = NULL;
 8005356:	2300      	movs	r3, #0
 8005358:	607b      	str	r3, [r7, #4]
 800535a:	e000      	b.n	800535e <pub_rel_destroy+0x2e>
	if( pub_rel == NULL ) return;
 800535c:	bf00      	nop
}
 800535e:	3708      	adds	r7, #8
 8005360:	46bd      	mov	sp, r7
 8005362:	bd80      	pop	{r7, pc}

08005364 <pub_rel_get_packet_identifier>:

unsigned int pub_rel_get_packet_identifier(pub_rel* pub_rel){
 8005364:	b480      	push	{r7}
 8005366:	b083      	sub	sp, #12
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
	return pub_rel == NULL ? 0 : pub_rel->packet_identifier;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d002      	beq.n	8005378 <pub_rel_get_packet_identifier+0x14>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	e000      	b.n	800537a <pub_rel_get_packet_identifier+0x16>
 8005378:	2300      	movs	r3, #0
}
 800537a:	4618      	mov	r0, r3
 800537c:	370c      	adds	r7, #12
 800537e:	46bd      	mov	sp, r7
 8005380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005384:	4770      	bx	lr

08005386 <pub_rel_set_packet_identifier>:

void pub_rel_set_packet_identifier(pub_rel* pub_rel, unsigned int packet_identifier){
 8005386:	b480      	push	{r7}
 8005388:	b083      	sub	sp, #12
 800538a:	af00      	add	r7, sp, #0
 800538c:	6078      	str	r0, [r7, #4]
 800538e:	6039      	str	r1, [r7, #0]
	if( pub_rel == NULL ) return;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d003      	beq.n	800539e <pub_rel_set_packet_identifier+0x18>
	pub_rel->packet_identifier = packet_identifier;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	683a      	ldr	r2, [r7, #0]
 800539a:	605a      	str	r2, [r3, #4]
 800539c:	e000      	b.n	80053a0 <pub_rel_set_packet_identifier+0x1a>
	if( pub_rel == NULL ) return;
 800539e:	bf00      	nop
}
 80053a0:	370c      	adds	r7, #12
 80053a2:	46bd      	mov	sp, r7
 80053a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a8:	4770      	bx	lr

080053aa <pub_rel_to_bytes>:

bytes* pub_rel_to_bytes(pub_rel* pub_rel){
 80053aa:	b580      	push	{r7, lr}
 80053ac:	b086      	sub	sp, #24
 80053ae:	af00      	add	r7, sp, #0
 80053b0:	6078      	str	r0, [r7, #4]
	if( pub_rel == NULL ) return NULL;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d101      	bne.n	80053bc <pub_rel_to_bytes+0x12>
 80053b8:	2300      	movs	r3, #0
 80053ba:	e021      	b.n	8005400 <pub_rel_to_bytes+0x56>

    bytes* packet_identifier = bytes_init();
 80053bc:	f7fe fa3c 	bl	8003838 <bytes_init>
 80053c0:	6178      	str	r0, [r7, #20]
    unsigned char msb_packet_identifier = (unsigned char) ( (0xFF00 & pub_rel->packet_identifier) >> 8 );
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	685b      	ldr	r3, [r3, #4]
 80053c6:	0a1b      	lsrs	r3, r3, #8
 80053c8:	74fb      	strb	r3, [r7, #19]
    unsigned char lsb_packet_identifier = (unsigned char) ( 0x00FF & pub_rel->packet_identifier);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	74bb      	strb	r3, [r7, #18]
    bytes_push_back(packet_identifier, msb_packet_identifier);
 80053d0:	7cfb      	ldrb	r3, [r7, #19]
 80053d2:	4619      	mov	r1, r3
 80053d4:	6978      	ldr	r0, [r7, #20]
 80053d6:	f7fe face 	bl	8003976 <bytes_push_back>
    bytes_push_back(packet_identifier, lsb_packet_identifier);
 80053da:	7cbb      	ldrb	r3, [r7, #18]
 80053dc:	4619      	mov	r1, r3
 80053de:	6978      	ldr	r0, [r7, #20]
 80053e0:	f7fe fac9 	bl	8003976 <bytes_push_back>

    bytes* result = control_packet_to_bytes(pub_rel->control_packet);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4618      	mov	r0, r3
 80053ea:	f7fe ffe8 	bl	80043be <control_packet_to_bytes>
 80053ee:	60f8      	str	r0, [r7, #12]
    bytes_concat(result, packet_identifier);
 80053f0:	6979      	ldr	r1, [r7, #20]
 80053f2:	68f8      	ldr	r0, [r7, #12]
 80053f4:	f7fe fafb 	bl	80039ee <bytes_concat>
    bytes_destroy(packet_identifier);
 80053f8:	6978      	ldr	r0, [r7, #20]
 80053fa:	f7fe fa45 	bl	8003888 <bytes_destroy>
    return result;
 80053fe:	68fb      	ldr	r3, [r7, #12]
}
 8005400:	4618      	mov	r0, r3
 8005402:	3718      	adds	r7, #24
 8005404:	46bd      	mov	sp, r7
 8005406:	bd80      	pop	{r7, pc}

08005408 <pub_rel_service_init>:
#include "../../Inc/mqtt_client/pub_rel_service.h"

pub_rel_service* pub_rel_service_init(control_packet_proxy* control_packet_proxy){
 8005408:	b580      	push	{r7, lr}
 800540a:	b084      	sub	sp, #16
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
	pub_rel_service* result = (pub_rel_service*) malloc(sizeof(pub_rel_service));
 8005410:	2004      	movs	r0, #4
 8005412:	f007 f975 	bl	800c700 <malloc>
 8005416:	4603      	mov	r3, r0
 8005418:	60fb      	str	r3, [r7, #12]
	result->control_packet_proxy = control_packet_proxy;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	687a      	ldr	r2, [r7, #4]
 800541e:	601a      	str	r2, [r3, #0]
	return result;
 8005420:	68fb      	ldr	r3, [r7, #12]
}
 8005422:	4618      	mov	r0, r3
 8005424:	3710      	adds	r7, #16
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}

0800542a <pub_rel_service_destroy>:

void pub_rel_service_destroy(pub_rel_service* pub_rel_service){
 800542a:	b580      	push	{r7, lr}
 800542c:	b082      	sub	sp, #8
 800542e:	af00      	add	r7, sp, #0
 8005430:	6078      	str	r0, [r7, #4]
	if( pub_rel_service == NULL ) return;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d00e      	beq.n	8005456 <pub_rel_service_destroy+0x2c>
	pub_rel_service->control_packet_proxy = NULL;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2200      	movs	r2, #0
 800543c:	701a      	strb	r2, [r3, #0]
 800543e:	2200      	movs	r2, #0
 8005440:	705a      	strb	r2, [r3, #1]
 8005442:	2200      	movs	r2, #0
 8005444:	709a      	strb	r2, [r3, #2]
 8005446:	2200      	movs	r2, #0
 8005448:	70da      	strb	r2, [r3, #3]
	free(pub_rel_service);
 800544a:	6878      	ldr	r0, [r7, #4]
 800544c:	f007 f960 	bl	800c710 <free>
	pub_rel_service = NULL;
 8005450:	2300      	movs	r3, #0
 8005452:	607b      	str	r3, [r7, #4]
 8005454:	e000      	b.n	8005458 <pub_rel_service_destroy+0x2e>
	if( pub_rel_service == NULL ) return;
 8005456:	bf00      	nop
}
 8005458:	3708      	adds	r7, #8
 800545a:	46bd      	mov	sp, r7
 800545c:	bd80      	pop	{r7, pc}

0800545e <pub_rel_service_create>:

pub_rel* pub_rel_service_create(pub_rel_service* pub_rel_service){
 800545e:	b580      	push	{r7, lr}
 8005460:	b086      	sub	sp, #24
 8005462:	af00      	add	r7, sp, #0
 8005464:	6078      	str	r0, [r7, #4]
	if( pub_rel_service == NULL ) return NULL;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d101      	bne.n	8005470 <pub_rel_service_create+0x12>
 800546c:	2300      	movs	r3, #0
 800546e:	e00b      	b.n	8005488 <pub_rel_service_create+0x2a>
	session* session = session_get_instance();
 8005470:	f000 fa92 	bl	8005998 <session_get_instance>
 8005474:	6178      	str	r0, [r7, #20]
	unsigned int packet_identifier = session_get_last_packet_identifier(session);
 8005476:	6978      	ldr	r0, [r7, #20]
 8005478:	f000 fd7e 	bl	8005f78 <session_get_last_packet_identifier>
 800547c:	6138      	str	r0, [r7, #16]
	pub_rel* result= pub_rel_init(packet_identifier);
 800547e:	6938      	ldr	r0, [r7, #16]
 8005480:	f7ff ff36 	bl	80052f0 <pub_rel_init>
 8005484:	60f8      	str	r0, [r7, #12]
	return result;
 8005486:	68fb      	ldr	r3, [r7, #12]
}
 8005488:	4618      	mov	r0, r3
 800548a:	3718      	adds	r7, #24
 800548c:	46bd      	mov	sp, r7
 800548e:	bd80      	pop	{r7, pc}

08005490 <pub_rel_service_write>:
	pub_rel* pub_rel = bytes_is_empty(bytes) ? NULL : assembler_build_to_pub_rel(bytes);
	bytes_destroy(bytes);
	return pub_rel;
}

void pub_rel_service_write(pub_rel_service* pub_rel_service, pub_rel* pub_rel){
 8005490:	b580      	push	{r7, lr}
 8005492:	b084      	sub	sp, #16
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
 8005498:	6039      	str	r1, [r7, #0]
	if ( pub_rel_service == NULL ||  pub_rel == NULL ) return;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d010      	beq.n	80054c2 <pub_rel_service_write+0x32>
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d00d      	beq.n	80054c2 <pub_rel_service_write+0x32>
	bytes* bytes = pub_rel_to_bytes(pub_rel);
 80054a6:	6838      	ldr	r0, [r7, #0]
 80054a8:	f7ff ff7f 	bl	80053aa <pub_rel_to_bytes>
 80054ac:	60f8      	str	r0, [r7, #12]
	control_packet_proxy_write(pub_rel_service->control_packet_proxy, bytes);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	68f9      	ldr	r1, [r7, #12]
 80054b4:	4618      	mov	r0, r3
 80054b6:	f7ff f83e 	bl	8004536 <control_packet_proxy_write>
	bytes_destroy(bytes);
 80054ba:	68f8      	ldr	r0, [r7, #12]
 80054bc:	f7fe f9e4 	bl	8003888 <bytes_destroy>
 80054c0:	e000      	b.n	80054c4 <pub_rel_service_write+0x34>
	if ( pub_rel_service == NULL ||  pub_rel == NULL ) return;
 80054c2:	bf00      	nop
}
 80054c4:	3710      	adds	r7, #16
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bd80      	pop	{r7, pc}
	...

080054cc <publish_init>:

unsigned char PUBLISH_QOS_LEVEL_1 = 0x01;

unsigned char PUBLISH_QOS_LEVEL_2 = 0x02;

publish* publish_init(bool dup, unsigned char qos_level, bool retain){
 80054cc:	b590      	push	{r4, r7, lr}
 80054ce:	b085      	sub	sp, #20
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	4603      	mov	r3, r0
 80054d4:	71fb      	strb	r3, [r7, #7]
 80054d6:	460b      	mov	r3, r1
 80054d8:	71bb      	strb	r3, [r7, #6]
 80054da:	4613      	mov	r3, r2
 80054dc:	717b      	strb	r3, [r7, #5]
	publish* result = (publish*) malloc(sizeof(publish));
 80054de:	2011      	movs	r0, #17
 80054e0:	f007 f90e 	bl	800c700 <malloc>
 80054e4:	4603      	mov	r3, r0
 80054e6:	60fb      	str	r3, [r7, #12]
	result->control_packet = control_packet_init(CONTROL_PACKET_TYPE_PUBLISH, CONTROL_PACKET_FLAG_PUBLISH, 0x00);
 80054e8:	4b40      	ldr	r3, [pc, #256]	; (80055ec <publish_init+0x120>)
 80054ea:	7818      	ldrb	r0, [r3, #0]
 80054ec:	4b40      	ldr	r3, [pc, #256]	; (80055f0 <publish_init+0x124>)
 80054ee:	781b      	ldrb	r3, [r3, #0]
 80054f0:	2200      	movs	r2, #0
 80054f2:	4619      	mov	r1, r3
 80054f4:	f7fe ff10 	bl	8004318 <control_packet_init>
 80054f8:	4602      	mov	r2, r0
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	601a      	str	r2, [r3, #0]

	result->qos_level         = qos_level;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	79ba      	ldrb	r2, [r7, #6]
 8005502:	715a      	strb	r2, [r3, #5]
	result->dup               = result->qos_level == 0x00 ? false : dup;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	795b      	ldrb	r3, [r3, #5]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d004      	beq.n	8005516 <publish_init+0x4a>
 800550c:	79fb      	ldrb	r3, [r7, #7]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d001      	beq.n	8005516 <publish_init+0x4a>
 8005512:	2201      	movs	r2, #1
 8005514:	e000      	b.n	8005518 <publish_init+0x4c>
 8005516:	2200      	movs	r2, #0
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	711a      	strb	r2, [r3, #4]
    result->retain            = retain;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	797a      	ldrb	r2, [r7, #5]
 8005520:	719a      	strb	r2, [r3, #6]
    result->topic_name        = NULL;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	2200      	movs	r2, #0
 8005526:	71da      	strb	r2, [r3, #7]
 8005528:	2200      	movs	r2, #0
 800552a:	721a      	strb	r2, [r3, #8]
 800552c:	2200      	movs	r2, #0
 800552e:	725a      	strb	r2, [r3, #9]
 8005530:	2200      	movs	r2, #0
 8005532:	729a      	strb	r2, [r3, #10]
    result->packet_identifier = 0;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	2200      	movs	r2, #0
 8005538:	72da      	strb	r2, [r3, #11]
 800553a:	2200      	movs	r2, #0
 800553c:	731a      	strb	r2, [r3, #12]
    result->payload           = NULL;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	2200      	movs	r2, #0
 8005542:	735a      	strb	r2, [r3, #13]
 8005544:	2200      	movs	r2, #0
 8005546:	739a      	strb	r2, [r3, #14]
 8005548:	2200      	movs	r2, #0
 800554a:	73da      	strb	r2, [r3, #15]
 800554c:	2200      	movs	r2, #0
 800554e:	741a      	strb	r2, [r3, #16]
    control_packet_set_flags(result->control_packet, 0x00);
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	2100      	movs	r1, #0
 8005556:	4618      	mov	r0, r3
 8005558:	f7fe ff0b 	bl	8004372 <control_packet_set_flags>
    control_packet_set_flags(result->control_packet, result->dup == true ? (0x01 << 3) : control_packet_get_flags(result->control_packet) );
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681c      	ldr	r4, [r3, #0]
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	791b      	ldrb	r3, [r3, #4]
 8005564:	2b01      	cmp	r3, #1
 8005566:	d006      	beq.n	8005576 <publish_init+0xaa>
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4618      	mov	r0, r3
 800556e:	f7fe feef 	bl	8004350 <control_packet_get_flags>
 8005572:	4603      	mov	r3, r0
 8005574:	e000      	b.n	8005578 <publish_init+0xac>
 8005576:	2308      	movs	r3, #8
 8005578:	4619      	mov	r1, r3
 800557a:	4620      	mov	r0, r4
 800557c:	f7fe fef9 	bl	8004372 <control_packet_set_flags>
    control_packet_set_flags(result->control_packet, control_packet_get_flags(result->control_packet) | ( (result->qos_level & 0x03) << 1 ) );
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681c      	ldr	r4, [r3, #0]
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4618      	mov	r0, r3
 800558a:	f7fe fee1 	bl	8004350 <control_packet_get_flags>
 800558e:	4603      	mov	r3, r0
 8005590:	b25a      	sxtb	r2, r3
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	795b      	ldrb	r3, [r3, #5]
 8005596:	005b      	lsls	r3, r3, #1
 8005598:	b25b      	sxtb	r3, r3
 800559a:	f003 0306 	and.w	r3, r3, #6
 800559e:	b25b      	sxtb	r3, r3
 80055a0:	4313      	orrs	r3, r2
 80055a2:	b25b      	sxtb	r3, r3
 80055a4:	b2db      	uxtb	r3, r3
 80055a6:	4619      	mov	r1, r3
 80055a8:	4620      	mov	r0, r4
 80055aa:	f7fe fee2 	bl	8004372 <control_packet_set_flags>
    control_packet_set_flags(result->control_packet, result->retain ? control_packet_get_flags(result->control_packet) | 0x01 : control_packet_get_flags(result->control_packet));
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681c      	ldr	r4, [r3, #0]
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	799b      	ldrb	r3, [r3, #6]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d009      	beq.n	80055ce <publish_init+0x102>
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4618      	mov	r0, r3
 80055c0:	f7fe fec6 	bl	8004350 <control_packet_get_flags>
 80055c4:	4603      	mov	r3, r0
 80055c6:	f043 0301 	orr.w	r3, r3, #1
 80055ca:	b2db      	uxtb	r3, r3
 80055cc:	e005      	b.n	80055da <publish_init+0x10e>
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4618      	mov	r0, r3
 80055d4:	f7fe febc 	bl	8004350 <control_packet_get_flags>
 80055d8:	4603      	mov	r3, r0
 80055da:	4619      	mov	r1, r3
 80055dc:	4620      	mov	r0, r4
 80055de:	f7fe fec8 	bl	8004372 <control_packet_set_flags>

    return result;
 80055e2:	68fb      	ldr	r3, [r7, #12]
}
 80055e4:	4618      	mov	r0, r3
 80055e6:	3714      	adds	r7, #20
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bd90      	pop	{r4, r7, pc}
 80055ec:	08011761 	.word	0x08011761
 80055f0:	08011769 	.word	0x08011769

080055f4 <publish_destroy>:

void publish_destroy(publish* publish){
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b082      	sub	sp, #8
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
	if( publish == NULL ) return;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d020      	beq.n	8005644 <publish_destroy+0x50>

	publish->control_packet = NULL;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2200      	movs	r2, #0
 8005606:	701a      	strb	r2, [r3, #0]
 8005608:	2200      	movs	r2, #0
 800560a:	705a      	strb	r2, [r3, #1]
 800560c:	2200      	movs	r2, #0
 800560e:	709a      	strb	r2, [r3, #2]
 8005610:	2200      	movs	r2, #0
 8005612:	70da      	strb	r2, [r3, #3]
	publish->topic_name = NULL;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2200      	movs	r2, #0
 8005618:	71da      	strb	r2, [r3, #7]
 800561a:	2200      	movs	r2, #0
 800561c:	721a      	strb	r2, [r3, #8]
 800561e:	2200      	movs	r2, #0
 8005620:	725a      	strb	r2, [r3, #9]
 8005622:	2200      	movs	r2, #0
 8005624:	729a      	strb	r2, [r3, #10]
	publish->payload = NULL;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2200      	movs	r2, #0
 800562a:	735a      	strb	r2, [r3, #13]
 800562c:	2200      	movs	r2, #0
 800562e:	739a      	strb	r2, [r3, #14]
 8005630:	2200      	movs	r2, #0
 8005632:	73da      	strb	r2, [r3, #15]
 8005634:	2200      	movs	r2, #0
 8005636:	741a      	strb	r2, [r3, #16]

	free(publish);
 8005638:	6878      	ldr	r0, [r7, #4]
 800563a:	f007 f869 	bl	800c710 <free>
	publish = NULL;
 800563e:	2300      	movs	r3, #0
 8005640:	607b      	str	r3, [r7, #4]
 8005642:	e000      	b.n	8005646 <publish_destroy+0x52>
	if( publish == NULL ) return;
 8005644:	bf00      	nop
}
 8005646:	3708      	adds	r7, #8
 8005648:	46bd      	mov	sp, r7
 800564a:	bd80      	pop	{r7, pc}

0800564c <publish_set_topic_name>:

char* publish_get_topic_name(publish* publish){
	return publish == NULL ? NULL : publish->topic_name;
}

void publish_set_topic_name(publish* publish, char* topic_name){
 800564c:	b480      	push	{r7}
 800564e:	b083      	sub	sp, #12
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
 8005654:	6039      	str	r1, [r7, #0]
	if( publish == NULL ) return;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d004      	beq.n	8005666 <publish_set_topic_name+0x1a>
	publish->topic_name = topic_name;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	683a      	ldr	r2, [r7, #0]
 8005660:	f8c3 2007 	str.w	r2, [r3, #7]
 8005664:	e000      	b.n	8005668 <publish_set_topic_name+0x1c>
	if( publish == NULL ) return;
 8005666:	bf00      	nop
}
 8005668:	370c      	adds	r7, #12
 800566a:	46bd      	mov	sp, r7
 800566c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005670:	4770      	bx	lr

08005672 <publish_get_packet_identifier>:

unsigned short publish_get_packet_identifier(publish* publish){
 8005672:	b480      	push	{r7}
 8005674:	b083      	sub	sp, #12
 8005676:	af00      	add	r7, sp, #0
 8005678:	6078      	str	r0, [r7, #4]
	return publish == NULL ? 0 : publish->packet_identifier;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d004      	beq.n	800568a <publish_get_packet_identifier+0x18>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 8005686:	b29b      	uxth	r3, r3
 8005688:	e000      	b.n	800568c <publish_get_packet_identifier+0x1a>
 800568a:	2300      	movs	r3, #0
}
 800568c:	4618      	mov	r0, r3
 800568e:	370c      	adds	r7, #12
 8005690:	46bd      	mov	sp, r7
 8005692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005696:	4770      	bx	lr

08005698 <publish_set_packet_identifier>:

void publish_set_packet_identifier(publish* publish, unsigned short packet_identifier){
 8005698:	b480      	push	{r7}
 800569a:	b083      	sub	sp, #12
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
 80056a0:	460b      	mov	r3, r1
 80056a2:	807b      	strh	r3, [r7, #2]
	if( publish == NULL ) return;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d004      	beq.n	80056b4 <publish_set_packet_identifier+0x1c>
	publish->packet_identifier = packet_identifier;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	887a      	ldrh	r2, [r7, #2]
 80056ae:	f8a3 200b 	strh.w	r2, [r3, #11]
 80056b2:	e000      	b.n	80056b6 <publish_set_packet_identifier+0x1e>
	if( publish == NULL ) return;
 80056b4:	bf00      	nop
}
 80056b6:	370c      	adds	r7, #12
 80056b8:	46bd      	mov	sp, r7
 80056ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056be:	4770      	bx	lr

080056c0 <publish_set_payload>:

char* publish_get_payload(publish* publish){
	return publish == NULL ? NULL : publish->payload;
}

void publish_set_payload(publish* publish, char* payload){
 80056c0:	b480      	push	{r7}
 80056c2:	b083      	sub	sp, #12
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
 80056c8:	6039      	str	r1, [r7, #0]
	if( publish == NULL ) return;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d004      	beq.n	80056da <publish_set_payload+0x1a>
	publish->payload = payload;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	683a      	ldr	r2, [r7, #0]
 80056d4:	f8c3 200d 	str.w	r2, [r3, #13]
 80056d8:	e000      	b.n	80056dc <publish_set_payload+0x1c>
	if( publish == NULL ) return;
 80056da:	bf00      	nop
}
 80056dc:	370c      	adds	r7, #12
 80056de:	46bd      	mov	sp, r7
 80056e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e4:	4770      	bx	lr
	...

080056e8 <publish_to_bytes>:

bytes* publish_to_bytes(publish* publish){
 80056e8:	b5b0      	push	{r4, r5, r7, lr}
 80056ea:	b08a      	sub	sp, #40	; 0x28
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
	if( publish == NULL ) return NULL;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d101      	bne.n	80056fa <publish_to_bytes+0x12>
 80056f6:	2300      	movs	r3, #0
 80056f8:	e093      	b.n	8005822 <publish_to_bytes+0x13a>

	bytes* variable_header = bytes_init();
 80056fa:	f7fe f89d 	bl	8003838 <bytes_init>
 80056fe:	6278      	str	r0, [r7, #36]	; 0x24
	if( ! string_util_is_empty(publish->topic_name) ){
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	f8d3 3007 	ldr.w	r3, [r3, #7]
 8005706:	4618      	mov	r0, r3
 8005708:	f002 fd1c 	bl	8008144 <string_util_is_empty>
 800570c:	4603      	mov	r3, r0
 800570e:	f083 0301 	eor.w	r3, r3, #1
 8005712:	b2db      	uxtb	r3, r3
 8005714:	2b00      	cmp	r3, #0
 8005716:	d00d      	beq.n	8005734 <publish_to_bytes+0x4c>
		bytes* topic_name_field = packet_util_build_bytes(publish->topic_name);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	f8d3 3007 	ldr.w	r3, [r3, #7]
 800571e:	4618      	mov	r0, r3
 8005720:	f7ff fac4 	bl	8004cac <packet_util_build_bytes>
 8005724:	6238      	str	r0, [r7, #32]
		bytes_concat(variable_header, topic_name_field);
 8005726:	6a39      	ldr	r1, [r7, #32]
 8005728:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800572a:	f7fe f960 	bl	80039ee <bytes_concat>
		bytes_destroy(topic_name_field);
 800572e:	6a38      	ldr	r0, [r7, #32]
 8005730:	f7fe f8aa 	bl	8003888 <bytes_destroy>
	}

	if( publish->qos_level == PUBLISH_QOS_LEVEL_1 || publish->qos_level == PUBLISH_QOS_LEVEL_2 ) {
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	795a      	ldrb	r2, [r3, #5]
 8005738:	4b3c      	ldr	r3, [pc, #240]	; (800582c <publish_to_bytes+0x144>)
 800573a:	781b      	ldrb	r3, [r3, #0]
 800573c:	429a      	cmp	r2, r3
 800573e:	d005      	beq.n	800574c <publish_to_bytes+0x64>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	795a      	ldrb	r2, [r3, #5]
 8005744:	4b3a      	ldr	r3, [pc, #232]	; (8005830 <publish_to_bytes+0x148>)
 8005746:	781b      	ldrb	r3, [r3, #0]
 8005748:	429a      	cmp	r2, r3
 800574a:	d11f      	bne.n	800578c <publish_to_bytes+0xa4>
		bytes* packet_identifier_field = bytes_init();
 800574c:	f7fe f874 	bl	8003838 <bytes_init>
 8005750:	61f8      	str	r0, [r7, #28]
	    unsigned char msb_packet_identifier = (unsigned char) ( (0xFF00 & publish->packet_identifier) >> 8 );
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 8005758:	b29b      	uxth	r3, r3
 800575a:	0a1b      	lsrs	r3, r3, #8
 800575c:	b29b      	uxth	r3, r3
 800575e:	76fb      	strb	r3, [r7, #27]
	    unsigned char lsb_packet_identifier = (unsigned char) ( 0x00FF & publish->packet_identifier);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 8005766:	b29b      	uxth	r3, r3
 8005768:	76bb      	strb	r3, [r7, #26]
	    bytes_push_back(packet_identifier_field, msb_packet_identifier);
 800576a:	7efb      	ldrb	r3, [r7, #27]
 800576c:	4619      	mov	r1, r3
 800576e:	69f8      	ldr	r0, [r7, #28]
 8005770:	f7fe f901 	bl	8003976 <bytes_push_back>
	    bytes_push_back(packet_identifier_field, lsb_packet_identifier);
 8005774:	7ebb      	ldrb	r3, [r7, #26]
 8005776:	4619      	mov	r1, r3
 8005778:	69f8      	ldr	r0, [r7, #28]
 800577a:	f7fe f8fc 	bl	8003976 <bytes_push_back>
	    bytes_concat(variable_header, packet_identifier_field);
 800577e:	69f9      	ldr	r1, [r7, #28]
 8005780:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005782:	f7fe f934 	bl	80039ee <bytes_concat>
	    bytes_destroy(packet_identifier_field);
 8005786:	69f8      	ldr	r0, [r7, #28]
 8005788:	f7fe f87e 	bl	8003888 <bytes_destroy>
	}

	// The length of the payload can be calculated by subtracting the length of the variable header from the Remaining Length field that is in the Fixed Header
	// so there's no need to add the field size
	bytes* payload = bytes_init();
 800578c:	f7fe f854 	bl	8003838 <bytes_init>
 8005790:	6178      	str	r0, [r7, #20]
	if ( ! string_util_is_empty(publish->payload) ){
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	f8d3 300d 	ldr.w	r3, [r3, #13]
 8005798:	4618      	mov	r0, r3
 800579a:	f002 fcd3 	bl	8008144 <string_util_is_empty>
 800579e:	4603      	mov	r3, r0
 80057a0:	f083 0301 	eor.w	r3, r3, #1
 80057a4:	b2db      	uxtb	r3, r3
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d017      	beq.n	80057da <publish_to_bytes+0xf2>
		unsigned int length = string_util_length(publish->payload);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	f8d3 300d 	ldr.w	r3, [r3, #13]
 80057b0:	4618      	mov	r0, r3
 80057b2:	f002 fd3e 	bl	8008232 <string_util_length>
 80057b6:	6138      	str	r0, [r7, #16]
		for(register int i = 0; i < length; i++) bytes_push_back(payload, (unsigned char) publish->payload[i] );
 80057b8:	2400      	movs	r4, #0
 80057ba:	e00a      	b.n	80057d2 <publish_to_bytes+0xea>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	f8d3 300d 	ldr.w	r3, [r3, #13]
 80057c2:	4622      	mov	r2, r4
 80057c4:	4413      	add	r3, r2
 80057c6:	781b      	ldrb	r3, [r3, #0]
 80057c8:	4619      	mov	r1, r3
 80057ca:	6978      	ldr	r0, [r7, #20]
 80057cc:	f7fe f8d3 	bl	8003976 <bytes_push_back>
 80057d0:	3401      	adds	r4, #1
 80057d2:	4622      	mov	r2, r4
 80057d4:	693b      	ldr	r3, [r7, #16]
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d8f0      	bhi.n	80057bc <publish_to_bytes+0xd4>
		//bytes_concat(payload, packet_util_build_bytes(publish->payload));
	}

	control_packet_set_remaining_length(publish->control_packet, (long int) bytes_get_size(variable_header) + bytes_get_size(payload) );
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681c      	ldr	r4, [r3, #0]
 80057de:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80057e0:	f7fe f8f3 	bl	80039ca <bytes_get_size>
 80057e4:	4605      	mov	r5, r0
 80057e6:	6978      	ldr	r0, [r7, #20]
 80057e8:	f7fe f8ef 	bl	80039ca <bytes_get_size>
 80057ec:	4603      	mov	r3, r0
 80057ee:	442b      	add	r3, r5
 80057f0:	4619      	mov	r1, r3
 80057f2:	4620      	mov	r0, r4
 80057f4:	f7fe fdd0 	bl	8004398 <control_packet_set_remaining_length>

	bytes* result = control_packet_to_bytes(publish->control_packet);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4618      	mov	r0, r3
 80057fe:	f7fe fdde 	bl	80043be <control_packet_to_bytes>
 8005802:	60f8      	str	r0, [r7, #12]
	bytes_concat(result, variable_header);
 8005804:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005806:	68f8      	ldr	r0, [r7, #12]
 8005808:	f7fe f8f1 	bl	80039ee <bytes_concat>
	bytes_concat(result, payload);
 800580c:	6979      	ldr	r1, [r7, #20]
 800580e:	68f8      	ldr	r0, [r7, #12]
 8005810:	f7fe f8ed 	bl	80039ee <bytes_concat>

	bytes_destroy(variable_header);
 8005814:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005816:	f7fe f837 	bl	8003888 <bytes_destroy>
	bytes_destroy(payload);
 800581a:	6978      	ldr	r0, [r7, #20]
 800581c:	f7fe f834 	bl	8003888 <bytes_destroy>

	return result;
 8005820:	68fb      	ldr	r3, [r7, #12]
}
 8005822:	4618      	mov	r0, r3
 8005824:	3728      	adds	r7, #40	; 0x28
 8005826:	46bd      	mov	sp, r7
 8005828:	bdb0      	pop	{r4, r5, r7, pc}
 800582a:	bf00      	nop
 800582c:	200000d8 	.word	0x200000d8
 8005830:	200000d9 	.word	0x200000d9

08005834 <publish_service_init>:
#include "../../Inc/mqtt_client/publish_service.h"


publish_service* publish_service_init(control_packet_proxy* control_packet_proxy){
 8005834:	b580      	push	{r7, lr}
 8005836:	b084      	sub	sp, #16
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
	if( control_packet_proxy == NULL ) return NULL;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d101      	bne.n	8005846 <publish_service_init+0x12>
 8005842:	2300      	movs	r3, #0
 8005844:	e008      	b.n	8005858 <publish_service_init+0x24>
	publish_service* result = (publish_service*) malloc(sizeof(publish_service));
 8005846:	2004      	movs	r0, #4
 8005848:	f006 ff5a 	bl	800c700 <malloc>
 800584c:	4603      	mov	r3, r0
 800584e:	60fb      	str	r3, [r7, #12]
	result->control_packet_proxy = control_packet_proxy;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	687a      	ldr	r2, [r7, #4]
 8005854:	601a      	str	r2, [r3, #0]
	return result;
 8005856:	68fb      	ldr	r3, [r7, #12]
}
 8005858:	4618      	mov	r0, r3
 800585a:	3710      	adds	r7, #16
 800585c:	46bd      	mov	sp, r7
 800585e:	bd80      	pop	{r7, pc}

08005860 <publish_service_destroy>:

void publish_service_destroy(publish_service* publish_service){
 8005860:	b580      	push	{r7, lr}
 8005862:	b082      	sub	sp, #8
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
	if( publish_service == NULL ) return;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d00e      	beq.n	800588c <publish_service_destroy+0x2c>
	publish_service->control_packet_proxy = NULL;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2200      	movs	r2, #0
 8005872:	701a      	strb	r2, [r3, #0]
 8005874:	2200      	movs	r2, #0
 8005876:	705a      	strb	r2, [r3, #1]
 8005878:	2200      	movs	r2, #0
 800587a:	709a      	strb	r2, [r3, #2]
 800587c:	2200      	movs	r2, #0
 800587e:	70da      	strb	r2, [r3, #3]
	free(publish_service);
 8005880:	6878      	ldr	r0, [r7, #4]
 8005882:	f006 ff45 	bl	800c710 <free>
	publish_service = NULL;
 8005886:	2300      	movs	r3, #0
 8005888:	607b      	str	r3, [r7, #4]
 800588a:	e000      	b.n	800588e <publish_service_destroy+0x2e>
	if( publish_service == NULL ) return;
 800588c:	bf00      	nop
}
 800588e:	3708      	adds	r7, #8
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}

08005894 <publish_service_create>:

publish* publish_service_create(publish_service* publish_service){
 8005894:	b580      	push	{r7, lr}
 8005896:	b086      	sub	sp, #24
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
	 bool           dup         = false;
 800589c:	2300      	movs	r3, #0
 800589e:	74fb      	strb	r3, [r7, #19]
	 session*       session     = session_get_instance();
 80058a0:	f000 f87a 	bl	8005998 <session_get_instance>
 80058a4:	60f8      	str	r0, [r7, #12]
	 unsigned char	qos         = session_get_qos(session);
 80058a6:	68f8      	ldr	r0, [r7, #12]
 80058a8:	f000 f9ec 	bl	8005c84 <session_get_qos>
 80058ac:	4603      	mov	r3, r0
 80058ae:	72fb      	strb	r3, [r7, #11]
	 bool           retain      = session_is_retain(session);
 80058b0:	68f8      	ldr	r0, [r7, #12]
 80058b2:	f000 fa0e 	bl	8005cd2 <session_is_retain>
 80058b6:	4603      	mov	r3, r0
 80058b8:	72bb      	strb	r3, [r7, #10]

	 publish* publish = NULL;
 80058ba:	2300      	movs	r3, #0
 80058bc:	617b      	str	r3, [r7, #20]
	 if( qos == PUBLISH_QOS_LEVEL_0 ){
 80058be:	4b24      	ldr	r3, [pc, #144]	; (8005950 <publish_service_create+0xbc>)
 80058c0:	781b      	ldrb	r3, [r3, #0]
 80058c2:	7afa      	ldrb	r2, [r7, #11]
 80058c4:	429a      	cmp	r2, r3
 80058c6:	d108      	bne.n	80058da <publish_service_create+0x46>
		 publish = publish_init(dup, PUBLISH_QOS_LEVEL_0, retain);
 80058c8:	4b21      	ldr	r3, [pc, #132]	; (8005950 <publish_service_create+0xbc>)
 80058ca:	7819      	ldrb	r1, [r3, #0]
 80058cc:	7aba      	ldrb	r2, [r7, #10]
 80058ce:	7cfb      	ldrb	r3, [r7, #19]
 80058d0:	4618      	mov	r0, r3
 80058d2:	f7ff fdfb 	bl	80054cc <publish_init>
 80058d6:	6178      	str	r0, [r7, #20]
 80058d8:	e035      	b.n	8005946 <publish_service_create+0xb2>
	 } else if ( qos == PUBLISH_QOS_LEVEL_1 ){
 80058da:	4b1e      	ldr	r3, [pc, #120]	; (8005954 <publish_service_create+0xc0>)
 80058dc:	781b      	ldrb	r3, [r3, #0]
 80058de:	7afa      	ldrb	r2, [r7, #11]
 80058e0:	429a      	cmp	r2, r3
 80058e2:	d111      	bne.n	8005908 <publish_service_create+0x74>
		 publish = publish_init(dup, PUBLISH_QOS_LEVEL_1, retain);
 80058e4:	4b1b      	ldr	r3, [pc, #108]	; (8005954 <publish_service_create+0xc0>)
 80058e6:	7819      	ldrb	r1, [r3, #0]
 80058e8:	7aba      	ldrb	r2, [r7, #10]
 80058ea:	7cfb      	ldrb	r3, [r7, #19]
 80058ec:	4618      	mov	r0, r3
 80058ee:	f7ff fded 	bl	80054cc <publish_init>
 80058f2:	6178      	str	r0, [r7, #20]
		 publish_set_packet_identifier(publish, session_generate_packet_identifier(session));
 80058f4:	68f8      	ldr	r0, [r7, #12]
 80058f6:	f000 fb1b 	bl	8005f30 <session_generate_packet_identifier>
 80058fa:	4603      	mov	r3, r0
 80058fc:	b29b      	uxth	r3, r3
 80058fe:	4619      	mov	r1, r3
 8005900:	6978      	ldr	r0, [r7, #20]
 8005902:	f7ff fec9 	bl	8005698 <publish_set_packet_identifier>
 8005906:	e01e      	b.n	8005946 <publish_service_create+0xb2>
	 } else if ( qos == PUBLISH_QOS_LEVEL_2 ){
 8005908:	4b13      	ldr	r3, [pc, #76]	; (8005958 <publish_service_create+0xc4>)
 800590a:	781b      	ldrb	r3, [r3, #0]
 800590c:	7afa      	ldrb	r2, [r7, #11]
 800590e:	429a      	cmp	r2, r3
 8005910:	d111      	bne.n	8005936 <publish_service_create+0xa2>
 		 publish = publish_init(dup, PUBLISH_QOS_LEVEL_2, retain);
 8005912:	4b11      	ldr	r3, [pc, #68]	; (8005958 <publish_service_create+0xc4>)
 8005914:	7819      	ldrb	r1, [r3, #0]
 8005916:	7aba      	ldrb	r2, [r7, #10]
 8005918:	7cfb      	ldrb	r3, [r7, #19]
 800591a:	4618      	mov	r0, r3
 800591c:	f7ff fdd6 	bl	80054cc <publish_init>
 8005920:	6178      	str	r0, [r7, #20]
 		 publish_set_packet_identifier(publish, session_generate_packet_identifier(session));
 8005922:	68f8      	ldr	r0, [r7, #12]
 8005924:	f000 fb04 	bl	8005f30 <session_generate_packet_identifier>
 8005928:	4603      	mov	r3, r0
 800592a:	b29b      	uxth	r3, r3
 800592c:	4619      	mov	r1, r3
 800592e:	6978      	ldr	r0, [r7, #20]
 8005930:	f7ff feb2 	bl	8005698 <publish_set_packet_identifier>
 8005934:	e007      	b.n	8005946 <publish_service_create+0xb2>
	 } else {
		 publish = publish_init(dup, PUBLISH_QOS_LEVEL_0, retain);
 8005936:	4b06      	ldr	r3, [pc, #24]	; (8005950 <publish_service_create+0xbc>)
 8005938:	7819      	ldrb	r1, [r3, #0]
 800593a:	7aba      	ldrb	r2, [r7, #10]
 800593c:	7cfb      	ldrb	r3, [r7, #19]
 800593e:	4618      	mov	r0, r3
 8005940:	f7ff fdc4 	bl	80054cc <publish_init>
 8005944:	6178      	str	r0, [r7, #20]
	 }

	 return publish;
 8005946:	697b      	ldr	r3, [r7, #20]
}
 8005948:	4618      	mov	r0, r3
 800594a:	3718      	adds	r7, #24
 800594c:	46bd      	mov	sp, r7
 800594e:	bd80      	pop	{r7, pc}
 8005950:	20000b04 	.word	0x20000b04
 8005954:	200000d8 	.word	0x200000d8
 8005958:	200000d9 	.word	0x200000d9

0800595c <publish_service_write>:
	publish* publish = bytes_is_empty(bytes) ? NULL : assembler_build_to_publish(bytes);
	bytes_destroy(bytes);
	return publish;
}

void publish_service_write(publish_service* publish_service, publish* publish){
 800595c:	b580      	push	{r7, lr}
 800595e:	b084      	sub	sp, #16
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
 8005964:	6039      	str	r1, [r7, #0]
	if ( publish_service == NULL ||  publish == NULL ) return;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d010      	beq.n	800598e <publish_service_write+0x32>
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d00d      	beq.n	800598e <publish_service_write+0x32>
	bytes* bytes = publish_to_bytes(publish);
 8005972:	6838      	ldr	r0, [r7, #0]
 8005974:	f7ff feb8 	bl	80056e8 <publish_to_bytes>
 8005978:	60f8      	str	r0, [r7, #12]
	control_packet_proxy_write(publish_service->control_packet_proxy, bytes);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	68f9      	ldr	r1, [r7, #12]
 8005980:	4618      	mov	r0, r3
 8005982:	f7fe fdd8 	bl	8004536 <control_packet_proxy_write>
	bytes_destroy(bytes);
 8005986:	68f8      	ldr	r0, [r7, #12]
 8005988:	f7fd ff7e 	bl	8003888 <bytes_destroy>
 800598c:	e000      	b.n	8005990 <publish_service_write+0x34>
	if ( publish_service == NULL ||  publish == NULL ) return;
 800598e:	bf00      	nop
}
 8005990:	3710      	adds	r7, #16
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}
	...

08005998 <session_get_instance>:

unsigned char SESSION_QOS_LEVEL_1 = 0x01;

unsigned char SESSION_QOS_LEVEL_2 = 0x02;

session* session_get_instance(){
 8005998:	b580      	push	{r7, lr}
 800599a:	af00      	add	r7, sp, #0
	if( session_instance == NULL ){
 800599c:	4b59      	ldr	r3, [pc, #356]	; (8005b04 <session_get_instance+0x16c>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	f040 80ab 	bne.w	8005afc <session_get_instance+0x164>
		session_instance = (session*) malloc(sizeof(session));
 80059a6:	2034      	movs	r0, #52	; 0x34
 80059a8:	f006 feaa 	bl	800c700 <malloc>
 80059ac:	4603      	mov	r3, r0
 80059ae:	461a      	mov	r2, r3
 80059b0:	4b54      	ldr	r3, [pc, #336]	; (8005b04 <session_get_instance+0x16c>)
 80059b2:	601a      	str	r2, [r3, #0]
		session_instance->id = NULL;
 80059b4:	4b53      	ldr	r3, [pc, #332]	; (8005b04 <session_get_instance+0x16c>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	2200      	movs	r2, #0
 80059ba:	701a      	strb	r2, [r3, #0]
 80059bc:	2200      	movs	r2, #0
 80059be:	705a      	strb	r2, [r3, #1]
 80059c0:	2200      	movs	r2, #0
 80059c2:	709a      	strb	r2, [r3, #2]
 80059c4:	2200      	movs	r2, #0
 80059c6:	70da      	strb	r2, [r3, #3]
		session_instance->clean = false;
 80059c8:	4b4e      	ldr	r3, [pc, #312]	; (8005b04 <session_get_instance+0x16c>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	2200      	movs	r2, #0
 80059ce:	711a      	strb	r2, [r3, #4]
		session_instance->host = NULL;
 80059d0:	4b4c      	ldr	r3, [pc, #304]	; (8005b04 <session_get_instance+0x16c>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	2200      	movs	r2, #0
 80059d6:	715a      	strb	r2, [r3, #5]
 80059d8:	2200      	movs	r2, #0
 80059da:	719a      	strb	r2, [r3, #6]
 80059dc:	2200      	movs	r2, #0
 80059de:	71da      	strb	r2, [r3, #7]
 80059e0:	2200      	movs	r2, #0
 80059e2:	721a      	strb	r2, [r3, #8]
		session_instance->port = 1883;
 80059e4:	4b47      	ldr	r3, [pc, #284]	; (8005b04 <session_get_instance+0x16c>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	2200      	movs	r2, #0
 80059ea:	f042 025b 	orr.w	r2, r2, #91	; 0x5b
 80059ee:	725a      	strb	r2, [r3, #9]
 80059f0:	2200      	movs	r2, #0
 80059f2:	f042 0207 	orr.w	r2, r2, #7
 80059f6:	729a      	strb	r2, [r3, #10]
 80059f8:	2200      	movs	r2, #0
 80059fa:	72da      	strb	r2, [r3, #11]
 80059fc:	2200      	movs	r2, #0
 80059fe:	731a      	strb	r2, [r3, #12]
		session_instance->keep_alive = 60;
 8005a00:	4b40      	ldr	r3, [pc, #256]	; (8005b04 <session_get_instance+0x16c>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	2200      	movs	r2, #0
 8005a06:	f042 023c 	orr.w	r2, r2, #60	; 0x3c
 8005a0a:	735a      	strb	r2, [r3, #13]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	739a      	strb	r2, [r3, #14]
 8005a10:	2200      	movs	r2, #0
 8005a12:	73da      	strb	r2, [r3, #15]
 8005a14:	2200      	movs	r2, #0
 8005a16:	741a      	strb	r2, [r3, #16]
		session_instance->qos = SESSION_QOS_LEVEL_0;
 8005a18:	4b3a      	ldr	r3, [pc, #232]	; (8005b04 <session_get_instance+0x16c>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4a3a      	ldr	r2, [pc, #232]	; (8005b08 <session_get_instance+0x170>)
 8005a1e:	7812      	ldrb	r2, [r2, #0]
 8005a20:	745a      	strb	r2, [r3, #17]
		session_instance->retain = false;
 8005a22:	4b38      	ldr	r3, [pc, #224]	; (8005b04 <session_get_instance+0x16c>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	2200      	movs	r2, #0
 8005a28:	749a      	strb	r2, [r3, #18]
		session_instance->time_last_package = clock() / 1000;
 8005a2a:	f006 fdff 	bl	800c62c <clock>
 8005a2e:	4601      	mov	r1, r0
 8005a30:	4b34      	ldr	r3, [pc, #208]	; (8005b04 <session_get_instance+0x16c>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a35      	ldr	r2, [pc, #212]	; (8005b0c <session_get_instance+0x174>)
 8005a36:	fba2 1201 	umull	r1, r2, r2, r1
 8005a3a:	0992      	lsrs	r2, r2, #6
 8005a3c:	f8c3 2013 	str.w	r2, [r3, #19]
		session_instance->connected = false;
 8005a40:	4b30      	ldr	r3, [pc, #192]	; (8005b04 <session_get_instance+0x16c>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	2200      	movs	r2, #0
 8005a46:	75da      	strb	r2, [r3, #23]
		session_instance->username = NULL;
 8005a48:	4b2e      	ldr	r3, [pc, #184]	; (8005b04 <session_get_instance+0x16c>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	761a      	strb	r2, [r3, #24]
 8005a50:	2200      	movs	r2, #0
 8005a52:	765a      	strb	r2, [r3, #25]
 8005a54:	2200      	movs	r2, #0
 8005a56:	769a      	strb	r2, [r3, #26]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	76da      	strb	r2, [r3, #27]
		session_instance->password = NULL;
 8005a5c:	4b29      	ldr	r3, [pc, #164]	; (8005b04 <session_get_instance+0x16c>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	2200      	movs	r2, #0
 8005a62:	771a      	strb	r2, [r3, #28]
 8005a64:	2200      	movs	r2, #0
 8005a66:	775a      	strb	r2, [r3, #29]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	779a      	strb	r2, [r3, #30]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	77da      	strb	r2, [r3, #31]

		session_instance->unacknowledged_publish = NULL;
 8005a70:	4b24      	ldr	r3, [pc, #144]	; (8005b04 <session_get_instance+0x16c>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	2200      	movs	r2, #0
 8005a76:	f883 2020 	strb.w	r2, [r3, #32]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8005a80:	2200      	movs	r2, #0
 8005a82:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8005a86:	2200      	movs	r2, #0
 8005a88:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		session_instance->unacknowledged_pub_rel = NULL;
 8005a8c:	4b1d      	ldr	r3, [pc, #116]	; (8005b04 <session_get_instance+0x16c>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	2200      	movs	r2, #0
 8005a92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005a96:	2200      	movs	r2, #0
 8005a98:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		session_instance->unacknowledged_pub_rec = NULL;
 8005aa8:	4b16      	ldr	r3, [pc, #88]	; (8005b04 <session_get_instance+0x16c>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	2200      	movs	r2, #0
 8005aae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 8005ab8:	2200      	movs	r2, #0
 8005aba:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 8005abe:	2200      	movs	r2, #0
 8005ac0:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

		session_instance->packet_identifier = 0;
 8005ac4:	4b0f      	ldr	r3, [pc, #60]	; (8005b04 <session_get_instance+0x16c>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8005ace:	2200      	movs	r2, #0
 8005ad0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 8005ada:	2200      	movs	r2, #0
 8005adc:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		session_instance->last_packet_identifier = 0;
 8005ae0:	4b08      	ldr	r3, [pc, #32]	; (8005b04 <session_get_instance+0x16c>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8005aea:	2200      	movs	r2, #0
 8005aec:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8005af0:	2200      	movs	r2, #0
 8005af2:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 8005af6:	2200      	movs	r2, #0
 8005af8:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	}

	return session_instance;
 8005afc:	4b01      	ldr	r3, [pc, #4]	; (8005b04 <session_get_instance+0x16c>)
 8005afe:	681b      	ldr	r3, [r3, #0]
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	bd80      	pop	{r7, pc}
 8005b04:	20000b08 	.word	0x20000b08
 8005b08:	20000b0c 	.word	0x20000b0c
 8005b0c:	10624dd3 	.word	0x10624dd3

08005b10 <session_get_id>:
	session_reset(session);
	free(session);
	session = NULL;
}

char* session_get_id(session* session){
 8005b10:	b480      	push	{r7}
 8005b12:	b083      	sub	sp, #12
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
	return session == NULL ? NULL : session->id;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d002      	beq.n	8005b24 <session_get_id+0x14>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	e000      	b.n	8005b26 <session_get_id+0x16>
 8005b24:	2300      	movs	r3, #0
}
 8005b26:	4618      	mov	r0, r3
 8005b28:	370c      	adds	r7, #12
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b30:	4770      	bx	lr

08005b32 <session_set_id>:

void session_set_id(session* session, char* id){
 8005b32:	b480      	push	{r7}
 8005b34:	b083      	sub	sp, #12
 8005b36:	af00      	add	r7, sp, #0
 8005b38:	6078      	str	r0, [r7, #4]
 8005b3a:	6039      	str	r1, [r7, #0]
	if( session == NULL ) return;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d003      	beq.n	8005b4a <session_set_id+0x18>
	session->id = id;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	683a      	ldr	r2, [r7, #0]
 8005b46:	601a      	str	r2, [r3, #0]
 8005b48:	e000      	b.n	8005b4c <session_set_id+0x1a>
	if( session == NULL ) return;
 8005b4a:	bf00      	nop
}
 8005b4c:	370c      	adds	r7, #12
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b54:	4770      	bx	lr

08005b56 <session_is_clean>:

bool session_is_clean(session* session){
 8005b56:	b480      	push	{r7}
 8005b58:	b083      	sub	sp, #12
 8005b5a:	af00      	add	r7, sp, #0
 8005b5c:	6078      	str	r0, [r7, #4]
	return session == NULL ? false : session->clean;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d005      	beq.n	8005b70 <session_is_clean+0x1a>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	791b      	ldrb	r3, [r3, #4]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d001      	beq.n	8005b70 <session_is_clean+0x1a>
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	e000      	b.n	8005b72 <session_is_clean+0x1c>
 8005b70:	2300      	movs	r3, #0
}
 8005b72:	4618      	mov	r0, r3
 8005b74:	370c      	adds	r7, #12
 8005b76:	46bd      	mov	sp, r7
 8005b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7c:	4770      	bx	lr

08005b7e <session_set_clean>:

void session_set_clean(session* session, bool clean){
 8005b7e:	b480      	push	{r7}
 8005b80:	b083      	sub	sp, #12
 8005b82:	af00      	add	r7, sp, #0
 8005b84:	6078      	str	r0, [r7, #4]
 8005b86:	460b      	mov	r3, r1
 8005b88:	70fb      	strb	r3, [r7, #3]
	if( session == NULL ) return;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d003      	beq.n	8005b98 <session_set_clean+0x1a>
	session->clean = clean;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	78fa      	ldrb	r2, [r7, #3]
 8005b94:	711a      	strb	r2, [r3, #4]
 8005b96:	e000      	b.n	8005b9a <session_set_clean+0x1c>
	if( session == NULL ) return;
 8005b98:	bf00      	nop
}
 8005b9a:	370c      	adds	r7, #12
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba2:	4770      	bx	lr

08005ba4 <session_get_host>:

char* session_get_host(session* session){
 8005ba4:	b480      	push	{r7}
 8005ba6:	b083      	sub	sp, #12
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
	return session == NULL ? NULL : session->host;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d003      	beq.n	8005bba <session_get_host+0x16>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	f8d3 3005 	ldr.w	r3, [r3, #5]
 8005bb8:	e000      	b.n	8005bbc <session_get_host+0x18>
 8005bba:	2300      	movs	r3, #0
}
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	370c      	adds	r7, #12
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc6:	4770      	bx	lr

08005bc8 <session_set_host>:

void session_set_host(session* session, char* host){
 8005bc8:	b480      	push	{r7}
 8005bca:	b083      	sub	sp, #12
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
 8005bd0:	6039      	str	r1, [r7, #0]
	if( session == NULL ) return;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d004      	beq.n	8005be2 <session_set_host+0x1a>
	session->host = host;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	683a      	ldr	r2, [r7, #0]
 8005bdc:	f8c3 2005 	str.w	r2, [r3, #5]
 8005be0:	e000      	b.n	8005be4 <session_set_host+0x1c>
	if( session == NULL ) return;
 8005be2:	bf00      	nop
}
 8005be4:	370c      	adds	r7, #12
 8005be6:	46bd      	mov	sp, r7
 8005be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bec:	4770      	bx	lr

08005bee <session_get_port>:

unsigned int session_get_port(session* session){
 8005bee:	b480      	push	{r7}
 8005bf0:	b083      	sub	sp, #12
 8005bf2:	af00      	add	r7, sp, #0
 8005bf4:	6078      	str	r0, [r7, #4]
	return session == NULL ? 1883 : session->port;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d003      	beq.n	8005c04 <session_get_port+0x16>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	f8d3 3009 	ldr.w	r3, [r3, #9]
 8005c02:	e001      	b.n	8005c08 <session_get_port+0x1a>
 8005c04:	f240 735b 	movw	r3, #1883	; 0x75b
}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	370c      	adds	r7, #12
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c12:	4770      	bx	lr

08005c14 <session_set_port>:

void session_set_port(session* session, unsigned int port){
 8005c14:	b480      	push	{r7}
 8005c16:	b083      	sub	sp, #12
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
 8005c1c:	6039      	str	r1, [r7, #0]
	if( session == NULL ) return;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d004      	beq.n	8005c2e <session_set_port+0x1a>
	session->port = port;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	683a      	ldr	r2, [r7, #0]
 8005c28:	f8c3 2009 	str.w	r2, [r3, #9]
 8005c2c:	e000      	b.n	8005c30 <session_set_port+0x1c>
	if( session == NULL ) return;
 8005c2e:	bf00      	nop
}
 8005c30:	370c      	adds	r7, #12
 8005c32:	46bd      	mov	sp, r7
 8005c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c38:	4770      	bx	lr

08005c3a <session_get_keep_alive>:

unsigned int session_get_keep_alive(session* session){
 8005c3a:	b480      	push	{r7}
 8005c3c:	b083      	sub	sp, #12
 8005c3e:	af00      	add	r7, sp, #0
 8005c40:	6078      	str	r0, [r7, #4]
	return session == NULL ? 60 : session->keep_alive;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d003      	beq.n	8005c50 <session_get_keep_alive+0x16>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	f8d3 300d 	ldr.w	r3, [r3, #13]
 8005c4e:	e000      	b.n	8005c52 <session_get_keep_alive+0x18>
 8005c50:	233c      	movs	r3, #60	; 0x3c
}
 8005c52:	4618      	mov	r0, r3
 8005c54:	370c      	adds	r7, #12
 8005c56:	46bd      	mov	sp, r7
 8005c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5c:	4770      	bx	lr

08005c5e <session_set_keep_alive>:

void session_set_keep_alive(session* session, unsigned int keep_alive){
 8005c5e:	b480      	push	{r7}
 8005c60:	b083      	sub	sp, #12
 8005c62:	af00      	add	r7, sp, #0
 8005c64:	6078      	str	r0, [r7, #4]
 8005c66:	6039      	str	r1, [r7, #0]
	if( session == NULL ) return;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d004      	beq.n	8005c78 <session_set_keep_alive+0x1a>
	session->keep_alive = keep_alive;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	683a      	ldr	r2, [r7, #0]
 8005c72:	f8c3 200d 	str.w	r2, [r3, #13]
 8005c76:	e000      	b.n	8005c7a <session_set_keep_alive+0x1c>
	if( session == NULL ) return;
 8005c78:	bf00      	nop
}
 8005c7a:	370c      	adds	r7, #12
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c82:	4770      	bx	lr

08005c84 <session_get_qos>:

unsigned char session_get_qos(session* session){
 8005c84:	b480      	push	{r7}
 8005c86:	b083      	sub	sp, #12
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
	return session == NULL ? SESSION_QOS_LEVEL_0 : session->qos;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d002      	beq.n	8005c98 <session_get_qos+0x14>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	7c5b      	ldrb	r3, [r3, #17]
 8005c96:	e001      	b.n	8005c9c <session_get_qos+0x18>
 8005c98:	4b03      	ldr	r3, [pc, #12]	; (8005ca8 <session_get_qos+0x24>)
 8005c9a:	781b      	ldrb	r3, [r3, #0]
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	370c      	adds	r7, #12
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca6:	4770      	bx	lr
 8005ca8:	20000b0c 	.word	0x20000b0c

08005cac <session_set_qos>:

void session_set_qos(session* session, unsigned char qos){
 8005cac:	b480      	push	{r7}
 8005cae:	b083      	sub	sp, #12
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
 8005cb4:	460b      	mov	r3, r1
 8005cb6:	70fb      	strb	r3, [r7, #3]
	if( session == NULL ) return;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d003      	beq.n	8005cc6 <session_set_qos+0x1a>
	session->qos = qos;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	78fa      	ldrb	r2, [r7, #3]
 8005cc2:	745a      	strb	r2, [r3, #17]
 8005cc4:	e000      	b.n	8005cc8 <session_set_qos+0x1c>
	if( session == NULL ) return;
 8005cc6:	bf00      	nop
}
 8005cc8:	370c      	adds	r7, #12
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd0:	4770      	bx	lr

08005cd2 <session_is_retain>:

bool session_is_retain(session* session){
 8005cd2:	b480      	push	{r7}
 8005cd4:	b083      	sub	sp, #12
 8005cd6:	af00      	add	r7, sp, #0
 8005cd8:	6078      	str	r0, [r7, #4]
	return session == NULL ? false : session->retain;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d005      	beq.n	8005cec <session_is_retain+0x1a>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	7c9b      	ldrb	r3, [r3, #18]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d001      	beq.n	8005cec <session_is_retain+0x1a>
 8005ce8:	2301      	movs	r3, #1
 8005cea:	e000      	b.n	8005cee <session_is_retain+0x1c>
 8005cec:	2300      	movs	r3, #0
}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	370c      	adds	r7, #12
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf8:	4770      	bx	lr

08005cfa <session_set_retain>:

void session_set_retain(session* session, bool retain){
 8005cfa:	b480      	push	{r7}
 8005cfc:	b083      	sub	sp, #12
 8005cfe:	af00      	add	r7, sp, #0
 8005d00:	6078      	str	r0, [r7, #4]
 8005d02:	460b      	mov	r3, r1
 8005d04:	70fb      	strb	r3, [r7, #3]
	if ( session == NULL ) return;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d003      	beq.n	8005d14 <session_set_retain+0x1a>
	session->retain = retain;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	78fa      	ldrb	r2, [r7, #3]
 8005d10:	749a      	strb	r2, [r3, #18]
 8005d12:	e000      	b.n	8005d16 <session_set_retain+0x1c>
	if ( session == NULL ) return;
 8005d14:	bf00      	nop
}
 8005d16:	370c      	adds	r7, #12
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1e:	4770      	bx	lr

08005d20 <session_is_connected>:
void session_set_time_last_package(session* session, unsigned long time_last_package){
	if ( session == NULL ) return;
	session->time_last_package = time_last_package;
}

bool session_is_connected(session* session){
 8005d20:	b480      	push	{r7}
 8005d22:	b083      	sub	sp, #12
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
	return session == NULL ? false : session->connected;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d005      	beq.n	8005d3a <session_is_connected+0x1a>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	7ddb      	ldrb	r3, [r3, #23]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d001      	beq.n	8005d3a <session_is_connected+0x1a>
 8005d36:	2301      	movs	r3, #1
 8005d38:	e000      	b.n	8005d3c <session_is_connected+0x1c>
 8005d3a:	2300      	movs	r3, #0
}
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	370c      	adds	r7, #12
 8005d40:	46bd      	mov	sp, r7
 8005d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d46:	4770      	bx	lr

08005d48 <session_set_connected>:

void session_set_connected(session* session, bool connected){
 8005d48:	b480      	push	{r7}
 8005d4a:	b083      	sub	sp, #12
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
 8005d50:	460b      	mov	r3, r1
 8005d52:	70fb      	strb	r3, [r7, #3]
	if ( session == NULL ) return;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d003      	beq.n	8005d62 <session_set_connected+0x1a>
	session->connected = connected;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	78fa      	ldrb	r2, [r7, #3]
 8005d5e:	75da      	strb	r2, [r3, #23]
 8005d60:	e000      	b.n	8005d64 <session_set_connected+0x1c>
	if ( session == NULL ) return;
 8005d62:	bf00      	nop
}
 8005d64:	370c      	adds	r7, #12
 8005d66:	46bd      	mov	sp, r7
 8005d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6c:	4770      	bx	lr

08005d6e <session_get_username>:

char* session_get_username(session* session){
 8005d6e:	b480      	push	{r7}
 8005d70:	b083      	sub	sp, #12
 8005d72:	af00      	add	r7, sp, #0
 8005d74:	6078      	str	r0, [r7, #4]
	return session == NULL ? NULL : session->username;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d002      	beq.n	8005d82 <session_get_username+0x14>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	699b      	ldr	r3, [r3, #24]
 8005d80:	e000      	b.n	8005d84 <session_get_username+0x16>
 8005d82:	2300      	movs	r3, #0
}
 8005d84:	4618      	mov	r0, r3
 8005d86:	370c      	adds	r7, #12
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8e:	4770      	bx	lr

08005d90 <session_get_password>:
void session_set_username(session* session, char* username){
	if ( session == NULL ) return;
	session->username = username;
}

char* session_get_password(session* session){
 8005d90:	b480      	push	{r7}
 8005d92:	b083      	sub	sp, #12
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
	return session == NULL ? NULL : session->password;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d002      	beq.n	8005da4 <session_get_password+0x14>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	69db      	ldr	r3, [r3, #28]
 8005da2:	e000      	b.n	8005da6 <session_get_password+0x16>
 8005da4:	2300      	movs	r3, #0
}
 8005da6:	4618      	mov	r0, r3
 8005da8:	370c      	adds	r7, #12
 8005daa:	46bd      	mov	sp, r7
 8005dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db0:	4770      	bx	lr
	...

08005db4 <session_signal_time_last_package>:
void session_set_password(session* session, char* password){
	if( session == NULL ) return;
	session->password = password;
}

void session_signal_time_last_package(session* session){
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b082      	sub	sp, #8
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
	if ( session == NULL ) return;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d00a      	beq.n	8005dd8 <session_signal_time_last_package+0x24>
	session->time_last_package = clock() / 1000;
 8005dc2:	f006 fc33 	bl	800c62c <clock>
 8005dc6:	4602      	mov	r2, r0
 8005dc8:	4b05      	ldr	r3, [pc, #20]	; (8005de0 <session_signal_time_last_package+0x2c>)
 8005dca:	fba3 2302 	umull	r2, r3, r3, r2
 8005dce:	099a      	lsrs	r2, r3, #6
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	f8c3 2013 	str.w	r2, [r3, #19]
 8005dd6:	e000      	b.n	8005dda <session_signal_time_last_package+0x26>
	if ( session == NULL ) return;
 8005dd8:	bf00      	nop
}
 8005dda:	3708      	adds	r7, #8
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	bd80      	pop	{r7, pc}
 8005de0:	10624dd3 	.word	0x10624dd3

08005de4 <session_is_expired>:

bool session_is_expired(session* session){
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b084      	sub	sp, #16
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
	clock_t now = clock() / 1000;
 8005dec:	f006 fc1e 	bl	800c62c <clock>
 8005df0:	4602      	mov	r2, r0
 8005df2:	4b0b      	ldr	r3, [pc, #44]	; (8005e20 <session_is_expired+0x3c>)
 8005df4:	fba3 2302 	umull	r2, r3, r3, r2
 8005df8:	099b      	lsrs	r3, r3, #6
 8005dfa:	60fb      	str	r3, [r7, #12]
	return (( now - session->time_last_package ) > session->keep_alive );
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	f8d3 3013 	ldr.w	r3, [r3, #19]
 8005e02:	68fa      	ldr	r2, [r7, #12]
 8005e04:	1ad2      	subs	r2, r2, r3
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	f8d3 300d 	ldr.w	r3, [r3, #13]
 8005e0c:	429a      	cmp	r2, r3
 8005e0e:	bf8c      	ite	hi
 8005e10:	2301      	movhi	r3, #1
 8005e12:	2300      	movls	r3, #0
 8005e14:	b2db      	uxtb	r3, r3
}
 8005e16:	4618      	mov	r0, r3
 8005e18:	3710      	adds	r7, #16
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	bd80      	pop	{r7, pc}
 8005e1e:	bf00      	nop
 8005e20:	10624dd3 	.word	0x10624dd3

08005e24 <session_set_unacknowledged_publish>:

void session_set_unacknowledged_publish(session* session, publish* unacknowledged_publish){
 8005e24:	b480      	push	{r7}
 8005e26:	b083      	sub	sp, #12
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
 8005e2c:	6039      	str	r1, [r7, #0]
	if( session == NULL || unacknowledged_publish == NULL ) return;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d006      	beq.n	8005e42 <session_set_unacknowledged_publish+0x1e>
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d003      	beq.n	8005e42 <session_set_unacknowledged_publish+0x1e>
	session->unacknowledged_publish = unacknowledged_publish;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	683a      	ldr	r2, [r7, #0]
 8005e3e:	621a      	str	r2, [r3, #32]
 8005e40:	e000      	b.n	8005e44 <session_set_unacknowledged_publish+0x20>
	if( session == NULL || unacknowledged_publish == NULL ) return;
 8005e42:	bf00      	nop
}
 8005e44:	370c      	adds	r7, #12
 8005e46:	46bd      	mov	sp, r7
 8005e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4c:	4770      	bx	lr

08005e4e <session_set_unacknowledged_pub_rec>:
void session_set_unacknowledged_pub_rel(session* session, pub_rel* unacknowledged_pub_rel){
	if( session == NULL || unacknowledged_pub_rel == NULL ) return;
	session->unacknowledged_pub_rel = unacknowledged_pub_rel;
}

void session_set_unacknowledged_pub_rec(session* session, pub_rec* unacknowledged_pub_rec){
 8005e4e:	b480      	push	{r7}
 8005e50:	b083      	sub	sp, #12
 8005e52:	af00      	add	r7, sp, #0
 8005e54:	6078      	str	r0, [r7, #4]
 8005e56:	6039      	str	r1, [r7, #0]
	if( session == NULL || unacknowledged_pub_rec == NULL ) return;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d006      	beq.n	8005e6c <session_set_unacknowledged_pub_rec+0x1e>
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d003      	beq.n	8005e6c <session_set_unacknowledged_pub_rec+0x1e>
	session->unacknowledged_pub_rec = unacknowledged_pub_rec;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	683a      	ldr	r2, [r7, #0]
 8005e68:	629a      	str	r2, [r3, #40]	; 0x28
 8005e6a:	e000      	b.n	8005e6e <session_set_unacknowledged_pub_rec+0x20>
	if( session == NULL || unacknowledged_pub_rec == NULL ) return;
 8005e6c:	bf00      	nop
}
 8005e6e:	370c      	adds	r7, #12
 8005e70:	46bd      	mov	sp, r7
 8005e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e76:	4770      	bx	lr

08005e78 <session_confirm>:

void session_confirm(session* session, unsigned int packet_identifier){
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b082      	sub	sp, #8
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
 8005e80:	6039      	str	r1, [r7, #0]
	if( session == NULL ) return;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d04f      	beq.n	8005f28 <session_confirm+0xb0>

    if( session->unacknowledged_publish != NULL && publish_get_packet_identifier(session->unacknowledged_publish) == packet_identifier )
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6a1b      	ldr	r3, [r3, #32]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d016      	beq.n	8005ebe <session_confirm+0x46>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6a1b      	ldr	r3, [r3, #32]
 8005e94:	4618      	mov	r0, r3
 8005e96:	f7ff fbec 	bl	8005672 <publish_get_packet_identifier>
 8005e9a:	4603      	mov	r3, r0
 8005e9c:	461a      	mov	r2, r3
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d10c      	bne.n	8005ebe <session_confirm+0x46>
    	session->unacknowledged_publish = NULL;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	f883 2020 	strb.w	r2, [r3, #32]
 8005eac:	2200      	movs	r2, #0
 8005eae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8005eb8:	2200      	movs	r2, #0
 8005eba:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

    if( session->unacknowledged_pub_rel != NULL && pub_rel_get_packet_identifier(session->unacknowledged_pub_rel) == packet_identifier )
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d015      	beq.n	8005ef2 <session_confirm+0x7a>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eca:	4618      	mov	r0, r3
 8005ecc:	f7ff fa4a 	bl	8005364 <pub_rel_get_packet_identifier>
 8005ed0:	4602      	mov	r2, r0
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d10c      	bne.n	8005ef2 <session_confirm+0x7a>
        session->unacknowledged_pub_rel = NULL;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2200      	movs	r2, #0
 8005edc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 8005eec:	2200      	movs	r2, #0
 8005eee:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

    if( session->unacknowledged_pub_rec != NULL && pub_rec_get_packet_identifier(session->unacknowledged_pub_rec) == packet_identifier )
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d017      	beq.n	8005f2a <session_confirm+0xb2>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005efe:	4618      	mov	r0, r3
 8005f00:	f7ff f99c 	bl	800523c <pub_rec_get_packet_identifier>
 8005f04:	4602      	mov	r2, r0
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d10e      	bne.n	8005f2a <session_confirm+0xb2>
    	session->unacknowledged_pub_rec = NULL;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8005f14:	2200      	movs	r2, #0
 8005f16:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 8005f20:	2200      	movs	r2, #0
 8005f22:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
 8005f26:	e000      	b.n	8005f2a <session_confirm+0xb2>
	if( session == NULL ) return;
 8005f28:	bf00      	nop
}
 8005f2a:	3708      	adds	r7, #8
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	bd80      	pop	{r7, pc}

08005f30 <session_generate_packet_identifier>:

unsigned int session_generate_packet_identifier(session* session){
 8005f30:	b480      	push	{r7}
 8005f32:	b085      	sub	sp, #20
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
	if( session == NULL ) return 0;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d101      	bne.n	8005f42 <session_generate_packet_identifier+0x12>
 8005f3e:	2300      	movs	r3, #0
 8005f40:	e012      	b.n	8005f68 <session_generate_packet_identifier+0x38>
	unsigned int result = session->packet_identifier;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f46:	60fb      	str	r3, [r7, #12]
	session->packet_identifier = (session->packet_identifier + 1) % 65534;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f4c:	1c59      	adds	r1, r3, #1
 8005f4e:	084b      	lsrs	r3, r1, #1
 8005f50:	4a08      	ldr	r2, [pc, #32]	; (8005f74 <session_generate_packet_identifier+0x44>)
 8005f52:	fba2 2303 	umull	r2, r3, r2, r3
 8005f56:	0b9a      	lsrs	r2, r3, #14
 8005f58:	4613      	mov	r3, r2
 8005f5a:	03db      	lsls	r3, r3, #15
 8005f5c:	1a9b      	subs	r3, r3, r2
 8005f5e:	005b      	lsls	r3, r3, #1
 8005f60:	1aca      	subs	r2, r1, r3
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	62da      	str	r2, [r3, #44]	; 0x2c
	//if(session->packet_identifier == 0) session->packet_identifier = 1;
	return result;
 8005f66:	68fb      	ldr	r3, [r7, #12]
}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	3714      	adds	r7, #20
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f72:	4770      	bx	lr
 8005f74:	80010003 	.word	0x80010003

08005f78 <session_get_last_packet_identifier>:

unsigned int session_get_last_packet_identifier(session* session){
 8005f78:	b480      	push	{r7}
 8005f7a:	b083      	sub	sp, #12
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
	if( session == NULL ) return 0;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d101      	bne.n	8005f8a <session_get_last_packet_identifier+0x12>
 8005f86:	2300      	movs	r3, #0
 8005f88:	e009      	b.n	8005f9e <session_get_last_packet_identifier+0x26>
	return session->packet_identifier == 0 ? session->packet_identifier - 1 : 65533;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d103      	bne.n	8005f9a <session_get_last_packet_identifier+0x22>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f96:	3b01      	subs	r3, #1
 8005f98:	e001      	b.n	8005f9e <session_get_last_packet_identifier+0x26>
 8005f9a:	f64f 73fd 	movw	r3, #65533	; 0xfffd
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	370c      	adds	r7, #12
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa8:	4770      	bx	lr

08005faa <wifi_init>:
#include "../../Inc/mqtt_client/wifi.h"

wifi* wifi_init(esp8266* esp8266, unsigned int timeout){
 8005faa:	b580      	push	{r7, lr}
 8005fac:	b084      	sub	sp, #16
 8005fae:	af00      	add	r7, sp, #0
 8005fb0:	6078      	str	r0, [r7, #4]
 8005fb2:	6039      	str	r1, [r7, #0]
	wifi* result = (wifi*) malloc(sizeof(wifi));
 8005fb4:	f241 0015 	movw	r0, #4117	; 0x1015
 8005fb8:	f006 fba2 	bl	800c700 <malloc>
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	60fb      	str	r3, [r7, #12]

	result->connected     = esp8266->connected;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	7a1a      	ldrb	r2, [r3, #8]
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	701a      	strb	r2, [r3, #0]
	result->esp8266       = esp8266;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	687a      	ldr	r2, [r7, #4]
 8005fcc:	f8c3 2001 	str.w	r2, [r3, #1]
	result->timeout       = timeout;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	683a      	ldr	r2, [r7, #0]
 8005fd4:	f8c3 2005 	str.w	r2, [r3, #5]
	result->received      = NULL;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fde:	330d      	adds	r3, #13
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	701a      	strb	r2, [r3, #0]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	705a      	strb	r2, [r3, #1]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	709a      	strb	r2, [r3, #2]
 8005fec:	2200      	movs	r2, #0
 8005fee:	70da      	strb	r2, [r3, #3]
	result->mqtt_server   = NULL;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ff6:	3311      	adds	r3, #17
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	701a      	strb	r2, [r3, #0]
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	705a      	strb	r2, [r3, #1]
 8006000:	2200      	movs	r2, #0
 8006002:	709a      	strb	r2, [r3, #2]
 8006004:	2200      	movs	r2, #0
 8006006:	70da      	strb	r2, [r3, #3]

	return result;
 8006008:	68fb      	ldr	r3, [r7, #12]
}
 800600a:	4618      	mov	r0, r3
 800600c:	3710      	adds	r7, #16
 800600e:	46bd      	mov	sp, r7
 8006010:	bd80      	pop	{r7, pc}

08006012 <wifi_destroy>:

void wifi_destroy(wifi* wifi){
 8006012:	b580      	push	{r7, lr}
 8006014:	b082      	sub	sp, #8
 8006016:	af00      	add	r7, sp, #0
 8006018:	6078      	str	r0, [r7, #4]
	if( wifi == NULL ) return;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d02e      	beq.n	800607e <wifi_destroy+0x6c>
	wifi->esp8266 = NULL;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2200      	movs	r2, #0
 8006024:	705a      	strb	r2, [r3, #1]
 8006026:	2200      	movs	r2, #0
 8006028:	709a      	strb	r2, [r3, #2]
 800602a:	2200      	movs	r2, #0
 800602c:	70da      	strb	r2, [r3, #3]
 800602e:	2200      	movs	r2, #0
 8006030:	711a      	strb	r2, [r3, #4]
	bytes_destroy(wifi->received);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006038:	330d      	adds	r3, #13
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4618      	mov	r0, r3
 800603e:	f7fd fc23 	bl	8003888 <bytes_destroy>
	wifi->received = NULL;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006048:	330d      	adds	r3, #13
 800604a:	2200      	movs	r2, #0
 800604c:	701a      	strb	r2, [r3, #0]
 800604e:	2200      	movs	r2, #0
 8006050:	705a      	strb	r2, [r3, #1]
 8006052:	2200      	movs	r2, #0
 8006054:	709a      	strb	r2, [r3, #2]
 8006056:	2200      	movs	r2, #0
 8006058:	70da      	strb	r2, [r3, #3]
	wifi->mqtt_server = NULL;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006060:	3311      	adds	r3, #17
 8006062:	2200      	movs	r2, #0
 8006064:	701a      	strb	r2, [r3, #0]
 8006066:	2200      	movs	r2, #0
 8006068:	705a      	strb	r2, [r3, #1]
 800606a:	2200      	movs	r2, #0
 800606c:	709a      	strb	r2, [r3, #2]
 800606e:	2200      	movs	r2, #0
 8006070:	70da      	strb	r2, [r3, #3]
	free(wifi);
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	f006 fb4c 	bl	800c710 <free>
	wifi = NULL;
 8006078:	2300      	movs	r3, #0
 800607a:	607b      	str	r3, [r7, #4]
 800607c:	e000      	b.n	8006080 <wifi_destroy+0x6e>
	if( wifi == NULL ) return;
 800607e:	bf00      	nop
}
 8006080:	3708      	adds	r7, #8
 8006082:	46bd      	mov	sp, r7
 8006084:	bd80      	pop	{r7, pc}

08006086 <wifi_connect>:

void wifi_connect(wifi* wifi, char* ip, unsigned int port){
 8006086:	b580      	push	{r7, lr}
 8006088:	b084      	sub	sp, #16
 800608a:	af00      	add	r7, sp, #0
 800608c:	60f8      	str	r0, [r7, #12]
 800608e:	60b9      	str	r1, [r7, #8]
 8006090:	607a      	str	r2, [r7, #4]
	if( wifi == NULL ) return;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d018      	beq.n	80060ca <wifi_connect+0x44>

	if ( wifi->mqtt_server != NULL ){
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800609e:	3311      	adds	r3, #17
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d003      	beq.n	80060ae <wifi_connect+0x28>
		wifi->connected = true;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	2201      	movs	r2, #1
 80060aa:	701a      	strb	r2, [r3, #0]
		return;\
 80060ac:	e00e      	b.n	80060cc <wifi_connect+0x46>
	}
	wifi->connected = esp8266_createTCP(wifi->esp8266, (uint8_t*) ip, (uint16_t) port);
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	f8d3 3001 	ldr.w	r3, [r3, #1]
 80060b4:	687a      	ldr	r2, [r7, #4]
 80060b6:	b292      	uxth	r2, r2
 80060b8:	68b9      	ldr	r1, [r7, #8]
 80060ba:	4618      	mov	r0, r3
 80060bc:	f7fc ff9a 	bl	8002ff4 <esp8266_createTCP>
 80060c0:	4603      	mov	r3, r0
 80060c2:	461a      	mov	r2, r3
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	701a      	strb	r2, [r3, #0]
 80060c8:	e000      	b.n	80060cc <wifi_connect+0x46>
	if( wifi == NULL ) return;
 80060ca:	bf00      	nop
}
 80060cc:	3710      	adds	r7, #16
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}

080060d2 <wifi_is_connected>:

    esp8266_releaseTCP(wifi->esp8266);
    wifi->connected = false;
}

bool wifi_is_connected(wifi* wifi){
 80060d2:	b480      	push	{r7}
 80060d4:	b083      	sub	sp, #12
 80060d6:	af00      	add	r7, sp, #0
 80060d8:	6078      	str	r0, [r7, #4]
	return wifi == NULL ? false : wifi->connected;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d005      	beq.n	80060ec <wifi_is_connected+0x1a>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	781b      	ldrb	r3, [r3, #0]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d001      	beq.n	80060ec <wifi_is_connected+0x1a>
 80060e8:	2301      	movs	r3, #1
 80060ea:	e000      	b.n	80060ee <wifi_is_connected+0x1c>
 80060ec:	2300      	movs	r3, #0
}
 80060ee:	4618      	mov	r0, r3
 80060f0:	370c      	adds	r7, #12
 80060f2:	46bd      	mov	sp, r7
 80060f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f8:	4770      	bx	lr

080060fa <wifi_read>:

bytes* wifi_read(wifi* wifi){
 80060fa:	b580      	push	{r7, lr}
 80060fc:	b082      	sub	sp, #8
 80060fe:	af00      	add	r7, sp, #0
 8006100:	6078      	str	r0, [r7, #4]
	if( wifi == NULL ) return NULL;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d101      	bne.n	800610c <wifi_read+0x12>
 8006108:	2300      	movs	r3, #0
 800610a:	e002      	b.n	8006112 <wifi_read+0x18>
	return bytes_init();
 800610c:	f7fd fb94 	bl	8003838 <bytes_init>
 8006110:	4603      	mov	r3, r0
}
 8006112:	4618      	mov	r0, r3
 8006114:	3708      	adds	r7, #8
 8006116:	46bd      	mov	sp, r7
 8006118:	bd80      	pop	{r7, pc}

0800611a <wifi_write>:

void wifi_write(wifi* wifi, bytes* bytes){
 800611a:	b580      	push	{r7, lr}
 800611c:	b084      	sub	sp, #16
 800611e:	af00      	add	r7, sp, #0
 8006120:	6078      	str	r0, [r7, #4]
 8006122:	6039      	str	r1, [r7, #0]
    if( ! wifi->connected || bytes == NULL || bytes_is_empty(bytes) ) return;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	781b      	ldrb	r3, [r3, #0]
 8006128:	f083 0301 	eor.w	r3, r3, #1
 800612c:	b2db      	uxtb	r3, r3
 800612e:	2b00      	cmp	r3, #0
 8006130:	d130      	bne.n	8006194 <wifi_write+0x7a>
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d02d      	beq.n	8006194 <wifi_write+0x7a>
 8006138:	6838      	ldr	r0, [r7, #0]
 800613a:	f7fd fbd9 	bl	80038f0 <bytes_is_empty>
 800613e:	4603      	mov	r3, r0
 8006140:	2b00      	cmp	r3, #0
 8006142:	d127      	bne.n	8006194 <wifi_write+0x7a>

    if( wifi->mqtt_server != NULL ){
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800614a:	3311      	adds	r3, #17
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d009      	beq.n	8006166 <wifi_write+0x4c>
        mqtt_server_request(wifi->mqtt_server, bytes);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006158:	3311      	adds	r3, #17
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	6839      	ldr	r1, [r7, #0]
 800615e:	4618      	mov	r0, r3
 8006160:	f7fe fbb3 	bl	80048ca <mqtt_server_request>
        return;
 8006164:	e017      	b.n	8006196 <wifi_write+0x7c>
    }

    uint8_t* array = bytes_to_array(bytes);
 8006166:	6838      	ldr	r0, [r7, #0]
 8006168:	f7fd fc63 	bl	8003a32 <bytes_to_array>
 800616c:	60f8      	str	r0, [r7, #12]
    uint16_t size = bytes_get_size(bytes);
 800616e:	6838      	ldr	r0, [r7, #0]
 8006170:	f7fd fc2b 	bl	80039ca <bytes_get_size>
 8006174:	4603      	mov	r3, r0
 8006176:	817b      	strh	r3, [r7, #10]
    esp8266_send(wifi->esp8266, array, size);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	f8d3 3001 	ldr.w	r3, [r3, #1]
 800617e:	897a      	ldrh	r2, [r7, #10]
 8006180:	68f9      	ldr	r1, [r7, #12]
 8006182:	4618      	mov	r0, r3
 8006184:	f7fc ff66 	bl	8003054 <esp8266_send>
    free(array);
 8006188:	68f8      	ldr	r0, [r7, #12]
 800618a:	f006 fac1 	bl	800c710 <free>
    array = NULL;
 800618e:	2300      	movs	r3, #0
 8006190:	60fb      	str	r3, [r7, #12]
 8006192:	e000      	b.n	8006196 <wifi_write+0x7c>
    if( ! wifi->connected || bytes == NULL || bytes_is_empty(bytes) ) return;
 8006194:	bf00      	nop
}
 8006196:	3710      	adds	r7, #16
 8006198:	46bd      	mov	sp, r7
 800619a:	bd80      	pop	{r7, pc}

0800619c <sen0161_init>:
#include <sen0161/sen0161.h>

sen0161* sen0161_init(direct_memory_access* dma, uint32_t channel, float offset){
 800619c:	b590      	push	{r4, r7, lr}
 800619e:	b087      	sub	sp, #28
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	60f8      	str	r0, [r7, #12]
 80061a4:	60b9      	str	r1, [r7, #8]
 80061a6:	ed87 0a01 	vstr	s0, [r7, #4]
	sen0161* result = (sen0161*) malloc(sizeof(sen0161));
 80061aa:	20b0      	movs	r0, #176	; 0xb0
 80061ac:	f006 faa8 	bl	800c700 <malloc>
 80061b0:	4603      	mov	r3, r0
 80061b2:	617b      	str	r3, [r7, #20]
	result->channel = channel;
 80061b4:	697b      	ldr	r3, [r7, #20]
 80061b6:	68ba      	ldr	r2, [r7, #8]
 80061b8:	601a      	str	r2, [r3, #0]
	result->offset = offset;
 80061ba:	697b      	ldr	r3, [r7, #20]
 80061bc:	687a      	ldr	r2, [r7, #4]
 80061be:	605a      	str	r2, [r3, #4]
	for(register int i = 0; i < 40; i++) result->readings[i] = 0;
 80061c0:	2400      	movs	r4, #0
 80061c2:	e011      	b.n	80061e8 <sen0161_init+0x4c>
 80061c4:	697b      	ldr	r3, [r7, #20]
 80061c6:	1ca2      	adds	r2, r4, #2
 80061c8:	2100      	movs	r1, #0
 80061ca:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
 80061ce:	0091      	lsls	r1, r2, #2
 80061d0:	4419      	add	r1, r3
 80061d2:	2000      	movs	r0, #0
 80061d4:	7048      	strb	r0, [r1, #1]
 80061d6:	0091      	lsls	r1, r2, #2
 80061d8:	4419      	add	r1, r3
 80061da:	2000      	movs	r0, #0
 80061dc:	7088      	strb	r0, [r1, #2]
 80061de:	0092      	lsls	r2, r2, #2
 80061e0:	441a      	add	r2, r3
 80061e2:	2300      	movs	r3, #0
 80061e4:	70d3      	strb	r3, [r2, #3]
 80061e6:	3401      	adds	r4, #1
 80061e8:	2c27      	cmp	r4, #39	; 0x27
 80061ea:	ddeb      	ble.n	80061c4 <sen0161_init+0x28>
	result->index = 0;
 80061ec:	697b      	ldr	r3, [r7, #20]
 80061ee:	2200      	movs	r2, #0
 80061f0:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
 80061f4:	2200      	movs	r2, #0
 80061f6:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
 80061fa:	2200      	movs	r2, #0
 80061fc:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
 8006200:	2200      	movs	r2, #0
 8006202:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
	result->dma = dma;
 8006206:	697b      	ldr	r3, [r7, #20]
 8006208:	68fa      	ldr	r2, [r7, #12]
 800620a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	return result;
 800620e:	697b      	ldr	r3, [r7, #20]
}
 8006210:	4618      	mov	r0, r3
 8006212:	371c      	adds	r7, #28
 8006214:	46bd      	mov	sp, r7
 8006216:	bd90      	pop	{r4, r7, pc}

08006218 <sen0161_get_channel>:
	sen0161->dma = NULL;
	free(sen0161);
	sen0161 = NULL;
}

uint32_t sen0161_get_channel(sen0161* sen0161){
 8006218:	b480      	push	{r7}
 800621a:	b083      	sub	sp, #12
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
	return sen0161 == NULL ? 0 : sen0161->channel;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d002      	beq.n	800622c <sen0161_get_channel+0x14>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	e000      	b.n	800622e <sen0161_get_channel+0x16>
 800622c:	2300      	movs	r3, #0
}
 800622e:	4618      	mov	r0, r3
 8006230:	370c      	adds	r7, #12
 8006232:	46bd      	mov	sp, r7
 8006234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006238:	4770      	bx	lr

0800623a <sen0161_get_offset>:
void sen0161_set_channel(sen0161* sen0161, uint32_t channel){
	if( sen0161 == NULL ) return;
	sen0161->channel = channel;
}

float sen0161_get_offset(sen0161* sen0161){
 800623a:	b480      	push	{r7}
 800623c:	b083      	sub	sp, #12
 800623e:	af00      	add	r7, sp, #0
 8006240:	6078      	str	r0, [r7, #4]
	return sen0161 == NULL ? 0 : sen0161->offset;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d002      	beq.n	800624e <sen0161_get_offset+0x14>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	685b      	ldr	r3, [r3, #4]
 800624c:	e001      	b.n	8006252 <sen0161_get_offset+0x18>
 800624e:	f04f 0300 	mov.w	r3, #0
 8006252:	ee07 3a90 	vmov	s15, r3
}
 8006256:	eeb0 0a67 	vmov.f32	s0, s15
 800625a:	370c      	adds	r7, #12
 800625c:	46bd      	mov	sp, r7
 800625e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006262:	4770      	bx	lr

08006264 <sen0161_get_readings>:
void sen0161_set_offset(sen0161* sen0161, const float offset){
	if( sen0161 == NULL ) return;
	sen0161->offset = offset;
}

unsigned int* sen0161_get_readings(sen0161* sen0161){
 8006264:	b480      	push	{r7}
 8006266:	b083      	sub	sp, #12
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
	return sen0161 == NULL ? NULL : sen0161->readings;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d002      	beq.n	8006278 <sen0161_get_readings+0x14>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	3308      	adds	r3, #8
 8006276:	e000      	b.n	800627a <sen0161_get_readings+0x16>
 8006278:	2300      	movs	r3, #0
}
 800627a:	4618      	mov	r0, r3
 800627c:	370c      	adds	r7, #12
 800627e:	46bd      	mov	sp, r7
 8006280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006284:	4770      	bx	lr

08006286 <sen0161_get_index>:
	if( sen0161 == NULL ) return;
	for(register int i = 0; i < 40; i++)
		sen0161->readings[i] = readings[i];
}

unsigned int sen0161_get_index(sen0161* sen0161){
 8006286:	b480      	push	{r7}
 8006288:	b083      	sub	sp, #12
 800628a:	af00      	add	r7, sp, #0
 800628c:	6078      	str	r0, [r7, #4]
	return sen0161 == NULL ? 0 : sen0161->index;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d003      	beq.n	800629c <sen0161_get_index+0x16>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800629a:	e000      	b.n	800629e <sen0161_get_index+0x18>
 800629c:	2300      	movs	r3, #0
}
 800629e:	4618      	mov	r0, r3
 80062a0:	370c      	adds	r7, #12
 80062a2:	46bd      	mov	sp, r7
 80062a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a8:	4770      	bx	lr

080062aa <sen0161_set_index>:

void sen0161_set_index(sen0161* sen0161, const unsigned int index){
 80062aa:	b480      	push	{r7}
 80062ac:	b083      	sub	sp, #12
 80062ae:	af00      	add	r7, sp, #0
 80062b0:	6078      	str	r0, [r7, #4]
 80062b2:	6039      	str	r1, [r7, #0]
	if( sen0161 == NULL ) return;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d004      	beq.n	80062c4 <sen0161_set_index+0x1a>
	sen0161->index = index;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	683a      	ldr	r2, [r7, #0]
 80062be:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 80062c2:	e000      	b.n	80062c6 <sen0161_set_index+0x1c>
	if( sen0161 == NULL ) return;
 80062c4:	bf00      	nop
}
 80062c6:	370c      	adds	r7, #12
 80062c8:	46bd      	mov	sp, r7
 80062ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ce:	4770      	bx	lr

080062d0 <sen0161_get_dma>:

direct_memory_access* sen0161_get_dma(sen0161* sen0161){
 80062d0:	b480      	push	{r7}
 80062d2:	b083      	sub	sp, #12
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
	return sen0161 == NULL ? NULL : sen0161->dma;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d003      	beq.n	80062e6 <sen0161_get_dma+0x16>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80062e4:	e000      	b.n	80062e8 <sen0161_get_dma+0x18>
 80062e6:	2300      	movs	r3, #0
}
 80062e8:	4618      	mov	r0, r3
 80062ea:	370c      	adds	r7, #12
 80062ec:	46bd      	mov	sp, r7
 80062ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f2:	4770      	bx	lr
 80062f4:	0000      	movs	r0, r0
	...

080062f8 <sen0161_read>:
void sen0161_set_dma(sen0161* sen0161, direct_memory_access* dma){
	if( sen0161 == NULL ) return;
	sen0161->dma = dma;
}

float sen0161_read(sen0161* sen0161){
 80062f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80062fa:	b085      	sub	sp, #20
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
	if( sen0161 == NULL ) return 0.0;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d102      	bne.n	800630c <sen0161_read+0x14>
 8006306:	f04f 0300 	mov.w	r3, #0
 800630a:	e064      	b.n	80063d6 <sen0161_read+0xde>
	unsigned int* readings = sen0161_get_readings(sen0161);
 800630c:	6878      	ldr	r0, [r7, #4]
 800630e:	f7ff ffa9 	bl	8006264 <sen0161_get_readings>
 8006312:	60f8      	str	r0, [r7, #12]
	readings[sen0161_get_index(sen0161)] = direct_memory_access_get_adc_value(sen0161_get_dma(sen0161), sen0161_get_channel(sen0161));
 8006314:	6878      	ldr	r0, [r7, #4]
 8006316:	f7ff ffdb 	bl	80062d0 <sen0161_get_dma>
 800631a:	4605      	mov	r5, r0
 800631c:	6878      	ldr	r0, [r7, #4]
 800631e:	f7ff ff7b 	bl	8006218 <sen0161_get_channel>
 8006322:	4606      	mov	r6, r0
 8006324:	6878      	ldr	r0, [r7, #4]
 8006326:	f7ff ffae 	bl	8006286 <sen0161_get_index>
 800632a:	4603      	mov	r3, r0
 800632c:	009b      	lsls	r3, r3, #2
 800632e:	68fa      	ldr	r2, [r7, #12]
 8006330:	18d4      	adds	r4, r2, r3
 8006332:	4631      	mov	r1, r6
 8006334:	4628      	mov	r0, r5
 8006336:	f7fb fed5 	bl	80020e4 <direct_memory_access_get_adc_value>
 800633a:	4603      	mov	r3, r0
 800633c:	6023      	str	r3, [r4, #0]
	sen0161_set_index(sen0161, ( sen0161_get_index(sen0161) + 1 ) % 40);
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f7ff ffa1 	bl	8006286 <sen0161_get_index>
 8006344:	4603      	mov	r3, r0
 8006346:	1c59      	adds	r1, r3, #1
 8006348:	4b29      	ldr	r3, [pc, #164]	; (80063f0 <sen0161_read+0xf8>)
 800634a:	fba3 2301 	umull	r2, r3, r3, r1
 800634e:	095a      	lsrs	r2, r3, #5
 8006350:	4613      	mov	r3, r2
 8006352:	009b      	lsls	r3, r3, #2
 8006354:	4413      	add	r3, r2
 8006356:	00db      	lsls	r3, r3, #3
 8006358:	1aca      	subs	r2, r1, r3
 800635a:	4611      	mov	r1, r2
 800635c:	6878      	ldr	r0, [r7, #4]
 800635e:	f7ff ffa4 	bl	80062aa <sen0161_set_index>
	float phValue = 3.5 * ( sen0161_average(sen0161) * 3.3 / 4096.0 ) + sen0161_get_offset(sen0161);
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	f000 f84a 	bl	80063fc <sen0161_average>
 8006368:	ee10 3a10 	vmov	r3, s0
 800636c:	4618      	mov	r0, r3
 800636e:	f7fa f8fb 	bl	8000568 <__aeabi_f2d>
 8006372:	a31d      	add	r3, pc, #116	; (adr r3, 80063e8 <sen0161_read+0xf0>)
 8006374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006378:	f7fa f94e 	bl	8000618 <__aeabi_dmul>
 800637c:	4603      	mov	r3, r0
 800637e:	460c      	mov	r4, r1
 8006380:	4618      	mov	r0, r3
 8006382:	4621      	mov	r1, r4
 8006384:	f04f 0200 	mov.w	r2, #0
 8006388:	4b1a      	ldr	r3, [pc, #104]	; (80063f4 <sen0161_read+0xfc>)
 800638a:	f7fa fa6f 	bl	800086c <__aeabi_ddiv>
 800638e:	4603      	mov	r3, r0
 8006390:	460c      	mov	r4, r1
 8006392:	4618      	mov	r0, r3
 8006394:	4621      	mov	r1, r4
 8006396:	f04f 0200 	mov.w	r2, #0
 800639a:	4b17      	ldr	r3, [pc, #92]	; (80063f8 <sen0161_read+0x100>)
 800639c:	f7fa f93c 	bl	8000618 <__aeabi_dmul>
 80063a0:	4603      	mov	r3, r0
 80063a2:	460c      	mov	r4, r1
 80063a4:	4625      	mov	r5, r4
 80063a6:	461c      	mov	r4, r3
 80063a8:	6878      	ldr	r0, [r7, #4]
 80063aa:	f7ff ff46 	bl	800623a <sen0161_get_offset>
 80063ae:	ee10 3a10 	vmov	r3, s0
 80063b2:	4618      	mov	r0, r3
 80063b4:	f7fa f8d8 	bl	8000568 <__aeabi_f2d>
 80063b8:	4602      	mov	r2, r0
 80063ba:	460b      	mov	r3, r1
 80063bc:	4620      	mov	r0, r4
 80063be:	4629      	mov	r1, r5
 80063c0:	f7f9 ff74 	bl	80002ac <__adddf3>
 80063c4:	4603      	mov	r3, r0
 80063c6:	460c      	mov	r4, r1
 80063c8:	4618      	mov	r0, r3
 80063ca:	4621      	mov	r1, r4
 80063cc:	f7fa fc1c 	bl	8000c08 <__aeabi_d2f>
 80063d0:	4603      	mov	r3, r0
 80063d2:	60bb      	str	r3, [r7, #8]
	return phValue;
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	ee07 3a90 	vmov	s15, r3
}
 80063da:	eeb0 0a67 	vmov.f32	s0, s15
 80063de:	3714      	adds	r7, #20
 80063e0:	46bd      	mov	sp, r7
 80063e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80063e4:	f3af 8000 	nop.w
 80063e8:	66666666 	.word	0x66666666
 80063ec:	400a6666 	.word	0x400a6666
 80063f0:	cccccccd 	.word	0xcccccccd
 80063f4:	40b00000 	.word	0x40b00000
 80063f8:	400c0000 	.word	0x400c0000

080063fc <sen0161_average>:

float sen0161_average(sen0161* sen0161){
 80063fc:	b590      	push	{r4, r7, lr}
 80063fe:	b08b      	sub	sp, #44	; 0x2c
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
	unsigned int* readings = sen0161_get_readings(sen0161);
 8006404:	6878      	ldr	r0, [r7, #4]
 8006406:	f7ff ff2d 	bl	8006264 <sen0161_get_readings>
 800640a:	6178      	str	r0, [r7, #20]
	unsigned int index = sen0161_get_index(sen0161);
 800640c:	6878      	ldr	r0, [r7, #4]
 800640e:	f7ff ff3a 	bl	8006286 <sen0161_get_index>
 8006412:	6138      	str	r0, [r7, #16]
	long amount = 0;
 8006414:	2300      	movs	r3, #0
 8006416:	627b      	str	r3, [r7, #36]	; 0x24

	if( index < 5 ){
 8006418:	693b      	ldr	r3, [r7, #16]
 800641a:	2b04      	cmp	r3, #4
 800641c:	d815      	bhi.n	800644a <sen0161_average+0x4e>
		for(register unsigned int i = 0; i < index; i++ ){
 800641e:	2400      	movs	r4, #0
 8006420:	e007      	b.n	8006432 <sen0161_average+0x36>
			amount += readings[i];
 8006422:	00a3      	lsls	r3, r4, #2
 8006424:	697a      	ldr	r2, [r7, #20]
 8006426:	4413      	add	r3, r2
 8006428:	681a      	ldr	r2, [r3, #0]
 800642a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800642c:	4413      	add	r3, r2
 800642e:	627b      	str	r3, [r7, #36]	; 0x24
		for(register unsigned int i = 0; i < index; i++ ){
 8006430:	3401      	adds	r4, #1
 8006432:	693b      	ldr	r3, [r7, #16]
 8006434:	429c      	cmp	r4, r3
 8006436:	d3f4      	bcc.n	8006422 <sen0161_average+0x26>
		}
		return (float) (amount / index);
 8006438:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800643a:	693b      	ldr	r3, [r7, #16]
 800643c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006440:	ee07 3a90 	vmov	s15, r3
 8006444:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006448:	e058      	b.n	80064fc <sen0161_average+0x100>
	}

	unsigned int maximum, minimum;
	if( readings[0] < readings[1] ){
 800644a:	697b      	ldr	r3, [r7, #20]
 800644c:	681a      	ldr	r2, [r3, #0]
 800644e:	697b      	ldr	r3, [r7, #20]
 8006450:	3304      	adds	r3, #4
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	429a      	cmp	r2, r3
 8006456:	d206      	bcs.n	8006466 <sen0161_average+0x6a>
		minimum = readings[0]; maximum = readings[1];
 8006458:	697b      	ldr	r3, [r7, #20]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	61fb      	str	r3, [r7, #28]
 800645e:	697b      	ldr	r3, [r7, #20]
 8006460:	685b      	ldr	r3, [r3, #4]
 8006462:	623b      	str	r3, [r7, #32]
 8006464:	e005      	b.n	8006472 <sen0161_average+0x76>
	} else {
		minimum = readings[1]; maximum = readings[0];
 8006466:	697b      	ldr	r3, [r7, #20]
 8006468:	685b      	ldr	r3, [r3, #4]
 800646a:	61fb      	str	r3, [r7, #28]
 800646c:	697b      	ldr	r3, [r7, #20]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	623b      	str	r3, [r7, #32]
	}

	for(unsigned int i=2; i < index; i++){
 8006472:	2302      	movs	r3, #2
 8006474:	61bb      	str	r3, [r7, #24]
 8006476:	e030      	b.n	80064da <sen0161_average+0xde>
		if( readings[i] < minimum) {
 8006478:	69bb      	ldr	r3, [r7, #24]
 800647a:	009b      	lsls	r3, r3, #2
 800647c:	697a      	ldr	r2, [r7, #20]
 800647e:	4413      	add	r3, r2
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	69fa      	ldr	r2, [r7, #28]
 8006484:	429a      	cmp	r2, r3
 8006486:	d90a      	bls.n	800649e <sen0161_average+0xa2>
			amount += minimum; minimum = readings[i];
 8006488:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800648a:	69fb      	ldr	r3, [r7, #28]
 800648c:	4413      	add	r3, r2
 800648e:	627b      	str	r3, [r7, #36]	; 0x24
 8006490:	69bb      	ldr	r3, [r7, #24]
 8006492:	009b      	lsls	r3, r3, #2
 8006494:	697a      	ldr	r2, [r7, #20]
 8006496:	4413      	add	r3, r2
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	61fb      	str	r3, [r7, #28]
 800649c:	e01a      	b.n	80064d4 <sen0161_average+0xd8>
	    } else if( readings[i] > maximum ) {
 800649e:	69bb      	ldr	r3, [r7, #24]
 80064a0:	009b      	lsls	r3, r3, #2
 80064a2:	697a      	ldr	r2, [r7, #20]
 80064a4:	4413      	add	r3, r2
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	6a3a      	ldr	r2, [r7, #32]
 80064aa:	429a      	cmp	r2, r3
 80064ac:	d20a      	bcs.n	80064c4 <sen0161_average+0xc8>
	    	amount += maximum; maximum = readings[i];
 80064ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064b0:	6a3b      	ldr	r3, [r7, #32]
 80064b2:	4413      	add	r3, r2
 80064b4:	627b      	str	r3, [r7, #36]	; 0x24
 80064b6:	69bb      	ldr	r3, [r7, #24]
 80064b8:	009b      	lsls	r3, r3, #2
 80064ba:	697a      	ldr	r2, [r7, #20]
 80064bc:	4413      	add	r3, r2
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	623b      	str	r3, [r7, #32]
 80064c2:	e007      	b.n	80064d4 <sen0161_average+0xd8>
	    } else {
		    amount += readings[i];
 80064c4:	69bb      	ldr	r3, [r7, #24]
 80064c6:	009b      	lsls	r3, r3, #2
 80064c8:	697a      	ldr	r2, [r7, #20]
 80064ca:	4413      	add	r3, r2
 80064cc:	681a      	ldr	r2, [r3, #0]
 80064ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d0:	4413      	add	r3, r2
 80064d2:	627b      	str	r3, [r7, #36]	; 0x24
	for(unsigned int i=2; i < index; i++){
 80064d4:	69bb      	ldr	r3, [r7, #24]
 80064d6:	3301      	adds	r3, #1
 80064d8:	61bb      	str	r3, [r7, #24]
 80064da:	69ba      	ldr	r2, [r7, #24]
 80064dc:	693b      	ldr	r3, [r7, #16]
 80064de:	429a      	cmp	r2, r3
 80064e0:	d3ca      	bcc.n	8006478 <sen0161_average+0x7c>
	    }
	}

	float average = (float) ( amount / (index-2) );
 80064e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064e4:	693b      	ldr	r3, [r7, #16]
 80064e6:	3b02      	subs	r3, #2
 80064e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80064ec:	ee07 3a90 	vmov	s15, r3
 80064f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064f4:	edc7 7a03 	vstr	s15, [r7, #12]
	return average;
 80064f8:	edd7 7a03 	vldr	s15, [r7, #12]
}
 80064fc:	eeb0 0a67 	vmov.f32	s0, s15
 8006500:	372c      	adds	r7, #44	; 0x2c
 8006502:	46bd      	mov	sp, r7
 8006504:	bd90      	pop	{r4, r7, pc}
	...

08006508 <sen0165_init>:
#include <sen0165/sen0165.h>

sen0165* sen0165_init(direct_memory_access* dma, uint32_t channel, float offset){
 8006508:	b590      	push	{r4, r7, lr}
 800650a:	b087      	sub	sp, #28
 800650c:	af00      	add	r7, sp, #0
 800650e:	60f8      	str	r0, [r7, #12]
 8006510:	60b9      	str	r1, [r7, #8]
 8006512:	ed87 0a01 	vstr	s0, [r7, #4]
	sen0165* result = (sen0165*) malloc(sizeof(sen0165));
 8006516:	20b4      	movs	r0, #180	; 0xb4
 8006518:	f006 f8f2 	bl	800c700 <malloc>
 800651c:	4603      	mov	r3, r0
 800651e:	617b      	str	r3, [r7, #20]
	result->channel = channel;
 8006520:	697b      	ldr	r3, [r7, #20]
 8006522:	68ba      	ldr	r2, [r7, #8]
 8006524:	601a      	str	r2, [r3, #0]
	result->offset = offset;
 8006526:	697b      	ldr	r3, [r7, #20]
 8006528:	687a      	ldr	r2, [r7, #4]
 800652a:	605a      	str	r2, [r3, #4]
	result->voltage = 3.3;
 800652c:	697b      	ldr	r3, [r7, #20]
 800652e:	4a14      	ldr	r2, [pc, #80]	; (8006580 <sen0165_init+0x78>)
 8006530:	609a      	str	r2, [r3, #8]
	for(register int i = 0; i < 40; i++) result->readings[i] = 0;
 8006532:	2400      	movs	r4, #0
 8006534:	e00c      	b.n	8006550 <sen0165_init+0x48>
 8006536:	697a      	ldr	r2, [r7, #20]
 8006538:	1ca3      	adds	r3, r4, #2
 800653a:	009b      	lsls	r3, r3, #2
 800653c:	4413      	add	r3, r2
 800653e:	2200      	movs	r2, #0
 8006540:	711a      	strb	r2, [r3, #4]
 8006542:	2200      	movs	r2, #0
 8006544:	715a      	strb	r2, [r3, #5]
 8006546:	2200      	movs	r2, #0
 8006548:	719a      	strb	r2, [r3, #6]
 800654a:	2200      	movs	r2, #0
 800654c:	71da      	strb	r2, [r3, #7]
 800654e:	3401      	adds	r4, #1
 8006550:	2c27      	cmp	r4, #39	; 0x27
 8006552:	ddf0      	ble.n	8006536 <sen0165_init+0x2e>
	result->index = 0;
 8006554:	697b      	ldr	r3, [r7, #20]
 8006556:	2200      	movs	r2, #0
 8006558:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
 800655c:	2200      	movs	r2, #0
 800655e:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
 8006562:	2200      	movs	r2, #0
 8006564:	f883 20ae 	strb.w	r2, [r3, #174]	; 0xae
 8006568:	2200      	movs	r2, #0
 800656a:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
	result->dma = dma;
 800656e:	697b      	ldr	r3, [r7, #20]
 8006570:	68fa      	ldr	r2, [r7, #12]
 8006572:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	return result;
 8006576:	697b      	ldr	r3, [r7, #20]
}
 8006578:	4618      	mov	r0, r3
 800657a:	371c      	adds	r7, #28
 800657c:	46bd      	mov	sp, r7
 800657e:	bd90      	pop	{r4, r7, pc}
 8006580:	40533333 	.word	0x40533333

08006584 <sen0165_get_channel>:
	sen0165->dma = NULL;
	free(sen0165);
	sen0165 = NULL;
}

uint32_t sen0165_get_channel(sen0165* sen0165){
 8006584:	b480      	push	{r7}
 8006586:	b083      	sub	sp, #12
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
	return sen0165 == NULL ? 0 : sen0165->channel;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d002      	beq.n	8006598 <sen0165_get_channel+0x14>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	e000      	b.n	800659a <sen0165_get_channel+0x16>
 8006598:	2300      	movs	r3, #0
}
 800659a:	4618      	mov	r0, r3
 800659c:	370c      	adds	r7, #12
 800659e:	46bd      	mov	sp, r7
 80065a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a4:	4770      	bx	lr

080065a6 <sen0165_get_offset>:
void sen0165_set_channel(sen0165* sen0165, uint32_t channel){
	if( sen0165 == NULL ) return;
	sen0165->channel = channel;
}

float sen0165_get_offset(sen0165* sen0165){
 80065a6:	b480      	push	{r7}
 80065a8:	b083      	sub	sp, #12
 80065aa:	af00      	add	r7, sp, #0
 80065ac:	6078      	str	r0, [r7, #4]
	return sen0165 == NULL ? 0 : sen0165->offset;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d002      	beq.n	80065ba <sen0165_get_offset+0x14>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	685b      	ldr	r3, [r3, #4]
 80065b8:	e001      	b.n	80065be <sen0165_get_offset+0x18>
 80065ba:	f04f 0300 	mov.w	r3, #0
 80065be:	ee07 3a90 	vmov	s15, r3
}
 80065c2:	eeb0 0a67 	vmov.f32	s0, s15
 80065c6:	370c      	adds	r7, #12
 80065c8:	46bd      	mov	sp, r7
 80065ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ce:	4770      	bx	lr

080065d0 <sen0165_get_voltage>:
void sen0165_set_offset(sen0165* sen0165, const float offset){
	if( sen0165 == NULL ) return;
	sen0165->offset = offset;
}

float sen0165_get_voltage(sen0165* sen0165){
 80065d0:	b480      	push	{r7}
 80065d2:	b083      	sub	sp, #12
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
	return sen0165 == NULL ? 0 : sen0165->voltage;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d002      	beq.n	80065e4 <sen0165_get_voltage+0x14>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	689b      	ldr	r3, [r3, #8]
 80065e2:	e001      	b.n	80065e8 <sen0165_get_voltage+0x18>
 80065e4:	f04f 0300 	mov.w	r3, #0
 80065e8:	ee07 3a90 	vmov	s15, r3
}
 80065ec:	eeb0 0a67 	vmov.f32	s0, s15
 80065f0:	370c      	adds	r7, #12
 80065f2:	46bd      	mov	sp, r7
 80065f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f8:	4770      	bx	lr

080065fa <sen0165_get_readings>:
void sen0165_set_voltage(sen0165* sen0165, const float voltage){
	if( sen0165 == NULL ) return;
	sen0165->voltage = voltage;
}

unsigned int* sen0165_get_readings(sen0165* sen0165){
 80065fa:	b480      	push	{r7}
 80065fc:	b083      	sub	sp, #12
 80065fe:	af00      	add	r7, sp, #0
 8006600:	6078      	str	r0, [r7, #4]
	return sen0165 == NULL ? NULL : sen0165->readings;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d002      	beq.n	800660e <sen0165_get_readings+0x14>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	330c      	adds	r3, #12
 800660c:	e000      	b.n	8006610 <sen0165_get_readings+0x16>
 800660e:	2300      	movs	r3, #0
}
 8006610:	4618      	mov	r0, r3
 8006612:	370c      	adds	r7, #12
 8006614:	46bd      	mov	sp, r7
 8006616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661a:	4770      	bx	lr

0800661c <sen0165_get_index>:
	if( sen0165 == NULL ) return;
	for(register int i = 0; i < 40; i++)
		sen0165->readings[i] = readings[i];
}

unsigned int sen0165_get_index(sen0165* sen0165){
 800661c:	b480      	push	{r7}
 800661e:	b083      	sub	sp, #12
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
	return sen0165 == NULL ? 0 : sen0165->index;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d003      	beq.n	8006632 <sen0165_get_index+0x16>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006630:	e000      	b.n	8006634 <sen0165_get_index+0x18>
 8006632:	2300      	movs	r3, #0
}
 8006634:	4618      	mov	r0, r3
 8006636:	370c      	adds	r7, #12
 8006638:	46bd      	mov	sp, r7
 800663a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663e:	4770      	bx	lr

08006640 <sen0165_set_index>:

void sen0165_set_index(sen0165* sen0165, const unsigned int index){
 8006640:	b480      	push	{r7}
 8006642:	b083      	sub	sp, #12
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
 8006648:	6039      	str	r1, [r7, #0]
	if( sen0165 == NULL ) return;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d004      	beq.n	800665a <sen0165_set_index+0x1a>
	sen0165->index = index;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	683a      	ldr	r2, [r7, #0]
 8006654:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 8006658:	e000      	b.n	800665c <sen0165_set_index+0x1c>
	if( sen0165 == NULL ) return;
 800665a:	bf00      	nop
}
 800665c:	370c      	adds	r7, #12
 800665e:	46bd      	mov	sp, r7
 8006660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006664:	4770      	bx	lr

08006666 <sen0165_get_dma>:

direct_memory_access* sen0165_get_dma(sen0165* sen0165){
 8006666:	b480      	push	{r7}
 8006668:	b083      	sub	sp, #12
 800666a:	af00      	add	r7, sp, #0
 800666c:	6078      	str	r0, [r7, #4]
	return sen0165 == NULL ? NULL : sen0165->dma;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d003      	beq.n	800667c <sen0165_get_dma+0x16>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800667a:	e000      	b.n	800667e <sen0165_get_dma+0x18>
 800667c:	2300      	movs	r3, #0
}
 800667e:	4618      	mov	r0, r3
 8006680:	370c      	adds	r7, #12
 8006682:	46bd      	mov	sp, r7
 8006684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006688:	4770      	bx	lr
	...

0800668c <sen0165_read>:
void sen0165_set_dma(sen0165* sen0165, direct_memory_access* dma){
	if( sen0165 == NULL ) return;
	sen0165->dma = dma;
}

float sen0165_read(sen0165* sen0165){
 800668c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800668e:	ed2d 8b02 	vpush	{d8}
 8006692:	b085      	sub	sp, #20
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
	if( sen0165 == NULL ) return 0.0;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d102      	bne.n	80066a4 <sen0165_read+0x18>
 800669e:	f04f 0300 	mov.w	r3, #0
 80066a2:	e080      	b.n	80067a6 <sen0165_read+0x11a>
	unsigned int* readings = sen0165_get_readings(sen0165);
 80066a4:	6878      	ldr	r0, [r7, #4]
 80066a6:	f7ff ffa8 	bl	80065fa <sen0165_get_readings>
 80066aa:	60f8      	str	r0, [r7, #12]
	readings[sen0165_get_index(sen0165)] = direct_memory_access_get_adc_value(sen0165_get_dma(sen0165), sen0165_get_channel(sen0165));
 80066ac:	6878      	ldr	r0, [r7, #4]
 80066ae:	f7ff ffda 	bl	8006666 <sen0165_get_dma>
 80066b2:	4605      	mov	r5, r0
 80066b4:	6878      	ldr	r0, [r7, #4]
 80066b6:	f7ff ff65 	bl	8006584 <sen0165_get_channel>
 80066ba:	4606      	mov	r6, r0
 80066bc:	6878      	ldr	r0, [r7, #4]
 80066be:	f7ff ffad 	bl	800661c <sen0165_get_index>
 80066c2:	4603      	mov	r3, r0
 80066c4:	009b      	lsls	r3, r3, #2
 80066c6:	68fa      	ldr	r2, [r7, #12]
 80066c8:	18d4      	adds	r4, r2, r3
 80066ca:	4631      	mov	r1, r6
 80066cc:	4628      	mov	r0, r5
 80066ce:	f7fb fd09 	bl	80020e4 <direct_memory_access_get_adc_value>
 80066d2:	4603      	mov	r3, r0
 80066d4:	6023      	str	r3, [r4, #0]
	sen0165_set_index(sen0165, ( sen0165_get_index(sen0165) + 1 ) % 40);
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	f7ff ffa0 	bl	800661c <sen0165_get_index>
 80066dc:	4603      	mov	r3, r0
 80066de:	1c59      	adds	r1, r3, #1
 80066e0:	4b35      	ldr	r3, [pc, #212]	; (80067b8 <sen0165_read+0x12c>)
 80066e2:	fba3 2301 	umull	r2, r3, r3, r1
 80066e6:	095a      	lsrs	r2, r3, #5
 80066e8:	4613      	mov	r3, r2
 80066ea:	009b      	lsls	r3, r3, #2
 80066ec:	4413      	add	r3, r2
 80066ee:	00db      	lsls	r3, r3, #3
 80066f0:	1aca      	subs	r2, r1, r3
 80066f2:	4611      	mov	r1, r2
 80066f4:	6878      	ldr	r0, [r7, #4]
 80066f6:	f7ff ffa3 	bl	8006640 <sen0165_set_index>
	float orpValue = ( ( 30 * sen0165_get_voltage(sen0165) * 1000 ) - ( 75 * sen0165_average(sen0165) * sen0165_get_voltage(sen0165) * 1000 / 4096.0 ) ) / ( 75 - sen0165_get_offset(sen0165) );
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	f7ff ff68 	bl	80065d0 <sen0165_get_voltage>
 8006700:	eeb0 7a40 	vmov.f32	s14, s0
 8006704:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
 8006708:	ee67 7a27 	vmul.f32	s15, s14, s15
 800670c:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80067bc <sen0165_read+0x130>
 8006710:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006714:	ee17 0a90 	vmov	r0, s15
 8006718:	f7f9 ff26 	bl	8000568 <__aeabi_f2d>
 800671c:	4604      	mov	r4, r0
 800671e:	460d      	mov	r5, r1
 8006720:	6878      	ldr	r0, [r7, #4]
 8006722:	f000 f851 	bl	80067c8 <sen0165_average>
 8006726:	eeb0 7a40 	vmov.f32	s14, s0
 800672a:	eddf 7a25 	vldr	s15, [pc, #148]	; 80067c0 <sen0165_read+0x134>
 800672e:	ee27 8a27 	vmul.f32	s16, s14, s15
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	f7ff ff4c 	bl	80065d0 <sen0165_get_voltage>
 8006738:	eef0 7a40 	vmov.f32	s15, s0
 800673c:	ee68 7a27 	vmul.f32	s15, s16, s15
 8006740:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80067bc <sen0165_read+0x130>
 8006744:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006748:	ee17 0a90 	vmov	r0, s15
 800674c:	f7f9 ff0c 	bl	8000568 <__aeabi_f2d>
 8006750:	f04f 0200 	mov.w	r2, #0
 8006754:	4b1b      	ldr	r3, [pc, #108]	; (80067c4 <sen0165_read+0x138>)
 8006756:	f7fa f889 	bl	800086c <__aeabi_ddiv>
 800675a:	4602      	mov	r2, r0
 800675c:	460b      	mov	r3, r1
 800675e:	4620      	mov	r0, r4
 8006760:	4629      	mov	r1, r5
 8006762:	f7f9 fda1 	bl	80002a8 <__aeabi_dsub>
 8006766:	4603      	mov	r3, r0
 8006768:	460c      	mov	r4, r1
 800676a:	4625      	mov	r5, r4
 800676c:	461c      	mov	r4, r3
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	f7ff ff19 	bl	80065a6 <sen0165_get_offset>
 8006774:	eeb0 7a40 	vmov.f32	s14, s0
 8006778:	eddf 7a11 	vldr	s15, [pc, #68]	; 80067c0 <sen0165_read+0x134>
 800677c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006780:	ee17 0a90 	vmov	r0, s15
 8006784:	f7f9 fef0 	bl	8000568 <__aeabi_f2d>
 8006788:	4602      	mov	r2, r0
 800678a:	460b      	mov	r3, r1
 800678c:	4620      	mov	r0, r4
 800678e:	4629      	mov	r1, r5
 8006790:	f7fa f86c 	bl	800086c <__aeabi_ddiv>
 8006794:	4603      	mov	r3, r0
 8006796:	460c      	mov	r4, r1
 8006798:	4618      	mov	r0, r3
 800679a:	4621      	mov	r1, r4
 800679c:	f7fa fa34 	bl	8000c08 <__aeabi_d2f>
 80067a0:	4603      	mov	r3, r0
 80067a2:	60bb      	str	r3, [r7, #8]
	return orpValue;
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	ee07 3a90 	vmov	s15, r3
}
 80067aa:	eeb0 0a67 	vmov.f32	s0, s15
 80067ae:	3714      	adds	r7, #20
 80067b0:	46bd      	mov	sp, r7
 80067b2:	ecbd 8b02 	vpop	{d8}
 80067b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80067b8:	cccccccd 	.word	0xcccccccd
 80067bc:	447a0000 	.word	0x447a0000
 80067c0:	42960000 	.word	0x42960000
 80067c4:	40b00000 	.word	0x40b00000

080067c8 <sen0165_average>:

float sen0165_average(sen0165* sen0165){
 80067c8:	b590      	push	{r4, r7, lr}
 80067ca:	b08b      	sub	sp, #44	; 0x2c
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
	if( sen0165 == NULL ) return 0.0;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d102      	bne.n	80067dc <sen0165_average+0x14>
 80067d6:	eddf 7a42 	vldr	s15, [pc, #264]	; 80068e0 <sen0165_average+0x118>
 80067da:	e07b      	b.n	80068d4 <sen0165_average+0x10c>

	unsigned int* readings = sen0165_get_readings(sen0165);
 80067dc:	6878      	ldr	r0, [r7, #4]
 80067de:	f7ff ff0c 	bl	80065fa <sen0165_get_readings>
 80067e2:	6178      	str	r0, [r7, #20]
	unsigned int index = sen0165_get_index(sen0165);
 80067e4:	6878      	ldr	r0, [r7, #4]
 80067e6:	f7ff ff19 	bl	800661c <sen0165_get_index>
 80067ea:	6138      	str	r0, [r7, #16]
	long amount = 0;
 80067ec:	2300      	movs	r3, #0
 80067ee:	627b      	str	r3, [r7, #36]	; 0x24

	if( index < 5 ){
 80067f0:	693b      	ldr	r3, [r7, #16]
 80067f2:	2b04      	cmp	r3, #4
 80067f4:	d815      	bhi.n	8006822 <sen0165_average+0x5a>
		for(register unsigned int i = 0; i < index; i++ ){
 80067f6:	2400      	movs	r4, #0
 80067f8:	e007      	b.n	800680a <sen0165_average+0x42>
			amount += readings[i];
 80067fa:	00a3      	lsls	r3, r4, #2
 80067fc:	697a      	ldr	r2, [r7, #20]
 80067fe:	4413      	add	r3, r2
 8006800:	681a      	ldr	r2, [r3, #0]
 8006802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006804:	4413      	add	r3, r2
 8006806:	627b      	str	r3, [r7, #36]	; 0x24
		for(register unsigned int i = 0; i < index; i++ ){
 8006808:	3401      	adds	r4, #1
 800680a:	693b      	ldr	r3, [r7, #16]
 800680c:	429c      	cmp	r4, r3
 800680e:	d3f4      	bcc.n	80067fa <sen0165_average+0x32>
		}
		return (float) (amount / index);
 8006810:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006812:	693b      	ldr	r3, [r7, #16]
 8006814:	fbb2 f3f3 	udiv	r3, r2, r3
 8006818:	ee07 3a90 	vmov	s15, r3
 800681c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006820:	e058      	b.n	80068d4 <sen0165_average+0x10c>
	}

	unsigned int maximum, minimum;
	if( readings[0] < readings[1] ){
 8006822:	697b      	ldr	r3, [r7, #20]
 8006824:	681a      	ldr	r2, [r3, #0]
 8006826:	697b      	ldr	r3, [r7, #20]
 8006828:	3304      	adds	r3, #4
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	429a      	cmp	r2, r3
 800682e:	d206      	bcs.n	800683e <sen0165_average+0x76>
		minimum = readings[0]; maximum = readings[1];
 8006830:	697b      	ldr	r3, [r7, #20]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	61fb      	str	r3, [r7, #28]
 8006836:	697b      	ldr	r3, [r7, #20]
 8006838:	685b      	ldr	r3, [r3, #4]
 800683a:	623b      	str	r3, [r7, #32]
 800683c:	e005      	b.n	800684a <sen0165_average+0x82>
	} else {
		minimum = readings[1]; maximum = readings[0];
 800683e:	697b      	ldr	r3, [r7, #20]
 8006840:	685b      	ldr	r3, [r3, #4]
 8006842:	61fb      	str	r3, [r7, #28]
 8006844:	697b      	ldr	r3, [r7, #20]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	623b      	str	r3, [r7, #32]
	}

	for(unsigned int i=2; i < index; i++){
 800684a:	2302      	movs	r3, #2
 800684c:	61bb      	str	r3, [r7, #24]
 800684e:	e030      	b.n	80068b2 <sen0165_average+0xea>
		if( readings[i] < minimum) {
 8006850:	69bb      	ldr	r3, [r7, #24]
 8006852:	009b      	lsls	r3, r3, #2
 8006854:	697a      	ldr	r2, [r7, #20]
 8006856:	4413      	add	r3, r2
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	69fa      	ldr	r2, [r7, #28]
 800685c:	429a      	cmp	r2, r3
 800685e:	d90a      	bls.n	8006876 <sen0165_average+0xae>
			amount += minimum; minimum = readings[i];
 8006860:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006862:	69fb      	ldr	r3, [r7, #28]
 8006864:	4413      	add	r3, r2
 8006866:	627b      	str	r3, [r7, #36]	; 0x24
 8006868:	69bb      	ldr	r3, [r7, #24]
 800686a:	009b      	lsls	r3, r3, #2
 800686c:	697a      	ldr	r2, [r7, #20]
 800686e:	4413      	add	r3, r2
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	61fb      	str	r3, [r7, #28]
 8006874:	e01a      	b.n	80068ac <sen0165_average+0xe4>
	    } else if( readings[i] > maximum ) {
 8006876:	69bb      	ldr	r3, [r7, #24]
 8006878:	009b      	lsls	r3, r3, #2
 800687a:	697a      	ldr	r2, [r7, #20]
 800687c:	4413      	add	r3, r2
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	6a3a      	ldr	r2, [r7, #32]
 8006882:	429a      	cmp	r2, r3
 8006884:	d20a      	bcs.n	800689c <sen0165_average+0xd4>
	    	amount += maximum; maximum = readings[i];
 8006886:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006888:	6a3b      	ldr	r3, [r7, #32]
 800688a:	4413      	add	r3, r2
 800688c:	627b      	str	r3, [r7, #36]	; 0x24
 800688e:	69bb      	ldr	r3, [r7, #24]
 8006890:	009b      	lsls	r3, r3, #2
 8006892:	697a      	ldr	r2, [r7, #20]
 8006894:	4413      	add	r3, r2
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	623b      	str	r3, [r7, #32]
 800689a:	e007      	b.n	80068ac <sen0165_average+0xe4>
	    } else {
		    amount += readings[i];
 800689c:	69bb      	ldr	r3, [r7, #24]
 800689e:	009b      	lsls	r3, r3, #2
 80068a0:	697a      	ldr	r2, [r7, #20]
 80068a2:	4413      	add	r3, r2
 80068a4:	681a      	ldr	r2, [r3, #0]
 80068a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068a8:	4413      	add	r3, r2
 80068aa:	627b      	str	r3, [r7, #36]	; 0x24
	for(unsigned int i=2; i < index; i++){
 80068ac:	69bb      	ldr	r3, [r7, #24]
 80068ae:	3301      	adds	r3, #1
 80068b0:	61bb      	str	r3, [r7, #24]
 80068b2:	69ba      	ldr	r2, [r7, #24]
 80068b4:	693b      	ldr	r3, [r7, #16]
 80068b6:	429a      	cmp	r2, r3
 80068b8:	d3ca      	bcc.n	8006850 <sen0165_average+0x88>
	    }
	}

	float average = (float) ( amount / (index-2) );
 80068ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068bc:	693b      	ldr	r3, [r7, #16]
 80068be:	3b02      	subs	r3, #2
 80068c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80068c4:	ee07 3a90 	vmov	s15, r3
 80068c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068cc:	edc7 7a03 	vstr	s15, [r7, #12]
	return average;
 80068d0:	edd7 7a03 	vldr	s15, [r7, #12]
}
 80068d4:	eeb0 0a67 	vmov.f32	s0, s15
 80068d8:	372c      	adds	r7, #44	; 0x2c
 80068da:	46bd      	mov	sp, r7
 80068dc:	bd90      	pop	{r4, r7, pc}
 80068de:	bf00      	nop
 80068e0:	00000000 	.word	0x00000000

080068e4 <sen0169_init>:
#include <sen0169/sen0169.h>

sen0169* sen0169_init(direct_memory_access* dma, uint32_t channel, float offset){
 80068e4:	b590      	push	{r4, r7, lr}
 80068e6:	b087      	sub	sp, #28
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	60f8      	str	r0, [r7, #12]
 80068ec:	60b9      	str	r1, [r7, #8]
 80068ee:	ed87 0a01 	vstr	s0, [r7, #4]
	sen0169* result 	= (sen0169*) malloc(sizeof(sen0169));
 80068f2:	2088      	movs	r0, #136	; 0x88
 80068f4:	f005 ff04 	bl	800c700 <malloc>
 80068f8:	4603      	mov	r3, r0
 80068fa:	617b      	str	r3, [r7, #20]
	result->channel 	= channel;
 80068fc:	697b      	ldr	r3, [r7, #20]
 80068fe:	68ba      	ldr	r2, [r7, #8]
 8006900:	601a      	str	r2, [r3, #0]
	result->offset 		= offset;
 8006902:	697b      	ldr	r3, [r7, #20]
 8006904:	687a      	ldr	r2, [r7, #4]
 8006906:	605a      	str	r2, [r3, #4]
	for(register int i = 0; i < 40; i++) result->readings[i] = 0;
 8006908:	2400      	movs	r4, #0
 800690a:	e011      	b.n	8006930 <sen0169_init+0x4c>
 800690c:	697b      	ldr	r3, [r7, #20]
 800690e:	1ca2      	adds	r2, r4, #2
 8006910:	2100      	movs	r1, #0
 8006912:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
 8006916:	0091      	lsls	r1, r2, #2
 8006918:	4419      	add	r1, r3
 800691a:	2000      	movs	r0, #0
 800691c:	7048      	strb	r0, [r1, #1]
 800691e:	0091      	lsls	r1, r2, #2
 8006920:	4419      	add	r1, r3
 8006922:	2000      	movs	r0, #0
 8006924:	7088      	strb	r0, [r1, #2]
 8006926:	0092      	lsls	r2, r2, #2
 8006928:	441a      	add	r2, r3
 800692a:	2300      	movs	r3, #0
 800692c:	70d3      	strb	r3, [r2, #3]
 800692e:	3401      	adds	r4, #1
 8006930:	2c27      	cmp	r4, #39	; 0x27
 8006932:	ddeb      	ble.n	800690c <sen0169_init+0x28>
	result->index 		= 0;
 8006934:	697b      	ldr	r3, [r7, #20]
 8006936:	2200      	movs	r2, #0
 8006938:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 800693c:	2200      	movs	r2, #0
 800693e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
 8006942:	2200      	movs	r2, #0
 8006944:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
 8006948:	2200      	movs	r2, #0
 800694a:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
	result->dma 		= dma;
 800694e:	697b      	ldr	r3, [r7, #20]
 8006950:	68fa      	ldr	r2, [r7, #12]
 8006952:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	return result;
 8006956:	697b      	ldr	r3, [r7, #20]
}
 8006958:	4618      	mov	r0, r3
 800695a:	371c      	adds	r7, #28
 800695c:	46bd      	mov	sp, r7
 800695e:	bd90      	pop	{r4, r7, pc}

08006960 <sen0169_get_channel>:
	sen0169->dma = NULL;
	free(sen0169);
	sen0169 = NULL;
}

uint32_t sen0169_get_channel(sen0169* sen0169){
 8006960:	b480      	push	{r7}
 8006962:	b083      	sub	sp, #12
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
	return sen0169 == NULL ? 0 : sen0169->channel;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d002      	beq.n	8006974 <sen0169_get_channel+0x14>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	e000      	b.n	8006976 <sen0169_get_channel+0x16>
 8006974:	2300      	movs	r3, #0
}
 8006976:	4618      	mov	r0, r3
 8006978:	370c      	adds	r7, #12
 800697a:	46bd      	mov	sp, r7
 800697c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006980:	4770      	bx	lr

08006982 <sen0169_get_offset>:
void sen0169_set_channel(sen0169* sen0169, uint32_t channel){
	if( sen0169 == NULL ) return;
	sen0169->channel = channel;
}

float sen0169_get_offset(sen0169* sen0169){
 8006982:	b480      	push	{r7}
 8006984:	b083      	sub	sp, #12
 8006986:	af00      	add	r7, sp, #0
 8006988:	6078      	str	r0, [r7, #4]
	return sen0169 == NULL ? 0 : sen0169->offset;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d002      	beq.n	8006996 <sen0169_get_offset+0x14>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	685b      	ldr	r3, [r3, #4]
 8006994:	e001      	b.n	800699a <sen0169_get_offset+0x18>
 8006996:	f04f 0300 	mov.w	r3, #0
 800699a:	ee07 3a90 	vmov	s15, r3
}
 800699e:	eeb0 0a67 	vmov.f32	s0, s15
 80069a2:	370c      	adds	r7, #12
 80069a4:	46bd      	mov	sp, r7
 80069a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069aa:	4770      	bx	lr

080069ac <sen0169_get_readings>:
void sen0169_set_offset(sen0169* sen0169, const float offset){
	if( sen0169 == NULL ) return;
	sen0169->offset = offset;
}

unsigned int* sen0169_get_readings(sen0169* sen0169){
 80069ac:	b480      	push	{r7}
 80069ae:	b083      	sub	sp, #12
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
	return sen0169 == NULL ? NULL : sen0169->readings;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d002      	beq.n	80069c0 <sen0169_get_readings+0x14>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	3308      	adds	r3, #8
 80069be:	e000      	b.n	80069c2 <sen0169_get_readings+0x16>
 80069c0:	2300      	movs	r3, #0
}
 80069c2:	4618      	mov	r0, r3
 80069c4:	370c      	adds	r7, #12
 80069c6:	46bd      	mov	sp, r7
 80069c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069cc:	4770      	bx	lr

080069ce <sen0169_get_index>:
	if( sen0169 == NULL ) return;
	for(register int i = 0; i < 30; i++)
		sen0169->readings[i] = readings[i];
}

unsigned int sen0169_get_index(sen0169* sen0169){
 80069ce:	b480      	push	{r7}
 80069d0:	b083      	sub	sp, #12
 80069d2:	af00      	add	r7, sp, #0
 80069d4:	6078      	str	r0, [r7, #4]
	return sen0169 == NULL ? 0 : sen0169->index;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d003      	beq.n	80069e4 <sen0169_get_index+0x16>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80069e2:	e000      	b.n	80069e6 <sen0169_get_index+0x18>
 80069e4:	2300      	movs	r3, #0
}
 80069e6:	4618      	mov	r0, r3
 80069e8:	370c      	adds	r7, #12
 80069ea:	46bd      	mov	sp, r7
 80069ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f0:	4770      	bx	lr

080069f2 <sen0169_set_index>:

void sen0169_set_index(sen0169* sen0169, const unsigned int index){
 80069f2:	b480      	push	{r7}
 80069f4:	b083      	sub	sp, #12
 80069f6:	af00      	add	r7, sp, #0
 80069f8:	6078      	str	r0, [r7, #4]
 80069fa:	6039      	str	r1, [r7, #0]
	if( sen0169 == NULL ) return;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d004      	beq.n	8006a0c <sen0169_set_index+0x1a>
	sen0169->index = index;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	683a      	ldr	r2, [r7, #0]
 8006a06:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8006a0a:	e000      	b.n	8006a0e <sen0169_set_index+0x1c>
	if( sen0169 == NULL ) return;
 8006a0c:	bf00      	nop
}
 8006a0e:	370c      	adds	r7, #12
 8006a10:	46bd      	mov	sp, r7
 8006a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a16:	4770      	bx	lr

08006a18 <sen0169_get_dma>:

direct_memory_access* sen0169_get_dma(sen0169* sen0169){
 8006a18:	b480      	push	{r7}
 8006a1a:	b083      	sub	sp, #12
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
	return sen0169 == NULL ? NULL : sen0169->dma;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d003      	beq.n	8006a2e <sen0169_get_dma+0x16>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a2c:	e000      	b.n	8006a30 <sen0169_get_dma+0x18>
 8006a2e:	2300      	movs	r3, #0
}
 8006a30:	4618      	mov	r0, r3
 8006a32:	370c      	adds	r7, #12
 8006a34:	46bd      	mov	sp, r7
 8006a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3a:	4770      	bx	lr
 8006a3c:	0000      	movs	r0, r0
	...

08006a40 <sen0169_read>:
void sen0169_set_dma(sen0169* sen0169, direct_memory_access* dma){
	if( sen0169 == NULL ) return;
	sen0169->dma = dma;
}

float sen0169_read(sen0169* sen0169){
 8006a40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a42:	b085      	sub	sp, #20
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
	if( sen0169 == NULL ) return 0.0;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d102      	bne.n	8006a54 <sen0169_read+0x14>
 8006a4e:	f04f 0300 	mov.w	r3, #0
 8006a52:	e064      	b.n	8006b1e <sen0169_read+0xde>
	unsigned int* readings = sen0169_get_readings(sen0169);
 8006a54:	6878      	ldr	r0, [r7, #4]
 8006a56:	f7ff ffa9 	bl	80069ac <sen0169_get_readings>
 8006a5a:	60f8      	str	r0, [r7, #12]
	readings[sen0169_get_index(sen0169)] = direct_memory_access_get_adc_value(sen0169_get_dma(sen0169), sen0169_get_channel(sen0169));
 8006a5c:	6878      	ldr	r0, [r7, #4]
 8006a5e:	f7ff ffdb 	bl	8006a18 <sen0169_get_dma>
 8006a62:	4605      	mov	r5, r0
 8006a64:	6878      	ldr	r0, [r7, #4]
 8006a66:	f7ff ff7b 	bl	8006960 <sen0169_get_channel>
 8006a6a:	4606      	mov	r6, r0
 8006a6c:	6878      	ldr	r0, [r7, #4]
 8006a6e:	f7ff ffae 	bl	80069ce <sen0169_get_index>
 8006a72:	4603      	mov	r3, r0
 8006a74:	009b      	lsls	r3, r3, #2
 8006a76:	68fa      	ldr	r2, [r7, #12]
 8006a78:	18d4      	adds	r4, r2, r3
 8006a7a:	4631      	mov	r1, r6
 8006a7c:	4628      	mov	r0, r5
 8006a7e:	f7fb fb31 	bl	80020e4 <direct_memory_access_get_adc_value>
 8006a82:	4603      	mov	r3, r0
 8006a84:	6023      	str	r3, [r4, #0]
	sen0169_set_index(sen0169, ( sen0169_get_index(sen0169) + 1 ) % 40);
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	f7ff ffa1 	bl	80069ce <sen0169_get_index>
 8006a8c:	4603      	mov	r3, r0
 8006a8e:	1c59      	adds	r1, r3, #1
 8006a90:	4b29      	ldr	r3, [pc, #164]	; (8006b38 <sen0169_read+0xf8>)
 8006a92:	fba3 2301 	umull	r2, r3, r3, r1
 8006a96:	095a      	lsrs	r2, r3, #5
 8006a98:	4613      	mov	r3, r2
 8006a9a:	009b      	lsls	r3, r3, #2
 8006a9c:	4413      	add	r3, r2
 8006a9e:	00db      	lsls	r3, r3, #3
 8006aa0:	1aca      	subs	r2, r1, r3
 8006aa2:	4611      	mov	r1, r2
 8006aa4:	6878      	ldr	r0, [r7, #4]
 8006aa6:	f7ff ffa4 	bl	80069f2 <sen0169_set_index>
	float phValue = 3.5 * ( sen0169_average(sen0169) * 3.3 / 4096.0 ) + sen0169_get_offset(sen0169);
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	f000 f84a 	bl	8006b44 <sen0169_average>
 8006ab0:	ee10 3a10 	vmov	r3, s0
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	f7f9 fd57 	bl	8000568 <__aeabi_f2d>
 8006aba:	a31d      	add	r3, pc, #116	; (adr r3, 8006b30 <sen0169_read+0xf0>)
 8006abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ac0:	f7f9 fdaa 	bl	8000618 <__aeabi_dmul>
 8006ac4:	4603      	mov	r3, r0
 8006ac6:	460c      	mov	r4, r1
 8006ac8:	4618      	mov	r0, r3
 8006aca:	4621      	mov	r1, r4
 8006acc:	f04f 0200 	mov.w	r2, #0
 8006ad0:	4b1a      	ldr	r3, [pc, #104]	; (8006b3c <sen0169_read+0xfc>)
 8006ad2:	f7f9 fecb 	bl	800086c <__aeabi_ddiv>
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	460c      	mov	r4, r1
 8006ada:	4618      	mov	r0, r3
 8006adc:	4621      	mov	r1, r4
 8006ade:	f04f 0200 	mov.w	r2, #0
 8006ae2:	4b17      	ldr	r3, [pc, #92]	; (8006b40 <sen0169_read+0x100>)
 8006ae4:	f7f9 fd98 	bl	8000618 <__aeabi_dmul>
 8006ae8:	4603      	mov	r3, r0
 8006aea:	460c      	mov	r4, r1
 8006aec:	4625      	mov	r5, r4
 8006aee:	461c      	mov	r4, r3
 8006af0:	6878      	ldr	r0, [r7, #4]
 8006af2:	f7ff ff46 	bl	8006982 <sen0169_get_offset>
 8006af6:	ee10 3a10 	vmov	r3, s0
 8006afa:	4618      	mov	r0, r3
 8006afc:	f7f9 fd34 	bl	8000568 <__aeabi_f2d>
 8006b00:	4602      	mov	r2, r0
 8006b02:	460b      	mov	r3, r1
 8006b04:	4620      	mov	r0, r4
 8006b06:	4629      	mov	r1, r5
 8006b08:	f7f9 fbd0 	bl	80002ac <__adddf3>
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	460c      	mov	r4, r1
 8006b10:	4618      	mov	r0, r3
 8006b12:	4621      	mov	r1, r4
 8006b14:	f7fa f878 	bl	8000c08 <__aeabi_d2f>
 8006b18:	4603      	mov	r3, r0
 8006b1a:	60bb      	str	r3, [r7, #8]
	return phValue;
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	ee07 3a90 	vmov	s15, r3
}
 8006b22:	eeb0 0a67 	vmov.f32	s0, s15
 8006b26:	3714      	adds	r7, #20
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b2c:	f3af 8000 	nop.w
 8006b30:	66666666 	.word	0x66666666
 8006b34:	400a6666 	.word	0x400a6666
 8006b38:	cccccccd 	.word	0xcccccccd
 8006b3c:	40b00000 	.word	0x40b00000
 8006b40:	400c0000 	.word	0x400c0000

08006b44 <sen0169_average>:

float sen0169_average(sen0169* sen0169){
 8006b44:	b590      	push	{r4, r7, lr}
 8006b46:	b08b      	sub	sp, #44	; 0x2c
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
	if( sen0169 == NULL ) return 0.0;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d102      	bne.n	8006b58 <sen0169_average+0x14>
 8006b52:	eddf 7a42 	vldr	s15, [pc, #264]	; 8006c5c <sen0169_average+0x118>
 8006b56:	e07b      	b.n	8006c50 <sen0169_average+0x10c>

	unsigned int* readings = sen0169_get_readings(sen0169);
 8006b58:	6878      	ldr	r0, [r7, #4]
 8006b5a:	f7ff ff27 	bl	80069ac <sen0169_get_readings>
 8006b5e:	6178      	str	r0, [r7, #20]
	unsigned int index = sen0169_get_index(sen0169);
 8006b60:	6878      	ldr	r0, [r7, #4]
 8006b62:	f7ff ff34 	bl	80069ce <sen0169_get_index>
 8006b66:	6138      	str	r0, [r7, #16]
	long amount = 0;
 8006b68:	2300      	movs	r3, #0
 8006b6a:	627b      	str	r3, [r7, #36]	; 0x24

	if( index < 5 ){
 8006b6c:	693b      	ldr	r3, [r7, #16]
 8006b6e:	2b04      	cmp	r3, #4
 8006b70:	d815      	bhi.n	8006b9e <sen0169_average+0x5a>
		for(register unsigned int i = 0; i < index; i++ ){
 8006b72:	2400      	movs	r4, #0
 8006b74:	e007      	b.n	8006b86 <sen0169_average+0x42>
			amount += readings[i];
 8006b76:	00a3      	lsls	r3, r4, #2
 8006b78:	697a      	ldr	r2, [r7, #20]
 8006b7a:	4413      	add	r3, r2
 8006b7c:	681a      	ldr	r2, [r3, #0]
 8006b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b80:	4413      	add	r3, r2
 8006b82:	627b      	str	r3, [r7, #36]	; 0x24
		for(register unsigned int i = 0; i < index; i++ ){
 8006b84:	3401      	adds	r4, #1
 8006b86:	693b      	ldr	r3, [r7, #16]
 8006b88:	429c      	cmp	r4, r3
 8006b8a:	d3f4      	bcc.n	8006b76 <sen0169_average+0x32>
		}
		return (float) (amount / index);
 8006b8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b8e:	693b      	ldr	r3, [r7, #16]
 8006b90:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b94:	ee07 3a90 	vmov	s15, r3
 8006b98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b9c:	e058      	b.n	8006c50 <sen0169_average+0x10c>
	}

	unsigned int maximum, minimum;
	if( readings[0] < readings[1] ){
 8006b9e:	697b      	ldr	r3, [r7, #20]
 8006ba0:	681a      	ldr	r2, [r3, #0]
 8006ba2:	697b      	ldr	r3, [r7, #20]
 8006ba4:	3304      	adds	r3, #4
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	429a      	cmp	r2, r3
 8006baa:	d206      	bcs.n	8006bba <sen0169_average+0x76>
		minimum = readings[0]; maximum = readings[1];
 8006bac:	697b      	ldr	r3, [r7, #20]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	61fb      	str	r3, [r7, #28]
 8006bb2:	697b      	ldr	r3, [r7, #20]
 8006bb4:	685b      	ldr	r3, [r3, #4]
 8006bb6:	623b      	str	r3, [r7, #32]
 8006bb8:	e005      	b.n	8006bc6 <sen0169_average+0x82>
	} else {
		minimum = readings[1]; maximum = readings[0];
 8006bba:	697b      	ldr	r3, [r7, #20]
 8006bbc:	685b      	ldr	r3, [r3, #4]
 8006bbe:	61fb      	str	r3, [r7, #28]
 8006bc0:	697b      	ldr	r3, [r7, #20]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	623b      	str	r3, [r7, #32]
	}

	for(unsigned int i=2; i < index; i++){
 8006bc6:	2302      	movs	r3, #2
 8006bc8:	61bb      	str	r3, [r7, #24]
 8006bca:	e030      	b.n	8006c2e <sen0169_average+0xea>
		if( readings[i] < minimum) {
 8006bcc:	69bb      	ldr	r3, [r7, #24]
 8006bce:	009b      	lsls	r3, r3, #2
 8006bd0:	697a      	ldr	r2, [r7, #20]
 8006bd2:	4413      	add	r3, r2
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	69fa      	ldr	r2, [r7, #28]
 8006bd8:	429a      	cmp	r2, r3
 8006bda:	d90a      	bls.n	8006bf2 <sen0169_average+0xae>
			amount += minimum; minimum = readings[i];
 8006bdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bde:	69fb      	ldr	r3, [r7, #28]
 8006be0:	4413      	add	r3, r2
 8006be2:	627b      	str	r3, [r7, #36]	; 0x24
 8006be4:	69bb      	ldr	r3, [r7, #24]
 8006be6:	009b      	lsls	r3, r3, #2
 8006be8:	697a      	ldr	r2, [r7, #20]
 8006bea:	4413      	add	r3, r2
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	61fb      	str	r3, [r7, #28]
 8006bf0:	e01a      	b.n	8006c28 <sen0169_average+0xe4>
	    } else if( readings[i] > maximum ) {
 8006bf2:	69bb      	ldr	r3, [r7, #24]
 8006bf4:	009b      	lsls	r3, r3, #2
 8006bf6:	697a      	ldr	r2, [r7, #20]
 8006bf8:	4413      	add	r3, r2
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	6a3a      	ldr	r2, [r7, #32]
 8006bfe:	429a      	cmp	r2, r3
 8006c00:	d20a      	bcs.n	8006c18 <sen0169_average+0xd4>
	    	amount += maximum; maximum = readings[i];
 8006c02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c04:	6a3b      	ldr	r3, [r7, #32]
 8006c06:	4413      	add	r3, r2
 8006c08:	627b      	str	r3, [r7, #36]	; 0x24
 8006c0a:	69bb      	ldr	r3, [r7, #24]
 8006c0c:	009b      	lsls	r3, r3, #2
 8006c0e:	697a      	ldr	r2, [r7, #20]
 8006c10:	4413      	add	r3, r2
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	623b      	str	r3, [r7, #32]
 8006c16:	e007      	b.n	8006c28 <sen0169_average+0xe4>
	    } else {
		    amount += readings[i];
 8006c18:	69bb      	ldr	r3, [r7, #24]
 8006c1a:	009b      	lsls	r3, r3, #2
 8006c1c:	697a      	ldr	r2, [r7, #20]
 8006c1e:	4413      	add	r3, r2
 8006c20:	681a      	ldr	r2, [r3, #0]
 8006c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c24:	4413      	add	r3, r2
 8006c26:	627b      	str	r3, [r7, #36]	; 0x24
	for(unsigned int i=2; i < index; i++){
 8006c28:	69bb      	ldr	r3, [r7, #24]
 8006c2a:	3301      	adds	r3, #1
 8006c2c:	61bb      	str	r3, [r7, #24]
 8006c2e:	69ba      	ldr	r2, [r7, #24]
 8006c30:	693b      	ldr	r3, [r7, #16]
 8006c32:	429a      	cmp	r2, r3
 8006c34:	d3ca      	bcc.n	8006bcc <sen0169_average+0x88>
	    }
	}

	float average = (float) ( amount / (index-2) );
 8006c36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c38:	693b      	ldr	r3, [r7, #16]
 8006c3a:	3b02      	subs	r3, #2
 8006c3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c40:	ee07 3a90 	vmov	s15, r3
 8006c44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c48:	edc7 7a03 	vstr	s15, [r7, #12]
	return average;
 8006c4c:	edd7 7a03 	vldr	s15, [r7, #12]
}
 8006c50:	eeb0 0a67 	vmov.f32	s0, s15
 8006c54:	372c      	adds	r7, #44	; 0x2c
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bd90      	pop	{r4, r7, pc}
 8006c5a:	bf00      	nop
 8006c5c:	00000000 	.word	0x00000000

08006c60 <sen0189_init>:
#include <sen0189/sen0189.h>

sen0189* sen0189_init(direct_memory_access* dma, uint32_t channel){
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b084      	sub	sp, #16
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
 8006c68:	6039      	str	r1, [r7, #0]
	sen0189* result = (sen0189*) malloc(sizeof(sen0189));
 8006c6a:	2008      	movs	r0, #8
 8006c6c:	f005 fd48 	bl	800c700 <malloc>
 8006c70:	4603      	mov	r3, r0
 8006c72:	60fb      	str	r3, [r7, #12]
	result->channel = channel;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	683a      	ldr	r2, [r7, #0]
 8006c78:	601a      	str	r2, [r3, #0]
	result->dma = dma;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	687a      	ldr	r2, [r7, #4]
 8006c7e:	605a      	str	r2, [r3, #4]
	return result;
 8006c80:	68fb      	ldr	r3, [r7, #12]
}
 8006c82:	4618      	mov	r0, r3
 8006c84:	3710      	adds	r7, #16
 8006c86:	46bd      	mov	sp, r7
 8006c88:	bd80      	pop	{r7, pc}

08006c8a <sen0189_get_channel>:
	sen0189->dma = NULL;
	free(sen0189);
	sen0189 = NULL;
}

uint32_t sen0189_get_channel(sen0189* sen0189){
 8006c8a:	b480      	push	{r7}
 8006c8c:	b083      	sub	sp, #12
 8006c8e:	af00      	add	r7, sp, #0
 8006c90:	6078      	str	r0, [r7, #4]
	return sen0189 == NULL ? 0 : sen0189->channel;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d002      	beq.n	8006c9e <sen0189_get_channel+0x14>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	e000      	b.n	8006ca0 <sen0189_get_channel+0x16>
 8006c9e:	2300      	movs	r3, #0
}
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	370c      	adds	r7, #12
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006caa:	4770      	bx	lr

08006cac <sen0189_get_dma>:
void sen0189_set_channel(sen0189* sen0189, uint32_t channel){
	if( sen0189 == NULL ) return;
	sen0189->channel = channel;
}

direct_memory_access* sen0189_get_dma(sen0189* sen0189){
 8006cac:	b480      	push	{r7}
 8006cae:	b083      	sub	sp, #12
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
	return sen0189 == NULL ? NULL : sen0189->dma;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d002      	beq.n	8006cc0 <sen0189_get_dma+0x14>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	685b      	ldr	r3, [r3, #4]
 8006cbe:	e000      	b.n	8006cc2 <sen0189_get_dma+0x16>
 8006cc0:	2300      	movs	r3, #0
}
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	370c      	adds	r7, #12
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ccc:	4770      	bx	lr
	...

08006cd0 <sen0189_read>:
void sen0189_set_dma(sen0189* sen0189, direct_memory_access* dma){
	if( sen0189 == NULL ) return;
	sen0189->dma = dma;
}

float sen0189_read(sen0189* sen0189){
 8006cd0:	b590      	push	{r4, r7, lr}
 8006cd2:	b085      	sub	sp, #20
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
	if( sen0189 == NULL ) return 0.0;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d102      	bne.n	8006ce4 <sen0189_read+0x14>
 8006cde:	f04f 0300 	mov.w	r3, #0
 8006ce2:	e01c      	b.n	8006d1e <sen0189_read+0x4e>
	int sensor_value = direct_memory_access_get_adc_value(sen0189_get_dma(sen0189), sen0189_get_channel(sen0189));
 8006ce4:	6878      	ldr	r0, [r7, #4]
 8006ce6:	f7ff ffe1 	bl	8006cac <sen0189_get_dma>
 8006cea:	4604      	mov	r4, r0
 8006cec:	6878      	ldr	r0, [r7, #4]
 8006cee:	f7ff ffcc 	bl	8006c8a <sen0189_get_channel>
 8006cf2:	4603      	mov	r3, r0
 8006cf4:	4619      	mov	r1, r3
 8006cf6:	4620      	mov	r0, r4
 8006cf8:	f7fb f9f4 	bl	80020e4 <direct_memory_access_get_adc_value>
 8006cfc:	4603      	mov	r3, r0
 8006cfe:	60fb      	str	r3, [r7, #12]
	return sensor_value * ( 3.3 / 4096.0 );
 8006d00:	68f8      	ldr	r0, [r7, #12]
 8006d02:	f7f9 fc1f 	bl	8000544 <__aeabi_i2d>
 8006d06:	a30a      	add	r3, pc, #40	; (adr r3, 8006d30 <sen0189_read+0x60>)
 8006d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d0c:	f7f9 fc84 	bl	8000618 <__aeabi_dmul>
 8006d10:	4603      	mov	r3, r0
 8006d12:	460c      	mov	r4, r1
 8006d14:	4618      	mov	r0, r3
 8006d16:	4621      	mov	r1, r4
 8006d18:	f7f9 ff76 	bl	8000c08 <__aeabi_d2f>
 8006d1c:	4603      	mov	r3, r0
 8006d1e:	ee07 3a90 	vmov	s15, r3
}
 8006d22:	eeb0 0a67 	vmov.f32	s0, s15
 8006d26:	3714      	adds	r7, #20
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	bd90      	pop	{r4, r7, pc}
 8006d2c:	f3af 8000 	nop.w
 8006d30:	66666666 	.word	0x66666666
 8006d34:	3f4a6666 	.word	0x3f4a6666

08006d38 <sen0237a_init>:
#include <sen0237a/sen0237a.h>

sen0237a* sen0237a_init(direct_memory_access* dma, uint32_t channel, char mode_calibration, char points_for_calibration, uint32_t voltage_point_1, uint8_t temperature_point_1, uint32_t voltage_point_2, uint8_t temperature_point_2, uint32_t current_temperature){
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b086      	sub	sp, #24
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	60f8      	str	r0, [r7, #12]
 8006d40:	60b9      	str	r1, [r7, #8]
 8006d42:	4611      	mov	r1, r2
 8006d44:	461a      	mov	r2, r3
 8006d46:	460b      	mov	r3, r1
 8006d48:	71fb      	strb	r3, [r7, #7]
 8006d4a:	4613      	mov	r3, r2
 8006d4c:	71bb      	strb	r3, [r7, #6]
	sen0237a* result = (sen0237a*) malloc(sizeof(sen0237a));
 8006d4e:	206a      	movs	r0, #106	; 0x6a
 8006d50:	f005 fcd6 	bl	800c700 <malloc>
 8006d54:	4603      	mov	r3, r0
 8006d56:	617b      	str	r3, [r7, #20]

	result->dma 						= dma;
 8006d58:	697b      	ldr	r3, [r7, #20]
 8006d5a:	68fa      	ldr	r2, [r7, #12]
 8006d5c:	601a      	str	r2, [r3, #0]
	result->channel						= channel;
 8006d5e:	697b      	ldr	r3, [r7, #20]
 8006d60:	68ba      	ldr	r2, [r7, #8]
 8006d62:	605a      	str	r2, [r3, #4]
	result->mode_calibration			= mode_calibration;
 8006d64:	697b      	ldr	r3, [r7, #20]
 8006d66:	79fa      	ldrb	r2, [r7, #7]
 8006d68:	721a      	strb	r2, [r3, #8]
	result->points_for_calibration		= points_for_calibration;
 8006d6a:	697b      	ldr	r3, [r7, #20]
 8006d6c:	79ba      	ldrb	r2, [r7, #6]
 8006d6e:	725a      	strb	r2, [r3, #9]

	result->voltage_point_1				= voltage_point_1;
 8006d70:	697b      	ldr	r3, [r7, #20]
 8006d72:	6a3a      	ldr	r2, [r7, #32]
 8006d74:	f8c3 200a 	str.w	r2, [r3, #10]
	result->temperature_point_1			= temperature_point_1;
 8006d78:	697b      	ldr	r3, [r7, #20]
 8006d7a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8006d7e:	739a      	strb	r2, [r3, #14]

	result->voltage_point_2				= voltage_point_2;
 8006d80:	697b      	ldr	r3, [r7, #20]
 8006d82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d84:	f8c3 200f 	str.w	r2, [r3, #15]
	result->temperature_point_2			= temperature_point_2;
 8006d88:	697b      	ldr	r3, [r7, #20]
 8006d8a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8006d8e:	74da      	strb	r2, [r3, #19]

	result->current_temperature			= current_temperature;
 8006d90:	697b      	ldr	r3, [r7, #20]
 8006d92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d94:	615a      	str	r2, [r3, #20]

	result->table_reference[0] = 14460;
 8006d96:	697b      	ldr	r3, [r7, #20]
 8006d98:	2200      	movs	r2, #0
 8006d9a:	f042 027c 	orr.w	r2, r2, #124	; 0x7c
 8006d9e:	761a      	strb	r2, [r3, #24]
 8006da0:	2200      	movs	r2, #0
 8006da2:	f042 0238 	orr.w	r2, r2, #56	; 0x38
 8006da6:	765a      	strb	r2, [r3, #25]
	result->table_reference[1] = 14220;
 8006da8:	697b      	ldr	r3, [r7, #20]
 8006daa:	2200      	movs	r2, #0
 8006dac:	f062 0273 	orn	r2, r2, #115	; 0x73
 8006db0:	769a      	strb	r2, [r3, #26]
 8006db2:	2200      	movs	r2, #0
 8006db4:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 8006db8:	76da      	strb	r2, [r3, #27]
	result->table_reference[2] = 13820;
 8006dba:	697b      	ldr	r3, [r7, #20]
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	f062 0203 	orn	r2, r2, #3
 8006dc2:	771a      	strb	r2, [r3, #28]
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	f042 0235 	orr.w	r2, r2, #53	; 0x35
 8006dca:	775a      	strb	r2, [r3, #29]
	result->table_reference[3] = 13440;
 8006dcc:	697b      	ldr	r3, [r7, #20]
 8006dce:	2200      	movs	r2, #0
 8006dd0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006dd4:	779a      	strb	r2, [r3, #30]
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	f042 0234 	orr.w	r2, r2, #52	; 0x34
 8006ddc:	77da      	strb	r2, [r3, #31]
	result->table_reference[4] = 13090;
 8006dde:	697b      	ldr	r3, [r7, #20]
 8006de0:	2200      	movs	r2, #0
 8006de2:	f042 0222 	orr.w	r2, r2, #34	; 0x22
 8006de6:	f883 2020 	strb.w	r2, [r3, #32]
 8006dea:	2200      	movs	r2, #0
 8006dec:	f042 0233 	orr.w	r2, r2, #51	; 0x33
 8006df0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	result->table_reference[5] = 12740;
 8006df4:	697b      	ldr	r3, [r7, #20]
 8006df6:	2200      	movs	r2, #0
 8006df8:	f062 023b 	orn	r2, r2, #59	; 0x3b
 8006dfc:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8006e00:	2200      	movs	r2, #0
 8006e02:	f042 0231 	orr.w	r2, r2, #49	; 0x31
 8006e06:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	result->table_reference[6] = 12420;
 8006e0a:	697b      	ldr	r3, [r7, #20]
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	f062 027b 	orn	r2, r2, #123	; 0x7b
 8006e12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8006e16:	2200      	movs	r2, #0
 8006e18:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 8006e1c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	result->table_reference[7] = 12110;
 8006e20:	697b      	ldr	r3, [r7, #20]
 8006e22:	2200      	movs	r2, #0
 8006e24:	f042 024e 	orr.w	r2, r2, #78	; 0x4e
 8006e28:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	f042 022f 	orr.w	r2, r2, #47	; 0x2f
 8006e32:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	result->table_reference[8] = 11810;
 8006e36:	697b      	ldr	r3, [r7, #20]
 8006e38:	2200      	movs	r2, #0
 8006e3a:	f042 0222 	orr.w	r2, r2, #34	; 0x22
 8006e3e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8006e42:	2200      	movs	r2, #0
 8006e44:	f042 022e 	orr.w	r2, r2, #46	; 0x2e
 8006e48:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	result->table_reference[9] = 11530;
 8006e4c:	697b      	ldr	r3, [r7, #20]
 8006e4e:	2200      	movs	r2, #0
 8006e50:	f042 020a 	orr.w	r2, r2, #10
 8006e54:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 8006e58:	2200      	movs	r2, #0
 8006e5a:	f042 022d 	orr.w	r2, r2, #45	; 0x2d
 8006e5e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	result->table_reference[10] = 11260;
 8006e62:	697b      	ldr	r3, [r7, #20]
 8006e64:	2200      	movs	r2, #0
 8006e66:	f062 0203 	orn	r2, r2, #3
 8006e6a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8006e6e:	2200      	movs	r2, #0
 8006e70:	f042 022b 	orr.w	r2, r2, #43	; 0x2b
 8006e74:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	result->table_reference[11] = 11010;
 8006e78:	697b      	ldr	r3, [r7, #20]
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	f042 0202 	orr.w	r2, r2, #2
 8006e80:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 8006e84:	2200      	movs	r2, #0
 8006e86:	f042 022b 	orr.w	r2, r2, #43	; 0x2b
 8006e8a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	result->table_reference[12] = 10770;
 8006e8e:	697b      	ldr	r3, [r7, #20]
 8006e90:	2200      	movs	r2, #0
 8006e92:	f042 0212 	orr.w	r2, r2, #18
 8006e96:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	f042 022a 	orr.w	r2, r2, #42	; 0x2a
 8006ea0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	result->table_reference[13] = 10530;
 8006ea4:	697b      	ldr	r3, [r7, #20]
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	f042 0222 	orr.w	r2, r2, #34	; 0x22
 8006eac:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	f042 0229 	orr.w	r2, r2, #41	; 0x29
 8006eb6:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	result->table_reference[14] = 10300;
 8006eba:	697b      	ldr	r3, [r7, #20]
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	f042 023c 	orr.w	r2, r2, #60	; 0x3c
 8006ec2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	f042 0228 	orr.w	r2, r2, #40	; 0x28
 8006ecc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	result->table_reference[15] = 10080;
 8006ed0:	697b      	ldr	r3, [r7, #20]
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8006ed8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 8006edc:	2200      	movs	r2, #0
 8006ede:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 8006ee2:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	result->table_reference[16] = 9860;
 8006ee6:	697b      	ldr	r3, [r7, #20]
 8006ee8:	2200      	movs	r2, #0
 8006eea:	f062 027b 	orn	r2, r2, #123	; 0x7b
 8006eee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	f042 0226 	orr.w	r2, r2, #38	; 0x26
 8006ef8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	result->table_reference[17] = 9660;
 8006efc:	697b      	ldr	r3, [r7, #20]
 8006efe:	2200      	movs	r2, #0
 8006f00:	f062 0243 	orn	r2, r2, #67	; 0x43
 8006f04:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8006f08:	2200      	movs	r2, #0
 8006f0a:	f042 0225 	orr.w	r2, r2, #37	; 0x25
 8006f0e:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	result->table_reference[18] = 9460;
 8006f12:	697b      	ldr	r3, [r7, #20]
 8006f14:	2200      	movs	r2, #0
 8006f16:	f062 020b 	orn	r2, r2, #11
 8006f1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006f1e:	2200      	movs	r2, #0
 8006f20:	f042 0224 	orr.w	r2, r2, #36	; 0x24
 8006f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	result->table_reference[19] = 9270;
 8006f28:	697b      	ldr	r3, [r7, #20]
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	f042 0236 	orr.w	r2, r2, #54	; 0x36
 8006f30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006f34:	2200      	movs	r2, #0
 8006f36:	f042 0224 	orr.w	r2, r2, #36	; 0x24
 8006f3a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
	result->table_reference[20] = 9080;
 8006f3e:	697b      	ldr	r3, [r7, #20]
 8006f40:	2200      	movs	r2, #0
 8006f42:	f042 0278 	orr.w	r2, r2, #120	; 0x78
 8006f46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	f042 0223 	orr.w	r2, r2, #35	; 0x23
 8006f50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	result->table_reference[21] = 8900;
 8006f54:	697b      	ldr	r3, [r7, #20]
 8006f56:	2200      	movs	r2, #0
 8006f58:	f062 023b 	orn	r2, r2, #59	; 0x3b
 8006f5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006f60:	2200      	movs	r2, #0
 8006f62:	f042 0222 	orr.w	r2, r2, #34	; 0x22
 8006f66:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
	result->table_reference[22] = 8730;
 8006f6a:	697b      	ldr	r3, [r7, #20]
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	f042 021a 	orr.w	r2, r2, #26
 8006f72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006f76:	2200      	movs	r2, #0
 8006f78:	f042 0222 	orr.w	r2, r2, #34	; 0x22
 8006f7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	result->table_reference[23] = 8570;
 8006f80:	697b      	ldr	r3, [r7, #20]
 8006f82:	2200      	movs	r2, #0
 8006f84:	f042 027a 	orr.w	r2, r2, #122	; 0x7a
 8006f88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	f042 0221 	orr.w	r2, r2, #33	; 0x21
 8006f92:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	result->table_reference[24] = 8410;
 8006f96:	697b      	ldr	r3, [r7, #20]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	f062 0225 	orn	r2, r2, #37	; 0x25
 8006f9e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	f042 0220 	orr.w	r2, r2, #32
 8006fa8:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	result->table_reference[25] = 8250;
 8006fac:	697b      	ldr	r3, [r7, #20]
 8006fae:	2200      	movs	r2, #0
 8006fb0:	f042 023a 	orr.w	r2, r2, #58	; 0x3a
 8006fb4:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 8006fb8:	2200      	movs	r2, #0
 8006fba:	f042 0220 	orr.w	r2, r2, #32
 8006fbe:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	result->table_reference[25] = 8110;
 8006fc2:	697b      	ldr	r3, [r7, #20]
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	f062 0251 	orn	r2, r2, #81	; 0x51
 8006fca:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 8006fce:	2200      	movs	r2, #0
 8006fd0:	f042 021f 	orr.w	r2, r2, #31
 8006fd4:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	result->table_reference[27] = 7960;
 8006fd8:	697b      	ldr	r3, [r7, #20]
 8006fda:	2200      	movs	r2, #0
 8006fdc:	f042 0218 	orr.w	r2, r2, #24
 8006fe0:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	f042 021f 	orr.w	r2, r2, #31
 8006fea:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
	result->table_reference[28] = 7820;
 8006fee:	697b      	ldr	r3, [r7, #20]
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	f062 0273 	orn	r2, r2, #115	; 0x73
 8006ff6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	f042 021e 	orr.w	r2, r2, #30
 8007000:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	result->table_reference[29] = 7690;
 8007004:	697b      	ldr	r3, [r7, #20]
 8007006:	2200      	movs	r2, #0
 8007008:	f042 020a 	orr.w	r2, r2, #10
 800700c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
 8007010:	2200      	movs	r2, #0
 8007012:	f042 021e 	orr.w	r2, r2, #30
 8007016:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	result->table_reference[30] = 7560;
 800701a:	697b      	ldr	r3, [r7, #20]
 800701c:	2200      	movs	r2, #0
 800701e:	f062 0277 	orn	r2, r2, #119	; 0x77
 8007022:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8007026:	2200      	movs	r2, #0
 8007028:	f042 021d 	orr.w	r2, r2, #29
 800702c:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	result->table_reference[31] = 7430;
 8007030:	697b      	ldr	r3, [r7, #20]
 8007032:	2200      	movs	r2, #0
 8007034:	f042 0206 	orr.w	r2, r2, #6
 8007038:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
 800703c:	2200      	movs	r2, #0
 800703e:	f042 021d 	orr.w	r2, r2, #29
 8007042:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	result->table_reference[32] = 7300;
 8007046:	697b      	ldr	r3, [r7, #20]
 8007048:	2200      	movs	r2, #0
 800704a:	f062 027b 	orn	r2, r2, #123	; 0x7b
 800704e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8007052:	2200      	movs	r2, #0
 8007054:	f042 021c 	orr.w	r2, r2, #28
 8007058:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	result->table_reference[33] = 7180;
 800705c:	697b      	ldr	r3, [r7, #20]
 800705e:	2200      	movs	r2, #0
 8007060:	f042 020c 	orr.w	r2, r2, #12
 8007064:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
 8007068:	2200      	movs	r2, #0
 800706a:	f042 021c 	orr.w	r2, r2, #28
 800706e:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
	result->table_reference[34] = 7070;
 8007072:	697b      	ldr	r3, [r7, #20]
 8007074:	2200      	movs	r2, #0
 8007076:	f062 0261 	orn	r2, r2, #97	; 0x61
 800707a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 800707e:	2200      	movs	r2, #0
 8007080:	f042 021b 	orr.w	r2, r2, #27
 8007084:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
	result->table_reference[35] = 6950;
 8007088:	697b      	ldr	r3, [r7, #20]
 800708a:	2200      	movs	r2, #0
 800708c:	f042 0226 	orr.w	r2, r2, #38	; 0x26
 8007090:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
 8007094:	2200      	movs	r2, #0
 8007096:	f042 021b 	orr.w	r2, r2, #27
 800709a:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
	result->table_reference[36] = 6840;
 800709e:	697b      	ldr	r3, [r7, #20]
 80070a0:	2200      	movs	r2, #0
 80070a2:	f062 0247 	orn	r2, r2, #71	; 0x47
 80070a6:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 80070aa:	2200      	movs	r2, #0
 80070ac:	f042 021a 	orr.w	r2, r2, #26
 80070b0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
	result->table_reference[37] = 6730;
 80070b4:	697b      	ldr	r3, [r7, #20]
 80070b6:	2200      	movs	r2, #0
 80070b8:	f042 024a 	orr.w	r2, r2, #74	; 0x4a
 80070bc:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
 80070c0:	2200      	movs	r2, #0
 80070c2:	f042 021a 	orr.w	r2, r2, #26
 80070c6:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
	result->table_reference[38] = 6630;
 80070ca:	697b      	ldr	r3, [r7, #20]
 80070cc:	2200      	movs	r2, #0
 80070ce:	f062 0219 	orn	r2, r2, #25
 80070d2:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 80070d6:	2200      	movs	r2, #0
 80070d8:	f042 0219 	orr.w	r2, r2, #25
 80070dc:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
	result->table_reference[39] = 6530;
 80070e0:	697b      	ldr	r3, [r7, #20]
 80070e2:	2200      	movs	r2, #0
 80070e4:	f062 027d 	orn	r2, r2, #125	; 0x7d
 80070e8:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 80070ec:	2200      	movs	r2, #0
 80070ee:	f042 0219 	orr.w	r2, r2, #25
 80070f2:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
	result->table_reference[40] = 6410;
 80070f6:	697b      	ldr	r3, [r7, #20]
 80070f8:	2200      	movs	r2, #0
 80070fa:	f042 020a 	orr.w	r2, r2, #10
 80070fe:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 8007102:	2200      	movs	r2, #0
 8007104:	f042 0219 	orr.w	r2, r2, #25
 8007108:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

	return result;
 800710c:	697b      	ldr	r3, [r7, #20]
}
 800710e:	4618      	mov	r0, r3
 8007110:	3718      	adds	r7, #24
 8007112:	46bd      	mov	sp, r7
 8007114:	bd80      	pop	{r7, pc}

08007116 <sen0237a_get_current_temperature>:
void sen0237a_set_temperature_point_2(sen0237a* sen0237a, uint8_t temperature_point_2){
	if( sen0237a == NULL ) return;
	sen0237a->temperature_point_2 = temperature_point_2;
}

uint32_t sen0237a_get_current_temperature(sen0237a* sen0237a){
 8007116:	b480      	push	{r7}
 8007118:	b083      	sub	sp, #12
 800711a:	af00      	add	r7, sp, #0
 800711c:	6078      	str	r0, [r7, #4]
	return sen0237a == NULL ? 0 : sen0237a->current_temperature;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d002      	beq.n	800712a <sen0237a_get_current_temperature+0x14>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	695b      	ldr	r3, [r3, #20]
 8007128:	e000      	b.n	800712c <sen0237a_get_current_temperature+0x16>
 800712a:	2300      	movs	r3, #0
}
 800712c:	4618      	mov	r0, r3
 800712e:	370c      	adds	r7, #12
 8007130:	46bd      	mov	sp, r7
 8007132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007136:	4770      	bx	lr

08007138 <sen0237a_read>:
void sen0237a_set_dma(sen0237a* sen0237a, direct_memory_access* dma){
	if( sen0237a == NULL ) return;
	sen0237a->dma = dma;
}

float sen0237a_read(sen0237a* sen0237a){
 8007138:	b590      	push	{r4, r7, lr}
 800713a:	b08b      	sub	sp, #44	; 0x2c
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
	float result = 0.0;
 8007140:	f04f 0300 	mov.w	r3, #0
 8007144:	627b      	str	r3, [r7, #36]	; 0x24

	if ( sen0237a->mode_calibration != 0x00 ){
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	7a1b      	ldrb	r3, [r3, #8]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d01f      	beq.n	800718e <sen0237a_read+0x56>
		float adc_raw = direct_memory_access_get_adc_value(sen0237a->dma, sen0237a->channel);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681a      	ldr	r2, [r3, #0]
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	685b      	ldr	r3, [r3, #4]
 8007156:	4619      	mov	r1, r3
 8007158:	4610      	mov	r0, r2
 800715a:	f7fa ffc3 	bl	80020e4 <direct_memory_access_get_adc_value>
 800715e:	ee07 0a90 	vmov	s15, r0
 8007162:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007166:	edc7 7a03 	vstr	s15, [r7, #12]
		result = adc_raw * ( 3.3 / 4096.0 );
 800716a:	68f8      	ldr	r0, [r7, #12]
 800716c:	f7f9 f9fc 	bl	8000568 <__aeabi_f2d>
 8007170:	a361      	add	r3, pc, #388	; (adr r3, 80072f8 <sen0237a_read+0x1c0>)
 8007172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007176:	f7f9 fa4f 	bl	8000618 <__aeabi_dmul>
 800717a:	4603      	mov	r3, r0
 800717c:	460c      	mov	r4, r1
 800717e:	4618      	mov	r0, r3
 8007180:	4621      	mov	r1, r4
 8007182:	f7f9 fd41 	bl	8000c08 <__aeabi_d2f>
 8007186:	4603      	mov	r3, r0
 8007188:	627b      	str	r3, [r7, #36]	; 0x24
		return result;
 800718a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800718c:	e0ac      	b.n	80072e8 <sen0237a_read+0x1b0>
	}

	char points_for_calibration = sen0237a->points_for_calibration;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	7a5b      	ldrb	r3, [r3, #9]
 8007192:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint8_t current_temperature = sen0237a_get_current_temperature(sen0237a);
 8007196:	6878      	ldr	r0, [r7, #4]
 8007198:	f7ff ffbd 	bl	8007116 <sen0237a_get_current_temperature>
 800719c:	4603      	mov	r3, r0
 800719e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	float adc_raw = direct_memory_access_get_adc_value(sen0237a->dma, sen0237a->channel);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681a      	ldr	r2, [r3, #0]
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	685b      	ldr	r3, [r3, #4]
 80071aa:	4619      	mov	r1, r3
 80071ac:	4610      	mov	r0, r2
 80071ae:	f7fa ff99 	bl	80020e4 <direct_memory_access_get_adc_value>
 80071b2:	ee07 0a90 	vmov	s15, r0
 80071b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071ba:	edc7 7a07 	vstr	s15, [r7, #28]
	float adc_voltage = adc_raw * ( 3.3 / 4096.0 );
 80071be:	69f8      	ldr	r0, [r7, #28]
 80071c0:	f7f9 f9d2 	bl	8000568 <__aeabi_f2d>
 80071c4:	a34c      	add	r3, pc, #304	; (adr r3, 80072f8 <sen0237a_read+0x1c0>)
 80071c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071ca:	f7f9 fa25 	bl	8000618 <__aeabi_dmul>
 80071ce:	4603      	mov	r3, r0
 80071d0:	460c      	mov	r4, r1
 80071d2:	4618      	mov	r0, r3
 80071d4:	4621      	mov	r1, r4
 80071d6:	f7f9 fd17 	bl	8000c08 <__aeabi_d2f>
 80071da:	4603      	mov	r3, r0
 80071dc:	61bb      	str	r3, [r7, #24]
	if( points_for_calibration == 0x01 ){
 80071de:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80071e2:	2b01      	cmp	r3, #1
 80071e4:	d13a      	bne.n	800725c <sen0237a_read+0x124>
		uint16_t saturation = sen0237a->voltage_point_1 + ( 35 * current_temperature ) - ( sen0237a->temperature_point_1 * 35 );
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	f8d3 300a 	ldr.w	r3, [r3, #10]
 80071ec:	b29a      	uxth	r2, r3
 80071ee:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80071f2:	b29b      	uxth	r3, r3
 80071f4:	4619      	mov	r1, r3
 80071f6:	0089      	lsls	r1, r1, #2
 80071f8:	440b      	add	r3, r1
 80071fa:	4619      	mov	r1, r3
 80071fc:	00c9      	lsls	r1, r1, #3
 80071fe:	1acb      	subs	r3, r1, r3
 8007200:	b29b      	uxth	r3, r3
 8007202:	4413      	add	r3, r2
 8007204:	b29a      	uxth	r2, r3
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	7b9b      	ldrb	r3, [r3, #14]
 800720a:	b29b      	uxth	r3, r3
 800720c:	4619      	mov	r1, r3
 800720e:	0089      	lsls	r1, r1, #2
 8007210:	440b      	add	r3, r1
 8007212:	4619      	mov	r1, r3
 8007214:	00c9      	lsls	r1, r1, #3
 8007216:	1acb      	subs	r3, r1, r3
 8007218:	b29b      	uxth	r3, r3
 800721a:	1ad3      	subs	r3, r2, r3
 800721c:	827b      	strh	r3, [r7, #18]
		uint16_t do_reference = sen0237a->table_reference[current_temperature];
 800721e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8007222:	687a      	ldr	r2, [r7, #4]
 8007224:	330c      	adds	r3, #12
 8007226:	f812 1013 	ldrb.w	r1, [r2, r3, lsl #1]
 800722a:	005b      	lsls	r3, r3, #1
 800722c:	4413      	add	r3, r2
 800722e:	785b      	ldrb	r3, [r3, #1]
 8007230:	021b      	lsls	r3, r3, #8
 8007232:	430b      	orrs	r3, r1
 8007234:	823b      	strh	r3, [r7, #16]
		result = (adc_voltage * do_reference / saturation);
 8007236:	8a3b      	ldrh	r3, [r7, #16]
 8007238:	ee07 3a90 	vmov	s15, r3
 800723c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007240:	edd7 7a06 	vldr	s15, [r7, #24]
 8007244:	ee67 6a27 	vmul.f32	s13, s14, s15
 8007248:	8a7b      	ldrh	r3, [r7, #18]
 800724a:	ee07 3a90 	vmov	s15, r3
 800724e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007252:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007256:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 800725a:	e044      	b.n	80072e6 <sen0237a_read+0x1ae>
	} else if ( points_for_calibration == 0x02 ){
 800725c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007260:	2b02      	cmp	r3, #2
 8007262:	d140      	bne.n	80072e6 <sen0237a_read+0x1ae>
		uint16_t saturation = (int16_t)( (int8_t)current_temperature - sen0237a->temperature_point_2) * ( (uint16_t)sen0237a->voltage_point_1 - sen0237a->voltage_point_2 ) / ( (uint8_t)sen0237a->temperature_point_1 - sen0237a->temperature_point_2 ) + sen0237a->voltage_point_2;
 8007264:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 8007268:	b21a      	sxth	r2, r3
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	7cdb      	ldrb	r3, [r3, #19]
 800726e:	b21b      	sxth	r3, r3
 8007270:	1ad3      	subs	r3, r2, r3
 8007272:	b21b      	sxth	r3, r3
 8007274:	461a      	mov	r2, r3
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	f8d3 300a 	ldr.w	r3, [r3, #10]
 800727c:	b29b      	uxth	r3, r3
 800727e:	4619      	mov	r1, r3
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	f8d3 300f 	ldr.w	r3, [r3, #15]
 8007286:	1acb      	subs	r3, r1, r3
 8007288:	fb03 f302 	mul.w	r3, r3, r2
 800728c:	687a      	ldr	r2, [r7, #4]
 800728e:	7b92      	ldrb	r2, [r2, #14]
 8007290:	4611      	mov	r1, r2
 8007292:	687a      	ldr	r2, [r7, #4]
 8007294:	7cd2      	ldrb	r2, [r2, #19]
 8007296:	1a8a      	subs	r2, r1, r2
 8007298:	fbb3 f3f2 	udiv	r3, r3, r2
 800729c:	b29a      	uxth	r2, r3
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	f8d3 300f 	ldr.w	r3, [r3, #15]
 80072a4:	b29b      	uxth	r3, r3
 80072a6:	4413      	add	r3, r2
 80072a8:	82fb      	strh	r3, [r7, #22]
		uint16_t do_reference = sen0237a->table_reference[current_temperature];
 80072aa:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80072ae:	687a      	ldr	r2, [r7, #4]
 80072b0:	330c      	adds	r3, #12
 80072b2:	f812 1013 	ldrb.w	r1, [r2, r3, lsl #1]
 80072b6:	005b      	lsls	r3, r3, #1
 80072b8:	4413      	add	r3, r2
 80072ba:	785b      	ldrb	r3, [r3, #1]
 80072bc:	021b      	lsls	r3, r3, #8
 80072be:	430b      	orrs	r3, r1
 80072c0:	82bb      	strh	r3, [r7, #20]
		result = (adc_voltage * do_reference / saturation);
 80072c2:	8abb      	ldrh	r3, [r7, #20]
 80072c4:	ee07 3a90 	vmov	s15, r3
 80072c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80072cc:	edd7 7a06 	vldr	s15, [r7, #24]
 80072d0:	ee67 6a27 	vmul.f32	s13, s14, s15
 80072d4:	8afb      	ldrh	r3, [r7, #22]
 80072d6:	ee07 3a90 	vmov	s15, r3
 80072da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80072de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80072e2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	}

	return result;
 80072e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072e8:	ee07 3a90 	vmov	s15, r3
}
 80072ec:	eeb0 0a67 	vmov.f32	s0, s15
 80072f0:	372c      	adds	r7, #44	; 0x2c
 80072f2:	46bd      	mov	sp, r7
 80072f4:	bd90      	pop	{r4, r7, pc}
 80072f6:	bf00      	nop
 80072f8:	66666666 	.word	0x66666666
 80072fc:	3f4a6666 	.word	0x3f4a6666

08007300 <SSD1306_Write_Command>:
extern I2C_HandleTypeDef hi2c2;

#define SSD1306_I2C       &hi2c2
#define SSD1306_I2C_ADDR  (0x78)

uint8_t SSD1306_Write_Command(uint8_t command){
 8007300:	b580      	push	{r7, lr}
 8007302:	b086      	sub	sp, #24
 8007304:	af02      	add	r7, sp, #8
 8007306:	4603      	mov	r3, r0
 8007308:	71fb      	strb	r3, [r7, #7]
	uint8_t data[2] = {0x00, command};
 800730a:	2300      	movs	r3, #0
 800730c:	733b      	strb	r3, [r7, #12]
 800730e:	79fb      	ldrb	r3, [r7, #7]
 8007310:	737b      	strb	r3, [r7, #13]

    if(HAL_I2C_Master_Transmit(SSD1306_I2C, SSD1306_I2C_ADDR, data, 2, 2) != HAL_OK)
 8007312:	f107 020c 	add.w	r2, r7, #12
 8007316:	2302      	movs	r3, #2
 8007318:	9300      	str	r3, [sp, #0]
 800731a:	2302      	movs	r3, #2
 800731c:	2178      	movs	r1, #120	; 0x78
 800731e:	4806      	ldr	r0, [pc, #24]	; (8007338 <SSD1306_Write_Command+0x38>)
 8007320:	f002 ff9a 	bl	800a258 <HAL_I2C_Master_Transmit>
 8007324:	4603      	mov	r3, r0
 8007326:	2b00      	cmp	r3, #0
 8007328:	d001      	beq.n	800732e <SSD1306_Write_Command+0x2e>
        return 0;
 800732a:	2300      	movs	r3, #0
 800732c:	e000      	b.n	8007330 <SSD1306_Write_Command+0x30>
    else
        return 1;
 800732e:	2301      	movs	r3, #1
}
 8007330:	4618      	mov	r0, r3
 8007332:	3710      	adds	r7, #16
 8007334:	46bd      	mov	sp, r7
 8007336:	bd80      	pop	{r7, pc}
 8007338:	20000b4c 	.word	0x20000b4c

0800733c <SSD1306_Goto>:
        return 0;
    else
        return 1;
}

void SSD1306_Goto(uint8_t col, uint8_t row){
 800733c:	b580      	push	{r7, lr}
 800733e:	b082      	sub	sp, #8
 8007340:	af00      	add	r7, sp, #0
 8007342:	4603      	mov	r3, r0
 8007344:	460a      	mov	r2, r1
 8007346:	71fb      	strb	r3, [r7, #7]
 8007348:	4613      	mov	r3, r2
 800734a:	71bb      	strb	r3, [r7, #6]
	if(row >= SSD1306_HEIGHT/8)
 800734c:	79bb      	ldrb	r3, [r7, #6]
 800734e:	2b07      	cmp	r3, #7
 8007350:	d901      	bls.n	8007356 <SSD1306_Goto+0x1a>
		row = SSD1306_HEIGHT/8 - 1;
 8007352:	2307      	movs	r3, #7
 8007354:	71bb      	strb	r3, [r7, #6]

	if(col >= SSD1306_WIDTH)
 8007356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800735a:	2b00      	cmp	r3, #0
 800735c:	da01      	bge.n	8007362 <SSD1306_Goto+0x26>
		col = SSD1306_WIDTH - 1;
 800735e:	237f      	movs	r3, #127	; 0x7f
 8007360:	71fb      	strb	r3, [r7, #7]

	SSD1306_Write_Command(0xB0 | row);
 8007362:	79bb      	ldrb	r3, [r7, #6]
 8007364:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8007368:	b2db      	uxtb	r3, r3
 800736a:	4618      	mov	r0, r3
 800736c:	f7ff ffc8 	bl	8007300 <SSD1306_Write_Command>
	SSD1306_Write_Command(0x00 | (col & 0x0F));
 8007370:	79fb      	ldrb	r3, [r7, #7]
 8007372:	f003 030f 	and.w	r3, r3, #15
 8007376:	b2db      	uxtb	r3, r3
 8007378:	4618      	mov	r0, r3
 800737a:	f7ff ffc1 	bl	8007300 <SSD1306_Write_Command>
	SSD1306_Write_Command(0x10 | (col >> 4));
 800737e:	79fb      	ldrb	r3, [r7, #7]
 8007380:	091b      	lsrs	r3, r3, #4
 8007382:	b2db      	uxtb	r3, r3
 8007384:	f043 0310 	orr.w	r3, r3, #16
 8007388:	b2db      	uxtb	r3, r3
 800738a:	4618      	mov	r0, r3
 800738c:	f7ff ffb8 	bl	8007300 <SSD1306_Write_Command>
}
 8007390:	bf00      	nop
 8007392:	3708      	adds	r7, #8
 8007394:	46bd      	mov	sp, r7
 8007396:	bd80      	pop	{r7, pc}

08007398 <SSD1306_Write_Char>:

void SSD1306_Write_Char(uint8_t c, SSD1306_Font_t* font){
 8007398:	b580      	push	{r7, lr}
 800739a:	b08a      	sub	sp, #40	; 0x28
 800739c:	af02      	add	r7, sp, #8
 800739e:	4603      	mov	r3, r0
 80073a0:	6039      	str	r1, [r7, #0]
 80073a2:	71fb      	strb	r3, [r7, #7]
	const uint8_t *base;
	uint8_t width, n;
	uint8_t data[16];

	if(c < 32 || c > 127)
 80073a4:	79fb      	ldrb	r3, [r7, #7]
 80073a6:	2b1f      	cmp	r3, #31
 80073a8:	d903      	bls.n	80073b2 <SSD1306_Write_Char+0x1a>
 80073aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	da01      	bge.n	80073b6 <SSD1306_Write_Char+0x1e>
		c = 127;
 80073b2:	237f      	movs	r3, #127	; 0x7f
 80073b4:	71fb      	strb	r3, [r7, #7]

	c -= 32;
 80073b6:	79fb      	ldrb	r3, [r7, #7]
 80073b8:	3b20      	subs	r3, #32
 80073ba:	71fb      	strb	r3, [r7, #7]

	width = font->width;
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	781b      	ldrb	r3, [r3, #0]
 80073c0:	77bb      	strb	r3, [r7, #30]
	data[0] = 0x40;
 80073c2:	2340      	movs	r3, #64	; 0x40
 80073c4:	723b      	strb	r3, [r7, #8]
	base = font->data + width*c;
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	685b      	ldr	r3, [r3, #4]
 80073ca:	7fba      	ldrb	r2, [r7, #30]
 80073cc:	79f9      	ldrb	r1, [r7, #7]
 80073ce:	fb01 f202 	mul.w	r2, r1, r2
 80073d2:	4413      	add	r3, r2
 80073d4:	61bb      	str	r3, [r7, #24]
	for(n = 0 ; n < width ; n++)
 80073d6:	2300      	movs	r3, #0
 80073d8:	77fb      	strb	r3, [r7, #31]
 80073da:	e00d      	b.n	80073f8 <SSD1306_Write_Char+0x60>
		data[1+n] = base[n];
 80073dc:	7ffb      	ldrb	r3, [r7, #31]
 80073de:	69ba      	ldr	r2, [r7, #24]
 80073e0:	441a      	add	r2, r3
 80073e2:	7ffb      	ldrb	r3, [r7, #31]
 80073e4:	3301      	adds	r3, #1
 80073e6:	7812      	ldrb	r2, [r2, #0]
 80073e8:	f107 0120 	add.w	r1, r7, #32
 80073ec:	440b      	add	r3, r1
 80073ee:	f803 2c18 	strb.w	r2, [r3, #-24]
	for(n = 0 ; n < width ; n++)
 80073f2:	7ffb      	ldrb	r3, [r7, #31]
 80073f4:	3301      	adds	r3, #1
 80073f6:	77fb      	strb	r3, [r7, #31]
 80073f8:	7ffa      	ldrb	r2, [r7, #31]
 80073fa:	7fbb      	ldrb	r3, [r7, #30]
 80073fc:	429a      	cmp	r2, r3
 80073fe:	d3ed      	bcc.n	80073dc <SSD1306_Write_Char+0x44>

	data[width+1] = 0x00;
 8007400:	7fbb      	ldrb	r3, [r7, #30]
 8007402:	3301      	adds	r3, #1
 8007404:	f107 0220 	add.w	r2, r7, #32
 8007408:	4413      	add	r3, r2
 800740a:	2200      	movs	r2, #0
 800740c:	f803 2c18 	strb.w	r2, [r3, #-24]

	HAL_I2C_Master_Transmit(SSD1306_I2C,SSD1306_I2C_ADDR, data, width+2, 10);
 8007410:	7fbb      	ldrb	r3, [r7, #30]
 8007412:	b29b      	uxth	r3, r3
 8007414:	3302      	adds	r3, #2
 8007416:	b299      	uxth	r1, r3
 8007418:	f107 0208 	add.w	r2, r7, #8
 800741c:	230a      	movs	r3, #10
 800741e:	9300      	str	r3, [sp, #0]
 8007420:	460b      	mov	r3, r1
 8007422:	2178      	movs	r1, #120	; 0x78
 8007424:	4803      	ldr	r0, [pc, #12]	; (8007434 <SSD1306_Write_Char+0x9c>)
 8007426:	f002 ff17 	bl	800a258 <HAL_I2C_Master_Transmit>
}
 800742a:	bf00      	nop
 800742c:	3720      	adds	r7, #32
 800742e:	46bd      	mov	sp, r7
 8007430:	bd80      	pop	{r7, pc}
 8007432:	bf00      	nop
 8007434:	20000b4c 	.word	0x20000b4c

08007438 <SSD1306_Write_Buffer>:

void SSD1306_Write_Buffer(uint8_t* str, uint8_t size, SSD1306_Font_t* font){
 8007438:	b580      	push	{r7, lr}
 800743a:	b086      	sub	sp, #24
 800743c:	af00      	add	r7, sp, #0
 800743e:	60f8      	str	r0, [r7, #12]
 8007440:	460b      	mov	r3, r1
 8007442:	607a      	str	r2, [r7, #4]
 8007444:	72fb      	strb	r3, [r7, #11]
	uint8_t  n;
	for(n = 0 ; n < size ; n++)
 8007446:	2300      	movs	r3, #0
 8007448:	75fb      	strb	r3, [r7, #23]
 800744a:	e00a      	b.n	8007462 <SSD1306_Write_Buffer+0x2a>
		SSD1306_Write_Char(str[n],font);
 800744c:	7dfb      	ldrb	r3, [r7, #23]
 800744e:	68fa      	ldr	r2, [r7, #12]
 8007450:	4413      	add	r3, r2
 8007452:	781b      	ldrb	r3, [r3, #0]
 8007454:	6879      	ldr	r1, [r7, #4]
 8007456:	4618      	mov	r0, r3
 8007458:	f7ff ff9e 	bl	8007398 <SSD1306_Write_Char>
	for(n = 0 ; n < size ; n++)
 800745c:	7dfb      	ldrb	r3, [r7, #23]
 800745e:	3301      	adds	r3, #1
 8007460:	75fb      	strb	r3, [r7, #23]
 8007462:	7dfa      	ldrb	r2, [r7, #23]
 8007464:	7afb      	ldrb	r3, [r7, #11]
 8007466:	429a      	cmp	r2, r3
 8007468:	d3f0      	bcc.n	800744c <SSD1306_Write_Buffer+0x14>
}
 800746a:	bf00      	nop
 800746c:	3718      	adds	r7, #24
 800746e:	46bd      	mov	sp, r7
 8007470:	bd80      	pop	{r7, pc}
	...

08007474 <SSD1306_Write_String>:

void SSD1306_Write_String(uint8_t *str){
 8007474:	b580      	push	{r7, lr}
 8007476:	b082      	sub	sp, #8
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
	SSD1306_Write_Buffer(str,strlen((char *)str),&SSD1306_Font_07X05);
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f7f8 feb1 	bl	80001e4 <strlen>
 8007482:	4603      	mov	r3, r0
 8007484:	b2db      	uxtb	r3, r3
 8007486:	4a04      	ldr	r2, [pc, #16]	; (8007498 <SSD1306_Write_String+0x24>)
 8007488:	4619      	mov	r1, r3
 800748a:	6878      	ldr	r0, [r7, #4]
 800748c:	f7ff ffd4 	bl	8007438 <SSD1306_Write_Buffer>
}
 8007490:	bf00      	nop
 8007492:	3708      	adds	r7, #8
 8007494:	46bd      	mov	sp, r7
 8007496:	bd80      	pop	{r7, pc}
 8007498:	200000dc 	.word	0x200000dc

0800749c <SSD1306_Write_Centered_String>:

void SSD1306_Write_Centered_String(uint8_t* str, uint8_t row){
 800749c:	b580      	push	{r7, lr}
 800749e:	b084      	sub	sp, #16
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
 80074a4:	460b      	mov	r3, r1
 80074a6:	70fb      	strb	r3, [r7, #3]
	int16_t col = (SSD1306_WIDTH - strlen((char *)str)*6)/2;
 80074a8:	6878      	ldr	r0, [r7, #4]
 80074aa:	f7f8 fe9b 	bl	80001e4 <strlen>
 80074ae:	4602      	mov	r2, r0
 80074b0:	4613      	mov	r3, r2
 80074b2:	005b      	lsls	r3, r3, #1
 80074b4:	4413      	add	r3, r2
 80074b6:	005b      	lsls	r3, r3, #1
 80074b8:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80074bc:	085b      	lsrs	r3, r3, #1
 80074be:	81fb      	strh	r3, [r7, #14]
	col = col < 0 ? 0 : col;
 80074c0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80074c4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80074c8:	81fb      	strh	r3, [r7, #14]
	SSD1306_Goto(col,row);
 80074ca:	89fb      	ldrh	r3, [r7, #14]
 80074cc:	b2db      	uxtb	r3, r3
 80074ce:	78fa      	ldrb	r2, [r7, #3]
 80074d0:	4611      	mov	r1, r2
 80074d2:	4618      	mov	r0, r3
 80074d4:	f7ff ff32 	bl	800733c <SSD1306_Goto>
	SSD1306_Write_String(str);
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	f7ff ffcb 	bl	8007474 <SSD1306_Write_String>
}
 80074de:	bf00      	nop
 80074e0:	3710      	adds	r7, #16
 80074e2:	46bd      	mov	sp, r7
 80074e4:	bd80      	pop	{r7, pc}
	...

080074e8 <SDD1306_Clear_Screen>:

void SDD1306_Clear_Screen(void){
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b088      	sub	sp, #32
 80074ec:	af02      	add	r7, sp, #8
	uint8_t n,m;
	uint8_t data[] = {0x40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
 80074ee:	1d3b      	adds	r3, r7, #4
 80074f0:	2200      	movs	r2, #0
 80074f2:	601a      	str	r2, [r3, #0]
 80074f4:	605a      	str	r2, [r3, #4]
 80074f6:	609a      	str	r2, [r3, #8]
 80074f8:	60da      	str	r2, [r3, #12]
 80074fa:	741a      	strb	r2, [r3, #16]
 80074fc:	2340      	movs	r3, #64	; 0x40
 80074fe:	713b      	strb	r3, [r7, #4]

	SSD1306_Goto(0,0);
 8007500:	2100      	movs	r1, #0
 8007502:	2000      	movs	r0, #0
 8007504:	f7ff ff1a 	bl	800733c <SSD1306_Goto>

	for(n = 0 ; n < SSD1306_HEIGHT/8 ; n++)
 8007508:	2300      	movs	r3, #0
 800750a:	75fb      	strb	r3, [r7, #23]
 800750c:	e013      	b.n	8007536 <SDD1306_Clear_Screen+0x4e>
		for(m = 0 ; m < SSD1306_WIDTH/16 ; m++)
 800750e:	2300      	movs	r3, #0
 8007510:	75bb      	strb	r3, [r7, #22]
 8007512:	e00a      	b.n	800752a <SDD1306_Clear_Screen+0x42>
			HAL_I2C_Master_Transmit(SSD1306_I2C,SSD1306_I2C_ADDR, data, 17, 10);
 8007514:	1d3a      	adds	r2, r7, #4
 8007516:	230a      	movs	r3, #10
 8007518:	9300      	str	r3, [sp, #0]
 800751a:	2311      	movs	r3, #17
 800751c:	2178      	movs	r1, #120	; 0x78
 800751e:	4809      	ldr	r0, [pc, #36]	; (8007544 <SDD1306_Clear_Screen+0x5c>)
 8007520:	f002 fe9a 	bl	800a258 <HAL_I2C_Master_Transmit>
		for(m = 0 ; m < SSD1306_WIDTH/16 ; m++)
 8007524:	7dbb      	ldrb	r3, [r7, #22]
 8007526:	3301      	adds	r3, #1
 8007528:	75bb      	strb	r3, [r7, #22]
 800752a:	7dbb      	ldrb	r3, [r7, #22]
 800752c:	2b07      	cmp	r3, #7
 800752e:	d9f1      	bls.n	8007514 <SDD1306_Clear_Screen+0x2c>
	for(n = 0 ; n < SSD1306_HEIGHT/8 ; n++)
 8007530:	7dfb      	ldrb	r3, [r7, #23]
 8007532:	3301      	adds	r3, #1
 8007534:	75fb      	strb	r3, [r7, #23]
 8007536:	7dfb      	ldrb	r3, [r7, #23]
 8007538:	2b07      	cmp	r3, #7
 800753a:	d9e8      	bls.n	800750e <SDD1306_Clear_Screen+0x26>
}
 800753c:	bf00      	nop
 800753e:	3718      	adds	r7, #24
 8007540:	46bd      	mov	sp, r7
 8007542:	bd80      	pop	{r7, pc}
 8007544:	20000b4c 	.word	0x20000b4c

08007548 <SSD1306_Init>:

uint8_t SSD1306_Init(void){
 8007548:	b580      	push	{r7, lr}
 800754a:	af00      	add	r7, sp, #0
	
	HAL_Delay(100);
 800754c:	2064      	movs	r0, #100	; 0x64
 800754e:	f000 ff3f 	bl	80083d0 <HAL_Delay>

	SSD1306_Write_Command(0xAE); //display off
 8007552:	20ae      	movs	r0, #174	; 0xae
 8007554:	f7ff fed4 	bl	8007300 <SSD1306_Write_Command>
	SSD1306_Write_Command(0x20); //Set Memory Addressing Mode
 8007558:	2020      	movs	r0, #32
 800755a:	f7ff fed1 	bl	8007300 <SSD1306_Write_Command>
	SSD1306_Write_Command(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800755e:	2010      	movs	r0, #16
 8007560:	f7ff fece 	bl	8007300 <SSD1306_Write_Command>
	SSD1306_Write_Command(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8007564:	20b0      	movs	r0, #176	; 0xb0
 8007566:	f7ff fecb 	bl	8007300 <SSD1306_Write_Command>
	SSD1306_Write_Command(0xC8); //Set COM Output Scan Direction
 800756a:	20c8      	movs	r0, #200	; 0xc8
 800756c:	f7ff fec8 	bl	8007300 <SSD1306_Write_Command>
	SSD1306_Write_Command(0x00); //---set low column address
 8007570:	2000      	movs	r0, #0
 8007572:	f7ff fec5 	bl	8007300 <SSD1306_Write_Command>
	SSD1306_Write_Command(0x10); //---set high column address
 8007576:	2010      	movs	r0, #16
 8007578:	f7ff fec2 	bl	8007300 <SSD1306_Write_Command>
	SSD1306_Write_Command(0x40); //--set start line address
 800757c:	2040      	movs	r0, #64	; 0x40
 800757e:	f7ff febf 	bl	8007300 <SSD1306_Write_Command>
	SSD1306_Write_Command(0x81); //--set contrast control register
 8007582:	2081      	movs	r0, #129	; 0x81
 8007584:	f7ff febc 	bl	8007300 <SSD1306_Write_Command>
	SSD1306_Write_Command(0xFF);
 8007588:	20ff      	movs	r0, #255	; 0xff
 800758a:	f7ff feb9 	bl	8007300 <SSD1306_Write_Command>
	SSD1306_Write_Command(0xA1); //--set segment re-map 0 to 127
 800758e:	20a1      	movs	r0, #161	; 0xa1
 8007590:	f7ff feb6 	bl	8007300 <SSD1306_Write_Command>
	SSD1306_Write_Command(0xA6); //--set normal display
 8007594:	20a6      	movs	r0, #166	; 0xa6
 8007596:	f7ff feb3 	bl	8007300 <SSD1306_Write_Command>
	SSD1306_Write_Command(0xA8); //--set multiplex ratio(1 to 64)
 800759a:	20a8      	movs	r0, #168	; 0xa8
 800759c:	f7ff feb0 	bl	8007300 <SSD1306_Write_Command>
	SSD1306_Write_Command(0x3F); //
 80075a0:	203f      	movs	r0, #63	; 0x3f
 80075a2:	f7ff fead 	bl	8007300 <SSD1306_Write_Command>
	SSD1306_Write_Command(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80075a6:	20a4      	movs	r0, #164	; 0xa4
 80075a8:	f7ff feaa 	bl	8007300 <SSD1306_Write_Command>
	SSD1306_Write_Command(0xD3); //-set display offset
 80075ac:	20d3      	movs	r0, #211	; 0xd3
 80075ae:	f7ff fea7 	bl	8007300 <SSD1306_Write_Command>
	SSD1306_Write_Command(0x00); //-not offset
 80075b2:	2000      	movs	r0, #0
 80075b4:	f7ff fea4 	bl	8007300 <SSD1306_Write_Command>
	SSD1306_Write_Command(0xD5); //--set display clock divide ratio/oscillator frequency
 80075b8:	20d5      	movs	r0, #213	; 0xd5
 80075ba:	f7ff fea1 	bl	8007300 <SSD1306_Write_Command>
	SSD1306_Write_Command(0xf0); //--set divide ratio 0xF0
 80075be:	20f0      	movs	r0, #240	; 0xf0
 80075c0:	f7ff fe9e 	bl	8007300 <SSD1306_Write_Command>
	SSD1306_Write_Command(0xD9); //--set pre-charge period
 80075c4:	20d9      	movs	r0, #217	; 0xd9
 80075c6:	f7ff fe9b 	bl	8007300 <SSD1306_Write_Command>
	SSD1306_Write_Command(0x22); //
 80075ca:	2022      	movs	r0, #34	; 0x22
 80075cc:	f7ff fe98 	bl	8007300 <SSD1306_Write_Command>
	SSD1306_Write_Command(0xDA); //--set com pins hardware configuration
 80075d0:	20da      	movs	r0, #218	; 0xda
 80075d2:	f7ff fe95 	bl	8007300 <SSD1306_Write_Command>
	SSD1306_Write_Command(0x12);
 80075d6:	2012      	movs	r0, #18
 80075d8:	f7ff fe92 	bl	8007300 <SSD1306_Write_Command>
	SSD1306_Write_Command(0xDB); //--set vcomh
 80075dc:	20db      	movs	r0, #219	; 0xdb
 80075de:	f7ff fe8f 	bl	8007300 <SSD1306_Write_Command>
	SSD1306_Write_Command(0x20); //0x20,0.77xVcc,
 80075e2:	2020      	movs	r0, #32
 80075e4:	f7ff fe8c 	bl	8007300 <SSD1306_Write_Command>
	SSD1306_Write_Command(0x8D); //--set DC-DC enable
 80075e8:	208d      	movs	r0, #141	; 0x8d
 80075ea:	f7ff fe89 	bl	8007300 <SSD1306_Write_Command>
	SSD1306_Write_Command(0x14); //
 80075ee:	2014      	movs	r0, #20
 80075f0:	f7ff fe86 	bl	8007300 <SSD1306_Write_Command>
	SSD1306_Write_Command(0xAF); //--turn on SSD1306 panel
 80075f4:	20af      	movs	r0, #175	; 0xaf
 80075f6:	f7ff fe83 	bl	8007300 <SSD1306_Write_Command>

	SDD1306_Clear_Screen();
 80075fa:	f7ff ff75 	bl	80074e8 <SDD1306_Clear_Screen>
	
	return 1;
 80075fe:	2301      	movs	r3, #1
}
 8007600:	4618      	mov	r0, r3
 8007602:	bd80      	pop	{r7, pc}

08007604 <DWT_Init>:
 * Initialization routine.
 * You might need to enable access to DWT registers on Cortex-M7
 *   DWT->LAR = 0xC5ACCE55
 */
void DWT_Init(void)
{
 8007604:	b480      	push	{r7}
 8007606:	af00      	add	r7, sp, #0
    if (!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)) {
 8007608:	4b0c      	ldr	r3, [pc, #48]	; (800763c <DWT_Init+0x38>)
 800760a:	68db      	ldr	r3, [r3, #12]
 800760c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007610:	2b00      	cmp	r3, #0
 8007612:	d10e      	bne.n	8007632 <DWT_Init+0x2e>
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8007614:	4b09      	ldr	r3, [pc, #36]	; (800763c <DWT_Init+0x38>)
 8007616:	68db      	ldr	r3, [r3, #12]
 8007618:	4a08      	ldr	r2, [pc, #32]	; (800763c <DWT_Init+0x38>)
 800761a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800761e:	60d3      	str	r3, [r2, #12]
        DWT->CYCCNT = 0;
 8007620:	4b07      	ldr	r3, [pc, #28]	; (8007640 <DWT_Init+0x3c>)
 8007622:	2200      	movs	r2, #0
 8007624:	605a      	str	r2, [r3, #4]
        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8007626:	4b06      	ldr	r3, [pc, #24]	; (8007640 <DWT_Init+0x3c>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	4a05      	ldr	r2, [pc, #20]	; (8007640 <DWT_Init+0x3c>)
 800762c:	f043 0301 	orr.w	r3, r3, #1
 8007630:	6013      	str	r3, [r2, #0]
    }
}
 8007632:	bf00      	nop
 8007634:	46bd      	mov	sp, r7
 8007636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763a:	4770      	bx	lr
 800763c:	e000edf0 	.word	0xe000edf0
 8007640:	e0001000 	.word	0xe0001000

08007644 <DWT_Delay>:
 * No need to check an overflow. Let it just tick :)
 *
 * @param uint32_t us  Number of microseconds to delay for
 */
void DWT_Delay(uint32_t us) // microseconds
{
 8007644:	b480      	push	{r7}
 8007646:	b085      	sub	sp, #20
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
    uint32_t startTick = DWT->CYCCNT,
 800764c:	4b0d      	ldr	r3, [pc, #52]	; (8007684 <DWT_Delay+0x40>)
 800764e:	685b      	ldr	r3, [r3, #4]
 8007650:	60fb      	str	r3, [r7, #12]
             delayTicks = us * (SystemCoreClock/1000000);
 8007652:	4b0d      	ldr	r3, [pc, #52]	; (8007688 <DWT_Delay+0x44>)
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	4a0d      	ldr	r2, [pc, #52]	; (800768c <DWT_Delay+0x48>)
 8007658:	fba2 2303 	umull	r2, r3, r2, r3
 800765c:	0c9a      	lsrs	r2, r3, #18
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	fb02 f303 	mul.w	r3, r2, r3
 8007664:	60bb      	str	r3, [r7, #8]

    while (DWT->CYCCNT - startTick < delayTicks);
 8007666:	bf00      	nop
 8007668:	4b06      	ldr	r3, [pc, #24]	; (8007684 <DWT_Delay+0x40>)
 800766a:	685a      	ldr	r2, [r3, #4]
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	1ad3      	subs	r3, r2, r3
 8007670:	68ba      	ldr	r2, [r7, #8]
 8007672:	429a      	cmp	r2, r3
 8007674:	d8f8      	bhi.n	8007668 <DWT_Delay+0x24>
}
 8007676:	bf00      	nop
 8007678:	3714      	adds	r7, #20
 800767a:	46bd      	mov	sp, r7
 800767c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007680:	4770      	bx	lr
 8007682:	bf00      	nop
 8007684:	e0001000 	.word	0xe0001000
 8007688:	20000000 	.word	0x20000000
 800768c:	431bde83 	.word	0x431bde83

08007690 <logger_get_instance>:

logger* logger_instance = NULL;

const unsigned int LOGGER_MAX_LINES = 8;

logger* logger_get_instance(){
 8007690:	b580      	push	{r7, lr}
 8007692:	af00      	add	r7, sp, #0
	if( logger_instance == NULL ){
 8007694:	4b0c      	ldr	r3, [pc, #48]	; (80076c8 <logger_get_instance+0x38>)
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d110      	bne.n	80076be <logger_get_instance+0x2e>
		logger_instance = (logger*) malloc(sizeof(logger));
 800769c:	2004      	movs	r0, #4
 800769e:	f005 f82f 	bl	800c700 <malloc>
 80076a2:	4603      	mov	r3, r0
 80076a4:	461a      	mov	r2, r3
 80076a6:	4b08      	ldr	r3, [pc, #32]	; (80076c8 <logger_get_instance+0x38>)
 80076a8:	601a      	str	r2, [r3, #0]
		logger_instance->line = 0;
 80076aa:	4b07      	ldr	r3, [pc, #28]	; (80076c8 <logger_get_instance+0x38>)
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	2200      	movs	r2, #0
 80076b0:	701a      	strb	r2, [r3, #0]
 80076b2:	2200      	movs	r2, #0
 80076b4:	705a      	strb	r2, [r3, #1]
 80076b6:	2200      	movs	r2, #0
 80076b8:	709a      	strb	r2, [r3, #2]
 80076ba:	2200      	movs	r2, #0
 80076bc:	70da      	strb	r2, [r3, #3]
	}
	return logger_instance;
 80076be:	4b02      	ldr	r3, [pc, #8]	; (80076c8 <logger_get_instance+0x38>)
 80076c0:	681b      	ldr	r3, [r3, #0]
}
 80076c2:	4618      	mov	r0, r3
 80076c4:	bd80      	pop	{r7, pc}
 80076c6:	bf00      	nop
 80076c8:	20000b10 	.word	0x20000b10

080076cc <logger_info>:
	unsigned int line = (++logger->line) % LOGGER_MAX_LINES;
	SSD1306_Goto(0, line);
	SSD1306_Write_String((uint8_t*) string_util_concat("[W] ", input));
}

void logger_info(logger* logger, char* input){
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b084      	sub	sp, #16
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
 80076d4:	6039      	str	r1, [r7, #0]
	if( logger == NULL ) return;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d024      	beq.n	8007726 <logger_info+0x5a>
	if( logger->line == LOGGER_MAX_LINES-1) SDD1306_Clear_Screen();
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681a      	ldr	r2, [r3, #0]
 80076e0:	2308      	movs	r3, #8
 80076e2:	3b01      	subs	r3, #1
 80076e4:	429a      	cmp	r2, r3
 80076e6:	d101      	bne.n	80076ec <logger_info+0x20>
 80076e8:	f7ff fefe 	bl	80074e8 <SDD1306_Clear_Screen>
	unsigned int line = (++logger->line) % LOGGER_MAX_LINES;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	1c5a      	adds	r2, r3, #1
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	601a      	str	r2, [r3, #0]
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	2208      	movs	r2, #8
 80076fc:	fbb3 f1f2 	udiv	r1, r3, r2
 8007700:	fb02 f201 	mul.w	r2, r2, r1
 8007704:	1a9b      	subs	r3, r3, r2
 8007706:	60fb      	str	r3, [r7, #12]
	SSD1306_Goto(0, line);
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	b2db      	uxtb	r3, r3
 800770c:	4619      	mov	r1, r3
 800770e:	2000      	movs	r0, #0
 8007710:	f7ff fe14 	bl	800733c <SSD1306_Goto>
	SSD1306_Write_String((uint8_t*) string_util_concat("[I] ", input));
 8007714:	6839      	ldr	r1, [r7, #0]
 8007716:	4806      	ldr	r0, [pc, #24]	; (8007730 <logger_info+0x64>)
 8007718:	f000 fd5a 	bl	80081d0 <string_util_concat>
 800771c:	4603      	mov	r3, r0
 800771e:	4618      	mov	r0, r3
 8007720:	f7ff fea8 	bl	8007474 <SSD1306_Write_String>
 8007724:	e000      	b.n	8007728 <logger_info+0x5c>
	if( logger == NULL ) return;
 8007726:	bf00      	nop
}
 8007728:	3710      	adds	r7, #16
 800772a:	46bd      	mov	sp, r7
 800772c:	bd80      	pop	{r7, pc}
 800772e:	bf00      	nop
 8007730:	08011678 	.word	0x08011678

08007734 <logger_clean>:
	unsigned int line = (++logger->line) % LOGGER_MAX_LINES;
	SSD1306_Goto(0, line);
	SSD1306_Write_String((uint8_t*) string_util_concat("[D] ", input));
}

void logger_clean(logger* logger){
 8007734:	b580      	push	{r7, lr}
 8007736:	b082      	sub	sp, #8
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
	if( logger == NULL ) return;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d00c      	beq.n	800775c <logger_clean+0x28>
	logger_instance->line = 0;
 8007742:	4b08      	ldr	r3, [pc, #32]	; (8007764 <logger_clean+0x30>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	2200      	movs	r2, #0
 8007748:	701a      	strb	r2, [r3, #0]
 800774a:	2200      	movs	r2, #0
 800774c:	705a      	strb	r2, [r3, #1]
 800774e:	2200      	movs	r2, #0
 8007750:	709a      	strb	r2, [r3, #2]
 8007752:	2200      	movs	r2, #0
 8007754:	70da      	strb	r2, [r3, #3]
	SDD1306_Clear_Screen();
 8007756:	f7ff fec7 	bl	80074e8 <SDD1306_Clear_Screen>
 800775a:	e000      	b.n	800775e <logger_clean+0x2a>
	if( logger == NULL ) return;
 800775c:	bf00      	nop
}
 800775e:	3708      	adds	r7, #8
 8007760:	46bd      	mov	sp, r7
 8007762:	bd80      	pop	{r7, pc}
 8007764:	20000b10 	.word	0x20000b10

08007768 <map_string_init>:
#include <util/map_string.h>

map_string* map_string_init(){
 8007768:	b590      	push	{r4, r7, lr}
 800776a:	b083      	sub	sp, #12
 800776c:	af00      	add	r7, sp, #0
	map_string* result = (map_string*) malloc(sizeof(map_string));
 800776e:	2094      	movs	r0, #148	; 0x94
 8007770:	f004 ffc6 	bl	800c700 <malloc>
 8007774:	4603      	mov	r3, r0
 8007776:	607b      	str	r3, [r7, #4]
	for(register int i = 0; i < MAP_STRING_LENGTH; i++){
 8007778:	2400      	movs	r4, #0
 800777a:	e011      	b.n	80077a0 <map_string_init+0x38>
		result->key[i][0] = '\0';
 800777c:	687a      	ldr	r2, [r7, #4]
 800777e:	4623      	mov	r3, r4
 8007780:	005b      	lsls	r3, r3, #1
 8007782:	4423      	add	r3, r4
 8007784:	009b      	lsls	r3, r3, #2
 8007786:	4413      	add	r3, r2
 8007788:	2200      	movs	r2, #0
 800778a:	701a      	strb	r2, [r3, #0]
		result->value[i][0] = '\0';
 800778c:	687a      	ldr	r2, [r7, #4]
 800778e:	4623      	mov	r3, r4
 8007790:	005b      	lsls	r3, r3, #1
 8007792:	4423      	add	r3, r4
 8007794:	009b      	lsls	r3, r3, #2
 8007796:	4413      	add	r3, r2
 8007798:	3348      	adds	r3, #72	; 0x48
 800779a:	2200      	movs	r2, #0
 800779c:	701a      	strb	r2, [r3, #0]
	for(register int i = 0; i < MAP_STRING_LENGTH; i++){
 800779e:	3401      	adds	r4, #1
 80077a0:	2c05      	cmp	r4, #5
 80077a2:	ddeb      	ble.n	800777c <map_string_init+0x14>
	}
	result->index = 0;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2200      	movs	r2, #0
 80077a8:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
 80077ac:	2200      	movs	r2, #0
 80077ae:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
 80077b2:	2200      	movs	r2, #0
 80077b4:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
 80077b8:	2200      	movs	r2, #0
 80077ba:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	return result;
 80077be:	687b      	ldr	r3, [r7, #4]
}
 80077c0:	4618      	mov	r0, r3
 80077c2:	370c      	adds	r7, #12
 80077c4:	46bd      	mov	sp, r7
 80077c6:	bd90      	pop	{r4, r7, pc}

080077c8 <map_string_destroy>:

void map_string_destroy(map_string* map_string){
 80077c8:	b590      	push	{r4, r7, lr}
 80077ca:	b083      	sub	sp, #12
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
	if( map_string == NULL ) return;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d01b      	beq.n	800780e <map_string_destroy+0x46>

	for(register int i = 0; i < MAP_STRING_LENGTH; i++){
 80077d6:	2400      	movs	r4, #0
 80077d8:	e011      	b.n	80077fe <map_string_destroy+0x36>
		map_string->key[i][0] = '\0';
 80077da:	687a      	ldr	r2, [r7, #4]
 80077dc:	4623      	mov	r3, r4
 80077de:	005b      	lsls	r3, r3, #1
 80077e0:	4423      	add	r3, r4
 80077e2:	009b      	lsls	r3, r3, #2
 80077e4:	4413      	add	r3, r2
 80077e6:	2200      	movs	r2, #0
 80077e8:	701a      	strb	r2, [r3, #0]
		map_string->value[i][0] = '\0';
 80077ea:	687a      	ldr	r2, [r7, #4]
 80077ec:	4623      	mov	r3, r4
 80077ee:	005b      	lsls	r3, r3, #1
 80077f0:	4423      	add	r3, r4
 80077f2:	009b      	lsls	r3, r3, #2
 80077f4:	4413      	add	r3, r2
 80077f6:	3348      	adds	r3, #72	; 0x48
 80077f8:	2200      	movs	r2, #0
 80077fa:	701a      	strb	r2, [r3, #0]
	for(register int i = 0; i < MAP_STRING_LENGTH; i++){
 80077fc:	3401      	adds	r4, #1
 80077fe:	2c05      	cmp	r4, #5
 8007800:	ddeb      	ble.n	80077da <map_string_destroy+0x12>
	}

	free(map_string);
 8007802:	6878      	ldr	r0, [r7, #4]
 8007804:	f004 ff84 	bl	800c710 <free>
	map_string = NULL;
 8007808:	2300      	movs	r3, #0
 800780a:	607b      	str	r3, [r7, #4]
 800780c:	e000      	b.n	8007810 <map_string_destroy+0x48>
	if( map_string == NULL ) return;
 800780e:	bf00      	nop
}
 8007810:	370c      	adds	r7, #12
 8007812:	46bd      	mov	sp, r7
 8007814:	bd90      	pop	{r4, r7, pc}

08007816 <map_string_put>:

void map_string_put(map_string* map_string, char key[], char value[]){
 8007816:	b580      	push	{r7, lr}
 8007818:	b084      	sub	sp, #16
 800781a:	af00      	add	r7, sp, #0
 800781c:	60f8      	str	r0, [r7, #12]
 800781e:	60b9      	str	r1, [r7, #8]
 8007820:	607a      	str	r2, [r7, #4]
	if( map_string == NULL || map_string->index == MAP_STRING_LENGTH || key == NULL) return;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d02a      	beq.n	800787e <map_string_put+0x68>
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800782e:	2b06      	cmp	r3, #6
 8007830:	d025      	beq.n	800787e <map_string_put+0x68>
 8007832:	68bb      	ldr	r3, [r7, #8]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d022      	beq.n	800787e <map_string_put+0x68>
	strcpy(map_string->key[map_string->index], key);
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800783e:	4613      	mov	r3, r2
 8007840:	005b      	lsls	r3, r3, #1
 8007842:	4413      	add	r3, r2
 8007844:	009b      	lsls	r3, r3, #2
 8007846:	68fa      	ldr	r2, [r7, #12]
 8007848:	4413      	add	r3, r2
 800784a:	68b9      	ldr	r1, [r7, #8]
 800784c:	4618      	mov	r0, r3
 800784e:	f005 f9f0 	bl	800cc32 <strcpy>
	strcpy(map_string->value[map_string->index], value);
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8007858:	4613      	mov	r3, r2
 800785a:	005b      	lsls	r3, r3, #1
 800785c:	4413      	add	r3, r2
 800785e:	009b      	lsls	r3, r3, #2
 8007860:	3348      	adds	r3, #72	; 0x48
 8007862:	68fa      	ldr	r2, [r7, #12]
 8007864:	4413      	add	r3, r2
 8007866:	6879      	ldr	r1, [r7, #4]
 8007868:	4618      	mov	r0, r3
 800786a:	f005 f9e2 	bl	800cc32 <strcpy>
	map_string->index++;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007874:	1c5a      	adds	r2, r3, #1
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800787c:	e000      	b.n	8007880 <map_string_put+0x6a>
	if( map_string == NULL || map_string->index == MAP_STRING_LENGTH || key == NULL) return;
 800787e:	bf00      	nop
}
 8007880:	3710      	adds	r7, #16
 8007882:	46bd      	mov	sp, r7
 8007884:	bd80      	pop	{r7, pc}
	...

08007888 <map_string_to_char>:
			break;
		}
	}
}

char* map_string_to_char(map_string* map_string){
 8007888:	b5b0      	push	{r4, r5, r7, lr}
 800788a:	b088      	sub	sp, #32
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
	if( map_string == NULL ) return NULL;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d101      	bne.n	800789a <map_string_to_char+0x12>
 8007896:	2300      	movs	r3, #0
 8007898:	e134      	b.n	8007b04 <map_string_to_char+0x27c>
	unsigned int number_of_entries = map_string_number_of_entries(map_string);
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	f000 f975 	bl	8007b8a <map_string_number_of_entries>
 80078a0:	61f8      	str	r0, [r7, #28]
	unsigned int length_separtors = number_of_entries * 5 + (number_of_entries-1) + 2; // Para as aspas, virgulas, dois pontos, e chaves
 80078a2:	69fa      	ldr	r2, [r7, #28]
 80078a4:	4613      	mov	r3, r2
 80078a6:	005b      	lsls	r3, r3, #1
 80078a8:	4413      	add	r3, r2
 80078aa:	005b      	lsls	r3, r3, #1
 80078ac:	3301      	adds	r3, #1
 80078ae:	61bb      	str	r3, [r7, #24]
	unsigned int number_of_chars = map_string_number_of_chars(map_string);
 80078b0:	6878      	ldr	r0, [r7, #4]
 80078b2:	f000 f937 	bl	8007b24 <map_string_number_of_chars>
 80078b6:	6178      	str	r0, [r7, #20]
	char* result = (char*) malloc((length_separtors+number_of_chars+1) * sizeof(char));
 80078b8:	69ba      	ldr	r2, [r7, #24]
 80078ba:	697b      	ldr	r3, [r7, #20]
 80078bc:	4413      	add	r3, r2
 80078be:	3301      	adds	r3, #1
 80078c0:	4618      	mov	r0, r3
 80078c2:	f004 ff1d 	bl	800c700 <malloc>
 80078c6:	4603      	mov	r3, r0
 80078c8:	613b      	str	r3, [r7, #16]

	strcpy(result, "{");
 80078ca:	693b      	ldr	r3, [r7, #16]
 80078cc:	498f      	ldr	r1, [pc, #572]	; (8007b0c <map_string_to_char+0x284>)
 80078ce:	461a      	mov	r2, r3
 80078d0:	460b      	mov	r3, r1
 80078d2:	881b      	ldrh	r3, [r3, #0]
 80078d4:	8013      	strh	r3, [r2, #0]
	if( map_string->index != 0 ){
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078dc:	2b00      	cmp	r3, #0
 80078de:	f000 8104 	beq.w	8007aea <map_string_to_char+0x262>
		for(register unsigned int i = 0; i < map_string->index-1; i++){
 80078e2:	2400      	movs	r4, #0
 80078e4:	e07b      	b.n	80079de <map_string_to_char+0x156>
			strcat(result, "\""); strcat(result, map_string->key[i]); strcat(result, "\":");
 80078e6:	6938      	ldr	r0, [r7, #16]
 80078e8:	f7f8 fc7c 	bl	80001e4 <strlen>
 80078ec:	4603      	mov	r3, r0
 80078ee:	461a      	mov	r2, r3
 80078f0:	693b      	ldr	r3, [r7, #16]
 80078f2:	4413      	add	r3, r2
 80078f4:	4986      	ldr	r1, [pc, #536]	; (8007b10 <map_string_to_char+0x288>)
 80078f6:	461a      	mov	r2, r3
 80078f8:	460b      	mov	r3, r1
 80078fa:	881b      	ldrh	r3, [r3, #0]
 80078fc:	8013      	strh	r3, [r2, #0]
 80078fe:	4623      	mov	r3, r4
 8007900:	005b      	lsls	r3, r3, #1
 8007902:	4423      	add	r3, r4
 8007904:	009b      	lsls	r3, r3, #2
 8007906:	687a      	ldr	r2, [r7, #4]
 8007908:	4413      	add	r3, r2
 800790a:	4619      	mov	r1, r3
 800790c:	6938      	ldr	r0, [r7, #16]
 800790e:	f005 f981 	bl	800cc14 <strcat>
 8007912:	6938      	ldr	r0, [r7, #16]
 8007914:	f7f8 fc66 	bl	80001e4 <strlen>
 8007918:	4603      	mov	r3, r0
 800791a:	461a      	mov	r2, r3
 800791c:	693b      	ldr	r3, [r7, #16]
 800791e:	4413      	add	r3, r2
 8007920:	4a7c      	ldr	r2, [pc, #496]	; (8007b14 <map_string_to_char+0x28c>)
 8007922:	8811      	ldrh	r1, [r2, #0]
 8007924:	7892      	ldrb	r2, [r2, #2]
 8007926:	8019      	strh	r1, [r3, #0]
 8007928:	709a      	strb	r2, [r3, #2]
			int is_number = atof(map_string->value[i]) != 0.0 ? 1 : 0;
 800792a:	4623      	mov	r3, r4
 800792c:	005b      	lsls	r3, r3, #1
 800792e:	4423      	add	r3, r4
 8007930:	009b      	lsls	r3, r3, #2
 8007932:	3348      	adds	r3, #72	; 0x48
 8007934:	687a      	ldr	r2, [r7, #4]
 8007936:	4413      	add	r3, r2
 8007938:	4618      	mov	r0, r3
 800793a:	f004 fe73 	bl	800c624 <atof>
 800793e:	ec51 0b10 	vmov	r0, r1, d0
 8007942:	2301      	movs	r3, #1
 8007944:	461d      	mov	r5, r3
 8007946:	f04f 0200 	mov.w	r2, #0
 800794a:	f04f 0300 	mov.w	r3, #0
 800794e:	f7f9 f8cb 	bl	8000ae8 <__aeabi_dcmpeq>
 8007952:	4603      	mov	r3, r0
 8007954:	2b00      	cmp	r3, #0
 8007956:	d001      	beq.n	800795c <map_string_to_char+0xd4>
 8007958:	2300      	movs	r3, #0
 800795a:	461d      	mov	r5, r3
 800795c:	b2eb      	uxtb	r3, r5
 800795e:	60bb      	str	r3, [r7, #8]
			if( is_number ){
 8007960:	68bb      	ldr	r3, [r7, #8]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d017      	beq.n	8007996 <map_string_to_char+0x10e>
				strcat(result, map_string->value[i]); strcat(result, ",");
 8007966:	4623      	mov	r3, r4
 8007968:	005b      	lsls	r3, r3, #1
 800796a:	4423      	add	r3, r4
 800796c:	009b      	lsls	r3, r3, #2
 800796e:	3348      	adds	r3, #72	; 0x48
 8007970:	687a      	ldr	r2, [r7, #4]
 8007972:	4413      	add	r3, r2
 8007974:	4619      	mov	r1, r3
 8007976:	6938      	ldr	r0, [r7, #16]
 8007978:	f005 f94c 	bl	800cc14 <strcat>
 800797c:	6938      	ldr	r0, [r7, #16]
 800797e:	f7f8 fc31 	bl	80001e4 <strlen>
 8007982:	4603      	mov	r3, r0
 8007984:	461a      	mov	r2, r3
 8007986:	693b      	ldr	r3, [r7, #16]
 8007988:	4413      	add	r3, r2
 800798a:	4963      	ldr	r1, [pc, #396]	; (8007b18 <map_string_to_char+0x290>)
 800798c:	461a      	mov	r2, r3
 800798e:	460b      	mov	r3, r1
 8007990:	881b      	ldrh	r3, [r3, #0]
 8007992:	8013      	strh	r3, [r2, #0]
 8007994:	e022      	b.n	80079dc <map_string_to_char+0x154>
			} else {
				strcat(result, "\""); strcat(result, map_string->value[i]); strcat(result, "\",");
 8007996:	6938      	ldr	r0, [r7, #16]
 8007998:	f7f8 fc24 	bl	80001e4 <strlen>
 800799c:	4603      	mov	r3, r0
 800799e:	461a      	mov	r2, r3
 80079a0:	693b      	ldr	r3, [r7, #16]
 80079a2:	4413      	add	r3, r2
 80079a4:	495a      	ldr	r1, [pc, #360]	; (8007b10 <map_string_to_char+0x288>)
 80079a6:	461a      	mov	r2, r3
 80079a8:	460b      	mov	r3, r1
 80079aa:	881b      	ldrh	r3, [r3, #0]
 80079ac:	8013      	strh	r3, [r2, #0]
 80079ae:	4623      	mov	r3, r4
 80079b0:	005b      	lsls	r3, r3, #1
 80079b2:	4423      	add	r3, r4
 80079b4:	009b      	lsls	r3, r3, #2
 80079b6:	3348      	adds	r3, #72	; 0x48
 80079b8:	687a      	ldr	r2, [r7, #4]
 80079ba:	4413      	add	r3, r2
 80079bc:	4619      	mov	r1, r3
 80079be:	6938      	ldr	r0, [r7, #16]
 80079c0:	f005 f928 	bl	800cc14 <strcat>
 80079c4:	6938      	ldr	r0, [r7, #16]
 80079c6:	f7f8 fc0d 	bl	80001e4 <strlen>
 80079ca:	4603      	mov	r3, r0
 80079cc:	461a      	mov	r2, r3
 80079ce:	693b      	ldr	r3, [r7, #16]
 80079d0:	4413      	add	r3, r2
 80079d2:	4a52      	ldr	r2, [pc, #328]	; (8007b1c <map_string_to_char+0x294>)
 80079d4:	8811      	ldrh	r1, [r2, #0]
 80079d6:	7892      	ldrb	r2, [r2, #2]
 80079d8:	8019      	strh	r1, [r3, #0]
 80079da:	709a      	strb	r2, [r3, #2]
		for(register unsigned int i = 0; i < map_string->index-1; i++){
 80079dc:	3401      	adds	r4, #1
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079e4:	3b01      	subs	r3, #1
 80079e6:	429c      	cmp	r4, r3
 80079e8:	f4ff af7d 	bcc.w	80078e6 <map_string_to_char+0x5e>
			}
		}

		strcat(result, "\""); strcat(result, map_string->key[map_string->index-1]); strcat(result, "\":");
 80079ec:	6938      	ldr	r0, [r7, #16]
 80079ee:	f7f8 fbf9 	bl	80001e4 <strlen>
 80079f2:	4603      	mov	r3, r0
 80079f4:	461a      	mov	r2, r3
 80079f6:	693b      	ldr	r3, [r7, #16]
 80079f8:	4413      	add	r3, r2
 80079fa:	4945      	ldr	r1, [pc, #276]	; (8007b10 <map_string_to_char+0x288>)
 80079fc:	461a      	mov	r2, r3
 80079fe:	460b      	mov	r3, r1
 8007a00:	881b      	ldrh	r3, [r3, #0]
 8007a02:	8013      	strh	r3, [r2, #0]
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a0a:	1e5a      	subs	r2, r3, #1
 8007a0c:	4613      	mov	r3, r2
 8007a0e:	005b      	lsls	r3, r3, #1
 8007a10:	4413      	add	r3, r2
 8007a12:	009b      	lsls	r3, r3, #2
 8007a14:	687a      	ldr	r2, [r7, #4]
 8007a16:	4413      	add	r3, r2
 8007a18:	4619      	mov	r1, r3
 8007a1a:	6938      	ldr	r0, [r7, #16]
 8007a1c:	f005 f8fa 	bl	800cc14 <strcat>
 8007a20:	6938      	ldr	r0, [r7, #16]
 8007a22:	f7f8 fbdf 	bl	80001e4 <strlen>
 8007a26:	4603      	mov	r3, r0
 8007a28:	461a      	mov	r2, r3
 8007a2a:	693b      	ldr	r3, [r7, #16]
 8007a2c:	4413      	add	r3, r2
 8007a2e:	4a39      	ldr	r2, [pc, #228]	; (8007b14 <map_string_to_char+0x28c>)
 8007a30:	8811      	ldrh	r1, [r2, #0]
 8007a32:	7892      	ldrb	r2, [r2, #2]
 8007a34:	8019      	strh	r1, [r3, #0]
 8007a36:	709a      	strb	r2, [r3, #2]
		int is_number = atof(map_string->value[map_string->index-1]) != 0.0 ? 1 : 0;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a3e:	1e5a      	subs	r2, r3, #1
 8007a40:	4613      	mov	r3, r2
 8007a42:	005b      	lsls	r3, r3, #1
 8007a44:	4413      	add	r3, r2
 8007a46:	009b      	lsls	r3, r3, #2
 8007a48:	3348      	adds	r3, #72	; 0x48
 8007a4a:	687a      	ldr	r2, [r7, #4]
 8007a4c:	4413      	add	r3, r2
 8007a4e:	4618      	mov	r0, r3
 8007a50:	f004 fde8 	bl	800c624 <atof>
 8007a54:	ec51 0b10 	vmov	r0, r1, d0
 8007a58:	2301      	movs	r3, #1
 8007a5a:	461c      	mov	r4, r3
 8007a5c:	f04f 0200 	mov.w	r2, #0
 8007a60:	f04f 0300 	mov.w	r3, #0
 8007a64:	f7f9 f840 	bl	8000ae8 <__aeabi_dcmpeq>
 8007a68:	4603      	mov	r3, r0
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d001      	beq.n	8007a72 <map_string_to_char+0x1ea>
 8007a6e:	2300      	movs	r3, #0
 8007a70:	461c      	mov	r4, r3
 8007a72:	b2e3      	uxtb	r3, r4
 8007a74:	60fb      	str	r3, [r7, #12]
		if( is_number ){
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d00f      	beq.n	8007a9c <map_string_to_char+0x214>
			strcat(result, map_string->value[map_string->index-1]);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a82:	1e5a      	subs	r2, r3, #1
 8007a84:	4613      	mov	r3, r2
 8007a86:	005b      	lsls	r3, r3, #1
 8007a88:	4413      	add	r3, r2
 8007a8a:	009b      	lsls	r3, r3, #2
 8007a8c:	3348      	adds	r3, #72	; 0x48
 8007a8e:	687a      	ldr	r2, [r7, #4]
 8007a90:	4413      	add	r3, r2
 8007a92:	4619      	mov	r1, r3
 8007a94:	6938      	ldr	r0, [r7, #16]
 8007a96:	f005 f8bd 	bl	800cc14 <strcat>
 8007a9a:	e026      	b.n	8007aea <map_string_to_char+0x262>
		} else {
			strcat(result, "\""); strcat(result, map_string->value[map_string->index-1]); strcat(result, "\"");
 8007a9c:	6938      	ldr	r0, [r7, #16]
 8007a9e:	f7f8 fba1 	bl	80001e4 <strlen>
 8007aa2:	4603      	mov	r3, r0
 8007aa4:	461a      	mov	r2, r3
 8007aa6:	693b      	ldr	r3, [r7, #16]
 8007aa8:	4413      	add	r3, r2
 8007aaa:	4919      	ldr	r1, [pc, #100]	; (8007b10 <map_string_to_char+0x288>)
 8007aac:	461a      	mov	r2, r3
 8007aae:	460b      	mov	r3, r1
 8007ab0:	881b      	ldrh	r3, [r3, #0]
 8007ab2:	8013      	strh	r3, [r2, #0]
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007aba:	1e5a      	subs	r2, r3, #1
 8007abc:	4613      	mov	r3, r2
 8007abe:	005b      	lsls	r3, r3, #1
 8007ac0:	4413      	add	r3, r2
 8007ac2:	009b      	lsls	r3, r3, #2
 8007ac4:	3348      	adds	r3, #72	; 0x48
 8007ac6:	687a      	ldr	r2, [r7, #4]
 8007ac8:	4413      	add	r3, r2
 8007aca:	4619      	mov	r1, r3
 8007acc:	6938      	ldr	r0, [r7, #16]
 8007ace:	f005 f8a1 	bl	800cc14 <strcat>
 8007ad2:	6938      	ldr	r0, [r7, #16]
 8007ad4:	f7f8 fb86 	bl	80001e4 <strlen>
 8007ad8:	4603      	mov	r3, r0
 8007ada:	461a      	mov	r2, r3
 8007adc:	693b      	ldr	r3, [r7, #16]
 8007ade:	4413      	add	r3, r2
 8007ae0:	490b      	ldr	r1, [pc, #44]	; (8007b10 <map_string_to_char+0x288>)
 8007ae2:	461a      	mov	r2, r3
 8007ae4:	460b      	mov	r3, r1
 8007ae6:	881b      	ldrh	r3, [r3, #0]
 8007ae8:	8013      	strh	r3, [r2, #0]
		}
	}
	strcat(result, "}");
 8007aea:	6938      	ldr	r0, [r7, #16]
 8007aec:	f7f8 fb7a 	bl	80001e4 <strlen>
 8007af0:	4603      	mov	r3, r0
 8007af2:	461a      	mov	r2, r3
 8007af4:	693b      	ldr	r3, [r7, #16]
 8007af6:	4413      	add	r3, r2
 8007af8:	4909      	ldr	r1, [pc, #36]	; (8007b20 <map_string_to_char+0x298>)
 8007afa:	461a      	mov	r2, r3
 8007afc:	460b      	mov	r3, r1
 8007afe:	881b      	ldrh	r3, [r3, #0]
 8007b00:	8013      	strh	r3, [r2, #0]
	return result;
 8007b02:	693b      	ldr	r3, [r7, #16]
}
 8007b04:	4618      	mov	r0, r3
 8007b06:	3720      	adds	r7, #32
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	bdb0      	pop	{r4, r5, r7, pc}
 8007b0c:	08011688 	.word	0x08011688
 8007b10:	0801168c 	.word	0x0801168c
 8007b14:	08011690 	.word	0x08011690
 8007b18:	08011694 	.word	0x08011694
 8007b1c:	08011698 	.word	0x08011698
 8007b20:	0801169c 	.word	0x0801169c

08007b24 <map_string_number_of_chars>:


unsigned int map_string_number_of_chars(map_string* map_string){
 8007b24:	b590      	push	{r4, r7, lr}
 8007b26:	b085      	sub	sp, #20
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
	if( map_string == NULL ) return 0;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d101      	bne.n	8007b36 <map_string_number_of_chars+0x12>
 8007b32:	2300      	movs	r3, #0
 8007b34:	e025      	b.n	8007b82 <map_string_number_of_chars+0x5e>

	unsigned int number_of_chars = 0;
 8007b36:	2300      	movs	r3, #0
 8007b38:	60fb      	str	r3, [r7, #12]
	for(register unsigned int i = 0; i < map_string->index; i++){
 8007b3a:	2400      	movs	r4, #0
 8007b3c:	e01b      	b.n	8007b76 <map_string_number_of_chars+0x52>
		number_of_chars += strlen(map_string->key[i]);
 8007b3e:	4623      	mov	r3, r4
 8007b40:	005b      	lsls	r3, r3, #1
 8007b42:	4423      	add	r3, r4
 8007b44:	009b      	lsls	r3, r3, #2
 8007b46:	687a      	ldr	r2, [r7, #4]
 8007b48:	4413      	add	r3, r2
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	f7f8 fb4a 	bl	80001e4 <strlen>
 8007b50:	4602      	mov	r2, r0
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	4413      	add	r3, r2
 8007b56:	60fb      	str	r3, [r7, #12]
		number_of_chars += strlen(map_string->value[i]);
 8007b58:	4623      	mov	r3, r4
 8007b5a:	005b      	lsls	r3, r3, #1
 8007b5c:	4423      	add	r3, r4
 8007b5e:	009b      	lsls	r3, r3, #2
 8007b60:	3348      	adds	r3, #72	; 0x48
 8007b62:	687a      	ldr	r2, [r7, #4]
 8007b64:	4413      	add	r3, r2
 8007b66:	4618      	mov	r0, r3
 8007b68:	f7f8 fb3c 	bl	80001e4 <strlen>
 8007b6c:	4602      	mov	r2, r0
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	4413      	add	r3, r2
 8007b72:	60fb      	str	r3, [r7, #12]
	for(register unsigned int i = 0; i < map_string->index; i++){
 8007b74:	3401      	adds	r4, #1
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b7c:	429c      	cmp	r4, r3
 8007b7e:	d3de      	bcc.n	8007b3e <map_string_number_of_chars+0x1a>
	}

	return number_of_chars;
 8007b80:	68fb      	ldr	r3, [r7, #12]
}
 8007b82:	4618      	mov	r0, r3
 8007b84:	3714      	adds	r7, #20
 8007b86:	46bd      	mov	sp, r7
 8007b88:	bd90      	pop	{r4, r7, pc}

08007b8a <map_string_number_of_entries>:

unsigned int map_string_number_of_entries(map_string* map_string){
 8007b8a:	b480      	push	{r7}
 8007b8c:	b083      	sub	sp, #12
 8007b8e:	af00      	add	r7, sp, #0
 8007b90:	6078      	str	r0, [r7, #4]
	if( map_string == NULL ) return 0;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d101      	bne.n	8007b9c <map_string_number_of_entries+0x12>
 8007b98:	2300      	movs	r3, #0
 8007b9a:	e002      	b.n	8007ba2 <map_string_number_of_entries+0x18>
	return map_string->index;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
}
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	370c      	adds	r7, #12
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bac:	4770      	bx	lr
	...

08007bb0 <message_builder_get_instance>:
#include <util/message_builder.h>

message_builder* instance = NULL;

message_builder* message_builder_get_instance(){
 8007bb0:	b598      	push	{r3, r4, r7, lr}
 8007bb2:	af00      	add	r7, sp, #0
	if( instance == NULL ){
 8007bb4:	4b28      	ldr	r3, [pc, #160]	; (8007c58 <message_builder_get_instance+0xa8>)
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d148      	bne.n	8007c4e <message_builder_get_instance+0x9e>
		instance = (message_builder*) malloc(sizeof(message_builder));
 8007bbc:	201c      	movs	r0, #28
 8007bbe:	f004 fd9f 	bl	800c700 <malloc>
 8007bc2:	4603      	mov	r3, r0
 8007bc4:	461a      	mov	r2, r3
 8007bc6:	4b24      	ldr	r3, [pc, #144]	; (8007c58 <message_builder_get_instance+0xa8>)
 8007bc8:	601a      	str	r2, [r3, #0]
		instance->reply_host = NULL;
 8007bca:	4b23      	ldr	r3, [pc, #140]	; (8007c58 <message_builder_get_instance+0xa8>)
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	2200      	movs	r2, #0
 8007bd0:	701a      	strb	r2, [r3, #0]
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	705a      	strb	r2, [r3, #1]
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	709a      	strb	r2, [r3, #2]
 8007bda:	2200      	movs	r2, #0
 8007bdc:	70da      	strb	r2, [r3, #3]
		instance->reply_port = NULL;
 8007bde:	4b1e      	ldr	r3, [pc, #120]	; (8007c58 <message_builder_get_instance+0xa8>)
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	2200      	movs	r2, #0
 8007be4:	711a      	strb	r2, [r3, #4]
 8007be6:	2200      	movs	r2, #0
 8007be8:	715a      	strb	r2, [r3, #5]
 8007bea:	2200      	movs	r2, #0
 8007bec:	719a      	strb	r2, [r3, #6]
 8007bee:	2200      	movs	r2, #0
 8007bf0:	71da      	strb	r2, [r3, #7]
		instance->reply_channel = NULL;
 8007bf2:	4b19      	ldr	r3, [pc, #100]	; (8007c58 <message_builder_get_instance+0xa8>)
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	721a      	strb	r2, [r3, #8]
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	725a      	strb	r2, [r3, #9]
 8007bfe:	2200      	movs	r2, #0
 8007c00:	729a      	strb	r2, [r3, #10]
 8007c02:	2200      	movs	r2, #0
 8007c04:	72da      	strb	r2, [r3, #11]
		instance->method = NULL;
 8007c06:	4b14      	ldr	r3, [pc, #80]	; (8007c58 <message_builder_get_instance+0xa8>)
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	731a      	strb	r2, [r3, #12]
 8007c0e:	2200      	movs	r2, #0
 8007c10:	735a      	strb	r2, [r3, #13]
 8007c12:	2200      	movs	r2, #0
 8007c14:	739a      	strb	r2, [r3, #14]
 8007c16:	2200      	movs	r2, #0
 8007c18:	73da      	strb	r2, [r3, #15]
		instance->uri = NULL;
 8007c1a:	4b0f      	ldr	r3, [pc, #60]	; (8007c58 <message_builder_get_instance+0xa8>)
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	2200      	movs	r2, #0
 8007c20:	741a      	strb	r2, [r3, #16]
 8007c22:	2200      	movs	r2, #0
 8007c24:	745a      	strb	r2, [r3, #17]
 8007c26:	2200      	movs	r2, #0
 8007c28:	749a      	strb	r2, [r3, #18]
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	74da      	strb	r2, [r3, #19]
		instance->header = NULL;
 8007c2e:	4b0a      	ldr	r3, [pc, #40]	; (8007c58 <message_builder_get_instance+0xa8>)
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	2200      	movs	r2, #0
 8007c34:	751a      	strb	r2, [r3, #20]
 8007c36:	2200      	movs	r2, #0
 8007c38:	755a      	strb	r2, [r3, #21]
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	759a      	strb	r2, [r3, #22]
 8007c3e:	2200      	movs	r2, #0
 8007c40:	75da      	strb	r2, [r3, #23]
		instance->body = map_string_init();
 8007c42:	4b05      	ldr	r3, [pc, #20]	; (8007c58 <message_builder_get_instance+0xa8>)
 8007c44:	681c      	ldr	r4, [r3, #0]
 8007c46:	f7ff fd8f 	bl	8007768 <map_string_init>
 8007c4a:	4603      	mov	r3, r0
 8007c4c:	61a3      	str	r3, [r4, #24]
	}
	return instance;
 8007c4e:	4b02      	ldr	r3, [pc, #8]	; (8007c58 <message_builder_get_instance+0xa8>)
 8007c50:	681b      	ldr	r3, [r3, #0]
}
 8007c52:	4618      	mov	r0, r3
 8007c54:	bd98      	pop	{r3, r4, r7, pc}
 8007c56:	bf00      	nop
 8007c58:	20000b14 	.word	0x20000b14

08007c5c <message_builder_set_reply_host>:

message_builder* message_builder_set_reply_host(message_builder* message_builder, char* reply_host){
 8007c5c:	b480      	push	{r7}
 8007c5e:	b083      	sub	sp, #12
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
 8007c64:	6039      	str	r1, [r7, #0]
	if( message_builder == NULL ) return NULL;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d101      	bne.n	8007c70 <message_builder_set_reply_host+0x14>
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	e003      	b.n	8007c78 <message_builder_set_reply_host+0x1c>
	message_builder->reply_host = reply_host;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	683a      	ldr	r2, [r7, #0]
 8007c74:	601a      	str	r2, [r3, #0]
	return message_builder;
 8007c76:	687b      	ldr	r3, [r7, #4]
}
 8007c78:	4618      	mov	r0, r3
 8007c7a:	370c      	adds	r7, #12
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c82:	4770      	bx	lr

08007c84 <message_builder_set_reply_port>:

message_builder* message_builder_set_reply_port(message_builder* message_builder, char* reply_port){
 8007c84:	b480      	push	{r7}
 8007c86:	b083      	sub	sp, #12
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
 8007c8c:	6039      	str	r1, [r7, #0]
	if( message_builder == NULL ) return NULL;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d101      	bne.n	8007c98 <message_builder_set_reply_port+0x14>
 8007c94:	2300      	movs	r3, #0
 8007c96:	e003      	b.n	8007ca0 <message_builder_set_reply_port+0x1c>
	message_builder->reply_port = reply_port;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	683a      	ldr	r2, [r7, #0]
 8007c9c:	605a      	str	r2, [r3, #4]
	return message_builder;
 8007c9e:	687b      	ldr	r3, [r7, #4]
}
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	370c      	adds	r7, #12
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007caa:	4770      	bx	lr

08007cac <message_builder_set_reply_channel>:

message_builder* message_builder_set_reply_channel(message_builder* message_builder, char* reply_channel){
 8007cac:	b480      	push	{r7}
 8007cae:	b083      	sub	sp, #12
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
 8007cb4:	6039      	str	r1, [r7, #0]
	if( message_builder == NULL ) return NULL;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d101      	bne.n	8007cc0 <message_builder_set_reply_channel+0x14>
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	e003      	b.n	8007cc8 <message_builder_set_reply_channel+0x1c>
	message_builder->reply_channel = reply_channel;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	683a      	ldr	r2, [r7, #0]
 8007cc4:	609a      	str	r2, [r3, #8]
	return message_builder;
 8007cc6:	687b      	ldr	r3, [r7, #4]
}
 8007cc8:	4618      	mov	r0, r3
 8007cca:	370c      	adds	r7, #12
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd2:	4770      	bx	lr

08007cd4 <message_builder_set_method>:

message_builder* message_builder_set_method(message_builder* message_builder, char* method){
 8007cd4:	b480      	push	{r7}
 8007cd6:	b083      	sub	sp, #12
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
 8007cdc:	6039      	str	r1, [r7, #0]
	if( message_builder == NULL ) return NULL;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d101      	bne.n	8007ce8 <message_builder_set_method+0x14>
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	e003      	b.n	8007cf0 <message_builder_set_method+0x1c>
	message_builder->method = method;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	683a      	ldr	r2, [r7, #0]
 8007cec:	60da      	str	r2, [r3, #12]
	return message_builder;
 8007cee:	687b      	ldr	r3, [r7, #4]
}
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	370c      	adds	r7, #12
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfa:	4770      	bx	lr

08007cfc <message_builder_set_uri>:

message_builder* message_builder_set_uri(message_builder* message_builder, char* uri){
 8007cfc:	b480      	push	{r7}
 8007cfe:	b083      	sub	sp, #12
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
 8007d04:	6039      	str	r1, [r7, #0]
	if( message_builder == NULL ) return NULL;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d101      	bne.n	8007d10 <message_builder_set_uri+0x14>
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	e003      	b.n	8007d18 <message_builder_set_uri+0x1c>
	message_builder->uri = uri;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	683a      	ldr	r2, [r7, #0]
 8007d14:	611a      	str	r2, [r3, #16]
	return message_builder;
 8007d16:	687b      	ldr	r3, [r7, #4]
}
 8007d18:	4618      	mov	r0, r3
 8007d1a:	370c      	adds	r7, #12
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d22:	4770      	bx	lr

08007d24 <message_builder_put_body>:
	if( message_builder == NULL ) return NULL;
	map_string_put(message_builder->header, key, value);
	return message_builder;
}

message_builder* message_builder_put_body(message_builder* message_builder, char* key, char* value){
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b084      	sub	sp, #16
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	60f8      	str	r0, [r7, #12]
 8007d2c:	60b9      	str	r1, [r7, #8]
 8007d2e:	607a      	str	r2, [r7, #4]
	if( message_builder == NULL ) return NULL;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d101      	bne.n	8007d3a <message_builder_put_body+0x16>
 8007d36:	2300      	movs	r3, #0
 8007d38:	e007      	b.n	8007d4a <message_builder_put_body+0x26>
	map_string_put(message_builder->body, key, value);
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	699b      	ldr	r3, [r3, #24]
 8007d3e:	687a      	ldr	r2, [r7, #4]
 8007d40:	68b9      	ldr	r1, [r7, #8]
 8007d42:	4618      	mov	r0, r3
 8007d44:	f7ff fd67 	bl	8007816 <map_string_put>
	return message_builder;
 8007d48:	68fb      	ldr	r3, [r7, #12]
}
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	3710      	adds	r7, #16
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	bd80      	pop	{r7, pc}
	...

08007d54 <message_builder_build>:

char* message_builder_build(message_builder* message_builder){
 8007d54:	b5b0      	push	{r4, r5, r7, lr}
 8007d56:	b084      	sub	sp, #16
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
	if( message_builder == NULL ) return NULL;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d101      	bne.n	8007d66 <message_builder_build+0x12>
 8007d62:	2300      	movs	r3, #0
 8007d64:	e10b      	b.n	8007f7e <message_builder_build+0x22a>

	char* message = (char*) malloc(256*sizeof(char)); message[0] = '\0';
 8007d66:	f44f 7080 	mov.w	r0, #256	; 0x100
 8007d6a:	f004 fcc9 	bl	800c700 <malloc>
 8007d6e:	4603      	mov	r3, r0
 8007d70:	60fb      	str	r3, [r7, #12]
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	2200      	movs	r2, #0
 8007d76:	701a      	strb	r2, [r3, #0]
	message[0] = '{';
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	227b      	movs	r2, #123	; 0x7b
 8007d7c:	701a      	strb	r2, [r3, #0]
	message[1] = '\0';
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	3301      	adds	r3, #1
 8007d82:	2200      	movs	r2, #0
 8007d84:	701a      	strb	r2, [r3, #0]

	//strcat(message, "{");
	strcat(message, (char*) "\"replyHost\":\""); strcat(message, message_builder->reply_host); strcat(message, (char*) "\",");
 8007d86:	68f8      	ldr	r0, [r7, #12]
 8007d88:	f7f8 fa2c 	bl	80001e4 <strlen>
 8007d8c:	4603      	mov	r3, r0
 8007d8e:	461a      	mov	r2, r3
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	4413      	add	r3, r2
 8007d94:	4a7c      	ldr	r2, [pc, #496]	; (8007f88 <message_builder_build+0x234>)
 8007d96:	461c      	mov	r4, r3
 8007d98:	4613      	mov	r3, r2
 8007d9a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007d9c:	6020      	str	r0, [r4, #0]
 8007d9e:	6061      	str	r1, [r4, #4]
 8007da0:	60a2      	str	r2, [r4, #8]
 8007da2:	881b      	ldrh	r3, [r3, #0]
 8007da4:	81a3      	strh	r3, [r4, #12]
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	4619      	mov	r1, r3
 8007dac:	68f8      	ldr	r0, [r7, #12]
 8007dae:	f004 ff31 	bl	800cc14 <strcat>
 8007db2:	68f8      	ldr	r0, [r7, #12]
 8007db4:	f7f8 fa16 	bl	80001e4 <strlen>
 8007db8:	4603      	mov	r3, r0
 8007dba:	461a      	mov	r2, r3
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	4413      	add	r3, r2
 8007dc0:	4a72      	ldr	r2, [pc, #456]	; (8007f8c <message_builder_build+0x238>)
 8007dc2:	8811      	ldrh	r1, [r2, #0]
 8007dc4:	7892      	ldrb	r2, [r2, #2]
 8007dc6:	8019      	strh	r1, [r3, #0]
 8007dc8:	709a      	strb	r2, [r3, #2]
	strcat(message, (char*) "\"replyPort\":"); strcat(message, message_builder->reply_port); strcat(message, (char*) ",");
 8007dca:	68f8      	ldr	r0, [r7, #12]
 8007dcc:	f7f8 fa0a 	bl	80001e4 <strlen>
 8007dd0:	4603      	mov	r3, r0
 8007dd2:	461a      	mov	r2, r3
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	4413      	add	r3, r2
 8007dd8:	4a6d      	ldr	r2, [pc, #436]	; (8007f90 <message_builder_build+0x23c>)
 8007dda:	461c      	mov	r4, r3
 8007ddc:	4613      	mov	r3, r2
 8007dde:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007de0:	6020      	str	r0, [r4, #0]
 8007de2:	6061      	str	r1, [r4, #4]
 8007de4:	60a2      	str	r2, [r4, #8]
 8007de6:	781b      	ldrb	r3, [r3, #0]
 8007de8:	7323      	strb	r3, [r4, #12]
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	685b      	ldr	r3, [r3, #4]
 8007dee:	4619      	mov	r1, r3
 8007df0:	68f8      	ldr	r0, [r7, #12]
 8007df2:	f004 ff0f 	bl	800cc14 <strcat>
 8007df6:	68f8      	ldr	r0, [r7, #12]
 8007df8:	f7f8 f9f4 	bl	80001e4 <strlen>
 8007dfc:	4603      	mov	r3, r0
 8007dfe:	461a      	mov	r2, r3
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	4413      	add	r3, r2
 8007e04:	4963      	ldr	r1, [pc, #396]	; (8007f94 <message_builder_build+0x240>)
 8007e06:	461a      	mov	r2, r3
 8007e08:	460b      	mov	r3, r1
 8007e0a:	881b      	ldrh	r3, [r3, #0]
 8007e0c:	8013      	strh	r3, [r2, #0]
	strcat(message, (char*) "\"replyChannel\":\""); strcat(message, message_builder->reply_channel); strcat(message, (char*) "\",");
 8007e0e:	68f8      	ldr	r0, [r7, #12]
 8007e10:	f7f8 f9e8 	bl	80001e4 <strlen>
 8007e14:	4603      	mov	r3, r0
 8007e16:	461a      	mov	r2, r3
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	4413      	add	r3, r2
 8007e1c:	4a5e      	ldr	r2, [pc, #376]	; (8007f98 <message_builder_build+0x244>)
 8007e1e:	461d      	mov	r5, r3
 8007e20:	4614      	mov	r4, r2
 8007e22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007e24:	6028      	str	r0, [r5, #0]
 8007e26:	6069      	str	r1, [r5, #4]
 8007e28:	60aa      	str	r2, [r5, #8]
 8007e2a:	60eb      	str	r3, [r5, #12]
 8007e2c:	7823      	ldrb	r3, [r4, #0]
 8007e2e:	742b      	strb	r3, [r5, #16]
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	689b      	ldr	r3, [r3, #8]
 8007e34:	4619      	mov	r1, r3
 8007e36:	68f8      	ldr	r0, [r7, #12]
 8007e38:	f004 feec 	bl	800cc14 <strcat>
 8007e3c:	68f8      	ldr	r0, [r7, #12]
 8007e3e:	f7f8 f9d1 	bl	80001e4 <strlen>
 8007e42:	4603      	mov	r3, r0
 8007e44:	461a      	mov	r2, r3
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	4413      	add	r3, r2
 8007e4a:	4a50      	ldr	r2, [pc, #320]	; (8007f8c <message_builder_build+0x238>)
 8007e4c:	8811      	ldrh	r1, [r2, #0]
 8007e4e:	7892      	ldrb	r2, [r2, #2]
 8007e50:	8019      	strh	r1, [r3, #0]
 8007e52:	709a      	strb	r2, [r3, #2]
	strcat(message, (char*) "\"method\":\""); strcat(message, message_builder->method); strcat(message, (char*) "\",");
 8007e54:	68f8      	ldr	r0, [r7, #12]
 8007e56:	f7f8 f9c5 	bl	80001e4 <strlen>
 8007e5a:	4603      	mov	r3, r0
 8007e5c:	461a      	mov	r2, r3
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	4413      	add	r3, r2
 8007e62:	494e      	ldr	r1, [pc, #312]	; (8007f9c <message_builder_build+0x248>)
 8007e64:	461a      	mov	r2, r3
 8007e66:	460b      	mov	r3, r1
 8007e68:	cb03      	ldmia	r3!, {r0, r1}
 8007e6a:	6010      	str	r0, [r2, #0]
 8007e6c:	6051      	str	r1, [r2, #4]
 8007e6e:	8819      	ldrh	r1, [r3, #0]
 8007e70:	789b      	ldrb	r3, [r3, #2]
 8007e72:	8111      	strh	r1, [r2, #8]
 8007e74:	7293      	strb	r3, [r2, #10]
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	68db      	ldr	r3, [r3, #12]
 8007e7a:	4619      	mov	r1, r3
 8007e7c:	68f8      	ldr	r0, [r7, #12]
 8007e7e:	f004 fec9 	bl	800cc14 <strcat>
 8007e82:	68f8      	ldr	r0, [r7, #12]
 8007e84:	f7f8 f9ae 	bl	80001e4 <strlen>
 8007e88:	4603      	mov	r3, r0
 8007e8a:	461a      	mov	r2, r3
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	4413      	add	r3, r2
 8007e90:	4a3e      	ldr	r2, [pc, #248]	; (8007f8c <message_builder_build+0x238>)
 8007e92:	8811      	ldrh	r1, [r2, #0]
 8007e94:	7892      	ldrb	r2, [r2, #2]
 8007e96:	8019      	strh	r1, [r3, #0]
 8007e98:	709a      	strb	r2, [r3, #2]
	strcat(message, (char*) "\"uri\":\""); strcat(message, message_builder->uri); strcat(message, "\",");
 8007e9a:	68f8      	ldr	r0, [r7, #12]
 8007e9c:	f7f8 f9a2 	bl	80001e4 <strlen>
 8007ea0:	4603      	mov	r3, r0
 8007ea2:	461a      	mov	r2, r3
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	4413      	add	r3, r2
 8007ea8:	493d      	ldr	r1, [pc, #244]	; (8007fa0 <message_builder_build+0x24c>)
 8007eaa:	461a      	mov	r2, r3
 8007eac:	460b      	mov	r3, r1
 8007eae:	cb03      	ldmia	r3!, {r0, r1}
 8007eb0:	6010      	str	r0, [r2, #0]
 8007eb2:	6051      	str	r1, [r2, #4]
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	691b      	ldr	r3, [r3, #16]
 8007eb8:	4619      	mov	r1, r3
 8007eba:	68f8      	ldr	r0, [r7, #12]
 8007ebc:	f004 feaa 	bl	800cc14 <strcat>
 8007ec0:	68f8      	ldr	r0, [r7, #12]
 8007ec2:	f7f8 f98f 	bl	80001e4 <strlen>
 8007ec6:	4603      	mov	r3, r0
 8007ec8:	461a      	mov	r2, r3
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	4413      	add	r3, r2
 8007ece:	4a2f      	ldr	r2, [pc, #188]	; (8007f8c <message_builder_build+0x238>)
 8007ed0:	8811      	ldrh	r1, [r2, #0]
 8007ed2:	7892      	ldrb	r2, [r2, #2]
 8007ed4:	8019      	strh	r1, [r3, #0]
 8007ed6:	709a      	strb	r2, [r3, #2]
	strcat(message, (char*) "\"header\":"); strcat(message, "{}"); strcat(message, (char*) ",");
 8007ed8:	68f8      	ldr	r0, [r7, #12]
 8007eda:	f7f8 f983 	bl	80001e4 <strlen>
 8007ede:	4603      	mov	r3, r0
 8007ee0:	461a      	mov	r2, r3
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	4413      	add	r3, r2
 8007ee6:	492f      	ldr	r1, [pc, #188]	; (8007fa4 <message_builder_build+0x250>)
 8007ee8:	461a      	mov	r2, r3
 8007eea:	460b      	mov	r3, r1
 8007eec:	cb03      	ldmia	r3!, {r0, r1}
 8007eee:	6010      	str	r0, [r2, #0]
 8007ef0:	6051      	str	r1, [r2, #4]
 8007ef2:	881b      	ldrh	r3, [r3, #0]
 8007ef4:	8113      	strh	r3, [r2, #8]
 8007ef6:	68f8      	ldr	r0, [r7, #12]
 8007ef8:	f7f8 f974 	bl	80001e4 <strlen>
 8007efc:	4603      	mov	r3, r0
 8007efe:	461a      	mov	r2, r3
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	4413      	add	r3, r2
 8007f04:	4a28      	ldr	r2, [pc, #160]	; (8007fa8 <message_builder_build+0x254>)
 8007f06:	8811      	ldrh	r1, [r2, #0]
 8007f08:	7892      	ldrb	r2, [r2, #2]
 8007f0a:	8019      	strh	r1, [r3, #0]
 8007f0c:	709a      	strb	r2, [r3, #2]
 8007f0e:	68f8      	ldr	r0, [r7, #12]
 8007f10:	f7f8 f968 	bl	80001e4 <strlen>
 8007f14:	4603      	mov	r3, r0
 8007f16:	461a      	mov	r2, r3
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	4413      	add	r3, r2
 8007f1c:	491d      	ldr	r1, [pc, #116]	; (8007f94 <message_builder_build+0x240>)
 8007f1e:	461a      	mov	r2, r3
 8007f20:	460b      	mov	r3, r1
 8007f22:	881b      	ldrh	r3, [r3, #0]
 8007f24:	8013      	strh	r3, [r2, #0]
	strcat(message, (char*) "\"body\":"); strcat(message, map_string_to_char(message_builder->body));
 8007f26:	68f8      	ldr	r0, [r7, #12]
 8007f28:	f7f8 f95c 	bl	80001e4 <strlen>
 8007f2c:	4603      	mov	r3, r0
 8007f2e:	461a      	mov	r2, r3
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	4413      	add	r3, r2
 8007f34:	491d      	ldr	r1, [pc, #116]	; (8007fac <message_builder_build+0x258>)
 8007f36:	461a      	mov	r2, r3
 8007f38:	460b      	mov	r3, r1
 8007f3a:	cb03      	ldmia	r3!, {r0, r1}
 8007f3c:	6010      	str	r0, [r2, #0]
 8007f3e:	6051      	str	r1, [r2, #4]
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	699b      	ldr	r3, [r3, #24]
 8007f44:	4618      	mov	r0, r3
 8007f46:	f7ff fc9f 	bl	8007888 <map_string_to_char>
 8007f4a:	4603      	mov	r3, r0
 8007f4c:	4619      	mov	r1, r3
 8007f4e:	68f8      	ldr	r0, [r7, #12]
 8007f50:	f004 fe60 	bl	800cc14 <strcat>
	strcat(message, (char*) "}");
 8007f54:	68f8      	ldr	r0, [r7, #12]
 8007f56:	f7f8 f945 	bl	80001e4 <strlen>
 8007f5a:	4603      	mov	r3, r0
 8007f5c:	461a      	mov	r2, r3
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	4413      	add	r3, r2
 8007f62:	4913      	ldr	r1, [pc, #76]	; (8007fb0 <message_builder_build+0x25c>)
 8007f64:	461a      	mov	r2, r3
 8007f66:	460b      	mov	r3, r1
 8007f68:	881b      	ldrh	r3, [r3, #0]
 8007f6a:	8013      	strh	r3, [r2, #0]
	message[strlen(message)] = '\0';
 8007f6c:	68f8      	ldr	r0, [r7, #12]
 8007f6e:	f7f8 f939 	bl	80001e4 <strlen>
 8007f72:	4602      	mov	r2, r0
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	4413      	add	r3, r2
 8007f78:	2200      	movs	r2, #0
 8007f7a:	701a      	strb	r2, [r3, #0]
	return message;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
}
 8007f7e:	4618      	mov	r0, r3
 8007f80:	3710      	adds	r7, #16
 8007f82:	46bd      	mov	sp, r7
 8007f84:	bdb0      	pop	{r4, r5, r7, pc}
 8007f86:	bf00      	nop
 8007f88:	080116a0 	.word	0x080116a0
 8007f8c:	080116b0 	.word	0x080116b0
 8007f90:	080116b4 	.word	0x080116b4
 8007f94:	080116c4 	.word	0x080116c4
 8007f98:	080116c8 	.word	0x080116c8
 8007f9c:	080116dc 	.word	0x080116dc
 8007fa0:	080116e8 	.word	0x080116e8
 8007fa4:	080116f0 	.word	0x080116f0
 8007fa8:	080116fc 	.word	0x080116fc
 8007fac:	08011700 	.word	0x08011700
 8007fb0:	08011708 	.word	0x08011708

08007fb4 <message_builder_destroy>:

void message_builder_destroy(){
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	af00      	add	r7, sp, #0
	if( instance == NULL ) return;
 8007fb8:	4b30      	ldr	r3, [pc, #192]	; (800807c <message_builder_destroy+0xc8>)
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d05a      	beq.n	8008076 <message_builder_destroy+0xc2>

	//free(instance->reply_host);
	instance->reply_host = NULL;
 8007fc0:	4b2e      	ldr	r3, [pc, #184]	; (800807c <message_builder_destroy+0xc8>)
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	701a      	strb	r2, [r3, #0]
 8007fc8:	2200      	movs	r2, #0
 8007fca:	705a      	strb	r2, [r3, #1]
 8007fcc:	2200      	movs	r2, #0
 8007fce:	709a      	strb	r2, [r3, #2]
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	70da      	strb	r2, [r3, #3]

	//free(instance->reply_port);
	instance->reply_port = NULL;
 8007fd4:	4b29      	ldr	r3, [pc, #164]	; (800807c <message_builder_destroy+0xc8>)
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	2200      	movs	r2, #0
 8007fda:	711a      	strb	r2, [r3, #4]
 8007fdc:	2200      	movs	r2, #0
 8007fde:	715a      	strb	r2, [r3, #5]
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	719a      	strb	r2, [r3, #6]
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	71da      	strb	r2, [r3, #7]

	//free(instance->reply_channel);
	instance->reply_channel = NULL;
 8007fe8:	4b24      	ldr	r3, [pc, #144]	; (800807c <message_builder_destroy+0xc8>)
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	2200      	movs	r2, #0
 8007fee:	721a      	strb	r2, [r3, #8]
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	725a      	strb	r2, [r3, #9]
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	729a      	strb	r2, [r3, #10]
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	72da      	strb	r2, [r3, #11]

	//free(instance->method);
	instance->method = NULL;
 8007ffc:	4b1f      	ldr	r3, [pc, #124]	; (800807c <message_builder_destroy+0xc8>)
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	2200      	movs	r2, #0
 8008002:	731a      	strb	r2, [r3, #12]
 8008004:	2200      	movs	r2, #0
 8008006:	735a      	strb	r2, [r3, #13]
 8008008:	2200      	movs	r2, #0
 800800a:	739a      	strb	r2, [r3, #14]
 800800c:	2200      	movs	r2, #0
 800800e:	73da      	strb	r2, [r3, #15]

	//free(instance->uri);
	instance->uri = NULL;
 8008010:	4b1a      	ldr	r3, [pc, #104]	; (800807c <message_builder_destroy+0xc8>)
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	2200      	movs	r2, #0
 8008016:	741a      	strb	r2, [r3, #16]
 8008018:	2200      	movs	r2, #0
 800801a:	745a      	strb	r2, [r3, #17]
 800801c:	2200      	movs	r2, #0
 800801e:	749a      	strb	r2, [r3, #18]
 8008020:	2200      	movs	r2, #0
 8008022:	74da      	strb	r2, [r3, #19]

	map_string_destroy(instance->header);
 8008024:	4b15      	ldr	r3, [pc, #84]	; (800807c <message_builder_destroy+0xc8>)
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	695b      	ldr	r3, [r3, #20]
 800802a:	4618      	mov	r0, r3
 800802c:	f7ff fbcc 	bl	80077c8 <map_string_destroy>
	instance->header = NULL;
 8008030:	4b12      	ldr	r3, [pc, #72]	; (800807c <message_builder_destroy+0xc8>)
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	2200      	movs	r2, #0
 8008036:	751a      	strb	r2, [r3, #20]
 8008038:	2200      	movs	r2, #0
 800803a:	755a      	strb	r2, [r3, #21]
 800803c:	2200      	movs	r2, #0
 800803e:	759a      	strb	r2, [r3, #22]
 8008040:	2200      	movs	r2, #0
 8008042:	75da      	strb	r2, [r3, #23]

	map_string_destroy(instance->body);
 8008044:	4b0d      	ldr	r3, [pc, #52]	; (800807c <message_builder_destroy+0xc8>)
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	699b      	ldr	r3, [r3, #24]
 800804a:	4618      	mov	r0, r3
 800804c:	f7ff fbbc 	bl	80077c8 <map_string_destroy>
	instance->body = NULL;
 8008050:	4b0a      	ldr	r3, [pc, #40]	; (800807c <message_builder_destroy+0xc8>)
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	2200      	movs	r2, #0
 8008056:	761a      	strb	r2, [r3, #24]
 8008058:	2200      	movs	r2, #0
 800805a:	765a      	strb	r2, [r3, #25]
 800805c:	2200      	movs	r2, #0
 800805e:	769a      	strb	r2, [r3, #26]
 8008060:	2200      	movs	r2, #0
 8008062:	76da      	strb	r2, [r3, #27]

	free(instance);
 8008064:	4b05      	ldr	r3, [pc, #20]	; (800807c <message_builder_destroy+0xc8>)
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	4618      	mov	r0, r3
 800806a:	f004 fb51 	bl	800c710 <free>
	instance = NULL;
 800806e:	4b03      	ldr	r3, [pc, #12]	; (800807c <message_builder_destroy+0xc8>)
 8008070:	2200      	movs	r2, #0
 8008072:	601a      	str	r2, [r3, #0]
 8008074:	e000      	b.n	8008078 <message_builder_destroy+0xc4>
	if( instance == NULL ) return;
 8008076:	bf00      	nop
}
 8008078:	bd80      	pop	{r7, pc}
 800807a:	bf00      	nop
 800807c:	20000b14 	.word	0x20000b14

08008080 <stm32_util_set_pin_output>:

uint32_t stm32_util_read_analog(uint32_t channel){
	return 0;
}

void stm32_util_set_pin_output(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin){
 8008080:	b580      	push	{r7, lr}
 8008082:	b088      	sub	sp, #32
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
 8008088:	460b      	mov	r3, r1
 800808a:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800808c:	f107 030c 	add.w	r3, r7, #12
 8008090:	2200      	movs	r2, #0
 8008092:	601a      	str	r2, [r3, #0]
 8008094:	605a      	str	r2, [r3, #4]
 8008096:	609a      	str	r2, [r3, #8]
 8008098:	60da      	str	r2, [r3, #12]
 800809a:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 800809c:	887b      	ldrh	r3, [r7, #2]
 800809e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80080a0:	2301      	movs	r3, #1
 80080a2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80080a4:	2300      	movs	r3, #0
 80080a6:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80080a8:	f107 030c 	add.w	r3, r7, #12
 80080ac:	4619      	mov	r1, r3
 80080ae:	6878      	ldr	r0, [r7, #4]
 80080b0:	f001 fe98 	bl	8009de4 <HAL_GPIO_Init>
}
 80080b4:	bf00      	nop
 80080b6:	3720      	adds	r7, #32
 80080b8:	46bd      	mov	sp, r7
 80080ba:	bd80      	pop	{r7, pc}

080080bc <stm32_util_set_pin_input>:

void stm32_util_set_pin_input(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin){
 80080bc:	b580      	push	{r7, lr}
 80080be:	b088      	sub	sp, #32
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
 80080c4:	460b      	mov	r3, r1
 80080c6:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80080c8:	f107 030c 	add.w	r3, r7, #12
 80080cc:	2200      	movs	r2, #0
 80080ce:	601a      	str	r2, [r3, #0]
 80080d0:	605a      	str	r2, [r3, #4]
 80080d2:	609a      	str	r2, [r3, #8]
 80080d4:	60da      	str	r2, [r3, #12]
 80080d6:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 80080d8:	887b      	ldrh	r3, [r7, #2]
 80080da:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80080dc:	2300      	movs	r3, #0
 80080de:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80080e0:	2301      	movs	r3, #1
 80080e2:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80080e4:	f107 030c 	add.w	r3, r7, #12
 80080e8:	4619      	mov	r1, r3
 80080ea:	6878      	ldr	r0, [r7, #4]
 80080ec:	f001 fe7a 	bl	8009de4 <HAL_GPIO_Init>
}
 80080f0:	bf00      	nop
 80080f2:	3720      	adds	r7, #32
 80080f4:	46bd      	mov	sp, r7
 80080f6:	bd80      	pop	{r7, pc}

080080f8 <stm32_util_delay_in_seconds>:

void stm32_util_delay_in_seconds(uint32_t seconds){
 80080f8:	b580      	push	{r7, lr}
 80080fa:	b082      	sub	sp, #8
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
	stm32_util_delay_in_milliseconds(seconds * 1000);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008106:	fb02 f303 	mul.w	r3, r2, r3
 800810a:	4618      	mov	r0, r3
 800810c:	f000 f80f 	bl	800812e <stm32_util_delay_in_milliseconds>
}
 8008110:	bf00      	nop
 8008112:	3708      	adds	r7, #8
 8008114:	46bd      	mov	sp, r7
 8008116:	bd80      	pop	{r7, pc}

08008118 <stm32_util_delay_in_microseconds>:

void stm32_util_delay_in_microseconds(uint32_t microseconds){
 8008118:	b580      	push	{r7, lr}
 800811a:	b082      	sub	sp, #8
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
	DWT_Delay(microseconds);
 8008120:	6878      	ldr	r0, [r7, #4]
 8008122:	f7ff fa8f 	bl	8007644 <DWT_Delay>
}
 8008126:	bf00      	nop
 8008128:	3708      	adds	r7, #8
 800812a:	46bd      	mov	sp, r7
 800812c:	bd80      	pop	{r7, pc}

0800812e <stm32_util_delay_in_milliseconds>:

void stm32_util_delay_in_milliseconds(uint32_t milliseconds){
 800812e:	b580      	push	{r7, lr}
 8008130:	b082      	sub	sp, #8
 8008132:	af00      	add	r7, sp, #0
 8008134:	6078      	str	r0, [r7, #4]
	HAL_Delay(milliseconds);
 8008136:	6878      	ldr	r0, [r7, #4]
 8008138:	f000 f94a 	bl	80083d0 <HAL_Delay>
}
 800813c:	bf00      	nop
 800813e:	3708      	adds	r7, #8
 8008140:	46bd      	mov	sp, r7
 8008142:	bd80      	pop	{r7, pc}

08008144 <string_util_is_empty>:
#include <util/string_util.h>

bool string_util_is_empty(char* string){
 8008144:	b480      	push	{r7}
 8008146:	b083      	sub	sp, #12
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
	if( string == NULL ) return true;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d101      	bne.n	8008156 <string_util_is_empty+0x12>
 8008152:	2301      	movs	r3, #1
 8008154:	e006      	b.n	8008164 <string_util_is_empty+0x20>
	return strlen(string) == 0;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	781b      	ldrb	r3, [r3, #0]
 800815a:	2b00      	cmp	r3, #0
 800815c:	bf0c      	ite	eq
 800815e:	2301      	moveq	r3, #1
 8008160:	2300      	movne	r3, #0
 8008162:	b2db      	uxtb	r3, r3
}
 8008164:	4618      	mov	r0, r3
 8008166:	370c      	adds	r7, #12
 8008168:	46bd      	mov	sp, r7
 800816a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816e:	4770      	bx	lr

08008170 <string_util_property>:

char* string_util_trim(char* string, char mark){
    return string_util_right_trim(string_util_left_trim(string, mark), mark);
}

char* string_util_property(char* name, char* value){
 8008170:	b590      	push	{r4, r7, lr}
 8008172:	b085      	sub	sp, #20
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
 8008178:	6039      	str	r1, [r7, #0]
	unsigned int length = strlen(name) + strlen(value) + 2;
 800817a:	6878      	ldr	r0, [r7, #4]
 800817c:	f7f8 f832 	bl	80001e4 <strlen>
 8008180:	4604      	mov	r4, r0
 8008182:	6838      	ldr	r0, [r7, #0]
 8008184:	f7f8 f82e 	bl	80001e4 <strlen>
 8008188:	4603      	mov	r3, r0
 800818a:	4423      	add	r3, r4
 800818c:	3302      	adds	r3, #2
 800818e:	60fb      	str	r3, [r7, #12]
	char* result = (char*) malloc(length*sizeof(char));
 8008190:	68f8      	ldr	r0, [r7, #12]
 8008192:	f004 fab5 	bl	800c700 <malloc>
 8008196:	4603      	mov	r3, r0
 8008198:	60bb      	str	r3, [r7, #8]
	strcpy(result, name);
 800819a:	6879      	ldr	r1, [r7, #4]
 800819c:	68b8      	ldr	r0, [r7, #8]
 800819e:	f004 fd48 	bl	800cc32 <strcpy>
	strcat(result, (char*) ":");
 80081a2:	68b8      	ldr	r0, [r7, #8]
 80081a4:	f7f8 f81e 	bl	80001e4 <strlen>
 80081a8:	4603      	mov	r3, r0
 80081aa:	461a      	mov	r2, r3
 80081ac:	68bb      	ldr	r3, [r7, #8]
 80081ae:	4413      	add	r3, r2
 80081b0:	4906      	ldr	r1, [pc, #24]	; (80081cc <string_util_property+0x5c>)
 80081b2:	461a      	mov	r2, r3
 80081b4:	460b      	mov	r3, r1
 80081b6:	881b      	ldrh	r3, [r3, #0]
 80081b8:	8013      	strh	r3, [r2, #0]
	strcat(result, value);
 80081ba:	6839      	ldr	r1, [r7, #0]
 80081bc:	68b8      	ldr	r0, [r7, #8]
 80081be:	f004 fd29 	bl	800cc14 <strcat>
	return result;
 80081c2:	68bb      	ldr	r3, [r7, #8]
}
 80081c4:	4618      	mov	r0, r3
 80081c6:	3714      	adds	r7, #20
 80081c8:	46bd      	mov	sp, r7
 80081ca:	bd90      	pop	{r4, r7, pc}
 80081cc:	08011710 	.word	0x08011710

080081d0 <string_util_concat>:

char* string_util_concat(char* destiny, char* source){
 80081d0:	b590      	push	{r4, r7, lr}
 80081d2:	b087      	sub	sp, #28
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
 80081d8:	6039      	str	r1, [r7, #0]
	size_t size_destiny = strlen(destiny);
 80081da:	6878      	ldr	r0, [r7, #4]
 80081dc:	f7f8 f802 	bl	80001e4 <strlen>
 80081e0:	6178      	str	r0, [r7, #20]
	size_t size_source = strlen(source);
 80081e2:	6838      	ldr	r0, [r7, #0]
 80081e4:	f7f7 fffe 	bl	80001e4 <strlen>
 80081e8:	6138      	str	r0, [r7, #16]
	size_t size = size_destiny + size_source + 1;
 80081ea:	697a      	ldr	r2, [r7, #20]
 80081ec:	693b      	ldr	r3, [r7, #16]
 80081ee:	4413      	add	r3, r2
 80081f0:	3301      	adds	r3, #1
 80081f2:	60fb      	str	r3, [r7, #12]

	char* result = (char*) malloc(size*sizeof(char));
 80081f4:	68f8      	ldr	r0, [r7, #12]
 80081f6:	f004 fa83 	bl	800c700 <malloc>
 80081fa:	4603      	mov	r3, r0
 80081fc:	60bb      	str	r3, [r7, #8]
	for(register size_t i = 0; i < size; i++) result[i] = '\0';
 80081fe:	2400      	movs	r4, #0
 8008200:	e004      	b.n	800820c <string_util_concat+0x3c>
 8008202:	68bb      	ldr	r3, [r7, #8]
 8008204:	4423      	add	r3, r4
 8008206:	2200      	movs	r2, #0
 8008208:	701a      	strb	r2, [r3, #0]
 800820a:	3401      	adds	r4, #1
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	429c      	cmp	r4, r3
 8008210:	d3f7      	bcc.n	8008202 <string_util_concat+0x32>
	strcpy(result, destiny);
 8008212:	6879      	ldr	r1, [r7, #4]
 8008214:	68b8      	ldr	r0, [r7, #8]
 8008216:	f004 fd0c 	bl	800cc32 <strcpy>
	strcpy(&result[size_destiny], source);
 800821a:	68ba      	ldr	r2, [r7, #8]
 800821c:	697b      	ldr	r3, [r7, #20]
 800821e:	4413      	add	r3, r2
 8008220:	6839      	ldr	r1, [r7, #0]
 8008222:	4618      	mov	r0, r3
 8008224:	f004 fd05 	bl	800cc32 <strcpy>

	return result;
 8008228:	68bb      	ldr	r3, [r7, #8]
}
 800822a:	4618      	mov	r0, r3
 800822c:	371c      	adds	r7, #28
 800822e:	46bd      	mov	sp, r7
 8008230:	bd90      	pop	{r4, r7, pc}

08008232 <string_util_length>:

size_t string_util_length(char* string){
 8008232:	b580      	push	{r7, lr}
 8008234:	b082      	sub	sp, #8
 8008236:	af00      	add	r7, sp, #0
 8008238:	6078      	str	r0, [r7, #4]
	return strlen(string);
 800823a:	6878      	ldr	r0, [r7, #4]
 800823c:	f7f7 ffd2 	bl	80001e4 <strlen>
 8008240:	4603      	mov	r3, r0
}
 8008242:	4618      	mov	r0, r3
 8008244:	3708      	adds	r7, #8
 8008246:	46bd      	mov	sp, r7
 8008248:	bd80      	pop	{r7, pc}

0800824a <string_util_build_empty_string>:

char* string_util_build_empty_string(size_t length){
 800824a:	b590      	push	{r4, r7, lr}
 800824c:	b085      	sub	sp, #20
 800824e:	af00      	add	r7, sp, #0
 8008250:	6078      	str	r0, [r7, #4]
	char* result = (char*) malloc((length+1)*sizeof(char));
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	3301      	adds	r3, #1
 8008256:	4618      	mov	r0, r3
 8008258:	f004 fa52 	bl	800c700 <malloc>
 800825c:	4603      	mov	r3, r0
 800825e:	60fb      	str	r3, [r7, #12]
	for(register size_t i = 0; i < length; i++) result[i] = '\0';
 8008260:	2400      	movs	r4, #0
 8008262:	e004      	b.n	800826e <string_util_build_empty_string+0x24>
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	4423      	add	r3, r4
 8008268:	2200      	movs	r2, #0
 800826a:	701a      	strb	r2, [r3, #0]
 800826c:	3401      	adds	r4, #1
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	429c      	cmp	r4, r3
 8008272:	d3f7      	bcc.n	8008264 <string_util_build_empty_string+0x1a>
	return result;
 8008274:	68fb      	ldr	r3, [r7, #12]
}
 8008276:	4618      	mov	r0, r3
 8008278:	3714      	adds	r7, #20
 800827a:	46bd      	mov	sp, r7
 800827c:	bd90      	pop	{r4, r7, pc}

0800827e <string_util_copy>:


void string_util_copy(char* destiny, char* source, size_t length){
 800827e:	b580      	push	{r7, lr}
 8008280:	b084      	sub	sp, #16
 8008282:	af00      	add	r7, sp, #0
 8008284:	60f8      	str	r0, [r7, #12]
 8008286:	60b9      	str	r1, [r7, #8]
 8008288:	607a      	str	r2, [r7, #4]
	strncpy(destiny, source, length);
 800828a:	687a      	ldr	r2, [r7, #4]
 800828c:	68b9      	ldr	r1, [r7, #8]
 800828e:	68f8      	ldr	r0, [r7, #12]
 8008290:	f004 fcd7 	bl	800cc42 <strncpy>
}
 8008294:	bf00      	nop
 8008296:	3710      	adds	r7, #16
 8008298:	46bd      	mov	sp, r7
 800829a:	bd80      	pop	{r7, pc}

0800829c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800829c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80082d4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80082a0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80082a2:	e003      	b.n	80082ac <LoopCopyDataInit>

080082a4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80082a4:	4b0c      	ldr	r3, [pc, #48]	; (80082d8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80082a6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80082a8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80082aa:	3104      	adds	r1, #4

080082ac <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80082ac:	480b      	ldr	r0, [pc, #44]	; (80082dc <LoopForever+0xa>)
	ldr	r3, =_edata
 80082ae:	4b0c      	ldr	r3, [pc, #48]	; (80082e0 <LoopForever+0xe>)
	adds	r2, r0, r1
 80082b0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80082b2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80082b4:	d3f6      	bcc.n	80082a4 <CopyDataInit>
	ldr	r2, =_sbss
 80082b6:	4a0b      	ldr	r2, [pc, #44]	; (80082e4 <LoopForever+0x12>)
	b	LoopFillZerobss
 80082b8:	e002      	b.n	80082c0 <LoopFillZerobss>

080082ba <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80082ba:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80082bc:	f842 3b04 	str.w	r3, [r2], #4

080082c0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80082c0:	4b09      	ldr	r3, [pc, #36]	; (80082e8 <LoopForever+0x16>)
	cmp	r2, r3
 80082c2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80082c4:	d3f9      	bcc.n	80082ba <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80082c6:	f7f9 fe8f 	bl	8001fe8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80082ca:	f004 f9f5 	bl	800c6b8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80082ce:	f7f9 fa6f 	bl	80017b0 <main>

080082d2 <LoopForever>:

LoopForever:
    b LoopForever
 80082d2:	e7fe      	b.n	80082d2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80082d4:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 80082d8:	08011c2c 	.word	0x08011c2c
	ldr	r0, =_sdata
 80082dc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80082e0:	20000a98 	.word	0x20000a98
	ldr	r2, =_sbss
 80082e4:	20000a98 	.word	0x20000a98
	ldr	r3, = _ebss
 80082e8:	2000117c 	.word	0x2000117c

080082ec <CAN1_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80082ec:	e7fe      	b.n	80082ec <CAN1_RX0_IRQHandler>

080082ee <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80082ee:	b580      	push	{r7, lr}
 80082f0:	b082      	sub	sp, #8
 80082f2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80082f4:	2300      	movs	r3, #0
 80082f6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80082f8:	2003      	movs	r0, #3
 80082fa:	f001 fb39 	bl	8009970 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80082fe:	2000      	movs	r0, #0
 8008300:	f000 f80e 	bl	8008320 <HAL_InitTick>
 8008304:	4603      	mov	r3, r0
 8008306:	2b00      	cmp	r3, #0
 8008308:	d002      	beq.n	8008310 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800830a:	2301      	movs	r3, #1
 800830c:	71fb      	strb	r3, [r7, #7]
 800830e:	e001      	b.n	8008314 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8008310:	f7f9 fce4 	bl	8001cdc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8008314:	79fb      	ldrb	r3, [r7, #7]
}
 8008316:	4618      	mov	r0, r3
 8008318:	3708      	adds	r7, #8
 800831a:	46bd      	mov	sp, r7
 800831c:	bd80      	pop	{r7, pc}
	...

08008320 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008320:	b580      	push	{r7, lr}
 8008322:	b084      	sub	sp, #16
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8008328:	2300      	movs	r3, #0
 800832a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800832c:	4b16      	ldr	r3, [pc, #88]	; (8008388 <HAL_InitTick+0x68>)
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d022      	beq.n	800837a <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8008334:	4b15      	ldr	r3, [pc, #84]	; (800838c <HAL_InitTick+0x6c>)
 8008336:	681a      	ldr	r2, [r3, #0]
 8008338:	4b13      	ldr	r3, [pc, #76]	; (8008388 <HAL_InitTick+0x68>)
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008340:	fbb1 f3f3 	udiv	r3, r1, r3
 8008344:	fbb2 f3f3 	udiv	r3, r2, r3
 8008348:	4618      	mov	r0, r3
 800834a:	f001 fb46 	bl	80099da <HAL_SYSTICK_Config>
 800834e:	4603      	mov	r3, r0
 8008350:	2b00      	cmp	r3, #0
 8008352:	d10f      	bne.n	8008374 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2b0f      	cmp	r3, #15
 8008358:	d809      	bhi.n	800836e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800835a:	2200      	movs	r2, #0
 800835c:	6879      	ldr	r1, [r7, #4]
 800835e:	f04f 30ff 	mov.w	r0, #4294967295
 8008362:	f001 fb10 	bl	8009986 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8008366:	4a0a      	ldr	r2, [pc, #40]	; (8008390 <HAL_InitTick+0x70>)
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	6013      	str	r3, [r2, #0]
 800836c:	e007      	b.n	800837e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800836e:	2301      	movs	r3, #1
 8008370:	73fb      	strb	r3, [r7, #15]
 8008372:	e004      	b.n	800837e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8008374:	2301      	movs	r3, #1
 8008376:	73fb      	strb	r3, [r7, #15]
 8008378:	e001      	b.n	800837e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800837a:	2301      	movs	r3, #1
 800837c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800837e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008380:	4618      	mov	r0, r3
 8008382:	3710      	adds	r7, #16
 8008384:	46bd      	mov	sp, r7
 8008386:	bd80      	pop	{r7, pc}
 8008388:	200000e8 	.word	0x200000e8
 800838c:	20000000 	.word	0x20000000
 8008390:	200000e4 	.word	0x200000e4

08008394 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008394:	b480      	push	{r7}
 8008396:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008398:	4b05      	ldr	r3, [pc, #20]	; (80083b0 <HAL_IncTick+0x1c>)
 800839a:	681a      	ldr	r2, [r3, #0]
 800839c:	4b05      	ldr	r3, [pc, #20]	; (80083b4 <HAL_IncTick+0x20>)
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	4413      	add	r3, r2
 80083a2:	4a03      	ldr	r2, [pc, #12]	; (80083b0 <HAL_IncTick+0x1c>)
 80083a4:	6013      	str	r3, [r2, #0]
}
 80083a6:	bf00      	nop
 80083a8:	46bd      	mov	sp, r7
 80083aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ae:	4770      	bx	lr
 80083b0:	20001168 	.word	0x20001168
 80083b4:	200000e8 	.word	0x200000e8

080083b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80083b8:	b480      	push	{r7}
 80083ba:	af00      	add	r7, sp, #0
  return uwTick;
 80083bc:	4b03      	ldr	r3, [pc, #12]	; (80083cc <HAL_GetTick+0x14>)
 80083be:	681b      	ldr	r3, [r3, #0]
}
 80083c0:	4618      	mov	r0, r3
 80083c2:	46bd      	mov	sp, r7
 80083c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c8:	4770      	bx	lr
 80083ca:	bf00      	nop
 80083cc:	20001168 	.word	0x20001168

080083d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b084      	sub	sp, #16
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80083d8:	f7ff ffee 	bl	80083b8 <HAL_GetTick>
 80083dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083e8:	d004      	beq.n	80083f4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80083ea:	4b09      	ldr	r3, [pc, #36]	; (8008410 <HAL_Delay+0x40>)
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	68fa      	ldr	r2, [r7, #12]
 80083f0:	4413      	add	r3, r2
 80083f2:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80083f4:	bf00      	nop
 80083f6:	f7ff ffdf 	bl	80083b8 <HAL_GetTick>
 80083fa:	4602      	mov	r2, r0
 80083fc:	68bb      	ldr	r3, [r7, #8]
 80083fe:	1ad3      	subs	r3, r2, r3
 8008400:	68fa      	ldr	r2, [r7, #12]
 8008402:	429a      	cmp	r2, r3
 8008404:	d8f7      	bhi.n	80083f6 <HAL_Delay+0x26>
  {
  }
}
 8008406:	bf00      	nop
 8008408:	3710      	adds	r7, #16
 800840a:	46bd      	mov	sp, r7
 800840c:	bd80      	pop	{r7, pc}
 800840e:	bf00      	nop
 8008410:	200000e8 	.word	0x200000e8

08008414 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8008414:	b480      	push	{r7}
 8008416:	b083      	sub	sp, #12
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
 800841c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	689b      	ldr	r3, [r3, #8]
 8008422:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8008426:	683b      	ldr	r3, [r7, #0]
 8008428:	431a      	orrs	r2, r3
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	609a      	str	r2, [r3, #8]
}
 800842e:	bf00      	nop
 8008430:	370c      	adds	r7, #12
 8008432:	46bd      	mov	sp, r7
 8008434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008438:	4770      	bx	lr

0800843a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800843a:	b480      	push	{r7}
 800843c:	b083      	sub	sp, #12
 800843e:	af00      	add	r7, sp, #0
 8008440:	6078      	str	r0, [r7, #4]
 8008442:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	689b      	ldr	r3, [r3, #8]
 8008448:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	431a      	orrs	r2, r3
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	609a      	str	r2, [r3, #8]
}
 8008454:	bf00      	nop
 8008456:	370c      	adds	r7, #12
 8008458:	46bd      	mov	sp, r7
 800845a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845e:	4770      	bx	lr

08008460 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8008460:	b480      	push	{r7}
 8008462:	b083      	sub	sp, #12
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	689b      	ldr	r3, [r3, #8]
 800846c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8008470:	4618      	mov	r0, r3
 8008472:	370c      	adds	r7, #12
 8008474:	46bd      	mov	sp, r7
 8008476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847a:	4770      	bx	lr

0800847c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800847c:	b490      	push	{r4, r7}
 800847e:	b084      	sub	sp, #16
 8008480:	af00      	add	r7, sp, #0
 8008482:	60f8      	str	r0, [r7, #12]
 8008484:	60b9      	str	r1, [r7, #8]
 8008486:	607a      	str	r2, [r7, #4]
 8008488:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	3360      	adds	r3, #96	; 0x60
 800848e:	461a      	mov	r2, r3
 8008490:	68bb      	ldr	r3, [r7, #8]
 8008492:	009b      	lsls	r3, r3, #2
 8008494:	4413      	add	r3, r2
 8008496:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8008498:	6822      	ldr	r2, [r4, #0]
 800849a:	4b08      	ldr	r3, [pc, #32]	; (80084bc <LL_ADC_SetOffset+0x40>)
 800849c:	4013      	ands	r3, r2
 800849e:	687a      	ldr	r2, [r7, #4]
 80084a0:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80084a4:	683a      	ldr	r2, [r7, #0]
 80084a6:	430a      	orrs	r2, r1
 80084a8:	4313      	orrs	r3, r2
 80084aa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80084ae:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80084b0:	bf00      	nop
 80084b2:	3710      	adds	r7, #16
 80084b4:	46bd      	mov	sp, r7
 80084b6:	bc90      	pop	{r4, r7}
 80084b8:	4770      	bx	lr
 80084ba:	bf00      	nop
 80084bc:	03fff000 	.word	0x03fff000

080084c0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80084c0:	b490      	push	{r4, r7}
 80084c2:	b082      	sub	sp, #8
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
 80084c8:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	3360      	adds	r3, #96	; 0x60
 80084ce:	461a      	mov	r2, r3
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	009b      	lsls	r3, r3, #2
 80084d4:	4413      	add	r3, r2
 80084d6:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80084d8:	6823      	ldr	r3, [r4, #0]
 80084da:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80084de:	4618      	mov	r0, r3
 80084e0:	3708      	adds	r7, #8
 80084e2:	46bd      	mov	sp, r7
 80084e4:	bc90      	pop	{r4, r7}
 80084e6:	4770      	bx	lr

080084e8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80084e8:	b490      	push	{r4, r7}
 80084ea:	b084      	sub	sp, #16
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	60f8      	str	r0, [r7, #12]
 80084f0:	60b9      	str	r1, [r7, #8]
 80084f2:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	3360      	adds	r3, #96	; 0x60
 80084f8:	461a      	mov	r2, r3
 80084fa:	68bb      	ldr	r3, [r7, #8]
 80084fc:	009b      	lsls	r3, r3, #2
 80084fe:	4413      	add	r3, r2
 8008500:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8008502:	6823      	ldr	r3, [r4, #0]
 8008504:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	4313      	orrs	r3, r2
 800850c:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800850e:	bf00      	nop
 8008510:	3710      	adds	r7, #16
 8008512:	46bd      	mov	sp, r7
 8008514:	bc90      	pop	{r4, r7}
 8008516:	4770      	bx	lr

08008518 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8008518:	b480      	push	{r7}
 800851a:	b083      	sub	sp, #12
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	68db      	ldr	r3, [r3, #12]
 8008524:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008528:	2b00      	cmp	r3, #0
 800852a:	d101      	bne.n	8008530 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800852c:	2301      	movs	r3, #1
 800852e:	e000      	b.n	8008532 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8008530:	2300      	movs	r3, #0
}
 8008532:	4618      	mov	r0, r3
 8008534:	370c      	adds	r7, #12
 8008536:	46bd      	mov	sp, r7
 8008538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853c:	4770      	bx	lr

0800853e <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800853e:	b490      	push	{r4, r7}
 8008540:	b084      	sub	sp, #16
 8008542:	af00      	add	r7, sp, #0
 8008544:	60f8      	str	r0, [r7, #12]
 8008546:	60b9      	str	r1, [r7, #8]
 8008548:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	3330      	adds	r3, #48	; 0x30
 800854e:	461a      	mov	r2, r3
 8008550:	68bb      	ldr	r3, [r7, #8]
 8008552:	0a1b      	lsrs	r3, r3, #8
 8008554:	009b      	lsls	r3, r3, #2
 8008556:	f003 030c 	and.w	r3, r3, #12
 800855a:	4413      	add	r3, r2
 800855c:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800855e:	6822      	ldr	r2, [r4, #0]
 8008560:	68bb      	ldr	r3, [r7, #8]
 8008562:	f003 031f 	and.w	r3, r3, #31
 8008566:	211f      	movs	r1, #31
 8008568:	fa01 f303 	lsl.w	r3, r1, r3
 800856c:	43db      	mvns	r3, r3
 800856e:	401a      	ands	r2, r3
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	0e9b      	lsrs	r3, r3, #26
 8008574:	f003 011f 	and.w	r1, r3, #31
 8008578:	68bb      	ldr	r3, [r7, #8]
 800857a:	f003 031f 	and.w	r3, r3, #31
 800857e:	fa01 f303 	lsl.w	r3, r1, r3
 8008582:	4313      	orrs	r3, r2
 8008584:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8008586:	bf00      	nop
 8008588:	3710      	adds	r7, #16
 800858a:	46bd      	mov	sp, r7
 800858c:	bc90      	pop	{r4, r7}
 800858e:	4770      	bx	lr

08008590 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8008590:	b480      	push	{r7}
 8008592:	b083      	sub	sp, #12
 8008594:	af00      	add	r7, sp, #0
 8008596:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800859c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d101      	bne.n	80085a8 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80085a4:	2301      	movs	r3, #1
 80085a6:	e000      	b.n	80085aa <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80085a8:	2300      	movs	r3, #0
}
 80085aa:	4618      	mov	r0, r3
 80085ac:	370c      	adds	r7, #12
 80085ae:	46bd      	mov	sp, r7
 80085b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b4:	4770      	bx	lr

080085b6 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80085b6:	b490      	push	{r4, r7}
 80085b8:	b084      	sub	sp, #16
 80085ba:	af00      	add	r7, sp, #0
 80085bc:	60f8      	str	r0, [r7, #12]
 80085be:	60b9      	str	r1, [r7, #8]
 80085c0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	3314      	adds	r3, #20
 80085c6:	461a      	mov	r2, r3
 80085c8:	68bb      	ldr	r3, [r7, #8]
 80085ca:	0e5b      	lsrs	r3, r3, #25
 80085cc:	009b      	lsls	r3, r3, #2
 80085ce:	f003 0304 	and.w	r3, r3, #4
 80085d2:	4413      	add	r3, r2
 80085d4:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80085d6:	6822      	ldr	r2, [r4, #0]
 80085d8:	68bb      	ldr	r3, [r7, #8]
 80085da:	0d1b      	lsrs	r3, r3, #20
 80085dc:	f003 031f 	and.w	r3, r3, #31
 80085e0:	2107      	movs	r1, #7
 80085e2:	fa01 f303 	lsl.w	r3, r1, r3
 80085e6:	43db      	mvns	r3, r3
 80085e8:	401a      	ands	r2, r3
 80085ea:	68bb      	ldr	r3, [r7, #8]
 80085ec:	0d1b      	lsrs	r3, r3, #20
 80085ee:	f003 031f 	and.w	r3, r3, #31
 80085f2:	6879      	ldr	r1, [r7, #4]
 80085f4:	fa01 f303 	lsl.w	r3, r1, r3
 80085f8:	4313      	orrs	r3, r2
 80085fa:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80085fc:	bf00      	nop
 80085fe:	3710      	adds	r7, #16
 8008600:	46bd      	mov	sp, r7
 8008602:	bc90      	pop	{r4, r7}
 8008604:	4770      	bx	lr
	...

08008608 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8008608:	b480      	push	{r7}
 800860a:	b085      	sub	sp, #20
 800860c:	af00      	add	r7, sp, #0
 800860e:	60f8      	str	r0, [r7, #12]
 8008610:	60b9      	str	r1, [r7, #8]
 8008612:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800861a:	68bb      	ldr	r3, [r7, #8]
 800861c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008620:	43db      	mvns	r3, r3
 8008622:	401a      	ands	r2, r3
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	f003 0318 	and.w	r3, r3, #24
 800862a:	4908      	ldr	r1, [pc, #32]	; (800864c <LL_ADC_SetChannelSingleDiff+0x44>)
 800862c:	40d9      	lsrs	r1, r3
 800862e:	68bb      	ldr	r3, [r7, #8]
 8008630:	400b      	ands	r3, r1
 8008632:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008636:	431a      	orrs	r2, r3
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800863e:	bf00      	nop
 8008640:	3714      	adds	r7, #20
 8008642:	46bd      	mov	sp, r7
 8008644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008648:	4770      	bx	lr
 800864a:	bf00      	nop
 800864c:	0007ffff 	.word	0x0007ffff

08008650 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8008650:	b480      	push	{r7}
 8008652:	b083      	sub	sp, #12
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	689b      	ldr	r3, [r3, #8]
 800865c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8008660:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008664:	687a      	ldr	r2, [r7, #4]
 8008666:	6093      	str	r3, [r2, #8]
}
 8008668:	bf00      	nop
 800866a:	370c      	adds	r7, #12
 800866c:	46bd      	mov	sp, r7
 800866e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008672:	4770      	bx	lr

08008674 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8008674:	b480      	push	{r7}
 8008676:	b083      	sub	sp, #12
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	689b      	ldr	r3, [r3, #8]
 8008680:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008684:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008688:	d101      	bne.n	800868e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800868a:	2301      	movs	r3, #1
 800868c:	e000      	b.n	8008690 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800868e:	2300      	movs	r3, #0
}
 8008690:	4618      	mov	r0, r3
 8008692:	370c      	adds	r7, #12
 8008694:	46bd      	mov	sp, r7
 8008696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869a:	4770      	bx	lr

0800869c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800869c:	b480      	push	{r7}
 800869e:	b083      	sub	sp, #12
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	689b      	ldr	r3, [r3, #8]
 80086a8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80086ac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80086b0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80086b8:	bf00      	nop
 80086ba:	370c      	adds	r7, #12
 80086bc:	46bd      	mov	sp, r7
 80086be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c2:	4770      	bx	lr

080086c4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80086c4:	b480      	push	{r7}
 80086c6:	b083      	sub	sp, #12
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	689b      	ldr	r3, [r3, #8]
 80086d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80086d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80086d8:	d101      	bne.n	80086de <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80086da:	2301      	movs	r3, #1
 80086dc:	e000      	b.n	80086e0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80086de:	2300      	movs	r3, #0
}
 80086e0:	4618      	mov	r0, r3
 80086e2:	370c      	adds	r7, #12
 80086e4:	46bd      	mov	sp, r7
 80086e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ea:	4770      	bx	lr

080086ec <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80086ec:	b480      	push	{r7}
 80086ee:	b083      	sub	sp, #12
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	689b      	ldr	r3, [r3, #8]
 80086f8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80086fc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008700:	f043 0201 	orr.w	r2, r3, #1
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8008708:	bf00      	nop
 800870a:	370c      	adds	r7, #12
 800870c:	46bd      	mov	sp, r7
 800870e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008712:	4770      	bx	lr

08008714 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8008714:	b480      	push	{r7}
 8008716:	b083      	sub	sp, #12
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	689b      	ldr	r3, [r3, #8]
 8008720:	f003 0301 	and.w	r3, r3, #1
 8008724:	2b01      	cmp	r3, #1
 8008726:	d101      	bne.n	800872c <LL_ADC_IsEnabled+0x18>
 8008728:	2301      	movs	r3, #1
 800872a:	e000      	b.n	800872e <LL_ADC_IsEnabled+0x1a>
 800872c:	2300      	movs	r3, #0
}
 800872e:	4618      	mov	r0, r3
 8008730:	370c      	adds	r7, #12
 8008732:	46bd      	mov	sp, r7
 8008734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008738:	4770      	bx	lr

0800873a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800873a:	b480      	push	{r7}
 800873c:	b083      	sub	sp, #12
 800873e:	af00      	add	r7, sp, #0
 8008740:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	689b      	ldr	r3, [r3, #8]
 8008746:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800874a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800874e:	f043 0204 	orr.w	r2, r3, #4
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8008756:	bf00      	nop
 8008758:	370c      	adds	r7, #12
 800875a:	46bd      	mov	sp, r7
 800875c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008760:	4770      	bx	lr

08008762 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8008762:	b480      	push	{r7}
 8008764:	b083      	sub	sp, #12
 8008766:	af00      	add	r7, sp, #0
 8008768:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	689b      	ldr	r3, [r3, #8]
 800876e:	f003 0304 	and.w	r3, r3, #4
 8008772:	2b04      	cmp	r3, #4
 8008774:	d101      	bne.n	800877a <LL_ADC_REG_IsConversionOngoing+0x18>
 8008776:	2301      	movs	r3, #1
 8008778:	e000      	b.n	800877c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800877a:	2300      	movs	r3, #0
}
 800877c:	4618      	mov	r0, r3
 800877e:	370c      	adds	r7, #12
 8008780:	46bd      	mov	sp, r7
 8008782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008786:	4770      	bx	lr

08008788 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8008788:	b480      	push	{r7}
 800878a:	b083      	sub	sp, #12
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	689b      	ldr	r3, [r3, #8]
 8008794:	f003 0308 	and.w	r3, r3, #8
 8008798:	2b08      	cmp	r3, #8
 800879a:	d101      	bne.n	80087a0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800879c:	2301      	movs	r3, #1
 800879e:	e000      	b.n	80087a2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80087a0:	2300      	movs	r3, #0
}
 80087a2:	4618      	mov	r0, r3
 80087a4:	370c      	adds	r7, #12
 80087a6:	46bd      	mov	sp, r7
 80087a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ac:	4770      	bx	lr
	...

080087b0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b088      	sub	sp, #32
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80087b8:	2300      	movs	r3, #0
 80087ba:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80087bc:	2300      	movs	r3, #0
 80087be:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d101      	bne.n	80087ca <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80087c6:	2301      	movs	r3, #1
 80087c8:	e12a      	b.n	8008a20 <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	691b      	ldr	r3, [r3, #16]
 80087ce:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d109      	bne.n	80087ec <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80087d8:	6878      	ldr	r0, [r7, #4]
 80087da:	f7f9 faa3 	bl	8001d24 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	2200      	movs	r2, #0
 80087e2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	2200      	movs	r2, #0
 80087e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	4618      	mov	r0, r3
 80087f2:	f7ff ff3f 	bl	8008674 <LL_ADC_IsDeepPowerDownEnabled>
 80087f6:	4603      	mov	r3, r0
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d004      	beq.n	8008806 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	4618      	mov	r0, r3
 8008802:	f7ff ff25 	bl	8008650 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	4618      	mov	r0, r3
 800880c:	f7ff ff5a 	bl	80086c4 <LL_ADC_IsInternalRegulatorEnabled>
 8008810:	4603      	mov	r3, r0
 8008812:	2b00      	cmp	r3, #0
 8008814:	d113      	bne.n	800883e <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	4618      	mov	r0, r3
 800881c:	f7ff ff3e 	bl	800869c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8008820:	4b81      	ldr	r3, [pc, #516]	; (8008a28 <HAL_ADC_Init+0x278>)
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	099b      	lsrs	r3, r3, #6
 8008826:	4a81      	ldr	r2, [pc, #516]	; (8008a2c <HAL_ADC_Init+0x27c>)
 8008828:	fba2 2303 	umull	r2, r3, r2, r3
 800882c:	099b      	lsrs	r3, r3, #6
 800882e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8008830:	e002      	b.n	8008838 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8008832:	68bb      	ldr	r3, [r7, #8]
 8008834:	3b01      	subs	r3, #1
 8008836:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8008838:	68bb      	ldr	r3, [r7, #8]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d1f9      	bne.n	8008832 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	4618      	mov	r0, r3
 8008844:	f7ff ff3e 	bl	80086c4 <LL_ADC_IsInternalRegulatorEnabled>
 8008848:	4603      	mov	r3, r0
 800884a:	2b00      	cmp	r3, #0
 800884c:	d10d      	bne.n	800886a <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008852:	f043 0210 	orr.w	r2, r3, #16
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800885e:	f043 0201 	orr.w	r2, r3, #1
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8008866:	2301      	movs	r3, #1
 8008868:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	4618      	mov	r0, r3
 8008870:	f7ff ff77 	bl	8008762 <LL_ADC_REG_IsConversionOngoing>
 8008874:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800887a:	f003 0310 	and.w	r3, r3, #16
 800887e:	2b00      	cmp	r3, #0
 8008880:	f040 80c5 	bne.w	8008a0e <HAL_ADC_Init+0x25e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8008884:	697b      	ldr	r3, [r7, #20]
 8008886:	2b00      	cmp	r3, #0
 8008888:	f040 80c1 	bne.w	8008a0e <HAL_ADC_Init+0x25e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008890:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8008894:	f043 0202 	orr.w	r2, r3, #2
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	4618      	mov	r0, r3
 80088a2:	f7ff ff37 	bl	8008714 <LL_ADC_IsEnabled>
 80088a6:	4603      	mov	r3, r0
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d10b      	bne.n	80088c4 <HAL_ADC_Init+0x114>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80088ac:	4860      	ldr	r0, [pc, #384]	; (8008a30 <HAL_ADC_Init+0x280>)
 80088ae:	f7ff ff31 	bl	8008714 <LL_ADC_IsEnabled>
 80088b2:	4603      	mov	r3, r0
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d105      	bne.n	80088c4 <HAL_ADC_Init+0x114>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	685b      	ldr	r3, [r3, #4]
 80088bc:	4619      	mov	r1, r3
 80088be:	485d      	ldr	r0, [pc, #372]	; (8008a34 <HAL_ADC_Init+0x284>)
 80088c0:	f7ff fda8 	bl	8008414 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	7e5b      	ldrb	r3, [r3, #25]
 80088c8:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80088ce:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80088d4:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80088da:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80088e2:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80088e4:	4313      	orrs	r3, r2
 80088e6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 80088ee:	2b01      	cmp	r3, #1
 80088f0:	d106      	bne.n	8008900 <HAL_ADC_Init+0x150>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088f6:	3b01      	subs	r3, #1
 80088f8:	045b      	lsls	r3, r3, #17
 80088fa:	69ba      	ldr	r2, [r7, #24]
 80088fc:	4313      	orrs	r3, r2
 80088fe:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008904:	2b00      	cmp	r3, #0
 8008906:	d009      	beq.n	800891c <HAL_ADC_Init+0x16c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800890c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008914:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8008916:	69ba      	ldr	r2, [r7, #24]
 8008918:	4313      	orrs	r3, r2
 800891a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	68da      	ldr	r2, [r3, #12]
 8008922:	4b45      	ldr	r3, [pc, #276]	; (8008a38 <HAL_ADC_Init+0x288>)
 8008924:	4013      	ands	r3, r2
 8008926:	687a      	ldr	r2, [r7, #4]
 8008928:	6812      	ldr	r2, [r2, #0]
 800892a:	69b9      	ldr	r1, [r7, #24]
 800892c:	430b      	orrs	r3, r1
 800892e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	4618      	mov	r0, r3
 8008936:	f7ff ff14 	bl	8008762 <LL_ADC_REG_IsConversionOngoing>
 800893a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	4618      	mov	r0, r3
 8008942:	f7ff ff21 	bl	8008788 <LL_ADC_INJ_IsConversionOngoing>
 8008946:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8008948:	693b      	ldr	r3, [r7, #16]
 800894a:	2b00      	cmp	r3, #0
 800894c:	d13d      	bne.n	80089ca <HAL_ADC_Init+0x21a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d13a      	bne.n	80089ca <HAL_ADC_Init+0x21a>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8008958:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008960:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8008962:	4313      	orrs	r3, r2
 8008964:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	68db      	ldr	r3, [r3, #12]
 800896c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008970:	f023 0302 	bic.w	r3, r3, #2
 8008974:	687a      	ldr	r2, [r7, #4]
 8008976:	6812      	ldr	r2, [r2, #0]
 8008978:	69b9      	ldr	r1, [r7, #24]
 800897a:	430b      	orrs	r3, r1
 800897c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008984:	2b01      	cmp	r3, #1
 8008986:	d118      	bne.n	80089ba <HAL_ADC_Init+0x20a>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	691b      	ldr	r3, [r3, #16]
 800898e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008992:	f023 0304 	bic.w	r3, r3, #4
 8008996:	687a      	ldr	r2, [r7, #4]
 8008998:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800899a:	687a      	ldr	r2, [r7, #4]
 800899c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800899e:	4311      	orrs	r1, r2
 80089a0:	687a      	ldr	r2, [r7, #4]
 80089a2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80089a4:	4311      	orrs	r1, r2
 80089a6:	687a      	ldr	r2, [r7, #4]
 80089a8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80089aa:	430a      	orrs	r2, r1
 80089ac:	431a      	orrs	r2, r3
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	f042 0201 	orr.w	r2, r2, #1
 80089b6:	611a      	str	r2, [r3, #16]
 80089b8:	e007      	b.n	80089ca <HAL_ADC_Init+0x21a>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	691a      	ldr	r2, [r3, #16]
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	f022 0201 	bic.w	r2, r2, #1
 80089c8:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	691b      	ldr	r3, [r3, #16]
 80089ce:	2b01      	cmp	r3, #1
 80089d0:	d10c      	bne.n	80089ec <HAL_ADC_Init+0x23c>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089d8:	f023 010f 	bic.w	r1, r3, #15
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	69db      	ldr	r3, [r3, #28]
 80089e0:	1e5a      	subs	r2, r3, #1
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	430a      	orrs	r2, r1
 80089e8:	631a      	str	r2, [r3, #48]	; 0x30
 80089ea:	e007      	b.n	80089fc <HAL_ADC_Init+0x24c>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	f022 020f 	bic.w	r2, r2, #15
 80089fa:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a00:	f023 0303 	bic.w	r3, r3, #3
 8008a04:	f043 0201 	orr.w	r2, r3, #1
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	655a      	str	r2, [r3, #84]	; 0x54
 8008a0c:	e007      	b.n	8008a1e <HAL_ADC_Init+0x26e>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a12:	f043 0210 	orr.w	r2, r3, #16
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8008a1a:	2301      	movs	r3, #1
 8008a1c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8008a1e:	7ffb      	ldrb	r3, [r7, #31]
}
 8008a20:	4618      	mov	r0, r3
 8008a22:	3720      	adds	r7, #32
 8008a24:	46bd      	mov	sp, r7
 8008a26:	bd80      	pop	{r7, pc}
 8008a28:	20000000 	.word	0x20000000
 8008a2c:	053e2d63 	.word	0x053e2d63
 8008a30:	50040000 	.word	0x50040000
 8008a34:	50040300 	.word	0x50040300
 8008a38:	fff0c007 	.word	0xfff0c007

08008a3c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	b086      	sub	sp, #24
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	60f8      	str	r0, [r7, #12]
 8008a44:	60b9      	str	r1, [r7, #8]
 8008a46:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	f7ff fe88 	bl	8008762 <LL_ADC_REG_IsConversionOngoing>
 8008a52:	4603      	mov	r3, r0
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d167      	bne.n	8008b28 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008a5e:	2b01      	cmp	r3, #1
 8008a60:	d101      	bne.n	8008a66 <HAL_ADC_Start_DMA+0x2a>
 8008a62:	2302      	movs	r3, #2
 8008a64:	e063      	b.n	8008b2e <HAL_ADC_Start_DMA+0xf2>
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	2201      	movs	r2, #1
 8008a6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8008a6e:	68f8      	ldr	r0, [r7, #12]
 8008a70:	f000 fd8e 	bl	8009590 <ADC_Enable>
 8008a74:	4603      	mov	r3, r0
 8008a76:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8008a78:	7dfb      	ldrb	r3, [r7, #23]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d14f      	bne.n	8008b1e <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a82:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008a86:	f023 0301 	bic.w	r3, r3, #1
 8008a8a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	655a      	str	r2, [r3, #84]	; 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a96:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d006      	beq.n	8008aac <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008aa2:	f023 0206 	bic.w	r2, r3, #6
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	659a      	str	r2, [r3, #88]	; 0x58
 8008aaa:	e002      	b.n	8008ab2 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	2200      	movs	r2, #0
 8008ab0:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ab6:	4a20      	ldr	r2, [pc, #128]	; (8008b38 <HAL_ADC_Start_DMA+0xfc>)
 8008ab8:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008abe:	4a1f      	ldr	r2, [pc, #124]	; (8008b3c <HAL_ADC_Start_DMA+0x100>)
 8008ac0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ac6:	4a1e      	ldr	r2, [pc, #120]	; (8008b40 <HAL_ADC_Start_DMA+0x104>)
 8008ac8:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	221c      	movs	r2, #28
 8008ad0:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	685a      	ldr	r2, [r3, #4]
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	f042 0210 	orr.w	r2, r2, #16
 8008ae8:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	68da      	ldr	r2, [r3, #12]
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	f042 0201 	orr.w	r2, r2, #1
 8008af8:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	3340      	adds	r3, #64	; 0x40
 8008b04:	4619      	mov	r1, r3
 8008b06:	68ba      	ldr	r2, [r7, #8]
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	f001 f82b 	bl	8009b64 <HAL_DMA_Start_IT>
 8008b0e:	4603      	mov	r3, r0
 8008b10:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	4618      	mov	r0, r3
 8008b18:	f7ff fe0f 	bl	800873a <LL_ADC_REG_StartConversion>
 8008b1c:	e006      	b.n	8008b2c <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	2200      	movs	r2, #0
 8008b22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8008b26:	e001      	b.n	8008b2c <HAL_ADC_Start_DMA+0xf0>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8008b28:	2302      	movs	r3, #2
 8008b2a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8008b2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b2e:	4618      	mov	r0, r3
 8008b30:	3718      	adds	r7, #24
 8008b32:	46bd      	mov	sp, r7
 8008b34:	bd80      	pop	{r7, pc}
 8008b36:	bf00      	nop
 8008b38:	08009645 	.word	0x08009645
 8008b3c:	0800971d 	.word	0x0800971d
 8008b40:	08009739 	.word	0x08009739

08008b44 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b088      	sub	sp, #32
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	685b      	ldr	r3, [r3, #4]
 8008b5e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8008b60:	69bb      	ldr	r3, [r7, #24]
 8008b62:	f003 0302 	and.w	r3, r3, #2
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d017      	beq.n	8008b9a <HAL_ADC_IRQHandler+0x56>
 8008b6a:	697b      	ldr	r3, [r7, #20]
 8008b6c:	f003 0302 	and.w	r3, r3, #2
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d012      	beq.n	8008b9a <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b78:	f003 0310 	and.w	r3, r3, #16
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d105      	bne.n	8008b8c <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b84:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8008b8c:	6878      	ldr	r0, [r7, #4]
 8008b8e:	f000 fe15 	bl	80097bc <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	2202      	movs	r2, #2
 8008b98:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8008b9a:	69bb      	ldr	r3, [r7, #24]
 8008b9c:	f003 0304 	and.w	r3, r3, #4
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d004      	beq.n	8008bae <HAL_ADC_IRQHandler+0x6a>
 8008ba4:	697b      	ldr	r3, [r7, #20]
 8008ba6:	f003 0304 	and.w	r3, r3, #4
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d109      	bne.n	8008bc2 <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8008bae:	69bb      	ldr	r3, [r7, #24]
 8008bb0:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d05e      	beq.n	8008c76 <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8008bb8:	697b      	ldr	r3, [r7, #20]
 8008bba:	f003 0308 	and.w	r3, r3, #8
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d059      	beq.n	8008c76 <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bc6:	f003 0310 	and.w	r3, r3, #16
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d105      	bne.n	8008bda <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bd2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	4618      	mov	r0, r3
 8008be0:	f7ff fc9a 	bl	8008518 <LL_ADC_REG_IsTriggerSourceSWStart>
 8008be4:	4603      	mov	r3, r0
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d03e      	beq.n	8008c68 <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	68db      	ldr	r3, [r3, #12]
 8008bf0:	613b      	str	r3, [r7, #16]
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8008bf2:	693b      	ldr	r3, [r7, #16]
 8008bf4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d135      	bne.n	8008c68 <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	f003 0308 	and.w	r3, r3, #8
 8008c06:	2b08      	cmp	r3, #8
 8008c08:	d12e      	bne.n	8008c68 <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	4618      	mov	r0, r3
 8008c10:	f7ff fda7 	bl	8008762 <LL_ADC_REG_IsConversionOngoing>
 8008c14:	4603      	mov	r3, r0
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d11a      	bne.n	8008c50 <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	685a      	ldr	r2, [r3, #4]
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	f022 020c 	bic.w	r2, r2, #12
 8008c28:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c2e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c3a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d112      	bne.n	8008c68 <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c46:	f043 0201 	orr.w	r2, r3, #1
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	655a      	str	r2, [r3, #84]	; 0x54
 8008c4e:	e00b      	b.n	8008c68 <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c54:	f043 0210 	orr.w	r2, r3, #16
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c60:	f043 0201 	orr.w	r2, r3, #1
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8008c68:	6878      	ldr	r0, [r7, #4]
 8008c6a:	f7f9 fa73 	bl	8002154 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	220c      	movs	r2, #12
 8008c74:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8008c76:	69bb      	ldr	r3, [r7, #24]
 8008c78:	f003 0320 	and.w	r3, r3, #32
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d004      	beq.n	8008c8a <HAL_ADC_IRQHandler+0x146>
 8008c80:	697b      	ldr	r3, [r7, #20]
 8008c82:	f003 0320 	and.w	r3, r3, #32
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d109      	bne.n	8008c9e <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8008c8a:	69bb      	ldr	r3, [r7, #24]
 8008c8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d072      	beq.n	8008d7a <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8008c94:	697b      	ldr	r3, [r7, #20]
 8008c96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d06d      	beq.n	8008d7a <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ca2:	f003 0310 	and.w	r3, r3, #16
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d105      	bne.n	8008cb6 <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008cae:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	4618      	mov	r0, r3
 8008cbc:	f7ff fc68 	bl	8008590 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8008cc0:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	f7ff fc26 	bl	8008518 <LL_ADC_REG_IsTriggerSourceSWStart>
 8008ccc:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	68db      	ldr	r3, [r3, #12]
 8008cd4:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d10c      	bne.n	8008cf6 <HAL_ADC_IRQHandler+0x1b2>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 8008cdc:	693b      	ldr	r3, [r7, #16]
 8008cde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d142      	bne.n	8008d6c <HAL_ADC_IRQHandler+0x228>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 8008ce6:	68bb      	ldr	r3, [r7, #8]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d03f      	beq.n	8008d6c <HAL_ADC_IRQHandler+0x228>
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
          (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL))))
 8008cec:	693b      	ldr	r3, [r7, #16]
 8008cee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d13a      	bne.n	8008d6c <HAL_ADC_IRQHandler+0x228>
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d00:	2b40      	cmp	r3, #64	; 0x40
 8008d02:	d133      	bne.n	8008d6c <HAL_ADC_IRQHandler+0x228>
        /* when the last context has been fully processed, JSQR is reset      */
        /* by the hardware. Even if no injected conversion is planned to come */
        /* (queue empty, triggers are ignored), it can start again            */
        /* immediately after setting a new context (JADSTART is still set).   */
        /* Therefore, state of HAL ADC injected group is kept to busy.        */
        if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8008d04:	693b      	ldr	r3, [r7, #16]
 8008d06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d12e      	bne.n	8008d6c <HAL_ADC_IRQHandler+0x228>
        {
          /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
          /* JADSTART==0 (no conversion on going)                             */
          if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	4618      	mov	r0, r3
 8008d14:	f7ff fd38 	bl	8008788 <LL_ADC_INJ_IsConversionOngoing>
 8008d18:	4603      	mov	r3, r0
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d11a      	bne.n	8008d54 <HAL_ADC_IRQHandler+0x210>
          {
            /* Disable ADC end of sequence conversion interrupt  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	685a      	ldr	r2, [r3, #4]
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8008d2c:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d32:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d112      	bne.n	8008d6c <HAL_ADC_IRQHandler+0x228>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d4a:	f043 0201 	orr.w	r2, r3, #1
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	655a      	str	r2, [r3, #84]	; 0x54
 8008d52:	e00b      	b.n	8008d6c <HAL_ADC_IRQHandler+0x228>
            }
          }
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d58:	f043 0210 	orr.w	r2, r3, #16
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d64:	f043 0201 	orr.w	r2, r3, #1
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8008d6c:	6878      	ldr	r0, [r7, #4]
 8008d6e:	f000 fcfd 	bl	800976c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	2260      	movs	r2, #96	; 0x60
 8008d78:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8008d7a:	69bb      	ldr	r3, [r7, #24]
 8008d7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d011      	beq.n	8008da8 <HAL_ADC_IRQHandler+0x264>
 8008d84:	697b      	ldr	r3, [r7, #20]
 8008d86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d00c      	beq.n	8008da8 <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d92:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8008d9a:	6878      	ldr	r0, [r7, #4]
 8008d9c:	f000 f890 	bl	8008ec0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	2280      	movs	r2, #128	; 0x80
 8008da6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8008da8:	69bb      	ldr	r3, [r7, #24]
 8008daa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d012      	beq.n	8008dd8 <HAL_ADC_IRQHandler+0x294>
 8008db2:	697b      	ldr	r3, [r7, #20]
 8008db4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d00d      	beq.n	8008dd8 <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008dc0:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8008dc8:	6878      	ldr	r0, [r7, #4]
 8008dca:	f000 fce3 	bl	8009794 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008dd6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8008dd8:	69bb      	ldr	r3, [r7, #24]
 8008dda:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d012      	beq.n	8008e08 <HAL_ADC_IRQHandler+0x2c4>
 8008de2:	697b      	ldr	r3, [r7, #20]
 8008de4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d00d      	beq.n	8008e08 <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008df0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8008df8:	6878      	ldr	r0, [r7, #4]
 8008dfa:	f000 fcd5 	bl	80097a8 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008e06:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8008e08:	69bb      	ldr	r3, [r7, #24]
 8008e0a:	f003 0310 	and.w	r3, r3, #16
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d02a      	beq.n	8008e68 <HAL_ADC_IRQHandler+0x324>
 8008e12:	697b      	ldr	r3, [r7, #20]
 8008e14:	f003 0310 	and.w	r3, r3, #16
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d025      	beq.n	8008e68 <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d102      	bne.n	8008e2a <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 8008e24:	2301      	movs	r3, #1
 8008e26:	61fb      	str	r3, [r7, #28]
 8008e28:	e008      	b.n	8008e3c <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	68db      	ldr	r3, [r3, #12]
 8008e30:	f003 0301 	and.w	r3, r3, #1
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d001      	beq.n	8008e3c <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 8008e38:	2301      	movs	r3, #1
 8008e3a:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 8008e3c:	69fb      	ldr	r3, [r7, #28]
 8008e3e:	2b01      	cmp	r3, #1
 8008e40:	d10e      	bne.n	8008e60 <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e46:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e52:	f043 0202 	orr.w	r2, r3, #2
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8008e5a:	6878      	ldr	r0, [r7, #4]
 8008e5c:	f000 f83a 	bl	8008ed4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	2210      	movs	r2, #16
 8008e66:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8008e68:	69bb      	ldr	r3, [r7, #24]
 8008e6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d018      	beq.n	8008ea4 <HAL_ADC_IRQHandler+0x360>
 8008e72:	697b      	ldr	r3, [r7, #20]
 8008e74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d013      	beq.n	8008ea4 <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e80:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e8c:	f043 0208 	orr.w	r2, r3, #8
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008e9c:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8008e9e:	6878      	ldr	r0, [r7, #4]
 8008ea0:	f000 fc6e 	bl	8009780 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8008ea4:	bf00      	nop
 8008ea6:	3720      	adds	r7, #32
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	bd80      	pop	{r7, pc}

08008eac <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8008eac:	b480      	push	{r7}
 8008eae:	b083      	sub	sp, #12
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8008eb4:	bf00      	nop
 8008eb6:	370c      	adds	r7, #12
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ebe:	4770      	bx	lr

08008ec0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8008ec0:	b480      	push	{r7}
 8008ec2:	b083      	sub	sp, #12
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8008ec8:	bf00      	nop
 8008eca:	370c      	adds	r7, #12
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed2:	4770      	bx	lr

08008ed4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8008ed4:	b480      	push	{r7}
 8008ed6:	b083      	sub	sp, #12
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8008edc:	bf00      	nop
 8008ede:	370c      	adds	r7, #12
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee6:	4770      	bx	lr

08008ee8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b0a6      	sub	sp, #152	; 0x98
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
 8008ef0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8008ef8:	2300      	movs	r3, #0
 8008efa:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008f02:	2b01      	cmp	r3, #1
 8008f04:	d101      	bne.n	8008f0a <HAL_ADC_ConfigChannel+0x22>
 8008f06:	2302      	movs	r3, #2
 8008f08:	e338      	b.n	800957c <HAL_ADC_ConfigChannel+0x694>
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	2201      	movs	r2, #1
 8008f0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	4618      	mov	r0, r3
 8008f18:	f7ff fc23 	bl	8008762 <LL_ADC_REG_IsConversionOngoing>
 8008f1c:	4603      	mov	r3, r0
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	f040 831d 	bne.w	800955e <HAL_ADC_ConfigChannel+0x676>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8008f24:	683b      	ldr	r3, [r7, #0]
 8008f26:	685b      	ldr	r3, [r3, #4]
 8008f28:	2b05      	cmp	r3, #5
 8008f2a:	d824      	bhi.n	8008f76 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8008f2c:	683b      	ldr	r3, [r7, #0]
 8008f2e:	685b      	ldr	r3, [r3, #4]
 8008f30:	3b02      	subs	r3, #2
 8008f32:	2b03      	cmp	r3, #3
 8008f34:	d81b      	bhi.n	8008f6e <HAL_ADC_ConfigChannel+0x86>
 8008f36:	a201      	add	r2, pc, #4	; (adr r2, 8008f3c <HAL_ADC_ConfigChannel+0x54>)
 8008f38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f3c:	08008f4d 	.word	0x08008f4d
 8008f40:	08008f55 	.word	0x08008f55
 8008f44:	08008f5d 	.word	0x08008f5d
 8008f48:	08008f65 	.word	0x08008f65
      {
        case 2U: sConfig->Rank = ADC_REGULAR_RANK_2; break;
 8008f4c:	683b      	ldr	r3, [r7, #0]
 8008f4e:	220c      	movs	r2, #12
 8008f50:	605a      	str	r2, [r3, #4]
 8008f52:	e011      	b.n	8008f78 <HAL_ADC_ConfigChannel+0x90>
        case 3U: sConfig->Rank = ADC_REGULAR_RANK_3; break;
 8008f54:	683b      	ldr	r3, [r7, #0]
 8008f56:	2212      	movs	r2, #18
 8008f58:	605a      	str	r2, [r3, #4]
 8008f5a:	e00d      	b.n	8008f78 <HAL_ADC_ConfigChannel+0x90>
        case 4U: sConfig->Rank = ADC_REGULAR_RANK_4; break;
 8008f5c:	683b      	ldr	r3, [r7, #0]
 8008f5e:	2218      	movs	r2, #24
 8008f60:	605a      	str	r2, [r3, #4]
 8008f62:	e009      	b.n	8008f78 <HAL_ADC_ConfigChannel+0x90>
        case 5U: sConfig->Rank = ADC_REGULAR_RANK_5; break;
 8008f64:	683b      	ldr	r3, [r7, #0]
 8008f66:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008f6a:	605a      	str	r2, [r3, #4]
 8008f6c:	e004      	b.n	8008f78 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default: sConfig->Rank = ADC_REGULAR_RANK_1; break;
 8008f6e:	683b      	ldr	r3, [r7, #0]
 8008f70:	2206      	movs	r2, #6
 8008f72:	605a      	str	r2, [r3, #4]
 8008f74:	e000      	b.n	8008f78 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8008f76:	bf00      	nop
    #endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	6818      	ldr	r0, [r3, #0]
 8008f7c:	683b      	ldr	r3, [r7, #0]
 8008f7e:	6859      	ldr	r1, [r3, #4]
 8008f80:	683b      	ldr	r3, [r7, #0]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	461a      	mov	r2, r3
 8008f86:	f7ff fada 	bl	800853e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	4618      	mov	r0, r3
 8008f90:	f7ff fbe7 	bl	8008762 <LL_ADC_REG_IsConversionOngoing>
 8008f94:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	f7ff fbf3 	bl	8008788 <LL_ADC_INJ_IsConversionOngoing>
 8008fa2:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8008fa6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	f040 8148 	bne.w	8009240 <HAL_ADC_ConfigChannel+0x358>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8008fb0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	f040 8143 	bne.w	8009240 <HAL_ADC_ConfigChannel+0x358>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	6818      	ldr	r0, [r3, #0]
 8008fbe:	683b      	ldr	r3, [r7, #0]
 8008fc0:	6819      	ldr	r1, [r3, #0]
 8008fc2:	683b      	ldr	r3, [r7, #0]
 8008fc4:	689b      	ldr	r3, [r3, #8]
 8008fc6:	461a      	mov	r2, r3
 8008fc8:	f7ff faf5 	bl	80085b6 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8008fcc:	683b      	ldr	r3, [r7, #0]
 8008fce:	695a      	ldr	r2, [r3, #20]
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	68db      	ldr	r3, [r3, #12]
 8008fd6:	08db      	lsrs	r3, r3, #3
 8008fd8:	f003 0303 	and.w	r3, r3, #3
 8008fdc:	005b      	lsls	r3, r3, #1
 8008fde:	fa02 f303 	lsl.w	r3, r2, r3
 8008fe2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8008fe6:	683b      	ldr	r3, [r7, #0]
 8008fe8:	691b      	ldr	r3, [r3, #16]
 8008fea:	2b04      	cmp	r3, #4
 8008fec:	d00a      	beq.n	8009004 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	6818      	ldr	r0, [r3, #0]
 8008ff2:	683b      	ldr	r3, [r7, #0]
 8008ff4:	6919      	ldr	r1, [r3, #16]
 8008ff6:	683b      	ldr	r3, [r7, #0]
 8008ff8:	681a      	ldr	r2, [r3, #0]
 8008ffa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008ffe:	f7ff fa3d 	bl	800847c <LL_ADC_SetOffset>
 8009002:	e11d      	b.n	8009240 <HAL_ADC_ConfigChannel+0x358>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	2100      	movs	r1, #0
 800900a:	4618      	mov	r0, r3
 800900c:	f7ff fa58 	bl	80084c0 <LL_ADC_GetOffsetChannel>
 8009010:	4603      	mov	r3, r0
 8009012:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009016:	2b00      	cmp	r3, #0
 8009018:	d10a      	bne.n	8009030 <HAL_ADC_ConfigChannel+0x148>
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	2100      	movs	r1, #0
 8009020:	4618      	mov	r0, r3
 8009022:	f7ff fa4d 	bl	80084c0 <LL_ADC_GetOffsetChannel>
 8009026:	4603      	mov	r3, r0
 8009028:	0e9b      	lsrs	r3, r3, #26
 800902a:	f003 021f 	and.w	r2, r3, #31
 800902e:	e012      	b.n	8009056 <HAL_ADC_ConfigChannel+0x16e>
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	2100      	movs	r1, #0
 8009036:	4618      	mov	r0, r3
 8009038:	f7ff fa42 	bl	80084c0 <LL_ADC_GetOffsetChannel>
 800903c:	4603      	mov	r3, r0
 800903e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009042:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009046:	fa93 f3a3 	rbit	r3, r3
 800904a:	67fb      	str	r3, [r7, #124]	; 0x7c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800904c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800904e:	fab3 f383 	clz	r3, r3
 8009052:	b2db      	uxtb	r3, r3
 8009054:	461a      	mov	r2, r3
 8009056:	683b      	ldr	r3, [r7, #0]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800905e:	2b00      	cmp	r3, #0
 8009060:	d105      	bne.n	800906e <HAL_ADC_ConfigChannel+0x186>
 8009062:	683b      	ldr	r3, [r7, #0]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	0e9b      	lsrs	r3, r3, #26
 8009068:	f003 031f 	and.w	r3, r3, #31
 800906c:	e00a      	b.n	8009084 <HAL_ADC_ConfigChannel+0x19c>
 800906e:	683b      	ldr	r3, [r7, #0]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009074:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009076:	fa93 f3a3 	rbit	r3, r3
 800907a:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 800907c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800907e:	fab3 f383 	clz	r3, r3
 8009082:	b2db      	uxtb	r3, r3
 8009084:	429a      	cmp	r2, r3
 8009086:	d106      	bne.n	8009096 <HAL_ADC_ConfigChannel+0x1ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	2200      	movs	r2, #0
 800908e:	2100      	movs	r1, #0
 8009090:	4618      	mov	r0, r3
 8009092:	f7ff fa29 	bl	80084e8 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	2101      	movs	r1, #1
 800909c:	4618      	mov	r0, r3
 800909e:	f7ff fa0f 	bl	80084c0 <LL_ADC_GetOffsetChannel>
 80090a2:	4603      	mov	r3, r0
 80090a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d10a      	bne.n	80090c2 <HAL_ADC_ConfigChannel+0x1da>
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	2101      	movs	r1, #1
 80090b2:	4618      	mov	r0, r3
 80090b4:	f7ff fa04 	bl	80084c0 <LL_ADC_GetOffsetChannel>
 80090b8:	4603      	mov	r3, r0
 80090ba:	0e9b      	lsrs	r3, r3, #26
 80090bc:	f003 021f 	and.w	r2, r3, #31
 80090c0:	e010      	b.n	80090e4 <HAL_ADC_ConfigChannel+0x1fc>
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	2101      	movs	r1, #1
 80090c8:	4618      	mov	r0, r3
 80090ca:	f7ff f9f9 	bl	80084c0 <LL_ADC_GetOffsetChannel>
 80090ce:	4603      	mov	r3, r0
 80090d0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80090d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80090d4:	fa93 f3a3 	rbit	r3, r3
 80090d8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80090da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80090dc:	fab3 f383 	clz	r3, r3
 80090e0:	b2db      	uxtb	r3, r3
 80090e2:	461a      	mov	r2, r3
 80090e4:	683b      	ldr	r3, [r7, #0]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d105      	bne.n	80090fc <HAL_ADC_ConfigChannel+0x214>
 80090f0:	683b      	ldr	r3, [r7, #0]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	0e9b      	lsrs	r3, r3, #26
 80090f6:	f003 031f 	and.w	r3, r3, #31
 80090fa:	e00a      	b.n	8009112 <HAL_ADC_ConfigChannel+0x22a>
 80090fc:	683b      	ldr	r3, [r7, #0]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009102:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009104:	fa93 f3a3 	rbit	r3, r3
 8009108:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800910a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800910c:	fab3 f383 	clz	r3, r3
 8009110:	b2db      	uxtb	r3, r3
 8009112:	429a      	cmp	r2, r3
 8009114:	d106      	bne.n	8009124 <HAL_ADC_ConfigChannel+0x23c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	2200      	movs	r2, #0
 800911c:	2101      	movs	r1, #1
 800911e:	4618      	mov	r0, r3
 8009120:	f7ff f9e2 	bl	80084e8 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	2102      	movs	r1, #2
 800912a:	4618      	mov	r0, r3
 800912c:	f7ff f9c8 	bl	80084c0 <LL_ADC_GetOffsetChannel>
 8009130:	4603      	mov	r3, r0
 8009132:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009136:	2b00      	cmp	r3, #0
 8009138:	d10a      	bne.n	8009150 <HAL_ADC_ConfigChannel+0x268>
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	2102      	movs	r1, #2
 8009140:	4618      	mov	r0, r3
 8009142:	f7ff f9bd 	bl	80084c0 <LL_ADC_GetOffsetChannel>
 8009146:	4603      	mov	r3, r0
 8009148:	0e9b      	lsrs	r3, r3, #26
 800914a:	f003 021f 	and.w	r2, r3, #31
 800914e:	e010      	b.n	8009172 <HAL_ADC_ConfigChannel+0x28a>
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	2102      	movs	r1, #2
 8009156:	4618      	mov	r0, r3
 8009158:	f7ff f9b2 	bl	80084c0 <LL_ADC_GetOffsetChannel>
 800915c:	4603      	mov	r3, r0
 800915e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009160:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009162:	fa93 f3a3 	rbit	r3, r3
 8009166:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 8009168:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800916a:	fab3 f383 	clz	r3, r3
 800916e:	b2db      	uxtb	r3, r3
 8009170:	461a      	mov	r2, r3
 8009172:	683b      	ldr	r3, [r7, #0]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800917a:	2b00      	cmp	r3, #0
 800917c:	d105      	bne.n	800918a <HAL_ADC_ConfigChannel+0x2a2>
 800917e:	683b      	ldr	r3, [r7, #0]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	0e9b      	lsrs	r3, r3, #26
 8009184:	f003 031f 	and.w	r3, r3, #31
 8009188:	e00a      	b.n	80091a0 <HAL_ADC_ConfigChannel+0x2b8>
 800918a:	683b      	ldr	r3, [r7, #0]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009190:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009192:	fa93 f3a3 	rbit	r3, r3
 8009196:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8009198:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800919a:	fab3 f383 	clz	r3, r3
 800919e:	b2db      	uxtb	r3, r3
 80091a0:	429a      	cmp	r2, r3
 80091a2:	d106      	bne.n	80091b2 <HAL_ADC_ConfigChannel+0x2ca>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	2200      	movs	r2, #0
 80091aa:	2102      	movs	r1, #2
 80091ac:	4618      	mov	r0, r3
 80091ae:	f7ff f99b 	bl	80084e8 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	2103      	movs	r1, #3
 80091b8:	4618      	mov	r0, r3
 80091ba:	f7ff f981 	bl	80084c0 <LL_ADC_GetOffsetChannel>
 80091be:	4603      	mov	r3, r0
 80091c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d10a      	bne.n	80091de <HAL_ADC_ConfigChannel+0x2f6>
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	2103      	movs	r1, #3
 80091ce:	4618      	mov	r0, r3
 80091d0:	f7ff f976 	bl	80084c0 <LL_ADC_GetOffsetChannel>
 80091d4:	4603      	mov	r3, r0
 80091d6:	0e9b      	lsrs	r3, r3, #26
 80091d8:	f003 021f 	and.w	r2, r3, #31
 80091dc:	e010      	b.n	8009200 <HAL_ADC_ConfigChannel+0x318>
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	2103      	movs	r1, #3
 80091e4:	4618      	mov	r0, r3
 80091e6:	f7ff f96b 	bl	80084c0 <LL_ADC_GetOffsetChannel>
 80091ea:	4603      	mov	r3, r0
 80091ec:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80091ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80091f0:	fa93 f3a3 	rbit	r3, r3
 80091f4:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80091f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80091f8:	fab3 f383 	clz	r3, r3
 80091fc:	b2db      	uxtb	r3, r3
 80091fe:	461a      	mov	r2, r3
 8009200:	683b      	ldr	r3, [r7, #0]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009208:	2b00      	cmp	r3, #0
 800920a:	d105      	bne.n	8009218 <HAL_ADC_ConfigChannel+0x330>
 800920c:	683b      	ldr	r3, [r7, #0]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	0e9b      	lsrs	r3, r3, #26
 8009212:	f003 031f 	and.w	r3, r3, #31
 8009216:	e00a      	b.n	800922e <HAL_ADC_ConfigChannel+0x346>
 8009218:	683b      	ldr	r3, [r7, #0]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800921e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009220:	fa93 f3a3 	rbit	r3, r3
 8009224:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 8009226:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009228:	fab3 f383 	clz	r3, r3
 800922c:	b2db      	uxtb	r3, r3
 800922e:	429a      	cmp	r2, r3
 8009230:	d106      	bne.n	8009240 <HAL_ADC_ConfigChannel+0x358>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	2200      	movs	r2, #0
 8009238:	2103      	movs	r1, #3
 800923a:	4618      	mov	r0, r3
 800923c:	f7ff f954 	bl	80084e8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	4618      	mov	r0, r3
 8009246:	f7ff fa65 	bl	8008714 <LL_ADC_IsEnabled>
 800924a:	4603      	mov	r3, r0
 800924c:	2b00      	cmp	r3, #0
 800924e:	f040 810c 	bne.w	800946a <HAL_ADC_ConfigChannel+0x582>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	6818      	ldr	r0, [r3, #0]
 8009256:	683b      	ldr	r3, [r7, #0]
 8009258:	6819      	ldr	r1, [r3, #0]
 800925a:	683b      	ldr	r3, [r7, #0]
 800925c:	68db      	ldr	r3, [r3, #12]
 800925e:	461a      	mov	r2, r3
 8009260:	f7ff f9d2 	bl	8008608 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8009264:	683b      	ldr	r3, [r7, #0]
 8009266:	68db      	ldr	r3, [r3, #12]
 8009268:	4aa8      	ldr	r2, [pc, #672]	; (800950c <HAL_ADC_ConfigChannel+0x624>)
 800926a:	4293      	cmp	r3, r2
 800926c:	f040 80fd 	bne.w	800946a <HAL_ADC_ConfigChannel+0x582>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8009274:	683b      	ldr	r3, [r7, #0]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800927c:	2b00      	cmp	r3, #0
 800927e:	d10b      	bne.n	8009298 <HAL_ADC_ConfigChannel+0x3b0>
 8009280:	683b      	ldr	r3, [r7, #0]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	0e9b      	lsrs	r3, r3, #26
 8009286:	3301      	adds	r3, #1
 8009288:	f003 031f 	and.w	r3, r3, #31
 800928c:	2b09      	cmp	r3, #9
 800928e:	bf94      	ite	ls
 8009290:	2301      	movls	r3, #1
 8009292:	2300      	movhi	r3, #0
 8009294:	b2db      	uxtb	r3, r3
 8009296:	e012      	b.n	80092be <HAL_ADC_ConfigChannel+0x3d6>
 8009298:	683b      	ldr	r3, [r7, #0]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800929e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80092a0:	fa93 f3a3 	rbit	r3, r3
 80092a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80092a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092a8:	fab3 f383 	clz	r3, r3
 80092ac:	b2db      	uxtb	r3, r3
 80092ae:	3301      	adds	r3, #1
 80092b0:	f003 031f 	and.w	r3, r3, #31
 80092b4:	2b09      	cmp	r3, #9
 80092b6:	bf94      	ite	ls
 80092b8:	2301      	movls	r3, #1
 80092ba:	2300      	movhi	r3, #0
 80092bc:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d064      	beq.n	800938c <HAL_ADC_ConfigChannel+0x4a4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80092c2:	683b      	ldr	r3, [r7, #0]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d107      	bne.n	80092de <HAL_ADC_ConfigChannel+0x3f6>
 80092ce:	683b      	ldr	r3, [r7, #0]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	0e9b      	lsrs	r3, r3, #26
 80092d4:	3301      	adds	r3, #1
 80092d6:	069b      	lsls	r3, r3, #26
 80092d8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80092dc:	e00e      	b.n	80092fc <HAL_ADC_ConfigChannel+0x414>
 80092de:	683b      	ldr	r3, [r7, #0]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80092e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092e6:	fa93 f3a3 	rbit	r3, r3
 80092ea:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80092ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092ee:	fab3 f383 	clz	r3, r3
 80092f2:	b2db      	uxtb	r3, r3
 80092f4:	3301      	adds	r3, #1
 80092f6:	069b      	lsls	r3, r3, #26
 80092f8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80092fc:	683b      	ldr	r3, [r7, #0]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009304:	2b00      	cmp	r3, #0
 8009306:	d109      	bne.n	800931c <HAL_ADC_ConfigChannel+0x434>
 8009308:	683b      	ldr	r3, [r7, #0]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	0e9b      	lsrs	r3, r3, #26
 800930e:	3301      	adds	r3, #1
 8009310:	f003 031f 	and.w	r3, r3, #31
 8009314:	2101      	movs	r1, #1
 8009316:	fa01 f303 	lsl.w	r3, r1, r3
 800931a:	e010      	b.n	800933e <HAL_ADC_ConfigChannel+0x456>
 800931c:	683b      	ldr	r3, [r7, #0]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009324:	fa93 f3a3 	rbit	r3, r3
 8009328:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800932a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800932c:	fab3 f383 	clz	r3, r3
 8009330:	b2db      	uxtb	r3, r3
 8009332:	3301      	adds	r3, #1
 8009334:	f003 031f 	and.w	r3, r3, #31
 8009338:	2101      	movs	r1, #1
 800933a:	fa01 f303 	lsl.w	r3, r1, r3
 800933e:	ea42 0103 	orr.w	r1, r2, r3
 8009342:	683b      	ldr	r3, [r7, #0]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800934a:	2b00      	cmp	r3, #0
 800934c:	d10a      	bne.n	8009364 <HAL_ADC_ConfigChannel+0x47c>
 800934e:	683b      	ldr	r3, [r7, #0]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	0e9b      	lsrs	r3, r3, #26
 8009354:	3301      	adds	r3, #1
 8009356:	f003 021f 	and.w	r2, r3, #31
 800935a:	4613      	mov	r3, r2
 800935c:	005b      	lsls	r3, r3, #1
 800935e:	4413      	add	r3, r2
 8009360:	051b      	lsls	r3, r3, #20
 8009362:	e011      	b.n	8009388 <HAL_ADC_ConfigChannel+0x4a0>
 8009364:	683b      	ldr	r3, [r7, #0]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800936a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800936c:	fa93 f3a3 	rbit	r3, r3
 8009370:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8009372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009374:	fab3 f383 	clz	r3, r3
 8009378:	b2db      	uxtb	r3, r3
 800937a:	3301      	adds	r3, #1
 800937c:	f003 021f 	and.w	r2, r3, #31
 8009380:	4613      	mov	r3, r2
 8009382:	005b      	lsls	r3, r3, #1
 8009384:	4413      	add	r3, r2
 8009386:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8009388:	430b      	orrs	r3, r1
 800938a:	e069      	b.n	8009460 <HAL_ADC_ConfigChannel+0x578>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800938c:	683b      	ldr	r3, [r7, #0]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009394:	2b00      	cmp	r3, #0
 8009396:	d107      	bne.n	80093a8 <HAL_ADC_ConfigChannel+0x4c0>
 8009398:	683b      	ldr	r3, [r7, #0]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	0e9b      	lsrs	r3, r3, #26
 800939e:	3301      	adds	r3, #1
 80093a0:	069b      	lsls	r3, r3, #26
 80093a2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80093a6:	e00e      	b.n	80093c6 <HAL_ADC_ConfigChannel+0x4de>
 80093a8:	683b      	ldr	r3, [r7, #0]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80093ae:	6a3b      	ldr	r3, [r7, #32]
 80093b0:	fa93 f3a3 	rbit	r3, r3
 80093b4:	61fb      	str	r3, [r7, #28]
  return result;
 80093b6:	69fb      	ldr	r3, [r7, #28]
 80093b8:	fab3 f383 	clz	r3, r3
 80093bc:	b2db      	uxtb	r3, r3
 80093be:	3301      	adds	r3, #1
 80093c0:	069b      	lsls	r3, r3, #26
 80093c2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80093c6:	683b      	ldr	r3, [r7, #0]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d109      	bne.n	80093e6 <HAL_ADC_ConfigChannel+0x4fe>
 80093d2:	683b      	ldr	r3, [r7, #0]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	0e9b      	lsrs	r3, r3, #26
 80093d8:	3301      	adds	r3, #1
 80093da:	f003 031f 	and.w	r3, r3, #31
 80093de:	2101      	movs	r1, #1
 80093e0:	fa01 f303 	lsl.w	r3, r1, r3
 80093e4:	e010      	b.n	8009408 <HAL_ADC_ConfigChannel+0x520>
 80093e6:	683b      	ldr	r3, [r7, #0]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80093ec:	69bb      	ldr	r3, [r7, #24]
 80093ee:	fa93 f3a3 	rbit	r3, r3
 80093f2:	617b      	str	r3, [r7, #20]
  return result;
 80093f4:	697b      	ldr	r3, [r7, #20]
 80093f6:	fab3 f383 	clz	r3, r3
 80093fa:	b2db      	uxtb	r3, r3
 80093fc:	3301      	adds	r3, #1
 80093fe:	f003 031f 	and.w	r3, r3, #31
 8009402:	2101      	movs	r1, #1
 8009404:	fa01 f303 	lsl.w	r3, r1, r3
 8009408:	ea42 0103 	orr.w	r1, r2, r3
 800940c:	683b      	ldr	r3, [r7, #0]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009414:	2b00      	cmp	r3, #0
 8009416:	d10d      	bne.n	8009434 <HAL_ADC_ConfigChannel+0x54c>
 8009418:	683b      	ldr	r3, [r7, #0]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	0e9b      	lsrs	r3, r3, #26
 800941e:	3301      	adds	r3, #1
 8009420:	f003 021f 	and.w	r2, r3, #31
 8009424:	4613      	mov	r3, r2
 8009426:	005b      	lsls	r3, r3, #1
 8009428:	4413      	add	r3, r2
 800942a:	3b1e      	subs	r3, #30
 800942c:	051b      	lsls	r3, r3, #20
 800942e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8009432:	e014      	b.n	800945e <HAL_ADC_ConfigChannel+0x576>
 8009434:	683b      	ldr	r3, [r7, #0]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800943a:	693b      	ldr	r3, [r7, #16]
 800943c:	fa93 f3a3 	rbit	r3, r3
 8009440:	60fb      	str	r3, [r7, #12]
  return result;
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	fab3 f383 	clz	r3, r3
 8009448:	b2db      	uxtb	r3, r3
 800944a:	3301      	adds	r3, #1
 800944c:	f003 021f 	and.w	r2, r3, #31
 8009450:	4613      	mov	r3, r2
 8009452:	005b      	lsls	r3, r3, #1
 8009454:	4413      	add	r3, r2
 8009456:	3b1e      	subs	r3, #30
 8009458:	051b      	lsls	r3, r3, #20
 800945a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800945e:	430b      	orrs	r3, r1
 8009460:	683a      	ldr	r2, [r7, #0]
 8009462:	6892      	ldr	r2, [r2, #8]
 8009464:	4619      	mov	r1, r3
 8009466:	f7ff f8a6 	bl	80085b6 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800946a:	683b      	ldr	r3, [r7, #0]
 800946c:	681a      	ldr	r2, [r3, #0]
 800946e:	4b28      	ldr	r3, [pc, #160]	; (8009510 <HAL_ADC_ConfigChannel+0x628>)
 8009470:	4013      	ands	r3, r2
 8009472:	2b00      	cmp	r3, #0
 8009474:	d07c      	beq.n	8009570 <HAL_ADC_ConfigChannel+0x688>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8009476:	4827      	ldr	r0, [pc, #156]	; (8009514 <HAL_ADC_ConfigChannel+0x62c>)
 8009478:	f7fe fff2 	bl	8008460 <LL_ADC_GetCommonPathInternalCh>
 800947c:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8009480:	683b      	ldr	r3, [r7, #0]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	4a24      	ldr	r2, [pc, #144]	; (8009518 <HAL_ADC_ConfigChannel+0x630>)
 8009486:	4293      	cmp	r3, r2
 8009488:	d126      	bne.n	80094d8 <HAL_ADC_ConfigChannel+0x5f0>
 800948a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800948e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009492:	2b00      	cmp	r3, #0
 8009494:	d120      	bne.n	80094d8 <HAL_ADC_ConfigChannel+0x5f0>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	4a20      	ldr	r2, [pc, #128]	; (800951c <HAL_ADC_ConfigChannel+0x634>)
 800949c:	4293      	cmp	r3, r2
 800949e:	d167      	bne.n	8009570 <HAL_ADC_ConfigChannel+0x688>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80094a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80094a4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80094a8:	4619      	mov	r1, r3
 80094aa:	481a      	ldr	r0, [pc, #104]	; (8009514 <HAL_ADC_ConfigChannel+0x62c>)
 80094ac:	f7fe ffc5 	bl	800843a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80094b0:	4b1b      	ldr	r3, [pc, #108]	; (8009520 <HAL_ADC_ConfigChannel+0x638>)
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	099b      	lsrs	r3, r3, #6
 80094b6:	4a1b      	ldr	r2, [pc, #108]	; (8009524 <HAL_ADC_ConfigChannel+0x63c>)
 80094b8:	fba2 2303 	umull	r2, r3, r2, r3
 80094bc:	099a      	lsrs	r2, r3, #6
 80094be:	4613      	mov	r3, r2
 80094c0:	005b      	lsls	r3, r3, #1
 80094c2:	4413      	add	r3, r2
 80094c4:	009b      	lsls	r3, r3, #2
 80094c6:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80094c8:	e002      	b.n	80094d0 <HAL_ADC_ConfigChannel+0x5e8>
          {
            wait_loop_index--;
 80094ca:	68bb      	ldr	r3, [r7, #8]
 80094cc:	3b01      	subs	r3, #1
 80094ce:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80094d0:	68bb      	ldr	r3, [r7, #8]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d1f9      	bne.n	80094ca <HAL_ADC_ConfigChannel+0x5e2>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80094d6:	e04b      	b.n	8009570 <HAL_ADC_ConfigChannel+0x688>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80094d8:	683b      	ldr	r3, [r7, #0]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	4a12      	ldr	r2, [pc, #72]	; (8009528 <HAL_ADC_ConfigChannel+0x640>)
 80094de:	4293      	cmp	r3, r2
 80094e0:	d124      	bne.n	800952c <HAL_ADC_ConfigChannel+0x644>
 80094e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80094e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d11e      	bne.n	800952c <HAL_ADC_ConfigChannel+0x644>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	4a0a      	ldr	r2, [pc, #40]	; (800951c <HAL_ADC_ConfigChannel+0x634>)
 80094f4:	4293      	cmp	r3, r2
 80094f6:	d13b      	bne.n	8009570 <HAL_ADC_ConfigChannel+0x688>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80094f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80094fc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009500:	4619      	mov	r1, r3
 8009502:	4804      	ldr	r0, [pc, #16]	; (8009514 <HAL_ADC_ConfigChannel+0x62c>)
 8009504:	f7fe ff99 	bl	800843a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8009508:	e032      	b.n	8009570 <HAL_ADC_ConfigChannel+0x688>
 800950a:	bf00      	nop
 800950c:	407f0000 	.word	0x407f0000
 8009510:	80080000 	.word	0x80080000
 8009514:	50040300 	.word	0x50040300
 8009518:	c7520000 	.word	0xc7520000
 800951c:	50040000 	.word	0x50040000
 8009520:	20000000 	.word	0x20000000
 8009524:	053e2d63 	.word	0x053e2d63
 8009528:	cb840000 	.word	0xcb840000
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800952c:	683b      	ldr	r3, [r7, #0]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	4a14      	ldr	r2, [pc, #80]	; (8009584 <HAL_ADC_ConfigChannel+0x69c>)
 8009532:	4293      	cmp	r3, r2
 8009534:	d11c      	bne.n	8009570 <HAL_ADC_ConfigChannel+0x688>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8009536:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800953a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800953e:	2b00      	cmp	r3, #0
 8009540:	d116      	bne.n	8009570 <HAL_ADC_ConfigChannel+0x688>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	4a10      	ldr	r2, [pc, #64]	; (8009588 <HAL_ADC_ConfigChannel+0x6a0>)
 8009548:	4293      	cmp	r3, r2
 800954a:	d111      	bne.n	8009570 <HAL_ADC_ConfigChannel+0x688>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800954c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009550:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009554:	4619      	mov	r1, r3
 8009556:	480d      	ldr	r0, [pc, #52]	; (800958c <HAL_ADC_ConfigChannel+0x6a4>)
 8009558:	f7fe ff6f 	bl	800843a <LL_ADC_SetCommonPathInternalCh>
 800955c:	e008      	b.n	8009570 <HAL_ADC_ConfigChannel+0x688>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009562:	f043 0220 	orr.w	r2, r3, #32
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800956a:	2301      	movs	r3, #1
 800956c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	2200      	movs	r2, #0
 8009574:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8009578:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 800957c:	4618      	mov	r0, r3
 800957e:	3798      	adds	r7, #152	; 0x98
 8009580:	46bd      	mov	sp, r7
 8009582:	bd80      	pop	{r7, pc}
 8009584:	80000001 	.word	0x80000001
 8009588:	50040000 	.word	0x50040000
 800958c:	50040300 	.word	0x50040300

08009590 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8009590:	b580      	push	{r7, lr}
 8009592:	b084      	sub	sp, #16
 8009594:	af00      	add	r7, sp, #0
 8009596:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	4618      	mov	r0, r3
 800959e:	f7ff f8b9 	bl	8008714 <LL_ADC_IsEnabled>
 80095a2:	4603      	mov	r3, r0
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d146      	bne.n	8009636 <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	689a      	ldr	r2, [r3, #8]
 80095ae:	4b24      	ldr	r3, [pc, #144]	; (8009640 <ADC_Enable+0xb0>)
 80095b0:	4013      	ands	r3, r2
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d00d      	beq.n	80095d2 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095ba:	f043 0210 	orr.w	r2, r3, #16
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095c6:	f043 0201 	orr.w	r2, r3, #1
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80095ce:	2301      	movs	r3, #1
 80095d0:	e032      	b.n	8009638 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	4618      	mov	r0, r3
 80095d8:	f7ff f888 	bl	80086ec <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80095dc:	f7fe feec 	bl	80083b8 <HAL_GetTick>
 80095e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80095e2:	e021      	b.n	8009628 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	4618      	mov	r0, r3
 80095ea:	f7ff f893 	bl	8008714 <LL_ADC_IsEnabled>
 80095ee:	4603      	mov	r3, r0
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d104      	bne.n	80095fe <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	4618      	mov	r0, r3
 80095fa:	f7ff f877 	bl	80086ec <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80095fe:	f7fe fedb 	bl	80083b8 <HAL_GetTick>
 8009602:	4602      	mov	r2, r0
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	1ad3      	subs	r3, r2, r3
 8009608:	2b02      	cmp	r3, #2
 800960a:	d90d      	bls.n	8009628 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009610:	f043 0210 	orr.w	r2, r3, #16
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800961c:	f043 0201 	orr.w	r2, r3, #1
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8009624:	2301      	movs	r3, #1
 8009626:	e007      	b.n	8009638 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	f003 0301 	and.w	r3, r3, #1
 8009632:	2b01      	cmp	r3, #1
 8009634:	d1d6      	bne.n	80095e4 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8009636:	2300      	movs	r3, #0
}
 8009638:	4618      	mov	r0, r3
 800963a:	3710      	adds	r7, #16
 800963c:	46bd      	mov	sp, r7
 800963e:	bd80      	pop	{r7, pc}
 8009640:	8000003f 	.word	0x8000003f

08009644 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8009644:	b580      	push	{r7, lr}
 8009646:	b084      	sub	sp, #16
 8009648:	af00      	add	r7, sp, #0
 800964a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009650:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009656:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800965a:	2b00      	cmp	r3, #0
 800965c:	d14b      	bne.n	80096f6 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009662:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	f003 0308 	and.w	r3, r3, #8
 8009674:	2b00      	cmp	r3, #0
 8009676:	d021      	beq.n	80096bc <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	4618      	mov	r0, r3
 800967e:	f7fe ff4b 	bl	8008518 <LL_ADC_REG_IsTriggerSourceSWStart>
 8009682:	4603      	mov	r3, r0
 8009684:	2b00      	cmp	r3, #0
 8009686:	d032      	beq.n	80096ee <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	68db      	ldr	r3, [r3, #12]
 800968e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009692:	2b00      	cmp	r3, #0
 8009694:	d12b      	bne.n	80096ee <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800969a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d11f      	bne.n	80096ee <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096b2:	f043 0201 	orr.w	r2, r3, #1
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	655a      	str	r2, [r3, #84]	; 0x54
 80096ba:	e018      	b.n	80096ee <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	68db      	ldr	r3, [r3, #12]
 80096c2:	f003 0302 	and.w	r3, r3, #2
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d111      	bne.n	80096ee <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d105      	bne.n	80096ee <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096e6:	f043 0201 	orr.w	r2, r3, #1
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80096ee:	68f8      	ldr	r0, [r7, #12]
 80096f0:	f7f8 fd30 	bl	8002154 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80096f4:	e00e      	b.n	8009714 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096fa:	f003 0310 	and.w	r3, r3, #16
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d003      	beq.n	800970a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8009702:	68f8      	ldr	r0, [r7, #12]
 8009704:	f7ff fbe6 	bl	8008ed4 <HAL_ADC_ErrorCallback>
}
 8009708:	e004      	b.n	8009714 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800970e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009710:	6878      	ldr	r0, [r7, #4]
 8009712:	4798      	blx	r3
}
 8009714:	bf00      	nop
 8009716:	3710      	adds	r7, #16
 8009718:	46bd      	mov	sp, r7
 800971a:	bd80      	pop	{r7, pc}

0800971c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800971c:	b580      	push	{r7, lr}
 800971e:	b084      	sub	sp, #16
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009728:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800972a:	68f8      	ldr	r0, [r7, #12]
 800972c:	f7ff fbbe 	bl	8008eac <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8009730:	bf00      	nop
 8009732:	3710      	adds	r7, #16
 8009734:	46bd      	mov	sp, r7
 8009736:	bd80      	pop	{r7, pc}

08009738 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8009738:	b580      	push	{r7, lr}
 800973a:	b084      	sub	sp, #16
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009744:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800974a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009756:	f043 0204 	orr.w	r2, r3, #4
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800975e:	68f8      	ldr	r0, [r7, #12]
 8009760:	f7ff fbb8 	bl	8008ed4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8009764:	bf00      	nop
 8009766:	3710      	adds	r7, #16
 8009768:	46bd      	mov	sp, r7
 800976a:	bd80      	pop	{r7, pc}

0800976c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800976c:	b480      	push	{r7}
 800976e:	b083      	sub	sp, #12
 8009770:	af00      	add	r7, sp, #0
 8009772:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8009774:	bf00      	nop
 8009776:	370c      	adds	r7, #12
 8009778:	46bd      	mov	sp, r7
 800977a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977e:	4770      	bx	lr

08009780 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8009780:	b480      	push	{r7}
 8009782:	b083      	sub	sp, #12
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8009788:	bf00      	nop
 800978a:	370c      	adds	r7, #12
 800978c:	46bd      	mov	sp, r7
 800978e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009792:	4770      	bx	lr

08009794 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8009794:	b480      	push	{r7}
 8009796:	b083      	sub	sp, #12
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800979c:	bf00      	nop
 800979e:	370c      	adds	r7, #12
 80097a0:	46bd      	mov	sp, r7
 80097a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a6:	4770      	bx	lr

080097a8 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80097a8:	b480      	push	{r7}
 80097aa:	b083      	sub	sp, #12
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80097b0:	bf00      	nop
 80097b2:	370c      	adds	r7, #12
 80097b4:	46bd      	mov	sp, r7
 80097b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ba:	4770      	bx	lr

080097bc <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80097bc:	b480      	push	{r7}
 80097be:	b083      	sub	sp, #12
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80097c4:	bf00      	nop
 80097c6:	370c      	adds	r7, #12
 80097c8:	46bd      	mov	sp, r7
 80097ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ce:	4770      	bx	lr

080097d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80097d0:	b480      	push	{r7}
 80097d2:	b085      	sub	sp, #20
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	f003 0307 	and.w	r3, r3, #7
 80097de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80097e0:	4b0c      	ldr	r3, [pc, #48]	; (8009814 <__NVIC_SetPriorityGrouping+0x44>)
 80097e2:	68db      	ldr	r3, [r3, #12]
 80097e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80097e6:	68ba      	ldr	r2, [r7, #8]
 80097e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80097ec:	4013      	ands	r3, r2
 80097ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80097f4:	68bb      	ldr	r3, [r7, #8]
 80097f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80097f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80097fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009800:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009802:	4a04      	ldr	r2, [pc, #16]	; (8009814 <__NVIC_SetPriorityGrouping+0x44>)
 8009804:	68bb      	ldr	r3, [r7, #8]
 8009806:	60d3      	str	r3, [r2, #12]
}
 8009808:	bf00      	nop
 800980a:	3714      	adds	r7, #20
 800980c:	46bd      	mov	sp, r7
 800980e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009812:	4770      	bx	lr
 8009814:	e000ed00 	.word	0xe000ed00

08009818 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8009818:	b480      	push	{r7}
 800981a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800981c:	4b04      	ldr	r3, [pc, #16]	; (8009830 <__NVIC_GetPriorityGrouping+0x18>)
 800981e:	68db      	ldr	r3, [r3, #12]
 8009820:	0a1b      	lsrs	r3, r3, #8
 8009822:	f003 0307 	and.w	r3, r3, #7
}
 8009826:	4618      	mov	r0, r3
 8009828:	46bd      	mov	sp, r7
 800982a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982e:	4770      	bx	lr
 8009830:	e000ed00 	.word	0xe000ed00

08009834 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009834:	b480      	push	{r7}
 8009836:	b083      	sub	sp, #12
 8009838:	af00      	add	r7, sp, #0
 800983a:	4603      	mov	r3, r0
 800983c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800983e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009842:	2b00      	cmp	r3, #0
 8009844:	db0b      	blt.n	800985e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009846:	79fb      	ldrb	r3, [r7, #7]
 8009848:	f003 021f 	and.w	r2, r3, #31
 800984c:	4907      	ldr	r1, [pc, #28]	; (800986c <__NVIC_EnableIRQ+0x38>)
 800984e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009852:	095b      	lsrs	r3, r3, #5
 8009854:	2001      	movs	r0, #1
 8009856:	fa00 f202 	lsl.w	r2, r0, r2
 800985a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800985e:	bf00      	nop
 8009860:	370c      	adds	r7, #12
 8009862:	46bd      	mov	sp, r7
 8009864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009868:	4770      	bx	lr
 800986a:	bf00      	nop
 800986c:	e000e100 	.word	0xe000e100

08009870 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009870:	b480      	push	{r7}
 8009872:	b083      	sub	sp, #12
 8009874:	af00      	add	r7, sp, #0
 8009876:	4603      	mov	r3, r0
 8009878:	6039      	str	r1, [r7, #0]
 800987a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800987c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009880:	2b00      	cmp	r3, #0
 8009882:	db0a      	blt.n	800989a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009884:	683b      	ldr	r3, [r7, #0]
 8009886:	b2da      	uxtb	r2, r3
 8009888:	490c      	ldr	r1, [pc, #48]	; (80098bc <__NVIC_SetPriority+0x4c>)
 800988a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800988e:	0112      	lsls	r2, r2, #4
 8009890:	b2d2      	uxtb	r2, r2
 8009892:	440b      	add	r3, r1
 8009894:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8009898:	e00a      	b.n	80098b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800989a:	683b      	ldr	r3, [r7, #0]
 800989c:	b2da      	uxtb	r2, r3
 800989e:	4908      	ldr	r1, [pc, #32]	; (80098c0 <__NVIC_SetPriority+0x50>)
 80098a0:	79fb      	ldrb	r3, [r7, #7]
 80098a2:	f003 030f 	and.w	r3, r3, #15
 80098a6:	3b04      	subs	r3, #4
 80098a8:	0112      	lsls	r2, r2, #4
 80098aa:	b2d2      	uxtb	r2, r2
 80098ac:	440b      	add	r3, r1
 80098ae:	761a      	strb	r2, [r3, #24]
}
 80098b0:	bf00      	nop
 80098b2:	370c      	adds	r7, #12
 80098b4:	46bd      	mov	sp, r7
 80098b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ba:	4770      	bx	lr
 80098bc:	e000e100 	.word	0xe000e100
 80098c0:	e000ed00 	.word	0xe000ed00

080098c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80098c4:	b480      	push	{r7}
 80098c6:	b089      	sub	sp, #36	; 0x24
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	60f8      	str	r0, [r7, #12]
 80098cc:	60b9      	str	r1, [r7, #8]
 80098ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	f003 0307 	and.w	r3, r3, #7
 80098d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80098d8:	69fb      	ldr	r3, [r7, #28]
 80098da:	f1c3 0307 	rsb	r3, r3, #7
 80098de:	2b04      	cmp	r3, #4
 80098e0:	bf28      	it	cs
 80098e2:	2304      	movcs	r3, #4
 80098e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80098e6:	69fb      	ldr	r3, [r7, #28]
 80098e8:	3304      	adds	r3, #4
 80098ea:	2b06      	cmp	r3, #6
 80098ec:	d902      	bls.n	80098f4 <NVIC_EncodePriority+0x30>
 80098ee:	69fb      	ldr	r3, [r7, #28]
 80098f0:	3b03      	subs	r3, #3
 80098f2:	e000      	b.n	80098f6 <NVIC_EncodePriority+0x32>
 80098f4:	2300      	movs	r3, #0
 80098f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80098f8:	f04f 32ff 	mov.w	r2, #4294967295
 80098fc:	69bb      	ldr	r3, [r7, #24]
 80098fe:	fa02 f303 	lsl.w	r3, r2, r3
 8009902:	43da      	mvns	r2, r3
 8009904:	68bb      	ldr	r3, [r7, #8]
 8009906:	401a      	ands	r2, r3
 8009908:	697b      	ldr	r3, [r7, #20]
 800990a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800990c:	f04f 31ff 	mov.w	r1, #4294967295
 8009910:	697b      	ldr	r3, [r7, #20]
 8009912:	fa01 f303 	lsl.w	r3, r1, r3
 8009916:	43d9      	mvns	r1, r3
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800991c:	4313      	orrs	r3, r2
         );
}
 800991e:	4618      	mov	r0, r3
 8009920:	3724      	adds	r7, #36	; 0x24
 8009922:	46bd      	mov	sp, r7
 8009924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009928:	4770      	bx	lr
	...

0800992c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800992c:	b580      	push	{r7, lr}
 800992e:	b082      	sub	sp, #8
 8009930:	af00      	add	r7, sp, #0
 8009932:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	3b01      	subs	r3, #1
 8009938:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800993c:	d301      	bcc.n	8009942 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800993e:	2301      	movs	r3, #1
 8009940:	e00f      	b.n	8009962 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009942:	4a0a      	ldr	r2, [pc, #40]	; (800996c <SysTick_Config+0x40>)
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	3b01      	subs	r3, #1
 8009948:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800994a:	210f      	movs	r1, #15
 800994c:	f04f 30ff 	mov.w	r0, #4294967295
 8009950:	f7ff ff8e 	bl	8009870 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009954:	4b05      	ldr	r3, [pc, #20]	; (800996c <SysTick_Config+0x40>)
 8009956:	2200      	movs	r2, #0
 8009958:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800995a:	4b04      	ldr	r3, [pc, #16]	; (800996c <SysTick_Config+0x40>)
 800995c:	2207      	movs	r2, #7
 800995e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009960:	2300      	movs	r3, #0
}
 8009962:	4618      	mov	r0, r3
 8009964:	3708      	adds	r7, #8
 8009966:	46bd      	mov	sp, r7
 8009968:	bd80      	pop	{r7, pc}
 800996a:	bf00      	nop
 800996c:	e000e010 	.word	0xe000e010

08009970 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009970:	b580      	push	{r7, lr}
 8009972:	b082      	sub	sp, #8
 8009974:	af00      	add	r7, sp, #0
 8009976:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009978:	6878      	ldr	r0, [r7, #4]
 800997a:	f7ff ff29 	bl	80097d0 <__NVIC_SetPriorityGrouping>
}
 800997e:	bf00      	nop
 8009980:	3708      	adds	r7, #8
 8009982:	46bd      	mov	sp, r7
 8009984:	bd80      	pop	{r7, pc}

08009986 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009986:	b580      	push	{r7, lr}
 8009988:	b086      	sub	sp, #24
 800998a:	af00      	add	r7, sp, #0
 800998c:	4603      	mov	r3, r0
 800998e:	60b9      	str	r1, [r7, #8]
 8009990:	607a      	str	r2, [r7, #4]
 8009992:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8009994:	2300      	movs	r3, #0
 8009996:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8009998:	f7ff ff3e 	bl	8009818 <__NVIC_GetPriorityGrouping>
 800999c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800999e:	687a      	ldr	r2, [r7, #4]
 80099a0:	68b9      	ldr	r1, [r7, #8]
 80099a2:	6978      	ldr	r0, [r7, #20]
 80099a4:	f7ff ff8e 	bl	80098c4 <NVIC_EncodePriority>
 80099a8:	4602      	mov	r2, r0
 80099aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80099ae:	4611      	mov	r1, r2
 80099b0:	4618      	mov	r0, r3
 80099b2:	f7ff ff5d 	bl	8009870 <__NVIC_SetPriority>
}
 80099b6:	bf00      	nop
 80099b8:	3718      	adds	r7, #24
 80099ba:	46bd      	mov	sp, r7
 80099bc:	bd80      	pop	{r7, pc}

080099be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80099be:	b580      	push	{r7, lr}
 80099c0:	b082      	sub	sp, #8
 80099c2:	af00      	add	r7, sp, #0
 80099c4:	4603      	mov	r3, r0
 80099c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80099c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80099cc:	4618      	mov	r0, r3
 80099ce:	f7ff ff31 	bl	8009834 <__NVIC_EnableIRQ>
}
 80099d2:	bf00      	nop
 80099d4:	3708      	adds	r7, #8
 80099d6:	46bd      	mov	sp, r7
 80099d8:	bd80      	pop	{r7, pc}

080099da <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80099da:	b580      	push	{r7, lr}
 80099dc:	b082      	sub	sp, #8
 80099de:	af00      	add	r7, sp, #0
 80099e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80099e2:	6878      	ldr	r0, [r7, #4]
 80099e4:	f7ff ffa2 	bl	800992c <SysTick_Config>
 80099e8:	4603      	mov	r3, r0
}
 80099ea:	4618      	mov	r0, r3
 80099ec:	3708      	adds	r7, #8
 80099ee:	46bd      	mov	sp, r7
 80099f0:	bd80      	pop	{r7, pc}
	...

080099f4 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80099f4:	b480      	push	{r7}
 80099f6:	b085      	sub	sp, #20
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d101      	bne.n	8009a06 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8009a02:	2301      	movs	r3, #1
 8009a04:	e098      	b.n	8009b38 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	461a      	mov	r2, r3
 8009a0c:	4b4d      	ldr	r3, [pc, #308]	; (8009b44 <HAL_DMA_Init+0x150>)
 8009a0e:	429a      	cmp	r2, r3
 8009a10:	d80f      	bhi.n	8009a32 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	461a      	mov	r2, r3
 8009a18:	4b4b      	ldr	r3, [pc, #300]	; (8009b48 <HAL_DMA_Init+0x154>)
 8009a1a:	4413      	add	r3, r2
 8009a1c:	4a4b      	ldr	r2, [pc, #300]	; (8009b4c <HAL_DMA_Init+0x158>)
 8009a1e:	fba2 2303 	umull	r2, r3, r2, r3
 8009a22:	091b      	lsrs	r3, r3, #4
 8009a24:	009a      	lsls	r2, r3, #2
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	4a48      	ldr	r2, [pc, #288]	; (8009b50 <HAL_DMA_Init+0x15c>)
 8009a2e:	641a      	str	r2, [r3, #64]	; 0x40
 8009a30:	e00e      	b.n	8009a50 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	461a      	mov	r2, r3
 8009a38:	4b46      	ldr	r3, [pc, #280]	; (8009b54 <HAL_DMA_Init+0x160>)
 8009a3a:	4413      	add	r3, r2
 8009a3c:	4a43      	ldr	r2, [pc, #268]	; (8009b4c <HAL_DMA_Init+0x158>)
 8009a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8009a42:	091b      	lsrs	r3, r3, #4
 8009a44:	009a      	lsls	r2, r3, #2
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	4a42      	ldr	r2, [pc, #264]	; (8009b58 <HAL_DMA_Init+0x164>)
 8009a4e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	2202      	movs	r2, #2
 8009a54:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8009a66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a6a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8009a74:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	691b      	ldr	r3, [r3, #16]
 8009a7a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009a80:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	699b      	ldr	r3, [r3, #24]
 8009a86:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009a8c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	6a1b      	ldr	r3, [r3, #32]
 8009a92:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8009a94:	68fa      	ldr	r2, [r7, #12]
 8009a96:	4313      	orrs	r3, r2
 8009a98:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	68fa      	ldr	r2, [r7, #12]
 8009aa0:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	689b      	ldr	r3, [r3, #8]
 8009aa6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009aaa:	d039      	beq.n	8009b20 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ab0:	4a27      	ldr	r2, [pc, #156]	; (8009b50 <HAL_DMA_Init+0x15c>)
 8009ab2:	4293      	cmp	r3, r2
 8009ab4:	d11a      	bne.n	8009aec <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8009ab6:	4b29      	ldr	r3, [pc, #164]	; (8009b5c <HAL_DMA_Init+0x168>)
 8009ab8:	681a      	ldr	r2, [r3, #0]
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009abe:	f003 031c 	and.w	r3, r3, #28
 8009ac2:	210f      	movs	r1, #15
 8009ac4:	fa01 f303 	lsl.w	r3, r1, r3
 8009ac8:	43db      	mvns	r3, r3
 8009aca:	4924      	ldr	r1, [pc, #144]	; (8009b5c <HAL_DMA_Init+0x168>)
 8009acc:	4013      	ands	r3, r2
 8009ace:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8009ad0:	4b22      	ldr	r3, [pc, #136]	; (8009b5c <HAL_DMA_Init+0x168>)
 8009ad2:	681a      	ldr	r2, [r3, #0]
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	6859      	ldr	r1, [r3, #4]
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009adc:	f003 031c 	and.w	r3, r3, #28
 8009ae0:	fa01 f303 	lsl.w	r3, r1, r3
 8009ae4:	491d      	ldr	r1, [pc, #116]	; (8009b5c <HAL_DMA_Init+0x168>)
 8009ae6:	4313      	orrs	r3, r2
 8009ae8:	600b      	str	r3, [r1, #0]
 8009aea:	e019      	b.n	8009b20 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8009aec:	4b1c      	ldr	r3, [pc, #112]	; (8009b60 <HAL_DMA_Init+0x16c>)
 8009aee:	681a      	ldr	r2, [r3, #0]
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009af4:	f003 031c 	and.w	r3, r3, #28
 8009af8:	210f      	movs	r1, #15
 8009afa:	fa01 f303 	lsl.w	r3, r1, r3
 8009afe:	43db      	mvns	r3, r3
 8009b00:	4917      	ldr	r1, [pc, #92]	; (8009b60 <HAL_DMA_Init+0x16c>)
 8009b02:	4013      	ands	r3, r2
 8009b04:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8009b06:	4b16      	ldr	r3, [pc, #88]	; (8009b60 <HAL_DMA_Init+0x16c>)
 8009b08:	681a      	ldr	r2, [r3, #0]
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	6859      	ldr	r1, [r3, #4]
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b12:	f003 031c 	and.w	r3, r3, #28
 8009b16:	fa01 f303 	lsl.w	r3, r1, r3
 8009b1a:	4911      	ldr	r1, [pc, #68]	; (8009b60 <HAL_DMA_Init+0x16c>)
 8009b1c:	4313      	orrs	r3, r2
 8009b1e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	2200      	movs	r2, #0
 8009b24:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	2201      	movs	r2, #1
 8009b2a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	2200      	movs	r2, #0
 8009b32:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8009b36:	2300      	movs	r3, #0
}
 8009b38:	4618      	mov	r0, r3
 8009b3a:	3714      	adds	r7, #20
 8009b3c:	46bd      	mov	sp, r7
 8009b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b42:	4770      	bx	lr
 8009b44:	40020407 	.word	0x40020407
 8009b48:	bffdfff8 	.word	0xbffdfff8
 8009b4c:	cccccccd 	.word	0xcccccccd
 8009b50:	40020000 	.word	0x40020000
 8009b54:	bffdfbf8 	.word	0xbffdfbf8
 8009b58:	40020400 	.word	0x40020400
 8009b5c:	400200a8 	.word	0x400200a8
 8009b60:	400204a8 	.word	0x400204a8

08009b64 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009b64:	b580      	push	{r7, lr}
 8009b66:	b086      	sub	sp, #24
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	60f8      	str	r0, [r7, #12]
 8009b6c:	60b9      	str	r1, [r7, #8]
 8009b6e:	607a      	str	r2, [r7, #4]
 8009b70:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009b72:	2300      	movs	r3, #0
 8009b74:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009b7c:	2b01      	cmp	r3, #1
 8009b7e:	d101      	bne.n	8009b84 <HAL_DMA_Start_IT+0x20>
 8009b80:	2302      	movs	r3, #2
 8009b82:	e04b      	b.n	8009c1c <HAL_DMA_Start_IT+0xb8>
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	2201      	movs	r2, #1
 8009b88:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8009b92:	b2db      	uxtb	r3, r3
 8009b94:	2b01      	cmp	r3, #1
 8009b96:	d13a      	bne.n	8009c0e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	2202      	movs	r2, #2
 8009b9c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	2200      	movs	r2, #0
 8009ba4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	681a      	ldr	r2, [r3, #0]
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	f022 0201 	bic.w	r2, r2, #1
 8009bb4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8009bb6:	683b      	ldr	r3, [r7, #0]
 8009bb8:	687a      	ldr	r2, [r7, #4]
 8009bba:	68b9      	ldr	r1, [r7, #8]
 8009bbc:	68f8      	ldr	r0, [r7, #12]
 8009bbe:	f000 f8e0 	bl	8009d82 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d008      	beq.n	8009bdc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	681a      	ldr	r2, [r3, #0]
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	f042 020e 	orr.w	r2, r2, #14
 8009bd8:	601a      	str	r2, [r3, #0]
 8009bda:	e00f      	b.n	8009bfc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	681a      	ldr	r2, [r3, #0]
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	f022 0204 	bic.w	r2, r2, #4
 8009bea:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	681a      	ldr	r2, [r3, #0]
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	f042 020a 	orr.w	r2, r2, #10
 8009bfa:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	681a      	ldr	r2, [r3, #0]
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	f042 0201 	orr.w	r2, r2, #1
 8009c0a:	601a      	str	r2, [r3, #0]
 8009c0c:	e005      	b.n	8009c1a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	2200      	movs	r2, #0
 8009c12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8009c16:	2302      	movs	r3, #2
 8009c18:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8009c1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	3718      	adds	r7, #24
 8009c20:	46bd      	mov	sp, r7
 8009c22:	bd80      	pop	{r7, pc}

08009c24 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8009c24:	b580      	push	{r7, lr}
 8009c26:	b084      	sub	sp, #16
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c40:	f003 031c 	and.w	r3, r3, #28
 8009c44:	2204      	movs	r2, #4
 8009c46:	409a      	lsls	r2, r3
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	4013      	ands	r3, r2
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d026      	beq.n	8009c9e <HAL_DMA_IRQHandler+0x7a>
 8009c50:	68bb      	ldr	r3, [r7, #8]
 8009c52:	f003 0304 	and.w	r3, r3, #4
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d021      	beq.n	8009c9e <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	f003 0320 	and.w	r3, r3, #32
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d107      	bne.n	8009c78 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	681a      	ldr	r2, [r3, #0]
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	f022 0204 	bic.w	r2, r2, #4
 8009c76:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c7c:	f003 021c 	and.w	r2, r3, #28
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c84:	2104      	movs	r1, #4
 8009c86:	fa01 f202 	lsl.w	r2, r1, r2
 8009c8a:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d071      	beq.n	8009d78 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c98:	6878      	ldr	r0, [r7, #4]
 8009c9a:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8009c9c:	e06c      	b.n	8009d78 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ca2:	f003 031c 	and.w	r3, r3, #28
 8009ca6:	2202      	movs	r2, #2
 8009ca8:	409a      	lsls	r2, r3
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	4013      	ands	r3, r2
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d02e      	beq.n	8009d10 <HAL_DMA_IRQHandler+0xec>
 8009cb2:	68bb      	ldr	r3, [r7, #8]
 8009cb4:	f003 0302 	and.w	r3, r3, #2
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d029      	beq.n	8009d10 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	f003 0320 	and.w	r3, r3, #32
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d10b      	bne.n	8009ce2 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	681a      	ldr	r2, [r3, #0]
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	f022 020a 	bic.w	r2, r2, #10
 8009cd8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	2201      	movs	r2, #1
 8009cde:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ce6:	f003 021c 	and.w	r2, r3, #28
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cee:	2102      	movs	r1, #2
 8009cf0:	fa01 f202 	lsl.w	r2, r1, r2
 8009cf4:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	2200      	movs	r2, #0
 8009cfa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d038      	beq.n	8009d78 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d0a:	6878      	ldr	r0, [r7, #4]
 8009d0c:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8009d0e:	e033      	b.n	8009d78 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d14:	f003 031c 	and.w	r3, r3, #28
 8009d18:	2208      	movs	r2, #8
 8009d1a:	409a      	lsls	r2, r3
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	4013      	ands	r3, r2
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d02a      	beq.n	8009d7a <HAL_DMA_IRQHandler+0x156>
 8009d24:	68bb      	ldr	r3, [r7, #8]
 8009d26:	f003 0308 	and.w	r3, r3, #8
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d025      	beq.n	8009d7a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	681a      	ldr	r2, [r3, #0]
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	f022 020e 	bic.w	r2, r2, #14
 8009d3c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d42:	f003 021c 	and.w	r2, r3, #28
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d4a:	2101      	movs	r1, #1
 8009d4c:	fa01 f202 	lsl.w	r2, r1, r2
 8009d50:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	2201      	movs	r2, #1
 8009d56:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	2201      	movs	r2, #1
 8009d5c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	2200      	movs	r2, #0
 8009d64:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d004      	beq.n	8009d7a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d74:	6878      	ldr	r0, [r7, #4]
 8009d76:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8009d78:	bf00      	nop
 8009d7a:	bf00      	nop
}
 8009d7c:	3710      	adds	r7, #16
 8009d7e:	46bd      	mov	sp, r7
 8009d80:	bd80      	pop	{r7, pc}

08009d82 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009d82:	b480      	push	{r7}
 8009d84:	b085      	sub	sp, #20
 8009d86:	af00      	add	r7, sp, #0
 8009d88:	60f8      	str	r0, [r7, #12]
 8009d8a:	60b9      	str	r1, [r7, #8]
 8009d8c:	607a      	str	r2, [r7, #4]
 8009d8e:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d94:	f003 021c 	and.w	r2, r3, #28
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d9c:	2101      	movs	r1, #1
 8009d9e:	fa01 f202 	lsl.w	r2, r1, r2
 8009da2:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	683a      	ldr	r2, [r7, #0]
 8009daa:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	689b      	ldr	r3, [r3, #8]
 8009db0:	2b10      	cmp	r3, #16
 8009db2:	d108      	bne.n	8009dc6 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	687a      	ldr	r2, [r7, #4]
 8009dba:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	68ba      	ldr	r2, [r7, #8]
 8009dc2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8009dc4:	e007      	b.n	8009dd6 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	68ba      	ldr	r2, [r7, #8]
 8009dcc:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	687a      	ldr	r2, [r7, #4]
 8009dd4:	60da      	str	r2, [r3, #12]
}
 8009dd6:	bf00      	nop
 8009dd8:	3714      	adds	r7, #20
 8009dda:	46bd      	mov	sp, r7
 8009ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de0:	4770      	bx	lr
	...

08009de4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009de4:	b480      	push	{r7}
 8009de6:	b087      	sub	sp, #28
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	6078      	str	r0, [r7, #4]
 8009dec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8009dee:	2300      	movs	r3, #0
 8009df0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009df2:	e154      	b.n	800a09e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8009df4:	683b      	ldr	r3, [r7, #0]
 8009df6:	681a      	ldr	r2, [r3, #0]
 8009df8:	2101      	movs	r1, #1
 8009dfa:	697b      	ldr	r3, [r7, #20]
 8009dfc:	fa01 f303 	lsl.w	r3, r1, r3
 8009e00:	4013      	ands	r3, r2
 8009e02:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	f000 8146 	beq.w	800a098 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8009e0c:	683b      	ldr	r3, [r7, #0]
 8009e0e:	685b      	ldr	r3, [r3, #4]
 8009e10:	2b01      	cmp	r3, #1
 8009e12:	d00b      	beq.n	8009e2c <HAL_GPIO_Init+0x48>
 8009e14:	683b      	ldr	r3, [r7, #0]
 8009e16:	685b      	ldr	r3, [r3, #4]
 8009e18:	2b02      	cmp	r3, #2
 8009e1a:	d007      	beq.n	8009e2c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009e1c:	683b      	ldr	r3, [r7, #0]
 8009e1e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8009e20:	2b11      	cmp	r3, #17
 8009e22:	d003      	beq.n	8009e2c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009e24:	683b      	ldr	r3, [r7, #0]
 8009e26:	685b      	ldr	r3, [r3, #4]
 8009e28:	2b12      	cmp	r3, #18
 8009e2a:	d130      	bne.n	8009e8e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	689b      	ldr	r3, [r3, #8]
 8009e30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8009e32:	697b      	ldr	r3, [r7, #20]
 8009e34:	005b      	lsls	r3, r3, #1
 8009e36:	2203      	movs	r2, #3
 8009e38:	fa02 f303 	lsl.w	r3, r2, r3
 8009e3c:	43db      	mvns	r3, r3
 8009e3e:	693a      	ldr	r2, [r7, #16]
 8009e40:	4013      	ands	r3, r2
 8009e42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8009e44:	683b      	ldr	r3, [r7, #0]
 8009e46:	68da      	ldr	r2, [r3, #12]
 8009e48:	697b      	ldr	r3, [r7, #20]
 8009e4a:	005b      	lsls	r3, r3, #1
 8009e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8009e50:	693a      	ldr	r2, [r7, #16]
 8009e52:	4313      	orrs	r3, r2
 8009e54:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	693a      	ldr	r2, [r7, #16]
 8009e5a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	685b      	ldr	r3, [r3, #4]
 8009e60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8009e62:	2201      	movs	r2, #1
 8009e64:	697b      	ldr	r3, [r7, #20]
 8009e66:	fa02 f303 	lsl.w	r3, r2, r3
 8009e6a:	43db      	mvns	r3, r3
 8009e6c:	693a      	ldr	r2, [r7, #16]
 8009e6e:	4013      	ands	r3, r2
 8009e70:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8009e72:	683b      	ldr	r3, [r7, #0]
 8009e74:	685b      	ldr	r3, [r3, #4]
 8009e76:	091b      	lsrs	r3, r3, #4
 8009e78:	f003 0201 	and.w	r2, r3, #1
 8009e7c:	697b      	ldr	r3, [r7, #20]
 8009e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8009e82:	693a      	ldr	r2, [r7, #16]
 8009e84:	4313      	orrs	r3, r2
 8009e86:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	693a      	ldr	r2, [r7, #16]
 8009e8c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	68db      	ldr	r3, [r3, #12]
 8009e92:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8009e94:	697b      	ldr	r3, [r7, #20]
 8009e96:	005b      	lsls	r3, r3, #1
 8009e98:	2203      	movs	r2, #3
 8009e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8009e9e:	43db      	mvns	r3, r3
 8009ea0:	693a      	ldr	r2, [r7, #16]
 8009ea2:	4013      	ands	r3, r2
 8009ea4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8009ea6:	683b      	ldr	r3, [r7, #0]
 8009ea8:	689a      	ldr	r2, [r3, #8]
 8009eaa:	697b      	ldr	r3, [r7, #20]
 8009eac:	005b      	lsls	r3, r3, #1
 8009eae:	fa02 f303 	lsl.w	r3, r2, r3
 8009eb2:	693a      	ldr	r2, [r7, #16]
 8009eb4:	4313      	orrs	r3, r2
 8009eb6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	693a      	ldr	r2, [r7, #16]
 8009ebc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009ebe:	683b      	ldr	r3, [r7, #0]
 8009ec0:	685b      	ldr	r3, [r3, #4]
 8009ec2:	2b02      	cmp	r3, #2
 8009ec4:	d003      	beq.n	8009ece <HAL_GPIO_Init+0xea>
 8009ec6:	683b      	ldr	r3, [r7, #0]
 8009ec8:	685b      	ldr	r3, [r3, #4]
 8009eca:	2b12      	cmp	r3, #18
 8009ecc:	d123      	bne.n	8009f16 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8009ece:	697b      	ldr	r3, [r7, #20]
 8009ed0:	08da      	lsrs	r2, r3, #3
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	3208      	adds	r2, #8
 8009ed6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009eda:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8009edc:	697b      	ldr	r3, [r7, #20]
 8009ede:	f003 0307 	and.w	r3, r3, #7
 8009ee2:	009b      	lsls	r3, r3, #2
 8009ee4:	220f      	movs	r2, #15
 8009ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8009eea:	43db      	mvns	r3, r3
 8009eec:	693a      	ldr	r2, [r7, #16]
 8009eee:	4013      	ands	r3, r2
 8009ef0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8009ef2:	683b      	ldr	r3, [r7, #0]
 8009ef4:	691a      	ldr	r2, [r3, #16]
 8009ef6:	697b      	ldr	r3, [r7, #20]
 8009ef8:	f003 0307 	and.w	r3, r3, #7
 8009efc:	009b      	lsls	r3, r3, #2
 8009efe:	fa02 f303 	lsl.w	r3, r2, r3
 8009f02:	693a      	ldr	r2, [r7, #16]
 8009f04:	4313      	orrs	r3, r2
 8009f06:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8009f08:	697b      	ldr	r3, [r7, #20]
 8009f0a:	08da      	lsrs	r2, r3, #3
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	3208      	adds	r2, #8
 8009f10:	6939      	ldr	r1, [r7, #16]
 8009f12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8009f1c:	697b      	ldr	r3, [r7, #20]
 8009f1e:	005b      	lsls	r3, r3, #1
 8009f20:	2203      	movs	r2, #3
 8009f22:	fa02 f303 	lsl.w	r3, r2, r3
 8009f26:	43db      	mvns	r3, r3
 8009f28:	693a      	ldr	r2, [r7, #16]
 8009f2a:	4013      	ands	r3, r2
 8009f2c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8009f2e:	683b      	ldr	r3, [r7, #0]
 8009f30:	685b      	ldr	r3, [r3, #4]
 8009f32:	f003 0203 	and.w	r2, r3, #3
 8009f36:	697b      	ldr	r3, [r7, #20]
 8009f38:	005b      	lsls	r3, r3, #1
 8009f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8009f3e:	693a      	ldr	r2, [r7, #16]
 8009f40:	4313      	orrs	r3, r2
 8009f42:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	693a      	ldr	r2, [r7, #16]
 8009f48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8009f4a:	683b      	ldr	r3, [r7, #0]
 8009f4c:	685b      	ldr	r3, [r3, #4]
 8009f4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	f000 80a0 	beq.w	800a098 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009f58:	4b58      	ldr	r3, [pc, #352]	; (800a0bc <HAL_GPIO_Init+0x2d8>)
 8009f5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009f5c:	4a57      	ldr	r2, [pc, #348]	; (800a0bc <HAL_GPIO_Init+0x2d8>)
 8009f5e:	f043 0301 	orr.w	r3, r3, #1
 8009f62:	6613      	str	r3, [r2, #96]	; 0x60
 8009f64:	4b55      	ldr	r3, [pc, #340]	; (800a0bc <HAL_GPIO_Init+0x2d8>)
 8009f66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009f68:	f003 0301 	and.w	r3, r3, #1
 8009f6c:	60bb      	str	r3, [r7, #8]
 8009f6e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8009f70:	4a53      	ldr	r2, [pc, #332]	; (800a0c0 <HAL_GPIO_Init+0x2dc>)
 8009f72:	697b      	ldr	r3, [r7, #20]
 8009f74:	089b      	lsrs	r3, r3, #2
 8009f76:	3302      	adds	r3, #2
 8009f78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009f7c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8009f7e:	697b      	ldr	r3, [r7, #20]
 8009f80:	f003 0303 	and.w	r3, r3, #3
 8009f84:	009b      	lsls	r3, r3, #2
 8009f86:	220f      	movs	r2, #15
 8009f88:	fa02 f303 	lsl.w	r3, r2, r3
 8009f8c:	43db      	mvns	r3, r3
 8009f8e:	693a      	ldr	r2, [r7, #16]
 8009f90:	4013      	ands	r3, r2
 8009f92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8009f9a:	d019      	beq.n	8009fd0 <HAL_GPIO_Init+0x1ec>
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	4a49      	ldr	r2, [pc, #292]	; (800a0c4 <HAL_GPIO_Init+0x2e0>)
 8009fa0:	4293      	cmp	r3, r2
 8009fa2:	d013      	beq.n	8009fcc <HAL_GPIO_Init+0x1e8>
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	4a48      	ldr	r2, [pc, #288]	; (800a0c8 <HAL_GPIO_Init+0x2e4>)
 8009fa8:	4293      	cmp	r3, r2
 8009faa:	d00d      	beq.n	8009fc8 <HAL_GPIO_Init+0x1e4>
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	4a47      	ldr	r2, [pc, #284]	; (800a0cc <HAL_GPIO_Init+0x2e8>)
 8009fb0:	4293      	cmp	r3, r2
 8009fb2:	d007      	beq.n	8009fc4 <HAL_GPIO_Init+0x1e0>
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	4a46      	ldr	r2, [pc, #280]	; (800a0d0 <HAL_GPIO_Init+0x2ec>)
 8009fb8:	4293      	cmp	r3, r2
 8009fba:	d101      	bne.n	8009fc0 <HAL_GPIO_Init+0x1dc>
 8009fbc:	2304      	movs	r3, #4
 8009fbe:	e008      	b.n	8009fd2 <HAL_GPIO_Init+0x1ee>
 8009fc0:	2307      	movs	r3, #7
 8009fc2:	e006      	b.n	8009fd2 <HAL_GPIO_Init+0x1ee>
 8009fc4:	2303      	movs	r3, #3
 8009fc6:	e004      	b.n	8009fd2 <HAL_GPIO_Init+0x1ee>
 8009fc8:	2302      	movs	r3, #2
 8009fca:	e002      	b.n	8009fd2 <HAL_GPIO_Init+0x1ee>
 8009fcc:	2301      	movs	r3, #1
 8009fce:	e000      	b.n	8009fd2 <HAL_GPIO_Init+0x1ee>
 8009fd0:	2300      	movs	r3, #0
 8009fd2:	697a      	ldr	r2, [r7, #20]
 8009fd4:	f002 0203 	and.w	r2, r2, #3
 8009fd8:	0092      	lsls	r2, r2, #2
 8009fda:	4093      	lsls	r3, r2
 8009fdc:	693a      	ldr	r2, [r7, #16]
 8009fde:	4313      	orrs	r3, r2
 8009fe0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8009fe2:	4937      	ldr	r1, [pc, #220]	; (800a0c0 <HAL_GPIO_Init+0x2dc>)
 8009fe4:	697b      	ldr	r3, [r7, #20]
 8009fe6:	089b      	lsrs	r3, r3, #2
 8009fe8:	3302      	adds	r3, #2
 8009fea:	693a      	ldr	r2, [r7, #16]
 8009fec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8009ff0:	4b38      	ldr	r3, [pc, #224]	; (800a0d4 <HAL_GPIO_Init+0x2f0>)
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	43db      	mvns	r3, r3
 8009ffa:	693a      	ldr	r2, [r7, #16]
 8009ffc:	4013      	ands	r3, r2
 8009ffe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800a000:	683b      	ldr	r3, [r7, #0]
 800a002:	685b      	ldr	r3, [r3, #4]
 800a004:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d003      	beq.n	800a014 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800a00c:	693a      	ldr	r2, [r7, #16]
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	4313      	orrs	r3, r2
 800a012:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800a014:	4a2f      	ldr	r2, [pc, #188]	; (800a0d4 <HAL_GPIO_Init+0x2f0>)
 800a016:	693b      	ldr	r3, [r7, #16]
 800a018:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800a01a:	4b2e      	ldr	r3, [pc, #184]	; (800a0d4 <HAL_GPIO_Init+0x2f0>)
 800a01c:	685b      	ldr	r3, [r3, #4]
 800a01e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	43db      	mvns	r3, r3
 800a024:	693a      	ldr	r2, [r7, #16]
 800a026:	4013      	ands	r3, r2
 800a028:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800a02a:	683b      	ldr	r3, [r7, #0]
 800a02c:	685b      	ldr	r3, [r3, #4]
 800a02e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a032:	2b00      	cmp	r3, #0
 800a034:	d003      	beq.n	800a03e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800a036:	693a      	ldr	r2, [r7, #16]
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	4313      	orrs	r3, r2
 800a03c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800a03e:	4a25      	ldr	r2, [pc, #148]	; (800a0d4 <HAL_GPIO_Init+0x2f0>)
 800a040:	693b      	ldr	r3, [r7, #16]
 800a042:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800a044:	4b23      	ldr	r3, [pc, #140]	; (800a0d4 <HAL_GPIO_Init+0x2f0>)
 800a046:	689b      	ldr	r3, [r3, #8]
 800a048:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	43db      	mvns	r3, r3
 800a04e:	693a      	ldr	r2, [r7, #16]
 800a050:	4013      	ands	r3, r2
 800a052:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800a054:	683b      	ldr	r3, [r7, #0]
 800a056:	685b      	ldr	r3, [r3, #4]
 800a058:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d003      	beq.n	800a068 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800a060:	693a      	ldr	r2, [r7, #16]
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	4313      	orrs	r3, r2
 800a066:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800a068:	4a1a      	ldr	r2, [pc, #104]	; (800a0d4 <HAL_GPIO_Init+0x2f0>)
 800a06a:	693b      	ldr	r3, [r7, #16]
 800a06c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800a06e:	4b19      	ldr	r3, [pc, #100]	; (800a0d4 <HAL_GPIO_Init+0x2f0>)
 800a070:	68db      	ldr	r3, [r3, #12]
 800a072:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	43db      	mvns	r3, r3
 800a078:	693a      	ldr	r2, [r7, #16]
 800a07a:	4013      	ands	r3, r2
 800a07c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800a07e:	683b      	ldr	r3, [r7, #0]
 800a080:	685b      	ldr	r3, [r3, #4]
 800a082:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a086:	2b00      	cmp	r3, #0
 800a088:	d003      	beq.n	800a092 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800a08a:	693a      	ldr	r2, [r7, #16]
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	4313      	orrs	r3, r2
 800a090:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800a092:	4a10      	ldr	r2, [pc, #64]	; (800a0d4 <HAL_GPIO_Init+0x2f0>)
 800a094:	693b      	ldr	r3, [r7, #16]
 800a096:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800a098:	697b      	ldr	r3, [r7, #20]
 800a09a:	3301      	adds	r3, #1
 800a09c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800a09e:	683b      	ldr	r3, [r7, #0]
 800a0a0:	681a      	ldr	r2, [r3, #0]
 800a0a2:	697b      	ldr	r3, [r7, #20]
 800a0a4:	fa22 f303 	lsr.w	r3, r2, r3
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	f47f aea3 	bne.w	8009df4 <HAL_GPIO_Init+0x10>
  }
}
 800a0ae:	bf00      	nop
 800a0b0:	371c      	adds	r7, #28
 800a0b2:	46bd      	mov	sp, r7
 800a0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b8:	4770      	bx	lr
 800a0ba:	bf00      	nop
 800a0bc:	40021000 	.word	0x40021000
 800a0c0:	40010000 	.word	0x40010000
 800a0c4:	48000400 	.word	0x48000400
 800a0c8:	48000800 	.word	0x48000800
 800a0cc:	48000c00 	.word	0x48000c00
 800a0d0:	48001000 	.word	0x48001000
 800a0d4:	40010400 	.word	0x40010400

0800a0d8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800a0d8:	b480      	push	{r7}
 800a0da:	b085      	sub	sp, #20
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	6078      	str	r0, [r7, #4]
 800a0e0:	460b      	mov	r3, r1
 800a0e2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	691a      	ldr	r2, [r3, #16]
 800a0e8:	887b      	ldrh	r3, [r7, #2]
 800a0ea:	4013      	ands	r3, r2
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d002      	beq.n	800a0f6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800a0f0:	2301      	movs	r3, #1
 800a0f2:	73fb      	strb	r3, [r7, #15]
 800a0f4:	e001      	b.n	800a0fa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800a0f6:	2300      	movs	r3, #0
 800a0f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800a0fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	3714      	adds	r7, #20
 800a100:	46bd      	mov	sp, r7
 800a102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a106:	4770      	bx	lr

0800a108 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a108:	b480      	push	{r7}
 800a10a:	b083      	sub	sp, #12
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	6078      	str	r0, [r7, #4]
 800a110:	460b      	mov	r3, r1
 800a112:	807b      	strh	r3, [r7, #2]
 800a114:	4613      	mov	r3, r2
 800a116:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800a118:	787b      	ldrb	r3, [r7, #1]
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d003      	beq.n	800a126 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800a11e:	887a      	ldrh	r2, [r7, #2]
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800a124:	e002      	b.n	800a12c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800a126:	887a      	ldrh	r2, [r7, #2]
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800a12c:	bf00      	nop
 800a12e:	370c      	adds	r7, #12
 800a130:	46bd      	mov	sp, r7
 800a132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a136:	4770      	bx	lr

0800a138 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a138:	b580      	push	{r7, lr}
 800a13a:	b082      	sub	sp, #8
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	2b00      	cmp	r3, #0
 800a144:	d101      	bne.n	800a14a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a146:	2301      	movs	r3, #1
 800a148:	e081      	b.n	800a24e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a150:	b2db      	uxtb	r3, r3
 800a152:	2b00      	cmp	r3, #0
 800a154:	d106      	bne.n	800a164 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	2200      	movs	r2, #0
 800a15a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800a15e:	6878      	ldr	r0, [r7, #4]
 800a160:	f7f7 fe70 	bl	8001e44 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	2224      	movs	r2, #36	; 0x24
 800a168:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	681a      	ldr	r2, [r3, #0]
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	f022 0201 	bic.w	r2, r2, #1
 800a17a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	685a      	ldr	r2, [r3, #4]
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800a188:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	689a      	ldr	r2, [r3, #8]
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a198:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	68db      	ldr	r3, [r3, #12]
 800a19e:	2b01      	cmp	r3, #1
 800a1a0:	d107      	bne.n	800a1b2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	689a      	ldr	r2, [r3, #8]
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a1ae:	609a      	str	r2, [r3, #8]
 800a1b0:	e006      	b.n	800a1c0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	689a      	ldr	r2, [r3, #8]
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800a1be:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	68db      	ldr	r3, [r3, #12]
 800a1c4:	2b02      	cmp	r3, #2
 800a1c6:	d104      	bne.n	800a1d2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a1d0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	685b      	ldr	r3, [r3, #4]
 800a1d8:	687a      	ldr	r2, [r7, #4]
 800a1da:	6812      	ldr	r2, [r2, #0]
 800a1dc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800a1e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a1e4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	68da      	ldr	r2, [r3, #12]
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a1f4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	691a      	ldr	r2, [r3, #16]
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	695b      	ldr	r3, [r3, #20]
 800a1fe:	ea42 0103 	orr.w	r1, r2, r3
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	699b      	ldr	r3, [r3, #24]
 800a206:	021a      	lsls	r2, r3, #8
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	430a      	orrs	r2, r1
 800a20e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	69d9      	ldr	r1, [r3, #28]
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	6a1a      	ldr	r2, [r3, #32]
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	430a      	orrs	r2, r1
 800a21e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	681a      	ldr	r2, [r3, #0]
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	f042 0201 	orr.w	r2, r2, #1
 800a22e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	2200      	movs	r2, #0
 800a234:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	2220      	movs	r2, #32
 800a23a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	2200      	movs	r2, #0
 800a242:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	2200      	movs	r2, #0
 800a248:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800a24c:	2300      	movs	r3, #0
}
 800a24e:	4618      	mov	r0, r3
 800a250:	3708      	adds	r7, #8
 800a252:	46bd      	mov	sp, r7
 800a254:	bd80      	pop	{r7, pc}
	...

0800a258 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a258:	b580      	push	{r7, lr}
 800a25a:	b088      	sub	sp, #32
 800a25c:	af02      	add	r7, sp, #8
 800a25e:	60f8      	str	r0, [r7, #12]
 800a260:	607a      	str	r2, [r7, #4]
 800a262:	461a      	mov	r2, r3
 800a264:	460b      	mov	r3, r1
 800a266:	817b      	strh	r3, [r7, #10]
 800a268:	4613      	mov	r3, r2
 800a26a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a272:	b2db      	uxtb	r3, r3
 800a274:	2b20      	cmp	r3, #32
 800a276:	f040 80da 	bne.w	800a42e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a280:	2b01      	cmp	r3, #1
 800a282:	d101      	bne.n	800a288 <HAL_I2C_Master_Transmit+0x30>
 800a284:	2302      	movs	r3, #2
 800a286:	e0d3      	b.n	800a430 <HAL_I2C_Master_Transmit+0x1d8>
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	2201      	movs	r2, #1
 800a28c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800a290:	f7fe f892 	bl	80083b8 <HAL_GetTick>
 800a294:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a296:	697b      	ldr	r3, [r7, #20]
 800a298:	9300      	str	r3, [sp, #0]
 800a29a:	2319      	movs	r3, #25
 800a29c:	2201      	movs	r2, #1
 800a29e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a2a2:	68f8      	ldr	r0, [r7, #12]
 800a2a4:	f000 f8f0 	bl	800a488 <I2C_WaitOnFlagUntilTimeout>
 800a2a8:	4603      	mov	r3, r0
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d001      	beq.n	800a2b2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800a2ae:	2301      	movs	r3, #1
 800a2b0:	e0be      	b.n	800a430 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	2221      	movs	r2, #33	; 0x21
 800a2b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	2210      	movs	r2, #16
 800a2be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	2200      	movs	r2, #0
 800a2c6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	687a      	ldr	r2, [r7, #4]
 800a2cc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	893a      	ldrh	r2, [r7, #8]
 800a2d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	2200      	movs	r2, #0
 800a2d8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a2de:	b29b      	uxth	r3, r3
 800a2e0:	2bff      	cmp	r3, #255	; 0xff
 800a2e2:	d90e      	bls.n	800a302 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	22ff      	movs	r2, #255	; 0xff
 800a2e8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a2ee:	b2da      	uxtb	r2, r3
 800a2f0:	8979      	ldrh	r1, [r7, #10]
 800a2f2:	4b51      	ldr	r3, [pc, #324]	; (800a438 <HAL_I2C_Master_Transmit+0x1e0>)
 800a2f4:	9300      	str	r3, [sp, #0]
 800a2f6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a2fa:	68f8      	ldr	r0, [r7, #12]
 800a2fc:	f000 f9e6 	bl	800a6cc <I2C_TransferConfig>
 800a300:	e06c      	b.n	800a3dc <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a306:	b29a      	uxth	r2, r3
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a310:	b2da      	uxtb	r2, r3
 800a312:	8979      	ldrh	r1, [r7, #10]
 800a314:	4b48      	ldr	r3, [pc, #288]	; (800a438 <HAL_I2C_Master_Transmit+0x1e0>)
 800a316:	9300      	str	r3, [sp, #0]
 800a318:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a31c:	68f8      	ldr	r0, [r7, #12]
 800a31e:	f000 f9d5 	bl	800a6cc <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800a322:	e05b      	b.n	800a3dc <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a324:	697a      	ldr	r2, [r7, #20]
 800a326:	6a39      	ldr	r1, [r7, #32]
 800a328:	68f8      	ldr	r0, [r7, #12]
 800a32a:	f000 f8ed 	bl	800a508 <I2C_WaitOnTXISFlagUntilTimeout>
 800a32e:	4603      	mov	r3, r0
 800a330:	2b00      	cmp	r3, #0
 800a332:	d001      	beq.n	800a338 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800a334:	2301      	movs	r3, #1
 800a336:	e07b      	b.n	800a430 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a33c:	781a      	ldrb	r2, [r3, #0]
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a348:	1c5a      	adds	r2, r3, #1
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a352:	b29b      	uxth	r3, r3
 800a354:	3b01      	subs	r3, #1
 800a356:	b29a      	uxth	r2, r3
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a360:	3b01      	subs	r3, #1
 800a362:	b29a      	uxth	r2, r3
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a36c:	b29b      	uxth	r3, r3
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d034      	beq.n	800a3dc <HAL_I2C_Master_Transmit+0x184>
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a376:	2b00      	cmp	r3, #0
 800a378:	d130      	bne.n	800a3dc <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800a37a:	697b      	ldr	r3, [r7, #20]
 800a37c:	9300      	str	r3, [sp, #0]
 800a37e:	6a3b      	ldr	r3, [r7, #32]
 800a380:	2200      	movs	r2, #0
 800a382:	2180      	movs	r1, #128	; 0x80
 800a384:	68f8      	ldr	r0, [r7, #12]
 800a386:	f000 f87f 	bl	800a488 <I2C_WaitOnFlagUntilTimeout>
 800a38a:	4603      	mov	r3, r0
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d001      	beq.n	800a394 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800a390:	2301      	movs	r3, #1
 800a392:	e04d      	b.n	800a430 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a398:	b29b      	uxth	r3, r3
 800a39a:	2bff      	cmp	r3, #255	; 0xff
 800a39c:	d90e      	bls.n	800a3bc <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	22ff      	movs	r2, #255	; 0xff
 800a3a2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a3a8:	b2da      	uxtb	r2, r3
 800a3aa:	8979      	ldrh	r1, [r7, #10]
 800a3ac:	2300      	movs	r3, #0
 800a3ae:	9300      	str	r3, [sp, #0]
 800a3b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a3b4:	68f8      	ldr	r0, [r7, #12]
 800a3b6:	f000 f989 	bl	800a6cc <I2C_TransferConfig>
 800a3ba:	e00f      	b.n	800a3dc <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a3c0:	b29a      	uxth	r2, r3
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a3ca:	b2da      	uxtb	r2, r3
 800a3cc:	8979      	ldrh	r1, [r7, #10]
 800a3ce:	2300      	movs	r3, #0
 800a3d0:	9300      	str	r3, [sp, #0]
 800a3d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a3d6:	68f8      	ldr	r0, [r7, #12]
 800a3d8:	f000 f978 	bl	800a6cc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a3e0:	b29b      	uxth	r3, r3
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d19e      	bne.n	800a324 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a3e6:	697a      	ldr	r2, [r7, #20]
 800a3e8:	6a39      	ldr	r1, [r7, #32]
 800a3ea:	68f8      	ldr	r0, [r7, #12]
 800a3ec:	f000 f8cc 	bl	800a588 <I2C_WaitOnSTOPFlagUntilTimeout>
 800a3f0:	4603      	mov	r3, r0
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d001      	beq.n	800a3fa <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800a3f6:	2301      	movs	r3, #1
 800a3f8:	e01a      	b.n	800a430 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	2220      	movs	r2, #32
 800a400:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	6859      	ldr	r1, [r3, #4]
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	681a      	ldr	r2, [r3, #0]
 800a40c:	4b0b      	ldr	r3, [pc, #44]	; (800a43c <HAL_I2C_Master_Transmit+0x1e4>)
 800a40e:	400b      	ands	r3, r1
 800a410:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	2220      	movs	r2, #32
 800a416:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	2200      	movs	r2, #0
 800a41e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	2200      	movs	r2, #0
 800a426:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a42a:	2300      	movs	r3, #0
 800a42c:	e000      	b.n	800a430 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800a42e:	2302      	movs	r3, #2
  }
}
 800a430:	4618      	mov	r0, r3
 800a432:	3718      	adds	r7, #24
 800a434:	46bd      	mov	sp, r7
 800a436:	bd80      	pop	{r7, pc}
 800a438:	80002000 	.word	0x80002000
 800a43c:	fe00e800 	.word	0xfe00e800

0800a440 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800a440:	b480      	push	{r7}
 800a442:	b083      	sub	sp, #12
 800a444:	af00      	add	r7, sp, #0
 800a446:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	699b      	ldr	r3, [r3, #24]
 800a44e:	f003 0302 	and.w	r3, r3, #2
 800a452:	2b02      	cmp	r3, #2
 800a454:	d103      	bne.n	800a45e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	2200      	movs	r2, #0
 800a45c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	699b      	ldr	r3, [r3, #24]
 800a464:	f003 0301 	and.w	r3, r3, #1
 800a468:	2b01      	cmp	r3, #1
 800a46a:	d007      	beq.n	800a47c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	699a      	ldr	r2, [r3, #24]
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	f042 0201 	orr.w	r2, r2, #1
 800a47a:	619a      	str	r2, [r3, #24]
  }
}
 800a47c:	bf00      	nop
 800a47e:	370c      	adds	r7, #12
 800a480:	46bd      	mov	sp, r7
 800a482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a486:	4770      	bx	lr

0800a488 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800a488:	b580      	push	{r7, lr}
 800a48a:	b084      	sub	sp, #16
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	60f8      	str	r0, [r7, #12]
 800a490:	60b9      	str	r1, [r7, #8]
 800a492:	603b      	str	r3, [r7, #0]
 800a494:	4613      	mov	r3, r2
 800a496:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a498:	e022      	b.n	800a4e0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a49a:	683b      	ldr	r3, [r7, #0]
 800a49c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4a0:	d01e      	beq.n	800a4e0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a4a2:	f7fd ff89 	bl	80083b8 <HAL_GetTick>
 800a4a6:	4602      	mov	r2, r0
 800a4a8:	69bb      	ldr	r3, [r7, #24]
 800a4aa:	1ad3      	subs	r3, r2, r3
 800a4ac:	683a      	ldr	r2, [r7, #0]
 800a4ae:	429a      	cmp	r2, r3
 800a4b0:	d302      	bcc.n	800a4b8 <I2C_WaitOnFlagUntilTimeout+0x30>
 800a4b2:	683b      	ldr	r3, [r7, #0]
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d113      	bne.n	800a4e0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a4bc:	f043 0220 	orr.w	r2, r3, #32
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	2220      	movs	r2, #32
 800a4c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	2200      	movs	r2, #0
 800a4d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	2200      	movs	r2, #0
 800a4d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800a4dc:	2301      	movs	r3, #1
 800a4de:	e00f      	b.n	800a500 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	699a      	ldr	r2, [r3, #24]
 800a4e6:	68bb      	ldr	r3, [r7, #8]
 800a4e8:	4013      	ands	r3, r2
 800a4ea:	68ba      	ldr	r2, [r7, #8]
 800a4ec:	429a      	cmp	r2, r3
 800a4ee:	bf0c      	ite	eq
 800a4f0:	2301      	moveq	r3, #1
 800a4f2:	2300      	movne	r3, #0
 800a4f4:	b2db      	uxtb	r3, r3
 800a4f6:	461a      	mov	r2, r3
 800a4f8:	79fb      	ldrb	r3, [r7, #7]
 800a4fa:	429a      	cmp	r2, r3
 800a4fc:	d0cd      	beq.n	800a49a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a4fe:	2300      	movs	r3, #0
}
 800a500:	4618      	mov	r0, r3
 800a502:	3710      	adds	r7, #16
 800a504:	46bd      	mov	sp, r7
 800a506:	bd80      	pop	{r7, pc}

0800a508 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a508:	b580      	push	{r7, lr}
 800a50a:	b084      	sub	sp, #16
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	60f8      	str	r0, [r7, #12]
 800a510:	60b9      	str	r1, [r7, #8]
 800a512:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a514:	e02c      	b.n	800a570 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800a516:	687a      	ldr	r2, [r7, #4]
 800a518:	68b9      	ldr	r1, [r7, #8]
 800a51a:	68f8      	ldr	r0, [r7, #12]
 800a51c:	f000 f870 	bl	800a600 <I2C_IsAcknowledgeFailed>
 800a520:	4603      	mov	r3, r0
 800a522:	2b00      	cmp	r3, #0
 800a524:	d001      	beq.n	800a52a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a526:	2301      	movs	r3, #1
 800a528:	e02a      	b.n	800a580 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a52a:	68bb      	ldr	r3, [r7, #8]
 800a52c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a530:	d01e      	beq.n	800a570 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a532:	f7fd ff41 	bl	80083b8 <HAL_GetTick>
 800a536:	4602      	mov	r2, r0
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	1ad3      	subs	r3, r2, r3
 800a53c:	68ba      	ldr	r2, [r7, #8]
 800a53e:	429a      	cmp	r2, r3
 800a540:	d302      	bcc.n	800a548 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800a542:	68bb      	ldr	r3, [r7, #8]
 800a544:	2b00      	cmp	r3, #0
 800a546:	d113      	bne.n	800a570 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a54c:	f043 0220 	orr.w	r2, r3, #32
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	2220      	movs	r2, #32
 800a558:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	2200      	movs	r2, #0
 800a560:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	2200      	movs	r2, #0
 800a568:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800a56c:	2301      	movs	r3, #1
 800a56e:	e007      	b.n	800a580 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	699b      	ldr	r3, [r3, #24]
 800a576:	f003 0302 	and.w	r3, r3, #2
 800a57a:	2b02      	cmp	r3, #2
 800a57c:	d1cb      	bne.n	800a516 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a57e:	2300      	movs	r3, #0
}
 800a580:	4618      	mov	r0, r3
 800a582:	3710      	adds	r7, #16
 800a584:	46bd      	mov	sp, r7
 800a586:	bd80      	pop	{r7, pc}

0800a588 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a588:	b580      	push	{r7, lr}
 800a58a:	b084      	sub	sp, #16
 800a58c:	af00      	add	r7, sp, #0
 800a58e:	60f8      	str	r0, [r7, #12]
 800a590:	60b9      	str	r1, [r7, #8]
 800a592:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a594:	e028      	b.n	800a5e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800a596:	687a      	ldr	r2, [r7, #4]
 800a598:	68b9      	ldr	r1, [r7, #8]
 800a59a:	68f8      	ldr	r0, [r7, #12]
 800a59c:	f000 f830 	bl	800a600 <I2C_IsAcknowledgeFailed>
 800a5a0:	4603      	mov	r3, r0
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d001      	beq.n	800a5aa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a5a6:	2301      	movs	r3, #1
 800a5a8:	e026      	b.n	800a5f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a5aa:	f7fd ff05 	bl	80083b8 <HAL_GetTick>
 800a5ae:	4602      	mov	r2, r0
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	1ad3      	subs	r3, r2, r3
 800a5b4:	68ba      	ldr	r2, [r7, #8]
 800a5b6:	429a      	cmp	r2, r3
 800a5b8:	d302      	bcc.n	800a5c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800a5ba:	68bb      	ldr	r3, [r7, #8]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d113      	bne.n	800a5e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a5c4:	f043 0220 	orr.w	r2, r3, #32
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	2220      	movs	r2, #32
 800a5d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	2200      	movs	r2, #0
 800a5d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	2200      	movs	r2, #0
 800a5e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800a5e4:	2301      	movs	r3, #1
 800a5e6:	e007      	b.n	800a5f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	699b      	ldr	r3, [r3, #24]
 800a5ee:	f003 0320 	and.w	r3, r3, #32
 800a5f2:	2b20      	cmp	r3, #32
 800a5f4:	d1cf      	bne.n	800a596 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800a5f6:	2300      	movs	r3, #0
}
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	3710      	adds	r7, #16
 800a5fc:	46bd      	mov	sp, r7
 800a5fe:	bd80      	pop	{r7, pc}

0800a600 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a600:	b580      	push	{r7, lr}
 800a602:	b084      	sub	sp, #16
 800a604:	af00      	add	r7, sp, #0
 800a606:	60f8      	str	r0, [r7, #12]
 800a608:	60b9      	str	r1, [r7, #8]
 800a60a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	699b      	ldr	r3, [r3, #24]
 800a612:	f003 0310 	and.w	r3, r3, #16
 800a616:	2b10      	cmp	r3, #16
 800a618:	d151      	bne.n	800a6be <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a61a:	e022      	b.n	800a662 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800a61c:	68bb      	ldr	r3, [r7, #8]
 800a61e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a622:	d01e      	beq.n	800a662 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a624:	f7fd fec8 	bl	80083b8 <HAL_GetTick>
 800a628:	4602      	mov	r2, r0
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	1ad3      	subs	r3, r2, r3
 800a62e:	68ba      	ldr	r2, [r7, #8]
 800a630:	429a      	cmp	r2, r3
 800a632:	d302      	bcc.n	800a63a <I2C_IsAcknowledgeFailed+0x3a>
 800a634:	68bb      	ldr	r3, [r7, #8]
 800a636:	2b00      	cmp	r3, #0
 800a638:	d113      	bne.n	800a662 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a63e:	f043 0220 	orr.w	r2, r3, #32
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	2220      	movs	r2, #32
 800a64a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	2200      	movs	r2, #0
 800a652:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	2200      	movs	r2, #0
 800a65a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800a65e:	2301      	movs	r3, #1
 800a660:	e02e      	b.n	800a6c0 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	699b      	ldr	r3, [r3, #24]
 800a668:	f003 0320 	and.w	r3, r3, #32
 800a66c:	2b20      	cmp	r3, #32
 800a66e:	d1d5      	bne.n	800a61c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	2210      	movs	r2, #16
 800a676:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	2220      	movs	r2, #32
 800a67e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800a680:	68f8      	ldr	r0, [r7, #12]
 800a682:	f7ff fedd 	bl	800a440 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	6859      	ldr	r1, [r3, #4]
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	681a      	ldr	r2, [r3, #0]
 800a690:	4b0d      	ldr	r3, [pc, #52]	; (800a6c8 <I2C_IsAcknowledgeFailed+0xc8>)
 800a692:	400b      	ands	r3, r1
 800a694:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a69a:	f043 0204 	orr.w	r2, r3, #4
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	2220      	movs	r2, #32
 800a6a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	2200      	movs	r2, #0
 800a6ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	2200      	movs	r2, #0
 800a6b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800a6ba:	2301      	movs	r3, #1
 800a6bc:	e000      	b.n	800a6c0 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800a6be:	2300      	movs	r3, #0
}
 800a6c0:	4618      	mov	r0, r3
 800a6c2:	3710      	adds	r7, #16
 800a6c4:	46bd      	mov	sp, r7
 800a6c6:	bd80      	pop	{r7, pc}
 800a6c8:	fe00e800 	.word	0xfe00e800

0800a6cc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 800a6cc:	b480      	push	{r7}
 800a6ce:	b085      	sub	sp, #20
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	60f8      	str	r0, [r7, #12]
 800a6d4:	607b      	str	r3, [r7, #4]
 800a6d6:	460b      	mov	r3, r1
 800a6d8:	817b      	strh	r3, [r7, #10]
 800a6da:	4613      	mov	r3, r2
 800a6dc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	685a      	ldr	r2, [r3, #4]
 800a6e4:	69bb      	ldr	r3, [r7, #24]
 800a6e6:	0d5b      	lsrs	r3, r3, #21
 800a6e8:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800a6ec:	4b0d      	ldr	r3, [pc, #52]	; (800a724 <I2C_TransferConfig+0x58>)
 800a6ee:	430b      	orrs	r3, r1
 800a6f0:	43db      	mvns	r3, r3
 800a6f2:	ea02 0103 	and.w	r1, r2, r3
 800a6f6:	897b      	ldrh	r3, [r7, #10]
 800a6f8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800a6fc:	7a7b      	ldrb	r3, [r7, #9]
 800a6fe:	041b      	lsls	r3, r3, #16
 800a700:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a704:	431a      	orrs	r2, r3
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	431a      	orrs	r2, r3
 800a70a:	69bb      	ldr	r3, [r7, #24]
 800a70c:	431a      	orrs	r2, r3
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	430a      	orrs	r2, r1
 800a714:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800a716:	bf00      	nop
 800a718:	3714      	adds	r7, #20
 800a71a:	46bd      	mov	sp, r7
 800a71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a720:	4770      	bx	lr
 800a722:	bf00      	nop
 800a724:	03ff63ff 	.word	0x03ff63ff

0800a728 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800a728:	b480      	push	{r7}
 800a72a:	b083      	sub	sp, #12
 800a72c:	af00      	add	r7, sp, #0
 800a72e:	6078      	str	r0, [r7, #4]
 800a730:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a738:	b2db      	uxtb	r3, r3
 800a73a:	2b20      	cmp	r3, #32
 800a73c:	d138      	bne.n	800a7b0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a744:	2b01      	cmp	r3, #1
 800a746:	d101      	bne.n	800a74c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800a748:	2302      	movs	r3, #2
 800a74a:	e032      	b.n	800a7b2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	2201      	movs	r2, #1
 800a750:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	2224      	movs	r2, #36	; 0x24
 800a758:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	681a      	ldr	r2, [r3, #0]
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	f022 0201 	bic.w	r2, r2, #1
 800a76a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	681a      	ldr	r2, [r3, #0]
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a77a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	6819      	ldr	r1, [r3, #0]
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	683a      	ldr	r2, [r7, #0]
 800a788:	430a      	orrs	r2, r1
 800a78a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	681a      	ldr	r2, [r3, #0]
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	f042 0201 	orr.w	r2, r2, #1
 800a79a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	2220      	movs	r2, #32
 800a7a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	2200      	movs	r2, #0
 800a7a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a7ac:	2300      	movs	r3, #0
 800a7ae:	e000      	b.n	800a7b2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a7b0:	2302      	movs	r3, #2
  }
}
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	370c      	adds	r7, #12
 800a7b6:	46bd      	mov	sp, r7
 800a7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7bc:	4770      	bx	lr

0800a7be <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800a7be:	b480      	push	{r7}
 800a7c0:	b085      	sub	sp, #20
 800a7c2:	af00      	add	r7, sp, #0
 800a7c4:	6078      	str	r0, [r7, #4]
 800a7c6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a7ce:	b2db      	uxtb	r3, r3
 800a7d0:	2b20      	cmp	r3, #32
 800a7d2:	d139      	bne.n	800a848 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a7da:	2b01      	cmp	r3, #1
 800a7dc:	d101      	bne.n	800a7e2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800a7de:	2302      	movs	r3, #2
 800a7e0:	e033      	b.n	800a84a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	2201      	movs	r2, #1
 800a7e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	2224      	movs	r2, #36	; 0x24
 800a7ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	681a      	ldr	r2, [r3, #0]
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	f022 0201 	bic.w	r2, r2, #1
 800a800:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800a810:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800a812:	683b      	ldr	r3, [r7, #0]
 800a814:	021b      	lsls	r3, r3, #8
 800a816:	68fa      	ldr	r2, [r7, #12]
 800a818:	4313      	orrs	r3, r2
 800a81a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	68fa      	ldr	r2, [r7, #12]
 800a822:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	681a      	ldr	r2, [r3, #0]
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	f042 0201 	orr.w	r2, r2, #1
 800a832:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	2220      	movs	r2, #32
 800a838:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	2200      	movs	r2, #0
 800a840:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a844:	2300      	movs	r3, #0
 800a846:	e000      	b.n	800a84a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800a848:	2302      	movs	r3, #2
  }
}
 800a84a:	4618      	mov	r0, r3
 800a84c:	3714      	adds	r7, #20
 800a84e:	46bd      	mov	sp, r7
 800a850:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a854:	4770      	bx	lr
	...

0800a858 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800a858:	b480      	push	{r7}
 800a85a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800a85c:	4b04      	ldr	r3, [pc, #16]	; (800a870 <HAL_PWREx_GetVoltageRange+0x18>)
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800a864:	4618      	mov	r0, r3
 800a866:	46bd      	mov	sp, r7
 800a868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a86c:	4770      	bx	lr
 800a86e:	bf00      	nop
 800a870:	40007000 	.word	0x40007000

0800a874 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800a874:	b480      	push	{r7}
 800a876:	b085      	sub	sp, #20
 800a878:	af00      	add	r7, sp, #0
 800a87a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a882:	d130      	bne.n	800a8e6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800a884:	4b23      	ldr	r3, [pc, #140]	; (800a914 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a88c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a890:	d038      	beq.n	800a904 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800a892:	4b20      	ldr	r3, [pc, #128]	; (800a914 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800a89a:	4a1e      	ldr	r2, [pc, #120]	; (800a914 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a89c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a8a0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800a8a2:	4b1d      	ldr	r3, [pc, #116]	; (800a918 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	2232      	movs	r2, #50	; 0x32
 800a8a8:	fb02 f303 	mul.w	r3, r2, r3
 800a8ac:	4a1b      	ldr	r2, [pc, #108]	; (800a91c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800a8ae:	fba2 2303 	umull	r2, r3, r2, r3
 800a8b2:	0c9b      	lsrs	r3, r3, #18
 800a8b4:	3301      	adds	r3, #1
 800a8b6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a8b8:	e002      	b.n	800a8c0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	3b01      	subs	r3, #1
 800a8be:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a8c0:	4b14      	ldr	r3, [pc, #80]	; (800a914 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a8c2:	695b      	ldr	r3, [r3, #20]
 800a8c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a8c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a8cc:	d102      	bne.n	800a8d4 <HAL_PWREx_ControlVoltageScaling+0x60>
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d1f2      	bne.n	800a8ba <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800a8d4:	4b0f      	ldr	r3, [pc, #60]	; (800a914 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a8d6:	695b      	ldr	r3, [r3, #20]
 800a8d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a8dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a8e0:	d110      	bne.n	800a904 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800a8e2:	2303      	movs	r3, #3
 800a8e4:	e00f      	b.n	800a906 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800a8e6:	4b0b      	ldr	r3, [pc, #44]	; (800a914 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a8ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a8f2:	d007      	beq.n	800a904 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800a8f4:	4b07      	ldr	r3, [pc, #28]	; (800a914 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800a8fc:	4a05      	ldr	r2, [pc, #20]	; (800a914 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a8fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a902:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800a904:	2300      	movs	r3, #0
}
 800a906:	4618      	mov	r0, r3
 800a908:	3714      	adds	r7, #20
 800a90a:	46bd      	mov	sp, r7
 800a90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a910:	4770      	bx	lr
 800a912:	bf00      	nop
 800a914:	40007000 	.word	0x40007000
 800a918:	20000000 	.word	0x20000000
 800a91c:	431bde83 	.word	0x431bde83

0800a920 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a920:	b580      	push	{r7, lr}
 800a922:	b088      	sub	sp, #32
 800a924:	af00      	add	r7, sp, #0
 800a926:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d102      	bne.n	800a934 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800a92e:	2301      	movs	r3, #1
 800a930:	f000 bc11 	b.w	800b156 <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a934:	4ba0      	ldr	r3, [pc, #640]	; (800abb8 <HAL_RCC_OscConfig+0x298>)
 800a936:	689b      	ldr	r3, [r3, #8]
 800a938:	f003 030c 	and.w	r3, r3, #12
 800a93c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a93e:	4b9e      	ldr	r3, [pc, #632]	; (800abb8 <HAL_RCC_OscConfig+0x298>)
 800a940:	68db      	ldr	r3, [r3, #12]
 800a942:	f003 0303 	and.w	r3, r3, #3
 800a946:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	f003 0310 	and.w	r3, r3, #16
 800a950:	2b00      	cmp	r3, #0
 800a952:	f000 80e4 	beq.w	800ab1e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800a956:	69bb      	ldr	r3, [r7, #24]
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d007      	beq.n	800a96c <HAL_RCC_OscConfig+0x4c>
 800a95c:	69bb      	ldr	r3, [r7, #24]
 800a95e:	2b0c      	cmp	r3, #12
 800a960:	f040 808b 	bne.w	800aa7a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800a964:	697b      	ldr	r3, [r7, #20]
 800a966:	2b01      	cmp	r3, #1
 800a968:	f040 8087 	bne.w	800aa7a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800a96c:	4b92      	ldr	r3, [pc, #584]	; (800abb8 <HAL_RCC_OscConfig+0x298>)
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	f003 0302 	and.w	r3, r3, #2
 800a974:	2b00      	cmp	r3, #0
 800a976:	d005      	beq.n	800a984 <HAL_RCC_OscConfig+0x64>
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	699b      	ldr	r3, [r3, #24]
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d101      	bne.n	800a984 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800a980:	2301      	movs	r3, #1
 800a982:	e3e8      	b.n	800b156 <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	6a1a      	ldr	r2, [r3, #32]
 800a988:	4b8b      	ldr	r3, [pc, #556]	; (800abb8 <HAL_RCC_OscConfig+0x298>)
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	f003 0308 	and.w	r3, r3, #8
 800a990:	2b00      	cmp	r3, #0
 800a992:	d004      	beq.n	800a99e <HAL_RCC_OscConfig+0x7e>
 800a994:	4b88      	ldr	r3, [pc, #544]	; (800abb8 <HAL_RCC_OscConfig+0x298>)
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a99c:	e005      	b.n	800a9aa <HAL_RCC_OscConfig+0x8a>
 800a99e:	4b86      	ldr	r3, [pc, #536]	; (800abb8 <HAL_RCC_OscConfig+0x298>)
 800a9a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a9a4:	091b      	lsrs	r3, r3, #4
 800a9a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a9aa:	4293      	cmp	r3, r2
 800a9ac:	d223      	bcs.n	800a9f6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	6a1b      	ldr	r3, [r3, #32]
 800a9b2:	4618      	mov	r0, r3
 800a9b4:	f000 fd78 	bl	800b4a8 <RCC_SetFlashLatencyFromMSIRange>
 800a9b8:	4603      	mov	r3, r0
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d001      	beq.n	800a9c2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800a9be:	2301      	movs	r3, #1
 800a9c0:	e3c9      	b.n	800b156 <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800a9c2:	4b7d      	ldr	r3, [pc, #500]	; (800abb8 <HAL_RCC_OscConfig+0x298>)
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	4a7c      	ldr	r2, [pc, #496]	; (800abb8 <HAL_RCC_OscConfig+0x298>)
 800a9c8:	f043 0308 	orr.w	r3, r3, #8
 800a9cc:	6013      	str	r3, [r2, #0]
 800a9ce:	4b7a      	ldr	r3, [pc, #488]	; (800abb8 <HAL_RCC_OscConfig+0x298>)
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	6a1b      	ldr	r3, [r3, #32]
 800a9da:	4977      	ldr	r1, [pc, #476]	; (800abb8 <HAL_RCC_OscConfig+0x298>)
 800a9dc:	4313      	orrs	r3, r2
 800a9de:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a9e0:	4b75      	ldr	r3, [pc, #468]	; (800abb8 <HAL_RCC_OscConfig+0x298>)
 800a9e2:	685b      	ldr	r3, [r3, #4]
 800a9e4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	69db      	ldr	r3, [r3, #28]
 800a9ec:	021b      	lsls	r3, r3, #8
 800a9ee:	4972      	ldr	r1, [pc, #456]	; (800abb8 <HAL_RCC_OscConfig+0x298>)
 800a9f0:	4313      	orrs	r3, r2
 800a9f2:	604b      	str	r3, [r1, #4]
 800a9f4:	e025      	b.n	800aa42 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800a9f6:	4b70      	ldr	r3, [pc, #448]	; (800abb8 <HAL_RCC_OscConfig+0x298>)
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	4a6f      	ldr	r2, [pc, #444]	; (800abb8 <HAL_RCC_OscConfig+0x298>)
 800a9fc:	f043 0308 	orr.w	r3, r3, #8
 800aa00:	6013      	str	r3, [r2, #0]
 800aa02:	4b6d      	ldr	r3, [pc, #436]	; (800abb8 <HAL_RCC_OscConfig+0x298>)
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	6a1b      	ldr	r3, [r3, #32]
 800aa0e:	496a      	ldr	r1, [pc, #424]	; (800abb8 <HAL_RCC_OscConfig+0x298>)
 800aa10:	4313      	orrs	r3, r2
 800aa12:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800aa14:	4b68      	ldr	r3, [pc, #416]	; (800abb8 <HAL_RCC_OscConfig+0x298>)
 800aa16:	685b      	ldr	r3, [r3, #4]
 800aa18:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	69db      	ldr	r3, [r3, #28]
 800aa20:	021b      	lsls	r3, r3, #8
 800aa22:	4965      	ldr	r1, [pc, #404]	; (800abb8 <HAL_RCC_OscConfig+0x298>)
 800aa24:	4313      	orrs	r3, r2
 800aa26:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800aa28:	69bb      	ldr	r3, [r7, #24]
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d109      	bne.n	800aa42 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	6a1b      	ldr	r3, [r3, #32]
 800aa32:	4618      	mov	r0, r3
 800aa34:	f000 fd38 	bl	800b4a8 <RCC_SetFlashLatencyFromMSIRange>
 800aa38:	4603      	mov	r3, r0
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d001      	beq.n	800aa42 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800aa3e:	2301      	movs	r3, #1
 800aa40:	e389      	b.n	800b156 <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800aa42:	f000 fc6f 	bl	800b324 <HAL_RCC_GetSysClockFreq>
 800aa46:	4601      	mov	r1, r0
 800aa48:	4b5b      	ldr	r3, [pc, #364]	; (800abb8 <HAL_RCC_OscConfig+0x298>)
 800aa4a:	689b      	ldr	r3, [r3, #8]
 800aa4c:	091b      	lsrs	r3, r3, #4
 800aa4e:	f003 030f 	and.w	r3, r3, #15
 800aa52:	4a5a      	ldr	r2, [pc, #360]	; (800abbc <HAL_RCC_OscConfig+0x29c>)
 800aa54:	5cd3      	ldrb	r3, [r2, r3]
 800aa56:	f003 031f 	and.w	r3, r3, #31
 800aa5a:	fa21 f303 	lsr.w	r3, r1, r3
 800aa5e:	4a58      	ldr	r2, [pc, #352]	; (800abc0 <HAL_RCC_OscConfig+0x2a0>)
 800aa60:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800aa62:	4b58      	ldr	r3, [pc, #352]	; (800abc4 <HAL_RCC_OscConfig+0x2a4>)
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	4618      	mov	r0, r3
 800aa68:	f7fd fc5a 	bl	8008320 <HAL_InitTick>
 800aa6c:	4603      	mov	r3, r0
 800aa6e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800aa70:	7bfb      	ldrb	r3, [r7, #15]
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d052      	beq.n	800ab1c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800aa76:	7bfb      	ldrb	r3, [r7, #15]
 800aa78:	e36d      	b.n	800b156 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	699b      	ldr	r3, [r3, #24]
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d032      	beq.n	800aae8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800aa82:	4b4d      	ldr	r3, [pc, #308]	; (800abb8 <HAL_RCC_OscConfig+0x298>)
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	4a4c      	ldr	r2, [pc, #304]	; (800abb8 <HAL_RCC_OscConfig+0x298>)
 800aa88:	f043 0301 	orr.w	r3, r3, #1
 800aa8c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800aa8e:	f7fd fc93 	bl	80083b8 <HAL_GetTick>
 800aa92:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800aa94:	e008      	b.n	800aaa8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800aa96:	f7fd fc8f 	bl	80083b8 <HAL_GetTick>
 800aa9a:	4602      	mov	r2, r0
 800aa9c:	693b      	ldr	r3, [r7, #16]
 800aa9e:	1ad3      	subs	r3, r2, r3
 800aaa0:	2b02      	cmp	r3, #2
 800aaa2:	d901      	bls.n	800aaa8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800aaa4:	2303      	movs	r3, #3
 800aaa6:	e356      	b.n	800b156 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800aaa8:	4b43      	ldr	r3, [pc, #268]	; (800abb8 <HAL_RCC_OscConfig+0x298>)
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	f003 0302 	and.w	r3, r3, #2
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d0f0      	beq.n	800aa96 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800aab4:	4b40      	ldr	r3, [pc, #256]	; (800abb8 <HAL_RCC_OscConfig+0x298>)
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	4a3f      	ldr	r2, [pc, #252]	; (800abb8 <HAL_RCC_OscConfig+0x298>)
 800aaba:	f043 0308 	orr.w	r3, r3, #8
 800aabe:	6013      	str	r3, [r2, #0]
 800aac0:	4b3d      	ldr	r3, [pc, #244]	; (800abb8 <HAL_RCC_OscConfig+0x298>)
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	6a1b      	ldr	r3, [r3, #32]
 800aacc:	493a      	ldr	r1, [pc, #232]	; (800abb8 <HAL_RCC_OscConfig+0x298>)
 800aace:	4313      	orrs	r3, r2
 800aad0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800aad2:	4b39      	ldr	r3, [pc, #228]	; (800abb8 <HAL_RCC_OscConfig+0x298>)
 800aad4:	685b      	ldr	r3, [r3, #4]
 800aad6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	69db      	ldr	r3, [r3, #28]
 800aade:	021b      	lsls	r3, r3, #8
 800aae0:	4935      	ldr	r1, [pc, #212]	; (800abb8 <HAL_RCC_OscConfig+0x298>)
 800aae2:	4313      	orrs	r3, r2
 800aae4:	604b      	str	r3, [r1, #4]
 800aae6:	e01a      	b.n	800ab1e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800aae8:	4b33      	ldr	r3, [pc, #204]	; (800abb8 <HAL_RCC_OscConfig+0x298>)
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	4a32      	ldr	r2, [pc, #200]	; (800abb8 <HAL_RCC_OscConfig+0x298>)
 800aaee:	f023 0301 	bic.w	r3, r3, #1
 800aaf2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800aaf4:	f7fd fc60 	bl	80083b8 <HAL_GetTick>
 800aaf8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800aafa:	e008      	b.n	800ab0e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800aafc:	f7fd fc5c 	bl	80083b8 <HAL_GetTick>
 800ab00:	4602      	mov	r2, r0
 800ab02:	693b      	ldr	r3, [r7, #16]
 800ab04:	1ad3      	subs	r3, r2, r3
 800ab06:	2b02      	cmp	r3, #2
 800ab08:	d901      	bls.n	800ab0e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800ab0a:	2303      	movs	r3, #3
 800ab0c:	e323      	b.n	800b156 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800ab0e:	4b2a      	ldr	r3, [pc, #168]	; (800abb8 <HAL_RCC_OscConfig+0x298>)
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	f003 0302 	and.w	r3, r3, #2
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d1f0      	bne.n	800aafc <HAL_RCC_OscConfig+0x1dc>
 800ab1a:	e000      	b.n	800ab1e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800ab1c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	f003 0301 	and.w	r3, r3, #1
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d073      	beq.n	800ac12 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800ab2a:	69bb      	ldr	r3, [r7, #24]
 800ab2c:	2b08      	cmp	r3, #8
 800ab2e:	d005      	beq.n	800ab3c <HAL_RCC_OscConfig+0x21c>
 800ab30:	69bb      	ldr	r3, [r7, #24]
 800ab32:	2b0c      	cmp	r3, #12
 800ab34:	d10e      	bne.n	800ab54 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800ab36:	697b      	ldr	r3, [r7, #20]
 800ab38:	2b03      	cmp	r3, #3
 800ab3a:	d10b      	bne.n	800ab54 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ab3c:	4b1e      	ldr	r3, [pc, #120]	; (800abb8 <HAL_RCC_OscConfig+0x298>)
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d063      	beq.n	800ac10 <HAL_RCC_OscConfig+0x2f0>
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	685b      	ldr	r3, [r3, #4]
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d15f      	bne.n	800ac10 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800ab50:	2301      	movs	r3, #1
 800ab52:	e300      	b.n	800b156 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	685b      	ldr	r3, [r3, #4]
 800ab58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ab5c:	d106      	bne.n	800ab6c <HAL_RCC_OscConfig+0x24c>
 800ab5e:	4b16      	ldr	r3, [pc, #88]	; (800abb8 <HAL_RCC_OscConfig+0x298>)
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	4a15      	ldr	r2, [pc, #84]	; (800abb8 <HAL_RCC_OscConfig+0x298>)
 800ab64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ab68:	6013      	str	r3, [r2, #0]
 800ab6a:	e01d      	b.n	800aba8 <HAL_RCC_OscConfig+0x288>
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	685b      	ldr	r3, [r3, #4]
 800ab70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ab74:	d10c      	bne.n	800ab90 <HAL_RCC_OscConfig+0x270>
 800ab76:	4b10      	ldr	r3, [pc, #64]	; (800abb8 <HAL_RCC_OscConfig+0x298>)
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	4a0f      	ldr	r2, [pc, #60]	; (800abb8 <HAL_RCC_OscConfig+0x298>)
 800ab7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ab80:	6013      	str	r3, [r2, #0]
 800ab82:	4b0d      	ldr	r3, [pc, #52]	; (800abb8 <HAL_RCC_OscConfig+0x298>)
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	4a0c      	ldr	r2, [pc, #48]	; (800abb8 <HAL_RCC_OscConfig+0x298>)
 800ab88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ab8c:	6013      	str	r3, [r2, #0]
 800ab8e:	e00b      	b.n	800aba8 <HAL_RCC_OscConfig+0x288>
 800ab90:	4b09      	ldr	r3, [pc, #36]	; (800abb8 <HAL_RCC_OscConfig+0x298>)
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	4a08      	ldr	r2, [pc, #32]	; (800abb8 <HAL_RCC_OscConfig+0x298>)
 800ab96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ab9a:	6013      	str	r3, [r2, #0]
 800ab9c:	4b06      	ldr	r3, [pc, #24]	; (800abb8 <HAL_RCC_OscConfig+0x298>)
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	4a05      	ldr	r2, [pc, #20]	; (800abb8 <HAL_RCC_OscConfig+0x298>)
 800aba2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800aba6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	685b      	ldr	r3, [r3, #4]
 800abac:	2b00      	cmp	r3, #0
 800abae:	d01b      	beq.n	800abe8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800abb0:	f7fd fc02 	bl	80083b8 <HAL_GetTick>
 800abb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800abb6:	e010      	b.n	800abda <HAL_RCC_OscConfig+0x2ba>
 800abb8:	40021000 	.word	0x40021000
 800abbc:	08011714 	.word	0x08011714
 800abc0:	20000000 	.word	0x20000000
 800abc4:	200000e4 	.word	0x200000e4
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800abc8:	f7fd fbf6 	bl	80083b8 <HAL_GetTick>
 800abcc:	4602      	mov	r2, r0
 800abce:	693b      	ldr	r3, [r7, #16]
 800abd0:	1ad3      	subs	r3, r2, r3
 800abd2:	2b64      	cmp	r3, #100	; 0x64
 800abd4:	d901      	bls.n	800abda <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800abd6:	2303      	movs	r3, #3
 800abd8:	e2bd      	b.n	800b156 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800abda:	4baf      	ldr	r3, [pc, #700]	; (800ae98 <HAL_RCC_OscConfig+0x578>)
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d0f0      	beq.n	800abc8 <HAL_RCC_OscConfig+0x2a8>
 800abe6:	e014      	b.n	800ac12 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800abe8:	f7fd fbe6 	bl	80083b8 <HAL_GetTick>
 800abec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800abee:	e008      	b.n	800ac02 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800abf0:	f7fd fbe2 	bl	80083b8 <HAL_GetTick>
 800abf4:	4602      	mov	r2, r0
 800abf6:	693b      	ldr	r3, [r7, #16]
 800abf8:	1ad3      	subs	r3, r2, r3
 800abfa:	2b64      	cmp	r3, #100	; 0x64
 800abfc:	d901      	bls.n	800ac02 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800abfe:	2303      	movs	r3, #3
 800ac00:	e2a9      	b.n	800b156 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800ac02:	4ba5      	ldr	r3, [pc, #660]	; (800ae98 <HAL_RCC_OscConfig+0x578>)
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d1f0      	bne.n	800abf0 <HAL_RCC_OscConfig+0x2d0>
 800ac0e:	e000      	b.n	800ac12 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ac10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	f003 0302 	and.w	r3, r3, #2
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d060      	beq.n	800ace0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800ac1e:	69bb      	ldr	r3, [r7, #24]
 800ac20:	2b04      	cmp	r3, #4
 800ac22:	d005      	beq.n	800ac30 <HAL_RCC_OscConfig+0x310>
 800ac24:	69bb      	ldr	r3, [r7, #24]
 800ac26:	2b0c      	cmp	r3, #12
 800ac28:	d119      	bne.n	800ac5e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800ac2a:	697b      	ldr	r3, [r7, #20]
 800ac2c:	2b02      	cmp	r3, #2
 800ac2e:	d116      	bne.n	800ac5e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800ac30:	4b99      	ldr	r3, [pc, #612]	; (800ae98 <HAL_RCC_OscConfig+0x578>)
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d005      	beq.n	800ac48 <HAL_RCC_OscConfig+0x328>
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	68db      	ldr	r3, [r3, #12]
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d101      	bne.n	800ac48 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800ac44:	2301      	movs	r3, #1
 800ac46:	e286      	b.n	800b156 <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ac48:	4b93      	ldr	r3, [pc, #588]	; (800ae98 <HAL_RCC_OscConfig+0x578>)
 800ac4a:	685b      	ldr	r3, [r3, #4]
 800ac4c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	691b      	ldr	r3, [r3, #16]
 800ac54:	061b      	lsls	r3, r3, #24
 800ac56:	4990      	ldr	r1, [pc, #576]	; (800ae98 <HAL_RCC_OscConfig+0x578>)
 800ac58:	4313      	orrs	r3, r2
 800ac5a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800ac5c:	e040      	b.n	800ace0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	68db      	ldr	r3, [r3, #12]
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d023      	beq.n	800acae <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800ac66:	4b8c      	ldr	r3, [pc, #560]	; (800ae98 <HAL_RCC_OscConfig+0x578>)
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	4a8b      	ldr	r2, [pc, #556]	; (800ae98 <HAL_RCC_OscConfig+0x578>)
 800ac6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ac70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ac72:	f7fd fba1 	bl	80083b8 <HAL_GetTick>
 800ac76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800ac78:	e008      	b.n	800ac8c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ac7a:	f7fd fb9d 	bl	80083b8 <HAL_GetTick>
 800ac7e:	4602      	mov	r2, r0
 800ac80:	693b      	ldr	r3, [r7, #16]
 800ac82:	1ad3      	subs	r3, r2, r3
 800ac84:	2b02      	cmp	r3, #2
 800ac86:	d901      	bls.n	800ac8c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800ac88:	2303      	movs	r3, #3
 800ac8a:	e264      	b.n	800b156 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800ac8c:	4b82      	ldr	r3, [pc, #520]	; (800ae98 <HAL_RCC_OscConfig+0x578>)
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d0f0      	beq.n	800ac7a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ac98:	4b7f      	ldr	r3, [pc, #508]	; (800ae98 <HAL_RCC_OscConfig+0x578>)
 800ac9a:	685b      	ldr	r3, [r3, #4]
 800ac9c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	691b      	ldr	r3, [r3, #16]
 800aca4:	061b      	lsls	r3, r3, #24
 800aca6:	497c      	ldr	r1, [pc, #496]	; (800ae98 <HAL_RCC_OscConfig+0x578>)
 800aca8:	4313      	orrs	r3, r2
 800acaa:	604b      	str	r3, [r1, #4]
 800acac:	e018      	b.n	800ace0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800acae:	4b7a      	ldr	r3, [pc, #488]	; (800ae98 <HAL_RCC_OscConfig+0x578>)
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	4a79      	ldr	r2, [pc, #484]	; (800ae98 <HAL_RCC_OscConfig+0x578>)
 800acb4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800acb8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800acba:	f7fd fb7d 	bl	80083b8 <HAL_GetTick>
 800acbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800acc0:	e008      	b.n	800acd4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800acc2:	f7fd fb79 	bl	80083b8 <HAL_GetTick>
 800acc6:	4602      	mov	r2, r0
 800acc8:	693b      	ldr	r3, [r7, #16]
 800acca:	1ad3      	subs	r3, r2, r3
 800accc:	2b02      	cmp	r3, #2
 800acce:	d901      	bls.n	800acd4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800acd0:	2303      	movs	r3, #3
 800acd2:	e240      	b.n	800b156 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800acd4:	4b70      	ldr	r3, [pc, #448]	; (800ae98 <HAL_RCC_OscConfig+0x578>)
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d1f0      	bne.n	800acc2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	f003 0308 	and.w	r3, r3, #8
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d03c      	beq.n	800ad66 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	695b      	ldr	r3, [r3, #20]
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d01c      	beq.n	800ad2e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800acf4:	4b68      	ldr	r3, [pc, #416]	; (800ae98 <HAL_RCC_OscConfig+0x578>)
 800acf6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800acfa:	4a67      	ldr	r2, [pc, #412]	; (800ae98 <HAL_RCC_OscConfig+0x578>)
 800acfc:	f043 0301 	orr.w	r3, r3, #1
 800ad00:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ad04:	f7fd fb58 	bl	80083b8 <HAL_GetTick>
 800ad08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800ad0a:	e008      	b.n	800ad1e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ad0c:	f7fd fb54 	bl	80083b8 <HAL_GetTick>
 800ad10:	4602      	mov	r2, r0
 800ad12:	693b      	ldr	r3, [r7, #16]
 800ad14:	1ad3      	subs	r3, r2, r3
 800ad16:	2b02      	cmp	r3, #2
 800ad18:	d901      	bls.n	800ad1e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800ad1a:	2303      	movs	r3, #3
 800ad1c:	e21b      	b.n	800b156 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800ad1e:	4b5e      	ldr	r3, [pc, #376]	; (800ae98 <HAL_RCC_OscConfig+0x578>)
 800ad20:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ad24:	f003 0302 	and.w	r3, r3, #2
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d0ef      	beq.n	800ad0c <HAL_RCC_OscConfig+0x3ec>
 800ad2c:	e01b      	b.n	800ad66 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ad2e:	4b5a      	ldr	r3, [pc, #360]	; (800ae98 <HAL_RCC_OscConfig+0x578>)
 800ad30:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ad34:	4a58      	ldr	r2, [pc, #352]	; (800ae98 <HAL_RCC_OscConfig+0x578>)
 800ad36:	f023 0301 	bic.w	r3, r3, #1
 800ad3a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ad3e:	f7fd fb3b 	bl	80083b8 <HAL_GetTick>
 800ad42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800ad44:	e008      	b.n	800ad58 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ad46:	f7fd fb37 	bl	80083b8 <HAL_GetTick>
 800ad4a:	4602      	mov	r2, r0
 800ad4c:	693b      	ldr	r3, [r7, #16]
 800ad4e:	1ad3      	subs	r3, r2, r3
 800ad50:	2b02      	cmp	r3, #2
 800ad52:	d901      	bls.n	800ad58 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800ad54:	2303      	movs	r3, #3
 800ad56:	e1fe      	b.n	800b156 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800ad58:	4b4f      	ldr	r3, [pc, #316]	; (800ae98 <HAL_RCC_OscConfig+0x578>)
 800ad5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ad5e:	f003 0302 	and.w	r3, r3, #2
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d1ef      	bne.n	800ad46 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	f003 0304 	and.w	r3, r3, #4
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	f000 80a6 	beq.w	800aec0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ad74:	2300      	movs	r3, #0
 800ad76:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800ad78:	4b47      	ldr	r3, [pc, #284]	; (800ae98 <HAL_RCC_OscConfig+0x578>)
 800ad7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d10d      	bne.n	800ada0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ad84:	4b44      	ldr	r3, [pc, #272]	; (800ae98 <HAL_RCC_OscConfig+0x578>)
 800ad86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad88:	4a43      	ldr	r2, [pc, #268]	; (800ae98 <HAL_RCC_OscConfig+0x578>)
 800ad8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ad8e:	6593      	str	r3, [r2, #88]	; 0x58
 800ad90:	4b41      	ldr	r3, [pc, #260]	; (800ae98 <HAL_RCC_OscConfig+0x578>)
 800ad92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ad98:	60bb      	str	r3, [r7, #8]
 800ad9a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800ad9c:	2301      	movs	r3, #1
 800ad9e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ada0:	4b3e      	ldr	r3, [pc, #248]	; (800ae9c <HAL_RCC_OscConfig+0x57c>)
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d118      	bne.n	800adde <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800adac:	4b3b      	ldr	r3, [pc, #236]	; (800ae9c <HAL_RCC_OscConfig+0x57c>)
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	4a3a      	ldr	r2, [pc, #232]	; (800ae9c <HAL_RCC_OscConfig+0x57c>)
 800adb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800adb6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800adb8:	f7fd fafe 	bl	80083b8 <HAL_GetTick>
 800adbc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800adbe:	e008      	b.n	800add2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800adc0:	f7fd fafa 	bl	80083b8 <HAL_GetTick>
 800adc4:	4602      	mov	r2, r0
 800adc6:	693b      	ldr	r3, [r7, #16]
 800adc8:	1ad3      	subs	r3, r2, r3
 800adca:	2b02      	cmp	r3, #2
 800adcc:	d901      	bls.n	800add2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800adce:	2303      	movs	r3, #3
 800add0:	e1c1      	b.n	800b156 <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800add2:	4b32      	ldr	r3, [pc, #200]	; (800ae9c <HAL_RCC_OscConfig+0x57c>)
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800adda:	2b00      	cmp	r3, #0
 800addc:	d0f0      	beq.n	800adc0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	689b      	ldr	r3, [r3, #8]
 800ade2:	2b01      	cmp	r3, #1
 800ade4:	d108      	bne.n	800adf8 <HAL_RCC_OscConfig+0x4d8>
 800ade6:	4b2c      	ldr	r3, [pc, #176]	; (800ae98 <HAL_RCC_OscConfig+0x578>)
 800ade8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800adec:	4a2a      	ldr	r2, [pc, #168]	; (800ae98 <HAL_RCC_OscConfig+0x578>)
 800adee:	f043 0301 	orr.w	r3, r3, #1
 800adf2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800adf6:	e024      	b.n	800ae42 <HAL_RCC_OscConfig+0x522>
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	689b      	ldr	r3, [r3, #8]
 800adfc:	2b05      	cmp	r3, #5
 800adfe:	d110      	bne.n	800ae22 <HAL_RCC_OscConfig+0x502>
 800ae00:	4b25      	ldr	r3, [pc, #148]	; (800ae98 <HAL_RCC_OscConfig+0x578>)
 800ae02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ae06:	4a24      	ldr	r2, [pc, #144]	; (800ae98 <HAL_RCC_OscConfig+0x578>)
 800ae08:	f043 0304 	orr.w	r3, r3, #4
 800ae0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800ae10:	4b21      	ldr	r3, [pc, #132]	; (800ae98 <HAL_RCC_OscConfig+0x578>)
 800ae12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ae16:	4a20      	ldr	r2, [pc, #128]	; (800ae98 <HAL_RCC_OscConfig+0x578>)
 800ae18:	f043 0301 	orr.w	r3, r3, #1
 800ae1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800ae20:	e00f      	b.n	800ae42 <HAL_RCC_OscConfig+0x522>
 800ae22:	4b1d      	ldr	r3, [pc, #116]	; (800ae98 <HAL_RCC_OscConfig+0x578>)
 800ae24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ae28:	4a1b      	ldr	r2, [pc, #108]	; (800ae98 <HAL_RCC_OscConfig+0x578>)
 800ae2a:	f023 0301 	bic.w	r3, r3, #1
 800ae2e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800ae32:	4b19      	ldr	r3, [pc, #100]	; (800ae98 <HAL_RCC_OscConfig+0x578>)
 800ae34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ae38:	4a17      	ldr	r2, [pc, #92]	; (800ae98 <HAL_RCC_OscConfig+0x578>)
 800ae3a:	f023 0304 	bic.w	r3, r3, #4
 800ae3e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	689b      	ldr	r3, [r3, #8]
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d016      	beq.n	800ae78 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ae4a:	f7fd fab5 	bl	80083b8 <HAL_GetTick>
 800ae4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800ae50:	e00a      	b.n	800ae68 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ae52:	f7fd fab1 	bl	80083b8 <HAL_GetTick>
 800ae56:	4602      	mov	r2, r0
 800ae58:	693b      	ldr	r3, [r7, #16]
 800ae5a:	1ad3      	subs	r3, r2, r3
 800ae5c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ae60:	4293      	cmp	r3, r2
 800ae62:	d901      	bls.n	800ae68 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800ae64:	2303      	movs	r3, #3
 800ae66:	e176      	b.n	800b156 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800ae68:	4b0b      	ldr	r3, [pc, #44]	; (800ae98 <HAL_RCC_OscConfig+0x578>)
 800ae6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ae6e:	f003 0302 	and.w	r3, r3, #2
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d0ed      	beq.n	800ae52 <HAL_RCC_OscConfig+0x532>
 800ae76:	e01a      	b.n	800aeae <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ae78:	f7fd fa9e 	bl	80083b8 <HAL_GetTick>
 800ae7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800ae7e:	e00f      	b.n	800aea0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ae80:	f7fd fa9a 	bl	80083b8 <HAL_GetTick>
 800ae84:	4602      	mov	r2, r0
 800ae86:	693b      	ldr	r3, [r7, #16]
 800ae88:	1ad3      	subs	r3, r2, r3
 800ae8a:	f241 3288 	movw	r2, #5000	; 0x1388
 800ae8e:	4293      	cmp	r3, r2
 800ae90:	d906      	bls.n	800aea0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800ae92:	2303      	movs	r3, #3
 800ae94:	e15f      	b.n	800b156 <HAL_RCC_OscConfig+0x836>
 800ae96:	bf00      	nop
 800ae98:	40021000 	.word	0x40021000
 800ae9c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800aea0:	4baa      	ldr	r3, [pc, #680]	; (800b14c <HAL_RCC_OscConfig+0x82c>)
 800aea2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aea6:	f003 0302 	and.w	r3, r3, #2
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d1e8      	bne.n	800ae80 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800aeae:	7ffb      	ldrb	r3, [r7, #31]
 800aeb0:	2b01      	cmp	r3, #1
 800aeb2:	d105      	bne.n	800aec0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800aeb4:	4ba5      	ldr	r3, [pc, #660]	; (800b14c <HAL_RCC_OscConfig+0x82c>)
 800aeb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aeb8:	4aa4      	ldr	r2, [pc, #656]	; (800b14c <HAL_RCC_OscConfig+0x82c>)
 800aeba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800aebe:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	f003 0320 	and.w	r3, r3, #32
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d03c      	beq.n	800af46 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d01c      	beq.n	800af0e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800aed4:	4b9d      	ldr	r3, [pc, #628]	; (800b14c <HAL_RCC_OscConfig+0x82c>)
 800aed6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800aeda:	4a9c      	ldr	r2, [pc, #624]	; (800b14c <HAL_RCC_OscConfig+0x82c>)
 800aedc:	f043 0301 	orr.w	r3, r3, #1
 800aee0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aee4:	f7fd fa68 	bl	80083b8 <HAL_GetTick>
 800aee8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800aeea:	e008      	b.n	800aefe <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800aeec:	f7fd fa64 	bl	80083b8 <HAL_GetTick>
 800aef0:	4602      	mov	r2, r0
 800aef2:	693b      	ldr	r3, [r7, #16]
 800aef4:	1ad3      	subs	r3, r2, r3
 800aef6:	2b02      	cmp	r3, #2
 800aef8:	d901      	bls.n	800aefe <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800aefa:	2303      	movs	r3, #3
 800aefc:	e12b      	b.n	800b156 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800aefe:	4b93      	ldr	r3, [pc, #588]	; (800b14c <HAL_RCC_OscConfig+0x82c>)
 800af00:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800af04:	f003 0302 	and.w	r3, r3, #2
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d0ef      	beq.n	800aeec <HAL_RCC_OscConfig+0x5cc>
 800af0c:	e01b      	b.n	800af46 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800af0e:	4b8f      	ldr	r3, [pc, #572]	; (800b14c <HAL_RCC_OscConfig+0x82c>)
 800af10:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800af14:	4a8d      	ldr	r2, [pc, #564]	; (800b14c <HAL_RCC_OscConfig+0x82c>)
 800af16:	f023 0301 	bic.w	r3, r3, #1
 800af1a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800af1e:	f7fd fa4b 	bl	80083b8 <HAL_GetTick>
 800af22:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800af24:	e008      	b.n	800af38 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800af26:	f7fd fa47 	bl	80083b8 <HAL_GetTick>
 800af2a:	4602      	mov	r2, r0
 800af2c:	693b      	ldr	r3, [r7, #16]
 800af2e:	1ad3      	subs	r3, r2, r3
 800af30:	2b02      	cmp	r3, #2
 800af32:	d901      	bls.n	800af38 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800af34:	2303      	movs	r3, #3
 800af36:	e10e      	b.n	800b156 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800af38:	4b84      	ldr	r3, [pc, #528]	; (800b14c <HAL_RCC_OscConfig+0x82c>)
 800af3a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800af3e:	f003 0302 	and.w	r3, r3, #2
 800af42:	2b00      	cmp	r3, #0
 800af44:	d1ef      	bne.n	800af26 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	f000 8102 	beq.w	800b154 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af54:	2b02      	cmp	r3, #2
 800af56:	f040 80c5 	bne.w	800b0e4 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800af5a:	4b7c      	ldr	r3, [pc, #496]	; (800b14c <HAL_RCC_OscConfig+0x82c>)
 800af5c:	68db      	ldr	r3, [r3, #12]
 800af5e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800af60:	697b      	ldr	r3, [r7, #20]
 800af62:	f003 0203 	and.w	r2, r3, #3
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af6a:	429a      	cmp	r2, r3
 800af6c:	d12c      	bne.n	800afc8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800af6e:	697b      	ldr	r3, [r7, #20]
 800af70:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af78:	3b01      	subs	r3, #1
 800af7a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800af7c:	429a      	cmp	r2, r3
 800af7e:	d123      	bne.n	800afc8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800af80:	697b      	ldr	r3, [r7, #20]
 800af82:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af8a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800af8c:	429a      	cmp	r2, r3
 800af8e:	d11b      	bne.n	800afc8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800af90:	697b      	ldr	r3, [r7, #20]
 800af92:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af9a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800af9c:	429a      	cmp	r2, r3
 800af9e:	d113      	bne.n	800afc8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800afa0:	697b      	ldr	r3, [r7, #20]
 800afa2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800afaa:	085b      	lsrs	r3, r3, #1
 800afac:	3b01      	subs	r3, #1
 800afae:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800afb0:	429a      	cmp	r2, r3
 800afb2:	d109      	bne.n	800afc8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800afb4:	697b      	ldr	r3, [r7, #20]
 800afb6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afbe:	085b      	lsrs	r3, r3, #1
 800afc0:	3b01      	subs	r3, #1
 800afc2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800afc4:	429a      	cmp	r2, r3
 800afc6:	d067      	beq.n	800b098 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800afc8:	69bb      	ldr	r3, [r7, #24]
 800afca:	2b0c      	cmp	r3, #12
 800afcc:	d062      	beq.n	800b094 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800afce:	4b5f      	ldr	r3, [pc, #380]	; (800b14c <HAL_RCC_OscConfig+0x82c>)
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d001      	beq.n	800afde <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800afda:	2301      	movs	r3, #1
 800afdc:	e0bb      	b.n	800b156 <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800afde:	4b5b      	ldr	r3, [pc, #364]	; (800b14c <HAL_RCC_OscConfig+0x82c>)
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	4a5a      	ldr	r2, [pc, #360]	; (800b14c <HAL_RCC_OscConfig+0x82c>)
 800afe4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800afe8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800afea:	f7fd f9e5 	bl	80083b8 <HAL_GetTick>
 800afee:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800aff0:	e008      	b.n	800b004 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800aff2:	f7fd f9e1 	bl	80083b8 <HAL_GetTick>
 800aff6:	4602      	mov	r2, r0
 800aff8:	693b      	ldr	r3, [r7, #16]
 800affa:	1ad3      	subs	r3, r2, r3
 800affc:	2b02      	cmp	r3, #2
 800affe:	d901      	bls.n	800b004 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800b000:	2303      	movs	r3, #3
 800b002:	e0a8      	b.n	800b156 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b004:	4b51      	ldr	r3, [pc, #324]	; (800b14c <HAL_RCC_OscConfig+0x82c>)
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d1f0      	bne.n	800aff2 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b010:	4b4e      	ldr	r3, [pc, #312]	; (800b14c <HAL_RCC_OscConfig+0x82c>)
 800b012:	68da      	ldr	r2, [r3, #12]
 800b014:	4b4e      	ldr	r3, [pc, #312]	; (800b150 <HAL_RCC_OscConfig+0x830>)
 800b016:	4013      	ands	r3, r2
 800b018:	687a      	ldr	r2, [r7, #4]
 800b01a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800b01c:	687a      	ldr	r2, [r7, #4]
 800b01e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800b020:	3a01      	subs	r2, #1
 800b022:	0112      	lsls	r2, r2, #4
 800b024:	4311      	orrs	r1, r2
 800b026:	687a      	ldr	r2, [r7, #4]
 800b028:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800b02a:	0212      	lsls	r2, r2, #8
 800b02c:	4311      	orrs	r1, r2
 800b02e:	687a      	ldr	r2, [r7, #4]
 800b030:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800b032:	0852      	lsrs	r2, r2, #1
 800b034:	3a01      	subs	r2, #1
 800b036:	0552      	lsls	r2, r2, #21
 800b038:	4311      	orrs	r1, r2
 800b03a:	687a      	ldr	r2, [r7, #4]
 800b03c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800b03e:	0852      	lsrs	r2, r2, #1
 800b040:	3a01      	subs	r2, #1
 800b042:	0652      	lsls	r2, r2, #25
 800b044:	4311      	orrs	r1, r2
 800b046:	687a      	ldr	r2, [r7, #4]
 800b048:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800b04a:	06d2      	lsls	r2, r2, #27
 800b04c:	430a      	orrs	r2, r1
 800b04e:	493f      	ldr	r1, [pc, #252]	; (800b14c <HAL_RCC_OscConfig+0x82c>)
 800b050:	4313      	orrs	r3, r2
 800b052:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800b054:	4b3d      	ldr	r3, [pc, #244]	; (800b14c <HAL_RCC_OscConfig+0x82c>)
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	4a3c      	ldr	r2, [pc, #240]	; (800b14c <HAL_RCC_OscConfig+0x82c>)
 800b05a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b05e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800b060:	4b3a      	ldr	r3, [pc, #232]	; (800b14c <HAL_RCC_OscConfig+0x82c>)
 800b062:	68db      	ldr	r3, [r3, #12]
 800b064:	4a39      	ldr	r2, [pc, #228]	; (800b14c <HAL_RCC_OscConfig+0x82c>)
 800b066:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b06a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800b06c:	f7fd f9a4 	bl	80083b8 <HAL_GetTick>
 800b070:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b072:	e008      	b.n	800b086 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b074:	f7fd f9a0 	bl	80083b8 <HAL_GetTick>
 800b078:	4602      	mov	r2, r0
 800b07a:	693b      	ldr	r3, [r7, #16]
 800b07c:	1ad3      	subs	r3, r2, r3
 800b07e:	2b02      	cmp	r3, #2
 800b080:	d901      	bls.n	800b086 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800b082:	2303      	movs	r3, #3
 800b084:	e067      	b.n	800b156 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b086:	4b31      	ldr	r3, [pc, #196]	; (800b14c <HAL_RCC_OscConfig+0x82c>)
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d0f0      	beq.n	800b074 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800b092:	e05f      	b.n	800b154 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800b094:	2301      	movs	r3, #1
 800b096:	e05e      	b.n	800b156 <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b098:	4b2c      	ldr	r3, [pc, #176]	; (800b14c <HAL_RCC_OscConfig+0x82c>)
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d157      	bne.n	800b154 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800b0a4:	4b29      	ldr	r3, [pc, #164]	; (800b14c <HAL_RCC_OscConfig+0x82c>)
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	4a28      	ldr	r2, [pc, #160]	; (800b14c <HAL_RCC_OscConfig+0x82c>)
 800b0aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b0ae:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800b0b0:	4b26      	ldr	r3, [pc, #152]	; (800b14c <HAL_RCC_OscConfig+0x82c>)
 800b0b2:	68db      	ldr	r3, [r3, #12]
 800b0b4:	4a25      	ldr	r2, [pc, #148]	; (800b14c <HAL_RCC_OscConfig+0x82c>)
 800b0b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b0ba:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800b0bc:	f7fd f97c 	bl	80083b8 <HAL_GetTick>
 800b0c0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b0c2:	e008      	b.n	800b0d6 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b0c4:	f7fd f978 	bl	80083b8 <HAL_GetTick>
 800b0c8:	4602      	mov	r2, r0
 800b0ca:	693b      	ldr	r3, [r7, #16]
 800b0cc:	1ad3      	subs	r3, r2, r3
 800b0ce:	2b02      	cmp	r3, #2
 800b0d0:	d901      	bls.n	800b0d6 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 800b0d2:	2303      	movs	r3, #3
 800b0d4:	e03f      	b.n	800b156 <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b0d6:	4b1d      	ldr	r3, [pc, #116]	; (800b14c <HAL_RCC_OscConfig+0x82c>)
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d0f0      	beq.n	800b0c4 <HAL_RCC_OscConfig+0x7a4>
 800b0e2:	e037      	b.n	800b154 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800b0e4:	69bb      	ldr	r3, [r7, #24]
 800b0e6:	2b0c      	cmp	r3, #12
 800b0e8:	d02d      	beq.n	800b146 <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b0ea:	4b18      	ldr	r3, [pc, #96]	; (800b14c <HAL_RCC_OscConfig+0x82c>)
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	4a17      	ldr	r2, [pc, #92]	; (800b14c <HAL_RCC_OscConfig+0x82c>)
 800b0f0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b0f4:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800b0f6:	4b15      	ldr	r3, [pc, #84]	; (800b14c <HAL_RCC_OscConfig+0x82c>)
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d105      	bne.n	800b10e <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800b102:	4b12      	ldr	r3, [pc, #72]	; (800b14c <HAL_RCC_OscConfig+0x82c>)
 800b104:	68db      	ldr	r3, [r3, #12]
 800b106:	4a11      	ldr	r2, [pc, #68]	; (800b14c <HAL_RCC_OscConfig+0x82c>)
 800b108:	f023 0303 	bic.w	r3, r3, #3
 800b10c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800b10e:	4b0f      	ldr	r3, [pc, #60]	; (800b14c <HAL_RCC_OscConfig+0x82c>)
 800b110:	68db      	ldr	r3, [r3, #12]
 800b112:	4a0e      	ldr	r2, [pc, #56]	; (800b14c <HAL_RCC_OscConfig+0x82c>)
 800b114:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800b118:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b11c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b11e:	f7fd f94b 	bl	80083b8 <HAL_GetTick>
 800b122:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b124:	e008      	b.n	800b138 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b126:	f7fd f947 	bl	80083b8 <HAL_GetTick>
 800b12a:	4602      	mov	r2, r0
 800b12c:	693b      	ldr	r3, [r7, #16]
 800b12e:	1ad3      	subs	r3, r2, r3
 800b130:	2b02      	cmp	r3, #2
 800b132:	d901      	bls.n	800b138 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 800b134:	2303      	movs	r3, #3
 800b136:	e00e      	b.n	800b156 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b138:	4b04      	ldr	r3, [pc, #16]	; (800b14c <HAL_RCC_OscConfig+0x82c>)
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b140:	2b00      	cmp	r3, #0
 800b142:	d1f0      	bne.n	800b126 <HAL_RCC_OscConfig+0x806>
 800b144:	e006      	b.n	800b154 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800b146:	2301      	movs	r3, #1
 800b148:	e005      	b.n	800b156 <HAL_RCC_OscConfig+0x836>
 800b14a:	bf00      	nop
 800b14c:	40021000 	.word	0x40021000
 800b150:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 800b154:	2300      	movs	r3, #0
}
 800b156:	4618      	mov	r0, r3
 800b158:	3720      	adds	r7, #32
 800b15a:	46bd      	mov	sp, r7
 800b15c:	bd80      	pop	{r7, pc}
 800b15e:	bf00      	nop

0800b160 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b160:	b580      	push	{r7, lr}
 800b162:	b084      	sub	sp, #16
 800b164:	af00      	add	r7, sp, #0
 800b166:	6078      	str	r0, [r7, #4]
 800b168:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d101      	bne.n	800b174 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b170:	2301      	movs	r3, #1
 800b172:	e0c8      	b.n	800b306 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800b174:	4b66      	ldr	r3, [pc, #408]	; (800b310 <HAL_RCC_ClockConfig+0x1b0>)
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	f003 0307 	and.w	r3, r3, #7
 800b17c:	683a      	ldr	r2, [r7, #0]
 800b17e:	429a      	cmp	r2, r3
 800b180:	d910      	bls.n	800b1a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b182:	4b63      	ldr	r3, [pc, #396]	; (800b310 <HAL_RCC_ClockConfig+0x1b0>)
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	f023 0207 	bic.w	r2, r3, #7
 800b18a:	4961      	ldr	r1, [pc, #388]	; (800b310 <HAL_RCC_ClockConfig+0x1b0>)
 800b18c:	683b      	ldr	r3, [r7, #0]
 800b18e:	4313      	orrs	r3, r2
 800b190:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b192:	4b5f      	ldr	r3, [pc, #380]	; (800b310 <HAL_RCC_ClockConfig+0x1b0>)
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	f003 0307 	and.w	r3, r3, #7
 800b19a:	683a      	ldr	r2, [r7, #0]
 800b19c:	429a      	cmp	r2, r3
 800b19e:	d001      	beq.n	800b1a4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800b1a0:	2301      	movs	r3, #1
 800b1a2:	e0b0      	b.n	800b306 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	f003 0301 	and.w	r3, r3, #1
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d04c      	beq.n	800b24a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	685b      	ldr	r3, [r3, #4]
 800b1b4:	2b03      	cmp	r3, #3
 800b1b6:	d107      	bne.n	800b1c8 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b1b8:	4b56      	ldr	r3, [pc, #344]	; (800b314 <HAL_RCC_ClockConfig+0x1b4>)
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d121      	bne.n	800b208 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800b1c4:	2301      	movs	r3, #1
 800b1c6:	e09e      	b.n	800b306 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	685b      	ldr	r3, [r3, #4]
 800b1cc:	2b02      	cmp	r3, #2
 800b1ce:	d107      	bne.n	800b1e0 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b1d0:	4b50      	ldr	r3, [pc, #320]	; (800b314 <HAL_RCC_ClockConfig+0x1b4>)
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d115      	bne.n	800b208 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800b1dc:	2301      	movs	r3, #1
 800b1de:	e092      	b.n	800b306 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	685b      	ldr	r3, [r3, #4]
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d107      	bne.n	800b1f8 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800b1e8:	4b4a      	ldr	r3, [pc, #296]	; (800b314 <HAL_RCC_ClockConfig+0x1b4>)
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	f003 0302 	and.w	r3, r3, #2
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d109      	bne.n	800b208 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800b1f4:	2301      	movs	r3, #1
 800b1f6:	e086      	b.n	800b306 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b1f8:	4b46      	ldr	r3, [pc, #280]	; (800b314 <HAL_RCC_ClockConfig+0x1b4>)
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b200:	2b00      	cmp	r3, #0
 800b202:	d101      	bne.n	800b208 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800b204:	2301      	movs	r3, #1
 800b206:	e07e      	b.n	800b306 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b208:	4b42      	ldr	r3, [pc, #264]	; (800b314 <HAL_RCC_ClockConfig+0x1b4>)
 800b20a:	689b      	ldr	r3, [r3, #8]
 800b20c:	f023 0203 	bic.w	r2, r3, #3
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	685b      	ldr	r3, [r3, #4]
 800b214:	493f      	ldr	r1, [pc, #252]	; (800b314 <HAL_RCC_ClockConfig+0x1b4>)
 800b216:	4313      	orrs	r3, r2
 800b218:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b21a:	f7fd f8cd 	bl	80083b8 <HAL_GetTick>
 800b21e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b220:	e00a      	b.n	800b238 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b222:	f7fd f8c9 	bl	80083b8 <HAL_GetTick>
 800b226:	4602      	mov	r2, r0
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	1ad3      	subs	r3, r2, r3
 800b22c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b230:	4293      	cmp	r3, r2
 800b232:	d901      	bls.n	800b238 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800b234:	2303      	movs	r3, #3
 800b236:	e066      	b.n	800b306 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b238:	4b36      	ldr	r3, [pc, #216]	; (800b314 <HAL_RCC_ClockConfig+0x1b4>)
 800b23a:	689b      	ldr	r3, [r3, #8]
 800b23c:	f003 020c 	and.w	r2, r3, #12
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	685b      	ldr	r3, [r3, #4]
 800b244:	009b      	lsls	r3, r3, #2
 800b246:	429a      	cmp	r2, r3
 800b248:	d1eb      	bne.n	800b222 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	f003 0302 	and.w	r3, r3, #2
 800b252:	2b00      	cmp	r3, #0
 800b254:	d008      	beq.n	800b268 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b256:	4b2f      	ldr	r3, [pc, #188]	; (800b314 <HAL_RCC_ClockConfig+0x1b4>)
 800b258:	689b      	ldr	r3, [r3, #8]
 800b25a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	689b      	ldr	r3, [r3, #8]
 800b262:	492c      	ldr	r1, [pc, #176]	; (800b314 <HAL_RCC_ClockConfig+0x1b4>)
 800b264:	4313      	orrs	r3, r2
 800b266:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800b268:	4b29      	ldr	r3, [pc, #164]	; (800b310 <HAL_RCC_ClockConfig+0x1b0>)
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	f003 0307 	and.w	r3, r3, #7
 800b270:	683a      	ldr	r2, [r7, #0]
 800b272:	429a      	cmp	r2, r3
 800b274:	d210      	bcs.n	800b298 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b276:	4b26      	ldr	r3, [pc, #152]	; (800b310 <HAL_RCC_ClockConfig+0x1b0>)
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	f023 0207 	bic.w	r2, r3, #7
 800b27e:	4924      	ldr	r1, [pc, #144]	; (800b310 <HAL_RCC_ClockConfig+0x1b0>)
 800b280:	683b      	ldr	r3, [r7, #0]
 800b282:	4313      	orrs	r3, r2
 800b284:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b286:	4b22      	ldr	r3, [pc, #136]	; (800b310 <HAL_RCC_ClockConfig+0x1b0>)
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	f003 0307 	and.w	r3, r3, #7
 800b28e:	683a      	ldr	r2, [r7, #0]
 800b290:	429a      	cmp	r2, r3
 800b292:	d001      	beq.n	800b298 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800b294:	2301      	movs	r3, #1
 800b296:	e036      	b.n	800b306 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	f003 0304 	and.w	r3, r3, #4
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d008      	beq.n	800b2b6 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b2a4:	4b1b      	ldr	r3, [pc, #108]	; (800b314 <HAL_RCC_ClockConfig+0x1b4>)
 800b2a6:	689b      	ldr	r3, [r3, #8]
 800b2a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	68db      	ldr	r3, [r3, #12]
 800b2b0:	4918      	ldr	r1, [pc, #96]	; (800b314 <HAL_RCC_ClockConfig+0x1b4>)
 800b2b2:	4313      	orrs	r3, r2
 800b2b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	f003 0308 	and.w	r3, r3, #8
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d009      	beq.n	800b2d6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800b2c2:	4b14      	ldr	r3, [pc, #80]	; (800b314 <HAL_RCC_ClockConfig+0x1b4>)
 800b2c4:	689b      	ldr	r3, [r3, #8]
 800b2c6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	691b      	ldr	r3, [r3, #16]
 800b2ce:	00db      	lsls	r3, r3, #3
 800b2d0:	4910      	ldr	r1, [pc, #64]	; (800b314 <HAL_RCC_ClockConfig+0x1b4>)
 800b2d2:	4313      	orrs	r3, r2
 800b2d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800b2d6:	f000 f825 	bl	800b324 <HAL_RCC_GetSysClockFreq>
 800b2da:	4601      	mov	r1, r0
 800b2dc:	4b0d      	ldr	r3, [pc, #52]	; (800b314 <HAL_RCC_ClockConfig+0x1b4>)
 800b2de:	689b      	ldr	r3, [r3, #8]
 800b2e0:	091b      	lsrs	r3, r3, #4
 800b2e2:	f003 030f 	and.w	r3, r3, #15
 800b2e6:	4a0c      	ldr	r2, [pc, #48]	; (800b318 <HAL_RCC_ClockConfig+0x1b8>)
 800b2e8:	5cd3      	ldrb	r3, [r2, r3]
 800b2ea:	f003 031f 	and.w	r3, r3, #31
 800b2ee:	fa21 f303 	lsr.w	r3, r1, r3
 800b2f2:	4a0a      	ldr	r2, [pc, #40]	; (800b31c <HAL_RCC_ClockConfig+0x1bc>)
 800b2f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800b2f6:	4b0a      	ldr	r3, [pc, #40]	; (800b320 <HAL_RCC_ClockConfig+0x1c0>)
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	4618      	mov	r0, r3
 800b2fc:	f7fd f810 	bl	8008320 <HAL_InitTick>
 800b300:	4603      	mov	r3, r0
 800b302:	72fb      	strb	r3, [r7, #11]

  return status;
 800b304:	7afb      	ldrb	r3, [r7, #11]
}
 800b306:	4618      	mov	r0, r3
 800b308:	3710      	adds	r7, #16
 800b30a:	46bd      	mov	sp, r7
 800b30c:	bd80      	pop	{r7, pc}
 800b30e:	bf00      	nop
 800b310:	40022000 	.word	0x40022000
 800b314:	40021000 	.word	0x40021000
 800b318:	08011714 	.word	0x08011714
 800b31c:	20000000 	.word	0x20000000
 800b320:	200000e4 	.word	0x200000e4

0800b324 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b324:	b480      	push	{r7}
 800b326:	b089      	sub	sp, #36	; 0x24
 800b328:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800b32a:	2300      	movs	r3, #0
 800b32c:	61fb      	str	r3, [r7, #28]
 800b32e:	2300      	movs	r3, #0
 800b330:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b332:	4b3d      	ldr	r3, [pc, #244]	; (800b428 <HAL_RCC_GetSysClockFreq+0x104>)
 800b334:	689b      	ldr	r3, [r3, #8]
 800b336:	f003 030c 	and.w	r3, r3, #12
 800b33a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b33c:	4b3a      	ldr	r3, [pc, #232]	; (800b428 <HAL_RCC_GetSysClockFreq+0x104>)
 800b33e:	68db      	ldr	r3, [r3, #12]
 800b340:	f003 0303 	and.w	r3, r3, #3
 800b344:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800b346:	693b      	ldr	r3, [r7, #16]
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d005      	beq.n	800b358 <HAL_RCC_GetSysClockFreq+0x34>
 800b34c:	693b      	ldr	r3, [r7, #16]
 800b34e:	2b0c      	cmp	r3, #12
 800b350:	d121      	bne.n	800b396 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	2b01      	cmp	r3, #1
 800b356:	d11e      	bne.n	800b396 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800b358:	4b33      	ldr	r3, [pc, #204]	; (800b428 <HAL_RCC_GetSysClockFreq+0x104>)
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	f003 0308 	and.w	r3, r3, #8
 800b360:	2b00      	cmp	r3, #0
 800b362:	d107      	bne.n	800b374 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800b364:	4b30      	ldr	r3, [pc, #192]	; (800b428 <HAL_RCC_GetSysClockFreq+0x104>)
 800b366:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b36a:	0a1b      	lsrs	r3, r3, #8
 800b36c:	f003 030f 	and.w	r3, r3, #15
 800b370:	61fb      	str	r3, [r7, #28]
 800b372:	e005      	b.n	800b380 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800b374:	4b2c      	ldr	r3, [pc, #176]	; (800b428 <HAL_RCC_GetSysClockFreq+0x104>)
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	091b      	lsrs	r3, r3, #4
 800b37a:	f003 030f 	and.w	r3, r3, #15
 800b37e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800b380:	4a2a      	ldr	r2, [pc, #168]	; (800b42c <HAL_RCC_GetSysClockFreq+0x108>)
 800b382:	69fb      	ldr	r3, [r7, #28]
 800b384:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b388:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800b38a:	693b      	ldr	r3, [r7, #16]
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d10d      	bne.n	800b3ac <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800b390:	69fb      	ldr	r3, [r7, #28]
 800b392:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800b394:	e00a      	b.n	800b3ac <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800b396:	693b      	ldr	r3, [r7, #16]
 800b398:	2b04      	cmp	r3, #4
 800b39a:	d102      	bne.n	800b3a2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800b39c:	4b24      	ldr	r3, [pc, #144]	; (800b430 <HAL_RCC_GetSysClockFreq+0x10c>)
 800b39e:	61bb      	str	r3, [r7, #24]
 800b3a0:	e004      	b.n	800b3ac <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800b3a2:	693b      	ldr	r3, [r7, #16]
 800b3a4:	2b08      	cmp	r3, #8
 800b3a6:	d101      	bne.n	800b3ac <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800b3a8:	4b22      	ldr	r3, [pc, #136]	; (800b434 <HAL_RCC_GetSysClockFreq+0x110>)
 800b3aa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800b3ac:	693b      	ldr	r3, [r7, #16]
 800b3ae:	2b0c      	cmp	r3, #12
 800b3b0:	d133      	bne.n	800b41a <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800b3b2:	4b1d      	ldr	r3, [pc, #116]	; (800b428 <HAL_RCC_GetSysClockFreq+0x104>)
 800b3b4:	68db      	ldr	r3, [r3, #12]
 800b3b6:	f003 0303 	and.w	r3, r3, #3
 800b3ba:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800b3bc:	68bb      	ldr	r3, [r7, #8]
 800b3be:	2b02      	cmp	r3, #2
 800b3c0:	d002      	beq.n	800b3c8 <HAL_RCC_GetSysClockFreq+0xa4>
 800b3c2:	2b03      	cmp	r3, #3
 800b3c4:	d003      	beq.n	800b3ce <HAL_RCC_GetSysClockFreq+0xaa>
 800b3c6:	e005      	b.n	800b3d4 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800b3c8:	4b19      	ldr	r3, [pc, #100]	; (800b430 <HAL_RCC_GetSysClockFreq+0x10c>)
 800b3ca:	617b      	str	r3, [r7, #20]
      break;
 800b3cc:	e005      	b.n	800b3da <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800b3ce:	4b19      	ldr	r3, [pc, #100]	; (800b434 <HAL_RCC_GetSysClockFreq+0x110>)
 800b3d0:	617b      	str	r3, [r7, #20]
      break;
 800b3d2:	e002      	b.n	800b3da <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800b3d4:	69fb      	ldr	r3, [r7, #28]
 800b3d6:	617b      	str	r3, [r7, #20]
      break;
 800b3d8:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800b3da:	4b13      	ldr	r3, [pc, #76]	; (800b428 <HAL_RCC_GetSysClockFreq+0x104>)
 800b3dc:	68db      	ldr	r3, [r3, #12]
 800b3de:	091b      	lsrs	r3, r3, #4
 800b3e0:	f003 0307 	and.w	r3, r3, #7
 800b3e4:	3301      	adds	r3, #1
 800b3e6:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800b3e8:	4b0f      	ldr	r3, [pc, #60]	; (800b428 <HAL_RCC_GetSysClockFreq+0x104>)
 800b3ea:	68db      	ldr	r3, [r3, #12]
 800b3ec:	0a1b      	lsrs	r3, r3, #8
 800b3ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b3f2:	697a      	ldr	r2, [r7, #20]
 800b3f4:	fb02 f203 	mul.w	r2, r2, r3
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	fbb2 f3f3 	udiv	r3, r2, r3
 800b3fe:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800b400:	4b09      	ldr	r3, [pc, #36]	; (800b428 <HAL_RCC_GetSysClockFreq+0x104>)
 800b402:	68db      	ldr	r3, [r3, #12]
 800b404:	0e5b      	lsrs	r3, r3, #25
 800b406:	f003 0303 	and.w	r3, r3, #3
 800b40a:	3301      	adds	r3, #1
 800b40c:	005b      	lsls	r3, r3, #1
 800b40e:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800b410:	697a      	ldr	r2, [r7, #20]
 800b412:	683b      	ldr	r3, [r7, #0]
 800b414:	fbb2 f3f3 	udiv	r3, r2, r3
 800b418:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800b41a:	69bb      	ldr	r3, [r7, #24]
}
 800b41c:	4618      	mov	r0, r3
 800b41e:	3724      	adds	r7, #36	; 0x24
 800b420:	46bd      	mov	sp, r7
 800b422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b426:	4770      	bx	lr
 800b428:	40021000 	.word	0x40021000
 800b42c:	0801172c 	.word	0x0801172c
 800b430:	00f42400 	.word	0x00f42400
 800b434:	007a1200 	.word	0x007a1200

0800b438 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b438:	b480      	push	{r7}
 800b43a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b43c:	4b03      	ldr	r3, [pc, #12]	; (800b44c <HAL_RCC_GetHCLKFreq+0x14>)
 800b43e:	681b      	ldr	r3, [r3, #0]
}
 800b440:	4618      	mov	r0, r3
 800b442:	46bd      	mov	sp, r7
 800b444:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b448:	4770      	bx	lr
 800b44a:	bf00      	nop
 800b44c:	20000000 	.word	0x20000000

0800b450 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b450:	b580      	push	{r7, lr}
 800b452:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800b454:	f7ff fff0 	bl	800b438 <HAL_RCC_GetHCLKFreq>
 800b458:	4601      	mov	r1, r0
 800b45a:	4b06      	ldr	r3, [pc, #24]	; (800b474 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b45c:	689b      	ldr	r3, [r3, #8]
 800b45e:	0a1b      	lsrs	r3, r3, #8
 800b460:	f003 0307 	and.w	r3, r3, #7
 800b464:	4a04      	ldr	r2, [pc, #16]	; (800b478 <HAL_RCC_GetPCLK1Freq+0x28>)
 800b466:	5cd3      	ldrb	r3, [r2, r3]
 800b468:	f003 031f 	and.w	r3, r3, #31
 800b46c:	fa21 f303 	lsr.w	r3, r1, r3
}
 800b470:	4618      	mov	r0, r3
 800b472:	bd80      	pop	{r7, pc}
 800b474:	40021000 	.word	0x40021000
 800b478:	08011724 	.word	0x08011724

0800b47c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b47c:	b580      	push	{r7, lr}
 800b47e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800b480:	f7ff ffda 	bl	800b438 <HAL_RCC_GetHCLKFreq>
 800b484:	4601      	mov	r1, r0
 800b486:	4b06      	ldr	r3, [pc, #24]	; (800b4a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b488:	689b      	ldr	r3, [r3, #8]
 800b48a:	0adb      	lsrs	r3, r3, #11
 800b48c:	f003 0307 	and.w	r3, r3, #7
 800b490:	4a04      	ldr	r2, [pc, #16]	; (800b4a4 <HAL_RCC_GetPCLK2Freq+0x28>)
 800b492:	5cd3      	ldrb	r3, [r2, r3]
 800b494:	f003 031f 	and.w	r3, r3, #31
 800b498:	fa21 f303 	lsr.w	r3, r1, r3
}
 800b49c:	4618      	mov	r0, r3
 800b49e:	bd80      	pop	{r7, pc}
 800b4a0:	40021000 	.word	0x40021000
 800b4a4:	08011724 	.word	0x08011724

0800b4a8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800b4a8:	b580      	push	{r7, lr}
 800b4aa:	b086      	sub	sp, #24
 800b4ac:	af00      	add	r7, sp, #0
 800b4ae:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800b4b0:	2300      	movs	r3, #0
 800b4b2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800b4b4:	4b2a      	ldr	r3, [pc, #168]	; (800b560 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800b4b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b4b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d003      	beq.n	800b4c8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800b4c0:	f7ff f9ca 	bl	800a858 <HAL_PWREx_GetVoltageRange>
 800b4c4:	6178      	str	r0, [r7, #20]
 800b4c6:	e014      	b.n	800b4f2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800b4c8:	4b25      	ldr	r3, [pc, #148]	; (800b560 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800b4ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b4cc:	4a24      	ldr	r2, [pc, #144]	; (800b560 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800b4ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b4d2:	6593      	str	r3, [r2, #88]	; 0x58
 800b4d4:	4b22      	ldr	r3, [pc, #136]	; (800b560 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800b4d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b4d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b4dc:	60fb      	str	r3, [r7, #12]
 800b4de:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800b4e0:	f7ff f9ba 	bl	800a858 <HAL_PWREx_GetVoltageRange>
 800b4e4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800b4e6:	4b1e      	ldr	r3, [pc, #120]	; (800b560 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800b4e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b4ea:	4a1d      	ldr	r2, [pc, #116]	; (800b560 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800b4ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b4f0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800b4f2:	697b      	ldr	r3, [r7, #20]
 800b4f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b4f8:	d10b      	bne.n	800b512 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	2b80      	cmp	r3, #128	; 0x80
 800b4fe:	d919      	bls.n	800b534 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	2ba0      	cmp	r3, #160	; 0xa0
 800b504:	d902      	bls.n	800b50c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800b506:	2302      	movs	r3, #2
 800b508:	613b      	str	r3, [r7, #16]
 800b50a:	e013      	b.n	800b534 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800b50c:	2301      	movs	r3, #1
 800b50e:	613b      	str	r3, [r7, #16]
 800b510:	e010      	b.n	800b534 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	2b80      	cmp	r3, #128	; 0x80
 800b516:	d902      	bls.n	800b51e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800b518:	2303      	movs	r3, #3
 800b51a:	613b      	str	r3, [r7, #16]
 800b51c:	e00a      	b.n	800b534 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	2b80      	cmp	r3, #128	; 0x80
 800b522:	d102      	bne.n	800b52a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800b524:	2302      	movs	r3, #2
 800b526:	613b      	str	r3, [r7, #16]
 800b528:	e004      	b.n	800b534 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	2b70      	cmp	r3, #112	; 0x70
 800b52e:	d101      	bne.n	800b534 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800b530:	2301      	movs	r3, #1
 800b532:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800b534:	4b0b      	ldr	r3, [pc, #44]	; (800b564 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	f023 0207 	bic.w	r2, r3, #7
 800b53c:	4909      	ldr	r1, [pc, #36]	; (800b564 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800b53e:	693b      	ldr	r3, [r7, #16]
 800b540:	4313      	orrs	r3, r2
 800b542:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800b544:	4b07      	ldr	r3, [pc, #28]	; (800b564 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	f003 0307 	and.w	r3, r3, #7
 800b54c:	693a      	ldr	r2, [r7, #16]
 800b54e:	429a      	cmp	r2, r3
 800b550:	d001      	beq.n	800b556 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800b552:	2301      	movs	r3, #1
 800b554:	e000      	b.n	800b558 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800b556:	2300      	movs	r3, #0
}
 800b558:	4618      	mov	r0, r3
 800b55a:	3718      	adds	r7, #24
 800b55c:	46bd      	mov	sp, r7
 800b55e:	bd80      	pop	{r7, pc}
 800b560:	40021000 	.word	0x40021000
 800b564:	40022000 	.word	0x40022000

0800b568 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b568:	b580      	push	{r7, lr}
 800b56a:	b086      	sub	sp, #24
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b570:	2300      	movs	r3, #0
 800b572:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b574:	2300      	movs	r3, #0
 800b576:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b580:	2b00      	cmp	r3, #0
 800b582:	d02f      	beq.n	800b5e4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b588:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b58c:	d005      	beq.n	800b59a <HAL_RCCEx_PeriphCLKConfig+0x32>
 800b58e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800b592:	d015      	beq.n	800b5c0 <HAL_RCCEx_PeriphCLKConfig+0x58>
 800b594:	2b00      	cmp	r3, #0
 800b596:	d007      	beq.n	800b5a8 <HAL_RCCEx_PeriphCLKConfig+0x40>
 800b598:	e00f      	b.n	800b5ba <HAL_RCCEx_PeriphCLKConfig+0x52>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800b59a:	4b5d      	ldr	r3, [pc, #372]	; (800b710 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800b59c:	68db      	ldr	r3, [r3, #12]
 800b59e:	4a5c      	ldr	r2, [pc, #368]	; (800b710 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800b5a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b5a4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800b5a6:	e00c      	b.n	800b5c2 <HAL_RCCEx_PeriphCLKConfig+0x5a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	3304      	adds	r3, #4
 800b5ac:	2100      	movs	r1, #0
 800b5ae:	4618      	mov	r0, r3
 800b5b0:	f000 fa1e 	bl	800b9f0 <RCCEx_PLLSAI1_Config>
 800b5b4:	4603      	mov	r3, r0
 800b5b6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800b5b8:	e003      	b.n	800b5c2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b5ba:	2301      	movs	r3, #1
 800b5bc:	74fb      	strb	r3, [r7, #19]
      break;
 800b5be:	e000      	b.n	800b5c2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
      break;
 800b5c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b5c2:	7cfb      	ldrb	r3, [r7, #19]
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d10b      	bne.n	800b5e0 <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b5c8:	4b51      	ldr	r3, [pc, #324]	; (800b710 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800b5ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b5ce:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b5d6:	494e      	ldr	r1, [pc, #312]	; (800b710 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800b5d8:	4313      	orrs	r3, r2
 800b5da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800b5de:	e001      	b.n	800b5e4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b5e0:	7cfb      	ldrb	r3, [r7, #19]
 800b5e2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	f000 809e 	beq.w	800b72e <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b5f2:	2300      	movs	r3, #0
 800b5f4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800b5f6:	4b46      	ldr	r3, [pc, #280]	; (800b710 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800b5f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b5fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d101      	bne.n	800b606 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 800b602:	2301      	movs	r3, #1
 800b604:	e000      	b.n	800b608 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 800b606:	2300      	movs	r3, #0
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d00d      	beq.n	800b628 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b60c:	4b40      	ldr	r3, [pc, #256]	; (800b710 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800b60e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b610:	4a3f      	ldr	r2, [pc, #252]	; (800b710 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800b612:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b616:	6593      	str	r3, [r2, #88]	; 0x58
 800b618:	4b3d      	ldr	r3, [pc, #244]	; (800b710 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800b61a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b61c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b620:	60bb      	str	r3, [r7, #8]
 800b622:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b624:	2301      	movs	r3, #1
 800b626:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b628:	4b3a      	ldr	r3, [pc, #232]	; (800b714 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	4a39      	ldr	r2, [pc, #228]	; (800b714 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800b62e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b632:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b634:	f7fc fec0 	bl	80083b8 <HAL_GetTick>
 800b638:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800b63a:	e009      	b.n	800b650 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b63c:	f7fc febc 	bl	80083b8 <HAL_GetTick>
 800b640:	4602      	mov	r2, r0
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	1ad3      	subs	r3, r2, r3
 800b646:	2b02      	cmp	r3, #2
 800b648:	d902      	bls.n	800b650 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        ret = HAL_TIMEOUT;
 800b64a:	2303      	movs	r3, #3
 800b64c:	74fb      	strb	r3, [r7, #19]
        break;
 800b64e:	e005      	b.n	800b65c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800b650:	4b30      	ldr	r3, [pc, #192]	; (800b714 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d0ef      	beq.n	800b63c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      }
    }

    if(ret == HAL_OK)
 800b65c:	7cfb      	ldrb	r3, [r7, #19]
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d15a      	bne.n	800b718 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800b662:	4b2b      	ldr	r3, [pc, #172]	; (800b710 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800b664:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b668:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b66c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800b66e:	697b      	ldr	r3, [r7, #20]
 800b670:	2b00      	cmp	r3, #0
 800b672:	d01e      	beq.n	800b6b2 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b678:	697a      	ldr	r2, [r7, #20]
 800b67a:	429a      	cmp	r2, r3
 800b67c:	d019      	beq.n	800b6b2 <HAL_RCCEx_PeriphCLKConfig+0x14a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800b67e:	4b24      	ldr	r3, [pc, #144]	; (800b710 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800b680:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b684:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b688:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b68a:	4b21      	ldr	r3, [pc, #132]	; (800b710 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800b68c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b690:	4a1f      	ldr	r2, [pc, #124]	; (800b710 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800b692:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b696:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b69a:	4b1d      	ldr	r3, [pc, #116]	; (800b710 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800b69c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b6a0:	4a1b      	ldr	r2, [pc, #108]	; (800b710 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800b6a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b6a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800b6aa:	4a19      	ldr	r2, [pc, #100]	; (800b710 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800b6ac:	697b      	ldr	r3, [r7, #20]
 800b6ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800b6b2:	697b      	ldr	r3, [r7, #20]
 800b6b4:	f003 0301 	and.w	r3, r3, #1
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d016      	beq.n	800b6ea <HAL_RCCEx_PeriphCLKConfig+0x182>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b6bc:	f7fc fe7c 	bl	80083b8 <HAL_GetTick>
 800b6c0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b6c2:	e00b      	b.n	800b6dc <HAL_RCCEx_PeriphCLKConfig+0x174>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b6c4:	f7fc fe78 	bl	80083b8 <HAL_GetTick>
 800b6c8:	4602      	mov	r2, r0
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	1ad3      	subs	r3, r2, r3
 800b6ce:	f241 3288 	movw	r2, #5000	; 0x1388
 800b6d2:	4293      	cmp	r3, r2
 800b6d4:	d902      	bls.n	800b6dc <HAL_RCCEx_PeriphCLKConfig+0x174>
          {
            ret = HAL_TIMEOUT;
 800b6d6:	2303      	movs	r3, #3
 800b6d8:	74fb      	strb	r3, [r7, #19]
            break;
 800b6da:	e006      	b.n	800b6ea <HAL_RCCEx_PeriphCLKConfig+0x182>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b6dc:	4b0c      	ldr	r3, [pc, #48]	; (800b710 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800b6de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b6e2:	f003 0302 	and.w	r3, r3, #2
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d0ec      	beq.n	800b6c4 <HAL_RCCEx_PeriphCLKConfig+0x15c>
          }
        }
      }

      if(ret == HAL_OK)
 800b6ea:	7cfb      	ldrb	r3, [r7, #19]
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d10b      	bne.n	800b708 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b6f0:	4b07      	ldr	r3, [pc, #28]	; (800b710 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800b6f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b6f6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b6fe:	4904      	ldr	r1, [pc, #16]	; (800b710 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800b700:	4313      	orrs	r3, r2
 800b702:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800b706:	e009      	b.n	800b71c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b708:	7cfb      	ldrb	r3, [r7, #19]
 800b70a:	74bb      	strb	r3, [r7, #18]
 800b70c:	e006      	b.n	800b71c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800b70e:	bf00      	nop
 800b710:	40021000 	.word	0x40021000
 800b714:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b718:	7cfb      	ldrb	r3, [r7, #19]
 800b71a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800b71c:	7c7b      	ldrb	r3, [r7, #17]
 800b71e:	2b01      	cmp	r3, #1
 800b720:	d105      	bne.n	800b72e <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b722:	4bb2      	ldr	r3, [pc, #712]	; (800b9ec <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800b724:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b726:	4ab1      	ldr	r2, [pc, #708]	; (800b9ec <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800b728:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b72c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	f003 0301 	and.w	r3, r3, #1
 800b736:	2b00      	cmp	r3, #0
 800b738:	d00a      	beq.n	800b750 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800b73a:	4bac      	ldr	r3, [pc, #688]	; (800b9ec <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800b73c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b740:	f023 0203 	bic.w	r2, r3, #3
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	6a1b      	ldr	r3, [r3, #32]
 800b748:	49a8      	ldr	r1, [pc, #672]	; (800b9ec <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800b74a:	4313      	orrs	r3, r2
 800b74c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	f003 0302 	and.w	r3, r3, #2
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d00a      	beq.n	800b772 <HAL_RCCEx_PeriphCLKConfig+0x20a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800b75c:	4ba3      	ldr	r3, [pc, #652]	; (800b9ec <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800b75e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b762:	f023 020c 	bic.w	r2, r3, #12
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b76a:	49a0      	ldr	r1, [pc, #640]	; (800b9ec <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800b76c:	4313      	orrs	r3, r2
 800b76e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	f003 0304 	and.w	r3, r3, #4
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d00a      	beq.n	800b794 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800b77e:	4b9b      	ldr	r3, [pc, #620]	; (800b9ec <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800b780:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b784:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b78c:	4997      	ldr	r1, [pc, #604]	; (800b9ec <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800b78e:	4313      	orrs	r3, r2
 800b790:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	f003 0320 	and.w	r3, r3, #32
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d00a      	beq.n	800b7b6 <HAL_RCCEx_PeriphCLKConfig+0x24e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b7a0:	4b92      	ldr	r3, [pc, #584]	; (800b9ec <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800b7a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b7a6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7ae:	498f      	ldr	r1, [pc, #572]	; (800b9ec <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800b7b0:	4313      	orrs	r3, r2
 800b7b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d00a      	beq.n	800b7d8 <HAL_RCCEx_PeriphCLKConfig+0x270>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b7c2:	4b8a      	ldr	r3, [pc, #552]	; (800b9ec <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800b7c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b7c8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b7d0:	4986      	ldr	r1, [pc, #536]	; (800b9ec <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800b7d2:	4313      	orrs	r3, r2
 800b7d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d00a      	beq.n	800b7fa <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b7e4:	4b81      	ldr	r3, [pc, #516]	; (800b9ec <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800b7e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b7ea:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7f2:	497e      	ldr	r1, [pc, #504]	; (800b9ec <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800b7f4:	4313      	orrs	r3, r2
 800b7f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b802:	2b00      	cmp	r3, #0
 800b804:	d00a      	beq.n	800b81c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800b806:	4b79      	ldr	r3, [pc, #484]	; (800b9ec <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800b808:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b80c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b814:	4975      	ldr	r1, [pc, #468]	; (800b9ec <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800b816:	4313      	orrs	r3, r2
 800b818:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b824:	2b00      	cmp	r3, #0
 800b826:	d00a      	beq.n	800b83e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800b828:	4b70      	ldr	r3, [pc, #448]	; (800b9ec <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800b82a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b82e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b836:	496d      	ldr	r1, [pc, #436]	; (800b9ec <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800b838:	4313      	orrs	r3, r2
 800b83a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b846:	2b00      	cmp	r3, #0
 800b848:	d00a      	beq.n	800b860 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800b84a:	4b68      	ldr	r3, [pc, #416]	; (800b9ec <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800b84c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b850:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b858:	4964      	ldr	r1, [pc, #400]	; (800b9ec <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800b85a:	4313      	orrs	r3, r2
 800b85c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d028      	beq.n	800b8be <HAL_RCCEx_PeriphCLKConfig+0x356>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b86c:	4b5f      	ldr	r3, [pc, #380]	; (800b9ec <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800b86e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b872:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b87a:	495c      	ldr	r1, [pc, #368]	; (800b9ec <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800b87c:	4313      	orrs	r3, r2
 800b87e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b886:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b88a:	d106      	bne.n	800b89a <HAL_RCCEx_PeriphCLKConfig+0x332>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b88c:	4b57      	ldr	r3, [pc, #348]	; (800b9ec <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800b88e:	68db      	ldr	r3, [r3, #12]
 800b890:	4a56      	ldr	r2, [pc, #344]	; (800b9ec <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800b892:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b896:	60d3      	str	r3, [r2, #12]
 800b898:	e011      	b.n	800b8be <HAL_RCCEx_PeriphCLKConfig+0x356>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b89e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b8a2:	d10c      	bne.n	800b8be <HAL_RCCEx_PeriphCLKConfig+0x356>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	3304      	adds	r3, #4
 800b8a8:	2101      	movs	r1, #1
 800b8aa:	4618      	mov	r0, r3
 800b8ac:	f000 f8a0 	bl	800b9f0 <RCCEx_PLLSAI1_Config>
 800b8b0:	4603      	mov	r3, r0
 800b8b2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800b8b4:	7cfb      	ldrb	r3, [r7, #19]
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d001      	beq.n	800b8be <HAL_RCCEx_PeriphCLKConfig+0x356>
        {
          /* set overall return value */
          status = ret;
 800b8ba:	7cfb      	ldrb	r3, [r7, #19]
 800b8bc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d028      	beq.n	800b91c <HAL_RCCEx_PeriphCLKConfig+0x3b4>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800b8ca:	4b48      	ldr	r3, [pc, #288]	; (800b9ec <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800b8cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b8d0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b8d8:	4944      	ldr	r1, [pc, #272]	; (800b9ec <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800b8da:	4313      	orrs	r3, r2
 800b8dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b8e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b8e8:	d106      	bne.n	800b8f8 <HAL_RCCEx_PeriphCLKConfig+0x390>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b8ea:	4b40      	ldr	r3, [pc, #256]	; (800b9ec <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800b8ec:	68db      	ldr	r3, [r3, #12]
 800b8ee:	4a3f      	ldr	r2, [pc, #252]	; (800b9ec <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800b8f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b8f4:	60d3      	str	r3, [r2, #12]
 800b8f6:	e011      	b.n	800b91c <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b8fc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b900:	d10c      	bne.n	800b91c <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	3304      	adds	r3, #4
 800b906:	2101      	movs	r1, #1
 800b908:	4618      	mov	r0, r3
 800b90a:	f000 f871 	bl	800b9f0 <RCCEx_PLLSAI1_Config>
 800b90e:	4603      	mov	r3, r0
 800b910:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800b912:	7cfb      	ldrb	r3, [r7, #19]
 800b914:	2b00      	cmp	r3, #0
 800b916:	d001      	beq.n	800b91c <HAL_RCCEx_PeriphCLKConfig+0x3b4>
      {
        /* set overall return value */
        status = ret;
 800b918:	7cfb      	ldrb	r3, [r7, #19]
 800b91a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b924:	2b00      	cmp	r3, #0
 800b926:	d028      	beq.n	800b97a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b928:	4b30      	ldr	r3, [pc, #192]	; (800b9ec <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800b92a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b92e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b936:	492d      	ldr	r1, [pc, #180]	; (800b9ec <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800b938:	4313      	orrs	r3, r2
 800b93a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b942:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b946:	d106      	bne.n	800b956 <HAL_RCCEx_PeriphCLKConfig+0x3ee>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b948:	4b28      	ldr	r3, [pc, #160]	; (800b9ec <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800b94a:	68db      	ldr	r3, [r3, #12]
 800b94c:	4a27      	ldr	r2, [pc, #156]	; (800b9ec <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800b94e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b952:	60d3      	str	r3, [r2, #12]
 800b954:	e011      	b.n	800b97a <HAL_RCCEx_PeriphCLKConfig+0x412>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b95a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b95e:	d10c      	bne.n	800b97a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	3304      	adds	r3, #4
 800b964:	2101      	movs	r1, #1
 800b966:	4618      	mov	r0, r3
 800b968:	f000 f842 	bl	800b9f0 <RCCEx_PLLSAI1_Config>
 800b96c:	4603      	mov	r3, r0
 800b96e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800b970:	7cfb      	ldrb	r3, [r7, #19]
 800b972:	2b00      	cmp	r3, #0
 800b974:	d001      	beq.n	800b97a <HAL_RCCEx_PeriphCLKConfig+0x412>
      {
        /* set overall return value */
        status = ret;
 800b976:	7cfb      	ldrb	r3, [r7, #19]
 800b978:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b982:	2b00      	cmp	r3, #0
 800b984:	d01c      	beq.n	800b9c0 <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b986:	4b19      	ldr	r3, [pc, #100]	; (800b9ec <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800b988:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b98c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b994:	4915      	ldr	r1, [pc, #84]	; (800b9ec <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800b996:	4313      	orrs	r3, r2
 800b998:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b9a0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b9a4:	d10c      	bne.n	800b9c0 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	3304      	adds	r3, #4
 800b9aa:	2102      	movs	r1, #2
 800b9ac:	4618      	mov	r0, r3
 800b9ae:	f000 f81f 	bl	800b9f0 <RCCEx_PLLSAI1_Config>
 800b9b2:	4603      	mov	r3, r0
 800b9b4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800b9b6:	7cfb      	ldrb	r3, [r7, #19]
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d001      	beq.n	800b9c0 <HAL_RCCEx_PeriphCLKConfig+0x458>
      {
        /* set overall return value */
        status = ret;
 800b9bc:	7cfb      	ldrb	r3, [r7, #19]
 800b9be:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d00a      	beq.n	800b9e2 <HAL_RCCEx_PeriphCLKConfig+0x47a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800b9cc:	4b07      	ldr	r3, [pc, #28]	; (800b9ec <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800b9ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b9d2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b9da:	4904      	ldr	r1, [pc, #16]	; (800b9ec <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800b9dc:	4313      	orrs	r3, r2
 800b9de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800b9e2:	7cbb      	ldrb	r3, [r7, #18]
}
 800b9e4:	4618      	mov	r0, r3
 800b9e6:	3718      	adds	r7, #24
 800b9e8:	46bd      	mov	sp, r7
 800b9ea:	bd80      	pop	{r7, pc}
 800b9ec:	40021000 	.word	0x40021000

0800b9f0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800b9f0:	b580      	push	{r7, lr}
 800b9f2:	b084      	sub	sp, #16
 800b9f4:	af00      	add	r7, sp, #0
 800b9f6:	6078      	str	r0, [r7, #4]
 800b9f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b9fa:	2300      	movs	r3, #0
 800b9fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800b9fe:	4b73      	ldr	r3, [pc, #460]	; (800bbcc <RCCEx_PLLSAI1_Config+0x1dc>)
 800ba00:	68db      	ldr	r3, [r3, #12]
 800ba02:	f003 0303 	and.w	r3, r3, #3
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d018      	beq.n	800ba3c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800ba0a:	4b70      	ldr	r3, [pc, #448]	; (800bbcc <RCCEx_PLLSAI1_Config+0x1dc>)
 800ba0c:	68db      	ldr	r3, [r3, #12]
 800ba0e:	f003 0203 	and.w	r2, r3, #3
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	429a      	cmp	r2, r3
 800ba18:	d10d      	bne.n	800ba36 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	681b      	ldr	r3, [r3, #0]
       ||
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d009      	beq.n	800ba36 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800ba22:	4b6a      	ldr	r3, [pc, #424]	; (800bbcc <RCCEx_PLLSAI1_Config+0x1dc>)
 800ba24:	68db      	ldr	r3, [r3, #12]
 800ba26:	091b      	lsrs	r3, r3, #4
 800ba28:	f003 0307 	and.w	r3, r3, #7
 800ba2c:	1c5a      	adds	r2, r3, #1
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	685b      	ldr	r3, [r3, #4]
       ||
 800ba32:	429a      	cmp	r2, r3
 800ba34:	d044      	beq.n	800bac0 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800ba36:	2301      	movs	r3, #1
 800ba38:	73fb      	strb	r3, [r7, #15]
 800ba3a:	e041      	b.n	800bac0 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	2b02      	cmp	r3, #2
 800ba42:	d00c      	beq.n	800ba5e <RCCEx_PLLSAI1_Config+0x6e>
 800ba44:	2b03      	cmp	r3, #3
 800ba46:	d013      	beq.n	800ba70 <RCCEx_PLLSAI1_Config+0x80>
 800ba48:	2b01      	cmp	r3, #1
 800ba4a:	d120      	bne.n	800ba8e <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800ba4c:	4b5f      	ldr	r3, [pc, #380]	; (800bbcc <RCCEx_PLLSAI1_Config+0x1dc>)
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	f003 0302 	and.w	r3, r3, #2
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d11d      	bne.n	800ba94 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 800ba58:	2301      	movs	r3, #1
 800ba5a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ba5c:	e01a      	b.n	800ba94 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800ba5e:	4b5b      	ldr	r3, [pc, #364]	; (800bbcc <RCCEx_PLLSAI1_Config+0x1dc>)
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d116      	bne.n	800ba98 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 800ba6a:	2301      	movs	r3, #1
 800ba6c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ba6e:	e013      	b.n	800ba98 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800ba70:	4b56      	ldr	r3, [pc, #344]	; (800bbcc <RCCEx_PLLSAI1_Config+0x1dc>)
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d10f      	bne.n	800ba9c <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800ba7c:	4b53      	ldr	r3, [pc, #332]	; (800bbcc <RCCEx_PLLSAI1_Config+0x1dc>)
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d109      	bne.n	800ba9c <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 800ba88:	2301      	movs	r3, #1
 800ba8a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800ba8c:	e006      	b.n	800ba9c <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 800ba8e:	2301      	movs	r3, #1
 800ba90:	73fb      	strb	r3, [r7, #15]
      break;
 800ba92:	e004      	b.n	800ba9e <RCCEx_PLLSAI1_Config+0xae>
      break;
 800ba94:	bf00      	nop
 800ba96:	e002      	b.n	800ba9e <RCCEx_PLLSAI1_Config+0xae>
      break;
 800ba98:	bf00      	nop
 800ba9a:	e000      	b.n	800ba9e <RCCEx_PLLSAI1_Config+0xae>
      break;
 800ba9c:	bf00      	nop
    }

    if(status == HAL_OK)
 800ba9e:	7bfb      	ldrb	r3, [r7, #15]
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d10d      	bne.n	800bac0 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800baa4:	4b49      	ldr	r3, [pc, #292]	; (800bbcc <RCCEx_PLLSAI1_Config+0x1dc>)
 800baa6:	68db      	ldr	r3, [r3, #12]
 800baa8:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	6819      	ldr	r1, [r3, #0]
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	685b      	ldr	r3, [r3, #4]
 800bab4:	3b01      	subs	r3, #1
 800bab6:	011b      	lsls	r3, r3, #4
 800bab8:	430b      	orrs	r3, r1
 800baba:	4944      	ldr	r1, [pc, #272]	; (800bbcc <RCCEx_PLLSAI1_Config+0x1dc>)
 800babc:	4313      	orrs	r3, r2
 800babe:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800bac0:	7bfb      	ldrb	r3, [r7, #15]
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d17c      	bne.n	800bbc0 <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800bac6:	4b41      	ldr	r3, [pc, #260]	; (800bbcc <RCCEx_PLLSAI1_Config+0x1dc>)
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	4a40      	ldr	r2, [pc, #256]	; (800bbcc <RCCEx_PLLSAI1_Config+0x1dc>)
 800bacc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800bad0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bad2:	f7fc fc71 	bl	80083b8 <HAL_GetTick>
 800bad6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800bad8:	e009      	b.n	800baee <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800bada:	f7fc fc6d 	bl	80083b8 <HAL_GetTick>
 800bade:	4602      	mov	r2, r0
 800bae0:	68bb      	ldr	r3, [r7, #8]
 800bae2:	1ad3      	subs	r3, r2, r3
 800bae4:	2b02      	cmp	r3, #2
 800bae6:	d902      	bls.n	800baee <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 800bae8:	2303      	movs	r3, #3
 800baea:	73fb      	strb	r3, [r7, #15]
        break;
 800baec:	e005      	b.n	800bafa <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800baee:	4b37      	ldr	r3, [pc, #220]	; (800bbcc <RCCEx_PLLSAI1_Config+0x1dc>)
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d1ef      	bne.n	800bada <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800bafa:	7bfb      	ldrb	r3, [r7, #15]
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d15f      	bne.n	800bbc0 <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800bb00:	683b      	ldr	r3, [r7, #0]
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d110      	bne.n	800bb28 <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800bb06:	4b31      	ldr	r3, [pc, #196]	; (800bbcc <RCCEx_PLLSAI1_Config+0x1dc>)
 800bb08:	691b      	ldr	r3, [r3, #16]
 800bb0a:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800bb0e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800bb12:	687a      	ldr	r2, [r7, #4]
 800bb14:	6892      	ldr	r2, [r2, #8]
 800bb16:	0211      	lsls	r1, r2, #8
 800bb18:	687a      	ldr	r2, [r7, #4]
 800bb1a:	68d2      	ldr	r2, [r2, #12]
 800bb1c:	06d2      	lsls	r2, r2, #27
 800bb1e:	430a      	orrs	r2, r1
 800bb20:	492a      	ldr	r1, [pc, #168]	; (800bbcc <RCCEx_PLLSAI1_Config+0x1dc>)
 800bb22:	4313      	orrs	r3, r2
 800bb24:	610b      	str	r3, [r1, #16]
 800bb26:	e027      	b.n	800bb78 <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800bb28:	683b      	ldr	r3, [r7, #0]
 800bb2a:	2b01      	cmp	r3, #1
 800bb2c:	d112      	bne.n	800bb54 <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800bb2e:	4b27      	ldr	r3, [pc, #156]	; (800bbcc <RCCEx_PLLSAI1_Config+0x1dc>)
 800bb30:	691b      	ldr	r3, [r3, #16]
 800bb32:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800bb36:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800bb3a:	687a      	ldr	r2, [r7, #4]
 800bb3c:	6892      	ldr	r2, [r2, #8]
 800bb3e:	0211      	lsls	r1, r2, #8
 800bb40:	687a      	ldr	r2, [r7, #4]
 800bb42:	6912      	ldr	r2, [r2, #16]
 800bb44:	0852      	lsrs	r2, r2, #1
 800bb46:	3a01      	subs	r2, #1
 800bb48:	0552      	lsls	r2, r2, #21
 800bb4a:	430a      	orrs	r2, r1
 800bb4c:	491f      	ldr	r1, [pc, #124]	; (800bbcc <RCCEx_PLLSAI1_Config+0x1dc>)
 800bb4e:	4313      	orrs	r3, r2
 800bb50:	610b      	str	r3, [r1, #16]
 800bb52:	e011      	b.n	800bb78 <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800bb54:	4b1d      	ldr	r3, [pc, #116]	; (800bbcc <RCCEx_PLLSAI1_Config+0x1dc>)
 800bb56:	691b      	ldr	r3, [r3, #16]
 800bb58:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800bb5c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800bb60:	687a      	ldr	r2, [r7, #4]
 800bb62:	6892      	ldr	r2, [r2, #8]
 800bb64:	0211      	lsls	r1, r2, #8
 800bb66:	687a      	ldr	r2, [r7, #4]
 800bb68:	6952      	ldr	r2, [r2, #20]
 800bb6a:	0852      	lsrs	r2, r2, #1
 800bb6c:	3a01      	subs	r2, #1
 800bb6e:	0652      	lsls	r2, r2, #25
 800bb70:	430a      	orrs	r2, r1
 800bb72:	4916      	ldr	r1, [pc, #88]	; (800bbcc <RCCEx_PLLSAI1_Config+0x1dc>)
 800bb74:	4313      	orrs	r3, r2
 800bb76:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800bb78:	4b14      	ldr	r3, [pc, #80]	; (800bbcc <RCCEx_PLLSAI1_Config+0x1dc>)
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	4a13      	ldr	r2, [pc, #76]	; (800bbcc <RCCEx_PLLSAI1_Config+0x1dc>)
 800bb7e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800bb82:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bb84:	f7fc fc18 	bl	80083b8 <HAL_GetTick>
 800bb88:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800bb8a:	e009      	b.n	800bba0 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800bb8c:	f7fc fc14 	bl	80083b8 <HAL_GetTick>
 800bb90:	4602      	mov	r2, r0
 800bb92:	68bb      	ldr	r3, [r7, #8]
 800bb94:	1ad3      	subs	r3, r2, r3
 800bb96:	2b02      	cmp	r3, #2
 800bb98:	d902      	bls.n	800bba0 <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 800bb9a:	2303      	movs	r3, #3
 800bb9c:	73fb      	strb	r3, [r7, #15]
          break;
 800bb9e:	e005      	b.n	800bbac <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800bba0:	4b0a      	ldr	r3, [pc, #40]	; (800bbcc <RCCEx_PLLSAI1_Config+0x1dc>)
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d0ef      	beq.n	800bb8c <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 800bbac:	7bfb      	ldrb	r3, [r7, #15]
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d106      	bne.n	800bbc0 <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800bbb2:	4b06      	ldr	r3, [pc, #24]	; (800bbcc <RCCEx_PLLSAI1_Config+0x1dc>)
 800bbb4:	691a      	ldr	r2, [r3, #16]
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	699b      	ldr	r3, [r3, #24]
 800bbba:	4904      	ldr	r1, [pc, #16]	; (800bbcc <RCCEx_PLLSAI1_Config+0x1dc>)
 800bbbc:	4313      	orrs	r3, r2
 800bbbe:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800bbc0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbc2:	4618      	mov	r0, r3
 800bbc4:	3710      	adds	r7, #16
 800bbc6:	46bd      	mov	sp, r7
 800bbc8:	bd80      	pop	{r7, pc}
 800bbca:	bf00      	nop
 800bbcc:	40021000 	.word	0x40021000

0800bbd0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bbd0:	b480      	push	{r7}
 800bbd2:	b085      	sub	sp, #20
 800bbd4:	af00      	add	r7, sp, #0
 800bbd6:	6078      	str	r0, [r7, #4]
 800bbd8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bbe0:	2b01      	cmp	r3, #1
 800bbe2:	d101      	bne.n	800bbe8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bbe4:	2302      	movs	r3, #2
 800bbe6:	e04f      	b.n	800bc88 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	2201      	movs	r2, #1
 800bbec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	2202      	movs	r2, #2
 800bbf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	685b      	ldr	r3, [r3, #4]
 800bbfe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	689b      	ldr	r3, [r3, #8]
 800bc06:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	4a21      	ldr	r2, [pc, #132]	; (800bc94 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800bc0e:	4293      	cmp	r3, r2
 800bc10:	d108      	bne.n	800bc24 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800bc18:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800bc1a:	683b      	ldr	r3, [r7, #0]
 800bc1c:	685b      	ldr	r3, [r3, #4]
 800bc1e:	68fa      	ldr	r2, [r7, #12]
 800bc20:	4313      	orrs	r3, r2
 800bc22:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bc2a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bc2c:	683b      	ldr	r3, [r7, #0]
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	68fa      	ldr	r2, [r7, #12]
 800bc32:	4313      	orrs	r3, r2
 800bc34:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	68fa      	ldr	r2, [r7, #12]
 800bc3c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	4a14      	ldr	r2, [pc, #80]	; (800bc94 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800bc44:	4293      	cmp	r3, r2
 800bc46:	d009      	beq.n	800bc5c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bc50:	d004      	beq.n	800bc5c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	4a10      	ldr	r2, [pc, #64]	; (800bc98 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800bc58:	4293      	cmp	r3, r2
 800bc5a:	d10c      	bne.n	800bc76 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bc5c:	68bb      	ldr	r3, [r7, #8]
 800bc5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bc62:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bc64:	683b      	ldr	r3, [r7, #0]
 800bc66:	689b      	ldr	r3, [r3, #8]
 800bc68:	68ba      	ldr	r2, [r7, #8]
 800bc6a:	4313      	orrs	r3, r2
 800bc6c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	68ba      	ldr	r2, [r7, #8]
 800bc74:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	2201      	movs	r2, #1
 800bc7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	2200      	movs	r2, #0
 800bc82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bc86:	2300      	movs	r3, #0
}
 800bc88:	4618      	mov	r0, r3
 800bc8a:	3714      	adds	r7, #20
 800bc8c:	46bd      	mov	sp, r7
 800bc8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc92:	4770      	bx	lr
 800bc94:	40012c00 	.word	0x40012c00
 800bc98:	40014000 	.word	0x40014000

0800bc9c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bc9c:	b580      	push	{r7, lr}
 800bc9e:	b082      	sub	sp, #8
 800bca0:	af00      	add	r7, sp, #0
 800bca2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d101      	bne.n	800bcae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bcaa:	2301      	movs	r3, #1
 800bcac:	e040      	b.n	800bd30 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d106      	bne.n	800bcc4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	2200      	movs	r2, #0
 800bcba:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bcbe:	6878      	ldr	r0, [r7, #4]
 800bcc0:	f7f6 f904 	bl	8001ecc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	2224      	movs	r2, #36	; 0x24
 800bcc8:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	681a      	ldr	r2, [r3, #0]
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	f022 0201 	bic.w	r2, r2, #1
 800bcd8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800bcda:	6878      	ldr	r0, [r7, #4]
 800bcdc:	f000 f82c 	bl	800bd38 <UART_SetConfig>
 800bce0:	4603      	mov	r3, r0
 800bce2:	2b01      	cmp	r3, #1
 800bce4:	d101      	bne.n	800bcea <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800bce6:	2301      	movs	r3, #1
 800bce8:	e022      	b.n	800bd30 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d002      	beq.n	800bcf8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800bcf2:	6878      	ldr	r0, [r7, #4]
 800bcf4:	f000 fb34 	bl	800c360 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	685a      	ldr	r2, [r3, #4]
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800bd06:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	689a      	ldr	r2, [r3, #8]
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800bd16:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	681a      	ldr	r2, [r3, #0]
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	f042 0201 	orr.w	r2, r2, #1
 800bd26:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800bd28:	6878      	ldr	r0, [r7, #4]
 800bd2a:	f000 fbbb 	bl	800c4a4 <UART_CheckIdleState>
 800bd2e:	4603      	mov	r3, r0
}
 800bd30:	4618      	mov	r0, r3
 800bd32:	3708      	adds	r7, #8
 800bd34:	46bd      	mov	sp, r7
 800bd36:	bd80      	pop	{r7, pc}

0800bd38 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bd38:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800bd3c:	b08a      	sub	sp, #40	; 0x28
 800bd3e:	af00      	add	r7, sp, #0
 800bd40:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800bd42:	2300      	movs	r3, #0
 800bd44:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 800bd46:	2300      	movs	r3, #0
 800bd48:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 800bd4a:	2300      	movs	r3, #0
 800bd4c:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	689a      	ldr	r2, [r3, #8]
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	691b      	ldr	r3, [r3, #16]
 800bd56:	431a      	orrs	r2, r3
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	695b      	ldr	r3, [r3, #20]
 800bd5c:	431a      	orrs	r2, r3
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	69db      	ldr	r3, [r3, #28]
 800bd62:	4313      	orrs	r3, r2
 800bd64:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	681a      	ldr	r2, [r3, #0]
 800bd6c:	4bbc      	ldr	r3, [pc, #752]	; (800c060 <UART_SetConfig+0x328>)
 800bd6e:	4013      	ands	r3, r2
 800bd70:	687a      	ldr	r2, [r7, #4]
 800bd72:	6812      	ldr	r2, [r2, #0]
 800bd74:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bd76:	430b      	orrs	r3, r1
 800bd78:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	685b      	ldr	r3, [r3, #4]
 800bd80:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	68da      	ldr	r2, [r3, #12]
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	430a      	orrs	r2, r1
 800bd8e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	699b      	ldr	r3, [r3, #24]
 800bd94:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	4ab2      	ldr	r2, [pc, #712]	; (800c064 <UART_SetConfig+0x32c>)
 800bd9c:	4293      	cmp	r3, r2
 800bd9e:	d004      	beq.n	800bdaa <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	6a1b      	ldr	r3, [r3, #32]
 800bda4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bda6:	4313      	orrs	r3, r2
 800bda8:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	689b      	ldr	r3, [r3, #8]
 800bdb0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bdba:	430a      	orrs	r2, r1
 800bdbc:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	4aa9      	ldr	r2, [pc, #676]	; (800c068 <UART_SetConfig+0x330>)
 800bdc4:	4293      	cmp	r3, r2
 800bdc6:	d126      	bne.n	800be16 <UART_SetConfig+0xde>
 800bdc8:	4ba8      	ldr	r3, [pc, #672]	; (800c06c <UART_SetConfig+0x334>)
 800bdca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bdce:	f003 0303 	and.w	r3, r3, #3
 800bdd2:	2b03      	cmp	r3, #3
 800bdd4:	d81a      	bhi.n	800be0c <UART_SetConfig+0xd4>
 800bdd6:	a201      	add	r2, pc, #4	; (adr r2, 800bddc <UART_SetConfig+0xa4>)
 800bdd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bddc:	0800bded 	.word	0x0800bded
 800bde0:	0800bdfd 	.word	0x0800bdfd
 800bde4:	0800bdf5 	.word	0x0800bdf5
 800bde8:	0800be05 	.word	0x0800be05
 800bdec:	2301      	movs	r3, #1
 800bdee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bdf2:	e0ab      	b.n	800bf4c <UART_SetConfig+0x214>
 800bdf4:	2302      	movs	r3, #2
 800bdf6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bdfa:	e0a7      	b.n	800bf4c <UART_SetConfig+0x214>
 800bdfc:	2304      	movs	r3, #4
 800bdfe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800be02:	e0a3      	b.n	800bf4c <UART_SetConfig+0x214>
 800be04:	2308      	movs	r3, #8
 800be06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800be0a:	e09f      	b.n	800bf4c <UART_SetConfig+0x214>
 800be0c:	2310      	movs	r3, #16
 800be0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800be12:	bf00      	nop
 800be14:	e09a      	b.n	800bf4c <UART_SetConfig+0x214>
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	4a95      	ldr	r2, [pc, #596]	; (800c070 <UART_SetConfig+0x338>)
 800be1c:	4293      	cmp	r3, r2
 800be1e:	d138      	bne.n	800be92 <UART_SetConfig+0x15a>
 800be20:	4b92      	ldr	r3, [pc, #584]	; (800c06c <UART_SetConfig+0x334>)
 800be22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800be26:	f003 030c 	and.w	r3, r3, #12
 800be2a:	2b0c      	cmp	r3, #12
 800be2c:	d82c      	bhi.n	800be88 <UART_SetConfig+0x150>
 800be2e:	a201      	add	r2, pc, #4	; (adr r2, 800be34 <UART_SetConfig+0xfc>)
 800be30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be34:	0800be69 	.word	0x0800be69
 800be38:	0800be89 	.word	0x0800be89
 800be3c:	0800be89 	.word	0x0800be89
 800be40:	0800be89 	.word	0x0800be89
 800be44:	0800be79 	.word	0x0800be79
 800be48:	0800be89 	.word	0x0800be89
 800be4c:	0800be89 	.word	0x0800be89
 800be50:	0800be89 	.word	0x0800be89
 800be54:	0800be71 	.word	0x0800be71
 800be58:	0800be89 	.word	0x0800be89
 800be5c:	0800be89 	.word	0x0800be89
 800be60:	0800be89 	.word	0x0800be89
 800be64:	0800be81 	.word	0x0800be81
 800be68:	2300      	movs	r3, #0
 800be6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800be6e:	e06d      	b.n	800bf4c <UART_SetConfig+0x214>
 800be70:	2302      	movs	r3, #2
 800be72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800be76:	e069      	b.n	800bf4c <UART_SetConfig+0x214>
 800be78:	2304      	movs	r3, #4
 800be7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800be7e:	e065      	b.n	800bf4c <UART_SetConfig+0x214>
 800be80:	2308      	movs	r3, #8
 800be82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800be86:	e061      	b.n	800bf4c <UART_SetConfig+0x214>
 800be88:	2310      	movs	r3, #16
 800be8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800be8e:	bf00      	nop
 800be90:	e05c      	b.n	800bf4c <UART_SetConfig+0x214>
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	4a77      	ldr	r2, [pc, #476]	; (800c074 <UART_SetConfig+0x33c>)
 800be98:	4293      	cmp	r3, r2
 800be9a:	d125      	bne.n	800bee8 <UART_SetConfig+0x1b0>
 800be9c:	4b73      	ldr	r3, [pc, #460]	; (800c06c <UART_SetConfig+0x334>)
 800be9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bea2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800bea6:	2b10      	cmp	r3, #16
 800bea8:	d011      	beq.n	800bece <UART_SetConfig+0x196>
 800beaa:	2b10      	cmp	r3, #16
 800beac:	d802      	bhi.n	800beb4 <UART_SetConfig+0x17c>
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d005      	beq.n	800bebe <UART_SetConfig+0x186>
 800beb2:	e014      	b.n	800bede <UART_SetConfig+0x1a6>
 800beb4:	2b20      	cmp	r3, #32
 800beb6:	d006      	beq.n	800bec6 <UART_SetConfig+0x18e>
 800beb8:	2b30      	cmp	r3, #48	; 0x30
 800beba:	d00c      	beq.n	800bed6 <UART_SetConfig+0x19e>
 800bebc:	e00f      	b.n	800bede <UART_SetConfig+0x1a6>
 800bebe:	2300      	movs	r3, #0
 800bec0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bec4:	e042      	b.n	800bf4c <UART_SetConfig+0x214>
 800bec6:	2302      	movs	r3, #2
 800bec8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800becc:	e03e      	b.n	800bf4c <UART_SetConfig+0x214>
 800bece:	2304      	movs	r3, #4
 800bed0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bed4:	e03a      	b.n	800bf4c <UART_SetConfig+0x214>
 800bed6:	2308      	movs	r3, #8
 800bed8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bedc:	e036      	b.n	800bf4c <UART_SetConfig+0x214>
 800bede:	2310      	movs	r3, #16
 800bee0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bee4:	bf00      	nop
 800bee6:	e031      	b.n	800bf4c <UART_SetConfig+0x214>
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	4a5d      	ldr	r2, [pc, #372]	; (800c064 <UART_SetConfig+0x32c>)
 800beee:	4293      	cmp	r3, r2
 800bef0:	d129      	bne.n	800bf46 <UART_SetConfig+0x20e>
 800bef2:	4b5e      	ldr	r3, [pc, #376]	; (800c06c <UART_SetConfig+0x334>)
 800bef4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bef8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800befc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bf00:	d014      	beq.n	800bf2c <UART_SetConfig+0x1f4>
 800bf02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bf06:	d802      	bhi.n	800bf0e <UART_SetConfig+0x1d6>
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d007      	beq.n	800bf1c <UART_SetConfig+0x1e4>
 800bf0c:	e016      	b.n	800bf3c <UART_SetConfig+0x204>
 800bf0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bf12:	d007      	beq.n	800bf24 <UART_SetConfig+0x1ec>
 800bf14:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bf18:	d00c      	beq.n	800bf34 <UART_SetConfig+0x1fc>
 800bf1a:	e00f      	b.n	800bf3c <UART_SetConfig+0x204>
 800bf1c:	2300      	movs	r3, #0
 800bf1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bf22:	e013      	b.n	800bf4c <UART_SetConfig+0x214>
 800bf24:	2302      	movs	r3, #2
 800bf26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bf2a:	e00f      	b.n	800bf4c <UART_SetConfig+0x214>
 800bf2c:	2304      	movs	r3, #4
 800bf2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bf32:	e00b      	b.n	800bf4c <UART_SetConfig+0x214>
 800bf34:	2308      	movs	r3, #8
 800bf36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bf3a:	e007      	b.n	800bf4c <UART_SetConfig+0x214>
 800bf3c:	2310      	movs	r3, #16
 800bf3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bf42:	bf00      	nop
 800bf44:	e002      	b.n	800bf4c <UART_SetConfig+0x214>
 800bf46:	2310      	movs	r3, #16
 800bf48:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	4a44      	ldr	r2, [pc, #272]	; (800c064 <UART_SetConfig+0x32c>)
 800bf52:	4293      	cmp	r3, r2
 800bf54:	f040 80fb 	bne.w	800c14e <UART_SetConfig+0x416>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800bf58:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800bf5c:	2b08      	cmp	r3, #8
 800bf5e:	d824      	bhi.n	800bfaa <UART_SetConfig+0x272>
 800bf60:	a201      	add	r2, pc, #4	; (adr r2, 800bf68 <UART_SetConfig+0x230>)
 800bf62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf66:	bf00      	nop
 800bf68:	0800bf8d 	.word	0x0800bf8d
 800bf6c:	0800bfab 	.word	0x0800bfab
 800bf70:	0800bf95 	.word	0x0800bf95
 800bf74:	0800bfab 	.word	0x0800bfab
 800bf78:	0800bf9b 	.word	0x0800bf9b
 800bf7c:	0800bfab 	.word	0x0800bfab
 800bf80:	0800bfab 	.word	0x0800bfab
 800bf84:	0800bfab 	.word	0x0800bfab
 800bf88:	0800bfa3 	.word	0x0800bfa3
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 800bf8c:	f7ff fa60 	bl	800b450 <HAL_RCC_GetPCLK1Freq>
 800bf90:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800bf92:	e00d      	b.n	800bfb0 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 800bf94:	4b38      	ldr	r3, [pc, #224]	; (800c078 <UART_SetConfig+0x340>)
 800bf96:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800bf98:	e00a      	b.n	800bfb0 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 800bf9a:	f7ff f9c3 	bl	800b324 <HAL_RCC_GetSysClockFreq>
 800bf9e:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800bfa0:	e006      	b.n	800bfb0 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 800bfa2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bfa6:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800bfa8:	e002      	b.n	800bfb0 <UART_SetConfig+0x278>
      default:
        ret = HAL_ERROR;
 800bfaa:	2301      	movs	r3, #1
 800bfac:	76fb      	strb	r3, [r7, #27]
        break;
 800bfae:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800bfb0:	697b      	ldr	r3, [r7, #20]
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	f000 81c8 	beq.w	800c348 <UART_SetConfig+0x610>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	685a      	ldr	r2, [r3, #4]
 800bfbc:	4613      	mov	r3, r2
 800bfbe:	005b      	lsls	r3, r3, #1
 800bfc0:	4413      	add	r3, r2
 800bfc2:	697a      	ldr	r2, [r7, #20]
 800bfc4:	429a      	cmp	r2, r3
 800bfc6:	d305      	bcc.n	800bfd4 <UART_SetConfig+0x29c>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	685b      	ldr	r3, [r3, #4]
 800bfcc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bfce:	697a      	ldr	r2, [r7, #20]
 800bfd0:	429a      	cmp	r2, r3
 800bfd2:	d902      	bls.n	800bfda <UART_SetConfig+0x2a2>
      {
        ret = HAL_ERROR;
 800bfd4:	2301      	movs	r3, #1
 800bfd6:	76fb      	strb	r3, [r7, #27]
 800bfd8:	e1b6      	b.n	800c348 <UART_SetConfig+0x610>
      }
      else
      {
        switch (clocksource)
 800bfda:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800bfde:	2b08      	cmp	r3, #8
 800bfe0:	f200 80a2 	bhi.w	800c128 <UART_SetConfig+0x3f0>
 800bfe4:	a201      	add	r2, pc, #4	; (adr r2, 800bfec <UART_SetConfig+0x2b4>)
 800bfe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfea:	bf00      	nop
 800bfec:	0800c011 	.word	0x0800c011
 800bff0:	0800c129 	.word	0x0800c129
 800bff4:	0800c07d 	.word	0x0800c07d
 800bff8:	0800c129 	.word	0x0800c129
 800bffc:	0800c0b1 	.word	0x0800c0b1
 800c000:	0800c129 	.word	0x0800c129
 800c004:	0800c129 	.word	0x0800c129
 800c008:	0800c129 	.word	0x0800c129
 800c00c:	0800c0ff 	.word	0x0800c0ff
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 800c010:	f7ff fa1e 	bl	800b450 <HAL_RCC_GetPCLK1Freq>
 800c014:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800c016:	693b      	ldr	r3, [r7, #16]
 800c018:	4619      	mov	r1, r3
 800c01a:	f04f 0200 	mov.w	r2, #0
 800c01e:	f04f 0300 	mov.w	r3, #0
 800c022:	f04f 0400 	mov.w	r4, #0
 800c026:	0214      	lsls	r4, r2, #8
 800c028:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800c02c:	020b      	lsls	r3, r1, #8
 800c02e:	687a      	ldr	r2, [r7, #4]
 800c030:	6852      	ldr	r2, [r2, #4]
 800c032:	0852      	lsrs	r2, r2, #1
 800c034:	4611      	mov	r1, r2
 800c036:	f04f 0200 	mov.w	r2, #0
 800c03a:	eb13 0b01 	adds.w	fp, r3, r1
 800c03e:	eb44 0c02 	adc.w	ip, r4, r2
 800c042:	4658      	mov	r0, fp
 800c044:	4661      	mov	r1, ip
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	685b      	ldr	r3, [r3, #4]
 800c04a:	f04f 0400 	mov.w	r4, #0
 800c04e:	461a      	mov	r2, r3
 800c050:	4623      	mov	r3, r4
 800c052:	f7f4 fe29 	bl	8000ca8 <__aeabi_uldivmod>
 800c056:	4603      	mov	r3, r0
 800c058:	460c      	mov	r4, r1
 800c05a:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 800c05c:	e067      	b.n	800c12e <UART_SetConfig+0x3f6>
 800c05e:	bf00      	nop
 800c060:	efff69f3 	.word	0xefff69f3
 800c064:	40008000 	.word	0x40008000
 800c068:	40013800 	.word	0x40013800
 800c06c:	40021000 	.word	0x40021000
 800c070:	40004400 	.word	0x40004400
 800c074:	40004800 	.word	0x40004800
 800c078:	00f42400 	.word	0x00f42400
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	685b      	ldr	r3, [r3, #4]
 800c080:	085b      	lsrs	r3, r3, #1
 800c082:	f04f 0400 	mov.w	r4, #0
 800c086:	49ae      	ldr	r1, [pc, #696]	; (800c340 <UART_SetConfig+0x608>)
 800c088:	f04f 0200 	mov.w	r2, #0
 800c08c:	eb13 0b01 	adds.w	fp, r3, r1
 800c090:	eb44 0c02 	adc.w	ip, r4, r2
 800c094:	4658      	mov	r0, fp
 800c096:	4661      	mov	r1, ip
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	685b      	ldr	r3, [r3, #4]
 800c09c:	f04f 0400 	mov.w	r4, #0
 800c0a0:	461a      	mov	r2, r3
 800c0a2:	4623      	mov	r3, r4
 800c0a4:	f7f4 fe00 	bl	8000ca8 <__aeabi_uldivmod>
 800c0a8:	4603      	mov	r3, r0
 800c0aa:	460c      	mov	r4, r1
 800c0ac:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 800c0ae:	e03e      	b.n	800c12e <UART_SetConfig+0x3f6>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 800c0b0:	f7ff f938 	bl	800b324 <HAL_RCC_GetSysClockFreq>
 800c0b4:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800c0b6:	693b      	ldr	r3, [r7, #16]
 800c0b8:	4619      	mov	r1, r3
 800c0ba:	f04f 0200 	mov.w	r2, #0
 800c0be:	f04f 0300 	mov.w	r3, #0
 800c0c2:	f04f 0400 	mov.w	r4, #0
 800c0c6:	0214      	lsls	r4, r2, #8
 800c0c8:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800c0cc:	020b      	lsls	r3, r1, #8
 800c0ce:	687a      	ldr	r2, [r7, #4]
 800c0d0:	6852      	ldr	r2, [r2, #4]
 800c0d2:	0852      	lsrs	r2, r2, #1
 800c0d4:	4611      	mov	r1, r2
 800c0d6:	f04f 0200 	mov.w	r2, #0
 800c0da:	eb13 0b01 	adds.w	fp, r3, r1
 800c0de:	eb44 0c02 	adc.w	ip, r4, r2
 800c0e2:	4658      	mov	r0, fp
 800c0e4:	4661      	mov	r1, ip
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	685b      	ldr	r3, [r3, #4]
 800c0ea:	f04f 0400 	mov.w	r4, #0
 800c0ee:	461a      	mov	r2, r3
 800c0f0:	4623      	mov	r3, r4
 800c0f2:	f7f4 fdd9 	bl	8000ca8 <__aeabi_uldivmod>
 800c0f6:	4603      	mov	r3, r0
 800c0f8:	460c      	mov	r4, r1
 800c0fa:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 800c0fc:	e017      	b.n	800c12e <UART_SetConfig+0x3f6>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	685b      	ldr	r3, [r3, #4]
 800c102:	085b      	lsrs	r3, r3, #1
 800c104:	f04f 0400 	mov.w	r4, #0
 800c108:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 800c10c:	f144 0100 	adc.w	r1, r4, #0
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	685b      	ldr	r3, [r3, #4]
 800c114:	f04f 0400 	mov.w	r4, #0
 800c118:	461a      	mov	r2, r3
 800c11a:	4623      	mov	r3, r4
 800c11c:	f7f4 fdc4 	bl	8000ca8 <__aeabi_uldivmod>
 800c120:	4603      	mov	r3, r0
 800c122:	460c      	mov	r4, r1
 800c124:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 800c126:	e002      	b.n	800c12e <UART_SetConfig+0x3f6>
          default:
            ret = HAL_ERROR;
 800c128:	2301      	movs	r3, #1
 800c12a:	76fb      	strb	r3, [r7, #27]
            break;
 800c12c:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c12e:	69fb      	ldr	r3, [r7, #28]
 800c130:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c134:	d308      	bcc.n	800c148 <UART_SetConfig+0x410>
 800c136:	69fb      	ldr	r3, [r7, #28]
 800c138:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c13c:	d204      	bcs.n	800c148 <UART_SetConfig+0x410>
        {
          huart->Instance->BRR = usartdiv;
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	69fa      	ldr	r2, [r7, #28]
 800c144:	60da      	str	r2, [r3, #12]
 800c146:	e0ff      	b.n	800c348 <UART_SetConfig+0x610>
        }
        else
        {
          ret = HAL_ERROR;
 800c148:	2301      	movs	r3, #1
 800c14a:	76fb      	strb	r3, [r7, #27]
 800c14c:	e0fc      	b.n	800c348 <UART_SetConfig+0x610>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	69db      	ldr	r3, [r3, #28]
 800c152:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c156:	f040 8083 	bne.w	800c260 <UART_SetConfig+0x528>
  {
    switch (clocksource)
 800c15a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c15e:	2b08      	cmp	r3, #8
 800c160:	d85e      	bhi.n	800c220 <UART_SetConfig+0x4e8>
 800c162:	a201      	add	r2, pc, #4	; (adr r2, 800c168 <UART_SetConfig+0x430>)
 800c164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c168:	0800c18d 	.word	0x0800c18d
 800c16c:	0800c1ad 	.word	0x0800c1ad
 800c170:	0800c1cd 	.word	0x0800c1cd
 800c174:	0800c221 	.word	0x0800c221
 800c178:	0800c1e9 	.word	0x0800c1e9
 800c17c:	0800c221 	.word	0x0800c221
 800c180:	0800c221 	.word	0x0800c221
 800c184:	0800c221 	.word	0x0800c221
 800c188:	0800c209 	.word	0x0800c209
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c18c:	f7ff f960 	bl	800b450 <HAL_RCC_GetPCLK1Freq>
 800c190:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800c192:	693b      	ldr	r3, [r7, #16]
 800c194:	005a      	lsls	r2, r3, #1
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	685b      	ldr	r3, [r3, #4]
 800c19a:	085b      	lsrs	r3, r3, #1
 800c19c:	441a      	add	r2, r3
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	685b      	ldr	r3, [r3, #4]
 800c1a2:	fbb2 f3f3 	udiv	r3, r2, r3
 800c1a6:	b29b      	uxth	r3, r3
 800c1a8:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800c1aa:	e03c      	b.n	800c226 <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c1ac:	f7ff f966 	bl	800b47c <HAL_RCC_GetPCLK2Freq>
 800c1b0:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800c1b2:	693b      	ldr	r3, [r7, #16]
 800c1b4:	005a      	lsls	r2, r3, #1
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	685b      	ldr	r3, [r3, #4]
 800c1ba:	085b      	lsrs	r3, r3, #1
 800c1bc:	441a      	add	r2, r3
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	685b      	ldr	r3, [r3, #4]
 800c1c2:	fbb2 f3f3 	udiv	r3, r2, r3
 800c1c6:	b29b      	uxth	r3, r3
 800c1c8:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800c1ca:	e02c      	b.n	800c226 <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	685b      	ldr	r3, [r3, #4]
 800c1d0:	085b      	lsrs	r3, r3, #1
 800c1d2:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 800c1d6:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 800c1da:	687a      	ldr	r2, [r7, #4]
 800c1dc:	6852      	ldr	r2, [r2, #4]
 800c1de:	fbb3 f3f2 	udiv	r3, r3, r2
 800c1e2:	b29b      	uxth	r3, r3
 800c1e4:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800c1e6:	e01e      	b.n	800c226 <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c1e8:	f7ff f89c 	bl	800b324 <HAL_RCC_GetSysClockFreq>
 800c1ec:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800c1ee:	693b      	ldr	r3, [r7, #16]
 800c1f0:	005a      	lsls	r2, r3, #1
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	685b      	ldr	r3, [r3, #4]
 800c1f6:	085b      	lsrs	r3, r3, #1
 800c1f8:	441a      	add	r2, r3
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	685b      	ldr	r3, [r3, #4]
 800c1fe:	fbb2 f3f3 	udiv	r3, r2, r3
 800c202:	b29b      	uxth	r3, r3
 800c204:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800c206:	e00e      	b.n	800c226 <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	685b      	ldr	r3, [r3, #4]
 800c20c:	085b      	lsrs	r3, r3, #1
 800c20e:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	685b      	ldr	r3, [r3, #4]
 800c216:	fbb2 f3f3 	udiv	r3, r2, r3
 800c21a:	b29b      	uxth	r3, r3
 800c21c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800c21e:	e002      	b.n	800c226 <UART_SetConfig+0x4ee>
      default:
        ret = HAL_ERROR;
 800c220:	2301      	movs	r3, #1
 800c222:	76fb      	strb	r3, [r7, #27]
        break;
 800c224:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c226:	69fb      	ldr	r3, [r7, #28]
 800c228:	2b0f      	cmp	r3, #15
 800c22a:	d916      	bls.n	800c25a <UART_SetConfig+0x522>
 800c22c:	69fb      	ldr	r3, [r7, #28]
 800c22e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c232:	d212      	bcs.n	800c25a <UART_SetConfig+0x522>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c234:	69fb      	ldr	r3, [r7, #28]
 800c236:	b29b      	uxth	r3, r3
 800c238:	f023 030f 	bic.w	r3, r3, #15
 800c23c:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c23e:	69fb      	ldr	r3, [r7, #28]
 800c240:	085b      	lsrs	r3, r3, #1
 800c242:	b29b      	uxth	r3, r3
 800c244:	f003 0307 	and.w	r3, r3, #7
 800c248:	b29a      	uxth	r2, r3
 800c24a:	89fb      	ldrh	r3, [r7, #14]
 800c24c:	4313      	orrs	r3, r2
 800c24e:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	89fa      	ldrh	r2, [r7, #14]
 800c256:	60da      	str	r2, [r3, #12]
 800c258:	e076      	b.n	800c348 <UART_SetConfig+0x610>
    }
    else
    {
      ret = HAL_ERROR;
 800c25a:	2301      	movs	r3, #1
 800c25c:	76fb      	strb	r3, [r7, #27]
 800c25e:	e073      	b.n	800c348 <UART_SetConfig+0x610>
    }
  }
  else
  {
    switch (clocksource)
 800c260:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c264:	2b08      	cmp	r3, #8
 800c266:	d85c      	bhi.n	800c322 <UART_SetConfig+0x5ea>
 800c268:	a201      	add	r2, pc, #4	; (adr r2, 800c270 <UART_SetConfig+0x538>)
 800c26a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c26e:	bf00      	nop
 800c270:	0800c295 	.word	0x0800c295
 800c274:	0800c2b3 	.word	0x0800c2b3
 800c278:	0800c2d1 	.word	0x0800c2d1
 800c27c:	0800c323 	.word	0x0800c323
 800c280:	0800c2ed 	.word	0x0800c2ed
 800c284:	0800c323 	.word	0x0800c323
 800c288:	0800c323 	.word	0x0800c323
 800c28c:	0800c323 	.word	0x0800c323
 800c290:	0800c30b 	.word	0x0800c30b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c294:	f7ff f8dc 	bl	800b450 <HAL_RCC_GetPCLK1Freq>
 800c298:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	685b      	ldr	r3, [r3, #4]
 800c29e:	085a      	lsrs	r2, r3, #1
 800c2a0:	693b      	ldr	r3, [r7, #16]
 800c2a2:	441a      	add	r2, r3
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	685b      	ldr	r3, [r3, #4]
 800c2a8:	fbb2 f3f3 	udiv	r3, r2, r3
 800c2ac:	b29b      	uxth	r3, r3
 800c2ae:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800c2b0:	e03a      	b.n	800c328 <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c2b2:	f7ff f8e3 	bl	800b47c <HAL_RCC_GetPCLK2Freq>
 800c2b6:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	685b      	ldr	r3, [r3, #4]
 800c2bc:	085a      	lsrs	r2, r3, #1
 800c2be:	693b      	ldr	r3, [r7, #16]
 800c2c0:	441a      	add	r2, r3
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	685b      	ldr	r3, [r3, #4]
 800c2c6:	fbb2 f3f3 	udiv	r3, r2, r3
 800c2ca:	b29b      	uxth	r3, r3
 800c2cc:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800c2ce:	e02b      	b.n	800c328 <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	685b      	ldr	r3, [r3, #4]
 800c2d4:	085b      	lsrs	r3, r3, #1
 800c2d6:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800c2da:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800c2de:	687a      	ldr	r2, [r7, #4]
 800c2e0:	6852      	ldr	r2, [r2, #4]
 800c2e2:	fbb3 f3f2 	udiv	r3, r3, r2
 800c2e6:	b29b      	uxth	r3, r3
 800c2e8:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800c2ea:	e01d      	b.n	800c328 <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c2ec:	f7ff f81a 	bl	800b324 <HAL_RCC_GetSysClockFreq>
 800c2f0:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	685b      	ldr	r3, [r3, #4]
 800c2f6:	085a      	lsrs	r2, r3, #1
 800c2f8:	693b      	ldr	r3, [r7, #16]
 800c2fa:	441a      	add	r2, r3
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	685b      	ldr	r3, [r3, #4]
 800c300:	fbb2 f3f3 	udiv	r3, r2, r3
 800c304:	b29b      	uxth	r3, r3
 800c306:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800c308:	e00e      	b.n	800c328 <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	685b      	ldr	r3, [r3, #4]
 800c30e:	085b      	lsrs	r3, r3, #1
 800c310:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	685b      	ldr	r3, [r3, #4]
 800c318:	fbb2 f3f3 	udiv	r3, r2, r3
 800c31c:	b29b      	uxth	r3, r3
 800c31e:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800c320:	e002      	b.n	800c328 <UART_SetConfig+0x5f0>
      default:
        ret = HAL_ERROR;
 800c322:	2301      	movs	r3, #1
 800c324:	76fb      	strb	r3, [r7, #27]
        break;
 800c326:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c328:	69fb      	ldr	r3, [r7, #28]
 800c32a:	2b0f      	cmp	r3, #15
 800c32c:	d90a      	bls.n	800c344 <UART_SetConfig+0x60c>
 800c32e:	69fb      	ldr	r3, [r7, #28]
 800c330:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c334:	d206      	bcs.n	800c344 <UART_SetConfig+0x60c>
    {
      huart->Instance->BRR = usartdiv;
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	69fa      	ldr	r2, [r7, #28]
 800c33c:	60da      	str	r2, [r3, #12]
 800c33e:	e003      	b.n	800c348 <UART_SetConfig+0x610>
 800c340:	f4240000 	.word	0xf4240000
    }
    else
    {
      ret = HAL_ERROR;
 800c344:	2301      	movs	r3, #1
 800c346:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	2200      	movs	r2, #0
 800c34c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	2200      	movs	r2, #0
 800c352:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800c354:	7efb      	ldrb	r3, [r7, #27]
}
 800c356:	4618      	mov	r0, r3
 800c358:	3728      	adds	r7, #40	; 0x28
 800c35a:	46bd      	mov	sp, r7
 800c35c:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0800c360 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c360:	b480      	push	{r7}
 800c362:	b083      	sub	sp, #12
 800c364:	af00      	add	r7, sp, #0
 800c366:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c36c:	f003 0301 	and.w	r3, r3, #1
 800c370:	2b00      	cmp	r3, #0
 800c372:	d00a      	beq.n	800c38a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	685b      	ldr	r3, [r3, #4]
 800c37a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	430a      	orrs	r2, r1
 800c388:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c38e:	f003 0302 	and.w	r3, r3, #2
 800c392:	2b00      	cmp	r3, #0
 800c394:	d00a      	beq.n	800c3ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	685b      	ldr	r3, [r3, #4]
 800c39c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	430a      	orrs	r2, r1
 800c3aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3b0:	f003 0304 	and.w	r3, r3, #4
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d00a      	beq.n	800c3ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	685b      	ldr	r3, [r3, #4]
 800c3be:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	430a      	orrs	r2, r1
 800c3cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3d2:	f003 0308 	and.w	r3, r3, #8
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d00a      	beq.n	800c3f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	685b      	ldr	r3, [r3, #4]
 800c3e0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	430a      	orrs	r2, r1
 800c3ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3f4:	f003 0310 	and.w	r3, r3, #16
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d00a      	beq.n	800c412 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	689b      	ldr	r3, [r3, #8]
 800c402:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	430a      	orrs	r2, r1
 800c410:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c416:	f003 0320 	and.w	r3, r3, #32
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d00a      	beq.n	800c434 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	689b      	ldr	r3, [r3, #8]
 800c424:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	430a      	orrs	r2, r1
 800c432:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c438:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d01a      	beq.n	800c476 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	685b      	ldr	r3, [r3, #4]
 800c446:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	430a      	orrs	r2, r1
 800c454:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c45a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c45e:	d10a      	bne.n	800c476 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	685b      	ldr	r3, [r3, #4]
 800c466:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	430a      	orrs	r2, r1
 800c474:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c47a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d00a      	beq.n	800c498 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	685b      	ldr	r3, [r3, #4]
 800c488:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	430a      	orrs	r2, r1
 800c496:	605a      	str	r2, [r3, #4]
  }
}
 800c498:	bf00      	nop
 800c49a:	370c      	adds	r7, #12
 800c49c:	46bd      	mov	sp, r7
 800c49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4a2:	4770      	bx	lr

0800c4a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c4a4:	b580      	push	{r7, lr}
 800c4a6:	b086      	sub	sp, #24
 800c4a8:	af02      	add	r7, sp, #8
 800c4aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	2200      	movs	r2, #0
 800c4b0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800c4b2:	f7fb ff81 	bl	80083b8 <HAL_GetTick>
 800c4b6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	f003 0308 	and.w	r3, r3, #8
 800c4c2:	2b08      	cmp	r3, #8
 800c4c4:	d10e      	bne.n	800c4e4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c4c6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c4ca:	9300      	str	r3, [sp, #0]
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	2200      	movs	r2, #0
 800c4d0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c4d4:	6878      	ldr	r0, [r7, #4]
 800c4d6:	f000 f82a 	bl	800c52e <UART_WaitOnFlagUntilTimeout>
 800c4da:	4603      	mov	r3, r0
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d001      	beq.n	800c4e4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c4e0:	2303      	movs	r3, #3
 800c4e2:	e020      	b.n	800c526 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	f003 0304 	and.w	r3, r3, #4
 800c4ee:	2b04      	cmp	r3, #4
 800c4f0:	d10e      	bne.n	800c510 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c4f2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c4f6:	9300      	str	r3, [sp, #0]
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	2200      	movs	r2, #0
 800c4fc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c500:	6878      	ldr	r0, [r7, #4]
 800c502:	f000 f814 	bl	800c52e <UART_WaitOnFlagUntilTimeout>
 800c506:	4603      	mov	r3, r0
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d001      	beq.n	800c510 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c50c:	2303      	movs	r3, #3
 800c50e:	e00a      	b.n	800c526 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	2220      	movs	r2, #32
 800c514:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	2220      	movs	r2, #32
 800c51a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	2200      	movs	r2, #0
 800c520:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800c524:	2300      	movs	r3, #0
}
 800c526:	4618      	mov	r0, r3
 800c528:	3710      	adds	r7, #16
 800c52a:	46bd      	mov	sp, r7
 800c52c:	bd80      	pop	{r7, pc}

0800c52e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c52e:	b580      	push	{r7, lr}
 800c530:	b084      	sub	sp, #16
 800c532:	af00      	add	r7, sp, #0
 800c534:	60f8      	str	r0, [r7, #12]
 800c536:	60b9      	str	r1, [r7, #8]
 800c538:	603b      	str	r3, [r7, #0]
 800c53a:	4613      	mov	r3, r2
 800c53c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c53e:	e05d      	b.n	800c5fc <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c540:	69bb      	ldr	r3, [r7, #24]
 800c542:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c546:	d059      	beq.n	800c5fc <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c548:	f7fb ff36 	bl	80083b8 <HAL_GetTick>
 800c54c:	4602      	mov	r2, r0
 800c54e:	683b      	ldr	r3, [r7, #0]
 800c550:	1ad3      	subs	r3, r2, r3
 800c552:	69ba      	ldr	r2, [r7, #24]
 800c554:	429a      	cmp	r2, r3
 800c556:	d302      	bcc.n	800c55e <UART_WaitOnFlagUntilTimeout+0x30>
 800c558:	69bb      	ldr	r3, [r7, #24]
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d11b      	bne.n	800c596 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	681a      	ldr	r2, [r3, #0]
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c56c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	689a      	ldr	r2, [r3, #8]
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	f022 0201 	bic.w	r2, r2, #1
 800c57c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	2220      	movs	r2, #32
 800c582:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	2220      	movs	r2, #32
 800c588:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	2200      	movs	r2, #0
 800c58e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800c592:	2303      	movs	r3, #3
 800c594:	e042      	b.n	800c61c <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	f003 0304 	and.w	r3, r3, #4
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d02b      	beq.n	800c5fc <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	69db      	ldr	r3, [r3, #28]
 800c5aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c5ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c5b2:	d123      	bne.n	800c5fc <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c5bc:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	681a      	ldr	r2, [r3, #0]
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c5cc:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	689a      	ldr	r2, [r3, #8]
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	f022 0201 	bic.w	r2, r2, #1
 800c5dc:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	2220      	movs	r2, #32
 800c5e2:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	2220      	movs	r2, #32
 800c5e8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	2220      	movs	r2, #32
 800c5ee:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	2200      	movs	r2, #0
 800c5f4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800c5f8:	2303      	movs	r3, #3
 800c5fa:	e00f      	b.n	800c61c <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	69da      	ldr	r2, [r3, #28]
 800c602:	68bb      	ldr	r3, [r7, #8]
 800c604:	4013      	ands	r3, r2
 800c606:	68ba      	ldr	r2, [r7, #8]
 800c608:	429a      	cmp	r2, r3
 800c60a:	bf0c      	ite	eq
 800c60c:	2301      	moveq	r3, #1
 800c60e:	2300      	movne	r3, #0
 800c610:	b2db      	uxtb	r3, r3
 800c612:	461a      	mov	r2, r3
 800c614:	79fb      	ldrb	r3, [r7, #7]
 800c616:	429a      	cmp	r2, r3
 800c618:	d092      	beq.n	800c540 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c61a:	2300      	movs	r3, #0
}
 800c61c:	4618      	mov	r0, r3
 800c61e:	3710      	adds	r7, #16
 800c620:	46bd      	mov	sp, r7
 800c622:	bd80      	pop	{r7, pc}

0800c624 <atof>:
 800c624:	2100      	movs	r1, #0
 800c626:	f001 b933 	b.w	800d890 <strtod>
	...

0800c62c <clock>:
 800c62c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c62e:	4b08      	ldr	r3, [pc, #32]	; (800c650 <clock+0x24>)
 800c630:	4669      	mov	r1, sp
 800c632:	6818      	ldr	r0, [r3, #0]
 800c634:	f002 fb6b 	bl	800ed0e <_times_r>
 800c638:	1c43      	adds	r3, r0, #1
 800c63a:	d006      	beq.n	800c64a <clock+0x1e>
 800c63c:	e9dd 0300 	ldrd	r0, r3, [sp]
 800c640:	4418      	add	r0, r3
 800c642:	9b02      	ldr	r3, [sp, #8]
 800c644:	4418      	add	r0, r3
 800c646:	9b03      	ldr	r3, [sp, #12]
 800c648:	4418      	add	r0, r3
 800c64a:	b005      	add	sp, #20
 800c64c:	f85d fb04 	ldr.w	pc, [sp], #4
 800c650:	200000ec 	.word	0x200000ec

0800c654 <gcvt>:
 800c654:	b530      	push	{r4, r5, lr}
 800c656:	ed2d 8b02 	vpush	{d8}
 800c65a:	eeb0 8a40 	vmov.f32	s16, s0
 800c65e:	eef0 8a60 	vmov.f32	s17, s1
 800c662:	460c      	mov	r4, r1
 800c664:	2200      	movs	r2, #0
 800c666:	b083      	sub	sp, #12
 800c668:	4605      	mov	r5, r0
 800c66a:	2300      	movs	r3, #0
 800c66c:	ec51 0b10 	vmov	r0, r1, d0
 800c670:	f7f4 fa44 	bl	8000afc <__aeabi_dcmplt>
 800c674:	4622      	mov	r2, r4
 800c676:	b118      	cbz	r0, 800c680 <gcvt+0x2c>
 800c678:	232d      	movs	r3, #45	; 0x2d
 800c67a:	f802 3b01 	strb.w	r3, [r2], #1
 800c67e:	3d01      	subs	r5, #1
 800c680:	2300      	movs	r3, #0
 800c682:	4809      	ldr	r0, [pc, #36]	; (800c6a8 <gcvt+0x54>)
 800c684:	9300      	str	r3, [sp, #0]
 800c686:	4629      	mov	r1, r5
 800c688:	2367      	movs	r3, #103	; 0x67
 800c68a:	eeb0 0a48 	vmov.f32	s0, s16
 800c68e:	eef0 0a68 	vmov.f32	s1, s17
 800c692:	6800      	ldr	r0, [r0, #0]
 800c694:	f003 f9f8 	bl	800fa88 <_gcvt>
 800c698:	2800      	cmp	r0, #0
 800c69a:	bf14      	ite	ne
 800c69c:	4620      	movne	r0, r4
 800c69e:	2000      	moveq	r0, #0
 800c6a0:	b003      	add	sp, #12
 800c6a2:	ecbd 8b02 	vpop	{d8}
 800c6a6:	bd30      	pop	{r4, r5, pc}
 800c6a8:	200000ec 	.word	0x200000ec

0800c6ac <__errno>:
 800c6ac:	4b01      	ldr	r3, [pc, #4]	; (800c6b4 <__errno+0x8>)
 800c6ae:	6818      	ldr	r0, [r3, #0]
 800c6b0:	4770      	bx	lr
 800c6b2:	bf00      	nop
 800c6b4:	200000ec 	.word	0x200000ec

0800c6b8 <__libc_init_array>:
 800c6b8:	b570      	push	{r4, r5, r6, lr}
 800c6ba:	4e0d      	ldr	r6, [pc, #52]	; (800c6f0 <__libc_init_array+0x38>)
 800c6bc:	4c0d      	ldr	r4, [pc, #52]	; (800c6f4 <__libc_init_array+0x3c>)
 800c6be:	1ba4      	subs	r4, r4, r6
 800c6c0:	10a4      	asrs	r4, r4, #2
 800c6c2:	2500      	movs	r5, #0
 800c6c4:	42a5      	cmp	r5, r4
 800c6c6:	d109      	bne.n	800c6dc <__libc_init_array+0x24>
 800c6c8:	4e0b      	ldr	r6, [pc, #44]	; (800c6f8 <__libc_init_array+0x40>)
 800c6ca:	4c0c      	ldr	r4, [pc, #48]	; (800c6fc <__libc_init_array+0x44>)
 800c6cc:	f004 fe24 	bl	8011318 <_init>
 800c6d0:	1ba4      	subs	r4, r4, r6
 800c6d2:	10a4      	asrs	r4, r4, #2
 800c6d4:	2500      	movs	r5, #0
 800c6d6:	42a5      	cmp	r5, r4
 800c6d8:	d105      	bne.n	800c6e6 <__libc_init_array+0x2e>
 800c6da:	bd70      	pop	{r4, r5, r6, pc}
 800c6dc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c6e0:	4798      	blx	r3
 800c6e2:	3501      	adds	r5, #1
 800c6e4:	e7ee      	b.n	800c6c4 <__libc_init_array+0xc>
 800c6e6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c6ea:	4798      	blx	r3
 800c6ec:	3501      	adds	r5, #1
 800c6ee:	e7f2      	b.n	800c6d6 <__libc_init_array+0x1e>
 800c6f0:	08011c20 	.word	0x08011c20
 800c6f4:	08011c20 	.word	0x08011c20
 800c6f8:	08011c20 	.word	0x08011c20
 800c6fc:	08011c28 	.word	0x08011c28

0800c700 <malloc>:
 800c700:	4b02      	ldr	r3, [pc, #8]	; (800c70c <malloc+0xc>)
 800c702:	4601      	mov	r1, r0
 800c704:	6818      	ldr	r0, [r3, #0]
 800c706:	f000 b80b 	b.w	800c720 <_malloc_r>
 800c70a:	bf00      	nop
 800c70c:	200000ec 	.word	0x200000ec

0800c710 <free>:
 800c710:	4b02      	ldr	r3, [pc, #8]	; (800c71c <free+0xc>)
 800c712:	4601      	mov	r1, r0
 800c714:	6818      	ldr	r0, [r3, #0]
 800c716:	f003 bae9 	b.w	800fcec <_free_r>
 800c71a:	bf00      	nop
 800c71c:	200000ec 	.word	0x200000ec

0800c720 <_malloc_r>:
 800c720:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c724:	f101 050b 	add.w	r5, r1, #11
 800c728:	2d16      	cmp	r5, #22
 800c72a:	4606      	mov	r6, r0
 800c72c:	d906      	bls.n	800c73c <_malloc_r+0x1c>
 800c72e:	f035 0507 	bics.w	r5, r5, #7
 800c732:	d504      	bpl.n	800c73e <_malloc_r+0x1e>
 800c734:	230c      	movs	r3, #12
 800c736:	6033      	str	r3, [r6, #0]
 800c738:	2400      	movs	r4, #0
 800c73a:	e1a8      	b.n	800ca8e <_malloc_r+0x36e>
 800c73c:	2510      	movs	r5, #16
 800c73e:	428d      	cmp	r5, r1
 800c740:	d3f8      	bcc.n	800c734 <_malloc_r+0x14>
 800c742:	4630      	mov	r0, r6
 800c744:	f000 fa2a 	bl	800cb9c <__malloc_lock>
 800c748:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
 800c74c:	4fc0      	ldr	r7, [pc, #768]	; (800ca50 <_malloc_r+0x330>)
 800c74e:	d238      	bcs.n	800c7c2 <_malloc_r+0xa2>
 800c750:	f105 0208 	add.w	r2, r5, #8
 800c754:	443a      	add	r2, r7
 800c756:	f1a2 0108 	sub.w	r1, r2, #8
 800c75a:	6854      	ldr	r4, [r2, #4]
 800c75c:	428c      	cmp	r4, r1
 800c75e:	ea4f 03d5 	mov.w	r3, r5, lsr #3
 800c762:	d102      	bne.n	800c76a <_malloc_r+0x4a>
 800c764:	68d4      	ldr	r4, [r2, #12]
 800c766:	42a2      	cmp	r2, r4
 800c768:	d010      	beq.n	800c78c <_malloc_r+0x6c>
 800c76a:	6863      	ldr	r3, [r4, #4]
 800c76c:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 800c770:	f023 0303 	bic.w	r3, r3, #3
 800c774:	60ca      	str	r2, [r1, #12]
 800c776:	4423      	add	r3, r4
 800c778:	6091      	str	r1, [r2, #8]
 800c77a:	685a      	ldr	r2, [r3, #4]
 800c77c:	f042 0201 	orr.w	r2, r2, #1
 800c780:	605a      	str	r2, [r3, #4]
 800c782:	4630      	mov	r0, r6
 800c784:	f000 fa10 	bl	800cba8 <__malloc_unlock>
 800c788:	3408      	adds	r4, #8
 800c78a:	e180      	b.n	800ca8e <_malloc_r+0x36e>
 800c78c:	3302      	adds	r3, #2
 800c78e:	4ab1      	ldr	r2, [pc, #708]	; (800ca54 <_malloc_r+0x334>)
 800c790:	693c      	ldr	r4, [r7, #16]
 800c792:	4294      	cmp	r4, r2
 800c794:	4611      	mov	r1, r2
 800c796:	d075      	beq.n	800c884 <_malloc_r+0x164>
 800c798:	6860      	ldr	r0, [r4, #4]
 800c79a:	f020 0c03 	bic.w	ip, r0, #3
 800c79e:	ebac 0005 	sub.w	r0, ip, r5
 800c7a2:	280f      	cmp	r0, #15
 800c7a4:	dd48      	ble.n	800c838 <_malloc_r+0x118>
 800c7a6:	1963      	adds	r3, r4, r5
 800c7a8:	f045 0501 	orr.w	r5, r5, #1
 800c7ac:	6065      	str	r5, [r4, #4]
 800c7ae:	e9c7 3304 	strd	r3, r3, [r7, #16]
 800c7b2:	e9c3 2202 	strd	r2, r2, [r3, #8]
 800c7b6:	f040 0201 	orr.w	r2, r0, #1
 800c7ba:	605a      	str	r2, [r3, #4]
 800c7bc:	f844 000c 	str.w	r0, [r4, ip]
 800c7c0:	e7df      	b.n	800c782 <_malloc_r+0x62>
 800c7c2:	0a6b      	lsrs	r3, r5, #9
 800c7c4:	d02a      	beq.n	800c81c <_malloc_r+0xfc>
 800c7c6:	2b04      	cmp	r3, #4
 800c7c8:	d812      	bhi.n	800c7f0 <_malloc_r+0xd0>
 800c7ca:	09ab      	lsrs	r3, r5, #6
 800c7cc:	3338      	adds	r3, #56	; 0x38
 800c7ce:	1c5a      	adds	r2, r3, #1
 800c7d0:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
 800c7d4:	f1a2 0c08 	sub.w	ip, r2, #8
 800c7d8:	6854      	ldr	r4, [r2, #4]
 800c7da:	4564      	cmp	r4, ip
 800c7dc:	d006      	beq.n	800c7ec <_malloc_r+0xcc>
 800c7de:	6862      	ldr	r2, [r4, #4]
 800c7e0:	f022 0203 	bic.w	r2, r2, #3
 800c7e4:	1b50      	subs	r0, r2, r5
 800c7e6:	280f      	cmp	r0, #15
 800c7e8:	dd1c      	ble.n	800c824 <_malloc_r+0x104>
 800c7ea:	3b01      	subs	r3, #1
 800c7ec:	3301      	adds	r3, #1
 800c7ee:	e7ce      	b.n	800c78e <_malloc_r+0x6e>
 800c7f0:	2b14      	cmp	r3, #20
 800c7f2:	d801      	bhi.n	800c7f8 <_malloc_r+0xd8>
 800c7f4:	335b      	adds	r3, #91	; 0x5b
 800c7f6:	e7ea      	b.n	800c7ce <_malloc_r+0xae>
 800c7f8:	2b54      	cmp	r3, #84	; 0x54
 800c7fa:	d802      	bhi.n	800c802 <_malloc_r+0xe2>
 800c7fc:	0b2b      	lsrs	r3, r5, #12
 800c7fe:	336e      	adds	r3, #110	; 0x6e
 800c800:	e7e5      	b.n	800c7ce <_malloc_r+0xae>
 800c802:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 800c806:	d802      	bhi.n	800c80e <_malloc_r+0xee>
 800c808:	0beb      	lsrs	r3, r5, #15
 800c80a:	3377      	adds	r3, #119	; 0x77
 800c80c:	e7df      	b.n	800c7ce <_malloc_r+0xae>
 800c80e:	f240 5254 	movw	r2, #1364	; 0x554
 800c812:	4293      	cmp	r3, r2
 800c814:	d804      	bhi.n	800c820 <_malloc_r+0x100>
 800c816:	0cab      	lsrs	r3, r5, #18
 800c818:	337c      	adds	r3, #124	; 0x7c
 800c81a:	e7d8      	b.n	800c7ce <_malloc_r+0xae>
 800c81c:	233f      	movs	r3, #63	; 0x3f
 800c81e:	e7d6      	b.n	800c7ce <_malloc_r+0xae>
 800c820:	237e      	movs	r3, #126	; 0x7e
 800c822:	e7d4      	b.n	800c7ce <_malloc_r+0xae>
 800c824:	2800      	cmp	r0, #0
 800c826:	68e1      	ldr	r1, [r4, #12]
 800c828:	db04      	blt.n	800c834 <_malloc_r+0x114>
 800c82a:	68a3      	ldr	r3, [r4, #8]
 800c82c:	60d9      	str	r1, [r3, #12]
 800c82e:	608b      	str	r3, [r1, #8]
 800c830:	18a3      	adds	r3, r4, r2
 800c832:	e7a2      	b.n	800c77a <_malloc_r+0x5a>
 800c834:	460c      	mov	r4, r1
 800c836:	e7d0      	b.n	800c7da <_malloc_r+0xba>
 800c838:	2800      	cmp	r0, #0
 800c83a:	e9c7 2204 	strd	r2, r2, [r7, #16]
 800c83e:	db07      	blt.n	800c850 <_malloc_r+0x130>
 800c840:	44a4      	add	ip, r4
 800c842:	f8dc 3004 	ldr.w	r3, [ip, #4]
 800c846:	f043 0301 	orr.w	r3, r3, #1
 800c84a:	f8cc 3004 	str.w	r3, [ip, #4]
 800c84e:	e798      	b.n	800c782 <_malloc_r+0x62>
 800c850:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 800c854:	6878      	ldr	r0, [r7, #4]
 800c856:	f080 8099 	bcs.w	800c98c <_malloc_r+0x26c>
 800c85a:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 800c85e:	ea4f 0eac 	mov.w	lr, ip, asr #2
 800c862:	2201      	movs	r2, #1
 800c864:	f10c 0c01 	add.w	ip, ip, #1
 800c868:	fa02 f20e 	lsl.w	r2, r2, lr
 800c86c:	4310      	orrs	r0, r2
 800c86e:	6078      	str	r0, [r7, #4]
 800c870:	eb07 02cc 	add.w	r2, r7, ip, lsl #3
 800c874:	f857 003c 	ldr.w	r0, [r7, ip, lsl #3]
 800c878:	3a08      	subs	r2, #8
 800c87a:	e9c4 0202 	strd	r0, r2, [r4, #8]
 800c87e:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
 800c882:	60c4      	str	r4, [r0, #12]
 800c884:	2001      	movs	r0, #1
 800c886:	109a      	asrs	r2, r3, #2
 800c888:	fa00 f202 	lsl.w	r2, r0, r2
 800c88c:	6878      	ldr	r0, [r7, #4]
 800c88e:	4290      	cmp	r0, r2
 800c890:	d326      	bcc.n	800c8e0 <_malloc_r+0x1c0>
 800c892:	4210      	tst	r0, r2
 800c894:	d106      	bne.n	800c8a4 <_malloc_r+0x184>
 800c896:	f023 0303 	bic.w	r3, r3, #3
 800c89a:	0052      	lsls	r2, r2, #1
 800c89c:	4210      	tst	r0, r2
 800c89e:	f103 0304 	add.w	r3, r3, #4
 800c8a2:	d0fa      	beq.n	800c89a <_malloc_r+0x17a>
 800c8a4:	eb07 0cc3 	add.w	ip, r7, r3, lsl #3
 800c8a8:	46e1      	mov	r9, ip
 800c8aa:	4698      	mov	r8, r3
 800c8ac:	f8d9 400c 	ldr.w	r4, [r9, #12]
 800c8b0:	454c      	cmp	r4, r9
 800c8b2:	f040 80af 	bne.w	800ca14 <_malloc_r+0x2f4>
 800c8b6:	f108 0801 	add.w	r8, r8, #1
 800c8ba:	f018 0f03 	tst.w	r8, #3
 800c8be:	f109 0908 	add.w	r9, r9, #8
 800c8c2:	d1f3      	bne.n	800c8ac <_malloc_r+0x18c>
 800c8c4:	0798      	lsls	r0, r3, #30
 800c8c6:	f040 80e8 	bne.w	800ca9a <_malloc_r+0x37a>
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	ea23 0302 	bic.w	r3, r3, r2
 800c8d0:	607b      	str	r3, [r7, #4]
 800c8d2:	6878      	ldr	r0, [r7, #4]
 800c8d4:	0052      	lsls	r2, r2, #1
 800c8d6:	4290      	cmp	r0, r2
 800c8d8:	d302      	bcc.n	800c8e0 <_malloc_r+0x1c0>
 800c8da:	2a00      	cmp	r2, #0
 800c8dc:	f040 80ec 	bne.w	800cab8 <_malloc_r+0x398>
 800c8e0:	f8d7 a008 	ldr.w	sl, [r7, #8]
 800c8e4:	f8da 4004 	ldr.w	r4, [sl, #4]
 800c8e8:	f024 0203 	bic.w	r2, r4, #3
 800c8ec:	42aa      	cmp	r2, r5
 800c8ee:	d303      	bcc.n	800c8f8 <_malloc_r+0x1d8>
 800c8f0:	1b53      	subs	r3, r2, r5
 800c8f2:	2b0f      	cmp	r3, #15
 800c8f4:	f300 8140 	bgt.w	800cb78 <_malloc_r+0x458>
 800c8f8:	4b57      	ldr	r3, [pc, #348]	; (800ca58 <_malloc_r+0x338>)
 800c8fa:	9200      	str	r2, [sp, #0]
 800c8fc:	2008      	movs	r0, #8
 800c8fe:	681c      	ldr	r4, [r3, #0]
 800c900:	f002 f9f8 	bl	800ecf4 <sysconf>
 800c904:	4b55      	ldr	r3, [pc, #340]	; (800ca5c <_malloc_r+0x33c>)
 800c906:	9a00      	ldr	r2, [sp, #0]
 800c908:	6819      	ldr	r1, [r3, #0]
 800c90a:	3410      	adds	r4, #16
 800c90c:	3101      	adds	r1, #1
 800c90e:	442c      	add	r4, r5
 800c910:	bf1f      	itttt	ne
 800c912:	f104 34ff 	addne.w	r4, r4, #4294967295
 800c916:	1824      	addne	r4, r4, r0
 800c918:	4241      	negne	r1, r0
 800c91a:	400c      	andne	r4, r1
 800c91c:	4680      	mov	r8, r0
 800c91e:	4621      	mov	r1, r4
 800c920:	4630      	mov	r0, r6
 800c922:	e9cd 2300 	strd	r2, r3, [sp]
 800c926:	f000 f945 	bl	800cbb4 <_sbrk_r>
 800c92a:	f1b0 3fff 	cmp.w	r0, #4294967295
 800c92e:	4683      	mov	fp, r0
 800c930:	f000 80fb 	beq.w	800cb2a <_malloc_r+0x40a>
 800c934:	9a00      	ldr	r2, [sp, #0]
 800c936:	9b01      	ldr	r3, [sp, #4]
 800c938:	eb0a 0102 	add.w	r1, sl, r2
 800c93c:	4281      	cmp	r1, r0
 800c93e:	d902      	bls.n	800c946 <_malloc_r+0x226>
 800c940:	45ba      	cmp	sl, r7
 800c942:	f040 80f2 	bne.w	800cb2a <_malloc_r+0x40a>
 800c946:	f8df 9120 	ldr.w	r9, [pc, #288]	; 800ca68 <_malloc_r+0x348>
 800c94a:	f8d9 0000 	ldr.w	r0, [r9]
 800c94e:	4559      	cmp	r1, fp
 800c950:	eb00 0e04 	add.w	lr, r0, r4
 800c954:	f8c9 e000 	str.w	lr, [r9]
 800c958:	f108 3cff 	add.w	ip, r8, #4294967295
 800c95c:	f040 80ae 	bne.w	800cabc <_malloc_r+0x39c>
 800c960:	ea11 0f0c 	tst.w	r1, ip
 800c964:	f040 80aa 	bne.w	800cabc <_malloc_r+0x39c>
 800c968:	68bb      	ldr	r3, [r7, #8]
 800c96a:	4414      	add	r4, r2
 800c96c:	f044 0401 	orr.w	r4, r4, #1
 800c970:	605c      	str	r4, [r3, #4]
 800c972:	4a3b      	ldr	r2, [pc, #236]	; (800ca60 <_malloc_r+0x340>)
 800c974:	f8d9 3000 	ldr.w	r3, [r9]
 800c978:	6811      	ldr	r1, [r2, #0]
 800c97a:	428b      	cmp	r3, r1
 800c97c:	bf88      	it	hi
 800c97e:	6013      	strhi	r3, [r2, #0]
 800c980:	4a38      	ldr	r2, [pc, #224]	; (800ca64 <_malloc_r+0x344>)
 800c982:	6811      	ldr	r1, [r2, #0]
 800c984:	428b      	cmp	r3, r1
 800c986:	bf88      	it	hi
 800c988:	6013      	strhi	r3, [r2, #0]
 800c98a:	e0ce      	b.n	800cb2a <_malloc_r+0x40a>
 800c98c:	ea4f 225c 	mov.w	r2, ip, lsr #9
 800c990:	2a04      	cmp	r2, #4
 800c992:	d818      	bhi.n	800c9c6 <_malloc_r+0x2a6>
 800c994:	ea4f 129c 	mov.w	r2, ip, lsr #6
 800c998:	3238      	adds	r2, #56	; 0x38
 800c99a:	f102 0e01 	add.w	lr, r2, #1
 800c99e:	eb07 08c2 	add.w	r8, r7, r2, lsl #3
 800c9a2:	f857 e03e 	ldr.w	lr, [r7, lr, lsl #3]
 800c9a6:	45f0      	cmp	r8, lr
 800c9a8:	d12b      	bne.n	800ca02 <_malloc_r+0x2e2>
 800c9aa:	1092      	asrs	r2, r2, #2
 800c9ac:	f04f 0c01 	mov.w	ip, #1
 800c9b0:	fa0c f202 	lsl.w	r2, ip, r2
 800c9b4:	4310      	orrs	r0, r2
 800c9b6:	6078      	str	r0, [r7, #4]
 800c9b8:	e9c4 e802 	strd	lr, r8, [r4, #8]
 800c9bc:	f8c8 4008 	str.w	r4, [r8, #8]
 800c9c0:	f8ce 400c 	str.w	r4, [lr, #12]
 800c9c4:	e75e      	b.n	800c884 <_malloc_r+0x164>
 800c9c6:	2a14      	cmp	r2, #20
 800c9c8:	d801      	bhi.n	800c9ce <_malloc_r+0x2ae>
 800c9ca:	325b      	adds	r2, #91	; 0x5b
 800c9cc:	e7e5      	b.n	800c99a <_malloc_r+0x27a>
 800c9ce:	2a54      	cmp	r2, #84	; 0x54
 800c9d0:	d803      	bhi.n	800c9da <_malloc_r+0x2ba>
 800c9d2:	ea4f 321c 	mov.w	r2, ip, lsr #12
 800c9d6:	326e      	adds	r2, #110	; 0x6e
 800c9d8:	e7df      	b.n	800c99a <_malloc_r+0x27a>
 800c9da:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800c9de:	d803      	bhi.n	800c9e8 <_malloc_r+0x2c8>
 800c9e0:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 800c9e4:	3277      	adds	r2, #119	; 0x77
 800c9e6:	e7d8      	b.n	800c99a <_malloc_r+0x27a>
 800c9e8:	f240 5e54 	movw	lr, #1364	; 0x554
 800c9ec:	4572      	cmp	r2, lr
 800c9ee:	bf9a      	itte	ls
 800c9f0:	ea4f 429c 	movls.w	r2, ip, lsr #18
 800c9f4:	327c      	addls	r2, #124	; 0x7c
 800c9f6:	227e      	movhi	r2, #126	; 0x7e
 800c9f8:	e7cf      	b.n	800c99a <_malloc_r+0x27a>
 800c9fa:	f8de e008 	ldr.w	lr, [lr, #8]
 800c9fe:	45f0      	cmp	r8, lr
 800ca00:	d005      	beq.n	800ca0e <_malloc_r+0x2ee>
 800ca02:	f8de 2004 	ldr.w	r2, [lr, #4]
 800ca06:	f022 0203 	bic.w	r2, r2, #3
 800ca0a:	4562      	cmp	r2, ip
 800ca0c:	d8f5      	bhi.n	800c9fa <_malloc_r+0x2da>
 800ca0e:	f8de 800c 	ldr.w	r8, [lr, #12]
 800ca12:	e7d1      	b.n	800c9b8 <_malloc_r+0x298>
 800ca14:	6860      	ldr	r0, [r4, #4]
 800ca16:	f8d4 e00c 	ldr.w	lr, [r4, #12]
 800ca1a:	f020 0003 	bic.w	r0, r0, #3
 800ca1e:	eba0 0a05 	sub.w	sl, r0, r5
 800ca22:	f1ba 0f0f 	cmp.w	sl, #15
 800ca26:	dd21      	ble.n	800ca6c <_malloc_r+0x34c>
 800ca28:	68a2      	ldr	r2, [r4, #8]
 800ca2a:	1963      	adds	r3, r4, r5
 800ca2c:	f045 0501 	orr.w	r5, r5, #1
 800ca30:	6065      	str	r5, [r4, #4]
 800ca32:	f8c2 e00c 	str.w	lr, [r2, #12]
 800ca36:	f8ce 2008 	str.w	r2, [lr, #8]
 800ca3a:	f04a 0201 	orr.w	r2, sl, #1
 800ca3e:	e9c7 3304 	strd	r3, r3, [r7, #16]
 800ca42:	e9c3 1102 	strd	r1, r1, [r3, #8]
 800ca46:	605a      	str	r2, [r3, #4]
 800ca48:	f844 a000 	str.w	sl, [r4, r0]
 800ca4c:	e699      	b.n	800c782 <_malloc_r+0x62>
 800ca4e:	bf00      	nop
 800ca50:	20000518 	.word	0x20000518
 800ca54:	20000520 	.word	0x20000520
 800ca58:	20000b48 	.word	0x20000b48
 800ca5c:	20000920 	.word	0x20000920
 800ca60:	20000b40 	.word	0x20000b40
 800ca64:	20000b44 	.word	0x20000b44
 800ca68:	20000b18 	.word	0x20000b18
 800ca6c:	f1ba 0f00 	cmp.w	sl, #0
 800ca70:	db11      	blt.n	800ca96 <_malloc_r+0x376>
 800ca72:	4420      	add	r0, r4
 800ca74:	6843      	ldr	r3, [r0, #4]
 800ca76:	f043 0301 	orr.w	r3, r3, #1
 800ca7a:	6043      	str	r3, [r0, #4]
 800ca7c:	f854 3f08 	ldr.w	r3, [r4, #8]!
 800ca80:	4630      	mov	r0, r6
 800ca82:	f8c3 e00c 	str.w	lr, [r3, #12]
 800ca86:	f8ce 3008 	str.w	r3, [lr, #8]
 800ca8a:	f000 f88d 	bl	800cba8 <__malloc_unlock>
 800ca8e:	4620      	mov	r0, r4
 800ca90:	b003      	add	sp, #12
 800ca92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca96:	4674      	mov	r4, lr
 800ca98:	e70a      	b.n	800c8b0 <_malloc_r+0x190>
 800ca9a:	f1ac 0008 	sub.w	r0, ip, #8
 800ca9e:	f8dc c000 	ldr.w	ip, [ip]
 800caa2:	4584      	cmp	ip, r0
 800caa4:	f103 33ff 	add.w	r3, r3, #4294967295
 800caa8:	f43f af0c 	beq.w	800c8c4 <_malloc_r+0x1a4>
 800caac:	e711      	b.n	800c8d2 <_malloc_r+0x1b2>
 800caae:	3304      	adds	r3, #4
 800cab0:	0052      	lsls	r2, r2, #1
 800cab2:	4210      	tst	r0, r2
 800cab4:	d0fb      	beq.n	800caae <_malloc_r+0x38e>
 800cab6:	e6f5      	b.n	800c8a4 <_malloc_r+0x184>
 800cab8:	4643      	mov	r3, r8
 800caba:	e7fa      	b.n	800cab2 <_malloc_r+0x392>
 800cabc:	6818      	ldr	r0, [r3, #0]
 800cabe:	9200      	str	r2, [sp, #0]
 800cac0:	3001      	adds	r0, #1
 800cac2:	bf1b      	ittet	ne
 800cac4:	ebab 0101 	subne.w	r1, fp, r1
 800cac8:	4471      	addne	r1, lr
 800caca:	f8c3 b000 	streq.w	fp, [r3]
 800cace:	f8c9 1000 	strne.w	r1, [r9]
 800cad2:	f01b 0307 	ands.w	r3, fp, #7
 800cad6:	bf1c      	itt	ne
 800cad8:	f1c3 0308 	rsbne	r3, r3, #8
 800cadc:	449b      	addne	fp, r3
 800cade:	445c      	add	r4, fp
 800cae0:	4498      	add	r8, r3
 800cae2:	ea04 030c 	and.w	r3, r4, ip
 800cae6:	eba8 0803 	sub.w	r8, r8, r3
 800caea:	4641      	mov	r1, r8
 800caec:	4630      	mov	r0, r6
 800caee:	f000 f861 	bl	800cbb4 <_sbrk_r>
 800caf2:	1c43      	adds	r3, r0, #1
 800caf4:	bf04      	itt	eq
 800caf6:	4658      	moveq	r0, fp
 800caf8:	f04f 0800 	moveq.w	r8, #0
 800cafc:	f8d9 3000 	ldr.w	r3, [r9]
 800cb00:	f8c7 b008 	str.w	fp, [r7, #8]
 800cb04:	eba0 000b 	sub.w	r0, r0, fp
 800cb08:	4440      	add	r0, r8
 800cb0a:	4443      	add	r3, r8
 800cb0c:	f040 0001 	orr.w	r0, r0, #1
 800cb10:	45ba      	cmp	sl, r7
 800cb12:	9a00      	ldr	r2, [sp, #0]
 800cb14:	f8c9 3000 	str.w	r3, [r9]
 800cb18:	f8cb 0004 	str.w	r0, [fp, #4]
 800cb1c:	f43f af29 	beq.w	800c972 <_malloc_r+0x252>
 800cb20:	2a0f      	cmp	r2, #15
 800cb22:	d810      	bhi.n	800cb46 <_malloc_r+0x426>
 800cb24:	2301      	movs	r3, #1
 800cb26:	f8cb 3004 	str.w	r3, [fp, #4]
 800cb2a:	68bb      	ldr	r3, [r7, #8]
 800cb2c:	685a      	ldr	r2, [r3, #4]
 800cb2e:	f022 0203 	bic.w	r2, r2, #3
 800cb32:	42aa      	cmp	r2, r5
 800cb34:	eba2 0305 	sub.w	r3, r2, r5
 800cb38:	d301      	bcc.n	800cb3e <_malloc_r+0x41e>
 800cb3a:	2b0f      	cmp	r3, #15
 800cb3c:	dc1c      	bgt.n	800cb78 <_malloc_r+0x458>
 800cb3e:	4630      	mov	r0, r6
 800cb40:	f000 f832 	bl	800cba8 <__malloc_unlock>
 800cb44:	e5f8      	b.n	800c738 <_malloc_r+0x18>
 800cb46:	f8da 3004 	ldr.w	r3, [sl, #4]
 800cb4a:	f1a2 040c 	sub.w	r4, r2, #12
 800cb4e:	f024 0407 	bic.w	r4, r4, #7
 800cb52:	f003 0301 	and.w	r3, r3, #1
 800cb56:	4323      	orrs	r3, r4
 800cb58:	f8ca 3004 	str.w	r3, [sl, #4]
 800cb5c:	2205      	movs	r2, #5
 800cb5e:	eb0a 0304 	add.w	r3, sl, r4
 800cb62:	2c0f      	cmp	r4, #15
 800cb64:	e9c3 2201 	strd	r2, r2, [r3, #4]
 800cb68:	f67f af03 	bls.w	800c972 <_malloc_r+0x252>
 800cb6c:	f10a 0108 	add.w	r1, sl, #8
 800cb70:	4630      	mov	r0, r6
 800cb72:	f003 f8bb 	bl	800fcec <_free_r>
 800cb76:	e6fc      	b.n	800c972 <_malloc_r+0x252>
 800cb78:	68bc      	ldr	r4, [r7, #8]
 800cb7a:	f045 0201 	orr.w	r2, r5, #1
 800cb7e:	4425      	add	r5, r4
 800cb80:	f043 0301 	orr.w	r3, r3, #1
 800cb84:	6062      	str	r2, [r4, #4]
 800cb86:	60bd      	str	r5, [r7, #8]
 800cb88:	606b      	str	r3, [r5, #4]
 800cb8a:	e5fa      	b.n	800c782 <_malloc_r+0x62>

0800cb8c <memset>:
 800cb8c:	4402      	add	r2, r0
 800cb8e:	4603      	mov	r3, r0
 800cb90:	4293      	cmp	r3, r2
 800cb92:	d100      	bne.n	800cb96 <memset+0xa>
 800cb94:	4770      	bx	lr
 800cb96:	f803 1b01 	strb.w	r1, [r3], #1
 800cb9a:	e7f9      	b.n	800cb90 <memset+0x4>

0800cb9c <__malloc_lock>:
 800cb9c:	4801      	ldr	r0, [pc, #4]	; (800cba4 <__malloc_lock+0x8>)
 800cb9e:	f003 bc97 	b.w	80104d0 <__retarget_lock_acquire_recursive>
 800cba2:	bf00      	nop
 800cba4:	20001170 	.word	0x20001170

0800cba8 <__malloc_unlock>:
 800cba8:	4801      	ldr	r0, [pc, #4]	; (800cbb0 <__malloc_unlock+0x8>)
 800cbaa:	f003 bc92 	b.w	80104d2 <__retarget_lock_release_recursive>
 800cbae:	bf00      	nop
 800cbb0:	20001170 	.word	0x20001170

0800cbb4 <_sbrk_r>:
 800cbb4:	b538      	push	{r3, r4, r5, lr}
 800cbb6:	4c06      	ldr	r4, [pc, #24]	; (800cbd0 <_sbrk_r+0x1c>)
 800cbb8:	2300      	movs	r3, #0
 800cbba:	4605      	mov	r5, r0
 800cbbc:	4608      	mov	r0, r1
 800cbbe:	6023      	str	r3, [r4, #0]
 800cbc0:	f7f6 fc0c 	bl	80033dc <_sbrk>
 800cbc4:	1c43      	adds	r3, r0, #1
 800cbc6:	d102      	bne.n	800cbce <_sbrk_r+0x1a>
 800cbc8:	6823      	ldr	r3, [r4, #0]
 800cbca:	b103      	cbz	r3, 800cbce <_sbrk_r+0x1a>
 800cbcc:	602b      	str	r3, [r5, #0]
 800cbce:	bd38      	pop	{r3, r4, r5, pc}
 800cbd0:	20001178 	.word	0x20001178

0800cbd4 <sprintf>:
 800cbd4:	b40e      	push	{r1, r2, r3}
 800cbd6:	b500      	push	{lr}
 800cbd8:	b09c      	sub	sp, #112	; 0x70
 800cbda:	ab1d      	add	r3, sp, #116	; 0x74
 800cbdc:	9002      	str	r0, [sp, #8]
 800cbde:	9006      	str	r0, [sp, #24]
 800cbe0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800cbe4:	4809      	ldr	r0, [pc, #36]	; (800cc0c <sprintf+0x38>)
 800cbe6:	9107      	str	r1, [sp, #28]
 800cbe8:	9104      	str	r1, [sp, #16]
 800cbea:	4909      	ldr	r1, [pc, #36]	; (800cc10 <sprintf+0x3c>)
 800cbec:	f853 2b04 	ldr.w	r2, [r3], #4
 800cbf0:	9105      	str	r1, [sp, #20]
 800cbf2:	6800      	ldr	r0, [r0, #0]
 800cbf4:	9301      	str	r3, [sp, #4]
 800cbf6:	a902      	add	r1, sp, #8
 800cbf8:	f000 fe5e 	bl	800d8b8 <_svfprintf_r>
 800cbfc:	9b02      	ldr	r3, [sp, #8]
 800cbfe:	2200      	movs	r2, #0
 800cc00:	701a      	strb	r2, [r3, #0]
 800cc02:	b01c      	add	sp, #112	; 0x70
 800cc04:	f85d eb04 	ldr.w	lr, [sp], #4
 800cc08:	b003      	add	sp, #12
 800cc0a:	4770      	bx	lr
 800cc0c:	200000ec 	.word	0x200000ec
 800cc10:	ffff0208 	.word	0xffff0208

0800cc14 <strcat>:
 800cc14:	b510      	push	{r4, lr}
 800cc16:	4603      	mov	r3, r0
 800cc18:	781a      	ldrb	r2, [r3, #0]
 800cc1a:	1c5c      	adds	r4, r3, #1
 800cc1c:	b93a      	cbnz	r2, 800cc2e <strcat+0x1a>
 800cc1e:	3b01      	subs	r3, #1
 800cc20:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cc24:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cc28:	2a00      	cmp	r2, #0
 800cc2a:	d1f9      	bne.n	800cc20 <strcat+0xc>
 800cc2c:	bd10      	pop	{r4, pc}
 800cc2e:	4623      	mov	r3, r4
 800cc30:	e7f2      	b.n	800cc18 <strcat+0x4>

0800cc32 <strcpy>:
 800cc32:	4603      	mov	r3, r0
 800cc34:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cc38:	f803 2b01 	strb.w	r2, [r3], #1
 800cc3c:	2a00      	cmp	r2, #0
 800cc3e:	d1f9      	bne.n	800cc34 <strcpy+0x2>
 800cc40:	4770      	bx	lr

0800cc42 <strncpy>:
 800cc42:	b570      	push	{r4, r5, r6, lr}
 800cc44:	3901      	subs	r1, #1
 800cc46:	4604      	mov	r4, r0
 800cc48:	b902      	cbnz	r2, 800cc4c <strncpy+0xa>
 800cc4a:	bd70      	pop	{r4, r5, r6, pc}
 800cc4c:	4623      	mov	r3, r4
 800cc4e:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 800cc52:	f803 5b01 	strb.w	r5, [r3], #1
 800cc56:	1e56      	subs	r6, r2, #1
 800cc58:	b92d      	cbnz	r5, 800cc66 <strncpy+0x24>
 800cc5a:	4414      	add	r4, r2
 800cc5c:	42a3      	cmp	r3, r4
 800cc5e:	d0f4      	beq.n	800cc4a <strncpy+0x8>
 800cc60:	f803 5b01 	strb.w	r5, [r3], #1
 800cc64:	e7fa      	b.n	800cc5c <strncpy+0x1a>
 800cc66:	461c      	mov	r4, r3
 800cc68:	4632      	mov	r2, r6
 800cc6a:	e7ed      	b.n	800cc48 <strncpy+0x6>

0800cc6c <sulp>:
 800cc6c:	b570      	push	{r4, r5, r6, lr}
 800cc6e:	4604      	mov	r4, r0
 800cc70:	460d      	mov	r5, r1
 800cc72:	ec45 4b10 	vmov	d0, r4, r5
 800cc76:	4616      	mov	r6, r2
 800cc78:	f003 feea 	bl	8010a50 <__ulp>
 800cc7c:	ec51 0b10 	vmov	r0, r1, d0
 800cc80:	b17e      	cbz	r6, 800cca2 <sulp+0x36>
 800cc82:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800cc86:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	dd09      	ble.n	800cca2 <sulp+0x36>
 800cc8e:	051b      	lsls	r3, r3, #20
 800cc90:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800cc94:	2400      	movs	r4, #0
 800cc96:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800cc9a:	4622      	mov	r2, r4
 800cc9c:	462b      	mov	r3, r5
 800cc9e:	f7f3 fcbb 	bl	8000618 <__aeabi_dmul>
 800cca2:	bd70      	pop	{r4, r5, r6, pc}
 800cca4:	0000      	movs	r0, r0
	...

0800cca8 <_strtod_l>:
 800cca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccac:	461f      	mov	r7, r3
 800ccae:	b0a1      	sub	sp, #132	; 0x84
 800ccb0:	2300      	movs	r3, #0
 800ccb2:	4681      	mov	r9, r0
 800ccb4:	4638      	mov	r0, r7
 800ccb6:	460e      	mov	r6, r1
 800ccb8:	9217      	str	r2, [sp, #92]	; 0x5c
 800ccba:	931c      	str	r3, [sp, #112]	; 0x70
 800ccbc:	f003 fbf8 	bl	80104b0 <__localeconv_l>
 800ccc0:	4680      	mov	r8, r0
 800ccc2:	6800      	ldr	r0, [r0, #0]
 800ccc4:	f7f3 fa8e 	bl	80001e4 <strlen>
 800ccc8:	f04f 0a00 	mov.w	sl, #0
 800cccc:	4604      	mov	r4, r0
 800ccce:	f04f 0b00 	mov.w	fp, #0
 800ccd2:	961b      	str	r6, [sp, #108]	; 0x6c
 800ccd4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ccd6:	781a      	ldrb	r2, [r3, #0]
 800ccd8:	2a0d      	cmp	r2, #13
 800ccda:	d832      	bhi.n	800cd42 <_strtod_l+0x9a>
 800ccdc:	2a09      	cmp	r2, #9
 800ccde:	d236      	bcs.n	800cd4e <_strtod_l+0xa6>
 800cce0:	2a00      	cmp	r2, #0
 800cce2:	d03e      	beq.n	800cd62 <_strtod_l+0xba>
 800cce4:	2300      	movs	r3, #0
 800cce6:	930d      	str	r3, [sp, #52]	; 0x34
 800cce8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800ccea:	782b      	ldrb	r3, [r5, #0]
 800ccec:	2b30      	cmp	r3, #48	; 0x30
 800ccee:	f040 80ac 	bne.w	800ce4a <_strtod_l+0x1a2>
 800ccf2:	786b      	ldrb	r3, [r5, #1]
 800ccf4:	2b58      	cmp	r3, #88	; 0x58
 800ccf6:	d001      	beq.n	800ccfc <_strtod_l+0x54>
 800ccf8:	2b78      	cmp	r3, #120	; 0x78
 800ccfa:	d167      	bne.n	800cdcc <_strtod_l+0x124>
 800ccfc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ccfe:	9301      	str	r3, [sp, #4]
 800cd00:	ab1c      	add	r3, sp, #112	; 0x70
 800cd02:	9300      	str	r3, [sp, #0]
 800cd04:	9702      	str	r7, [sp, #8]
 800cd06:	ab1d      	add	r3, sp, #116	; 0x74
 800cd08:	4a88      	ldr	r2, [pc, #544]	; (800cf2c <_strtod_l+0x284>)
 800cd0a:	a91b      	add	r1, sp, #108	; 0x6c
 800cd0c:	4648      	mov	r0, r9
 800cd0e:	f003 f8f8 	bl	800ff02 <__gethex>
 800cd12:	f010 0407 	ands.w	r4, r0, #7
 800cd16:	4606      	mov	r6, r0
 800cd18:	d005      	beq.n	800cd26 <_strtod_l+0x7e>
 800cd1a:	2c06      	cmp	r4, #6
 800cd1c:	d12b      	bne.n	800cd76 <_strtod_l+0xce>
 800cd1e:	3501      	adds	r5, #1
 800cd20:	2300      	movs	r3, #0
 800cd22:	951b      	str	r5, [sp, #108]	; 0x6c
 800cd24:	930d      	str	r3, [sp, #52]	; 0x34
 800cd26:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	f040 859a 	bne.w	800d862 <_strtod_l+0xbba>
 800cd2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cd30:	b1e3      	cbz	r3, 800cd6c <_strtod_l+0xc4>
 800cd32:	4652      	mov	r2, sl
 800cd34:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800cd38:	ec43 2b10 	vmov	d0, r2, r3
 800cd3c:	b021      	add	sp, #132	; 0x84
 800cd3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd42:	2a2b      	cmp	r2, #43	; 0x2b
 800cd44:	d015      	beq.n	800cd72 <_strtod_l+0xca>
 800cd46:	2a2d      	cmp	r2, #45	; 0x2d
 800cd48:	d004      	beq.n	800cd54 <_strtod_l+0xac>
 800cd4a:	2a20      	cmp	r2, #32
 800cd4c:	d1ca      	bne.n	800cce4 <_strtod_l+0x3c>
 800cd4e:	3301      	adds	r3, #1
 800cd50:	931b      	str	r3, [sp, #108]	; 0x6c
 800cd52:	e7bf      	b.n	800ccd4 <_strtod_l+0x2c>
 800cd54:	2201      	movs	r2, #1
 800cd56:	920d      	str	r2, [sp, #52]	; 0x34
 800cd58:	1c5a      	adds	r2, r3, #1
 800cd5a:	921b      	str	r2, [sp, #108]	; 0x6c
 800cd5c:	785b      	ldrb	r3, [r3, #1]
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d1c2      	bne.n	800cce8 <_strtod_l+0x40>
 800cd62:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cd64:	961b      	str	r6, [sp, #108]	; 0x6c
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	f040 8579 	bne.w	800d85e <_strtod_l+0xbb6>
 800cd6c:	4652      	mov	r2, sl
 800cd6e:	465b      	mov	r3, fp
 800cd70:	e7e2      	b.n	800cd38 <_strtod_l+0x90>
 800cd72:	2200      	movs	r2, #0
 800cd74:	e7ef      	b.n	800cd56 <_strtod_l+0xae>
 800cd76:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800cd78:	b13a      	cbz	r2, 800cd8a <_strtod_l+0xe2>
 800cd7a:	2135      	movs	r1, #53	; 0x35
 800cd7c:	a81e      	add	r0, sp, #120	; 0x78
 800cd7e:	f003 ff7d 	bl	8010c7c <__copybits>
 800cd82:	991c      	ldr	r1, [sp, #112]	; 0x70
 800cd84:	4648      	mov	r0, r9
 800cd86:	f003 fbe7 	bl	8010558 <_Bfree>
 800cd8a:	3c01      	subs	r4, #1
 800cd8c:	2c04      	cmp	r4, #4
 800cd8e:	d806      	bhi.n	800cd9e <_strtod_l+0xf6>
 800cd90:	e8df f004 	tbb	[pc, r4]
 800cd94:	1714030a 	.word	0x1714030a
 800cd98:	0a          	.byte	0x0a
 800cd99:	00          	.byte	0x00
 800cd9a:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 800cd9e:	0730      	lsls	r0, r6, #28
 800cda0:	d5c1      	bpl.n	800cd26 <_strtod_l+0x7e>
 800cda2:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800cda6:	e7be      	b.n	800cd26 <_strtod_l+0x7e>
 800cda8:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 800cdac:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800cdae:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800cdb2:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800cdb6:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800cdba:	e7f0      	b.n	800cd9e <_strtod_l+0xf6>
 800cdbc:	f8df b170 	ldr.w	fp, [pc, #368]	; 800cf30 <_strtod_l+0x288>
 800cdc0:	e7ed      	b.n	800cd9e <_strtod_l+0xf6>
 800cdc2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800cdc6:	f04f 3aff 	mov.w	sl, #4294967295
 800cdca:	e7e8      	b.n	800cd9e <_strtod_l+0xf6>
 800cdcc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800cdce:	1c5a      	adds	r2, r3, #1
 800cdd0:	921b      	str	r2, [sp, #108]	; 0x6c
 800cdd2:	785b      	ldrb	r3, [r3, #1]
 800cdd4:	2b30      	cmp	r3, #48	; 0x30
 800cdd6:	d0f9      	beq.n	800cdcc <_strtod_l+0x124>
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d0a4      	beq.n	800cd26 <_strtod_l+0x7e>
 800cddc:	2301      	movs	r3, #1
 800cdde:	2500      	movs	r5, #0
 800cde0:	9306      	str	r3, [sp, #24]
 800cde2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800cde4:	9308      	str	r3, [sp, #32]
 800cde6:	9507      	str	r5, [sp, #28]
 800cde8:	9505      	str	r5, [sp, #20]
 800cdea:	220a      	movs	r2, #10
 800cdec:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800cdee:	7807      	ldrb	r7, [r0, #0]
 800cdf0:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800cdf4:	b2d9      	uxtb	r1, r3
 800cdf6:	2909      	cmp	r1, #9
 800cdf8:	d929      	bls.n	800ce4e <_strtod_l+0x1a6>
 800cdfa:	4622      	mov	r2, r4
 800cdfc:	f8d8 1000 	ldr.w	r1, [r8]
 800ce00:	f004 f956 	bl	80110b0 <strncmp>
 800ce04:	2800      	cmp	r0, #0
 800ce06:	d031      	beq.n	800ce6c <_strtod_l+0x1c4>
 800ce08:	2000      	movs	r0, #0
 800ce0a:	9c05      	ldr	r4, [sp, #20]
 800ce0c:	9004      	str	r0, [sp, #16]
 800ce0e:	463b      	mov	r3, r7
 800ce10:	4602      	mov	r2, r0
 800ce12:	2b65      	cmp	r3, #101	; 0x65
 800ce14:	d001      	beq.n	800ce1a <_strtod_l+0x172>
 800ce16:	2b45      	cmp	r3, #69	; 0x45
 800ce18:	d114      	bne.n	800ce44 <_strtod_l+0x19c>
 800ce1a:	b924      	cbnz	r4, 800ce26 <_strtod_l+0x17e>
 800ce1c:	b910      	cbnz	r0, 800ce24 <_strtod_l+0x17c>
 800ce1e:	9b06      	ldr	r3, [sp, #24]
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d09e      	beq.n	800cd62 <_strtod_l+0xba>
 800ce24:	2400      	movs	r4, #0
 800ce26:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800ce28:	1c73      	adds	r3, r6, #1
 800ce2a:	931b      	str	r3, [sp, #108]	; 0x6c
 800ce2c:	7873      	ldrb	r3, [r6, #1]
 800ce2e:	2b2b      	cmp	r3, #43	; 0x2b
 800ce30:	d078      	beq.n	800cf24 <_strtod_l+0x27c>
 800ce32:	2b2d      	cmp	r3, #45	; 0x2d
 800ce34:	d070      	beq.n	800cf18 <_strtod_l+0x270>
 800ce36:	f04f 0c00 	mov.w	ip, #0
 800ce3a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800ce3e:	2f09      	cmp	r7, #9
 800ce40:	d97c      	bls.n	800cf3c <_strtod_l+0x294>
 800ce42:	961b      	str	r6, [sp, #108]	; 0x6c
 800ce44:	f04f 0e00 	mov.w	lr, #0
 800ce48:	e09a      	b.n	800cf80 <_strtod_l+0x2d8>
 800ce4a:	2300      	movs	r3, #0
 800ce4c:	e7c7      	b.n	800cdde <_strtod_l+0x136>
 800ce4e:	9905      	ldr	r1, [sp, #20]
 800ce50:	2908      	cmp	r1, #8
 800ce52:	bfdd      	ittte	le
 800ce54:	9907      	ldrle	r1, [sp, #28]
 800ce56:	fb02 3301 	mlale	r3, r2, r1, r3
 800ce5a:	9307      	strle	r3, [sp, #28]
 800ce5c:	fb02 3505 	mlagt	r5, r2, r5, r3
 800ce60:	9b05      	ldr	r3, [sp, #20]
 800ce62:	3001      	adds	r0, #1
 800ce64:	3301      	adds	r3, #1
 800ce66:	9305      	str	r3, [sp, #20]
 800ce68:	901b      	str	r0, [sp, #108]	; 0x6c
 800ce6a:	e7bf      	b.n	800cdec <_strtod_l+0x144>
 800ce6c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ce6e:	191a      	adds	r2, r3, r4
 800ce70:	921b      	str	r2, [sp, #108]	; 0x6c
 800ce72:	9a05      	ldr	r2, [sp, #20]
 800ce74:	5d1b      	ldrb	r3, [r3, r4]
 800ce76:	2a00      	cmp	r2, #0
 800ce78:	d037      	beq.n	800ceea <_strtod_l+0x242>
 800ce7a:	9c05      	ldr	r4, [sp, #20]
 800ce7c:	4602      	mov	r2, r0
 800ce7e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800ce82:	2909      	cmp	r1, #9
 800ce84:	d913      	bls.n	800ceae <_strtod_l+0x206>
 800ce86:	2101      	movs	r1, #1
 800ce88:	9104      	str	r1, [sp, #16]
 800ce8a:	e7c2      	b.n	800ce12 <_strtod_l+0x16a>
 800ce8c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ce8e:	1c5a      	adds	r2, r3, #1
 800ce90:	921b      	str	r2, [sp, #108]	; 0x6c
 800ce92:	785b      	ldrb	r3, [r3, #1]
 800ce94:	3001      	adds	r0, #1
 800ce96:	2b30      	cmp	r3, #48	; 0x30
 800ce98:	d0f8      	beq.n	800ce8c <_strtod_l+0x1e4>
 800ce9a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800ce9e:	2a08      	cmp	r2, #8
 800cea0:	f200 84e4 	bhi.w	800d86c <_strtod_l+0xbc4>
 800cea4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800cea6:	9208      	str	r2, [sp, #32]
 800cea8:	4602      	mov	r2, r0
 800ceaa:	2000      	movs	r0, #0
 800ceac:	4604      	mov	r4, r0
 800ceae:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800ceb2:	f100 0101 	add.w	r1, r0, #1
 800ceb6:	d012      	beq.n	800cede <_strtod_l+0x236>
 800ceb8:	440a      	add	r2, r1
 800ceba:	eb00 0c04 	add.w	ip, r0, r4
 800cebe:	4621      	mov	r1, r4
 800cec0:	270a      	movs	r7, #10
 800cec2:	458c      	cmp	ip, r1
 800cec4:	d113      	bne.n	800ceee <_strtod_l+0x246>
 800cec6:	1821      	adds	r1, r4, r0
 800cec8:	2908      	cmp	r1, #8
 800ceca:	f104 0401 	add.w	r4, r4, #1
 800cece:	4404      	add	r4, r0
 800ced0:	dc19      	bgt.n	800cf06 <_strtod_l+0x25e>
 800ced2:	9b07      	ldr	r3, [sp, #28]
 800ced4:	210a      	movs	r1, #10
 800ced6:	fb01 e303 	mla	r3, r1, r3, lr
 800ceda:	9307      	str	r3, [sp, #28]
 800cedc:	2100      	movs	r1, #0
 800cede:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800cee0:	1c58      	adds	r0, r3, #1
 800cee2:	901b      	str	r0, [sp, #108]	; 0x6c
 800cee4:	785b      	ldrb	r3, [r3, #1]
 800cee6:	4608      	mov	r0, r1
 800cee8:	e7c9      	b.n	800ce7e <_strtod_l+0x1d6>
 800ceea:	9805      	ldr	r0, [sp, #20]
 800ceec:	e7d3      	b.n	800ce96 <_strtod_l+0x1ee>
 800ceee:	2908      	cmp	r1, #8
 800cef0:	f101 0101 	add.w	r1, r1, #1
 800cef4:	dc03      	bgt.n	800cefe <_strtod_l+0x256>
 800cef6:	9b07      	ldr	r3, [sp, #28]
 800cef8:	437b      	muls	r3, r7
 800cefa:	9307      	str	r3, [sp, #28]
 800cefc:	e7e1      	b.n	800cec2 <_strtod_l+0x21a>
 800cefe:	2910      	cmp	r1, #16
 800cf00:	bfd8      	it	le
 800cf02:	437d      	mulle	r5, r7
 800cf04:	e7dd      	b.n	800cec2 <_strtod_l+0x21a>
 800cf06:	2c10      	cmp	r4, #16
 800cf08:	bfdc      	itt	le
 800cf0a:	210a      	movle	r1, #10
 800cf0c:	fb01 e505 	mlale	r5, r1, r5, lr
 800cf10:	e7e4      	b.n	800cedc <_strtod_l+0x234>
 800cf12:	2301      	movs	r3, #1
 800cf14:	9304      	str	r3, [sp, #16]
 800cf16:	e781      	b.n	800ce1c <_strtod_l+0x174>
 800cf18:	f04f 0c01 	mov.w	ip, #1
 800cf1c:	1cb3      	adds	r3, r6, #2
 800cf1e:	931b      	str	r3, [sp, #108]	; 0x6c
 800cf20:	78b3      	ldrb	r3, [r6, #2]
 800cf22:	e78a      	b.n	800ce3a <_strtod_l+0x192>
 800cf24:	f04f 0c00 	mov.w	ip, #0
 800cf28:	e7f8      	b.n	800cf1c <_strtod_l+0x274>
 800cf2a:	bf00      	nop
 800cf2c:	08011954 	.word	0x08011954
 800cf30:	7ff00000 	.word	0x7ff00000
 800cf34:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800cf36:	1c5f      	adds	r7, r3, #1
 800cf38:	971b      	str	r7, [sp, #108]	; 0x6c
 800cf3a:	785b      	ldrb	r3, [r3, #1]
 800cf3c:	2b30      	cmp	r3, #48	; 0x30
 800cf3e:	d0f9      	beq.n	800cf34 <_strtod_l+0x28c>
 800cf40:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800cf44:	2f08      	cmp	r7, #8
 800cf46:	f63f af7d 	bhi.w	800ce44 <_strtod_l+0x19c>
 800cf4a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800cf4e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800cf50:	930a      	str	r3, [sp, #40]	; 0x28
 800cf52:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800cf54:	1c5f      	adds	r7, r3, #1
 800cf56:	971b      	str	r7, [sp, #108]	; 0x6c
 800cf58:	785b      	ldrb	r3, [r3, #1]
 800cf5a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800cf5e:	f1b8 0f09 	cmp.w	r8, #9
 800cf62:	d937      	bls.n	800cfd4 <_strtod_l+0x32c>
 800cf64:	990a      	ldr	r1, [sp, #40]	; 0x28
 800cf66:	1a7f      	subs	r7, r7, r1
 800cf68:	2f08      	cmp	r7, #8
 800cf6a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800cf6e:	dc37      	bgt.n	800cfe0 <_strtod_l+0x338>
 800cf70:	45be      	cmp	lr, r7
 800cf72:	bfa8      	it	ge
 800cf74:	46be      	movge	lr, r7
 800cf76:	f1bc 0f00 	cmp.w	ip, #0
 800cf7a:	d001      	beq.n	800cf80 <_strtod_l+0x2d8>
 800cf7c:	f1ce 0e00 	rsb	lr, lr, #0
 800cf80:	2c00      	cmp	r4, #0
 800cf82:	d151      	bne.n	800d028 <_strtod_l+0x380>
 800cf84:	2800      	cmp	r0, #0
 800cf86:	f47f aece 	bne.w	800cd26 <_strtod_l+0x7e>
 800cf8a:	9a06      	ldr	r2, [sp, #24]
 800cf8c:	2a00      	cmp	r2, #0
 800cf8e:	f47f aeca 	bne.w	800cd26 <_strtod_l+0x7e>
 800cf92:	9a04      	ldr	r2, [sp, #16]
 800cf94:	2a00      	cmp	r2, #0
 800cf96:	f47f aee4 	bne.w	800cd62 <_strtod_l+0xba>
 800cf9a:	2b4e      	cmp	r3, #78	; 0x4e
 800cf9c:	d027      	beq.n	800cfee <_strtod_l+0x346>
 800cf9e:	dc21      	bgt.n	800cfe4 <_strtod_l+0x33c>
 800cfa0:	2b49      	cmp	r3, #73	; 0x49
 800cfa2:	f47f aede 	bne.w	800cd62 <_strtod_l+0xba>
 800cfa6:	49a0      	ldr	r1, [pc, #640]	; (800d228 <_strtod_l+0x580>)
 800cfa8:	a81b      	add	r0, sp, #108	; 0x6c
 800cfaa:	f003 f9dd 	bl	8010368 <__match>
 800cfae:	2800      	cmp	r0, #0
 800cfb0:	f43f aed7 	beq.w	800cd62 <_strtod_l+0xba>
 800cfb4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800cfb6:	499d      	ldr	r1, [pc, #628]	; (800d22c <_strtod_l+0x584>)
 800cfb8:	3b01      	subs	r3, #1
 800cfba:	a81b      	add	r0, sp, #108	; 0x6c
 800cfbc:	931b      	str	r3, [sp, #108]	; 0x6c
 800cfbe:	f003 f9d3 	bl	8010368 <__match>
 800cfc2:	b910      	cbnz	r0, 800cfca <_strtod_l+0x322>
 800cfc4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800cfc6:	3301      	adds	r3, #1
 800cfc8:	931b      	str	r3, [sp, #108]	; 0x6c
 800cfca:	f8df b274 	ldr.w	fp, [pc, #628]	; 800d240 <_strtod_l+0x598>
 800cfce:	f04f 0a00 	mov.w	sl, #0
 800cfd2:	e6a8      	b.n	800cd26 <_strtod_l+0x7e>
 800cfd4:	210a      	movs	r1, #10
 800cfd6:	fb01 3e0e 	mla	lr, r1, lr, r3
 800cfda:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800cfde:	e7b8      	b.n	800cf52 <_strtod_l+0x2aa>
 800cfe0:	46be      	mov	lr, r7
 800cfe2:	e7c8      	b.n	800cf76 <_strtod_l+0x2ce>
 800cfe4:	2b69      	cmp	r3, #105	; 0x69
 800cfe6:	d0de      	beq.n	800cfa6 <_strtod_l+0x2fe>
 800cfe8:	2b6e      	cmp	r3, #110	; 0x6e
 800cfea:	f47f aeba 	bne.w	800cd62 <_strtod_l+0xba>
 800cfee:	4990      	ldr	r1, [pc, #576]	; (800d230 <_strtod_l+0x588>)
 800cff0:	a81b      	add	r0, sp, #108	; 0x6c
 800cff2:	f003 f9b9 	bl	8010368 <__match>
 800cff6:	2800      	cmp	r0, #0
 800cff8:	f43f aeb3 	beq.w	800cd62 <_strtod_l+0xba>
 800cffc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800cffe:	781b      	ldrb	r3, [r3, #0]
 800d000:	2b28      	cmp	r3, #40	; 0x28
 800d002:	d10e      	bne.n	800d022 <_strtod_l+0x37a>
 800d004:	aa1e      	add	r2, sp, #120	; 0x78
 800d006:	498b      	ldr	r1, [pc, #556]	; (800d234 <_strtod_l+0x58c>)
 800d008:	a81b      	add	r0, sp, #108	; 0x6c
 800d00a:	f003 f9c1 	bl	8010390 <__hexnan>
 800d00e:	2805      	cmp	r0, #5
 800d010:	d107      	bne.n	800d022 <_strtod_l+0x37a>
 800d012:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d014:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 800d018:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800d01c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800d020:	e681      	b.n	800cd26 <_strtod_l+0x7e>
 800d022:	f8df b224 	ldr.w	fp, [pc, #548]	; 800d248 <_strtod_l+0x5a0>
 800d026:	e7d2      	b.n	800cfce <_strtod_l+0x326>
 800d028:	ebae 0302 	sub.w	r3, lr, r2
 800d02c:	9306      	str	r3, [sp, #24]
 800d02e:	9b05      	ldr	r3, [sp, #20]
 800d030:	9807      	ldr	r0, [sp, #28]
 800d032:	2b00      	cmp	r3, #0
 800d034:	bf08      	it	eq
 800d036:	4623      	moveq	r3, r4
 800d038:	2c10      	cmp	r4, #16
 800d03a:	9305      	str	r3, [sp, #20]
 800d03c:	46a0      	mov	r8, r4
 800d03e:	bfa8      	it	ge
 800d040:	f04f 0810 	movge.w	r8, #16
 800d044:	f7f3 fa6e 	bl	8000524 <__aeabi_ui2d>
 800d048:	2c09      	cmp	r4, #9
 800d04a:	4682      	mov	sl, r0
 800d04c:	468b      	mov	fp, r1
 800d04e:	dc13      	bgt.n	800d078 <_strtod_l+0x3d0>
 800d050:	9b06      	ldr	r3, [sp, #24]
 800d052:	2b00      	cmp	r3, #0
 800d054:	f43f ae67 	beq.w	800cd26 <_strtod_l+0x7e>
 800d058:	9b06      	ldr	r3, [sp, #24]
 800d05a:	dd7a      	ble.n	800d152 <_strtod_l+0x4aa>
 800d05c:	2b16      	cmp	r3, #22
 800d05e:	dc61      	bgt.n	800d124 <_strtod_l+0x47c>
 800d060:	4a75      	ldr	r2, [pc, #468]	; (800d238 <_strtod_l+0x590>)
 800d062:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800d066:	e9de 0100 	ldrd	r0, r1, [lr]
 800d06a:	4652      	mov	r2, sl
 800d06c:	465b      	mov	r3, fp
 800d06e:	f7f3 fad3 	bl	8000618 <__aeabi_dmul>
 800d072:	4682      	mov	sl, r0
 800d074:	468b      	mov	fp, r1
 800d076:	e656      	b.n	800cd26 <_strtod_l+0x7e>
 800d078:	4b6f      	ldr	r3, [pc, #444]	; (800d238 <_strtod_l+0x590>)
 800d07a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800d07e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800d082:	f7f3 fac9 	bl	8000618 <__aeabi_dmul>
 800d086:	4606      	mov	r6, r0
 800d088:	4628      	mov	r0, r5
 800d08a:	460f      	mov	r7, r1
 800d08c:	f7f3 fa4a 	bl	8000524 <__aeabi_ui2d>
 800d090:	4602      	mov	r2, r0
 800d092:	460b      	mov	r3, r1
 800d094:	4630      	mov	r0, r6
 800d096:	4639      	mov	r1, r7
 800d098:	f7f3 f908 	bl	80002ac <__adddf3>
 800d09c:	2c0f      	cmp	r4, #15
 800d09e:	4682      	mov	sl, r0
 800d0a0:	468b      	mov	fp, r1
 800d0a2:	ddd5      	ble.n	800d050 <_strtod_l+0x3a8>
 800d0a4:	9b06      	ldr	r3, [sp, #24]
 800d0a6:	eba4 0808 	sub.w	r8, r4, r8
 800d0aa:	4498      	add	r8, r3
 800d0ac:	f1b8 0f00 	cmp.w	r8, #0
 800d0b0:	f340 8096 	ble.w	800d1e0 <_strtod_l+0x538>
 800d0b4:	f018 030f 	ands.w	r3, r8, #15
 800d0b8:	d00a      	beq.n	800d0d0 <_strtod_l+0x428>
 800d0ba:	495f      	ldr	r1, [pc, #380]	; (800d238 <_strtod_l+0x590>)
 800d0bc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d0c0:	4652      	mov	r2, sl
 800d0c2:	465b      	mov	r3, fp
 800d0c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d0c8:	f7f3 faa6 	bl	8000618 <__aeabi_dmul>
 800d0cc:	4682      	mov	sl, r0
 800d0ce:	468b      	mov	fp, r1
 800d0d0:	f038 080f 	bics.w	r8, r8, #15
 800d0d4:	d073      	beq.n	800d1be <_strtod_l+0x516>
 800d0d6:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800d0da:	dd47      	ble.n	800d16c <_strtod_l+0x4c4>
 800d0dc:	2400      	movs	r4, #0
 800d0de:	46a0      	mov	r8, r4
 800d0e0:	9407      	str	r4, [sp, #28]
 800d0e2:	9405      	str	r4, [sp, #20]
 800d0e4:	2322      	movs	r3, #34	; 0x22
 800d0e6:	f8df b158 	ldr.w	fp, [pc, #344]	; 800d240 <_strtod_l+0x598>
 800d0ea:	f8c9 3000 	str.w	r3, [r9]
 800d0ee:	f04f 0a00 	mov.w	sl, #0
 800d0f2:	9b07      	ldr	r3, [sp, #28]
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	f43f ae16 	beq.w	800cd26 <_strtod_l+0x7e>
 800d0fa:	991c      	ldr	r1, [sp, #112]	; 0x70
 800d0fc:	4648      	mov	r0, r9
 800d0fe:	f003 fa2b 	bl	8010558 <_Bfree>
 800d102:	9905      	ldr	r1, [sp, #20]
 800d104:	4648      	mov	r0, r9
 800d106:	f003 fa27 	bl	8010558 <_Bfree>
 800d10a:	4641      	mov	r1, r8
 800d10c:	4648      	mov	r0, r9
 800d10e:	f003 fa23 	bl	8010558 <_Bfree>
 800d112:	9907      	ldr	r1, [sp, #28]
 800d114:	4648      	mov	r0, r9
 800d116:	f003 fa1f 	bl	8010558 <_Bfree>
 800d11a:	4621      	mov	r1, r4
 800d11c:	4648      	mov	r0, r9
 800d11e:	f003 fa1b 	bl	8010558 <_Bfree>
 800d122:	e600      	b.n	800cd26 <_strtod_l+0x7e>
 800d124:	9a06      	ldr	r2, [sp, #24]
 800d126:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800d12a:	4293      	cmp	r3, r2
 800d12c:	dbba      	blt.n	800d0a4 <_strtod_l+0x3fc>
 800d12e:	4d42      	ldr	r5, [pc, #264]	; (800d238 <_strtod_l+0x590>)
 800d130:	f1c4 040f 	rsb	r4, r4, #15
 800d134:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800d138:	4652      	mov	r2, sl
 800d13a:	465b      	mov	r3, fp
 800d13c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d140:	f7f3 fa6a 	bl	8000618 <__aeabi_dmul>
 800d144:	9b06      	ldr	r3, [sp, #24]
 800d146:	1b1c      	subs	r4, r3, r4
 800d148:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800d14c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d150:	e78d      	b.n	800d06e <_strtod_l+0x3c6>
 800d152:	f113 0f16 	cmn.w	r3, #22
 800d156:	dba5      	blt.n	800d0a4 <_strtod_l+0x3fc>
 800d158:	4a37      	ldr	r2, [pc, #220]	; (800d238 <_strtod_l+0x590>)
 800d15a:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800d15e:	e9d2 2300 	ldrd	r2, r3, [r2]
 800d162:	4650      	mov	r0, sl
 800d164:	4659      	mov	r1, fp
 800d166:	f7f3 fb81 	bl	800086c <__aeabi_ddiv>
 800d16a:	e782      	b.n	800d072 <_strtod_l+0x3ca>
 800d16c:	2300      	movs	r3, #0
 800d16e:	4e33      	ldr	r6, [pc, #204]	; (800d23c <_strtod_l+0x594>)
 800d170:	ea4f 1828 	mov.w	r8, r8, asr #4
 800d174:	4650      	mov	r0, sl
 800d176:	4659      	mov	r1, fp
 800d178:	461d      	mov	r5, r3
 800d17a:	f1b8 0f01 	cmp.w	r8, #1
 800d17e:	dc21      	bgt.n	800d1c4 <_strtod_l+0x51c>
 800d180:	b10b      	cbz	r3, 800d186 <_strtod_l+0x4de>
 800d182:	4682      	mov	sl, r0
 800d184:	468b      	mov	fp, r1
 800d186:	4b2d      	ldr	r3, [pc, #180]	; (800d23c <_strtod_l+0x594>)
 800d188:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800d18c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800d190:	4652      	mov	r2, sl
 800d192:	465b      	mov	r3, fp
 800d194:	e9d5 0100 	ldrd	r0, r1, [r5]
 800d198:	f7f3 fa3e 	bl	8000618 <__aeabi_dmul>
 800d19c:	4b28      	ldr	r3, [pc, #160]	; (800d240 <_strtod_l+0x598>)
 800d19e:	460a      	mov	r2, r1
 800d1a0:	400b      	ands	r3, r1
 800d1a2:	4928      	ldr	r1, [pc, #160]	; (800d244 <_strtod_l+0x59c>)
 800d1a4:	428b      	cmp	r3, r1
 800d1a6:	4682      	mov	sl, r0
 800d1a8:	d898      	bhi.n	800d0dc <_strtod_l+0x434>
 800d1aa:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800d1ae:	428b      	cmp	r3, r1
 800d1b0:	bf86      	itte	hi
 800d1b2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800d24c <_strtod_l+0x5a4>
 800d1b6:	f04f 3aff 	movhi.w	sl, #4294967295
 800d1ba:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800d1be:	2300      	movs	r3, #0
 800d1c0:	9304      	str	r3, [sp, #16]
 800d1c2:	e077      	b.n	800d2b4 <_strtod_l+0x60c>
 800d1c4:	f018 0f01 	tst.w	r8, #1
 800d1c8:	d006      	beq.n	800d1d8 <_strtod_l+0x530>
 800d1ca:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800d1ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1d2:	f7f3 fa21 	bl	8000618 <__aeabi_dmul>
 800d1d6:	2301      	movs	r3, #1
 800d1d8:	3501      	adds	r5, #1
 800d1da:	ea4f 0868 	mov.w	r8, r8, asr #1
 800d1de:	e7cc      	b.n	800d17a <_strtod_l+0x4d2>
 800d1e0:	d0ed      	beq.n	800d1be <_strtod_l+0x516>
 800d1e2:	f1c8 0800 	rsb	r8, r8, #0
 800d1e6:	f018 020f 	ands.w	r2, r8, #15
 800d1ea:	d00a      	beq.n	800d202 <_strtod_l+0x55a>
 800d1ec:	4b12      	ldr	r3, [pc, #72]	; (800d238 <_strtod_l+0x590>)
 800d1ee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d1f2:	4650      	mov	r0, sl
 800d1f4:	4659      	mov	r1, fp
 800d1f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1fa:	f7f3 fb37 	bl	800086c <__aeabi_ddiv>
 800d1fe:	4682      	mov	sl, r0
 800d200:	468b      	mov	fp, r1
 800d202:	ea5f 1828 	movs.w	r8, r8, asr #4
 800d206:	d0da      	beq.n	800d1be <_strtod_l+0x516>
 800d208:	f1b8 0f1f 	cmp.w	r8, #31
 800d20c:	dd20      	ble.n	800d250 <_strtod_l+0x5a8>
 800d20e:	2400      	movs	r4, #0
 800d210:	46a0      	mov	r8, r4
 800d212:	9407      	str	r4, [sp, #28]
 800d214:	9405      	str	r4, [sp, #20]
 800d216:	2322      	movs	r3, #34	; 0x22
 800d218:	f04f 0a00 	mov.w	sl, #0
 800d21c:	f04f 0b00 	mov.w	fp, #0
 800d220:	f8c9 3000 	str.w	r3, [r9]
 800d224:	e765      	b.n	800d0f2 <_strtod_l+0x44a>
 800d226:	bf00      	nop
 800d228:	080119ad 	.word	0x080119ad
 800d22c:	080119ff 	.word	0x080119ff
 800d230:	080119b5 	.word	0x080119b5
 800d234:	08011968 	.word	0x08011968
 800d238:	08011a40 	.word	0x08011a40
 800d23c:	08011a18 	.word	0x08011a18
 800d240:	7ff00000 	.word	0x7ff00000
 800d244:	7ca00000 	.word	0x7ca00000
 800d248:	fff80000 	.word	0xfff80000
 800d24c:	7fefffff 	.word	0x7fefffff
 800d250:	f018 0310 	ands.w	r3, r8, #16
 800d254:	bf18      	it	ne
 800d256:	236a      	movne	r3, #106	; 0x6a
 800d258:	4da0      	ldr	r5, [pc, #640]	; (800d4dc <_strtod_l+0x834>)
 800d25a:	9304      	str	r3, [sp, #16]
 800d25c:	4650      	mov	r0, sl
 800d25e:	4659      	mov	r1, fp
 800d260:	2300      	movs	r3, #0
 800d262:	f1b8 0f00 	cmp.w	r8, #0
 800d266:	f300 810a 	bgt.w	800d47e <_strtod_l+0x7d6>
 800d26a:	b10b      	cbz	r3, 800d270 <_strtod_l+0x5c8>
 800d26c:	4682      	mov	sl, r0
 800d26e:	468b      	mov	fp, r1
 800d270:	9b04      	ldr	r3, [sp, #16]
 800d272:	b1bb      	cbz	r3, 800d2a4 <_strtod_l+0x5fc>
 800d274:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800d278:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	4659      	mov	r1, fp
 800d280:	dd10      	ble.n	800d2a4 <_strtod_l+0x5fc>
 800d282:	2b1f      	cmp	r3, #31
 800d284:	f340 8107 	ble.w	800d496 <_strtod_l+0x7ee>
 800d288:	2b34      	cmp	r3, #52	; 0x34
 800d28a:	bfde      	ittt	le
 800d28c:	3b20      	suble	r3, #32
 800d28e:	f04f 32ff 	movle.w	r2, #4294967295
 800d292:	fa02 f303 	lslle.w	r3, r2, r3
 800d296:	f04f 0a00 	mov.w	sl, #0
 800d29a:	bfcc      	ite	gt
 800d29c:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800d2a0:	ea03 0b01 	andle.w	fp, r3, r1
 800d2a4:	2200      	movs	r2, #0
 800d2a6:	2300      	movs	r3, #0
 800d2a8:	4650      	mov	r0, sl
 800d2aa:	4659      	mov	r1, fp
 800d2ac:	f7f3 fc1c 	bl	8000ae8 <__aeabi_dcmpeq>
 800d2b0:	2800      	cmp	r0, #0
 800d2b2:	d1ac      	bne.n	800d20e <_strtod_l+0x566>
 800d2b4:	9b07      	ldr	r3, [sp, #28]
 800d2b6:	9300      	str	r3, [sp, #0]
 800d2b8:	9a05      	ldr	r2, [sp, #20]
 800d2ba:	9908      	ldr	r1, [sp, #32]
 800d2bc:	4623      	mov	r3, r4
 800d2be:	4648      	mov	r0, r9
 800d2c0:	f003 f98e 	bl	80105e0 <__s2b>
 800d2c4:	9007      	str	r0, [sp, #28]
 800d2c6:	2800      	cmp	r0, #0
 800d2c8:	f43f af08 	beq.w	800d0dc <_strtod_l+0x434>
 800d2cc:	9a06      	ldr	r2, [sp, #24]
 800d2ce:	9b06      	ldr	r3, [sp, #24]
 800d2d0:	2a00      	cmp	r2, #0
 800d2d2:	f1c3 0300 	rsb	r3, r3, #0
 800d2d6:	bfa8      	it	ge
 800d2d8:	2300      	movge	r3, #0
 800d2da:	930e      	str	r3, [sp, #56]	; 0x38
 800d2dc:	2400      	movs	r4, #0
 800d2de:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800d2e2:	9316      	str	r3, [sp, #88]	; 0x58
 800d2e4:	46a0      	mov	r8, r4
 800d2e6:	9b07      	ldr	r3, [sp, #28]
 800d2e8:	4648      	mov	r0, r9
 800d2ea:	6859      	ldr	r1, [r3, #4]
 800d2ec:	f003 f90f 	bl	801050e <_Balloc>
 800d2f0:	9005      	str	r0, [sp, #20]
 800d2f2:	2800      	cmp	r0, #0
 800d2f4:	f43f aef6 	beq.w	800d0e4 <_strtod_l+0x43c>
 800d2f8:	9b07      	ldr	r3, [sp, #28]
 800d2fa:	691a      	ldr	r2, [r3, #16]
 800d2fc:	3202      	adds	r2, #2
 800d2fe:	f103 010c 	add.w	r1, r3, #12
 800d302:	0092      	lsls	r2, r2, #2
 800d304:	300c      	adds	r0, #12
 800d306:	f003 f8f7 	bl	80104f8 <memcpy>
 800d30a:	aa1e      	add	r2, sp, #120	; 0x78
 800d30c:	a91d      	add	r1, sp, #116	; 0x74
 800d30e:	ec4b ab10 	vmov	d0, sl, fp
 800d312:	4648      	mov	r0, r9
 800d314:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800d318:	f003 fc10 	bl	8010b3c <__d2b>
 800d31c:	901c      	str	r0, [sp, #112]	; 0x70
 800d31e:	2800      	cmp	r0, #0
 800d320:	f43f aee0 	beq.w	800d0e4 <_strtod_l+0x43c>
 800d324:	2101      	movs	r1, #1
 800d326:	4648      	mov	r0, r9
 800d328:	f003 f9e6 	bl	80106f8 <__i2b>
 800d32c:	4680      	mov	r8, r0
 800d32e:	2800      	cmp	r0, #0
 800d330:	f43f aed8 	beq.w	800d0e4 <_strtod_l+0x43c>
 800d334:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800d336:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800d338:	2e00      	cmp	r6, #0
 800d33a:	bfab      	itete	ge
 800d33c:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800d33e:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800d340:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800d342:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 800d344:	bfac      	ite	ge
 800d346:	18f7      	addge	r7, r6, r3
 800d348:	1b9d      	sublt	r5, r3, r6
 800d34a:	9b04      	ldr	r3, [sp, #16]
 800d34c:	1af6      	subs	r6, r6, r3
 800d34e:	4416      	add	r6, r2
 800d350:	4b63      	ldr	r3, [pc, #396]	; (800d4e0 <_strtod_l+0x838>)
 800d352:	3e01      	subs	r6, #1
 800d354:	429e      	cmp	r6, r3
 800d356:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800d35a:	f280 80af 	bge.w	800d4bc <_strtod_l+0x814>
 800d35e:	1b9b      	subs	r3, r3, r6
 800d360:	2b1f      	cmp	r3, #31
 800d362:	eba2 0203 	sub.w	r2, r2, r3
 800d366:	f04f 0101 	mov.w	r1, #1
 800d36a:	f300 809b 	bgt.w	800d4a4 <_strtod_l+0x7fc>
 800d36e:	fa01 f303 	lsl.w	r3, r1, r3
 800d372:	930f      	str	r3, [sp, #60]	; 0x3c
 800d374:	2300      	movs	r3, #0
 800d376:	930a      	str	r3, [sp, #40]	; 0x28
 800d378:	18be      	adds	r6, r7, r2
 800d37a:	9b04      	ldr	r3, [sp, #16]
 800d37c:	42b7      	cmp	r7, r6
 800d37e:	4415      	add	r5, r2
 800d380:	441d      	add	r5, r3
 800d382:	463b      	mov	r3, r7
 800d384:	bfa8      	it	ge
 800d386:	4633      	movge	r3, r6
 800d388:	42ab      	cmp	r3, r5
 800d38a:	bfa8      	it	ge
 800d38c:	462b      	movge	r3, r5
 800d38e:	2b00      	cmp	r3, #0
 800d390:	bfc2      	ittt	gt
 800d392:	1af6      	subgt	r6, r6, r3
 800d394:	1aed      	subgt	r5, r5, r3
 800d396:	1aff      	subgt	r7, r7, r3
 800d398:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d39a:	b1bb      	cbz	r3, 800d3cc <_strtod_l+0x724>
 800d39c:	4641      	mov	r1, r8
 800d39e:	461a      	mov	r2, r3
 800d3a0:	4648      	mov	r0, r9
 800d3a2:	f003 fa49 	bl	8010838 <__pow5mult>
 800d3a6:	4680      	mov	r8, r0
 800d3a8:	2800      	cmp	r0, #0
 800d3aa:	f43f ae9b 	beq.w	800d0e4 <_strtod_l+0x43c>
 800d3ae:	4601      	mov	r1, r0
 800d3b0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800d3b2:	4648      	mov	r0, r9
 800d3b4:	f003 f9a9 	bl	801070a <__multiply>
 800d3b8:	900c      	str	r0, [sp, #48]	; 0x30
 800d3ba:	2800      	cmp	r0, #0
 800d3bc:	f43f ae92 	beq.w	800d0e4 <_strtod_l+0x43c>
 800d3c0:	991c      	ldr	r1, [sp, #112]	; 0x70
 800d3c2:	4648      	mov	r0, r9
 800d3c4:	f003 f8c8 	bl	8010558 <_Bfree>
 800d3c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d3ca:	931c      	str	r3, [sp, #112]	; 0x70
 800d3cc:	2e00      	cmp	r6, #0
 800d3ce:	dc7a      	bgt.n	800d4c6 <_strtod_l+0x81e>
 800d3d0:	9b06      	ldr	r3, [sp, #24]
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	dd08      	ble.n	800d3e8 <_strtod_l+0x740>
 800d3d6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800d3d8:	9905      	ldr	r1, [sp, #20]
 800d3da:	4648      	mov	r0, r9
 800d3dc:	f003 fa2c 	bl	8010838 <__pow5mult>
 800d3e0:	9005      	str	r0, [sp, #20]
 800d3e2:	2800      	cmp	r0, #0
 800d3e4:	f43f ae7e 	beq.w	800d0e4 <_strtod_l+0x43c>
 800d3e8:	2d00      	cmp	r5, #0
 800d3ea:	dd08      	ble.n	800d3fe <_strtod_l+0x756>
 800d3ec:	462a      	mov	r2, r5
 800d3ee:	9905      	ldr	r1, [sp, #20]
 800d3f0:	4648      	mov	r0, r9
 800d3f2:	f003 fa61 	bl	80108b8 <__lshift>
 800d3f6:	9005      	str	r0, [sp, #20]
 800d3f8:	2800      	cmp	r0, #0
 800d3fa:	f43f ae73 	beq.w	800d0e4 <_strtod_l+0x43c>
 800d3fe:	2f00      	cmp	r7, #0
 800d400:	dd08      	ble.n	800d414 <_strtod_l+0x76c>
 800d402:	4641      	mov	r1, r8
 800d404:	463a      	mov	r2, r7
 800d406:	4648      	mov	r0, r9
 800d408:	f003 fa56 	bl	80108b8 <__lshift>
 800d40c:	4680      	mov	r8, r0
 800d40e:	2800      	cmp	r0, #0
 800d410:	f43f ae68 	beq.w	800d0e4 <_strtod_l+0x43c>
 800d414:	9a05      	ldr	r2, [sp, #20]
 800d416:	991c      	ldr	r1, [sp, #112]	; 0x70
 800d418:	4648      	mov	r0, r9
 800d41a:	f003 fabb 	bl	8010994 <__mdiff>
 800d41e:	4604      	mov	r4, r0
 800d420:	2800      	cmp	r0, #0
 800d422:	f43f ae5f 	beq.w	800d0e4 <_strtod_l+0x43c>
 800d426:	68c3      	ldr	r3, [r0, #12]
 800d428:	930c      	str	r3, [sp, #48]	; 0x30
 800d42a:	2300      	movs	r3, #0
 800d42c:	60c3      	str	r3, [r0, #12]
 800d42e:	4641      	mov	r1, r8
 800d430:	f003 fa96 	bl	8010960 <__mcmp>
 800d434:	2800      	cmp	r0, #0
 800d436:	da55      	bge.n	800d4e4 <_strtod_l+0x83c>
 800d438:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d43a:	b9e3      	cbnz	r3, 800d476 <_strtod_l+0x7ce>
 800d43c:	f1ba 0f00 	cmp.w	sl, #0
 800d440:	d119      	bne.n	800d476 <_strtod_l+0x7ce>
 800d442:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d446:	b9b3      	cbnz	r3, 800d476 <_strtod_l+0x7ce>
 800d448:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d44c:	0d1b      	lsrs	r3, r3, #20
 800d44e:	051b      	lsls	r3, r3, #20
 800d450:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800d454:	d90f      	bls.n	800d476 <_strtod_l+0x7ce>
 800d456:	6963      	ldr	r3, [r4, #20]
 800d458:	b913      	cbnz	r3, 800d460 <_strtod_l+0x7b8>
 800d45a:	6923      	ldr	r3, [r4, #16]
 800d45c:	2b01      	cmp	r3, #1
 800d45e:	dd0a      	ble.n	800d476 <_strtod_l+0x7ce>
 800d460:	4621      	mov	r1, r4
 800d462:	2201      	movs	r2, #1
 800d464:	4648      	mov	r0, r9
 800d466:	f003 fa27 	bl	80108b8 <__lshift>
 800d46a:	4641      	mov	r1, r8
 800d46c:	4604      	mov	r4, r0
 800d46e:	f003 fa77 	bl	8010960 <__mcmp>
 800d472:	2800      	cmp	r0, #0
 800d474:	dc67      	bgt.n	800d546 <_strtod_l+0x89e>
 800d476:	9b04      	ldr	r3, [sp, #16]
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d171      	bne.n	800d560 <_strtod_l+0x8b8>
 800d47c:	e63d      	b.n	800d0fa <_strtod_l+0x452>
 800d47e:	f018 0f01 	tst.w	r8, #1
 800d482:	d004      	beq.n	800d48e <_strtod_l+0x7e6>
 800d484:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d488:	f7f3 f8c6 	bl	8000618 <__aeabi_dmul>
 800d48c:	2301      	movs	r3, #1
 800d48e:	ea4f 0868 	mov.w	r8, r8, asr #1
 800d492:	3508      	adds	r5, #8
 800d494:	e6e5      	b.n	800d262 <_strtod_l+0x5ba>
 800d496:	f04f 32ff 	mov.w	r2, #4294967295
 800d49a:	fa02 f303 	lsl.w	r3, r2, r3
 800d49e:	ea03 0a0a 	and.w	sl, r3, sl
 800d4a2:	e6ff      	b.n	800d2a4 <_strtod_l+0x5fc>
 800d4a4:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800d4a8:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800d4ac:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800d4b0:	36e2      	adds	r6, #226	; 0xe2
 800d4b2:	fa01 f306 	lsl.w	r3, r1, r6
 800d4b6:	930a      	str	r3, [sp, #40]	; 0x28
 800d4b8:	910f      	str	r1, [sp, #60]	; 0x3c
 800d4ba:	e75d      	b.n	800d378 <_strtod_l+0x6d0>
 800d4bc:	2300      	movs	r3, #0
 800d4be:	930a      	str	r3, [sp, #40]	; 0x28
 800d4c0:	2301      	movs	r3, #1
 800d4c2:	930f      	str	r3, [sp, #60]	; 0x3c
 800d4c4:	e758      	b.n	800d378 <_strtod_l+0x6d0>
 800d4c6:	4632      	mov	r2, r6
 800d4c8:	991c      	ldr	r1, [sp, #112]	; 0x70
 800d4ca:	4648      	mov	r0, r9
 800d4cc:	f003 f9f4 	bl	80108b8 <__lshift>
 800d4d0:	901c      	str	r0, [sp, #112]	; 0x70
 800d4d2:	2800      	cmp	r0, #0
 800d4d4:	f47f af7c 	bne.w	800d3d0 <_strtod_l+0x728>
 800d4d8:	e604      	b.n	800d0e4 <_strtod_l+0x43c>
 800d4da:	bf00      	nop
 800d4dc:	08011980 	.word	0x08011980
 800d4e0:	fffffc02 	.word	0xfffffc02
 800d4e4:	465d      	mov	r5, fp
 800d4e6:	f040 8086 	bne.w	800d5f6 <_strtod_l+0x94e>
 800d4ea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d4ec:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d4f0:	b32a      	cbz	r2, 800d53e <_strtod_l+0x896>
 800d4f2:	4aaf      	ldr	r2, [pc, #700]	; (800d7b0 <_strtod_l+0xb08>)
 800d4f4:	4293      	cmp	r3, r2
 800d4f6:	d153      	bne.n	800d5a0 <_strtod_l+0x8f8>
 800d4f8:	9b04      	ldr	r3, [sp, #16]
 800d4fa:	4650      	mov	r0, sl
 800d4fc:	b1d3      	cbz	r3, 800d534 <_strtod_l+0x88c>
 800d4fe:	4aad      	ldr	r2, [pc, #692]	; (800d7b4 <_strtod_l+0xb0c>)
 800d500:	402a      	ands	r2, r5
 800d502:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800d506:	f04f 31ff 	mov.w	r1, #4294967295
 800d50a:	d816      	bhi.n	800d53a <_strtod_l+0x892>
 800d50c:	0d12      	lsrs	r2, r2, #20
 800d50e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800d512:	fa01 f303 	lsl.w	r3, r1, r3
 800d516:	4298      	cmp	r0, r3
 800d518:	d142      	bne.n	800d5a0 <_strtod_l+0x8f8>
 800d51a:	4ba7      	ldr	r3, [pc, #668]	; (800d7b8 <_strtod_l+0xb10>)
 800d51c:	429d      	cmp	r5, r3
 800d51e:	d102      	bne.n	800d526 <_strtod_l+0x87e>
 800d520:	3001      	adds	r0, #1
 800d522:	f43f addf 	beq.w	800d0e4 <_strtod_l+0x43c>
 800d526:	4ba3      	ldr	r3, [pc, #652]	; (800d7b4 <_strtod_l+0xb0c>)
 800d528:	402b      	ands	r3, r5
 800d52a:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800d52e:	f04f 0a00 	mov.w	sl, #0
 800d532:	e7a0      	b.n	800d476 <_strtod_l+0x7ce>
 800d534:	f04f 33ff 	mov.w	r3, #4294967295
 800d538:	e7ed      	b.n	800d516 <_strtod_l+0x86e>
 800d53a:	460b      	mov	r3, r1
 800d53c:	e7eb      	b.n	800d516 <_strtod_l+0x86e>
 800d53e:	bb7b      	cbnz	r3, 800d5a0 <_strtod_l+0x8f8>
 800d540:	f1ba 0f00 	cmp.w	sl, #0
 800d544:	d12c      	bne.n	800d5a0 <_strtod_l+0x8f8>
 800d546:	9904      	ldr	r1, [sp, #16]
 800d548:	4a9a      	ldr	r2, [pc, #616]	; (800d7b4 <_strtod_l+0xb0c>)
 800d54a:	465b      	mov	r3, fp
 800d54c:	b1f1      	cbz	r1, 800d58c <_strtod_l+0x8e4>
 800d54e:	ea02 010b 	and.w	r1, r2, fp
 800d552:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800d556:	dc19      	bgt.n	800d58c <_strtod_l+0x8e4>
 800d558:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800d55c:	f77f ae5b 	ble.w	800d216 <_strtod_l+0x56e>
 800d560:	4a96      	ldr	r2, [pc, #600]	; (800d7bc <_strtod_l+0xb14>)
 800d562:	2300      	movs	r3, #0
 800d564:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800d568:	4650      	mov	r0, sl
 800d56a:	4659      	mov	r1, fp
 800d56c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800d570:	f7f3 f852 	bl	8000618 <__aeabi_dmul>
 800d574:	4682      	mov	sl, r0
 800d576:	468b      	mov	fp, r1
 800d578:	2900      	cmp	r1, #0
 800d57a:	f47f adbe 	bne.w	800d0fa <_strtod_l+0x452>
 800d57e:	2800      	cmp	r0, #0
 800d580:	f47f adbb 	bne.w	800d0fa <_strtod_l+0x452>
 800d584:	2322      	movs	r3, #34	; 0x22
 800d586:	f8c9 3000 	str.w	r3, [r9]
 800d58a:	e5b6      	b.n	800d0fa <_strtod_l+0x452>
 800d58c:	4013      	ands	r3, r2
 800d58e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800d592:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800d596:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800d59a:	f04f 3aff 	mov.w	sl, #4294967295
 800d59e:	e76a      	b.n	800d476 <_strtod_l+0x7ce>
 800d5a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d5a2:	b193      	cbz	r3, 800d5ca <_strtod_l+0x922>
 800d5a4:	422b      	tst	r3, r5
 800d5a6:	f43f af66 	beq.w	800d476 <_strtod_l+0x7ce>
 800d5aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d5ac:	9a04      	ldr	r2, [sp, #16]
 800d5ae:	4650      	mov	r0, sl
 800d5b0:	4659      	mov	r1, fp
 800d5b2:	b173      	cbz	r3, 800d5d2 <_strtod_l+0x92a>
 800d5b4:	f7ff fb5a 	bl	800cc6c <sulp>
 800d5b8:	4602      	mov	r2, r0
 800d5ba:	460b      	mov	r3, r1
 800d5bc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d5c0:	f7f2 fe74 	bl	80002ac <__adddf3>
 800d5c4:	4682      	mov	sl, r0
 800d5c6:	468b      	mov	fp, r1
 800d5c8:	e755      	b.n	800d476 <_strtod_l+0x7ce>
 800d5ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d5cc:	ea13 0f0a 	tst.w	r3, sl
 800d5d0:	e7e9      	b.n	800d5a6 <_strtod_l+0x8fe>
 800d5d2:	f7ff fb4b 	bl	800cc6c <sulp>
 800d5d6:	4602      	mov	r2, r0
 800d5d8:	460b      	mov	r3, r1
 800d5da:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d5de:	f7f2 fe63 	bl	80002a8 <__aeabi_dsub>
 800d5e2:	2200      	movs	r2, #0
 800d5e4:	2300      	movs	r3, #0
 800d5e6:	4682      	mov	sl, r0
 800d5e8:	468b      	mov	fp, r1
 800d5ea:	f7f3 fa7d 	bl	8000ae8 <__aeabi_dcmpeq>
 800d5ee:	2800      	cmp	r0, #0
 800d5f0:	f47f ae11 	bne.w	800d216 <_strtod_l+0x56e>
 800d5f4:	e73f      	b.n	800d476 <_strtod_l+0x7ce>
 800d5f6:	4641      	mov	r1, r8
 800d5f8:	4620      	mov	r0, r4
 800d5fa:	f003 faee 	bl	8010bda <__ratio>
 800d5fe:	ec57 6b10 	vmov	r6, r7, d0
 800d602:	2200      	movs	r2, #0
 800d604:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d608:	ee10 0a10 	vmov	r0, s0
 800d60c:	4639      	mov	r1, r7
 800d60e:	f7f3 fa7f 	bl	8000b10 <__aeabi_dcmple>
 800d612:	2800      	cmp	r0, #0
 800d614:	d077      	beq.n	800d706 <_strtod_l+0xa5e>
 800d616:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d04a      	beq.n	800d6b2 <_strtod_l+0xa0a>
 800d61c:	4b68      	ldr	r3, [pc, #416]	; (800d7c0 <_strtod_l+0xb18>)
 800d61e:	2200      	movs	r2, #0
 800d620:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800d624:	4f66      	ldr	r7, [pc, #408]	; (800d7c0 <_strtod_l+0xb18>)
 800d626:	2600      	movs	r6, #0
 800d628:	4b62      	ldr	r3, [pc, #392]	; (800d7b4 <_strtod_l+0xb0c>)
 800d62a:	402b      	ands	r3, r5
 800d62c:	930f      	str	r3, [sp, #60]	; 0x3c
 800d62e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d630:	4b64      	ldr	r3, [pc, #400]	; (800d7c4 <_strtod_l+0xb1c>)
 800d632:	429a      	cmp	r2, r3
 800d634:	f040 80ce 	bne.w	800d7d4 <_strtod_l+0xb2c>
 800d638:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800d63c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800d640:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 800d644:	ec4b ab10 	vmov	d0, sl, fp
 800d648:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800d64c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800d650:	f003 f9fe 	bl	8010a50 <__ulp>
 800d654:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800d658:	ec53 2b10 	vmov	r2, r3, d0
 800d65c:	f7f2 ffdc 	bl	8000618 <__aeabi_dmul>
 800d660:	4652      	mov	r2, sl
 800d662:	465b      	mov	r3, fp
 800d664:	f7f2 fe22 	bl	80002ac <__adddf3>
 800d668:	460b      	mov	r3, r1
 800d66a:	4952      	ldr	r1, [pc, #328]	; (800d7b4 <_strtod_l+0xb0c>)
 800d66c:	4a56      	ldr	r2, [pc, #344]	; (800d7c8 <_strtod_l+0xb20>)
 800d66e:	4019      	ands	r1, r3
 800d670:	4291      	cmp	r1, r2
 800d672:	4682      	mov	sl, r0
 800d674:	d95b      	bls.n	800d72e <_strtod_l+0xa86>
 800d676:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d678:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800d67c:	4293      	cmp	r3, r2
 800d67e:	d103      	bne.n	800d688 <_strtod_l+0x9e0>
 800d680:	9b08      	ldr	r3, [sp, #32]
 800d682:	3301      	adds	r3, #1
 800d684:	f43f ad2e 	beq.w	800d0e4 <_strtod_l+0x43c>
 800d688:	f8df b12c 	ldr.w	fp, [pc, #300]	; 800d7b8 <_strtod_l+0xb10>
 800d68c:	f04f 3aff 	mov.w	sl, #4294967295
 800d690:	991c      	ldr	r1, [sp, #112]	; 0x70
 800d692:	4648      	mov	r0, r9
 800d694:	f002 ff60 	bl	8010558 <_Bfree>
 800d698:	9905      	ldr	r1, [sp, #20]
 800d69a:	4648      	mov	r0, r9
 800d69c:	f002 ff5c 	bl	8010558 <_Bfree>
 800d6a0:	4641      	mov	r1, r8
 800d6a2:	4648      	mov	r0, r9
 800d6a4:	f002 ff58 	bl	8010558 <_Bfree>
 800d6a8:	4621      	mov	r1, r4
 800d6aa:	4648      	mov	r0, r9
 800d6ac:	f002 ff54 	bl	8010558 <_Bfree>
 800d6b0:	e619      	b.n	800d2e6 <_strtod_l+0x63e>
 800d6b2:	f1ba 0f00 	cmp.w	sl, #0
 800d6b6:	d11a      	bne.n	800d6ee <_strtod_l+0xa46>
 800d6b8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d6bc:	b9eb      	cbnz	r3, 800d6fa <_strtod_l+0xa52>
 800d6be:	2200      	movs	r2, #0
 800d6c0:	4b3f      	ldr	r3, [pc, #252]	; (800d7c0 <_strtod_l+0xb18>)
 800d6c2:	4630      	mov	r0, r6
 800d6c4:	4639      	mov	r1, r7
 800d6c6:	f7f3 fa19 	bl	8000afc <__aeabi_dcmplt>
 800d6ca:	b9c8      	cbnz	r0, 800d700 <_strtod_l+0xa58>
 800d6cc:	4630      	mov	r0, r6
 800d6ce:	4639      	mov	r1, r7
 800d6d0:	2200      	movs	r2, #0
 800d6d2:	4b3e      	ldr	r3, [pc, #248]	; (800d7cc <_strtod_l+0xb24>)
 800d6d4:	f7f2 ffa0 	bl	8000618 <__aeabi_dmul>
 800d6d8:	4606      	mov	r6, r0
 800d6da:	460f      	mov	r7, r1
 800d6dc:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800d6e0:	9618      	str	r6, [sp, #96]	; 0x60
 800d6e2:	9319      	str	r3, [sp, #100]	; 0x64
 800d6e4:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800d6e8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800d6ec:	e79c      	b.n	800d628 <_strtod_l+0x980>
 800d6ee:	f1ba 0f01 	cmp.w	sl, #1
 800d6f2:	d102      	bne.n	800d6fa <_strtod_l+0xa52>
 800d6f4:	2d00      	cmp	r5, #0
 800d6f6:	f43f ad8e 	beq.w	800d216 <_strtod_l+0x56e>
 800d6fa:	2200      	movs	r2, #0
 800d6fc:	4b34      	ldr	r3, [pc, #208]	; (800d7d0 <_strtod_l+0xb28>)
 800d6fe:	e78f      	b.n	800d620 <_strtod_l+0x978>
 800d700:	2600      	movs	r6, #0
 800d702:	4f32      	ldr	r7, [pc, #200]	; (800d7cc <_strtod_l+0xb24>)
 800d704:	e7ea      	b.n	800d6dc <_strtod_l+0xa34>
 800d706:	4b31      	ldr	r3, [pc, #196]	; (800d7cc <_strtod_l+0xb24>)
 800d708:	4630      	mov	r0, r6
 800d70a:	4639      	mov	r1, r7
 800d70c:	2200      	movs	r2, #0
 800d70e:	f7f2 ff83 	bl	8000618 <__aeabi_dmul>
 800d712:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d714:	4606      	mov	r6, r0
 800d716:	460f      	mov	r7, r1
 800d718:	b933      	cbnz	r3, 800d728 <_strtod_l+0xa80>
 800d71a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d71e:	9010      	str	r0, [sp, #64]	; 0x40
 800d720:	9311      	str	r3, [sp, #68]	; 0x44
 800d722:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d726:	e7df      	b.n	800d6e8 <_strtod_l+0xa40>
 800d728:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800d72c:	e7f9      	b.n	800d722 <_strtod_l+0xa7a>
 800d72e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800d732:	9b04      	ldr	r3, [sp, #16]
 800d734:	2b00      	cmp	r3, #0
 800d736:	d1ab      	bne.n	800d690 <_strtod_l+0x9e8>
 800d738:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d73c:	0d1b      	lsrs	r3, r3, #20
 800d73e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d740:	051b      	lsls	r3, r3, #20
 800d742:	429a      	cmp	r2, r3
 800d744:	465d      	mov	r5, fp
 800d746:	d1a3      	bne.n	800d690 <_strtod_l+0x9e8>
 800d748:	4639      	mov	r1, r7
 800d74a:	4630      	mov	r0, r6
 800d74c:	f7f3 fa14 	bl	8000b78 <__aeabi_d2iz>
 800d750:	f7f2 fef8 	bl	8000544 <__aeabi_i2d>
 800d754:	460b      	mov	r3, r1
 800d756:	4602      	mov	r2, r0
 800d758:	4639      	mov	r1, r7
 800d75a:	4630      	mov	r0, r6
 800d75c:	f7f2 fda4 	bl	80002a8 <__aeabi_dsub>
 800d760:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d762:	4606      	mov	r6, r0
 800d764:	460f      	mov	r7, r1
 800d766:	b933      	cbnz	r3, 800d776 <_strtod_l+0xace>
 800d768:	f1ba 0f00 	cmp.w	sl, #0
 800d76c:	d103      	bne.n	800d776 <_strtod_l+0xace>
 800d76e:	f3cb 0513 	ubfx	r5, fp, #0, #20
 800d772:	2d00      	cmp	r5, #0
 800d774:	d06d      	beq.n	800d852 <_strtod_l+0xbaa>
 800d776:	a30a      	add	r3, pc, #40	; (adr r3, 800d7a0 <_strtod_l+0xaf8>)
 800d778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d77c:	4630      	mov	r0, r6
 800d77e:	4639      	mov	r1, r7
 800d780:	f7f3 f9bc 	bl	8000afc <__aeabi_dcmplt>
 800d784:	2800      	cmp	r0, #0
 800d786:	f47f acb8 	bne.w	800d0fa <_strtod_l+0x452>
 800d78a:	a307      	add	r3, pc, #28	; (adr r3, 800d7a8 <_strtod_l+0xb00>)
 800d78c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d790:	4630      	mov	r0, r6
 800d792:	4639      	mov	r1, r7
 800d794:	f7f3 f9d0 	bl	8000b38 <__aeabi_dcmpgt>
 800d798:	2800      	cmp	r0, #0
 800d79a:	f43f af79 	beq.w	800d690 <_strtod_l+0x9e8>
 800d79e:	e4ac      	b.n	800d0fa <_strtod_l+0x452>
 800d7a0:	94a03595 	.word	0x94a03595
 800d7a4:	3fdfffff 	.word	0x3fdfffff
 800d7a8:	35afe535 	.word	0x35afe535
 800d7ac:	3fe00000 	.word	0x3fe00000
 800d7b0:	000fffff 	.word	0x000fffff
 800d7b4:	7ff00000 	.word	0x7ff00000
 800d7b8:	7fefffff 	.word	0x7fefffff
 800d7bc:	39500000 	.word	0x39500000
 800d7c0:	3ff00000 	.word	0x3ff00000
 800d7c4:	7fe00000 	.word	0x7fe00000
 800d7c8:	7c9fffff 	.word	0x7c9fffff
 800d7cc:	3fe00000 	.word	0x3fe00000
 800d7d0:	bff00000 	.word	0xbff00000
 800d7d4:	9b04      	ldr	r3, [sp, #16]
 800d7d6:	b333      	cbz	r3, 800d826 <_strtod_l+0xb7e>
 800d7d8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d7da:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800d7de:	d822      	bhi.n	800d826 <_strtod_l+0xb7e>
 800d7e0:	a327      	add	r3, pc, #156	; (adr r3, 800d880 <_strtod_l+0xbd8>)
 800d7e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7e6:	4630      	mov	r0, r6
 800d7e8:	4639      	mov	r1, r7
 800d7ea:	f7f3 f991 	bl	8000b10 <__aeabi_dcmple>
 800d7ee:	b1a0      	cbz	r0, 800d81a <_strtod_l+0xb72>
 800d7f0:	4639      	mov	r1, r7
 800d7f2:	4630      	mov	r0, r6
 800d7f4:	f7f3 f9e8 	bl	8000bc8 <__aeabi_d2uiz>
 800d7f8:	2800      	cmp	r0, #0
 800d7fa:	bf08      	it	eq
 800d7fc:	2001      	moveq	r0, #1
 800d7fe:	f7f2 fe91 	bl	8000524 <__aeabi_ui2d>
 800d802:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d804:	4606      	mov	r6, r0
 800d806:	460f      	mov	r7, r1
 800d808:	bb03      	cbnz	r3, 800d84c <_strtod_l+0xba4>
 800d80a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d80e:	9012      	str	r0, [sp, #72]	; 0x48
 800d810:	9313      	str	r3, [sp, #76]	; 0x4c
 800d812:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800d816:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800d81a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d81c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d81e:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800d822:	1a9b      	subs	r3, r3, r2
 800d824:	930b      	str	r3, [sp, #44]	; 0x2c
 800d826:	ed9d 0b08 	vldr	d0, [sp, #32]
 800d82a:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 800d82e:	f003 f90f 	bl	8010a50 <__ulp>
 800d832:	4650      	mov	r0, sl
 800d834:	ec53 2b10 	vmov	r2, r3, d0
 800d838:	4659      	mov	r1, fp
 800d83a:	f7f2 feed 	bl	8000618 <__aeabi_dmul>
 800d83e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800d842:	f7f2 fd33 	bl	80002ac <__adddf3>
 800d846:	4682      	mov	sl, r0
 800d848:	468b      	mov	fp, r1
 800d84a:	e772      	b.n	800d732 <_strtod_l+0xa8a>
 800d84c:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 800d850:	e7df      	b.n	800d812 <_strtod_l+0xb6a>
 800d852:	a30d      	add	r3, pc, #52	; (adr r3, 800d888 <_strtod_l+0xbe0>)
 800d854:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d858:	f7f3 f950 	bl	8000afc <__aeabi_dcmplt>
 800d85c:	e79c      	b.n	800d798 <_strtod_l+0xaf0>
 800d85e:	2300      	movs	r3, #0
 800d860:	930d      	str	r3, [sp, #52]	; 0x34
 800d862:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d864:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d866:	6013      	str	r3, [r2, #0]
 800d868:	f7ff ba61 	b.w	800cd2e <_strtod_l+0x86>
 800d86c:	2b65      	cmp	r3, #101	; 0x65
 800d86e:	f04f 0200 	mov.w	r2, #0
 800d872:	f43f ab4e 	beq.w	800cf12 <_strtod_l+0x26a>
 800d876:	2101      	movs	r1, #1
 800d878:	4614      	mov	r4, r2
 800d87a:	9104      	str	r1, [sp, #16]
 800d87c:	f7ff bacb 	b.w	800ce16 <_strtod_l+0x16e>
 800d880:	ffc00000 	.word	0xffc00000
 800d884:	41dfffff 	.word	0x41dfffff
 800d888:	94a03595 	.word	0x94a03595
 800d88c:	3fcfffff 	.word	0x3fcfffff

0800d890 <strtod>:
 800d890:	4b07      	ldr	r3, [pc, #28]	; (800d8b0 <strtod+0x20>)
 800d892:	4a08      	ldr	r2, [pc, #32]	; (800d8b4 <strtod+0x24>)
 800d894:	b410      	push	{r4}
 800d896:	681c      	ldr	r4, [r3, #0]
 800d898:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	bf08      	it	eq
 800d89e:	4613      	moveq	r3, r2
 800d8a0:	460a      	mov	r2, r1
 800d8a2:	4601      	mov	r1, r0
 800d8a4:	4620      	mov	r0, r4
 800d8a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d8aa:	f7ff b9fd 	b.w	800cca8 <_strtod_l>
 800d8ae:	bf00      	nop
 800d8b0:	200000ec 	.word	0x200000ec
 800d8b4:	2000092c 	.word	0x2000092c

0800d8b8 <_svfprintf_r>:
 800d8b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8bc:	b0d3      	sub	sp, #332	; 0x14c
 800d8be:	4688      	mov	r8, r1
 800d8c0:	4693      	mov	fp, r2
 800d8c2:	461e      	mov	r6, r3
 800d8c4:	9003      	str	r0, [sp, #12]
 800d8c6:	f002 fdf5 	bl	80104b4 <_localeconv_r>
 800d8ca:	6803      	ldr	r3, [r0, #0]
 800d8cc:	9316      	str	r3, [sp, #88]	; 0x58
 800d8ce:	4618      	mov	r0, r3
 800d8d0:	f7f2 fc88 	bl	80001e4 <strlen>
 800d8d4:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 800d8d8:	900d      	str	r0, [sp, #52]	; 0x34
 800d8da:	0618      	lsls	r0, r3, #24
 800d8dc:	d518      	bpl.n	800d910 <_svfprintf_r+0x58>
 800d8de:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800d8e2:	b9ab      	cbnz	r3, 800d910 <_svfprintf_r+0x58>
 800d8e4:	2140      	movs	r1, #64	; 0x40
 800d8e6:	9803      	ldr	r0, [sp, #12]
 800d8e8:	f7fe ff1a 	bl	800c720 <_malloc_r>
 800d8ec:	f8c8 0000 	str.w	r0, [r8]
 800d8f0:	f8c8 0010 	str.w	r0, [r8, #16]
 800d8f4:	b948      	cbnz	r0, 800d90a <_svfprintf_r+0x52>
 800d8f6:	9a03      	ldr	r2, [sp, #12]
 800d8f8:	230c      	movs	r3, #12
 800d8fa:	6013      	str	r3, [r2, #0]
 800d8fc:	f04f 33ff 	mov.w	r3, #4294967295
 800d900:	930e      	str	r3, [sp, #56]	; 0x38
 800d902:	980e      	ldr	r0, [sp, #56]	; 0x38
 800d904:	b053      	add	sp, #332	; 0x14c
 800d906:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d90a:	2340      	movs	r3, #64	; 0x40
 800d90c:	f8c8 3014 	str.w	r3, [r8, #20]
 800d910:	ed9f 7bc9 	vldr	d7, [pc, #804]	; 800dc38 <_svfprintf_r+0x380>
 800d914:	2300      	movs	r3, #0
 800d916:	e9cd 3327 	strd	r3, r3, [sp, #156]	; 0x9c
 800d91a:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800d91e:	e9cd 3317 	strd	r3, r3, [sp, #92]	; 0x5c
 800d922:	ac29      	add	r4, sp, #164	; 0xa4
 800d924:	9426      	str	r4, [sp, #152]	; 0x98
 800d926:	9304      	str	r3, [sp, #16]
 800d928:	9309      	str	r3, [sp, #36]	; 0x24
 800d92a:	9312      	str	r3, [sp, #72]	; 0x48
 800d92c:	9319      	str	r3, [sp, #100]	; 0x64
 800d92e:	930e      	str	r3, [sp, #56]	; 0x38
 800d930:	465d      	mov	r5, fp
 800d932:	462b      	mov	r3, r5
 800d934:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d938:	b112      	cbz	r2, 800d940 <_svfprintf_r+0x88>
 800d93a:	2a25      	cmp	r2, #37	; 0x25
 800d93c:	f040 80e4 	bne.w	800db08 <_svfprintf_r+0x250>
 800d940:	ebb5 070b 	subs.w	r7, r5, fp
 800d944:	d00e      	beq.n	800d964 <_svfprintf_r+0xac>
 800d946:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800d948:	443b      	add	r3, r7
 800d94a:	9328      	str	r3, [sp, #160]	; 0xa0
 800d94c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800d94e:	3301      	adds	r3, #1
 800d950:	2b07      	cmp	r3, #7
 800d952:	e9c4 b700 	strd	fp, r7, [r4]
 800d956:	9327      	str	r3, [sp, #156]	; 0x9c
 800d958:	f300 80d8 	bgt.w	800db0c <_svfprintf_r+0x254>
 800d95c:	3408      	adds	r4, #8
 800d95e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d960:	443b      	add	r3, r7
 800d962:	930e      	str	r3, [sp, #56]	; 0x38
 800d964:	782b      	ldrb	r3, [r5, #0]
 800d966:	2b00      	cmp	r3, #0
 800d968:	f001 81b4 	beq.w	800ecd4 <_svfprintf_r+0x141c>
 800d96c:	1c6b      	adds	r3, r5, #1
 800d96e:	930c      	str	r3, [sp, #48]	; 0x30
 800d970:	2300      	movs	r3, #0
 800d972:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 800d976:	f04f 35ff 	mov.w	r5, #4294967295
 800d97a:	930f      	str	r3, [sp, #60]	; 0x3c
 800d97c:	469a      	mov	sl, r3
 800d97e:	270a      	movs	r7, #10
 800d980:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d982:	781b      	ldrb	r3, [r3, #0]
 800d984:	9306      	str	r3, [sp, #24]
 800d986:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d988:	3301      	adds	r3, #1
 800d98a:	930c      	str	r3, [sp, #48]	; 0x30
 800d98c:	9b06      	ldr	r3, [sp, #24]
 800d98e:	3b20      	subs	r3, #32
 800d990:	2b5a      	cmp	r3, #90	; 0x5a
 800d992:	f200 8624 	bhi.w	800e5de <_svfprintf_r+0xd26>
 800d996:	a201      	add	r2, pc, #4	; (adr r2, 800d99c <_svfprintf_r+0xe4>)
 800d998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d99c:	0800db9f 	.word	0x0800db9f
 800d9a0:	0800e5df 	.word	0x0800e5df
 800d9a4:	0800e5df 	.word	0x0800e5df
 800d9a8:	0800dbb1 	.word	0x0800dbb1
 800d9ac:	0800e5df 	.word	0x0800e5df
 800d9b0:	0800e5df 	.word	0x0800e5df
 800d9b4:	0800e5df 	.word	0x0800e5df
 800d9b8:	0800db65 	.word	0x0800db65
 800d9bc:	0800e5df 	.word	0x0800e5df
 800d9c0:	0800e5df 	.word	0x0800e5df
 800d9c4:	0800dbb7 	.word	0x0800dbb7
 800d9c8:	0800dbcf 	.word	0x0800dbcf
 800d9cc:	0800e5df 	.word	0x0800e5df
 800d9d0:	0800dbc9 	.word	0x0800dbc9
 800d9d4:	0800dbd3 	.word	0x0800dbd3
 800d9d8:	0800e5df 	.word	0x0800e5df
 800d9dc:	0800dc07 	.word	0x0800dc07
 800d9e0:	0800dc0d 	.word	0x0800dc0d
 800d9e4:	0800dc0d 	.word	0x0800dc0d
 800d9e8:	0800dc0d 	.word	0x0800dc0d
 800d9ec:	0800dc0d 	.word	0x0800dc0d
 800d9f0:	0800dc0d 	.word	0x0800dc0d
 800d9f4:	0800dc0d 	.word	0x0800dc0d
 800d9f8:	0800dc0d 	.word	0x0800dc0d
 800d9fc:	0800dc0d 	.word	0x0800dc0d
 800da00:	0800dc0d 	.word	0x0800dc0d
 800da04:	0800e5df 	.word	0x0800e5df
 800da08:	0800e5df 	.word	0x0800e5df
 800da0c:	0800e5df 	.word	0x0800e5df
 800da10:	0800e5df 	.word	0x0800e5df
 800da14:	0800e5df 	.word	0x0800e5df
 800da18:	0800e5df 	.word	0x0800e5df
 800da1c:	0800e5df 	.word	0x0800e5df
 800da20:	0800dd0f 	.word	0x0800dd0f
 800da24:	0800e5df 	.word	0x0800e5df
 800da28:	0800dc79 	.word	0x0800dc79
 800da2c:	0800dc9b 	.word	0x0800dc9b
 800da30:	0800dd0f 	.word	0x0800dd0f
 800da34:	0800dd0f 	.word	0x0800dd0f
 800da38:	0800dd0f 	.word	0x0800dd0f
 800da3c:	0800e5df 	.word	0x0800e5df
 800da40:	0800e5df 	.word	0x0800e5df
 800da44:	0800e5df 	.word	0x0800e5df
 800da48:	0800e5df 	.word	0x0800e5df
 800da4c:	0800dc2d 	.word	0x0800dc2d
 800da50:	0800e5df 	.word	0x0800e5df
 800da54:	0800e5df 	.word	0x0800e5df
 800da58:	0800e1e1 	.word	0x0800e1e1
 800da5c:	0800e5df 	.word	0x0800e5df
 800da60:	0800e5df 	.word	0x0800e5df
 800da64:	0800e5df 	.word	0x0800e5df
 800da68:	0800e26d 	.word	0x0800e26d
 800da6c:	0800e5df 	.word	0x0800e5df
 800da70:	0800e44f 	.word	0x0800e44f
 800da74:	0800e5df 	.word	0x0800e5df
 800da78:	0800e5df 	.word	0x0800e5df
 800da7c:	0800db25 	.word	0x0800db25
 800da80:	0800e5df 	.word	0x0800e5df
 800da84:	0800e5df 	.word	0x0800e5df
 800da88:	0800e5df 	.word	0x0800e5df
 800da8c:	0800e5df 	.word	0x0800e5df
 800da90:	0800e5df 	.word	0x0800e5df
 800da94:	0800e5df 	.word	0x0800e5df
 800da98:	0800e5df 	.word	0x0800e5df
 800da9c:	0800e5df 	.word	0x0800e5df
 800daa0:	0800dd0f 	.word	0x0800dd0f
 800daa4:	0800e5df 	.word	0x0800e5df
 800daa8:	0800dc79 	.word	0x0800dc79
 800daac:	0800dc9f 	.word	0x0800dc9f
 800dab0:	0800dd0f 	.word	0x0800dd0f
 800dab4:	0800dd0f 	.word	0x0800dd0f
 800dab8:	0800dd0f 	.word	0x0800dd0f
 800dabc:	0800dc45 	.word	0x0800dc45
 800dac0:	0800dc9f 	.word	0x0800dc9f
 800dac4:	0800dc6d 	.word	0x0800dc6d
 800dac8:	0800e5df 	.word	0x0800e5df
 800dacc:	0800dc5f 	.word	0x0800dc5f
 800dad0:	0800e5df 	.word	0x0800e5df
 800dad4:	0800e19b 	.word	0x0800e19b
 800dad8:	0800e1e5 	.word	0x0800e1e5
 800dadc:	0800e24d 	.word	0x0800e24d
 800dae0:	0800dc6d 	.word	0x0800dc6d
 800dae4:	0800e5df 	.word	0x0800e5df
 800dae8:	0800e26d 	.word	0x0800e26d
 800daec:	0800d981 	.word	0x0800d981
 800daf0:	0800e453 	.word	0x0800e453
 800daf4:	0800e5df 	.word	0x0800e5df
 800daf8:	0800e5df 	.word	0x0800e5df
 800dafc:	0800e491 	.word	0x0800e491
 800db00:	0800e5df 	.word	0x0800e5df
 800db04:	0800d981 	.word	0x0800d981
 800db08:	461d      	mov	r5, r3
 800db0a:	e712      	b.n	800d932 <_svfprintf_r+0x7a>
 800db0c:	aa26      	add	r2, sp, #152	; 0x98
 800db0e:	4641      	mov	r1, r8
 800db10:	9803      	ldr	r0, [sp, #12]
 800db12:	f003 fadf 	bl	80110d4 <__ssprint_r>
 800db16:	2800      	cmp	r0, #0
 800db18:	f040 8166 	bne.w	800dde8 <_svfprintf_r+0x530>
 800db1c:	ac29      	add	r4, sp, #164	; 0xa4
 800db1e:	e71e      	b.n	800d95e <_svfprintf_r+0xa6>
 800db20:	461e      	mov	r6, r3
 800db22:	e72d      	b.n	800d980 <_svfprintf_r+0xc8>
 800db24:	4b46      	ldr	r3, [pc, #280]	; (800dc40 <_svfprintf_r+0x388>)
 800db26:	9318      	str	r3, [sp, #96]	; 0x60
 800db28:	f01a 0f20 	tst.w	sl, #32
 800db2c:	f000 84b3 	beq.w	800e496 <_svfprintf_r+0xbde>
 800db30:	3607      	adds	r6, #7
 800db32:	f026 0607 	bic.w	r6, r6, #7
 800db36:	f106 0308 	add.w	r3, r6, #8
 800db3a:	e9d6 6700 	ldrd	r6, r7, [r6]
 800db3e:	9308      	str	r3, [sp, #32]
 800db40:	f01a 0f01 	tst.w	sl, #1
 800db44:	d00a      	beq.n	800db5c <_svfprintf_r+0x2a4>
 800db46:	ea56 0307 	orrs.w	r3, r6, r7
 800db4a:	d007      	beq.n	800db5c <_svfprintf_r+0x2a4>
 800db4c:	2330      	movs	r3, #48	; 0x30
 800db4e:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 800db52:	9b06      	ldr	r3, [sp, #24]
 800db54:	f88d 307d 	strb.w	r3, [sp, #125]	; 0x7d
 800db58:	f04a 0a02 	orr.w	sl, sl, #2
 800db5c:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 800db60:	2302      	movs	r3, #2
 800db62:	e34d      	b.n	800e200 <_svfprintf_r+0x948>
 800db64:	9803      	ldr	r0, [sp, #12]
 800db66:	f002 fca5 	bl	80104b4 <_localeconv_r>
 800db6a:	6843      	ldr	r3, [r0, #4]
 800db6c:	9319      	str	r3, [sp, #100]	; 0x64
 800db6e:	4618      	mov	r0, r3
 800db70:	f7f2 fb38 	bl	80001e4 <strlen>
 800db74:	9012      	str	r0, [sp, #72]	; 0x48
 800db76:	9803      	ldr	r0, [sp, #12]
 800db78:	f002 fc9c 	bl	80104b4 <_localeconv_r>
 800db7c:	6883      	ldr	r3, [r0, #8]
 800db7e:	9309      	str	r3, [sp, #36]	; 0x24
 800db80:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800db82:	2b00      	cmp	r3, #0
 800db84:	f43f aefc 	beq.w	800d980 <_svfprintf_r+0xc8>
 800db88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	f43f aef8 	beq.w	800d980 <_svfprintf_r+0xc8>
 800db90:	781b      	ldrb	r3, [r3, #0]
 800db92:	2b00      	cmp	r3, #0
 800db94:	f43f aef4 	beq.w	800d980 <_svfprintf_r+0xc8>
 800db98:	f44a 6a80 	orr.w	sl, sl, #1024	; 0x400
 800db9c:	e6f0      	b.n	800d980 <_svfprintf_r+0xc8>
 800db9e:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	f47f aeec 	bne.w	800d980 <_svfprintf_r+0xc8>
 800dba8:	2320      	movs	r3, #32
 800dbaa:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 800dbae:	e6e7      	b.n	800d980 <_svfprintf_r+0xc8>
 800dbb0:	f04a 0a01 	orr.w	sl, sl, #1
 800dbb4:	e6e4      	b.n	800d980 <_svfprintf_r+0xc8>
 800dbb6:	6832      	ldr	r2, [r6, #0]
 800dbb8:	920f      	str	r2, [sp, #60]	; 0x3c
 800dbba:	2a00      	cmp	r2, #0
 800dbbc:	f106 0304 	add.w	r3, r6, #4
 800dbc0:	daae      	bge.n	800db20 <_svfprintf_r+0x268>
 800dbc2:	4252      	negs	r2, r2
 800dbc4:	920f      	str	r2, [sp, #60]	; 0x3c
 800dbc6:	461e      	mov	r6, r3
 800dbc8:	f04a 0a04 	orr.w	sl, sl, #4
 800dbcc:	e6d8      	b.n	800d980 <_svfprintf_r+0xc8>
 800dbce:	232b      	movs	r3, #43	; 0x2b
 800dbd0:	e7eb      	b.n	800dbaa <_svfprintf_r+0x2f2>
 800dbd2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800dbd4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dbd6:	7812      	ldrb	r2, [r2, #0]
 800dbd8:	9206      	str	r2, [sp, #24]
 800dbda:	2a2a      	cmp	r2, #42	; 0x2a
 800dbdc:	f103 0301 	add.w	r3, r3, #1
 800dbe0:	d10f      	bne.n	800dc02 <_svfprintf_r+0x34a>
 800dbe2:	6835      	ldr	r5, [r6, #0]
 800dbe4:	930c      	str	r3, [sp, #48]	; 0x30
 800dbe6:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
 800dbea:	3604      	adds	r6, #4
 800dbec:	e6c8      	b.n	800d980 <_svfprintf_r+0xc8>
 800dbee:	fb07 2505 	mla	r5, r7, r5, r2
 800dbf2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dbf6:	9206      	str	r2, [sp, #24]
 800dbf8:	9a06      	ldr	r2, [sp, #24]
 800dbfa:	3a30      	subs	r2, #48	; 0x30
 800dbfc:	2a09      	cmp	r2, #9
 800dbfe:	d9f6      	bls.n	800dbee <_svfprintf_r+0x336>
 800dc00:	e6c3      	b.n	800d98a <_svfprintf_r+0xd2>
 800dc02:	2500      	movs	r5, #0
 800dc04:	e7f8      	b.n	800dbf8 <_svfprintf_r+0x340>
 800dc06:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
 800dc0a:	e6b9      	b.n	800d980 <_svfprintf_r+0xc8>
 800dc0c:	2200      	movs	r2, #0
 800dc0e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dc10:	920f      	str	r2, [sp, #60]	; 0x3c
 800dc12:	9a06      	ldr	r2, [sp, #24]
 800dc14:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800dc16:	3a30      	subs	r2, #48	; 0x30
 800dc18:	fb07 2201 	mla	r2, r7, r1, r2
 800dc1c:	920f      	str	r2, [sp, #60]	; 0x3c
 800dc1e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dc22:	9206      	str	r2, [sp, #24]
 800dc24:	3a30      	subs	r2, #48	; 0x30
 800dc26:	2a09      	cmp	r2, #9
 800dc28:	d9f3      	bls.n	800dc12 <_svfprintf_r+0x35a>
 800dc2a:	e6ae      	b.n	800d98a <_svfprintf_r+0xd2>
 800dc2c:	f04a 0a08 	orr.w	sl, sl, #8
 800dc30:	e6a6      	b.n	800d980 <_svfprintf_r+0xc8>
 800dc32:	bf00      	nop
 800dc34:	f3af 8000 	nop.w
	...
 800dc40:	080119c9 	.word	0x080119c9
 800dc44:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dc46:	781b      	ldrb	r3, [r3, #0]
 800dc48:	2b68      	cmp	r3, #104	; 0x68
 800dc4a:	bf01      	itttt	eq
 800dc4c:	9b0c      	ldreq	r3, [sp, #48]	; 0x30
 800dc4e:	3301      	addeq	r3, #1
 800dc50:	930c      	streq	r3, [sp, #48]	; 0x30
 800dc52:	f44a 7a00 	orreq.w	sl, sl, #512	; 0x200
 800dc56:	bf18      	it	ne
 800dc58:	f04a 0a40 	orrne.w	sl, sl, #64	; 0x40
 800dc5c:	e690      	b.n	800d980 <_svfprintf_r+0xc8>
 800dc5e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dc60:	781b      	ldrb	r3, [r3, #0]
 800dc62:	2b6c      	cmp	r3, #108	; 0x6c
 800dc64:	d105      	bne.n	800dc72 <_svfprintf_r+0x3ba>
 800dc66:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dc68:	3301      	adds	r3, #1
 800dc6a:	930c      	str	r3, [sp, #48]	; 0x30
 800dc6c:	f04a 0a20 	orr.w	sl, sl, #32
 800dc70:	e686      	b.n	800d980 <_svfprintf_r+0xc8>
 800dc72:	f04a 0a10 	orr.w	sl, sl, #16
 800dc76:	e683      	b.n	800d980 <_svfprintf_r+0xc8>
 800dc78:	1d33      	adds	r3, r6, #4
 800dc7a:	9308      	str	r3, [sp, #32]
 800dc7c:	2000      	movs	r0, #0
 800dc7e:	6833      	ldr	r3, [r6, #0]
 800dc80:	f88d 30e4 	strb.w	r3, [sp, #228]	; 0xe4
 800dc84:	f88d 007b 	strb.w	r0, [sp, #123]	; 0x7b
 800dc88:	4681      	mov	r9, r0
 800dc8a:	2501      	movs	r5, #1
 800dc8c:	9010      	str	r0, [sp, #64]	; 0x40
 800dc8e:	4607      	mov	r7, r0
 800dc90:	9007      	str	r0, [sp, #28]
 800dc92:	4606      	mov	r6, r0
 800dc94:	f10d 0be4 	add.w	fp, sp, #228	; 0xe4
 800dc98:	e301      	b.n	800e29e <_svfprintf_r+0x9e6>
 800dc9a:	f04a 0a10 	orr.w	sl, sl, #16
 800dc9e:	f01a 0f20 	tst.w	sl, #32
 800dca2:	d021      	beq.n	800dce8 <_svfprintf_r+0x430>
 800dca4:	3607      	adds	r6, #7
 800dca6:	f026 0607 	bic.w	r6, r6, #7
 800dcaa:	f106 0308 	add.w	r3, r6, #8
 800dcae:	e9d6 6700 	ldrd	r6, r7, [r6]
 800dcb2:	9308      	str	r3, [sp, #32]
 800dcb4:	2e00      	cmp	r6, #0
 800dcb6:	f177 0300 	sbcs.w	r3, r7, #0
 800dcba:	da06      	bge.n	800dcca <_svfprintf_r+0x412>
 800dcbc:	4276      	negs	r6, r6
 800dcbe:	f04f 032d 	mov.w	r3, #45	; 0x2d
 800dcc2:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 800dcc6:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 800dcca:	1c6b      	adds	r3, r5, #1
 800dccc:	f040 83f6 	bne.w	800e4bc <_svfprintf_r+0xc04>
 800dcd0:	2f00      	cmp	r7, #0
 800dcd2:	bf08      	it	eq
 800dcd4:	2e0a      	cmpeq	r6, #10
 800dcd6:	f080 8427 	bcs.w	800e528 <_svfprintf_r+0xc70>
 800dcda:	f50d 7ba4 	add.w	fp, sp, #328	; 0x148
 800dcde:	3630      	adds	r6, #48	; 0x30
 800dce0:	f80b 6d01 	strb.w	r6, [fp, #-1]!
 800dce4:	f000 bc0d 	b.w	800e502 <_svfprintf_r+0xc4a>
 800dce8:	1d33      	adds	r3, r6, #4
 800dcea:	f01a 0f10 	tst.w	sl, #16
 800dcee:	9308      	str	r3, [sp, #32]
 800dcf0:	d002      	beq.n	800dcf8 <_svfprintf_r+0x440>
 800dcf2:	6836      	ldr	r6, [r6, #0]
 800dcf4:	17f7      	asrs	r7, r6, #31
 800dcf6:	e7dd      	b.n	800dcb4 <_svfprintf_r+0x3fc>
 800dcf8:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800dcfc:	6836      	ldr	r6, [r6, #0]
 800dcfe:	d001      	beq.n	800dd04 <_svfprintf_r+0x44c>
 800dd00:	b236      	sxth	r6, r6
 800dd02:	e7f7      	b.n	800dcf4 <_svfprintf_r+0x43c>
 800dd04:	f41a 7f00 	tst.w	sl, #512	; 0x200
 800dd08:	bf18      	it	ne
 800dd0a:	b276      	sxtbne	r6, r6
 800dd0c:	e7f2      	b.n	800dcf4 <_svfprintf_r+0x43c>
 800dd0e:	3607      	adds	r6, #7
 800dd10:	f026 0607 	bic.w	r6, r6, #7
 800dd14:	ed96 7b00 	vldr	d7, [r6]
 800dd18:	f106 0308 	add.w	r3, r6, #8
 800dd1c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800dd20:	9308      	str	r3, [sp, #32]
 800dd22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dd24:	931a      	str	r3, [sp, #104]	; 0x68
 800dd26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dd28:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800dd2c:	931b      	str	r3, [sp, #108]	; 0x6c
 800dd2e:	f04f 32ff 	mov.w	r2, #4294967295
 800dd32:	4bb2      	ldr	r3, [pc, #712]	; (800dffc <_svfprintf_r+0x744>)
 800dd34:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 800dd38:	f7f2 ff08 	bl	8000b4c <__aeabi_dcmpun>
 800dd3c:	bb00      	cbnz	r0, 800dd80 <_svfprintf_r+0x4c8>
 800dd3e:	f04f 32ff 	mov.w	r2, #4294967295
 800dd42:	4bae      	ldr	r3, [pc, #696]	; (800dffc <_svfprintf_r+0x744>)
 800dd44:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 800dd48:	f7f2 fee2 	bl	8000b10 <__aeabi_dcmple>
 800dd4c:	b9c0      	cbnz	r0, 800dd80 <_svfprintf_r+0x4c8>
 800dd4e:	2200      	movs	r2, #0
 800dd50:	2300      	movs	r3, #0
 800dd52:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800dd56:	f7f2 fed1 	bl	8000afc <__aeabi_dcmplt>
 800dd5a:	b110      	cbz	r0, 800dd62 <_svfprintf_r+0x4aa>
 800dd5c:	232d      	movs	r3, #45	; 0x2d
 800dd5e:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 800dd62:	4aa7      	ldr	r2, [pc, #668]	; (800e000 <_svfprintf_r+0x748>)
 800dd64:	4ba7      	ldr	r3, [pc, #668]	; (800e004 <_svfprintf_r+0x74c>)
 800dd66:	9906      	ldr	r1, [sp, #24]
 800dd68:	f02a 0a80 	bic.w	sl, sl, #128	; 0x80
 800dd6c:	2947      	cmp	r1, #71	; 0x47
 800dd6e:	bfcc      	ite	gt
 800dd70:	4693      	movgt	fp, r2
 800dd72:	469b      	movle	fp, r3
 800dd74:	f04f 0900 	mov.w	r9, #0
 800dd78:	2503      	movs	r5, #3
 800dd7a:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
 800dd7e:	e3c6      	b.n	800e50e <_svfprintf_r+0xc56>
 800dd80:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800dd84:	4610      	mov	r0, r2
 800dd86:	4619      	mov	r1, r3
 800dd88:	f7f2 fee0 	bl	8000b4c <__aeabi_dcmpun>
 800dd8c:	4681      	mov	r9, r0
 800dd8e:	b140      	cbz	r0, 800dda2 <_svfprintf_r+0x4ea>
 800dd90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dd92:	4a9d      	ldr	r2, [pc, #628]	; (800e008 <_svfprintf_r+0x750>)
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	bfbc      	itt	lt
 800dd98:	232d      	movlt	r3, #45	; 0x2d
 800dd9a:	f88d 307b 	strblt.w	r3, [sp, #123]	; 0x7b
 800dd9e:	4b9b      	ldr	r3, [pc, #620]	; (800e00c <_svfprintf_r+0x754>)
 800dda0:	e7e1      	b.n	800dd66 <_svfprintf_r+0x4ae>
 800dda2:	9b06      	ldr	r3, [sp, #24]
 800dda4:	f023 0320 	bic.w	r3, r3, #32
 800dda8:	2b41      	cmp	r3, #65	; 0x41
 800ddaa:	9307      	str	r3, [sp, #28]
 800ddac:	d125      	bne.n	800ddfa <_svfprintf_r+0x542>
 800ddae:	2330      	movs	r3, #48	; 0x30
 800ddb0:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 800ddb4:	9b06      	ldr	r3, [sp, #24]
 800ddb6:	2b61      	cmp	r3, #97	; 0x61
 800ddb8:	bf14      	ite	ne
 800ddba:	2358      	movne	r3, #88	; 0x58
 800ddbc:	2378      	moveq	r3, #120	; 0x78
 800ddbe:	2d63      	cmp	r5, #99	; 0x63
 800ddc0:	f88d 307d 	strb.w	r3, [sp, #125]	; 0x7d
 800ddc4:	f04a 0a02 	orr.w	sl, sl, #2
 800ddc8:	f340 8108 	ble.w	800dfdc <_svfprintf_r+0x724>
 800ddcc:	1c69      	adds	r1, r5, #1
 800ddce:	9803      	ldr	r0, [sp, #12]
 800ddd0:	f7fe fca6 	bl	800c720 <_malloc_r>
 800ddd4:	4683      	mov	fp, r0
 800ddd6:	2800      	cmp	r0, #0
 800ddd8:	f040 8103 	bne.w	800dfe2 <_svfprintf_r+0x72a>
 800dddc:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 800dde0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dde4:	f8a8 300c 	strh.w	r3, [r8, #12]
 800dde8:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 800ddec:	f013 0f40 	tst.w	r3, #64	; 0x40
 800ddf0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ddf2:	bf18      	it	ne
 800ddf4:	f04f 33ff 	movne.w	r3, #4294967295
 800ddf8:	e582      	b.n	800d900 <_svfprintf_r+0x48>
 800ddfa:	1c69      	adds	r1, r5, #1
 800ddfc:	f000 80f3 	beq.w	800dfe6 <_svfprintf_r+0x72e>
 800de00:	9b07      	ldr	r3, [sp, #28]
 800de02:	2b47      	cmp	r3, #71	; 0x47
 800de04:	d102      	bne.n	800de0c <_svfprintf_r+0x554>
 800de06:	2d00      	cmp	r5, #0
 800de08:	f000 80ef 	beq.w	800dfea <_svfprintf_r+0x732>
 800de0c:	f44a 7380 	orr.w	r3, sl, #256	; 0x100
 800de10:	9310      	str	r3, [sp, #64]	; 0x40
 800de12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800de14:	2b00      	cmp	r3, #0
 800de16:	f280 80eb 	bge.w	800dff0 <_svfprintf_r+0x738>
 800de1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800de1c:	9314      	str	r3, [sp, #80]	; 0x50
 800de1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800de20:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800de24:	9315      	str	r3, [sp, #84]	; 0x54
 800de26:	232d      	movs	r3, #45	; 0x2d
 800de28:	9313      	str	r3, [sp, #76]	; 0x4c
 800de2a:	9b07      	ldr	r3, [sp, #28]
 800de2c:	2b41      	cmp	r3, #65	; 0x41
 800de2e:	f040 8105 	bne.w	800e03c <_svfprintf_r+0x784>
 800de32:	a820      	add	r0, sp, #128	; 0x80
 800de34:	ed9d 0b14 	vldr	d0, [sp, #80]	; 0x50
 800de38:	f003 f904 	bl	8011044 <frexp>
 800de3c:	2200      	movs	r2, #0
 800de3e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800de42:	ec51 0b10 	vmov	r0, r1, d0
 800de46:	f7f2 fbe7 	bl	8000618 <__aeabi_dmul>
 800de4a:	2200      	movs	r2, #0
 800de4c:	2300      	movs	r3, #0
 800de4e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800de52:	f7f2 fe49 	bl	8000ae8 <__aeabi_dcmpeq>
 800de56:	b108      	cbz	r0, 800de5c <_svfprintf_r+0x5a4>
 800de58:	2301      	movs	r3, #1
 800de5a:	9320      	str	r3, [sp, #128]	; 0x80
 800de5c:	4f6c      	ldr	r7, [pc, #432]	; (800e010 <_svfprintf_r+0x758>)
 800de5e:	4b6d      	ldr	r3, [pc, #436]	; (800e014 <_svfprintf_r+0x75c>)
 800de60:	9a06      	ldr	r2, [sp, #24]
 800de62:	2a61      	cmp	r2, #97	; 0x61
 800de64:	bf08      	it	eq
 800de66:	461f      	moveq	r7, r3
 800de68:	9711      	str	r7, [sp, #68]	; 0x44
 800de6a:	465e      	mov	r6, fp
 800de6c:	1e6f      	subs	r7, r5, #1
 800de6e:	2200      	movs	r2, #0
 800de70:	4b69      	ldr	r3, [pc, #420]	; (800e018 <_svfprintf_r+0x760>)
 800de72:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800de76:	f7f2 fbcf 	bl	8000618 <__aeabi_dmul>
 800de7a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800de7e:	f7f2 fe7b 	bl	8000b78 <__aeabi_d2iz>
 800de82:	901c      	str	r0, [sp, #112]	; 0x70
 800de84:	f7f2 fb5e 	bl	8000544 <__aeabi_i2d>
 800de88:	4602      	mov	r2, r0
 800de8a:	460b      	mov	r3, r1
 800de8c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800de90:	f7f2 fa0a 	bl	80002a8 <__aeabi_dsub>
 800de94:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800de96:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800de98:	971d      	str	r7, [sp, #116]	; 0x74
 800de9a:	5c9b      	ldrb	r3, [r3, r2]
 800de9c:	f806 3b01 	strb.w	r3, [r6], #1
 800dea0:	1c7a      	adds	r2, r7, #1
 800dea2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800dea6:	d006      	beq.n	800deb6 <_svfprintf_r+0x5fe>
 800dea8:	2200      	movs	r2, #0
 800deaa:	2300      	movs	r3, #0
 800deac:	3f01      	subs	r7, #1
 800deae:	f7f2 fe1b 	bl	8000ae8 <__aeabi_dcmpeq>
 800deb2:	2800      	cmp	r0, #0
 800deb4:	d0db      	beq.n	800de6e <_svfprintf_r+0x5b6>
 800deb6:	2200      	movs	r2, #0
 800deb8:	4b58      	ldr	r3, [pc, #352]	; (800e01c <_svfprintf_r+0x764>)
 800deba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800debe:	f7f2 fe3b 	bl	8000b38 <__aeabi_dcmpgt>
 800dec2:	b960      	cbnz	r0, 800dede <_svfprintf_r+0x626>
 800dec4:	2200      	movs	r2, #0
 800dec6:	4b55      	ldr	r3, [pc, #340]	; (800e01c <_svfprintf_r+0x764>)
 800dec8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800decc:	f7f2 fe0c 	bl	8000ae8 <__aeabi_dcmpeq>
 800ded0:	2800      	cmp	r0, #0
 800ded2:	f000 80ae 	beq.w	800e032 <_svfprintf_r+0x77a>
 800ded6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800ded8:	07db      	lsls	r3, r3, #31
 800deda:	f140 80aa 	bpl.w	800e032 <_svfprintf_r+0x77a>
 800dede:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800dee0:	9624      	str	r6, [sp, #144]	; 0x90
 800dee2:	7bd9      	ldrb	r1, [r3, #15]
 800dee4:	2030      	movs	r0, #48	; 0x30
 800dee6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800dee8:	1e53      	subs	r3, r2, #1
 800deea:	9324      	str	r3, [sp, #144]	; 0x90
 800deec:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 800def0:	428b      	cmp	r3, r1
 800def2:	f000 8095 	beq.w	800e020 <_svfprintf_r+0x768>
 800def6:	2b39      	cmp	r3, #57	; 0x39
 800def8:	bf0b      	itete	eq
 800defa:	9b11      	ldreq	r3, [sp, #68]	; 0x44
 800defc:	3301      	addne	r3, #1
 800defe:	7a9b      	ldrbeq	r3, [r3, #10]
 800df00:	b2db      	uxtbne	r3, r3
 800df02:	f802 3c01 	strb.w	r3, [r2, #-1]
 800df06:	4633      	mov	r3, r6
 800df08:	eba3 030b 	sub.w	r3, r3, fp
 800df0c:	9304      	str	r3, [sp, #16]
 800df0e:	9b07      	ldr	r3, [sp, #28]
 800df10:	9e20      	ldr	r6, [sp, #128]	; 0x80
 800df12:	2b47      	cmp	r3, #71	; 0x47
 800df14:	f040 80d7 	bne.w	800e0c6 <_svfprintf_r+0x80e>
 800df18:	1cf7      	adds	r7, r6, #3
 800df1a:	db02      	blt.n	800df22 <_svfprintf_r+0x66a>
 800df1c:	42b5      	cmp	r5, r6
 800df1e:	f280 80fd 	bge.w	800e11c <_svfprintf_r+0x864>
 800df22:	9b06      	ldr	r3, [sp, #24]
 800df24:	3b02      	subs	r3, #2
 800df26:	9306      	str	r3, [sp, #24]
 800df28:	9906      	ldr	r1, [sp, #24]
 800df2a:	f89d 2018 	ldrb.w	r2, [sp, #24]
 800df2e:	f021 0120 	bic.w	r1, r1, #32
 800df32:	2941      	cmp	r1, #65	; 0x41
 800df34:	bf08      	it	eq
 800df36:	320f      	addeq	r2, #15
 800df38:	f106 33ff 	add.w	r3, r6, #4294967295
 800df3c:	bf06      	itte	eq
 800df3e:	b2d2      	uxtbeq	r2, r2
 800df40:	2101      	moveq	r1, #1
 800df42:	2100      	movne	r1, #0
 800df44:	2b00      	cmp	r3, #0
 800df46:	9320      	str	r3, [sp, #128]	; 0x80
 800df48:	bfb8      	it	lt
 800df4a:	f1c6 0301 	rsblt	r3, r6, #1
 800df4e:	f88d 2088 	strb.w	r2, [sp, #136]	; 0x88
 800df52:	bfb4      	ite	lt
 800df54:	222d      	movlt	r2, #45	; 0x2d
 800df56:	222b      	movge	r2, #43	; 0x2b
 800df58:	2b09      	cmp	r3, #9
 800df5a:	f88d 2089 	strb.w	r2, [sp, #137]	; 0x89
 800df5e:	f340 80c9 	ble.w	800e0f4 <_svfprintf_r+0x83c>
 800df62:	f10d 0297 	add.w	r2, sp, #151	; 0x97
 800df66:	250a      	movs	r5, #10
 800df68:	fb93 f0f5 	sdiv	r0, r3, r5
 800df6c:	fb05 3310 	mls	r3, r5, r0, r3
 800df70:	3330      	adds	r3, #48	; 0x30
 800df72:	2809      	cmp	r0, #9
 800df74:	f802 3c01 	strb.w	r3, [r2, #-1]
 800df78:	f102 31ff 	add.w	r1, r2, #4294967295
 800df7c:	4603      	mov	r3, r0
 800df7e:	f300 80b2 	bgt.w	800e0e6 <_svfprintf_r+0x82e>
 800df82:	3330      	adds	r3, #48	; 0x30
 800df84:	f801 3c01 	strb.w	r3, [r1, #-1]
 800df88:	3a02      	subs	r2, #2
 800df8a:	f10d 038a 	add.w	r3, sp, #138	; 0x8a
 800df8e:	f10d 0097 	add.w	r0, sp, #151	; 0x97
 800df92:	4282      	cmp	r2, r0
 800df94:	4619      	mov	r1, r3
 800df96:	f0c0 80a8 	bcc.w	800e0ea <_svfprintf_r+0x832>
 800df9a:	9a04      	ldr	r2, [sp, #16]
 800df9c:	ab22      	add	r3, sp, #136	; 0x88
 800df9e:	1acb      	subs	r3, r1, r3
 800dfa0:	2a01      	cmp	r2, #1
 800dfa2:	9317      	str	r3, [sp, #92]	; 0x5c
 800dfa4:	eb03 0502 	add.w	r5, r3, r2
 800dfa8:	dc02      	bgt.n	800dfb0 <_svfprintf_r+0x6f8>
 800dfaa:	f01a 0f01 	tst.w	sl, #1
 800dfae:	d001      	beq.n	800dfb4 <_svfprintf_r+0x6fc>
 800dfb0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dfb2:	441d      	add	r5, r3
 800dfb4:	f42a 6380 	bic.w	r3, sl, #1024	; 0x400
 800dfb8:	2700      	movs	r7, #0
 800dfba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800dfbe:	9310      	str	r3, [sp, #64]	; 0x40
 800dfc0:	9707      	str	r7, [sp, #28]
 800dfc2:	463e      	mov	r6, r7
 800dfc4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	f000 8315 	beq.w	800e5f6 <_svfprintf_r+0xd3e>
 800dfcc:	232d      	movs	r3, #45	; 0x2d
 800dfce:	f8dd a040 	ldr.w	sl, [sp, #64]	; 0x40
 800dfd2:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 800dfd6:	2300      	movs	r3, #0
 800dfd8:	9310      	str	r3, [sp, #64]	; 0x40
 800dfda:	e160      	b.n	800e29e <_svfprintf_r+0x9e6>
 800dfdc:	f10d 0be4 	add.w	fp, sp, #228	; 0xe4
 800dfe0:	e714      	b.n	800de0c <_svfprintf_r+0x554>
 800dfe2:	4681      	mov	r9, r0
 800dfe4:	e712      	b.n	800de0c <_svfprintf_r+0x554>
 800dfe6:	2506      	movs	r5, #6
 800dfe8:	e710      	b.n	800de0c <_svfprintf_r+0x554>
 800dfea:	46a9      	mov	r9, r5
 800dfec:	2501      	movs	r5, #1
 800dfee:	e70d      	b.n	800de0c <_svfprintf_r+0x554>
 800dff0:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 800dff4:	2300      	movs	r3, #0
 800dff6:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 800dffa:	e715      	b.n	800de28 <_svfprintf_r+0x570>
 800dffc:	7fefffff 	.word	0x7fefffff
 800e000:	080119ac 	.word	0x080119ac
 800e004:	080119a8 	.word	0x080119a8
 800e008:	080119b4 	.word	0x080119b4
 800e00c:	080119b0 	.word	0x080119b0
 800e010:	080119c9 	.word	0x080119c9
 800e014:	080119b8 	.word	0x080119b8
 800e018:	40300000 	.word	0x40300000
 800e01c:	3fe00000 	.word	0x3fe00000
 800e020:	f802 0c01 	strb.w	r0, [r2, #-1]
 800e024:	e75f      	b.n	800dee6 <_svfprintf_r+0x62e>
 800e026:	f803 1b01 	strb.w	r1, [r3], #1
 800e02a:	1af2      	subs	r2, r6, r3
 800e02c:	2a00      	cmp	r2, #0
 800e02e:	dafa      	bge.n	800e026 <_svfprintf_r+0x76e>
 800e030:	e76a      	b.n	800df08 <_svfprintf_r+0x650>
 800e032:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800e034:	4633      	mov	r3, r6
 800e036:	2130      	movs	r1, #48	; 0x30
 800e038:	4416      	add	r6, r2
 800e03a:	e7f6      	b.n	800e02a <_svfprintf_r+0x772>
 800e03c:	9b07      	ldr	r3, [sp, #28]
 800e03e:	2b46      	cmp	r3, #70	; 0x46
 800e040:	d004      	beq.n	800e04c <_svfprintf_r+0x794>
 800e042:	2b45      	cmp	r3, #69	; 0x45
 800e044:	d13a      	bne.n	800e0bc <_svfprintf_r+0x804>
 800e046:	1c6e      	adds	r6, r5, #1
 800e048:	2102      	movs	r1, #2
 800e04a:	e001      	b.n	800e050 <_svfprintf_r+0x798>
 800e04c:	462e      	mov	r6, r5
 800e04e:	2103      	movs	r1, #3
 800e050:	ab24      	add	r3, sp, #144	; 0x90
 800e052:	9301      	str	r3, [sp, #4]
 800e054:	ab21      	add	r3, sp, #132	; 0x84
 800e056:	9300      	str	r3, [sp, #0]
 800e058:	4632      	mov	r2, r6
 800e05a:	ab20      	add	r3, sp, #128	; 0x80
 800e05c:	ed9d 0b14 	vldr	d0, [sp, #80]	; 0x50
 800e060:	9803      	ldr	r0, [sp, #12]
 800e062:	f000 fef5 	bl	800ee50 <_dtoa_r>
 800e066:	9b07      	ldr	r3, [sp, #28]
 800e068:	2b47      	cmp	r3, #71	; 0x47
 800e06a:	4683      	mov	fp, r0
 800e06c:	d102      	bne.n	800e074 <_svfprintf_r+0x7bc>
 800e06e:	f01a 0f01 	tst.w	sl, #1
 800e072:	d026      	beq.n	800e0c2 <_svfprintf_r+0x80a>
 800e074:	9b07      	ldr	r3, [sp, #28]
 800e076:	2b46      	cmp	r3, #70	; 0x46
 800e078:	eb0b 0706 	add.w	r7, fp, r6
 800e07c:	d10f      	bne.n	800e09e <_svfprintf_r+0x7e6>
 800e07e:	f89b 3000 	ldrb.w	r3, [fp]
 800e082:	2b30      	cmp	r3, #48	; 0x30
 800e084:	d109      	bne.n	800e09a <_svfprintf_r+0x7e2>
 800e086:	2200      	movs	r2, #0
 800e088:	2300      	movs	r3, #0
 800e08a:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 800e08e:	f7f2 fd2b 	bl	8000ae8 <__aeabi_dcmpeq>
 800e092:	b910      	cbnz	r0, 800e09a <_svfprintf_r+0x7e2>
 800e094:	f1c6 0601 	rsb	r6, r6, #1
 800e098:	9620      	str	r6, [sp, #128]	; 0x80
 800e09a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800e09c:	441f      	add	r7, r3
 800e09e:	2200      	movs	r2, #0
 800e0a0:	2300      	movs	r3, #0
 800e0a2:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 800e0a6:	f7f2 fd1f 	bl	8000ae8 <__aeabi_dcmpeq>
 800e0aa:	b948      	cbnz	r0, 800e0c0 <_svfprintf_r+0x808>
 800e0ac:	2230      	movs	r2, #48	; 0x30
 800e0ae:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800e0b0:	429f      	cmp	r7, r3
 800e0b2:	d906      	bls.n	800e0c2 <_svfprintf_r+0x80a>
 800e0b4:	1c59      	adds	r1, r3, #1
 800e0b6:	9124      	str	r1, [sp, #144]	; 0x90
 800e0b8:	701a      	strb	r2, [r3, #0]
 800e0ba:	e7f8      	b.n	800e0ae <_svfprintf_r+0x7f6>
 800e0bc:	462e      	mov	r6, r5
 800e0be:	e7c3      	b.n	800e048 <_svfprintf_r+0x790>
 800e0c0:	9724      	str	r7, [sp, #144]	; 0x90
 800e0c2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800e0c4:	e720      	b.n	800df08 <_svfprintf_r+0x650>
 800e0c6:	9b07      	ldr	r3, [sp, #28]
 800e0c8:	2b46      	cmp	r3, #70	; 0x46
 800e0ca:	f47f af2d 	bne.w	800df28 <_svfprintf_r+0x670>
 800e0ce:	2e00      	cmp	r6, #0
 800e0d0:	dd1d      	ble.n	800e10e <_svfprintf_r+0x856>
 800e0d2:	b915      	cbnz	r5, 800e0da <_svfprintf_r+0x822>
 800e0d4:	f01a 0f01 	tst.w	sl, #1
 800e0d8:	d034      	beq.n	800e144 <_svfprintf_r+0x88c>
 800e0da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e0dc:	18f3      	adds	r3, r6, r3
 800e0de:	441d      	add	r5, r3
 800e0e0:	2366      	movs	r3, #102	; 0x66
 800e0e2:	9306      	str	r3, [sp, #24]
 800e0e4:	e033      	b.n	800e14e <_svfprintf_r+0x896>
 800e0e6:	460a      	mov	r2, r1
 800e0e8:	e73e      	b.n	800df68 <_svfprintf_r+0x6b0>
 800e0ea:	f812 1b01 	ldrb.w	r1, [r2], #1
 800e0ee:	f803 1b01 	strb.w	r1, [r3], #1
 800e0f2:	e74e      	b.n	800df92 <_svfprintf_r+0x6da>
 800e0f4:	b941      	cbnz	r1, 800e108 <_svfprintf_r+0x850>
 800e0f6:	2230      	movs	r2, #48	; 0x30
 800e0f8:	f88d 208a 	strb.w	r2, [sp, #138]	; 0x8a
 800e0fc:	f10d 028b 	add.w	r2, sp, #139	; 0x8b
 800e100:	3330      	adds	r3, #48	; 0x30
 800e102:	1c51      	adds	r1, r2, #1
 800e104:	7013      	strb	r3, [r2, #0]
 800e106:	e748      	b.n	800df9a <_svfprintf_r+0x6e2>
 800e108:	f10d 028a 	add.w	r2, sp, #138	; 0x8a
 800e10c:	e7f8      	b.n	800e100 <_svfprintf_r+0x848>
 800e10e:	b915      	cbnz	r5, 800e116 <_svfprintf_r+0x85e>
 800e110:	f01a 0f01 	tst.w	sl, #1
 800e114:	d018      	beq.n	800e148 <_svfprintf_r+0x890>
 800e116:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e118:	3301      	adds	r3, #1
 800e11a:	e7e0      	b.n	800e0de <_svfprintf_r+0x826>
 800e11c:	9b04      	ldr	r3, [sp, #16]
 800e11e:	42b3      	cmp	r3, r6
 800e120:	dc06      	bgt.n	800e130 <_svfprintf_r+0x878>
 800e122:	f01a 0f01 	tst.w	sl, #1
 800e126:	d025      	beq.n	800e174 <_svfprintf_r+0x8bc>
 800e128:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e12a:	18f5      	adds	r5, r6, r3
 800e12c:	2367      	movs	r3, #103	; 0x67
 800e12e:	e7d8      	b.n	800e0e2 <_svfprintf_r+0x82a>
 800e130:	9b04      	ldr	r3, [sp, #16]
 800e132:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e134:	2e00      	cmp	r6, #0
 800e136:	eb03 0502 	add.w	r5, r3, r2
 800e13a:	dcf7      	bgt.n	800e12c <_svfprintf_r+0x874>
 800e13c:	f1c6 0301 	rsb	r3, r6, #1
 800e140:	441d      	add	r5, r3
 800e142:	e7f3      	b.n	800e12c <_svfprintf_r+0x874>
 800e144:	4635      	mov	r5, r6
 800e146:	e7cb      	b.n	800e0e0 <_svfprintf_r+0x828>
 800e148:	2366      	movs	r3, #102	; 0x66
 800e14a:	9306      	str	r3, [sp, #24]
 800e14c:	2501      	movs	r5, #1
 800e14e:	f41a 6380 	ands.w	r3, sl, #1024	; 0x400
 800e152:	9307      	str	r3, [sp, #28]
 800e154:	d01f      	beq.n	800e196 <_svfprintf_r+0x8de>
 800e156:	2700      	movs	r7, #0
 800e158:	2e00      	cmp	r6, #0
 800e15a:	9707      	str	r7, [sp, #28]
 800e15c:	f77f af32 	ble.w	800dfc4 <_svfprintf_r+0x70c>
 800e160:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e162:	781b      	ldrb	r3, [r3, #0]
 800e164:	2bff      	cmp	r3, #255	; 0xff
 800e166:	d107      	bne.n	800e178 <_svfprintf_r+0x8c0>
 800e168:	9b07      	ldr	r3, [sp, #28]
 800e16a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e16c:	443b      	add	r3, r7
 800e16e:	fb02 5503 	mla	r5, r2, r3, r5
 800e172:	e727      	b.n	800dfc4 <_svfprintf_r+0x70c>
 800e174:	4635      	mov	r5, r6
 800e176:	e7d9      	b.n	800e12c <_svfprintf_r+0x874>
 800e178:	42b3      	cmp	r3, r6
 800e17a:	daf5      	bge.n	800e168 <_svfprintf_r+0x8b0>
 800e17c:	1af6      	subs	r6, r6, r3
 800e17e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e180:	785b      	ldrb	r3, [r3, #1]
 800e182:	b133      	cbz	r3, 800e192 <_svfprintf_r+0x8da>
 800e184:	9b07      	ldr	r3, [sp, #28]
 800e186:	3301      	adds	r3, #1
 800e188:	9307      	str	r3, [sp, #28]
 800e18a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e18c:	3301      	adds	r3, #1
 800e18e:	9309      	str	r3, [sp, #36]	; 0x24
 800e190:	e7e6      	b.n	800e160 <_svfprintf_r+0x8a8>
 800e192:	3701      	adds	r7, #1
 800e194:	e7e4      	b.n	800e160 <_svfprintf_r+0x8a8>
 800e196:	9f07      	ldr	r7, [sp, #28]
 800e198:	e714      	b.n	800dfc4 <_svfprintf_r+0x70c>
 800e19a:	4632      	mov	r2, r6
 800e19c:	f01a 0f20 	tst.w	sl, #32
 800e1a0:	f852 3b04 	ldr.w	r3, [r2], #4
 800e1a4:	9208      	str	r2, [sp, #32]
 800e1a6:	d009      	beq.n	800e1bc <_svfprintf_r+0x904>
 800e1a8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e1aa:	4610      	mov	r0, r2
 800e1ac:	17d1      	asrs	r1, r2, #31
 800e1ae:	e9c3 0100 	strd	r0, r1, [r3]
 800e1b2:	9e08      	ldr	r6, [sp, #32]
 800e1b4:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
 800e1b8:	f7ff bbba 	b.w	800d930 <_svfprintf_r+0x78>
 800e1bc:	f01a 0f10 	tst.w	sl, #16
 800e1c0:	d002      	beq.n	800e1c8 <_svfprintf_r+0x910>
 800e1c2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e1c4:	601a      	str	r2, [r3, #0]
 800e1c6:	e7f4      	b.n	800e1b2 <_svfprintf_r+0x8fa>
 800e1c8:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800e1cc:	d002      	beq.n	800e1d4 <_svfprintf_r+0x91c>
 800e1ce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e1d0:	801a      	strh	r2, [r3, #0]
 800e1d2:	e7ee      	b.n	800e1b2 <_svfprintf_r+0x8fa>
 800e1d4:	f41a 7f00 	tst.w	sl, #512	; 0x200
 800e1d8:	d0f3      	beq.n	800e1c2 <_svfprintf_r+0x90a>
 800e1da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e1dc:	701a      	strb	r2, [r3, #0]
 800e1de:	e7e8      	b.n	800e1b2 <_svfprintf_r+0x8fa>
 800e1e0:	f04a 0a10 	orr.w	sl, sl, #16
 800e1e4:	f01a 0f20 	tst.w	sl, #32
 800e1e8:	d01e      	beq.n	800e228 <_svfprintf_r+0x970>
 800e1ea:	3607      	adds	r6, #7
 800e1ec:	f026 0607 	bic.w	r6, r6, #7
 800e1f0:	f106 0308 	add.w	r3, r6, #8
 800e1f4:	e9d6 6700 	ldrd	r6, r7, [r6]
 800e1f8:	9308      	str	r3, [sp, #32]
 800e1fa:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 800e1fe:	2300      	movs	r3, #0
 800e200:	2200      	movs	r2, #0
 800e202:	1c69      	adds	r1, r5, #1
 800e204:	f88d 207b 	strb.w	r2, [sp, #123]	; 0x7b
 800e208:	f000 815b 	beq.w	800e4c2 <_svfprintf_r+0xc0a>
 800e20c:	4652      	mov	r2, sl
 800e20e:	ea56 0107 	orrs.w	r1, r6, r7
 800e212:	f02a 0a80 	bic.w	sl, sl, #128	; 0x80
 800e216:	f040 8154 	bne.w	800e4c2 <_svfprintf_r+0xc0a>
 800e21a:	2d00      	cmp	r5, #0
 800e21c:	f000 81d5 	beq.w	800e5ca <_svfprintf_r+0xd12>
 800e220:	2b01      	cmp	r3, #1
 800e222:	f040 8151 	bne.w	800e4c8 <_svfprintf_r+0xc10>
 800e226:	e558      	b.n	800dcda <_svfprintf_r+0x422>
 800e228:	1d33      	adds	r3, r6, #4
 800e22a:	f01a 0f10 	tst.w	sl, #16
 800e22e:	9308      	str	r3, [sp, #32]
 800e230:	d001      	beq.n	800e236 <_svfprintf_r+0x97e>
 800e232:	6836      	ldr	r6, [r6, #0]
 800e234:	e003      	b.n	800e23e <_svfprintf_r+0x986>
 800e236:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800e23a:	d002      	beq.n	800e242 <_svfprintf_r+0x98a>
 800e23c:	8836      	ldrh	r6, [r6, #0]
 800e23e:	2700      	movs	r7, #0
 800e240:	e7db      	b.n	800e1fa <_svfprintf_r+0x942>
 800e242:	f41a 7f00 	tst.w	sl, #512	; 0x200
 800e246:	d0f4      	beq.n	800e232 <_svfprintf_r+0x97a>
 800e248:	7836      	ldrb	r6, [r6, #0]
 800e24a:	e7f8      	b.n	800e23e <_svfprintf_r+0x986>
 800e24c:	1d33      	adds	r3, r6, #4
 800e24e:	9308      	str	r3, [sp, #32]
 800e250:	f647 0330 	movw	r3, #30768	; 0x7830
 800e254:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
 800e258:	2278      	movs	r2, #120	; 0x78
 800e25a:	4bb0      	ldr	r3, [pc, #704]	; (800e51c <_svfprintf_r+0xc64>)
 800e25c:	9318      	str	r3, [sp, #96]	; 0x60
 800e25e:	6836      	ldr	r6, [r6, #0]
 800e260:	9206      	str	r2, [sp, #24]
 800e262:	2700      	movs	r7, #0
 800e264:	f04a 0a02 	orr.w	sl, sl, #2
 800e268:	2302      	movs	r3, #2
 800e26a:	e7c9      	b.n	800e200 <_svfprintf_r+0x948>
 800e26c:	1d33      	adds	r3, r6, #4
 800e26e:	f8d6 b000 	ldr.w	fp, [r6]
 800e272:	9308      	str	r3, [sp, #32]
 800e274:	2600      	movs	r6, #0
 800e276:	1c68      	adds	r0, r5, #1
 800e278:	f88d 607b 	strb.w	r6, [sp, #123]	; 0x7b
 800e27c:	f000 80e1 	beq.w	800e442 <_svfprintf_r+0xb8a>
 800e280:	462a      	mov	r2, r5
 800e282:	4631      	mov	r1, r6
 800e284:	4658      	mov	r0, fp
 800e286:	f7f1 ffbb 	bl	8000200 <memchr>
 800e28a:	4681      	mov	r9, r0
 800e28c:	2800      	cmp	r0, #0
 800e28e:	f43f ad74 	beq.w	800dd7a <_svfprintf_r+0x4c2>
 800e292:	eba0 050b 	sub.w	r5, r0, fp
 800e296:	46b1      	mov	r9, r6
 800e298:	9610      	str	r6, [sp, #64]	; 0x40
 800e29a:	4637      	mov	r7, r6
 800e29c:	9607      	str	r6, [sp, #28]
 800e29e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e2a0:	42ab      	cmp	r3, r5
 800e2a2:	bfb8      	it	lt
 800e2a4:	462b      	movlt	r3, r5
 800e2a6:	9311      	str	r3, [sp, #68]	; 0x44
 800e2a8:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 800e2ac:	b113      	cbz	r3, 800e2b4 <_svfprintf_r+0x9fc>
 800e2ae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e2b0:	3301      	adds	r3, #1
 800e2b2:	9311      	str	r3, [sp, #68]	; 0x44
 800e2b4:	f01a 0302 	ands.w	r3, sl, #2
 800e2b8:	931c      	str	r3, [sp, #112]	; 0x70
 800e2ba:	bf1e      	ittt	ne
 800e2bc:	9b11      	ldrne	r3, [sp, #68]	; 0x44
 800e2be:	3302      	addne	r3, #2
 800e2c0:	9311      	strne	r3, [sp, #68]	; 0x44
 800e2c2:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
 800e2c6:	931d      	str	r3, [sp, #116]	; 0x74
 800e2c8:	d122      	bne.n	800e310 <_svfprintf_r+0xa58>
 800e2ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e2cc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e2ce:	1a9b      	subs	r3, r3, r2
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	9313      	str	r3, [sp, #76]	; 0x4c
 800e2d4:	dd1c      	ble.n	800e310 <_svfprintf_r+0xa58>
 800e2d6:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800e2d8:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	; 0x9c
 800e2dc:	2810      	cmp	r0, #16
 800e2de:	4890      	ldr	r0, [pc, #576]	; (800e520 <_svfprintf_r+0xc68>)
 800e2e0:	6020      	str	r0, [r4, #0]
 800e2e2:	f102 0201 	add.w	r2, r2, #1
 800e2e6:	f104 0108 	add.w	r1, r4, #8
 800e2ea:	f300 8188 	bgt.w	800e5fe <_svfprintf_r+0xd46>
 800e2ee:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800e2f0:	6060      	str	r0, [r4, #4]
 800e2f2:	4403      	add	r3, r0
 800e2f4:	2a07      	cmp	r2, #7
 800e2f6:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 800e2fa:	f340 8195 	ble.w	800e628 <_svfprintf_r+0xd70>
 800e2fe:	aa26      	add	r2, sp, #152	; 0x98
 800e300:	4641      	mov	r1, r8
 800e302:	9803      	ldr	r0, [sp, #12]
 800e304:	f002 fee6 	bl	80110d4 <__ssprint_r>
 800e308:	2800      	cmp	r0, #0
 800e30a:	f040 84c1 	bne.w	800ec90 <_svfprintf_r+0x13d8>
 800e30e:	ac29      	add	r4, sp, #164	; 0xa4
 800e310:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 800e314:	b173      	cbz	r3, 800e334 <_svfprintf_r+0xa7c>
 800e316:	f10d 037b 	add.w	r3, sp, #123	; 0x7b
 800e31a:	6023      	str	r3, [r4, #0]
 800e31c:	2301      	movs	r3, #1
 800e31e:	6063      	str	r3, [r4, #4]
 800e320:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800e322:	3301      	adds	r3, #1
 800e324:	9328      	str	r3, [sp, #160]	; 0xa0
 800e326:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800e328:	3301      	adds	r3, #1
 800e32a:	2b07      	cmp	r3, #7
 800e32c:	9327      	str	r3, [sp, #156]	; 0x9c
 800e32e:	f300 817d 	bgt.w	800e62c <_svfprintf_r+0xd74>
 800e332:	3408      	adds	r4, #8
 800e334:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800e336:	b16b      	cbz	r3, 800e354 <_svfprintf_r+0xa9c>
 800e338:	ab1f      	add	r3, sp, #124	; 0x7c
 800e33a:	6023      	str	r3, [r4, #0]
 800e33c:	2302      	movs	r3, #2
 800e33e:	6063      	str	r3, [r4, #4]
 800e340:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800e342:	3302      	adds	r3, #2
 800e344:	9328      	str	r3, [sp, #160]	; 0xa0
 800e346:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800e348:	3301      	adds	r3, #1
 800e34a:	2b07      	cmp	r3, #7
 800e34c:	9327      	str	r3, [sp, #156]	; 0x9c
 800e34e:	f300 8177 	bgt.w	800e640 <_svfprintf_r+0xd88>
 800e352:	3408      	adds	r4, #8
 800e354:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e356:	2b80      	cmp	r3, #128	; 0x80
 800e358:	d122      	bne.n	800e3a0 <_svfprintf_r+0xae8>
 800e35a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e35c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e35e:	1a9b      	subs	r3, r3, r2
 800e360:	2b00      	cmp	r3, #0
 800e362:	9313      	str	r3, [sp, #76]	; 0x4c
 800e364:	dd1c      	ble.n	800e3a0 <_svfprintf_r+0xae8>
 800e366:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800e368:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	; 0x9c
 800e36c:	2810      	cmp	r0, #16
 800e36e:	486d      	ldr	r0, [pc, #436]	; (800e524 <_svfprintf_r+0xc6c>)
 800e370:	6020      	str	r0, [r4, #0]
 800e372:	f102 0201 	add.w	r2, r2, #1
 800e376:	f104 0108 	add.w	r1, r4, #8
 800e37a:	f300 816b 	bgt.w	800e654 <_svfprintf_r+0xd9c>
 800e37e:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800e380:	6060      	str	r0, [r4, #4]
 800e382:	4403      	add	r3, r0
 800e384:	2a07      	cmp	r2, #7
 800e386:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 800e38a:	f340 8178 	ble.w	800e67e <_svfprintf_r+0xdc6>
 800e38e:	aa26      	add	r2, sp, #152	; 0x98
 800e390:	4641      	mov	r1, r8
 800e392:	9803      	ldr	r0, [sp, #12]
 800e394:	f002 fe9e 	bl	80110d4 <__ssprint_r>
 800e398:	2800      	cmp	r0, #0
 800e39a:	f040 8479 	bne.w	800ec90 <_svfprintf_r+0x13d8>
 800e39e:	ac29      	add	r4, sp, #164	; 0xa4
 800e3a0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e3a2:	1b5b      	subs	r3, r3, r5
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	9310      	str	r3, [sp, #64]	; 0x40
 800e3a8:	dd1c      	ble.n	800e3e4 <_svfprintf_r+0xb2c>
 800e3aa:	9810      	ldr	r0, [sp, #64]	; 0x40
 800e3ac:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	; 0x9c
 800e3b0:	2810      	cmp	r0, #16
 800e3b2:	485c      	ldr	r0, [pc, #368]	; (800e524 <_svfprintf_r+0xc6c>)
 800e3b4:	6020      	str	r0, [r4, #0]
 800e3b6:	f102 0201 	add.w	r2, r2, #1
 800e3ba:	f104 0108 	add.w	r1, r4, #8
 800e3be:	f300 8160 	bgt.w	800e682 <_svfprintf_r+0xdca>
 800e3c2:	9810      	ldr	r0, [sp, #64]	; 0x40
 800e3c4:	6060      	str	r0, [r4, #4]
 800e3c6:	4403      	add	r3, r0
 800e3c8:	2a07      	cmp	r2, #7
 800e3ca:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 800e3ce:	f340 816d 	ble.w	800e6ac <_svfprintf_r+0xdf4>
 800e3d2:	aa26      	add	r2, sp, #152	; 0x98
 800e3d4:	4641      	mov	r1, r8
 800e3d6:	9803      	ldr	r0, [sp, #12]
 800e3d8:	f002 fe7c 	bl	80110d4 <__ssprint_r>
 800e3dc:	2800      	cmp	r0, #0
 800e3de:	f040 8457 	bne.w	800ec90 <_svfprintf_r+0x13d8>
 800e3e2:	ac29      	add	r4, sp, #164	; 0xa4
 800e3e4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800e3e6:	9310      	str	r3, [sp, #64]	; 0x40
 800e3e8:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800e3ec:	f040 8160 	bne.w	800e6b0 <_svfprintf_r+0xdf8>
 800e3f0:	e9c4 b500 	strd	fp, r5, [r4]
 800e3f4:	441d      	add	r5, r3
 800e3f6:	9528      	str	r5, [sp, #160]	; 0xa0
 800e3f8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800e3fa:	3301      	adds	r3, #1
 800e3fc:	2b07      	cmp	r3, #7
 800e3fe:	9327      	str	r3, [sp, #156]	; 0x9c
 800e400:	f300 819c 	bgt.w	800e73c <_svfprintf_r+0xe84>
 800e404:	3408      	adds	r4, #8
 800e406:	f01a 0f04 	tst.w	sl, #4
 800e40a:	f040 8423 	bne.w	800ec54 <_svfprintf_r+0x139c>
 800e40e:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 800e412:	9911      	ldr	r1, [sp, #68]	; 0x44
 800e414:	428a      	cmp	r2, r1
 800e416:	bfac      	ite	ge
 800e418:	189b      	addge	r3, r3, r2
 800e41a:	185b      	addlt	r3, r3, r1
 800e41c:	930e      	str	r3, [sp, #56]	; 0x38
 800e41e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800e420:	b13b      	cbz	r3, 800e432 <_svfprintf_r+0xb7a>
 800e422:	aa26      	add	r2, sp, #152	; 0x98
 800e424:	4641      	mov	r1, r8
 800e426:	9803      	ldr	r0, [sp, #12]
 800e428:	f002 fe54 	bl	80110d4 <__ssprint_r>
 800e42c:	2800      	cmp	r0, #0
 800e42e:	f040 842f 	bne.w	800ec90 <_svfprintf_r+0x13d8>
 800e432:	2300      	movs	r3, #0
 800e434:	9327      	str	r3, [sp, #156]	; 0x9c
 800e436:	f1b9 0f00 	cmp.w	r9, #0
 800e43a:	f040 8445 	bne.w	800ecc8 <_svfprintf_r+0x1410>
 800e43e:	ac29      	add	r4, sp, #164	; 0xa4
 800e440:	e6b7      	b.n	800e1b2 <_svfprintf_r+0x8fa>
 800e442:	4658      	mov	r0, fp
 800e444:	f7f1 fece 	bl	80001e4 <strlen>
 800e448:	46b1      	mov	r9, r6
 800e44a:	4605      	mov	r5, r0
 800e44c:	e495      	b.n	800dd7a <_svfprintf_r+0x4c2>
 800e44e:	f04a 0a10 	orr.w	sl, sl, #16
 800e452:	f01a 0f20 	tst.w	sl, #32
 800e456:	d009      	beq.n	800e46c <_svfprintf_r+0xbb4>
 800e458:	3607      	adds	r6, #7
 800e45a:	f026 0607 	bic.w	r6, r6, #7
 800e45e:	f106 0308 	add.w	r3, r6, #8
 800e462:	e9d6 6700 	ldrd	r6, r7, [r6]
 800e466:	9308      	str	r3, [sp, #32]
 800e468:	2301      	movs	r3, #1
 800e46a:	e6c9      	b.n	800e200 <_svfprintf_r+0x948>
 800e46c:	1d33      	adds	r3, r6, #4
 800e46e:	f01a 0f10 	tst.w	sl, #16
 800e472:	9308      	str	r3, [sp, #32]
 800e474:	d001      	beq.n	800e47a <_svfprintf_r+0xbc2>
 800e476:	6836      	ldr	r6, [r6, #0]
 800e478:	e003      	b.n	800e482 <_svfprintf_r+0xbca>
 800e47a:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800e47e:	d002      	beq.n	800e486 <_svfprintf_r+0xbce>
 800e480:	8836      	ldrh	r6, [r6, #0]
 800e482:	2700      	movs	r7, #0
 800e484:	e7f0      	b.n	800e468 <_svfprintf_r+0xbb0>
 800e486:	f41a 7f00 	tst.w	sl, #512	; 0x200
 800e48a:	d0f4      	beq.n	800e476 <_svfprintf_r+0xbbe>
 800e48c:	7836      	ldrb	r6, [r6, #0]
 800e48e:	e7f8      	b.n	800e482 <_svfprintf_r+0xbca>
 800e490:	4b22      	ldr	r3, [pc, #136]	; (800e51c <_svfprintf_r+0xc64>)
 800e492:	f7ff bb48 	b.w	800db26 <_svfprintf_r+0x26e>
 800e496:	1d33      	adds	r3, r6, #4
 800e498:	f01a 0f10 	tst.w	sl, #16
 800e49c:	9308      	str	r3, [sp, #32]
 800e49e:	d001      	beq.n	800e4a4 <_svfprintf_r+0xbec>
 800e4a0:	6836      	ldr	r6, [r6, #0]
 800e4a2:	e003      	b.n	800e4ac <_svfprintf_r+0xbf4>
 800e4a4:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800e4a8:	d003      	beq.n	800e4b2 <_svfprintf_r+0xbfa>
 800e4aa:	8836      	ldrh	r6, [r6, #0]
 800e4ac:	2700      	movs	r7, #0
 800e4ae:	f7ff bb47 	b.w	800db40 <_svfprintf_r+0x288>
 800e4b2:	f41a 7f00 	tst.w	sl, #512	; 0x200
 800e4b6:	d0f3      	beq.n	800e4a0 <_svfprintf_r+0xbe8>
 800e4b8:	7836      	ldrb	r6, [r6, #0]
 800e4ba:	e7f7      	b.n	800e4ac <_svfprintf_r+0xbf4>
 800e4bc:	4652      	mov	r2, sl
 800e4be:	2301      	movs	r3, #1
 800e4c0:	e6a5      	b.n	800e20e <_svfprintf_r+0x956>
 800e4c2:	2b01      	cmp	r3, #1
 800e4c4:	f43f ac04 	beq.w	800dcd0 <_svfprintf_r+0x418>
 800e4c8:	2b02      	cmp	r3, #2
 800e4ca:	d06c      	beq.n	800e5a6 <_svfprintf_r+0xcee>
 800e4cc:	ab52      	add	r3, sp, #328	; 0x148
 800e4ce:	08f1      	lsrs	r1, r6, #3
 800e4d0:	ea41 7147 	orr.w	r1, r1, r7, lsl #29
 800e4d4:	08f8      	lsrs	r0, r7, #3
 800e4d6:	f006 0207 	and.w	r2, r6, #7
 800e4da:	4607      	mov	r7, r0
 800e4dc:	460e      	mov	r6, r1
 800e4de:	3230      	adds	r2, #48	; 0x30
 800e4e0:	ea56 0107 	orrs.w	r1, r6, r7
 800e4e4:	f103 3bff 	add.w	fp, r3, #4294967295
 800e4e8:	f803 2c01 	strb.w	r2, [r3, #-1]
 800e4ec:	d114      	bne.n	800e518 <_svfprintf_r+0xc60>
 800e4ee:	f01a 0f01 	tst.w	sl, #1
 800e4f2:	d006      	beq.n	800e502 <_svfprintf_r+0xc4a>
 800e4f4:	2a30      	cmp	r2, #48	; 0x30
 800e4f6:	d004      	beq.n	800e502 <_svfprintf_r+0xc4a>
 800e4f8:	2230      	movs	r2, #48	; 0x30
 800e4fa:	f80b 2c01 	strb.w	r2, [fp, #-1]
 800e4fe:	f1a3 0b02 	sub.w	fp, r3, #2
 800e502:	ab52      	add	r3, sp, #328	; 0x148
 800e504:	9510      	str	r5, [sp, #64]	; 0x40
 800e506:	f04f 0900 	mov.w	r9, #0
 800e50a:	eba3 050b 	sub.w	r5, r3, fp
 800e50e:	464f      	mov	r7, r9
 800e510:	f8cd 901c 	str.w	r9, [sp, #28]
 800e514:	464e      	mov	r6, r9
 800e516:	e6c2      	b.n	800e29e <_svfprintf_r+0x9e6>
 800e518:	465b      	mov	r3, fp
 800e51a:	e7d8      	b.n	800e4ce <_svfprintf_r+0xc16>
 800e51c:	080119b8 	.word	0x080119b8
 800e520:	080119dc 	.word	0x080119dc
 800e524:	080119ec 	.word	0x080119ec
 800e528:	2300      	movs	r3, #0
 800e52a:	9304      	str	r3, [sp, #16]
 800e52c:	f40a 6380 	and.w	r3, sl, #1024	; 0x400
 800e530:	f50d 79a4 	add.w	r9, sp, #328	; 0x148
 800e534:	9307      	str	r3, [sp, #28]
 800e536:	220a      	movs	r2, #10
 800e538:	2300      	movs	r3, #0
 800e53a:	4630      	mov	r0, r6
 800e53c:	4639      	mov	r1, r7
 800e53e:	f7f2 fbb3 	bl	8000ca8 <__aeabi_uldivmod>
 800e542:	9b04      	ldr	r3, [sp, #16]
 800e544:	3301      	adds	r3, #1
 800e546:	9304      	str	r3, [sp, #16]
 800e548:	9b07      	ldr	r3, [sp, #28]
 800e54a:	3230      	adds	r2, #48	; 0x30
 800e54c:	f109 3bff 	add.w	fp, r9, #4294967295
 800e550:	f809 2c01 	strb.w	r2, [r9, #-1]
 800e554:	b1d3      	cbz	r3, 800e58c <_svfprintf_r+0xcd4>
 800e556:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e558:	9a04      	ldr	r2, [sp, #16]
 800e55a:	781b      	ldrb	r3, [r3, #0]
 800e55c:	429a      	cmp	r2, r3
 800e55e:	d115      	bne.n	800e58c <_svfprintf_r+0xcd4>
 800e560:	2aff      	cmp	r2, #255	; 0xff
 800e562:	d013      	beq.n	800e58c <_svfprintf_r+0xcd4>
 800e564:	2f00      	cmp	r7, #0
 800e566:	bf08      	it	eq
 800e568:	2e0a      	cmpeq	r6, #10
 800e56a:	d30f      	bcc.n	800e58c <_svfprintf_r+0xcd4>
 800e56c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e56e:	9919      	ldr	r1, [sp, #100]	; 0x64
 800e570:	ebab 0b03 	sub.w	fp, fp, r3
 800e574:	461a      	mov	r2, r3
 800e576:	4658      	mov	r0, fp
 800e578:	f7fe fb63 	bl	800cc42 <strncpy>
 800e57c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e57e:	785b      	ldrb	r3, [r3, #1]
 800e580:	b11b      	cbz	r3, 800e58a <_svfprintf_r+0xcd2>
 800e582:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e584:	3301      	adds	r3, #1
 800e586:	9309      	str	r3, [sp, #36]	; 0x24
 800e588:	2300      	movs	r3, #0
 800e58a:	9304      	str	r3, [sp, #16]
 800e58c:	2300      	movs	r3, #0
 800e58e:	4630      	mov	r0, r6
 800e590:	4639      	mov	r1, r7
 800e592:	220a      	movs	r2, #10
 800e594:	f7f2 fb88 	bl	8000ca8 <__aeabi_uldivmod>
 800e598:	4606      	mov	r6, r0
 800e59a:	460f      	mov	r7, r1
 800e59c:	ea56 0307 	orrs.w	r3, r6, r7
 800e5a0:	d0af      	beq.n	800e502 <_svfprintf_r+0xc4a>
 800e5a2:	46d9      	mov	r9, fp
 800e5a4:	e7c7      	b.n	800e536 <_svfprintf_r+0xc7e>
 800e5a6:	f50d 7ba4 	add.w	fp, sp, #328	; 0x148
 800e5aa:	f006 030f 	and.w	r3, r6, #15
 800e5ae:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800e5b0:	5cd3      	ldrb	r3, [r2, r3]
 800e5b2:	f80b 3d01 	strb.w	r3, [fp, #-1]!
 800e5b6:	0933      	lsrs	r3, r6, #4
 800e5b8:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 800e5bc:	093a      	lsrs	r2, r7, #4
 800e5be:	461e      	mov	r6, r3
 800e5c0:	4617      	mov	r7, r2
 800e5c2:	ea56 0307 	orrs.w	r3, r6, r7
 800e5c6:	d1f0      	bne.n	800e5aa <_svfprintf_r+0xcf2>
 800e5c8:	e79b      	b.n	800e502 <_svfprintf_r+0xc4a>
 800e5ca:	f50d 7ba4 	add.w	fp, sp, #328	; 0x148
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d197      	bne.n	800e502 <_svfprintf_r+0xc4a>
 800e5d2:	07d2      	lsls	r2, r2, #31
 800e5d4:	bf44      	itt	mi
 800e5d6:	2330      	movmi	r3, #48	; 0x30
 800e5d8:	f80b 3d01 	strbmi.w	r3, [fp, #-1]!
 800e5dc:	e791      	b.n	800e502 <_svfprintf_r+0xc4a>
 800e5de:	9b06      	ldr	r3, [sp, #24]
 800e5e0:	2b00      	cmp	r3, #0
 800e5e2:	f000 8377 	beq.w	800ecd4 <_svfprintf_r+0x141c>
 800e5e6:	2000      	movs	r0, #0
 800e5e8:	f88d 30e4 	strb.w	r3, [sp, #228]	; 0xe4
 800e5ec:	f88d 007b 	strb.w	r0, [sp, #123]	; 0x7b
 800e5f0:	9608      	str	r6, [sp, #32]
 800e5f2:	f7ff bb49 	b.w	800dc88 <_svfprintf_r+0x3d0>
 800e5f6:	f8dd a040 	ldr.w	sl, [sp, #64]	; 0x40
 800e5fa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e5fc:	e4ec      	b.n	800dfd8 <_svfprintf_r+0x720>
 800e5fe:	2010      	movs	r0, #16
 800e600:	4403      	add	r3, r0
 800e602:	2a07      	cmp	r2, #7
 800e604:	6060      	str	r0, [r4, #4]
 800e606:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 800e60a:	dd08      	ble.n	800e61e <_svfprintf_r+0xd66>
 800e60c:	aa26      	add	r2, sp, #152	; 0x98
 800e60e:	4641      	mov	r1, r8
 800e610:	9803      	ldr	r0, [sp, #12]
 800e612:	f002 fd5f 	bl	80110d4 <__ssprint_r>
 800e616:	2800      	cmp	r0, #0
 800e618:	f040 833a 	bne.w	800ec90 <_svfprintf_r+0x13d8>
 800e61c:	a929      	add	r1, sp, #164	; 0xa4
 800e61e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e620:	3b10      	subs	r3, #16
 800e622:	9313      	str	r3, [sp, #76]	; 0x4c
 800e624:	460c      	mov	r4, r1
 800e626:	e656      	b.n	800e2d6 <_svfprintf_r+0xa1e>
 800e628:	460c      	mov	r4, r1
 800e62a:	e671      	b.n	800e310 <_svfprintf_r+0xa58>
 800e62c:	aa26      	add	r2, sp, #152	; 0x98
 800e62e:	4641      	mov	r1, r8
 800e630:	9803      	ldr	r0, [sp, #12]
 800e632:	f002 fd4f 	bl	80110d4 <__ssprint_r>
 800e636:	2800      	cmp	r0, #0
 800e638:	f040 832a 	bne.w	800ec90 <_svfprintf_r+0x13d8>
 800e63c:	ac29      	add	r4, sp, #164	; 0xa4
 800e63e:	e679      	b.n	800e334 <_svfprintf_r+0xa7c>
 800e640:	aa26      	add	r2, sp, #152	; 0x98
 800e642:	4641      	mov	r1, r8
 800e644:	9803      	ldr	r0, [sp, #12]
 800e646:	f002 fd45 	bl	80110d4 <__ssprint_r>
 800e64a:	2800      	cmp	r0, #0
 800e64c:	f040 8320 	bne.w	800ec90 <_svfprintf_r+0x13d8>
 800e650:	ac29      	add	r4, sp, #164	; 0xa4
 800e652:	e67f      	b.n	800e354 <_svfprintf_r+0xa9c>
 800e654:	2010      	movs	r0, #16
 800e656:	4403      	add	r3, r0
 800e658:	2a07      	cmp	r2, #7
 800e65a:	6060      	str	r0, [r4, #4]
 800e65c:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 800e660:	dd08      	ble.n	800e674 <_svfprintf_r+0xdbc>
 800e662:	aa26      	add	r2, sp, #152	; 0x98
 800e664:	4641      	mov	r1, r8
 800e666:	9803      	ldr	r0, [sp, #12]
 800e668:	f002 fd34 	bl	80110d4 <__ssprint_r>
 800e66c:	2800      	cmp	r0, #0
 800e66e:	f040 830f 	bne.w	800ec90 <_svfprintf_r+0x13d8>
 800e672:	a929      	add	r1, sp, #164	; 0xa4
 800e674:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e676:	3b10      	subs	r3, #16
 800e678:	9313      	str	r3, [sp, #76]	; 0x4c
 800e67a:	460c      	mov	r4, r1
 800e67c:	e673      	b.n	800e366 <_svfprintf_r+0xaae>
 800e67e:	460c      	mov	r4, r1
 800e680:	e68e      	b.n	800e3a0 <_svfprintf_r+0xae8>
 800e682:	2010      	movs	r0, #16
 800e684:	4403      	add	r3, r0
 800e686:	2a07      	cmp	r2, #7
 800e688:	6060      	str	r0, [r4, #4]
 800e68a:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 800e68e:	dd08      	ble.n	800e6a2 <_svfprintf_r+0xdea>
 800e690:	aa26      	add	r2, sp, #152	; 0x98
 800e692:	4641      	mov	r1, r8
 800e694:	9803      	ldr	r0, [sp, #12]
 800e696:	f002 fd1d 	bl	80110d4 <__ssprint_r>
 800e69a:	2800      	cmp	r0, #0
 800e69c:	f040 82f8 	bne.w	800ec90 <_svfprintf_r+0x13d8>
 800e6a0:	a929      	add	r1, sp, #164	; 0xa4
 800e6a2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e6a4:	3b10      	subs	r3, #16
 800e6a6:	9310      	str	r3, [sp, #64]	; 0x40
 800e6a8:	460c      	mov	r4, r1
 800e6aa:	e67e      	b.n	800e3aa <_svfprintf_r+0xaf2>
 800e6ac:	460c      	mov	r4, r1
 800e6ae:	e699      	b.n	800e3e4 <_svfprintf_r+0xb2c>
 800e6b0:	9b06      	ldr	r3, [sp, #24]
 800e6b2:	2b65      	cmp	r3, #101	; 0x65
 800e6b4:	f340 8234 	ble.w	800eb20 <_svfprintf_r+0x1268>
 800e6b8:	2200      	movs	r2, #0
 800e6ba:	2300      	movs	r3, #0
 800e6bc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800e6c0:	f7f2 fa12 	bl	8000ae8 <__aeabi_dcmpeq>
 800e6c4:	2800      	cmp	r0, #0
 800e6c6:	d069      	beq.n	800e79c <_svfprintf_r+0xee4>
 800e6c8:	4b6e      	ldr	r3, [pc, #440]	; (800e884 <_svfprintf_r+0xfcc>)
 800e6ca:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800e6cc:	6023      	str	r3, [r4, #0]
 800e6ce:	2301      	movs	r3, #1
 800e6d0:	441d      	add	r5, r3
 800e6d2:	6063      	str	r3, [r4, #4]
 800e6d4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800e6d6:	9528      	str	r5, [sp, #160]	; 0xa0
 800e6d8:	3301      	adds	r3, #1
 800e6da:	2b07      	cmp	r3, #7
 800e6dc:	9327      	str	r3, [sp, #156]	; 0x9c
 800e6de:	dc37      	bgt.n	800e750 <_svfprintf_r+0xe98>
 800e6e0:	3408      	adds	r4, #8
 800e6e2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800e6e4:	9a04      	ldr	r2, [sp, #16]
 800e6e6:	4293      	cmp	r3, r2
 800e6e8:	db03      	blt.n	800e6f2 <_svfprintf_r+0xe3a>
 800e6ea:	f01a 0f01 	tst.w	sl, #1
 800e6ee:	f43f ae8a 	beq.w	800e406 <_svfprintf_r+0xb4e>
 800e6f2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800e6f4:	6023      	str	r3, [r4, #0]
 800e6f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e6f8:	6063      	str	r3, [r4, #4]
 800e6fa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e6fc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800e6fe:	4413      	add	r3, r2
 800e700:	9328      	str	r3, [sp, #160]	; 0xa0
 800e702:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800e704:	3301      	adds	r3, #1
 800e706:	2b07      	cmp	r3, #7
 800e708:	9327      	str	r3, [sp, #156]	; 0x9c
 800e70a:	dc2b      	bgt.n	800e764 <_svfprintf_r+0xeac>
 800e70c:	3408      	adds	r4, #8
 800e70e:	9b04      	ldr	r3, [sp, #16]
 800e710:	1e5d      	subs	r5, r3, #1
 800e712:	2d00      	cmp	r5, #0
 800e714:	f77f ae77 	ble.w	800e406 <_svfprintf_r+0xb4e>
 800e718:	4e5b      	ldr	r6, [pc, #364]	; (800e888 <_svfprintf_r+0xfd0>)
 800e71a:	2710      	movs	r7, #16
 800e71c:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 800e720:	2d10      	cmp	r5, #16
 800e722:	f103 0301 	add.w	r3, r3, #1
 800e726:	f104 0108 	add.w	r1, r4, #8
 800e72a:	6026      	str	r6, [r4, #0]
 800e72c:	dc24      	bgt.n	800e778 <_svfprintf_r+0xec0>
 800e72e:	6065      	str	r5, [r4, #4]
 800e730:	2b07      	cmp	r3, #7
 800e732:	4415      	add	r5, r2
 800e734:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 800e738:	f340 8289 	ble.w	800ec4e <_svfprintf_r+0x1396>
 800e73c:	aa26      	add	r2, sp, #152	; 0x98
 800e73e:	4641      	mov	r1, r8
 800e740:	9803      	ldr	r0, [sp, #12]
 800e742:	f002 fcc7 	bl	80110d4 <__ssprint_r>
 800e746:	2800      	cmp	r0, #0
 800e748:	f040 82a2 	bne.w	800ec90 <_svfprintf_r+0x13d8>
 800e74c:	ac29      	add	r4, sp, #164	; 0xa4
 800e74e:	e65a      	b.n	800e406 <_svfprintf_r+0xb4e>
 800e750:	aa26      	add	r2, sp, #152	; 0x98
 800e752:	4641      	mov	r1, r8
 800e754:	9803      	ldr	r0, [sp, #12]
 800e756:	f002 fcbd 	bl	80110d4 <__ssprint_r>
 800e75a:	2800      	cmp	r0, #0
 800e75c:	f040 8298 	bne.w	800ec90 <_svfprintf_r+0x13d8>
 800e760:	ac29      	add	r4, sp, #164	; 0xa4
 800e762:	e7be      	b.n	800e6e2 <_svfprintf_r+0xe2a>
 800e764:	aa26      	add	r2, sp, #152	; 0x98
 800e766:	4641      	mov	r1, r8
 800e768:	9803      	ldr	r0, [sp, #12]
 800e76a:	f002 fcb3 	bl	80110d4 <__ssprint_r>
 800e76e:	2800      	cmp	r0, #0
 800e770:	f040 828e 	bne.w	800ec90 <_svfprintf_r+0x13d8>
 800e774:	ac29      	add	r4, sp, #164	; 0xa4
 800e776:	e7ca      	b.n	800e70e <_svfprintf_r+0xe56>
 800e778:	3210      	adds	r2, #16
 800e77a:	2b07      	cmp	r3, #7
 800e77c:	6067      	str	r7, [r4, #4]
 800e77e:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 800e782:	dd08      	ble.n	800e796 <_svfprintf_r+0xede>
 800e784:	aa26      	add	r2, sp, #152	; 0x98
 800e786:	4641      	mov	r1, r8
 800e788:	9803      	ldr	r0, [sp, #12]
 800e78a:	f002 fca3 	bl	80110d4 <__ssprint_r>
 800e78e:	2800      	cmp	r0, #0
 800e790:	f040 827e 	bne.w	800ec90 <_svfprintf_r+0x13d8>
 800e794:	a929      	add	r1, sp, #164	; 0xa4
 800e796:	3d10      	subs	r5, #16
 800e798:	460c      	mov	r4, r1
 800e79a:	e7bf      	b.n	800e71c <_svfprintf_r+0xe64>
 800e79c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800e79e:	2b00      	cmp	r3, #0
 800e7a0:	dc74      	bgt.n	800e88c <_svfprintf_r+0xfd4>
 800e7a2:	4b38      	ldr	r3, [pc, #224]	; (800e884 <_svfprintf_r+0xfcc>)
 800e7a4:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800e7a6:	6023      	str	r3, [r4, #0]
 800e7a8:	2301      	movs	r3, #1
 800e7aa:	441d      	add	r5, r3
 800e7ac:	6063      	str	r3, [r4, #4]
 800e7ae:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800e7b0:	9528      	str	r5, [sp, #160]	; 0xa0
 800e7b2:	3301      	adds	r3, #1
 800e7b4:	2b07      	cmp	r3, #7
 800e7b6:	9327      	str	r3, [sp, #156]	; 0x9c
 800e7b8:	dc3e      	bgt.n	800e838 <_svfprintf_r+0xf80>
 800e7ba:	3408      	adds	r4, #8
 800e7bc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800e7be:	b92b      	cbnz	r3, 800e7cc <_svfprintf_r+0xf14>
 800e7c0:	9b04      	ldr	r3, [sp, #16]
 800e7c2:	b91b      	cbnz	r3, 800e7cc <_svfprintf_r+0xf14>
 800e7c4:	f01a 0f01 	tst.w	sl, #1
 800e7c8:	f43f ae1d 	beq.w	800e406 <_svfprintf_r+0xb4e>
 800e7cc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800e7ce:	6023      	str	r3, [r4, #0]
 800e7d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e7d2:	6063      	str	r3, [r4, #4]
 800e7d4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e7d6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800e7d8:	4413      	add	r3, r2
 800e7da:	9328      	str	r3, [sp, #160]	; 0xa0
 800e7dc:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800e7de:	3301      	adds	r3, #1
 800e7e0:	2b07      	cmp	r3, #7
 800e7e2:	9327      	str	r3, [sp, #156]	; 0x9c
 800e7e4:	dc32      	bgt.n	800e84c <_svfprintf_r+0xf94>
 800e7e6:	3408      	adds	r4, #8
 800e7e8:	9d20      	ldr	r5, [sp, #128]	; 0x80
 800e7ea:	2d00      	cmp	r5, #0
 800e7ec:	da1b      	bge.n	800e826 <_svfprintf_r+0xf6e>
 800e7ee:	4e26      	ldr	r6, [pc, #152]	; (800e888 <_svfprintf_r+0xfd0>)
 800e7f0:	426d      	negs	r5, r5
 800e7f2:	4623      	mov	r3, r4
 800e7f4:	2710      	movs	r7, #16
 800e7f6:	e9dd 2127 	ldrd	r2, r1, [sp, #156]	; 0x9c
 800e7fa:	2d10      	cmp	r5, #16
 800e7fc:	f102 0201 	add.w	r2, r2, #1
 800e800:	f104 0408 	add.w	r4, r4, #8
 800e804:	601e      	str	r6, [r3, #0]
 800e806:	dc2b      	bgt.n	800e860 <_svfprintf_r+0xfa8>
 800e808:	605d      	str	r5, [r3, #4]
 800e80a:	2a07      	cmp	r2, #7
 800e80c:	440d      	add	r5, r1
 800e80e:	e9cd 2527 	strd	r2, r5, [sp, #156]	; 0x9c
 800e812:	dd08      	ble.n	800e826 <_svfprintf_r+0xf6e>
 800e814:	aa26      	add	r2, sp, #152	; 0x98
 800e816:	4641      	mov	r1, r8
 800e818:	9803      	ldr	r0, [sp, #12]
 800e81a:	f002 fc5b 	bl	80110d4 <__ssprint_r>
 800e81e:	2800      	cmp	r0, #0
 800e820:	f040 8236 	bne.w	800ec90 <_svfprintf_r+0x13d8>
 800e824:	ac29      	add	r4, sp, #164	; 0xa4
 800e826:	9b04      	ldr	r3, [sp, #16]
 800e828:	6063      	str	r3, [r4, #4]
 800e82a:	9a04      	ldr	r2, [sp, #16]
 800e82c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800e82e:	f8c4 b000 	str.w	fp, [r4]
 800e832:	4413      	add	r3, r2
 800e834:	9328      	str	r3, [sp, #160]	; 0xa0
 800e836:	e5df      	b.n	800e3f8 <_svfprintf_r+0xb40>
 800e838:	aa26      	add	r2, sp, #152	; 0x98
 800e83a:	4641      	mov	r1, r8
 800e83c:	9803      	ldr	r0, [sp, #12]
 800e83e:	f002 fc49 	bl	80110d4 <__ssprint_r>
 800e842:	2800      	cmp	r0, #0
 800e844:	f040 8224 	bne.w	800ec90 <_svfprintf_r+0x13d8>
 800e848:	ac29      	add	r4, sp, #164	; 0xa4
 800e84a:	e7b7      	b.n	800e7bc <_svfprintf_r+0xf04>
 800e84c:	aa26      	add	r2, sp, #152	; 0x98
 800e84e:	4641      	mov	r1, r8
 800e850:	9803      	ldr	r0, [sp, #12]
 800e852:	f002 fc3f 	bl	80110d4 <__ssprint_r>
 800e856:	2800      	cmp	r0, #0
 800e858:	f040 821a 	bne.w	800ec90 <_svfprintf_r+0x13d8>
 800e85c:	ac29      	add	r4, sp, #164	; 0xa4
 800e85e:	e7c3      	b.n	800e7e8 <_svfprintf_r+0xf30>
 800e860:	3110      	adds	r1, #16
 800e862:	2a07      	cmp	r2, #7
 800e864:	605f      	str	r7, [r3, #4]
 800e866:	e9cd 2127 	strd	r2, r1, [sp, #156]	; 0x9c
 800e86a:	dd08      	ble.n	800e87e <_svfprintf_r+0xfc6>
 800e86c:	aa26      	add	r2, sp, #152	; 0x98
 800e86e:	4641      	mov	r1, r8
 800e870:	9803      	ldr	r0, [sp, #12]
 800e872:	f002 fc2f 	bl	80110d4 <__ssprint_r>
 800e876:	2800      	cmp	r0, #0
 800e878:	f040 820a 	bne.w	800ec90 <_svfprintf_r+0x13d8>
 800e87c:	ac29      	add	r4, sp, #164	; 0xa4
 800e87e:	3d10      	subs	r5, #16
 800e880:	4623      	mov	r3, r4
 800e882:	e7b8      	b.n	800e7f6 <_svfprintf_r+0xf3e>
 800e884:	080119da 	.word	0x080119da
 800e888:	080119ec 	.word	0x080119ec
 800e88c:	9b04      	ldr	r3, [sp, #16]
 800e88e:	42b3      	cmp	r3, r6
 800e890:	bfa8      	it	ge
 800e892:	4633      	movge	r3, r6
 800e894:	2b00      	cmp	r3, #0
 800e896:	461d      	mov	r5, r3
 800e898:	dd0b      	ble.n	800e8b2 <_svfprintf_r+0xffa>
 800e89a:	e9c4 b300 	strd	fp, r3, [r4]
 800e89e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e8a0:	442b      	add	r3, r5
 800e8a2:	9328      	str	r3, [sp, #160]	; 0xa0
 800e8a4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800e8a6:	3301      	adds	r3, #1
 800e8a8:	2b07      	cmp	r3, #7
 800e8aa:	9327      	str	r3, [sp, #156]	; 0x9c
 800e8ac:	f300 8086 	bgt.w	800e9bc <_svfprintf_r+0x1104>
 800e8b0:	3408      	adds	r4, #8
 800e8b2:	2d00      	cmp	r5, #0
 800e8b4:	bfac      	ite	ge
 800e8b6:	1b75      	subge	r5, r6, r5
 800e8b8:	4635      	movlt	r5, r6
 800e8ba:	2d00      	cmp	r5, #0
 800e8bc:	dd19      	ble.n	800e8f2 <_svfprintf_r+0x103a>
 800e8be:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 800e8c2:	4896      	ldr	r0, [pc, #600]	; (800eb1c <_svfprintf_r+0x1264>)
 800e8c4:	6020      	str	r0, [r4, #0]
 800e8c6:	2d10      	cmp	r5, #16
 800e8c8:	f103 0301 	add.w	r3, r3, #1
 800e8cc:	f104 0108 	add.w	r1, r4, #8
 800e8d0:	dc7e      	bgt.n	800e9d0 <_svfprintf_r+0x1118>
 800e8d2:	6065      	str	r5, [r4, #4]
 800e8d4:	2b07      	cmp	r3, #7
 800e8d6:	4415      	add	r5, r2
 800e8d8:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 800e8dc:	f340 808b 	ble.w	800e9f6 <_svfprintf_r+0x113e>
 800e8e0:	aa26      	add	r2, sp, #152	; 0x98
 800e8e2:	4641      	mov	r1, r8
 800e8e4:	9803      	ldr	r0, [sp, #12]
 800e8e6:	f002 fbf5 	bl	80110d4 <__ssprint_r>
 800e8ea:	2800      	cmp	r0, #0
 800e8ec:	f040 81d0 	bne.w	800ec90 <_svfprintf_r+0x13d8>
 800e8f0:	ac29      	add	r4, sp, #164	; 0xa4
 800e8f2:	f41a 6f80 	tst.w	sl, #1024	; 0x400
 800e8f6:	445e      	add	r6, fp
 800e8f8:	d009      	beq.n	800e90e <_svfprintf_r+0x1056>
 800e8fa:	9b07      	ldr	r3, [sp, #28]
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	d17c      	bne.n	800e9fa <_svfprintf_r+0x1142>
 800e900:	2f00      	cmp	r7, #0
 800e902:	d17c      	bne.n	800e9fe <_svfprintf_r+0x1146>
 800e904:	9b04      	ldr	r3, [sp, #16]
 800e906:	445b      	add	r3, fp
 800e908:	429e      	cmp	r6, r3
 800e90a:	bf28      	it	cs
 800e90c:	461e      	movcs	r6, r3
 800e90e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800e910:	9a04      	ldr	r2, [sp, #16]
 800e912:	4293      	cmp	r3, r2
 800e914:	db02      	blt.n	800e91c <_svfprintf_r+0x1064>
 800e916:	f01a 0f01 	tst.w	sl, #1
 800e91a:	d00e      	beq.n	800e93a <_svfprintf_r+0x1082>
 800e91c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800e91e:	6023      	str	r3, [r4, #0]
 800e920:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e922:	6063      	str	r3, [r4, #4]
 800e924:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e926:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800e928:	4413      	add	r3, r2
 800e92a:	9328      	str	r3, [sp, #160]	; 0xa0
 800e92c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800e92e:	3301      	adds	r3, #1
 800e930:	2b07      	cmp	r3, #7
 800e932:	9327      	str	r3, [sp, #156]	; 0x9c
 800e934:	f300 80dd 	bgt.w	800eaf2 <_svfprintf_r+0x123a>
 800e938:	3408      	adds	r4, #8
 800e93a:	9b04      	ldr	r3, [sp, #16]
 800e93c:	9a04      	ldr	r2, [sp, #16]
 800e93e:	eb0b 0503 	add.w	r5, fp, r3
 800e942:	1bab      	subs	r3, r5, r6
 800e944:	9d20      	ldr	r5, [sp, #128]	; 0x80
 800e946:	1b55      	subs	r5, r2, r5
 800e948:	429d      	cmp	r5, r3
 800e94a:	bfa8      	it	ge
 800e94c:	461d      	movge	r5, r3
 800e94e:	2d00      	cmp	r5, #0
 800e950:	dd0b      	ble.n	800e96a <_svfprintf_r+0x10b2>
 800e952:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800e954:	442b      	add	r3, r5
 800e956:	9328      	str	r3, [sp, #160]	; 0xa0
 800e958:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800e95a:	3301      	adds	r3, #1
 800e95c:	2b07      	cmp	r3, #7
 800e95e:	e9c4 6500 	strd	r6, r5, [r4]
 800e962:	9327      	str	r3, [sp, #156]	; 0x9c
 800e964:	f300 80cf 	bgt.w	800eb06 <_svfprintf_r+0x124e>
 800e968:	3408      	adds	r4, #8
 800e96a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800e96c:	9a04      	ldr	r2, [sp, #16]
 800e96e:	2d00      	cmp	r5, #0
 800e970:	eba2 0303 	sub.w	r3, r2, r3
 800e974:	bfac      	ite	ge
 800e976:	1b5d      	subge	r5, r3, r5
 800e978:	461d      	movlt	r5, r3
 800e97a:	2d00      	cmp	r5, #0
 800e97c:	f77f ad43 	ble.w	800e406 <_svfprintf_r+0xb4e>
 800e980:	4e66      	ldr	r6, [pc, #408]	; (800eb1c <_svfprintf_r+0x1264>)
 800e982:	2710      	movs	r7, #16
 800e984:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 800e988:	2d10      	cmp	r5, #16
 800e98a:	f103 0301 	add.w	r3, r3, #1
 800e98e:	f104 0108 	add.w	r1, r4, #8
 800e992:	6026      	str	r6, [r4, #0]
 800e994:	f77f aecb 	ble.w	800e72e <_svfprintf_r+0xe76>
 800e998:	3210      	adds	r2, #16
 800e99a:	2b07      	cmp	r3, #7
 800e99c:	6067      	str	r7, [r4, #4]
 800e99e:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 800e9a2:	dd08      	ble.n	800e9b6 <_svfprintf_r+0x10fe>
 800e9a4:	aa26      	add	r2, sp, #152	; 0x98
 800e9a6:	4641      	mov	r1, r8
 800e9a8:	9803      	ldr	r0, [sp, #12]
 800e9aa:	f002 fb93 	bl	80110d4 <__ssprint_r>
 800e9ae:	2800      	cmp	r0, #0
 800e9b0:	f040 816e 	bne.w	800ec90 <_svfprintf_r+0x13d8>
 800e9b4:	a929      	add	r1, sp, #164	; 0xa4
 800e9b6:	3d10      	subs	r5, #16
 800e9b8:	460c      	mov	r4, r1
 800e9ba:	e7e3      	b.n	800e984 <_svfprintf_r+0x10cc>
 800e9bc:	aa26      	add	r2, sp, #152	; 0x98
 800e9be:	4641      	mov	r1, r8
 800e9c0:	9803      	ldr	r0, [sp, #12]
 800e9c2:	f002 fb87 	bl	80110d4 <__ssprint_r>
 800e9c6:	2800      	cmp	r0, #0
 800e9c8:	f040 8162 	bne.w	800ec90 <_svfprintf_r+0x13d8>
 800e9cc:	ac29      	add	r4, sp, #164	; 0xa4
 800e9ce:	e770      	b.n	800e8b2 <_svfprintf_r+0xffa>
 800e9d0:	2010      	movs	r0, #16
 800e9d2:	4402      	add	r2, r0
 800e9d4:	2b07      	cmp	r3, #7
 800e9d6:	6060      	str	r0, [r4, #4]
 800e9d8:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 800e9dc:	dd08      	ble.n	800e9f0 <_svfprintf_r+0x1138>
 800e9de:	aa26      	add	r2, sp, #152	; 0x98
 800e9e0:	4641      	mov	r1, r8
 800e9e2:	9803      	ldr	r0, [sp, #12]
 800e9e4:	f002 fb76 	bl	80110d4 <__ssprint_r>
 800e9e8:	2800      	cmp	r0, #0
 800e9ea:	f040 8151 	bne.w	800ec90 <_svfprintf_r+0x13d8>
 800e9ee:	a929      	add	r1, sp, #164	; 0xa4
 800e9f0:	3d10      	subs	r5, #16
 800e9f2:	460c      	mov	r4, r1
 800e9f4:	e763      	b.n	800e8be <_svfprintf_r+0x1006>
 800e9f6:	460c      	mov	r4, r1
 800e9f8:	e77b      	b.n	800e8f2 <_svfprintf_r+0x103a>
 800e9fa:	2f00      	cmp	r7, #0
 800e9fc:	d049      	beq.n	800ea92 <_svfprintf_r+0x11da>
 800e9fe:	3f01      	subs	r7, #1
 800ea00:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ea02:	6023      	str	r3, [r4, #0]
 800ea04:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ea06:	6063      	str	r3, [r4, #4]
 800ea08:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ea0a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800ea0c:	4413      	add	r3, r2
 800ea0e:	9328      	str	r3, [sp, #160]	; 0xa0
 800ea10:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800ea12:	3301      	adds	r3, #1
 800ea14:	2b07      	cmp	r3, #7
 800ea16:	9327      	str	r3, [sp, #156]	; 0x9c
 800ea18:	dc42      	bgt.n	800eaa0 <_svfprintf_r+0x11e8>
 800ea1a:	3408      	adds	r4, #8
 800ea1c:	9b04      	ldr	r3, [sp, #16]
 800ea1e:	445b      	add	r3, fp
 800ea20:	1b9a      	subs	r2, r3, r6
 800ea22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ea24:	781b      	ldrb	r3, [r3, #0]
 800ea26:	4293      	cmp	r3, r2
 800ea28:	bfa8      	it	ge
 800ea2a:	4613      	movge	r3, r2
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	461d      	mov	r5, r3
 800ea30:	dd0a      	ble.n	800ea48 <_svfprintf_r+0x1190>
 800ea32:	e9c4 6300 	strd	r6, r3, [r4]
 800ea36:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800ea38:	442b      	add	r3, r5
 800ea3a:	9328      	str	r3, [sp, #160]	; 0xa0
 800ea3c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800ea3e:	3301      	adds	r3, #1
 800ea40:	2b07      	cmp	r3, #7
 800ea42:	9327      	str	r3, [sp, #156]	; 0x9c
 800ea44:	dc36      	bgt.n	800eab4 <_svfprintf_r+0x11fc>
 800ea46:	3408      	adds	r4, #8
 800ea48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ea4a:	781b      	ldrb	r3, [r3, #0]
 800ea4c:	2d00      	cmp	r5, #0
 800ea4e:	bfac      	ite	ge
 800ea50:	1b5d      	subge	r5, r3, r5
 800ea52:	461d      	movlt	r5, r3
 800ea54:	2d00      	cmp	r5, #0
 800ea56:	dd18      	ble.n	800ea8a <_svfprintf_r+0x11d2>
 800ea58:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	; 0x9c
 800ea5c:	482f      	ldr	r0, [pc, #188]	; (800eb1c <_svfprintf_r+0x1264>)
 800ea5e:	6020      	str	r0, [r4, #0]
 800ea60:	2d10      	cmp	r5, #16
 800ea62:	f102 0201 	add.w	r2, r2, #1
 800ea66:	f104 0108 	add.w	r1, r4, #8
 800ea6a:	dc2d      	bgt.n	800eac8 <_svfprintf_r+0x1210>
 800ea6c:	442b      	add	r3, r5
 800ea6e:	2a07      	cmp	r2, #7
 800ea70:	6065      	str	r5, [r4, #4]
 800ea72:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 800ea76:	dd3a      	ble.n	800eaee <_svfprintf_r+0x1236>
 800ea78:	aa26      	add	r2, sp, #152	; 0x98
 800ea7a:	4641      	mov	r1, r8
 800ea7c:	9803      	ldr	r0, [sp, #12]
 800ea7e:	f002 fb29 	bl	80110d4 <__ssprint_r>
 800ea82:	2800      	cmp	r0, #0
 800ea84:	f040 8104 	bne.w	800ec90 <_svfprintf_r+0x13d8>
 800ea88:	ac29      	add	r4, sp, #164	; 0xa4
 800ea8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ea8c:	781b      	ldrb	r3, [r3, #0]
 800ea8e:	441e      	add	r6, r3
 800ea90:	e733      	b.n	800e8fa <_svfprintf_r+0x1042>
 800ea92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ea94:	3b01      	subs	r3, #1
 800ea96:	9309      	str	r3, [sp, #36]	; 0x24
 800ea98:	9b07      	ldr	r3, [sp, #28]
 800ea9a:	3b01      	subs	r3, #1
 800ea9c:	9307      	str	r3, [sp, #28]
 800ea9e:	e7af      	b.n	800ea00 <_svfprintf_r+0x1148>
 800eaa0:	aa26      	add	r2, sp, #152	; 0x98
 800eaa2:	4641      	mov	r1, r8
 800eaa4:	9803      	ldr	r0, [sp, #12]
 800eaa6:	f002 fb15 	bl	80110d4 <__ssprint_r>
 800eaaa:	2800      	cmp	r0, #0
 800eaac:	f040 80f0 	bne.w	800ec90 <_svfprintf_r+0x13d8>
 800eab0:	ac29      	add	r4, sp, #164	; 0xa4
 800eab2:	e7b3      	b.n	800ea1c <_svfprintf_r+0x1164>
 800eab4:	aa26      	add	r2, sp, #152	; 0x98
 800eab6:	4641      	mov	r1, r8
 800eab8:	9803      	ldr	r0, [sp, #12]
 800eaba:	f002 fb0b 	bl	80110d4 <__ssprint_r>
 800eabe:	2800      	cmp	r0, #0
 800eac0:	f040 80e6 	bne.w	800ec90 <_svfprintf_r+0x13d8>
 800eac4:	ac29      	add	r4, sp, #164	; 0xa4
 800eac6:	e7bf      	b.n	800ea48 <_svfprintf_r+0x1190>
 800eac8:	2010      	movs	r0, #16
 800eaca:	4403      	add	r3, r0
 800eacc:	2a07      	cmp	r2, #7
 800eace:	6060      	str	r0, [r4, #4]
 800ead0:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 800ead4:	dd08      	ble.n	800eae8 <_svfprintf_r+0x1230>
 800ead6:	aa26      	add	r2, sp, #152	; 0x98
 800ead8:	4641      	mov	r1, r8
 800eada:	9803      	ldr	r0, [sp, #12]
 800eadc:	f002 fafa 	bl	80110d4 <__ssprint_r>
 800eae0:	2800      	cmp	r0, #0
 800eae2:	f040 80d5 	bne.w	800ec90 <_svfprintf_r+0x13d8>
 800eae6:	a929      	add	r1, sp, #164	; 0xa4
 800eae8:	3d10      	subs	r5, #16
 800eaea:	460c      	mov	r4, r1
 800eaec:	e7b4      	b.n	800ea58 <_svfprintf_r+0x11a0>
 800eaee:	460c      	mov	r4, r1
 800eaf0:	e7cb      	b.n	800ea8a <_svfprintf_r+0x11d2>
 800eaf2:	aa26      	add	r2, sp, #152	; 0x98
 800eaf4:	4641      	mov	r1, r8
 800eaf6:	9803      	ldr	r0, [sp, #12]
 800eaf8:	f002 faec 	bl	80110d4 <__ssprint_r>
 800eafc:	2800      	cmp	r0, #0
 800eafe:	f040 80c7 	bne.w	800ec90 <_svfprintf_r+0x13d8>
 800eb02:	ac29      	add	r4, sp, #164	; 0xa4
 800eb04:	e719      	b.n	800e93a <_svfprintf_r+0x1082>
 800eb06:	aa26      	add	r2, sp, #152	; 0x98
 800eb08:	4641      	mov	r1, r8
 800eb0a:	9803      	ldr	r0, [sp, #12]
 800eb0c:	f002 fae2 	bl	80110d4 <__ssprint_r>
 800eb10:	2800      	cmp	r0, #0
 800eb12:	f040 80bd 	bne.w	800ec90 <_svfprintf_r+0x13d8>
 800eb16:	ac29      	add	r4, sp, #164	; 0xa4
 800eb18:	e727      	b.n	800e96a <_svfprintf_r+0x10b2>
 800eb1a:	bf00      	nop
 800eb1c:	080119ec 	.word	0x080119ec
 800eb20:	9a04      	ldr	r2, [sp, #16]
 800eb22:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800eb24:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800eb26:	2a01      	cmp	r2, #1
 800eb28:	f105 0501 	add.w	r5, r5, #1
 800eb2c:	f103 0301 	add.w	r3, r3, #1
 800eb30:	f104 0608 	add.w	r6, r4, #8
 800eb34:	dc02      	bgt.n	800eb3c <_svfprintf_r+0x1284>
 800eb36:	f01a 0f01 	tst.w	sl, #1
 800eb3a:	d07d      	beq.n	800ec38 <_svfprintf_r+0x1380>
 800eb3c:	2201      	movs	r2, #1
 800eb3e:	2b07      	cmp	r3, #7
 800eb40:	f8c4 b000 	str.w	fp, [r4]
 800eb44:	6062      	str	r2, [r4, #4]
 800eb46:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 800eb4a:	dd08      	ble.n	800eb5e <_svfprintf_r+0x12a6>
 800eb4c:	aa26      	add	r2, sp, #152	; 0x98
 800eb4e:	4641      	mov	r1, r8
 800eb50:	9803      	ldr	r0, [sp, #12]
 800eb52:	f002 fabf 	bl	80110d4 <__ssprint_r>
 800eb56:	2800      	cmp	r0, #0
 800eb58:	f040 809a 	bne.w	800ec90 <_svfprintf_r+0x13d8>
 800eb5c:	ae29      	add	r6, sp, #164	; 0xa4
 800eb5e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800eb60:	6033      	str	r3, [r6, #0]
 800eb62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800eb64:	6073      	str	r3, [r6, #4]
 800eb66:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800eb68:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800eb6a:	4413      	add	r3, r2
 800eb6c:	9328      	str	r3, [sp, #160]	; 0xa0
 800eb6e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800eb70:	3301      	adds	r3, #1
 800eb72:	2b07      	cmp	r3, #7
 800eb74:	9327      	str	r3, [sp, #156]	; 0x9c
 800eb76:	dc31      	bgt.n	800ebdc <_svfprintf_r+0x1324>
 800eb78:	3608      	adds	r6, #8
 800eb7a:	9b04      	ldr	r3, [sp, #16]
 800eb7c:	2200      	movs	r2, #0
 800eb7e:	1e5c      	subs	r4, r3, #1
 800eb80:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800eb84:	2300      	movs	r3, #0
 800eb86:	f7f1 ffaf 	bl	8000ae8 <__aeabi_dcmpeq>
 800eb8a:	2800      	cmp	r0, #0
 800eb8c:	d12f      	bne.n	800ebee <_svfprintf_r+0x1336>
 800eb8e:	f10b 0301 	add.w	r3, fp, #1
 800eb92:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 800eb94:	9904      	ldr	r1, [sp, #16]
 800eb96:	e9c6 3400 	strd	r3, r4, [r6]
 800eb9a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800eb9c:	3201      	adds	r2, #1
 800eb9e:	3b01      	subs	r3, #1
 800eba0:	440b      	add	r3, r1
 800eba2:	2a07      	cmp	r2, #7
 800eba4:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 800eba8:	dd4f      	ble.n	800ec4a <_svfprintf_r+0x1392>
 800ebaa:	aa26      	add	r2, sp, #152	; 0x98
 800ebac:	4641      	mov	r1, r8
 800ebae:	9803      	ldr	r0, [sp, #12]
 800ebb0:	f002 fa90 	bl	80110d4 <__ssprint_r>
 800ebb4:	2800      	cmp	r0, #0
 800ebb6:	d16b      	bne.n	800ec90 <_svfprintf_r+0x13d8>
 800ebb8:	ae29      	add	r6, sp, #164	; 0xa4
 800ebba:	ab22      	add	r3, sp, #136	; 0x88
 800ebbc:	6033      	str	r3, [r6, #0]
 800ebbe:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ebc0:	6073      	str	r3, [r6, #4]
 800ebc2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ebc4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800ebc6:	4413      	add	r3, r2
 800ebc8:	9328      	str	r3, [sp, #160]	; 0xa0
 800ebca:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800ebcc:	3301      	adds	r3, #1
 800ebce:	2b07      	cmp	r3, #7
 800ebd0:	9327      	str	r3, [sp, #156]	; 0x9c
 800ebd2:	f73f adb3 	bgt.w	800e73c <_svfprintf_r+0xe84>
 800ebd6:	f106 0408 	add.w	r4, r6, #8
 800ebda:	e414      	b.n	800e406 <_svfprintf_r+0xb4e>
 800ebdc:	aa26      	add	r2, sp, #152	; 0x98
 800ebde:	4641      	mov	r1, r8
 800ebe0:	9803      	ldr	r0, [sp, #12]
 800ebe2:	f002 fa77 	bl	80110d4 <__ssprint_r>
 800ebe6:	2800      	cmp	r0, #0
 800ebe8:	d152      	bne.n	800ec90 <_svfprintf_r+0x13d8>
 800ebea:	ae29      	add	r6, sp, #164	; 0xa4
 800ebec:	e7c5      	b.n	800eb7a <_svfprintf_r+0x12c2>
 800ebee:	2c00      	cmp	r4, #0
 800ebf0:	dde3      	ble.n	800ebba <_svfprintf_r+0x1302>
 800ebf2:	4d3e      	ldr	r5, [pc, #248]	; (800ecec <_svfprintf_r+0x1434>)
 800ebf4:	2710      	movs	r7, #16
 800ebf6:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 800ebfa:	2c10      	cmp	r4, #16
 800ebfc:	f103 0301 	add.w	r3, r3, #1
 800ec00:	f106 0108 	add.w	r1, r6, #8
 800ec04:	6035      	str	r5, [r6, #0]
 800ec06:	dc07      	bgt.n	800ec18 <_svfprintf_r+0x1360>
 800ec08:	6074      	str	r4, [r6, #4]
 800ec0a:	2b07      	cmp	r3, #7
 800ec0c:	4414      	add	r4, r2
 800ec0e:	e9cd 3427 	strd	r3, r4, [sp, #156]	; 0x9c
 800ec12:	dcca      	bgt.n	800ebaa <_svfprintf_r+0x12f2>
 800ec14:	460e      	mov	r6, r1
 800ec16:	e7d0      	b.n	800ebba <_svfprintf_r+0x1302>
 800ec18:	3210      	adds	r2, #16
 800ec1a:	2b07      	cmp	r3, #7
 800ec1c:	6077      	str	r7, [r6, #4]
 800ec1e:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 800ec22:	dd06      	ble.n	800ec32 <_svfprintf_r+0x137a>
 800ec24:	aa26      	add	r2, sp, #152	; 0x98
 800ec26:	4641      	mov	r1, r8
 800ec28:	9803      	ldr	r0, [sp, #12]
 800ec2a:	f002 fa53 	bl	80110d4 <__ssprint_r>
 800ec2e:	bb78      	cbnz	r0, 800ec90 <_svfprintf_r+0x13d8>
 800ec30:	a929      	add	r1, sp, #164	; 0xa4
 800ec32:	3c10      	subs	r4, #16
 800ec34:	460e      	mov	r6, r1
 800ec36:	e7de      	b.n	800ebf6 <_svfprintf_r+0x133e>
 800ec38:	2201      	movs	r2, #1
 800ec3a:	2b07      	cmp	r3, #7
 800ec3c:	f8c4 b000 	str.w	fp, [r4]
 800ec40:	6062      	str	r2, [r4, #4]
 800ec42:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 800ec46:	ddb8      	ble.n	800ebba <_svfprintf_r+0x1302>
 800ec48:	e7af      	b.n	800ebaa <_svfprintf_r+0x12f2>
 800ec4a:	3608      	adds	r6, #8
 800ec4c:	e7b5      	b.n	800ebba <_svfprintf_r+0x1302>
 800ec4e:	460c      	mov	r4, r1
 800ec50:	f7ff bbd9 	b.w	800e406 <_svfprintf_r+0xb4e>
 800ec54:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ec56:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800ec58:	1a9d      	subs	r5, r3, r2
 800ec5a:	2d00      	cmp	r5, #0
 800ec5c:	f77f abd7 	ble.w	800e40e <_svfprintf_r+0xb56>
 800ec60:	4e23      	ldr	r6, [pc, #140]	; (800ecf0 <_svfprintf_r+0x1438>)
 800ec62:	2710      	movs	r7, #16
 800ec64:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 800ec68:	2d10      	cmp	r5, #16
 800ec6a:	f103 0301 	add.w	r3, r3, #1
 800ec6e:	6026      	str	r6, [r4, #0]
 800ec70:	dc18      	bgt.n	800eca4 <_svfprintf_r+0x13ec>
 800ec72:	6065      	str	r5, [r4, #4]
 800ec74:	2b07      	cmp	r3, #7
 800ec76:	4415      	add	r5, r2
 800ec78:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 800ec7c:	f77f abc7 	ble.w	800e40e <_svfprintf_r+0xb56>
 800ec80:	aa26      	add	r2, sp, #152	; 0x98
 800ec82:	4641      	mov	r1, r8
 800ec84:	9803      	ldr	r0, [sp, #12]
 800ec86:	f002 fa25 	bl	80110d4 <__ssprint_r>
 800ec8a:	2800      	cmp	r0, #0
 800ec8c:	f43f abbf 	beq.w	800e40e <_svfprintf_r+0xb56>
 800ec90:	f1b9 0f00 	cmp.w	r9, #0
 800ec94:	f43f a8a8 	beq.w	800dde8 <_svfprintf_r+0x530>
 800ec98:	4649      	mov	r1, r9
 800ec9a:	9803      	ldr	r0, [sp, #12]
 800ec9c:	f001 f826 	bl	800fcec <_free_r>
 800eca0:	f7ff b8a2 	b.w	800dde8 <_svfprintf_r+0x530>
 800eca4:	3210      	adds	r2, #16
 800eca6:	2b07      	cmp	r3, #7
 800eca8:	6067      	str	r7, [r4, #4]
 800ecaa:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 800ecae:	dc02      	bgt.n	800ecb6 <_svfprintf_r+0x13fe>
 800ecb0:	3408      	adds	r4, #8
 800ecb2:	3d10      	subs	r5, #16
 800ecb4:	e7d6      	b.n	800ec64 <_svfprintf_r+0x13ac>
 800ecb6:	aa26      	add	r2, sp, #152	; 0x98
 800ecb8:	4641      	mov	r1, r8
 800ecba:	9803      	ldr	r0, [sp, #12]
 800ecbc:	f002 fa0a 	bl	80110d4 <__ssprint_r>
 800ecc0:	2800      	cmp	r0, #0
 800ecc2:	d1e5      	bne.n	800ec90 <_svfprintf_r+0x13d8>
 800ecc4:	ac29      	add	r4, sp, #164	; 0xa4
 800ecc6:	e7f4      	b.n	800ecb2 <_svfprintf_r+0x13fa>
 800ecc8:	4649      	mov	r1, r9
 800ecca:	9803      	ldr	r0, [sp, #12]
 800eccc:	f001 f80e 	bl	800fcec <_free_r>
 800ecd0:	f7ff bbb5 	b.w	800e43e <_svfprintf_r+0xb86>
 800ecd4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	f43f a886 	beq.w	800dde8 <_svfprintf_r+0x530>
 800ecdc:	aa26      	add	r2, sp, #152	; 0x98
 800ecde:	4641      	mov	r1, r8
 800ece0:	9803      	ldr	r0, [sp, #12]
 800ece2:	f002 f9f7 	bl	80110d4 <__ssprint_r>
 800ece6:	f7ff b87f 	b.w	800dde8 <_svfprintf_r+0x530>
 800ecea:	bf00      	nop
 800ecec:	080119ec 	.word	0x080119ec
 800ecf0:	080119dc 	.word	0x080119dc

0800ecf4 <sysconf>:
 800ecf4:	2808      	cmp	r0, #8
 800ecf6:	b508      	push	{r3, lr}
 800ecf8:	d006      	beq.n	800ed08 <sysconf+0x14>
 800ecfa:	f7fd fcd7 	bl	800c6ac <__errno>
 800ecfe:	2316      	movs	r3, #22
 800ed00:	6003      	str	r3, [r0, #0]
 800ed02:	f04f 30ff 	mov.w	r0, #4294967295
 800ed06:	bd08      	pop	{r3, pc}
 800ed08:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800ed0c:	e7fb      	b.n	800ed06 <sysconf+0x12>

0800ed0e <_times_r>:
 800ed0e:	4608      	mov	r0, r1
 800ed10:	f7f4 bb58 	b.w	80033c4 <_times>

0800ed14 <register_fini>:
 800ed14:	4b02      	ldr	r3, [pc, #8]	; (800ed20 <register_fini+0xc>)
 800ed16:	b113      	cbz	r3, 800ed1e <register_fini+0xa>
 800ed18:	4802      	ldr	r0, [pc, #8]	; (800ed24 <register_fini+0x10>)
 800ed1a:	f000 b805 	b.w	800ed28 <atexit>
 800ed1e:	4770      	bx	lr
 800ed20:	00000000 	.word	0x00000000
 800ed24:	0800fc1d 	.word	0x0800fc1d

0800ed28 <atexit>:
 800ed28:	2300      	movs	r3, #0
 800ed2a:	4601      	mov	r1, r0
 800ed2c:	461a      	mov	r2, r3
 800ed2e:	4618      	mov	r0, r3
 800ed30:	f002 ba56 	b.w	80111e0 <__register_exitproc>

0800ed34 <quorem>:
 800ed34:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed38:	6903      	ldr	r3, [r0, #16]
 800ed3a:	690c      	ldr	r4, [r1, #16]
 800ed3c:	42a3      	cmp	r3, r4
 800ed3e:	4680      	mov	r8, r0
 800ed40:	f2c0 8082 	blt.w	800ee48 <quorem+0x114>
 800ed44:	3c01      	subs	r4, #1
 800ed46:	f101 0714 	add.w	r7, r1, #20
 800ed4a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800ed4e:	f100 0614 	add.w	r6, r0, #20
 800ed52:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800ed56:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800ed5a:	eb06 030c 	add.w	r3, r6, ip
 800ed5e:	3501      	adds	r5, #1
 800ed60:	eb07 090c 	add.w	r9, r7, ip
 800ed64:	9301      	str	r3, [sp, #4]
 800ed66:	fbb0 f5f5 	udiv	r5, r0, r5
 800ed6a:	b395      	cbz	r5, 800edd2 <quorem+0x9e>
 800ed6c:	f04f 0a00 	mov.w	sl, #0
 800ed70:	4638      	mov	r0, r7
 800ed72:	46b6      	mov	lr, r6
 800ed74:	46d3      	mov	fp, sl
 800ed76:	f850 2b04 	ldr.w	r2, [r0], #4
 800ed7a:	b293      	uxth	r3, r2
 800ed7c:	fb05 a303 	mla	r3, r5, r3, sl
 800ed80:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ed84:	b29b      	uxth	r3, r3
 800ed86:	ebab 0303 	sub.w	r3, fp, r3
 800ed8a:	0c12      	lsrs	r2, r2, #16
 800ed8c:	f8de b000 	ldr.w	fp, [lr]
 800ed90:	fb05 a202 	mla	r2, r5, r2, sl
 800ed94:	fa13 f38b 	uxtah	r3, r3, fp
 800ed98:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800ed9c:	fa1f fb82 	uxth.w	fp, r2
 800eda0:	f8de 2000 	ldr.w	r2, [lr]
 800eda4:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800eda8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800edac:	b29b      	uxth	r3, r3
 800edae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800edb2:	4581      	cmp	r9, r0
 800edb4:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800edb8:	f84e 3b04 	str.w	r3, [lr], #4
 800edbc:	d2db      	bcs.n	800ed76 <quorem+0x42>
 800edbe:	f856 300c 	ldr.w	r3, [r6, ip]
 800edc2:	b933      	cbnz	r3, 800edd2 <quorem+0x9e>
 800edc4:	9b01      	ldr	r3, [sp, #4]
 800edc6:	3b04      	subs	r3, #4
 800edc8:	429e      	cmp	r6, r3
 800edca:	461a      	mov	r2, r3
 800edcc:	d330      	bcc.n	800ee30 <quorem+0xfc>
 800edce:	f8c8 4010 	str.w	r4, [r8, #16]
 800edd2:	4640      	mov	r0, r8
 800edd4:	f001 fdc4 	bl	8010960 <__mcmp>
 800edd8:	2800      	cmp	r0, #0
 800edda:	db25      	blt.n	800ee28 <quorem+0xf4>
 800eddc:	3501      	adds	r5, #1
 800edde:	4630      	mov	r0, r6
 800ede0:	f04f 0c00 	mov.w	ip, #0
 800ede4:	f857 2b04 	ldr.w	r2, [r7], #4
 800ede8:	f8d0 e000 	ldr.w	lr, [r0]
 800edec:	b293      	uxth	r3, r2
 800edee:	ebac 0303 	sub.w	r3, ip, r3
 800edf2:	0c12      	lsrs	r2, r2, #16
 800edf4:	fa13 f38e 	uxtah	r3, r3, lr
 800edf8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800edfc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ee00:	b29b      	uxth	r3, r3
 800ee02:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ee06:	45b9      	cmp	r9, r7
 800ee08:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800ee0c:	f840 3b04 	str.w	r3, [r0], #4
 800ee10:	d2e8      	bcs.n	800ede4 <quorem+0xb0>
 800ee12:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800ee16:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800ee1a:	b92a      	cbnz	r2, 800ee28 <quorem+0xf4>
 800ee1c:	3b04      	subs	r3, #4
 800ee1e:	429e      	cmp	r6, r3
 800ee20:	461a      	mov	r2, r3
 800ee22:	d30b      	bcc.n	800ee3c <quorem+0x108>
 800ee24:	f8c8 4010 	str.w	r4, [r8, #16]
 800ee28:	4628      	mov	r0, r5
 800ee2a:	b003      	add	sp, #12
 800ee2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee30:	6812      	ldr	r2, [r2, #0]
 800ee32:	3b04      	subs	r3, #4
 800ee34:	2a00      	cmp	r2, #0
 800ee36:	d1ca      	bne.n	800edce <quorem+0x9a>
 800ee38:	3c01      	subs	r4, #1
 800ee3a:	e7c5      	b.n	800edc8 <quorem+0x94>
 800ee3c:	6812      	ldr	r2, [r2, #0]
 800ee3e:	3b04      	subs	r3, #4
 800ee40:	2a00      	cmp	r2, #0
 800ee42:	d1ef      	bne.n	800ee24 <quorem+0xf0>
 800ee44:	3c01      	subs	r4, #1
 800ee46:	e7ea      	b.n	800ee1e <quorem+0xea>
 800ee48:	2000      	movs	r0, #0
 800ee4a:	e7ee      	b.n	800ee2a <quorem+0xf6>
 800ee4c:	0000      	movs	r0, r0
	...

0800ee50 <_dtoa_r>:
 800ee50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee54:	b097      	sub	sp, #92	; 0x5c
 800ee56:	ec57 6b10 	vmov	r6, r7, d0
 800ee5a:	9106      	str	r1, [sp, #24]
 800ee5c:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800ee5e:	920b      	str	r2, [sp, #44]	; 0x2c
 800ee60:	4604      	mov	r4, r0
 800ee62:	9312      	str	r3, [sp, #72]	; 0x48
 800ee64:	9d20      	ldr	r5, [sp, #128]	; 0x80
 800ee66:	e9cd 6700 	strd	r6, r7, [sp]
 800ee6a:	b141      	cbz	r1, 800ee7e <_dtoa_r+0x2e>
 800ee6c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ee6e:	604a      	str	r2, [r1, #4]
 800ee70:	2301      	movs	r3, #1
 800ee72:	4093      	lsls	r3, r2
 800ee74:	608b      	str	r3, [r1, #8]
 800ee76:	f001 fb6f 	bl	8010558 <_Bfree>
 800ee7a:	2300      	movs	r3, #0
 800ee7c:	6423      	str	r3, [r4, #64]	; 0x40
 800ee7e:	1e3b      	subs	r3, r7, #0
 800ee80:	bfb9      	ittee	lt
 800ee82:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800ee86:	9301      	strlt	r3, [sp, #4]
 800ee88:	2300      	movge	r3, #0
 800ee8a:	602b      	strge	r3, [r5, #0]
 800ee8c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800ee90:	4baf      	ldr	r3, [pc, #700]	; (800f150 <_dtoa_r+0x300>)
 800ee92:	bfbc      	itt	lt
 800ee94:	2201      	movlt	r2, #1
 800ee96:	602a      	strlt	r2, [r5, #0]
 800ee98:	ea33 0308 	bics.w	r3, r3, r8
 800ee9c:	d116      	bne.n	800eecc <_dtoa_r+0x7c>
 800ee9e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800eea0:	f242 730f 	movw	r3, #9999	; 0x270f
 800eea4:	6013      	str	r3, [r2, #0]
 800eea6:	9b00      	ldr	r3, [sp, #0]
 800eea8:	b923      	cbnz	r3, 800eeb4 <_dtoa_r+0x64>
 800eeaa:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800eeae:	2800      	cmp	r0, #0
 800eeb0:	f000 8543 	beq.w	800f93a <_dtoa_r+0xaea>
 800eeb4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800eeb6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800f164 <_dtoa_r+0x314>
 800eeba:	b11b      	cbz	r3, 800eec4 <_dtoa_r+0x74>
 800eebc:	f10b 0303 	add.w	r3, fp, #3
 800eec0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800eec2:	6013      	str	r3, [r2, #0]
 800eec4:	4658      	mov	r0, fp
 800eec6:	b017      	add	sp, #92	; 0x5c
 800eec8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eecc:	e9dd 6700 	ldrd	r6, r7, [sp]
 800eed0:	2200      	movs	r2, #0
 800eed2:	2300      	movs	r3, #0
 800eed4:	4630      	mov	r0, r6
 800eed6:	4639      	mov	r1, r7
 800eed8:	f7f1 fe06 	bl	8000ae8 <__aeabi_dcmpeq>
 800eedc:	4681      	mov	r9, r0
 800eede:	b160      	cbz	r0, 800eefa <_dtoa_r+0xaa>
 800eee0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800eee2:	2301      	movs	r3, #1
 800eee4:	6013      	str	r3, [r2, #0]
 800eee6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800eee8:	2b00      	cmp	r3, #0
 800eeea:	f000 8522 	beq.w	800f932 <_dtoa_r+0xae2>
 800eeee:	4b99      	ldr	r3, [pc, #612]	; (800f154 <_dtoa_r+0x304>)
 800eef0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800eef2:	f103 3bff 	add.w	fp, r3, #4294967295
 800eef6:	6013      	str	r3, [r2, #0]
 800eef8:	e7e4      	b.n	800eec4 <_dtoa_r+0x74>
 800eefa:	aa14      	add	r2, sp, #80	; 0x50
 800eefc:	a915      	add	r1, sp, #84	; 0x54
 800eefe:	ec47 6b10 	vmov	d0, r6, r7
 800ef02:	4620      	mov	r0, r4
 800ef04:	f001 fe1a 	bl	8010b3c <__d2b>
 800ef08:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800ef0c:	9004      	str	r0, [sp, #16]
 800ef0e:	2d00      	cmp	r5, #0
 800ef10:	d07c      	beq.n	800f00c <_dtoa_r+0x1bc>
 800ef12:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ef16:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800ef1a:	46b2      	mov	sl, r6
 800ef1c:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800ef20:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ef24:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800ef28:	2200      	movs	r2, #0
 800ef2a:	4b8b      	ldr	r3, [pc, #556]	; (800f158 <_dtoa_r+0x308>)
 800ef2c:	4650      	mov	r0, sl
 800ef2e:	4659      	mov	r1, fp
 800ef30:	f7f1 f9ba 	bl	80002a8 <__aeabi_dsub>
 800ef34:	a380      	add	r3, pc, #512	; (adr r3, 800f138 <_dtoa_r+0x2e8>)
 800ef36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef3a:	f7f1 fb6d 	bl	8000618 <__aeabi_dmul>
 800ef3e:	a380      	add	r3, pc, #512	; (adr r3, 800f140 <_dtoa_r+0x2f0>)
 800ef40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef44:	f7f1 f9b2 	bl	80002ac <__adddf3>
 800ef48:	4606      	mov	r6, r0
 800ef4a:	4628      	mov	r0, r5
 800ef4c:	460f      	mov	r7, r1
 800ef4e:	f7f1 faf9 	bl	8000544 <__aeabi_i2d>
 800ef52:	a37d      	add	r3, pc, #500	; (adr r3, 800f148 <_dtoa_r+0x2f8>)
 800ef54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef58:	f7f1 fb5e 	bl	8000618 <__aeabi_dmul>
 800ef5c:	4602      	mov	r2, r0
 800ef5e:	460b      	mov	r3, r1
 800ef60:	4630      	mov	r0, r6
 800ef62:	4639      	mov	r1, r7
 800ef64:	f7f1 f9a2 	bl	80002ac <__adddf3>
 800ef68:	4606      	mov	r6, r0
 800ef6a:	460f      	mov	r7, r1
 800ef6c:	f7f1 fe04 	bl	8000b78 <__aeabi_d2iz>
 800ef70:	2200      	movs	r2, #0
 800ef72:	4682      	mov	sl, r0
 800ef74:	2300      	movs	r3, #0
 800ef76:	4630      	mov	r0, r6
 800ef78:	4639      	mov	r1, r7
 800ef7a:	f7f1 fdbf 	bl	8000afc <__aeabi_dcmplt>
 800ef7e:	b148      	cbz	r0, 800ef94 <_dtoa_r+0x144>
 800ef80:	4650      	mov	r0, sl
 800ef82:	f7f1 fadf 	bl	8000544 <__aeabi_i2d>
 800ef86:	4632      	mov	r2, r6
 800ef88:	463b      	mov	r3, r7
 800ef8a:	f7f1 fdad 	bl	8000ae8 <__aeabi_dcmpeq>
 800ef8e:	b908      	cbnz	r0, 800ef94 <_dtoa_r+0x144>
 800ef90:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ef94:	f1ba 0f16 	cmp.w	sl, #22
 800ef98:	d859      	bhi.n	800f04e <_dtoa_r+0x1fe>
 800ef9a:	4970      	ldr	r1, [pc, #448]	; (800f15c <_dtoa_r+0x30c>)
 800ef9c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800efa0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800efa4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800efa8:	f7f1 fdc6 	bl	8000b38 <__aeabi_dcmpgt>
 800efac:	2800      	cmp	r0, #0
 800efae:	d050      	beq.n	800f052 <_dtoa_r+0x202>
 800efb0:	f10a 3aff 	add.w	sl, sl, #4294967295
 800efb4:	2300      	movs	r3, #0
 800efb6:	930f      	str	r3, [sp, #60]	; 0x3c
 800efb8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800efba:	1b5d      	subs	r5, r3, r5
 800efbc:	f1b5 0801 	subs.w	r8, r5, #1
 800efc0:	bf49      	itett	mi
 800efc2:	f1c5 0301 	rsbmi	r3, r5, #1
 800efc6:	2300      	movpl	r3, #0
 800efc8:	9305      	strmi	r3, [sp, #20]
 800efca:	f04f 0800 	movmi.w	r8, #0
 800efce:	bf58      	it	pl
 800efd0:	9305      	strpl	r3, [sp, #20]
 800efd2:	f1ba 0f00 	cmp.w	sl, #0
 800efd6:	db3e      	blt.n	800f056 <_dtoa_r+0x206>
 800efd8:	2300      	movs	r3, #0
 800efda:	44d0      	add	r8, sl
 800efdc:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800efe0:	9307      	str	r3, [sp, #28]
 800efe2:	9b06      	ldr	r3, [sp, #24]
 800efe4:	2b09      	cmp	r3, #9
 800efe6:	f200 808d 	bhi.w	800f104 <_dtoa_r+0x2b4>
 800efea:	2b05      	cmp	r3, #5
 800efec:	bfc4      	itt	gt
 800efee:	3b04      	subgt	r3, #4
 800eff0:	9306      	strgt	r3, [sp, #24]
 800eff2:	9b06      	ldr	r3, [sp, #24]
 800eff4:	f1a3 0302 	sub.w	r3, r3, #2
 800eff8:	bfcc      	ite	gt
 800effa:	2500      	movgt	r5, #0
 800effc:	2501      	movle	r5, #1
 800effe:	2b03      	cmp	r3, #3
 800f000:	f200 808c 	bhi.w	800f11c <_dtoa_r+0x2cc>
 800f004:	e8df f003 	tbb	[pc, r3]
 800f008:	6e317c7a 	.word	0x6e317c7a
 800f00c:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800f010:	441d      	add	r5, r3
 800f012:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800f016:	2820      	cmp	r0, #32
 800f018:	dd13      	ble.n	800f042 <_dtoa_r+0x1f2>
 800f01a:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800f01e:	9b00      	ldr	r3, [sp, #0]
 800f020:	fa08 f800 	lsl.w	r8, r8, r0
 800f024:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800f028:	fa23 f000 	lsr.w	r0, r3, r0
 800f02c:	ea48 0000 	orr.w	r0, r8, r0
 800f030:	f7f1 fa78 	bl	8000524 <__aeabi_ui2d>
 800f034:	2301      	movs	r3, #1
 800f036:	4682      	mov	sl, r0
 800f038:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800f03c:	3d01      	subs	r5, #1
 800f03e:	9313      	str	r3, [sp, #76]	; 0x4c
 800f040:	e772      	b.n	800ef28 <_dtoa_r+0xd8>
 800f042:	9b00      	ldr	r3, [sp, #0]
 800f044:	f1c0 0020 	rsb	r0, r0, #32
 800f048:	fa03 f000 	lsl.w	r0, r3, r0
 800f04c:	e7f0      	b.n	800f030 <_dtoa_r+0x1e0>
 800f04e:	2301      	movs	r3, #1
 800f050:	e7b1      	b.n	800efb6 <_dtoa_r+0x166>
 800f052:	900f      	str	r0, [sp, #60]	; 0x3c
 800f054:	e7b0      	b.n	800efb8 <_dtoa_r+0x168>
 800f056:	9b05      	ldr	r3, [sp, #20]
 800f058:	eba3 030a 	sub.w	r3, r3, sl
 800f05c:	9305      	str	r3, [sp, #20]
 800f05e:	f1ca 0300 	rsb	r3, sl, #0
 800f062:	9307      	str	r3, [sp, #28]
 800f064:	2300      	movs	r3, #0
 800f066:	930e      	str	r3, [sp, #56]	; 0x38
 800f068:	e7bb      	b.n	800efe2 <_dtoa_r+0x192>
 800f06a:	2301      	movs	r3, #1
 800f06c:	930a      	str	r3, [sp, #40]	; 0x28
 800f06e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f070:	2b00      	cmp	r3, #0
 800f072:	dd56      	ble.n	800f122 <_dtoa_r+0x2d2>
 800f074:	9302      	str	r3, [sp, #8]
 800f076:	4699      	mov	r9, r3
 800f078:	2200      	movs	r2, #0
 800f07a:	6462      	str	r2, [r4, #68]	; 0x44
 800f07c:	2204      	movs	r2, #4
 800f07e:	f102 0014 	add.w	r0, r2, #20
 800f082:	4298      	cmp	r0, r3
 800f084:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800f086:	d951      	bls.n	800f12c <_dtoa_r+0x2dc>
 800f088:	4620      	mov	r0, r4
 800f08a:	f001 fa40 	bl	801050e <_Balloc>
 800f08e:	f1b9 0f0e 	cmp.w	r9, #14
 800f092:	4683      	mov	fp, r0
 800f094:	6420      	str	r0, [r4, #64]	; 0x40
 800f096:	f200 80e8 	bhi.w	800f26a <_dtoa_r+0x41a>
 800f09a:	2d00      	cmp	r5, #0
 800f09c:	f000 80e5 	beq.w	800f26a <_dtoa_r+0x41a>
 800f0a0:	ed9d 7b00 	vldr	d7, [sp]
 800f0a4:	f1ba 0f00 	cmp.w	sl, #0
 800f0a8:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800f0ac:	dd76      	ble.n	800f19c <_dtoa_r+0x34c>
 800f0ae:	4a2b      	ldr	r2, [pc, #172]	; (800f15c <_dtoa_r+0x30c>)
 800f0b0:	f00a 030f 	and.w	r3, sl, #15
 800f0b4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800f0b8:	ed93 7b00 	vldr	d7, [r3]
 800f0bc:	ea4f 162a 	mov.w	r6, sl, asr #4
 800f0c0:	06f0      	lsls	r0, r6, #27
 800f0c2:	ed8d 7b08 	vstr	d7, [sp, #32]
 800f0c6:	d567      	bpl.n	800f198 <_dtoa_r+0x348>
 800f0c8:	4b25      	ldr	r3, [pc, #148]	; (800f160 <_dtoa_r+0x310>)
 800f0ca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800f0ce:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f0d2:	f7f1 fbcb 	bl	800086c <__aeabi_ddiv>
 800f0d6:	e9cd 0100 	strd	r0, r1, [sp]
 800f0da:	f006 060f 	and.w	r6, r6, #15
 800f0de:	2503      	movs	r5, #3
 800f0e0:	4f1f      	ldr	r7, [pc, #124]	; (800f160 <_dtoa_r+0x310>)
 800f0e2:	e04e      	b.n	800f182 <_dtoa_r+0x332>
 800f0e4:	2301      	movs	r3, #1
 800f0e6:	930a      	str	r3, [sp, #40]	; 0x28
 800f0e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f0ea:	4453      	add	r3, sl
 800f0ec:	f103 0901 	add.w	r9, r3, #1
 800f0f0:	9302      	str	r3, [sp, #8]
 800f0f2:	464b      	mov	r3, r9
 800f0f4:	2b01      	cmp	r3, #1
 800f0f6:	bfb8      	it	lt
 800f0f8:	2301      	movlt	r3, #1
 800f0fa:	e7bd      	b.n	800f078 <_dtoa_r+0x228>
 800f0fc:	2300      	movs	r3, #0
 800f0fe:	e7b5      	b.n	800f06c <_dtoa_r+0x21c>
 800f100:	2300      	movs	r3, #0
 800f102:	e7f0      	b.n	800f0e6 <_dtoa_r+0x296>
 800f104:	2501      	movs	r5, #1
 800f106:	2300      	movs	r3, #0
 800f108:	9306      	str	r3, [sp, #24]
 800f10a:	950a      	str	r5, [sp, #40]	; 0x28
 800f10c:	f04f 33ff 	mov.w	r3, #4294967295
 800f110:	9302      	str	r3, [sp, #8]
 800f112:	4699      	mov	r9, r3
 800f114:	2200      	movs	r2, #0
 800f116:	2312      	movs	r3, #18
 800f118:	920b      	str	r2, [sp, #44]	; 0x2c
 800f11a:	e7ad      	b.n	800f078 <_dtoa_r+0x228>
 800f11c:	2301      	movs	r3, #1
 800f11e:	930a      	str	r3, [sp, #40]	; 0x28
 800f120:	e7f4      	b.n	800f10c <_dtoa_r+0x2bc>
 800f122:	2301      	movs	r3, #1
 800f124:	9302      	str	r3, [sp, #8]
 800f126:	4699      	mov	r9, r3
 800f128:	461a      	mov	r2, r3
 800f12a:	e7f5      	b.n	800f118 <_dtoa_r+0x2c8>
 800f12c:	3101      	adds	r1, #1
 800f12e:	6461      	str	r1, [r4, #68]	; 0x44
 800f130:	0052      	lsls	r2, r2, #1
 800f132:	e7a4      	b.n	800f07e <_dtoa_r+0x22e>
 800f134:	f3af 8000 	nop.w
 800f138:	636f4361 	.word	0x636f4361
 800f13c:	3fd287a7 	.word	0x3fd287a7
 800f140:	8b60c8b3 	.word	0x8b60c8b3
 800f144:	3fc68a28 	.word	0x3fc68a28
 800f148:	509f79fb 	.word	0x509f79fb
 800f14c:	3fd34413 	.word	0x3fd34413
 800f150:	7ff00000 	.word	0x7ff00000
 800f154:	080119db 	.word	0x080119db
 800f158:	3ff80000 	.word	0x3ff80000
 800f15c:	08011a40 	.word	0x08011a40
 800f160:	08011a18 	.word	0x08011a18
 800f164:	08011a05 	.word	0x08011a05
 800f168:	07f1      	lsls	r1, r6, #31
 800f16a:	d508      	bpl.n	800f17e <_dtoa_r+0x32e>
 800f16c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800f170:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f174:	f7f1 fa50 	bl	8000618 <__aeabi_dmul>
 800f178:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800f17c:	3501      	adds	r5, #1
 800f17e:	1076      	asrs	r6, r6, #1
 800f180:	3708      	adds	r7, #8
 800f182:	2e00      	cmp	r6, #0
 800f184:	d1f0      	bne.n	800f168 <_dtoa_r+0x318>
 800f186:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800f18a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f18e:	f7f1 fb6d 	bl	800086c <__aeabi_ddiv>
 800f192:	e9cd 0100 	strd	r0, r1, [sp]
 800f196:	e01a      	b.n	800f1ce <_dtoa_r+0x37e>
 800f198:	2502      	movs	r5, #2
 800f19a:	e7a1      	b.n	800f0e0 <_dtoa_r+0x290>
 800f19c:	f000 80a0 	beq.w	800f2e0 <_dtoa_r+0x490>
 800f1a0:	f1ca 0600 	rsb	r6, sl, #0
 800f1a4:	4b9f      	ldr	r3, [pc, #636]	; (800f424 <_dtoa_r+0x5d4>)
 800f1a6:	4fa0      	ldr	r7, [pc, #640]	; (800f428 <_dtoa_r+0x5d8>)
 800f1a8:	f006 020f 	and.w	r2, r6, #15
 800f1ac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f1b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1b4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800f1b8:	f7f1 fa2e 	bl	8000618 <__aeabi_dmul>
 800f1bc:	e9cd 0100 	strd	r0, r1, [sp]
 800f1c0:	1136      	asrs	r6, r6, #4
 800f1c2:	2300      	movs	r3, #0
 800f1c4:	2502      	movs	r5, #2
 800f1c6:	2e00      	cmp	r6, #0
 800f1c8:	d17f      	bne.n	800f2ca <_dtoa_r+0x47a>
 800f1ca:	2b00      	cmp	r3, #0
 800f1cc:	d1e1      	bne.n	800f192 <_dtoa_r+0x342>
 800f1ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f1d0:	2b00      	cmp	r3, #0
 800f1d2:	f000 8087 	beq.w	800f2e4 <_dtoa_r+0x494>
 800f1d6:	e9dd 6700 	ldrd	r6, r7, [sp]
 800f1da:	2200      	movs	r2, #0
 800f1dc:	4b93      	ldr	r3, [pc, #588]	; (800f42c <_dtoa_r+0x5dc>)
 800f1de:	4630      	mov	r0, r6
 800f1e0:	4639      	mov	r1, r7
 800f1e2:	f7f1 fc8b 	bl	8000afc <__aeabi_dcmplt>
 800f1e6:	2800      	cmp	r0, #0
 800f1e8:	d07c      	beq.n	800f2e4 <_dtoa_r+0x494>
 800f1ea:	f1b9 0f00 	cmp.w	r9, #0
 800f1ee:	d079      	beq.n	800f2e4 <_dtoa_r+0x494>
 800f1f0:	9b02      	ldr	r3, [sp, #8]
 800f1f2:	2b00      	cmp	r3, #0
 800f1f4:	dd35      	ble.n	800f262 <_dtoa_r+0x412>
 800f1f6:	f10a 33ff 	add.w	r3, sl, #4294967295
 800f1fa:	9308      	str	r3, [sp, #32]
 800f1fc:	4639      	mov	r1, r7
 800f1fe:	2200      	movs	r2, #0
 800f200:	4b8b      	ldr	r3, [pc, #556]	; (800f430 <_dtoa_r+0x5e0>)
 800f202:	4630      	mov	r0, r6
 800f204:	f7f1 fa08 	bl	8000618 <__aeabi_dmul>
 800f208:	e9cd 0100 	strd	r0, r1, [sp]
 800f20c:	9f02      	ldr	r7, [sp, #8]
 800f20e:	3501      	adds	r5, #1
 800f210:	4628      	mov	r0, r5
 800f212:	f7f1 f997 	bl	8000544 <__aeabi_i2d>
 800f216:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f21a:	f7f1 f9fd 	bl	8000618 <__aeabi_dmul>
 800f21e:	2200      	movs	r2, #0
 800f220:	4b84      	ldr	r3, [pc, #528]	; (800f434 <_dtoa_r+0x5e4>)
 800f222:	f7f1 f843 	bl	80002ac <__adddf3>
 800f226:	4605      	mov	r5, r0
 800f228:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800f22c:	2f00      	cmp	r7, #0
 800f22e:	d15d      	bne.n	800f2ec <_dtoa_r+0x49c>
 800f230:	2200      	movs	r2, #0
 800f232:	4b81      	ldr	r3, [pc, #516]	; (800f438 <_dtoa_r+0x5e8>)
 800f234:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f238:	f7f1 f836 	bl	80002a8 <__aeabi_dsub>
 800f23c:	462a      	mov	r2, r5
 800f23e:	4633      	mov	r3, r6
 800f240:	e9cd 0100 	strd	r0, r1, [sp]
 800f244:	f7f1 fc78 	bl	8000b38 <__aeabi_dcmpgt>
 800f248:	2800      	cmp	r0, #0
 800f24a:	f040 8288 	bne.w	800f75e <_dtoa_r+0x90e>
 800f24e:	462a      	mov	r2, r5
 800f250:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800f254:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f258:	f7f1 fc50 	bl	8000afc <__aeabi_dcmplt>
 800f25c:	2800      	cmp	r0, #0
 800f25e:	f040 827c 	bne.w	800f75a <_dtoa_r+0x90a>
 800f262:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800f266:	e9cd 2300 	strd	r2, r3, [sp]
 800f26a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	f2c0 8150 	blt.w	800f512 <_dtoa_r+0x6c2>
 800f272:	f1ba 0f0e 	cmp.w	sl, #14
 800f276:	f300 814c 	bgt.w	800f512 <_dtoa_r+0x6c2>
 800f27a:	4b6a      	ldr	r3, [pc, #424]	; (800f424 <_dtoa_r+0x5d4>)
 800f27c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800f280:	ed93 7b00 	vldr	d7, [r3]
 800f284:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f286:	2b00      	cmp	r3, #0
 800f288:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f28c:	f280 80d8 	bge.w	800f440 <_dtoa_r+0x5f0>
 800f290:	f1b9 0f00 	cmp.w	r9, #0
 800f294:	f300 80d4 	bgt.w	800f440 <_dtoa_r+0x5f0>
 800f298:	f040 825e 	bne.w	800f758 <_dtoa_r+0x908>
 800f29c:	2200      	movs	r2, #0
 800f29e:	4b66      	ldr	r3, [pc, #408]	; (800f438 <_dtoa_r+0x5e8>)
 800f2a0:	ec51 0b17 	vmov	r0, r1, d7
 800f2a4:	f7f1 f9b8 	bl	8000618 <__aeabi_dmul>
 800f2a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f2ac:	f7f1 fc3a 	bl	8000b24 <__aeabi_dcmpge>
 800f2b0:	464f      	mov	r7, r9
 800f2b2:	464e      	mov	r6, r9
 800f2b4:	2800      	cmp	r0, #0
 800f2b6:	f040 8234 	bne.w	800f722 <_dtoa_r+0x8d2>
 800f2ba:	2331      	movs	r3, #49	; 0x31
 800f2bc:	f10b 0501 	add.w	r5, fp, #1
 800f2c0:	f88b 3000 	strb.w	r3, [fp]
 800f2c4:	f10a 0a01 	add.w	sl, sl, #1
 800f2c8:	e22f      	b.n	800f72a <_dtoa_r+0x8da>
 800f2ca:	07f2      	lsls	r2, r6, #31
 800f2cc:	d505      	bpl.n	800f2da <_dtoa_r+0x48a>
 800f2ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f2d2:	f7f1 f9a1 	bl	8000618 <__aeabi_dmul>
 800f2d6:	3501      	adds	r5, #1
 800f2d8:	2301      	movs	r3, #1
 800f2da:	1076      	asrs	r6, r6, #1
 800f2dc:	3708      	adds	r7, #8
 800f2de:	e772      	b.n	800f1c6 <_dtoa_r+0x376>
 800f2e0:	2502      	movs	r5, #2
 800f2e2:	e774      	b.n	800f1ce <_dtoa_r+0x37e>
 800f2e4:	f8cd a020 	str.w	sl, [sp, #32]
 800f2e8:	464f      	mov	r7, r9
 800f2ea:	e791      	b.n	800f210 <_dtoa_r+0x3c0>
 800f2ec:	4b4d      	ldr	r3, [pc, #308]	; (800f424 <_dtoa_r+0x5d4>)
 800f2ee:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800f2f2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800f2f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	d047      	beq.n	800f38c <_dtoa_r+0x53c>
 800f2fc:	4602      	mov	r2, r0
 800f2fe:	460b      	mov	r3, r1
 800f300:	2000      	movs	r0, #0
 800f302:	494e      	ldr	r1, [pc, #312]	; (800f43c <_dtoa_r+0x5ec>)
 800f304:	f7f1 fab2 	bl	800086c <__aeabi_ddiv>
 800f308:	462a      	mov	r2, r5
 800f30a:	4633      	mov	r3, r6
 800f30c:	f7f0 ffcc 	bl	80002a8 <__aeabi_dsub>
 800f310:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800f314:	465d      	mov	r5, fp
 800f316:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f31a:	f7f1 fc2d 	bl	8000b78 <__aeabi_d2iz>
 800f31e:	4606      	mov	r6, r0
 800f320:	f7f1 f910 	bl	8000544 <__aeabi_i2d>
 800f324:	4602      	mov	r2, r0
 800f326:	460b      	mov	r3, r1
 800f328:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f32c:	f7f0 ffbc 	bl	80002a8 <__aeabi_dsub>
 800f330:	3630      	adds	r6, #48	; 0x30
 800f332:	f805 6b01 	strb.w	r6, [r5], #1
 800f336:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800f33a:	e9cd 0100 	strd	r0, r1, [sp]
 800f33e:	f7f1 fbdd 	bl	8000afc <__aeabi_dcmplt>
 800f342:	2800      	cmp	r0, #0
 800f344:	d163      	bne.n	800f40e <_dtoa_r+0x5be>
 800f346:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f34a:	2000      	movs	r0, #0
 800f34c:	4937      	ldr	r1, [pc, #220]	; (800f42c <_dtoa_r+0x5dc>)
 800f34e:	f7f0 ffab 	bl	80002a8 <__aeabi_dsub>
 800f352:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800f356:	f7f1 fbd1 	bl	8000afc <__aeabi_dcmplt>
 800f35a:	2800      	cmp	r0, #0
 800f35c:	f040 80b7 	bne.w	800f4ce <_dtoa_r+0x67e>
 800f360:	eba5 030b 	sub.w	r3, r5, fp
 800f364:	429f      	cmp	r7, r3
 800f366:	f77f af7c 	ble.w	800f262 <_dtoa_r+0x412>
 800f36a:	2200      	movs	r2, #0
 800f36c:	4b30      	ldr	r3, [pc, #192]	; (800f430 <_dtoa_r+0x5e0>)
 800f36e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f372:	f7f1 f951 	bl	8000618 <__aeabi_dmul>
 800f376:	2200      	movs	r2, #0
 800f378:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800f37c:	4b2c      	ldr	r3, [pc, #176]	; (800f430 <_dtoa_r+0x5e0>)
 800f37e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f382:	f7f1 f949 	bl	8000618 <__aeabi_dmul>
 800f386:	e9cd 0100 	strd	r0, r1, [sp]
 800f38a:	e7c4      	b.n	800f316 <_dtoa_r+0x4c6>
 800f38c:	462a      	mov	r2, r5
 800f38e:	4633      	mov	r3, r6
 800f390:	f7f1 f942 	bl	8000618 <__aeabi_dmul>
 800f394:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800f398:	eb0b 0507 	add.w	r5, fp, r7
 800f39c:	465e      	mov	r6, fp
 800f39e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f3a2:	f7f1 fbe9 	bl	8000b78 <__aeabi_d2iz>
 800f3a6:	4607      	mov	r7, r0
 800f3a8:	f7f1 f8cc 	bl	8000544 <__aeabi_i2d>
 800f3ac:	3730      	adds	r7, #48	; 0x30
 800f3ae:	4602      	mov	r2, r0
 800f3b0:	460b      	mov	r3, r1
 800f3b2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f3b6:	f7f0 ff77 	bl	80002a8 <__aeabi_dsub>
 800f3ba:	f806 7b01 	strb.w	r7, [r6], #1
 800f3be:	42ae      	cmp	r6, r5
 800f3c0:	e9cd 0100 	strd	r0, r1, [sp]
 800f3c4:	f04f 0200 	mov.w	r2, #0
 800f3c8:	d126      	bne.n	800f418 <_dtoa_r+0x5c8>
 800f3ca:	4b1c      	ldr	r3, [pc, #112]	; (800f43c <_dtoa_r+0x5ec>)
 800f3cc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f3d0:	f7f0 ff6c 	bl	80002ac <__adddf3>
 800f3d4:	4602      	mov	r2, r0
 800f3d6:	460b      	mov	r3, r1
 800f3d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f3dc:	f7f1 fbac 	bl	8000b38 <__aeabi_dcmpgt>
 800f3e0:	2800      	cmp	r0, #0
 800f3e2:	d174      	bne.n	800f4ce <_dtoa_r+0x67e>
 800f3e4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800f3e8:	2000      	movs	r0, #0
 800f3ea:	4914      	ldr	r1, [pc, #80]	; (800f43c <_dtoa_r+0x5ec>)
 800f3ec:	f7f0 ff5c 	bl	80002a8 <__aeabi_dsub>
 800f3f0:	4602      	mov	r2, r0
 800f3f2:	460b      	mov	r3, r1
 800f3f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f3f8:	f7f1 fb80 	bl	8000afc <__aeabi_dcmplt>
 800f3fc:	2800      	cmp	r0, #0
 800f3fe:	f43f af30 	beq.w	800f262 <_dtoa_r+0x412>
 800f402:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800f406:	2b30      	cmp	r3, #48	; 0x30
 800f408:	f105 32ff 	add.w	r2, r5, #4294967295
 800f40c:	d002      	beq.n	800f414 <_dtoa_r+0x5c4>
 800f40e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800f412:	e04a      	b.n	800f4aa <_dtoa_r+0x65a>
 800f414:	4615      	mov	r5, r2
 800f416:	e7f4      	b.n	800f402 <_dtoa_r+0x5b2>
 800f418:	4b05      	ldr	r3, [pc, #20]	; (800f430 <_dtoa_r+0x5e0>)
 800f41a:	f7f1 f8fd 	bl	8000618 <__aeabi_dmul>
 800f41e:	e9cd 0100 	strd	r0, r1, [sp]
 800f422:	e7bc      	b.n	800f39e <_dtoa_r+0x54e>
 800f424:	08011a40 	.word	0x08011a40
 800f428:	08011a18 	.word	0x08011a18
 800f42c:	3ff00000 	.word	0x3ff00000
 800f430:	40240000 	.word	0x40240000
 800f434:	401c0000 	.word	0x401c0000
 800f438:	40140000 	.word	0x40140000
 800f43c:	3fe00000 	.word	0x3fe00000
 800f440:	e9dd 6700 	ldrd	r6, r7, [sp]
 800f444:	465d      	mov	r5, fp
 800f446:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f44a:	4630      	mov	r0, r6
 800f44c:	4639      	mov	r1, r7
 800f44e:	f7f1 fa0d 	bl	800086c <__aeabi_ddiv>
 800f452:	f7f1 fb91 	bl	8000b78 <__aeabi_d2iz>
 800f456:	4680      	mov	r8, r0
 800f458:	f7f1 f874 	bl	8000544 <__aeabi_i2d>
 800f45c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f460:	f7f1 f8da 	bl	8000618 <__aeabi_dmul>
 800f464:	4602      	mov	r2, r0
 800f466:	460b      	mov	r3, r1
 800f468:	4630      	mov	r0, r6
 800f46a:	4639      	mov	r1, r7
 800f46c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800f470:	f7f0 ff1a 	bl	80002a8 <__aeabi_dsub>
 800f474:	f805 6b01 	strb.w	r6, [r5], #1
 800f478:	eba5 060b 	sub.w	r6, r5, fp
 800f47c:	45b1      	cmp	r9, r6
 800f47e:	4602      	mov	r2, r0
 800f480:	460b      	mov	r3, r1
 800f482:	d139      	bne.n	800f4f8 <_dtoa_r+0x6a8>
 800f484:	f7f0 ff12 	bl	80002ac <__adddf3>
 800f488:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f48c:	4606      	mov	r6, r0
 800f48e:	460f      	mov	r7, r1
 800f490:	f7f1 fb52 	bl	8000b38 <__aeabi_dcmpgt>
 800f494:	b9c8      	cbnz	r0, 800f4ca <_dtoa_r+0x67a>
 800f496:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f49a:	4630      	mov	r0, r6
 800f49c:	4639      	mov	r1, r7
 800f49e:	f7f1 fb23 	bl	8000ae8 <__aeabi_dcmpeq>
 800f4a2:	b110      	cbz	r0, 800f4aa <_dtoa_r+0x65a>
 800f4a4:	f018 0f01 	tst.w	r8, #1
 800f4a8:	d10f      	bne.n	800f4ca <_dtoa_r+0x67a>
 800f4aa:	9904      	ldr	r1, [sp, #16]
 800f4ac:	4620      	mov	r0, r4
 800f4ae:	f001 f853 	bl	8010558 <_Bfree>
 800f4b2:	2300      	movs	r3, #0
 800f4b4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f4b6:	702b      	strb	r3, [r5, #0]
 800f4b8:	f10a 0301 	add.w	r3, sl, #1
 800f4bc:	6013      	str	r3, [r2, #0]
 800f4be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	f43f acff 	beq.w	800eec4 <_dtoa_r+0x74>
 800f4c6:	601d      	str	r5, [r3, #0]
 800f4c8:	e4fc      	b.n	800eec4 <_dtoa_r+0x74>
 800f4ca:	f8cd a020 	str.w	sl, [sp, #32]
 800f4ce:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800f4d2:	2a39      	cmp	r2, #57	; 0x39
 800f4d4:	f105 33ff 	add.w	r3, r5, #4294967295
 800f4d8:	d108      	bne.n	800f4ec <_dtoa_r+0x69c>
 800f4da:	459b      	cmp	fp, r3
 800f4dc:	d10a      	bne.n	800f4f4 <_dtoa_r+0x6a4>
 800f4de:	9b08      	ldr	r3, [sp, #32]
 800f4e0:	3301      	adds	r3, #1
 800f4e2:	9308      	str	r3, [sp, #32]
 800f4e4:	2330      	movs	r3, #48	; 0x30
 800f4e6:	f88b 3000 	strb.w	r3, [fp]
 800f4ea:	465b      	mov	r3, fp
 800f4ec:	781a      	ldrb	r2, [r3, #0]
 800f4ee:	3201      	adds	r2, #1
 800f4f0:	701a      	strb	r2, [r3, #0]
 800f4f2:	e78c      	b.n	800f40e <_dtoa_r+0x5be>
 800f4f4:	461d      	mov	r5, r3
 800f4f6:	e7ea      	b.n	800f4ce <_dtoa_r+0x67e>
 800f4f8:	2200      	movs	r2, #0
 800f4fa:	4b9b      	ldr	r3, [pc, #620]	; (800f768 <_dtoa_r+0x918>)
 800f4fc:	f7f1 f88c 	bl	8000618 <__aeabi_dmul>
 800f500:	2200      	movs	r2, #0
 800f502:	2300      	movs	r3, #0
 800f504:	4606      	mov	r6, r0
 800f506:	460f      	mov	r7, r1
 800f508:	f7f1 faee 	bl	8000ae8 <__aeabi_dcmpeq>
 800f50c:	2800      	cmp	r0, #0
 800f50e:	d09a      	beq.n	800f446 <_dtoa_r+0x5f6>
 800f510:	e7cb      	b.n	800f4aa <_dtoa_r+0x65a>
 800f512:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f514:	2a00      	cmp	r2, #0
 800f516:	f000 808b 	beq.w	800f630 <_dtoa_r+0x7e0>
 800f51a:	9a06      	ldr	r2, [sp, #24]
 800f51c:	2a01      	cmp	r2, #1
 800f51e:	dc6e      	bgt.n	800f5fe <_dtoa_r+0x7ae>
 800f520:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800f522:	2a00      	cmp	r2, #0
 800f524:	d067      	beq.n	800f5f6 <_dtoa_r+0x7a6>
 800f526:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800f52a:	9f07      	ldr	r7, [sp, #28]
 800f52c:	9d05      	ldr	r5, [sp, #20]
 800f52e:	9a05      	ldr	r2, [sp, #20]
 800f530:	2101      	movs	r1, #1
 800f532:	441a      	add	r2, r3
 800f534:	4620      	mov	r0, r4
 800f536:	9205      	str	r2, [sp, #20]
 800f538:	4498      	add	r8, r3
 800f53a:	f001 f8dd 	bl	80106f8 <__i2b>
 800f53e:	4606      	mov	r6, r0
 800f540:	2d00      	cmp	r5, #0
 800f542:	dd0c      	ble.n	800f55e <_dtoa_r+0x70e>
 800f544:	f1b8 0f00 	cmp.w	r8, #0
 800f548:	dd09      	ble.n	800f55e <_dtoa_r+0x70e>
 800f54a:	4545      	cmp	r5, r8
 800f54c:	9a05      	ldr	r2, [sp, #20]
 800f54e:	462b      	mov	r3, r5
 800f550:	bfa8      	it	ge
 800f552:	4643      	movge	r3, r8
 800f554:	1ad2      	subs	r2, r2, r3
 800f556:	9205      	str	r2, [sp, #20]
 800f558:	1aed      	subs	r5, r5, r3
 800f55a:	eba8 0803 	sub.w	r8, r8, r3
 800f55e:	9b07      	ldr	r3, [sp, #28]
 800f560:	b1eb      	cbz	r3, 800f59e <_dtoa_r+0x74e>
 800f562:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f564:	2b00      	cmp	r3, #0
 800f566:	d067      	beq.n	800f638 <_dtoa_r+0x7e8>
 800f568:	b18f      	cbz	r7, 800f58e <_dtoa_r+0x73e>
 800f56a:	4631      	mov	r1, r6
 800f56c:	463a      	mov	r2, r7
 800f56e:	4620      	mov	r0, r4
 800f570:	f001 f962 	bl	8010838 <__pow5mult>
 800f574:	9a04      	ldr	r2, [sp, #16]
 800f576:	4601      	mov	r1, r0
 800f578:	4606      	mov	r6, r0
 800f57a:	4620      	mov	r0, r4
 800f57c:	f001 f8c5 	bl	801070a <__multiply>
 800f580:	9904      	ldr	r1, [sp, #16]
 800f582:	9008      	str	r0, [sp, #32]
 800f584:	4620      	mov	r0, r4
 800f586:	f000 ffe7 	bl	8010558 <_Bfree>
 800f58a:	9b08      	ldr	r3, [sp, #32]
 800f58c:	9304      	str	r3, [sp, #16]
 800f58e:	9b07      	ldr	r3, [sp, #28]
 800f590:	1bda      	subs	r2, r3, r7
 800f592:	d004      	beq.n	800f59e <_dtoa_r+0x74e>
 800f594:	9904      	ldr	r1, [sp, #16]
 800f596:	4620      	mov	r0, r4
 800f598:	f001 f94e 	bl	8010838 <__pow5mult>
 800f59c:	9004      	str	r0, [sp, #16]
 800f59e:	2101      	movs	r1, #1
 800f5a0:	4620      	mov	r0, r4
 800f5a2:	f001 f8a9 	bl	80106f8 <__i2b>
 800f5a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f5a8:	4607      	mov	r7, r0
 800f5aa:	2b00      	cmp	r3, #0
 800f5ac:	f000 81cf 	beq.w	800f94e <_dtoa_r+0xafe>
 800f5b0:	461a      	mov	r2, r3
 800f5b2:	4601      	mov	r1, r0
 800f5b4:	4620      	mov	r0, r4
 800f5b6:	f001 f93f 	bl	8010838 <__pow5mult>
 800f5ba:	9b06      	ldr	r3, [sp, #24]
 800f5bc:	2b01      	cmp	r3, #1
 800f5be:	4607      	mov	r7, r0
 800f5c0:	dc40      	bgt.n	800f644 <_dtoa_r+0x7f4>
 800f5c2:	9b00      	ldr	r3, [sp, #0]
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	d139      	bne.n	800f63c <_dtoa_r+0x7ec>
 800f5c8:	9b01      	ldr	r3, [sp, #4]
 800f5ca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	d136      	bne.n	800f640 <_dtoa_r+0x7f0>
 800f5d2:	9b01      	ldr	r3, [sp, #4]
 800f5d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f5d8:	0d1b      	lsrs	r3, r3, #20
 800f5da:	051b      	lsls	r3, r3, #20
 800f5dc:	b12b      	cbz	r3, 800f5ea <_dtoa_r+0x79a>
 800f5de:	9b05      	ldr	r3, [sp, #20]
 800f5e0:	3301      	adds	r3, #1
 800f5e2:	9305      	str	r3, [sp, #20]
 800f5e4:	f108 0801 	add.w	r8, r8, #1
 800f5e8:	2301      	movs	r3, #1
 800f5ea:	9307      	str	r3, [sp, #28]
 800f5ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f5ee:	2b00      	cmp	r3, #0
 800f5f0:	d12a      	bne.n	800f648 <_dtoa_r+0x7f8>
 800f5f2:	2001      	movs	r0, #1
 800f5f4:	e030      	b.n	800f658 <_dtoa_r+0x808>
 800f5f6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f5f8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800f5fc:	e795      	b.n	800f52a <_dtoa_r+0x6da>
 800f5fe:	9b07      	ldr	r3, [sp, #28]
 800f600:	f109 37ff 	add.w	r7, r9, #4294967295
 800f604:	42bb      	cmp	r3, r7
 800f606:	bfbf      	itttt	lt
 800f608:	9b07      	ldrlt	r3, [sp, #28]
 800f60a:	9707      	strlt	r7, [sp, #28]
 800f60c:	1afa      	sublt	r2, r7, r3
 800f60e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800f610:	bfbb      	ittet	lt
 800f612:	189b      	addlt	r3, r3, r2
 800f614:	930e      	strlt	r3, [sp, #56]	; 0x38
 800f616:	1bdf      	subge	r7, r3, r7
 800f618:	2700      	movlt	r7, #0
 800f61a:	f1b9 0f00 	cmp.w	r9, #0
 800f61e:	bfb5      	itete	lt
 800f620:	9b05      	ldrlt	r3, [sp, #20]
 800f622:	9d05      	ldrge	r5, [sp, #20]
 800f624:	eba3 0509 	sublt.w	r5, r3, r9
 800f628:	464b      	movge	r3, r9
 800f62a:	bfb8      	it	lt
 800f62c:	2300      	movlt	r3, #0
 800f62e:	e77e      	b.n	800f52e <_dtoa_r+0x6de>
 800f630:	9f07      	ldr	r7, [sp, #28]
 800f632:	9d05      	ldr	r5, [sp, #20]
 800f634:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800f636:	e783      	b.n	800f540 <_dtoa_r+0x6f0>
 800f638:	9a07      	ldr	r2, [sp, #28]
 800f63a:	e7ab      	b.n	800f594 <_dtoa_r+0x744>
 800f63c:	2300      	movs	r3, #0
 800f63e:	e7d4      	b.n	800f5ea <_dtoa_r+0x79a>
 800f640:	9b00      	ldr	r3, [sp, #0]
 800f642:	e7d2      	b.n	800f5ea <_dtoa_r+0x79a>
 800f644:	2300      	movs	r3, #0
 800f646:	9307      	str	r3, [sp, #28]
 800f648:	693b      	ldr	r3, [r7, #16]
 800f64a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800f64e:	6918      	ldr	r0, [r3, #16]
 800f650:	f001 f804 	bl	801065c <__hi0bits>
 800f654:	f1c0 0020 	rsb	r0, r0, #32
 800f658:	4440      	add	r0, r8
 800f65a:	f010 001f 	ands.w	r0, r0, #31
 800f65e:	d047      	beq.n	800f6f0 <_dtoa_r+0x8a0>
 800f660:	f1c0 0320 	rsb	r3, r0, #32
 800f664:	2b04      	cmp	r3, #4
 800f666:	dd3b      	ble.n	800f6e0 <_dtoa_r+0x890>
 800f668:	9b05      	ldr	r3, [sp, #20]
 800f66a:	f1c0 001c 	rsb	r0, r0, #28
 800f66e:	4403      	add	r3, r0
 800f670:	9305      	str	r3, [sp, #20]
 800f672:	4405      	add	r5, r0
 800f674:	4480      	add	r8, r0
 800f676:	9b05      	ldr	r3, [sp, #20]
 800f678:	2b00      	cmp	r3, #0
 800f67a:	dd05      	ble.n	800f688 <_dtoa_r+0x838>
 800f67c:	461a      	mov	r2, r3
 800f67e:	9904      	ldr	r1, [sp, #16]
 800f680:	4620      	mov	r0, r4
 800f682:	f001 f919 	bl	80108b8 <__lshift>
 800f686:	9004      	str	r0, [sp, #16]
 800f688:	f1b8 0f00 	cmp.w	r8, #0
 800f68c:	dd05      	ble.n	800f69a <_dtoa_r+0x84a>
 800f68e:	4639      	mov	r1, r7
 800f690:	4642      	mov	r2, r8
 800f692:	4620      	mov	r0, r4
 800f694:	f001 f910 	bl	80108b8 <__lshift>
 800f698:	4607      	mov	r7, r0
 800f69a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f69c:	b353      	cbz	r3, 800f6f4 <_dtoa_r+0x8a4>
 800f69e:	4639      	mov	r1, r7
 800f6a0:	9804      	ldr	r0, [sp, #16]
 800f6a2:	f001 f95d 	bl	8010960 <__mcmp>
 800f6a6:	2800      	cmp	r0, #0
 800f6a8:	da24      	bge.n	800f6f4 <_dtoa_r+0x8a4>
 800f6aa:	2300      	movs	r3, #0
 800f6ac:	220a      	movs	r2, #10
 800f6ae:	9904      	ldr	r1, [sp, #16]
 800f6b0:	4620      	mov	r0, r4
 800f6b2:	f000 ff5a 	bl	801056a <__multadd>
 800f6b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f6b8:	9004      	str	r0, [sp, #16]
 800f6ba:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	f000 814c 	beq.w	800f95c <_dtoa_r+0xb0c>
 800f6c4:	2300      	movs	r3, #0
 800f6c6:	4631      	mov	r1, r6
 800f6c8:	220a      	movs	r2, #10
 800f6ca:	4620      	mov	r0, r4
 800f6cc:	f000 ff4d 	bl	801056a <__multadd>
 800f6d0:	9b02      	ldr	r3, [sp, #8]
 800f6d2:	2b00      	cmp	r3, #0
 800f6d4:	4606      	mov	r6, r0
 800f6d6:	dc4f      	bgt.n	800f778 <_dtoa_r+0x928>
 800f6d8:	9b06      	ldr	r3, [sp, #24]
 800f6da:	2b02      	cmp	r3, #2
 800f6dc:	dd4c      	ble.n	800f778 <_dtoa_r+0x928>
 800f6de:	e011      	b.n	800f704 <_dtoa_r+0x8b4>
 800f6e0:	d0c9      	beq.n	800f676 <_dtoa_r+0x826>
 800f6e2:	9a05      	ldr	r2, [sp, #20]
 800f6e4:	331c      	adds	r3, #28
 800f6e6:	441a      	add	r2, r3
 800f6e8:	9205      	str	r2, [sp, #20]
 800f6ea:	441d      	add	r5, r3
 800f6ec:	4498      	add	r8, r3
 800f6ee:	e7c2      	b.n	800f676 <_dtoa_r+0x826>
 800f6f0:	4603      	mov	r3, r0
 800f6f2:	e7f6      	b.n	800f6e2 <_dtoa_r+0x892>
 800f6f4:	f1b9 0f00 	cmp.w	r9, #0
 800f6f8:	dc38      	bgt.n	800f76c <_dtoa_r+0x91c>
 800f6fa:	9b06      	ldr	r3, [sp, #24]
 800f6fc:	2b02      	cmp	r3, #2
 800f6fe:	dd35      	ble.n	800f76c <_dtoa_r+0x91c>
 800f700:	f8cd 9008 	str.w	r9, [sp, #8]
 800f704:	9b02      	ldr	r3, [sp, #8]
 800f706:	b963      	cbnz	r3, 800f722 <_dtoa_r+0x8d2>
 800f708:	4639      	mov	r1, r7
 800f70a:	2205      	movs	r2, #5
 800f70c:	4620      	mov	r0, r4
 800f70e:	f000 ff2c 	bl	801056a <__multadd>
 800f712:	4601      	mov	r1, r0
 800f714:	4607      	mov	r7, r0
 800f716:	9804      	ldr	r0, [sp, #16]
 800f718:	f001 f922 	bl	8010960 <__mcmp>
 800f71c:	2800      	cmp	r0, #0
 800f71e:	f73f adcc 	bgt.w	800f2ba <_dtoa_r+0x46a>
 800f722:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f724:	465d      	mov	r5, fp
 800f726:	ea6f 0a03 	mvn.w	sl, r3
 800f72a:	f04f 0900 	mov.w	r9, #0
 800f72e:	4639      	mov	r1, r7
 800f730:	4620      	mov	r0, r4
 800f732:	f000 ff11 	bl	8010558 <_Bfree>
 800f736:	2e00      	cmp	r6, #0
 800f738:	f43f aeb7 	beq.w	800f4aa <_dtoa_r+0x65a>
 800f73c:	f1b9 0f00 	cmp.w	r9, #0
 800f740:	d005      	beq.n	800f74e <_dtoa_r+0x8fe>
 800f742:	45b1      	cmp	r9, r6
 800f744:	d003      	beq.n	800f74e <_dtoa_r+0x8fe>
 800f746:	4649      	mov	r1, r9
 800f748:	4620      	mov	r0, r4
 800f74a:	f000 ff05 	bl	8010558 <_Bfree>
 800f74e:	4631      	mov	r1, r6
 800f750:	4620      	mov	r0, r4
 800f752:	f000 ff01 	bl	8010558 <_Bfree>
 800f756:	e6a8      	b.n	800f4aa <_dtoa_r+0x65a>
 800f758:	2700      	movs	r7, #0
 800f75a:	463e      	mov	r6, r7
 800f75c:	e7e1      	b.n	800f722 <_dtoa_r+0x8d2>
 800f75e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800f762:	463e      	mov	r6, r7
 800f764:	e5a9      	b.n	800f2ba <_dtoa_r+0x46a>
 800f766:	bf00      	nop
 800f768:	40240000 	.word	0x40240000
 800f76c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f76e:	f8cd 9008 	str.w	r9, [sp, #8]
 800f772:	2b00      	cmp	r3, #0
 800f774:	f000 80f9 	beq.w	800f96a <_dtoa_r+0xb1a>
 800f778:	2d00      	cmp	r5, #0
 800f77a:	dd05      	ble.n	800f788 <_dtoa_r+0x938>
 800f77c:	4631      	mov	r1, r6
 800f77e:	462a      	mov	r2, r5
 800f780:	4620      	mov	r0, r4
 800f782:	f001 f899 	bl	80108b8 <__lshift>
 800f786:	4606      	mov	r6, r0
 800f788:	9b07      	ldr	r3, [sp, #28]
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	d04c      	beq.n	800f828 <_dtoa_r+0x9d8>
 800f78e:	6871      	ldr	r1, [r6, #4]
 800f790:	4620      	mov	r0, r4
 800f792:	f000 febc 	bl	801050e <_Balloc>
 800f796:	6932      	ldr	r2, [r6, #16]
 800f798:	3202      	adds	r2, #2
 800f79a:	4605      	mov	r5, r0
 800f79c:	0092      	lsls	r2, r2, #2
 800f79e:	f106 010c 	add.w	r1, r6, #12
 800f7a2:	300c      	adds	r0, #12
 800f7a4:	f000 fea8 	bl	80104f8 <memcpy>
 800f7a8:	2201      	movs	r2, #1
 800f7aa:	4629      	mov	r1, r5
 800f7ac:	4620      	mov	r0, r4
 800f7ae:	f001 f883 	bl	80108b8 <__lshift>
 800f7b2:	9b00      	ldr	r3, [sp, #0]
 800f7b4:	f8cd b014 	str.w	fp, [sp, #20]
 800f7b8:	f003 0301 	and.w	r3, r3, #1
 800f7bc:	46b1      	mov	r9, r6
 800f7be:	9307      	str	r3, [sp, #28]
 800f7c0:	4606      	mov	r6, r0
 800f7c2:	4639      	mov	r1, r7
 800f7c4:	9804      	ldr	r0, [sp, #16]
 800f7c6:	f7ff fab5 	bl	800ed34 <quorem>
 800f7ca:	4649      	mov	r1, r9
 800f7cc:	4605      	mov	r5, r0
 800f7ce:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800f7d2:	9804      	ldr	r0, [sp, #16]
 800f7d4:	f001 f8c4 	bl	8010960 <__mcmp>
 800f7d8:	4632      	mov	r2, r6
 800f7da:	9000      	str	r0, [sp, #0]
 800f7dc:	4639      	mov	r1, r7
 800f7de:	4620      	mov	r0, r4
 800f7e0:	f001 f8d8 	bl	8010994 <__mdiff>
 800f7e4:	68c3      	ldr	r3, [r0, #12]
 800f7e6:	4602      	mov	r2, r0
 800f7e8:	bb03      	cbnz	r3, 800f82c <_dtoa_r+0x9dc>
 800f7ea:	4601      	mov	r1, r0
 800f7ec:	9008      	str	r0, [sp, #32]
 800f7ee:	9804      	ldr	r0, [sp, #16]
 800f7f0:	f001 f8b6 	bl	8010960 <__mcmp>
 800f7f4:	9a08      	ldr	r2, [sp, #32]
 800f7f6:	4603      	mov	r3, r0
 800f7f8:	4611      	mov	r1, r2
 800f7fa:	4620      	mov	r0, r4
 800f7fc:	9308      	str	r3, [sp, #32]
 800f7fe:	f000 feab 	bl	8010558 <_Bfree>
 800f802:	9b08      	ldr	r3, [sp, #32]
 800f804:	b9a3      	cbnz	r3, 800f830 <_dtoa_r+0x9e0>
 800f806:	9a06      	ldr	r2, [sp, #24]
 800f808:	b992      	cbnz	r2, 800f830 <_dtoa_r+0x9e0>
 800f80a:	9a07      	ldr	r2, [sp, #28]
 800f80c:	b982      	cbnz	r2, 800f830 <_dtoa_r+0x9e0>
 800f80e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800f812:	d029      	beq.n	800f868 <_dtoa_r+0xa18>
 800f814:	9b00      	ldr	r3, [sp, #0]
 800f816:	2b00      	cmp	r3, #0
 800f818:	dd01      	ble.n	800f81e <_dtoa_r+0x9ce>
 800f81a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800f81e:	9b05      	ldr	r3, [sp, #20]
 800f820:	1c5d      	adds	r5, r3, #1
 800f822:	f883 8000 	strb.w	r8, [r3]
 800f826:	e782      	b.n	800f72e <_dtoa_r+0x8de>
 800f828:	4630      	mov	r0, r6
 800f82a:	e7c2      	b.n	800f7b2 <_dtoa_r+0x962>
 800f82c:	2301      	movs	r3, #1
 800f82e:	e7e3      	b.n	800f7f8 <_dtoa_r+0x9a8>
 800f830:	9a00      	ldr	r2, [sp, #0]
 800f832:	2a00      	cmp	r2, #0
 800f834:	db04      	blt.n	800f840 <_dtoa_r+0x9f0>
 800f836:	d125      	bne.n	800f884 <_dtoa_r+0xa34>
 800f838:	9a06      	ldr	r2, [sp, #24]
 800f83a:	bb1a      	cbnz	r2, 800f884 <_dtoa_r+0xa34>
 800f83c:	9a07      	ldr	r2, [sp, #28]
 800f83e:	bb0a      	cbnz	r2, 800f884 <_dtoa_r+0xa34>
 800f840:	2b00      	cmp	r3, #0
 800f842:	ddec      	ble.n	800f81e <_dtoa_r+0x9ce>
 800f844:	2201      	movs	r2, #1
 800f846:	9904      	ldr	r1, [sp, #16]
 800f848:	4620      	mov	r0, r4
 800f84a:	f001 f835 	bl	80108b8 <__lshift>
 800f84e:	4639      	mov	r1, r7
 800f850:	9004      	str	r0, [sp, #16]
 800f852:	f001 f885 	bl	8010960 <__mcmp>
 800f856:	2800      	cmp	r0, #0
 800f858:	dc03      	bgt.n	800f862 <_dtoa_r+0xa12>
 800f85a:	d1e0      	bne.n	800f81e <_dtoa_r+0x9ce>
 800f85c:	f018 0f01 	tst.w	r8, #1
 800f860:	d0dd      	beq.n	800f81e <_dtoa_r+0x9ce>
 800f862:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800f866:	d1d8      	bne.n	800f81a <_dtoa_r+0x9ca>
 800f868:	9b05      	ldr	r3, [sp, #20]
 800f86a:	9a05      	ldr	r2, [sp, #20]
 800f86c:	1c5d      	adds	r5, r3, #1
 800f86e:	2339      	movs	r3, #57	; 0x39
 800f870:	7013      	strb	r3, [r2, #0]
 800f872:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800f876:	2b39      	cmp	r3, #57	; 0x39
 800f878:	f105 32ff 	add.w	r2, r5, #4294967295
 800f87c:	d04f      	beq.n	800f91e <_dtoa_r+0xace>
 800f87e:	3301      	adds	r3, #1
 800f880:	7013      	strb	r3, [r2, #0]
 800f882:	e754      	b.n	800f72e <_dtoa_r+0x8de>
 800f884:	9a05      	ldr	r2, [sp, #20]
 800f886:	2b00      	cmp	r3, #0
 800f888:	f102 0501 	add.w	r5, r2, #1
 800f88c:	dd06      	ble.n	800f89c <_dtoa_r+0xa4c>
 800f88e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800f892:	d0e9      	beq.n	800f868 <_dtoa_r+0xa18>
 800f894:	f108 0801 	add.w	r8, r8, #1
 800f898:	9b05      	ldr	r3, [sp, #20]
 800f89a:	e7c2      	b.n	800f822 <_dtoa_r+0x9d2>
 800f89c:	9a02      	ldr	r2, [sp, #8]
 800f89e:	f805 8c01 	strb.w	r8, [r5, #-1]
 800f8a2:	eba5 030b 	sub.w	r3, r5, fp
 800f8a6:	4293      	cmp	r3, r2
 800f8a8:	d021      	beq.n	800f8ee <_dtoa_r+0xa9e>
 800f8aa:	2300      	movs	r3, #0
 800f8ac:	220a      	movs	r2, #10
 800f8ae:	9904      	ldr	r1, [sp, #16]
 800f8b0:	4620      	mov	r0, r4
 800f8b2:	f000 fe5a 	bl	801056a <__multadd>
 800f8b6:	45b1      	cmp	r9, r6
 800f8b8:	9004      	str	r0, [sp, #16]
 800f8ba:	f04f 0300 	mov.w	r3, #0
 800f8be:	f04f 020a 	mov.w	r2, #10
 800f8c2:	4649      	mov	r1, r9
 800f8c4:	4620      	mov	r0, r4
 800f8c6:	d105      	bne.n	800f8d4 <_dtoa_r+0xa84>
 800f8c8:	f000 fe4f 	bl	801056a <__multadd>
 800f8cc:	4681      	mov	r9, r0
 800f8ce:	4606      	mov	r6, r0
 800f8d0:	9505      	str	r5, [sp, #20]
 800f8d2:	e776      	b.n	800f7c2 <_dtoa_r+0x972>
 800f8d4:	f000 fe49 	bl	801056a <__multadd>
 800f8d8:	4631      	mov	r1, r6
 800f8da:	4681      	mov	r9, r0
 800f8dc:	2300      	movs	r3, #0
 800f8de:	220a      	movs	r2, #10
 800f8e0:	4620      	mov	r0, r4
 800f8e2:	f000 fe42 	bl	801056a <__multadd>
 800f8e6:	4606      	mov	r6, r0
 800f8e8:	e7f2      	b.n	800f8d0 <_dtoa_r+0xa80>
 800f8ea:	f04f 0900 	mov.w	r9, #0
 800f8ee:	2201      	movs	r2, #1
 800f8f0:	9904      	ldr	r1, [sp, #16]
 800f8f2:	4620      	mov	r0, r4
 800f8f4:	f000 ffe0 	bl	80108b8 <__lshift>
 800f8f8:	4639      	mov	r1, r7
 800f8fa:	9004      	str	r0, [sp, #16]
 800f8fc:	f001 f830 	bl	8010960 <__mcmp>
 800f900:	2800      	cmp	r0, #0
 800f902:	dcb6      	bgt.n	800f872 <_dtoa_r+0xa22>
 800f904:	d102      	bne.n	800f90c <_dtoa_r+0xabc>
 800f906:	f018 0f01 	tst.w	r8, #1
 800f90a:	d1b2      	bne.n	800f872 <_dtoa_r+0xa22>
 800f90c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800f910:	2b30      	cmp	r3, #48	; 0x30
 800f912:	f105 32ff 	add.w	r2, r5, #4294967295
 800f916:	f47f af0a 	bne.w	800f72e <_dtoa_r+0x8de>
 800f91a:	4615      	mov	r5, r2
 800f91c:	e7f6      	b.n	800f90c <_dtoa_r+0xabc>
 800f91e:	4593      	cmp	fp, r2
 800f920:	d105      	bne.n	800f92e <_dtoa_r+0xade>
 800f922:	2331      	movs	r3, #49	; 0x31
 800f924:	f10a 0a01 	add.w	sl, sl, #1
 800f928:	f88b 3000 	strb.w	r3, [fp]
 800f92c:	e6ff      	b.n	800f72e <_dtoa_r+0x8de>
 800f92e:	4615      	mov	r5, r2
 800f930:	e79f      	b.n	800f872 <_dtoa_r+0xa22>
 800f932:	f8df b064 	ldr.w	fp, [pc, #100]	; 800f998 <_dtoa_r+0xb48>
 800f936:	f7ff bac5 	b.w	800eec4 <_dtoa_r+0x74>
 800f93a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f93c:	f8df b05c 	ldr.w	fp, [pc, #92]	; 800f99c <_dtoa_r+0xb4c>
 800f940:	2b00      	cmp	r3, #0
 800f942:	f43f aabf 	beq.w	800eec4 <_dtoa_r+0x74>
 800f946:	f10b 0308 	add.w	r3, fp, #8
 800f94a:	f7ff bab9 	b.w	800eec0 <_dtoa_r+0x70>
 800f94e:	9b06      	ldr	r3, [sp, #24]
 800f950:	2b01      	cmp	r3, #1
 800f952:	f77f ae36 	ble.w	800f5c2 <_dtoa_r+0x772>
 800f956:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f958:	9307      	str	r3, [sp, #28]
 800f95a:	e64a      	b.n	800f5f2 <_dtoa_r+0x7a2>
 800f95c:	9b02      	ldr	r3, [sp, #8]
 800f95e:	2b00      	cmp	r3, #0
 800f960:	dc03      	bgt.n	800f96a <_dtoa_r+0xb1a>
 800f962:	9b06      	ldr	r3, [sp, #24]
 800f964:	2b02      	cmp	r3, #2
 800f966:	f73f aecd 	bgt.w	800f704 <_dtoa_r+0x8b4>
 800f96a:	465d      	mov	r5, fp
 800f96c:	4639      	mov	r1, r7
 800f96e:	9804      	ldr	r0, [sp, #16]
 800f970:	f7ff f9e0 	bl	800ed34 <quorem>
 800f974:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800f978:	f805 8b01 	strb.w	r8, [r5], #1
 800f97c:	9a02      	ldr	r2, [sp, #8]
 800f97e:	eba5 030b 	sub.w	r3, r5, fp
 800f982:	429a      	cmp	r2, r3
 800f984:	ddb1      	ble.n	800f8ea <_dtoa_r+0xa9a>
 800f986:	2300      	movs	r3, #0
 800f988:	220a      	movs	r2, #10
 800f98a:	9904      	ldr	r1, [sp, #16]
 800f98c:	4620      	mov	r0, r4
 800f98e:	f000 fdec 	bl	801056a <__multadd>
 800f992:	9004      	str	r0, [sp, #16]
 800f994:	e7ea      	b.n	800f96c <_dtoa_r+0xb1c>
 800f996:	bf00      	nop
 800f998:	080119da 	.word	0x080119da
 800f99c:	080119fc 	.word	0x080119fc

0800f9a0 <print_e>:
 800f9a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f9a2:	b087      	sub	sp, #28
 800f9a4:	ec43 2b10 	vmov	d0, r2, r3
 800f9a8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800f9aa:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 800f9ae:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800f9b0:	ab04      	add	r3, sp, #16
 800f9b2:	9301      	str	r3, [sp, #4]
 800f9b4:	ab03      	add	r3, sp, #12
 800f9b6:	9300      	str	r3, [sp, #0]
 800f9b8:	460f      	mov	r7, r1
 800f9ba:	ab05      	add	r3, sp, #20
 800f9bc:	2102      	movs	r1, #2
 800f9be:	1c62      	adds	r2, r4, #1
 800f9c0:	f7ff fa46 	bl	800ee50 <_dtoa_r>
 800f9c4:	4601      	mov	r1, r0
 800f9c6:	9805      	ldr	r0, [sp, #20]
 800f9c8:	f242 730f 	movw	r3, #9999	; 0x270f
 800f9cc:	4298      	cmp	r0, r3
 800f9ce:	d104      	bne.n	800f9da <print_e+0x3a>
 800f9d0:	4638      	mov	r0, r7
 800f9d2:	f7fd f92e 	bl	800cc32 <strcpy>
 800f9d6:	b007      	add	sp, #28
 800f9d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f9da:	780b      	ldrb	r3, [r1, #0]
 800f9dc:	703b      	strb	r3, [r7, #0]
 800f9de:	2d00      	cmp	r5, #0
 800f9e0:	d143      	bne.n	800fa6a <print_e+0xca>
 800f9e2:	2c00      	cmp	r4, #0
 800f9e4:	d141      	bne.n	800fa6a <print_e+0xca>
 800f9e6:	1c7b      	adds	r3, r7, #1
 800f9e8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800f9ec:	b10a      	cbz	r2, 800f9f2 <print_e+0x52>
 800f9ee:	2c00      	cmp	r4, #0
 800f9f0:	dc3f      	bgt.n	800fa72 <print_e+0xd2>
 800f9f2:	2e67      	cmp	r6, #103	; 0x67
 800f9f4:	d044      	beq.n	800fa80 <print_e+0xe0>
 800f9f6:	2e47      	cmp	r6, #71	; 0x47
 800f9f8:	d044      	beq.n	800fa84 <print_e+0xe4>
 800f9fa:	461a      	mov	r2, r3
 800f9fc:	191d      	adds	r5, r3, r4
 800f9fe:	2730      	movs	r7, #48	; 0x30
 800fa00:	1aa9      	subs	r1, r5, r2
 800fa02:	2900      	cmp	r1, #0
 800fa04:	dc39      	bgt.n	800fa7a <print_e+0xda>
 800fa06:	2c00      	cmp	r4, #0
 800fa08:	bfa8      	it	ge
 800fa0a:	191b      	addge	r3, r3, r4
 800fa0c:	1e41      	subs	r1, r0, #1
 800fa0e:	2900      	cmp	r1, #0
 800fa10:	bfb8      	it	lt
 800fa12:	f1c0 0001 	rsblt	r0, r0, #1
 800fa16:	9105      	str	r1, [sp, #20]
 800fa18:	bfb8      	it	lt
 800fa1a:	9005      	strlt	r0, [sp, #20]
 800fa1c:	461a      	mov	r2, r3
 800fa1e:	9805      	ldr	r0, [sp, #20]
 800fa20:	f802 6b02 	strb.w	r6, [r2], #2
 800fa24:	bfb5      	itete	lt
 800fa26:	212d      	movlt	r1, #45	; 0x2d
 800fa28:	212b      	movge	r1, #43	; 0x2b
 800fa2a:	7059      	strblt	r1, [r3, #1]
 800fa2c:	7059      	strbge	r1, [r3, #1]
 800fa2e:	2863      	cmp	r0, #99	; 0x63
 800fa30:	dd0b      	ble.n	800fa4a <print_e+0xaa>
 800fa32:	2164      	movs	r1, #100	; 0x64
 800fa34:	fb90 f1f1 	sdiv	r1, r0, r1
 800fa38:	f101 0430 	add.w	r4, r1, #48	; 0x30
 800fa3c:	1cda      	adds	r2, r3, #3
 800fa3e:	709c      	strb	r4, [r3, #2]
 800fa40:	f06f 0363 	mvn.w	r3, #99	; 0x63
 800fa44:	fb03 0101 	mla	r1, r3, r1, r0
 800fa48:	9105      	str	r1, [sp, #20]
 800fa4a:	9905      	ldr	r1, [sp, #20]
 800fa4c:	230a      	movs	r3, #10
 800fa4e:	fb91 f3f3 	sdiv	r3, r1, r3
 800fa52:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800fa56:	7010      	strb	r0, [r2, #0]
 800fa58:	f06f 0009 	mvn.w	r0, #9
 800fa5c:	fb00 1303 	mla	r3, r0, r3, r1
 800fa60:	3330      	adds	r3, #48	; 0x30
 800fa62:	7053      	strb	r3, [r2, #1]
 800fa64:	2300      	movs	r3, #0
 800fa66:	7093      	strb	r3, [r2, #2]
 800fa68:	e7b5      	b.n	800f9d6 <print_e+0x36>
 800fa6a:	222e      	movs	r2, #46	; 0x2e
 800fa6c:	1cbb      	adds	r3, r7, #2
 800fa6e:	707a      	strb	r2, [r7, #1]
 800fa70:	e7ba      	b.n	800f9e8 <print_e+0x48>
 800fa72:	f803 2b01 	strb.w	r2, [r3], #1
 800fa76:	3c01      	subs	r4, #1
 800fa78:	e7b6      	b.n	800f9e8 <print_e+0x48>
 800fa7a:	f802 7b01 	strb.w	r7, [r2], #1
 800fa7e:	e7bf      	b.n	800fa00 <print_e+0x60>
 800fa80:	2665      	movs	r6, #101	; 0x65
 800fa82:	e7c3      	b.n	800fa0c <print_e+0x6c>
 800fa84:	2645      	movs	r6, #69	; 0x45
 800fa86:	e7c1      	b.n	800fa0c <print_e+0x6c>

0800fa88 <_gcvt>:
 800fa88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fa8c:	ec55 4b10 	vmov	r4, r5, d0
 800fa90:	b088      	sub	sp, #32
 800fa92:	4681      	mov	r9, r0
 800fa94:	460f      	mov	r7, r1
 800fa96:	4616      	mov	r6, r2
 800fa98:	469a      	mov	sl, r3
 800fa9a:	2200      	movs	r2, #0
 800fa9c:	2300      	movs	r3, #0
 800fa9e:	ee10 0a10 	vmov	r0, s0
 800faa2:	4629      	mov	r1, r5
 800faa4:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 800faa8:	f7f1 f828 	bl	8000afc <__aeabi_dcmplt>
 800faac:	b110      	cbz	r0, 800fab4 <_gcvt+0x2c>
 800faae:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800fab2:	461d      	mov	r5, r3
 800fab4:	2200      	movs	r2, #0
 800fab6:	2300      	movs	r3, #0
 800fab8:	4620      	mov	r0, r4
 800faba:	4629      	mov	r1, r5
 800fabc:	f7f1 f814 	bl	8000ae8 <__aeabi_dcmpeq>
 800fac0:	b138      	cbz	r0, 800fad2 <_gcvt+0x4a>
 800fac2:	2330      	movs	r3, #48	; 0x30
 800fac4:	7033      	strb	r3, [r6, #0]
 800fac6:	2300      	movs	r3, #0
 800fac8:	7073      	strb	r3, [r6, #1]
 800faca:	4630      	mov	r0, r6
 800facc:	b008      	add	sp, #32
 800face:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fad2:	a350      	add	r3, pc, #320	; (adr r3, 800fc14 <_gcvt+0x18c>)
 800fad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fad8:	4620      	mov	r0, r4
 800fada:	4629      	mov	r1, r5
 800fadc:	f7f1 f818 	bl	8000b10 <__aeabi_dcmple>
 800fae0:	b150      	cbz	r0, 800faf8 <_gcvt+0x70>
 800fae2:	3f01      	subs	r7, #1
 800fae4:	e9cd a801 	strd	sl, r8, [sp, #4]
 800fae8:	9700      	str	r7, [sp, #0]
 800faea:	4622      	mov	r2, r4
 800faec:	462b      	mov	r3, r5
 800faee:	4631      	mov	r1, r6
 800faf0:	4648      	mov	r0, r9
 800faf2:	f7ff ff55 	bl	800f9a0 <print_e>
 800faf6:	e7e8      	b.n	800faca <_gcvt+0x42>
 800faf8:	4638      	mov	r0, r7
 800fafa:	f001 f8a1 	bl	8010c40 <_mprec_log10>
 800fafe:	4622      	mov	r2, r4
 800fb00:	462b      	mov	r3, r5
 800fb02:	ec51 0b10 	vmov	r0, r1, d0
 800fb06:	f7f1 f803 	bl	8000b10 <__aeabi_dcmple>
 800fb0a:	2800      	cmp	r0, #0
 800fb0c:	d1e9      	bne.n	800fae2 <_gcvt+0x5a>
 800fb0e:	2200      	movs	r2, #0
 800fb10:	4b3f      	ldr	r3, [pc, #252]	; (800fc10 <_gcvt+0x188>)
 800fb12:	4620      	mov	r0, r4
 800fb14:	4629      	mov	r1, r5
 800fb16:	f7f0 fff1 	bl	8000afc <__aeabi_dcmplt>
 800fb1a:	aa07      	add	r2, sp, #28
 800fb1c:	ab06      	add	r3, sp, #24
 800fb1e:	e9cd 3200 	strd	r3, r2, [sp]
 800fb22:	ab05      	add	r3, sp, #20
 800fb24:	463a      	mov	r2, r7
 800fb26:	b360      	cbz	r0, 800fb82 <_gcvt+0xfa>
 800fb28:	2103      	movs	r1, #3
 800fb2a:	ec45 4b10 	vmov	d0, r4, r5
 800fb2e:	4648      	mov	r0, r9
 800fb30:	f7ff f98e 	bl	800ee50 <_dtoa_r>
 800fb34:	9a05      	ldr	r2, [sp, #20]
 800fb36:	f242 730f 	movw	r3, #9999	; 0x270f
 800fb3a:	429a      	cmp	r2, r3
 800fb3c:	d023      	beq.n	800fb86 <_gcvt+0xfe>
 800fb3e:	4633      	mov	r3, r6
 800fb40:	4437      	add	r7, r6
 800fb42:	4601      	mov	r1, r0
 800fb44:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fb48:	9d05      	ldr	r5, [sp, #20]
 800fb4a:	1afc      	subs	r4, r7, r3
 800fb4c:	b32a      	cbz	r2, 800fb9a <_gcvt+0x112>
 800fb4e:	2d00      	cmp	r5, #0
 800fb50:	dc1e      	bgt.n	800fb90 <_gcvt+0x108>
 800fb52:	f1b8 0f00 	cmp.w	r8, #0
 800fb56:	d102      	bne.n	800fb5e <_gcvt+0xd6>
 800fb58:	780a      	ldrb	r2, [r1, #0]
 800fb5a:	2a00      	cmp	r2, #0
 800fb5c:	d045      	beq.n	800fbea <_gcvt+0x162>
 800fb5e:	429e      	cmp	r6, r3
 800fb60:	bf02      	ittt	eq
 800fb62:	1c73      	addeq	r3, r6, #1
 800fb64:	2230      	moveq	r2, #48	; 0x30
 800fb66:	7032      	strbeq	r2, [r6, #0]
 800fb68:	222e      	movs	r2, #46	; 0x2e
 800fb6a:	701a      	strb	r2, [r3, #0]
 800fb6c:	9a05      	ldr	r2, [sp, #20]
 800fb6e:	3301      	adds	r3, #1
 800fb70:	2000      	movs	r0, #0
 800fb72:	2730      	movs	r7, #48	; 0x30
 800fb74:	2a00      	cmp	r2, #0
 800fb76:	4615      	mov	r5, r2
 800fb78:	db24      	blt.n	800fbc4 <_gcvt+0x13c>
 800fb7a:	b100      	cbz	r0, 800fb7e <_gcvt+0xf6>
 800fb7c:	9205      	str	r2, [sp, #20]
 800fb7e:	1e4a      	subs	r2, r1, #1
 800fb80:	e02b      	b.n	800fbda <_gcvt+0x152>
 800fb82:	2102      	movs	r1, #2
 800fb84:	e7d1      	b.n	800fb2a <_gcvt+0xa2>
 800fb86:	4601      	mov	r1, r0
 800fb88:	4630      	mov	r0, r6
 800fb8a:	f7fd f852 	bl	800cc32 <strcpy>
 800fb8e:	e79c      	b.n	800faca <_gcvt+0x42>
 800fb90:	3d01      	subs	r5, #1
 800fb92:	f803 2b01 	strb.w	r2, [r3], #1
 800fb96:	9505      	str	r5, [sp, #20]
 800fb98:	e7d3      	b.n	800fb42 <_gcvt+0xba>
 800fb9a:	1b2d      	subs	r5, r5, r4
 800fb9c:	2730      	movs	r7, #48	; 0x30
 800fb9e:	e005      	b.n	800fbac <_gcvt+0x124>
 800fba0:	2c00      	cmp	r4, #0
 800fba2:	dd06      	ble.n	800fbb2 <_gcvt+0x12a>
 800fba4:	f803 7b01 	strb.w	r7, [r3], #1
 800fba8:	3c01      	subs	r4, #1
 800fbaa:	2201      	movs	r2, #1
 800fbac:	1928      	adds	r0, r5, r4
 800fbae:	2800      	cmp	r0, #0
 800fbb0:	dcf6      	bgt.n	800fba0 <_gcvt+0x118>
 800fbb2:	2a00      	cmp	r2, #0
 800fbb4:	d0cd      	beq.n	800fb52 <_gcvt+0xca>
 800fbb6:	9005      	str	r0, [sp, #20]
 800fbb8:	e7cb      	b.n	800fb52 <_gcvt+0xca>
 800fbba:	f803 7b01 	strb.w	r7, [r3], #1
 800fbbe:	3c01      	subs	r4, #1
 800fbc0:	2001      	movs	r0, #1
 800fbc2:	e7d7      	b.n	800fb74 <_gcvt+0xec>
 800fbc4:	2c00      	cmp	r4, #0
 800fbc6:	f102 0201 	add.w	r2, r2, #1
 800fbca:	dcf6      	bgt.n	800fbba <_gcvt+0x132>
 800fbcc:	2800      	cmp	r0, #0
 800fbce:	d0d6      	beq.n	800fb7e <_gcvt+0xf6>
 800fbd0:	9505      	str	r5, [sp, #20]
 800fbd2:	e7d4      	b.n	800fb7e <_gcvt+0xf6>
 800fbd4:	f803 1b01 	strb.w	r1, [r3], #1
 800fbd8:	3c01      	subs	r4, #1
 800fbda:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 800fbde:	b109      	cbz	r1, 800fbe4 <_gcvt+0x15c>
 800fbe0:	2c00      	cmp	r4, #0
 800fbe2:	dcf7      	bgt.n	800fbd4 <_gcvt+0x14c>
 800fbe4:	f1b8 0f00 	cmp.w	r8, #0
 800fbe8:	d10b      	bne.n	800fc02 <_gcvt+0x17a>
 800fbea:	2200      	movs	r2, #0
 800fbec:	701a      	strb	r2, [r3, #0]
 800fbee:	e76c      	b.n	800faca <_gcvt+0x42>
 800fbf0:	f802 5b01 	strb.w	r5, [r2], #1
 800fbf4:	1a81      	subs	r1, r0, r2
 800fbf6:	2900      	cmp	r1, #0
 800fbf8:	dcfa      	bgt.n	800fbf0 <_gcvt+0x168>
 800fbfa:	2c00      	cmp	r4, #0
 800fbfc:	bfa8      	it	ge
 800fbfe:	191b      	addge	r3, r3, r4
 800fc00:	e7f3      	b.n	800fbea <_gcvt+0x162>
 800fc02:	461a      	mov	r2, r3
 800fc04:	1918      	adds	r0, r3, r4
 800fc06:	2530      	movs	r5, #48	; 0x30
 800fc08:	e7f4      	b.n	800fbf4 <_gcvt+0x16c>
 800fc0a:	bf00      	nop
 800fc0c:	f3af 8000 	nop.w
 800fc10:	3ff00000 	.word	0x3ff00000
 800fc14:	eb1c432d 	.word	0xeb1c432d
 800fc18:	3f1a36e2 	.word	0x3f1a36e2

0800fc1c <__libc_fini_array>:
 800fc1c:	b538      	push	{r3, r4, r5, lr}
 800fc1e:	4d07      	ldr	r5, [pc, #28]	; (800fc3c <__libc_fini_array+0x20>)
 800fc20:	4c07      	ldr	r4, [pc, #28]	; (800fc40 <__libc_fini_array+0x24>)
 800fc22:	1b64      	subs	r4, r4, r5
 800fc24:	10a4      	asrs	r4, r4, #2
 800fc26:	b91c      	cbnz	r4, 800fc30 <__libc_fini_array+0x14>
 800fc28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fc2c:	f001 bb7a 	b.w	8011324 <_fini>
 800fc30:	3c01      	subs	r4, #1
 800fc32:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800fc36:	4798      	blx	r3
 800fc38:	e7f5      	b.n	800fc26 <__libc_fini_array+0xa>
 800fc3a:	bf00      	nop
 800fc3c:	08011c28 	.word	0x08011c28
 800fc40:	08011c2c 	.word	0x08011c2c

0800fc44 <_malloc_trim_r>:
 800fc44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc48:	4605      	mov	r5, r0
 800fc4a:	2008      	movs	r0, #8
 800fc4c:	460c      	mov	r4, r1
 800fc4e:	f7ff f851 	bl	800ecf4 <sysconf>
 800fc52:	4f23      	ldr	r7, [pc, #140]	; (800fce0 <_malloc_trim_r+0x9c>)
 800fc54:	4680      	mov	r8, r0
 800fc56:	4628      	mov	r0, r5
 800fc58:	f7fc ffa0 	bl	800cb9c <__malloc_lock>
 800fc5c:	68bb      	ldr	r3, [r7, #8]
 800fc5e:	685e      	ldr	r6, [r3, #4]
 800fc60:	f026 0603 	bic.w	r6, r6, #3
 800fc64:	1b34      	subs	r4, r6, r4
 800fc66:	3c11      	subs	r4, #17
 800fc68:	4444      	add	r4, r8
 800fc6a:	fbb4 f4f8 	udiv	r4, r4, r8
 800fc6e:	3c01      	subs	r4, #1
 800fc70:	fb08 f404 	mul.w	r4, r8, r4
 800fc74:	45a0      	cmp	r8, r4
 800fc76:	dd05      	ble.n	800fc84 <_malloc_trim_r+0x40>
 800fc78:	4628      	mov	r0, r5
 800fc7a:	f7fc ff95 	bl	800cba8 <__malloc_unlock>
 800fc7e:	2000      	movs	r0, #0
 800fc80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc84:	2100      	movs	r1, #0
 800fc86:	4628      	mov	r0, r5
 800fc88:	f7fc ff94 	bl	800cbb4 <_sbrk_r>
 800fc8c:	68bb      	ldr	r3, [r7, #8]
 800fc8e:	4433      	add	r3, r6
 800fc90:	4298      	cmp	r0, r3
 800fc92:	d1f1      	bne.n	800fc78 <_malloc_trim_r+0x34>
 800fc94:	4261      	negs	r1, r4
 800fc96:	4628      	mov	r0, r5
 800fc98:	f7fc ff8c 	bl	800cbb4 <_sbrk_r>
 800fc9c:	3001      	adds	r0, #1
 800fc9e:	d110      	bne.n	800fcc2 <_malloc_trim_r+0x7e>
 800fca0:	2100      	movs	r1, #0
 800fca2:	4628      	mov	r0, r5
 800fca4:	f7fc ff86 	bl	800cbb4 <_sbrk_r>
 800fca8:	68ba      	ldr	r2, [r7, #8]
 800fcaa:	1a83      	subs	r3, r0, r2
 800fcac:	2b0f      	cmp	r3, #15
 800fcae:	dde3      	ble.n	800fc78 <_malloc_trim_r+0x34>
 800fcb0:	490c      	ldr	r1, [pc, #48]	; (800fce4 <_malloc_trim_r+0xa0>)
 800fcb2:	6809      	ldr	r1, [r1, #0]
 800fcb4:	1a40      	subs	r0, r0, r1
 800fcb6:	490c      	ldr	r1, [pc, #48]	; (800fce8 <_malloc_trim_r+0xa4>)
 800fcb8:	f043 0301 	orr.w	r3, r3, #1
 800fcbc:	6008      	str	r0, [r1, #0]
 800fcbe:	6053      	str	r3, [r2, #4]
 800fcc0:	e7da      	b.n	800fc78 <_malloc_trim_r+0x34>
 800fcc2:	68bb      	ldr	r3, [r7, #8]
 800fcc4:	4a08      	ldr	r2, [pc, #32]	; (800fce8 <_malloc_trim_r+0xa4>)
 800fcc6:	1b36      	subs	r6, r6, r4
 800fcc8:	f046 0601 	orr.w	r6, r6, #1
 800fccc:	605e      	str	r6, [r3, #4]
 800fcce:	6813      	ldr	r3, [r2, #0]
 800fcd0:	4628      	mov	r0, r5
 800fcd2:	1b1c      	subs	r4, r3, r4
 800fcd4:	6014      	str	r4, [r2, #0]
 800fcd6:	f7fc ff67 	bl	800cba8 <__malloc_unlock>
 800fcda:	2001      	movs	r0, #1
 800fcdc:	e7d0      	b.n	800fc80 <_malloc_trim_r+0x3c>
 800fcde:	bf00      	nop
 800fce0:	20000518 	.word	0x20000518
 800fce4:	20000920 	.word	0x20000920
 800fce8:	20000b18 	.word	0x20000b18

0800fcec <_free_r>:
 800fcec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fcf0:	4604      	mov	r4, r0
 800fcf2:	4688      	mov	r8, r1
 800fcf4:	2900      	cmp	r1, #0
 800fcf6:	f000 80ab 	beq.w	800fe50 <_free_r+0x164>
 800fcfa:	f7fc ff4f 	bl	800cb9c <__malloc_lock>
 800fcfe:	f858 2c04 	ldr.w	r2, [r8, #-4]
 800fd02:	4d54      	ldr	r5, [pc, #336]	; (800fe54 <_free_r+0x168>)
 800fd04:	f022 0001 	bic.w	r0, r2, #1
 800fd08:	f1a8 0308 	sub.w	r3, r8, #8
 800fd0c:	181f      	adds	r7, r3, r0
 800fd0e:	68a9      	ldr	r1, [r5, #8]
 800fd10:	687e      	ldr	r6, [r7, #4]
 800fd12:	42b9      	cmp	r1, r7
 800fd14:	f026 0603 	bic.w	r6, r6, #3
 800fd18:	f002 0201 	and.w	r2, r2, #1
 800fd1c:	d11b      	bne.n	800fd56 <_free_r+0x6a>
 800fd1e:	4430      	add	r0, r6
 800fd20:	b93a      	cbnz	r2, 800fd32 <_free_r+0x46>
 800fd22:	f858 2c08 	ldr.w	r2, [r8, #-8]
 800fd26:	1a9b      	subs	r3, r3, r2
 800fd28:	4410      	add	r0, r2
 800fd2a:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 800fd2e:	60ca      	str	r2, [r1, #12]
 800fd30:	6091      	str	r1, [r2, #8]
 800fd32:	f040 0201 	orr.w	r2, r0, #1
 800fd36:	605a      	str	r2, [r3, #4]
 800fd38:	60ab      	str	r3, [r5, #8]
 800fd3a:	4b47      	ldr	r3, [pc, #284]	; (800fe58 <_free_r+0x16c>)
 800fd3c:	681b      	ldr	r3, [r3, #0]
 800fd3e:	4283      	cmp	r3, r0
 800fd40:	d804      	bhi.n	800fd4c <_free_r+0x60>
 800fd42:	4b46      	ldr	r3, [pc, #280]	; (800fe5c <_free_r+0x170>)
 800fd44:	4620      	mov	r0, r4
 800fd46:	6819      	ldr	r1, [r3, #0]
 800fd48:	f7ff ff7c 	bl	800fc44 <_malloc_trim_r>
 800fd4c:	4620      	mov	r0, r4
 800fd4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fd52:	f7fc bf29 	b.w	800cba8 <__malloc_unlock>
 800fd56:	607e      	str	r6, [r7, #4]
 800fd58:	2a00      	cmp	r2, #0
 800fd5a:	d139      	bne.n	800fdd0 <_free_r+0xe4>
 800fd5c:	f858 1c08 	ldr.w	r1, [r8, #-8]
 800fd60:	1a5b      	subs	r3, r3, r1
 800fd62:	4408      	add	r0, r1
 800fd64:	6899      	ldr	r1, [r3, #8]
 800fd66:	f105 0c08 	add.w	ip, r5, #8
 800fd6a:	4561      	cmp	r1, ip
 800fd6c:	d032      	beq.n	800fdd4 <_free_r+0xe8>
 800fd6e:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 800fd72:	f8c1 c00c 	str.w	ip, [r1, #12]
 800fd76:	f8cc 1008 	str.w	r1, [ip, #8]
 800fd7a:	19b9      	adds	r1, r7, r6
 800fd7c:	6849      	ldr	r1, [r1, #4]
 800fd7e:	07c9      	lsls	r1, r1, #31
 800fd80:	d40a      	bmi.n	800fd98 <_free_r+0xac>
 800fd82:	4430      	add	r0, r6
 800fd84:	68b9      	ldr	r1, [r7, #8]
 800fd86:	bb3a      	cbnz	r2, 800fdd8 <_free_r+0xec>
 800fd88:	4e35      	ldr	r6, [pc, #212]	; (800fe60 <_free_r+0x174>)
 800fd8a:	42b1      	cmp	r1, r6
 800fd8c:	d124      	bne.n	800fdd8 <_free_r+0xec>
 800fd8e:	e9c5 3304 	strd	r3, r3, [r5, #16]
 800fd92:	e9c3 1102 	strd	r1, r1, [r3, #8]
 800fd96:	2201      	movs	r2, #1
 800fd98:	f040 0101 	orr.w	r1, r0, #1
 800fd9c:	6059      	str	r1, [r3, #4]
 800fd9e:	5018      	str	r0, [r3, r0]
 800fda0:	2a00      	cmp	r2, #0
 800fda2:	d1d3      	bne.n	800fd4c <_free_r+0x60>
 800fda4:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800fda8:	d21a      	bcs.n	800fde0 <_free_r+0xf4>
 800fdaa:	08c0      	lsrs	r0, r0, #3
 800fdac:	1081      	asrs	r1, r0, #2
 800fdae:	2201      	movs	r2, #1
 800fdb0:	408a      	lsls	r2, r1
 800fdb2:	6869      	ldr	r1, [r5, #4]
 800fdb4:	3001      	adds	r0, #1
 800fdb6:	430a      	orrs	r2, r1
 800fdb8:	606a      	str	r2, [r5, #4]
 800fdba:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 800fdbe:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 800fdc2:	3a08      	subs	r2, #8
 800fdc4:	e9c3 1202 	strd	r1, r2, [r3, #8]
 800fdc8:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 800fdcc:	60cb      	str	r3, [r1, #12]
 800fdce:	e7bd      	b.n	800fd4c <_free_r+0x60>
 800fdd0:	2200      	movs	r2, #0
 800fdd2:	e7d2      	b.n	800fd7a <_free_r+0x8e>
 800fdd4:	2201      	movs	r2, #1
 800fdd6:	e7d0      	b.n	800fd7a <_free_r+0x8e>
 800fdd8:	68fe      	ldr	r6, [r7, #12]
 800fdda:	60ce      	str	r6, [r1, #12]
 800fddc:	60b1      	str	r1, [r6, #8]
 800fdde:	e7db      	b.n	800fd98 <_free_r+0xac>
 800fde0:	0a42      	lsrs	r2, r0, #9
 800fde2:	2a04      	cmp	r2, #4
 800fde4:	d813      	bhi.n	800fe0e <_free_r+0x122>
 800fde6:	0982      	lsrs	r2, r0, #6
 800fde8:	3238      	adds	r2, #56	; 0x38
 800fdea:	1c51      	adds	r1, r2, #1
 800fdec:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 800fdf0:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 800fdf4:	428e      	cmp	r6, r1
 800fdf6:	d124      	bne.n	800fe42 <_free_r+0x156>
 800fdf8:	2001      	movs	r0, #1
 800fdfa:	1092      	asrs	r2, r2, #2
 800fdfc:	fa00 f202 	lsl.w	r2, r0, r2
 800fe00:	6868      	ldr	r0, [r5, #4]
 800fe02:	4302      	orrs	r2, r0
 800fe04:	606a      	str	r2, [r5, #4]
 800fe06:	e9c3 1602 	strd	r1, r6, [r3, #8]
 800fe0a:	60b3      	str	r3, [r6, #8]
 800fe0c:	e7de      	b.n	800fdcc <_free_r+0xe0>
 800fe0e:	2a14      	cmp	r2, #20
 800fe10:	d801      	bhi.n	800fe16 <_free_r+0x12a>
 800fe12:	325b      	adds	r2, #91	; 0x5b
 800fe14:	e7e9      	b.n	800fdea <_free_r+0xfe>
 800fe16:	2a54      	cmp	r2, #84	; 0x54
 800fe18:	d802      	bhi.n	800fe20 <_free_r+0x134>
 800fe1a:	0b02      	lsrs	r2, r0, #12
 800fe1c:	326e      	adds	r2, #110	; 0x6e
 800fe1e:	e7e4      	b.n	800fdea <_free_r+0xfe>
 800fe20:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800fe24:	d802      	bhi.n	800fe2c <_free_r+0x140>
 800fe26:	0bc2      	lsrs	r2, r0, #15
 800fe28:	3277      	adds	r2, #119	; 0x77
 800fe2a:	e7de      	b.n	800fdea <_free_r+0xfe>
 800fe2c:	f240 5154 	movw	r1, #1364	; 0x554
 800fe30:	428a      	cmp	r2, r1
 800fe32:	bf9a      	itte	ls
 800fe34:	0c82      	lsrls	r2, r0, #18
 800fe36:	327c      	addls	r2, #124	; 0x7c
 800fe38:	227e      	movhi	r2, #126	; 0x7e
 800fe3a:	e7d6      	b.n	800fdea <_free_r+0xfe>
 800fe3c:	6889      	ldr	r1, [r1, #8]
 800fe3e:	428e      	cmp	r6, r1
 800fe40:	d004      	beq.n	800fe4c <_free_r+0x160>
 800fe42:	684a      	ldr	r2, [r1, #4]
 800fe44:	f022 0203 	bic.w	r2, r2, #3
 800fe48:	4282      	cmp	r2, r0
 800fe4a:	d8f7      	bhi.n	800fe3c <_free_r+0x150>
 800fe4c:	68ce      	ldr	r6, [r1, #12]
 800fe4e:	e7da      	b.n	800fe06 <_free_r+0x11a>
 800fe50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe54:	20000518 	.word	0x20000518
 800fe58:	20000924 	.word	0x20000924
 800fe5c:	20000b48 	.word	0x20000b48
 800fe60:	20000520 	.word	0x20000520

0800fe64 <rshift>:
 800fe64:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fe66:	6906      	ldr	r6, [r0, #16]
 800fe68:	114b      	asrs	r3, r1, #5
 800fe6a:	429e      	cmp	r6, r3
 800fe6c:	f100 0414 	add.w	r4, r0, #20
 800fe70:	dd30      	ble.n	800fed4 <rshift+0x70>
 800fe72:	f011 011f 	ands.w	r1, r1, #31
 800fe76:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800fe7a:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800fe7e:	d108      	bne.n	800fe92 <rshift+0x2e>
 800fe80:	4621      	mov	r1, r4
 800fe82:	42b2      	cmp	r2, r6
 800fe84:	460b      	mov	r3, r1
 800fe86:	d211      	bcs.n	800feac <rshift+0x48>
 800fe88:	f852 3b04 	ldr.w	r3, [r2], #4
 800fe8c:	f841 3b04 	str.w	r3, [r1], #4
 800fe90:	e7f7      	b.n	800fe82 <rshift+0x1e>
 800fe92:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800fe96:	f1c1 0c20 	rsb	ip, r1, #32
 800fe9a:	40cd      	lsrs	r5, r1
 800fe9c:	3204      	adds	r2, #4
 800fe9e:	4623      	mov	r3, r4
 800fea0:	42b2      	cmp	r2, r6
 800fea2:	4617      	mov	r7, r2
 800fea4:	d30c      	bcc.n	800fec0 <rshift+0x5c>
 800fea6:	601d      	str	r5, [r3, #0]
 800fea8:	b105      	cbz	r5, 800feac <rshift+0x48>
 800feaa:	3304      	adds	r3, #4
 800feac:	1b1a      	subs	r2, r3, r4
 800feae:	42a3      	cmp	r3, r4
 800feb0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800feb4:	bf08      	it	eq
 800feb6:	2300      	moveq	r3, #0
 800feb8:	6102      	str	r2, [r0, #16]
 800feba:	bf08      	it	eq
 800febc:	6143      	streq	r3, [r0, #20]
 800febe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fec0:	683f      	ldr	r7, [r7, #0]
 800fec2:	fa07 f70c 	lsl.w	r7, r7, ip
 800fec6:	433d      	orrs	r5, r7
 800fec8:	f843 5b04 	str.w	r5, [r3], #4
 800fecc:	f852 5b04 	ldr.w	r5, [r2], #4
 800fed0:	40cd      	lsrs	r5, r1
 800fed2:	e7e5      	b.n	800fea0 <rshift+0x3c>
 800fed4:	4623      	mov	r3, r4
 800fed6:	e7e9      	b.n	800feac <rshift+0x48>

0800fed8 <__hexdig_fun>:
 800fed8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800fedc:	2b09      	cmp	r3, #9
 800fede:	d802      	bhi.n	800fee6 <__hexdig_fun+0xe>
 800fee0:	3820      	subs	r0, #32
 800fee2:	b2c0      	uxtb	r0, r0
 800fee4:	4770      	bx	lr
 800fee6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800feea:	2b05      	cmp	r3, #5
 800feec:	d801      	bhi.n	800fef2 <__hexdig_fun+0x1a>
 800feee:	3847      	subs	r0, #71	; 0x47
 800fef0:	e7f7      	b.n	800fee2 <__hexdig_fun+0xa>
 800fef2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800fef6:	2b05      	cmp	r3, #5
 800fef8:	d801      	bhi.n	800fefe <__hexdig_fun+0x26>
 800fefa:	3827      	subs	r0, #39	; 0x27
 800fefc:	e7f1      	b.n	800fee2 <__hexdig_fun+0xa>
 800fefe:	2000      	movs	r0, #0
 800ff00:	4770      	bx	lr

0800ff02 <__gethex>:
 800ff02:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff06:	b08b      	sub	sp, #44	; 0x2c
 800ff08:	468a      	mov	sl, r1
 800ff0a:	9002      	str	r0, [sp, #8]
 800ff0c:	9816      	ldr	r0, [sp, #88]	; 0x58
 800ff0e:	9306      	str	r3, [sp, #24]
 800ff10:	4690      	mov	r8, r2
 800ff12:	f000 facd 	bl	80104b0 <__localeconv_l>
 800ff16:	6803      	ldr	r3, [r0, #0]
 800ff18:	9303      	str	r3, [sp, #12]
 800ff1a:	4618      	mov	r0, r3
 800ff1c:	f7f0 f962 	bl	80001e4 <strlen>
 800ff20:	9b03      	ldr	r3, [sp, #12]
 800ff22:	9001      	str	r0, [sp, #4]
 800ff24:	4403      	add	r3, r0
 800ff26:	f04f 0b00 	mov.w	fp, #0
 800ff2a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800ff2e:	9307      	str	r3, [sp, #28]
 800ff30:	f8da 3000 	ldr.w	r3, [sl]
 800ff34:	3302      	adds	r3, #2
 800ff36:	461f      	mov	r7, r3
 800ff38:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ff3c:	2830      	cmp	r0, #48	; 0x30
 800ff3e:	d06c      	beq.n	801001a <__gethex+0x118>
 800ff40:	f7ff ffca 	bl	800fed8 <__hexdig_fun>
 800ff44:	4604      	mov	r4, r0
 800ff46:	2800      	cmp	r0, #0
 800ff48:	d16a      	bne.n	8010020 <__gethex+0x11e>
 800ff4a:	9a01      	ldr	r2, [sp, #4]
 800ff4c:	9903      	ldr	r1, [sp, #12]
 800ff4e:	4638      	mov	r0, r7
 800ff50:	f001 f8ae 	bl	80110b0 <strncmp>
 800ff54:	2800      	cmp	r0, #0
 800ff56:	d166      	bne.n	8010026 <__gethex+0x124>
 800ff58:	9b01      	ldr	r3, [sp, #4]
 800ff5a:	5cf8      	ldrb	r0, [r7, r3]
 800ff5c:	18fe      	adds	r6, r7, r3
 800ff5e:	f7ff ffbb 	bl	800fed8 <__hexdig_fun>
 800ff62:	2800      	cmp	r0, #0
 800ff64:	d062      	beq.n	801002c <__gethex+0x12a>
 800ff66:	4633      	mov	r3, r6
 800ff68:	7818      	ldrb	r0, [r3, #0]
 800ff6a:	2830      	cmp	r0, #48	; 0x30
 800ff6c:	461f      	mov	r7, r3
 800ff6e:	f103 0301 	add.w	r3, r3, #1
 800ff72:	d0f9      	beq.n	800ff68 <__gethex+0x66>
 800ff74:	f7ff ffb0 	bl	800fed8 <__hexdig_fun>
 800ff78:	fab0 f580 	clz	r5, r0
 800ff7c:	096d      	lsrs	r5, r5, #5
 800ff7e:	4634      	mov	r4, r6
 800ff80:	f04f 0b01 	mov.w	fp, #1
 800ff84:	463a      	mov	r2, r7
 800ff86:	4616      	mov	r6, r2
 800ff88:	3201      	adds	r2, #1
 800ff8a:	7830      	ldrb	r0, [r6, #0]
 800ff8c:	f7ff ffa4 	bl	800fed8 <__hexdig_fun>
 800ff90:	2800      	cmp	r0, #0
 800ff92:	d1f8      	bne.n	800ff86 <__gethex+0x84>
 800ff94:	9a01      	ldr	r2, [sp, #4]
 800ff96:	9903      	ldr	r1, [sp, #12]
 800ff98:	4630      	mov	r0, r6
 800ff9a:	f001 f889 	bl	80110b0 <strncmp>
 800ff9e:	b950      	cbnz	r0, 800ffb6 <__gethex+0xb4>
 800ffa0:	b954      	cbnz	r4, 800ffb8 <__gethex+0xb6>
 800ffa2:	9b01      	ldr	r3, [sp, #4]
 800ffa4:	18f4      	adds	r4, r6, r3
 800ffa6:	4622      	mov	r2, r4
 800ffa8:	4616      	mov	r6, r2
 800ffaa:	3201      	adds	r2, #1
 800ffac:	7830      	ldrb	r0, [r6, #0]
 800ffae:	f7ff ff93 	bl	800fed8 <__hexdig_fun>
 800ffb2:	2800      	cmp	r0, #0
 800ffb4:	d1f8      	bne.n	800ffa8 <__gethex+0xa6>
 800ffb6:	b10c      	cbz	r4, 800ffbc <__gethex+0xba>
 800ffb8:	1ba4      	subs	r4, r4, r6
 800ffba:	00a4      	lsls	r4, r4, #2
 800ffbc:	7833      	ldrb	r3, [r6, #0]
 800ffbe:	2b50      	cmp	r3, #80	; 0x50
 800ffc0:	d001      	beq.n	800ffc6 <__gethex+0xc4>
 800ffc2:	2b70      	cmp	r3, #112	; 0x70
 800ffc4:	d140      	bne.n	8010048 <__gethex+0x146>
 800ffc6:	7873      	ldrb	r3, [r6, #1]
 800ffc8:	2b2b      	cmp	r3, #43	; 0x2b
 800ffca:	d031      	beq.n	8010030 <__gethex+0x12e>
 800ffcc:	2b2d      	cmp	r3, #45	; 0x2d
 800ffce:	d033      	beq.n	8010038 <__gethex+0x136>
 800ffd0:	1c71      	adds	r1, r6, #1
 800ffd2:	f04f 0900 	mov.w	r9, #0
 800ffd6:	7808      	ldrb	r0, [r1, #0]
 800ffd8:	f7ff ff7e 	bl	800fed8 <__hexdig_fun>
 800ffdc:	1e43      	subs	r3, r0, #1
 800ffde:	b2db      	uxtb	r3, r3
 800ffe0:	2b18      	cmp	r3, #24
 800ffe2:	d831      	bhi.n	8010048 <__gethex+0x146>
 800ffe4:	f1a0 0210 	sub.w	r2, r0, #16
 800ffe8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ffec:	f7ff ff74 	bl	800fed8 <__hexdig_fun>
 800fff0:	1e43      	subs	r3, r0, #1
 800fff2:	b2db      	uxtb	r3, r3
 800fff4:	2b18      	cmp	r3, #24
 800fff6:	d922      	bls.n	801003e <__gethex+0x13c>
 800fff8:	f1b9 0f00 	cmp.w	r9, #0
 800fffc:	d000      	beq.n	8010000 <__gethex+0xfe>
 800fffe:	4252      	negs	r2, r2
 8010000:	4414      	add	r4, r2
 8010002:	f8ca 1000 	str.w	r1, [sl]
 8010006:	b30d      	cbz	r5, 801004c <__gethex+0x14a>
 8010008:	f1bb 0f00 	cmp.w	fp, #0
 801000c:	bf0c      	ite	eq
 801000e:	2706      	moveq	r7, #6
 8010010:	2700      	movne	r7, #0
 8010012:	4638      	mov	r0, r7
 8010014:	b00b      	add	sp, #44	; 0x2c
 8010016:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801001a:	f10b 0b01 	add.w	fp, fp, #1
 801001e:	e78a      	b.n	800ff36 <__gethex+0x34>
 8010020:	2500      	movs	r5, #0
 8010022:	462c      	mov	r4, r5
 8010024:	e7ae      	b.n	800ff84 <__gethex+0x82>
 8010026:	463e      	mov	r6, r7
 8010028:	2501      	movs	r5, #1
 801002a:	e7c7      	b.n	800ffbc <__gethex+0xba>
 801002c:	4604      	mov	r4, r0
 801002e:	e7fb      	b.n	8010028 <__gethex+0x126>
 8010030:	f04f 0900 	mov.w	r9, #0
 8010034:	1cb1      	adds	r1, r6, #2
 8010036:	e7ce      	b.n	800ffd6 <__gethex+0xd4>
 8010038:	f04f 0901 	mov.w	r9, #1
 801003c:	e7fa      	b.n	8010034 <__gethex+0x132>
 801003e:	230a      	movs	r3, #10
 8010040:	fb03 0202 	mla	r2, r3, r2, r0
 8010044:	3a10      	subs	r2, #16
 8010046:	e7cf      	b.n	800ffe8 <__gethex+0xe6>
 8010048:	4631      	mov	r1, r6
 801004a:	e7da      	b.n	8010002 <__gethex+0x100>
 801004c:	1bf3      	subs	r3, r6, r7
 801004e:	3b01      	subs	r3, #1
 8010050:	4629      	mov	r1, r5
 8010052:	2b07      	cmp	r3, #7
 8010054:	dc49      	bgt.n	80100ea <__gethex+0x1e8>
 8010056:	9802      	ldr	r0, [sp, #8]
 8010058:	f000 fa59 	bl	801050e <_Balloc>
 801005c:	9b01      	ldr	r3, [sp, #4]
 801005e:	f100 0914 	add.w	r9, r0, #20
 8010062:	f04f 0b00 	mov.w	fp, #0
 8010066:	f1c3 0301 	rsb	r3, r3, #1
 801006a:	4605      	mov	r5, r0
 801006c:	f8cd 9010 	str.w	r9, [sp, #16]
 8010070:	46da      	mov	sl, fp
 8010072:	9308      	str	r3, [sp, #32]
 8010074:	42b7      	cmp	r7, r6
 8010076:	d33b      	bcc.n	80100f0 <__gethex+0x1ee>
 8010078:	9804      	ldr	r0, [sp, #16]
 801007a:	f840 ab04 	str.w	sl, [r0], #4
 801007e:	eba0 0009 	sub.w	r0, r0, r9
 8010082:	1080      	asrs	r0, r0, #2
 8010084:	6128      	str	r0, [r5, #16]
 8010086:	0147      	lsls	r7, r0, #5
 8010088:	4650      	mov	r0, sl
 801008a:	f000 fae7 	bl	801065c <__hi0bits>
 801008e:	f8d8 6000 	ldr.w	r6, [r8]
 8010092:	1a3f      	subs	r7, r7, r0
 8010094:	42b7      	cmp	r7, r6
 8010096:	dd64      	ble.n	8010162 <__gethex+0x260>
 8010098:	1bbf      	subs	r7, r7, r6
 801009a:	4639      	mov	r1, r7
 801009c:	4628      	mov	r0, r5
 801009e:	f000 fe07 	bl	8010cb0 <__any_on>
 80100a2:	4682      	mov	sl, r0
 80100a4:	b178      	cbz	r0, 80100c6 <__gethex+0x1c4>
 80100a6:	1e7b      	subs	r3, r7, #1
 80100a8:	1159      	asrs	r1, r3, #5
 80100aa:	f003 021f 	and.w	r2, r3, #31
 80100ae:	f04f 0a01 	mov.w	sl, #1
 80100b2:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80100b6:	fa0a f202 	lsl.w	r2, sl, r2
 80100ba:	420a      	tst	r2, r1
 80100bc:	d003      	beq.n	80100c6 <__gethex+0x1c4>
 80100be:	4553      	cmp	r3, sl
 80100c0:	dc46      	bgt.n	8010150 <__gethex+0x24e>
 80100c2:	f04f 0a02 	mov.w	sl, #2
 80100c6:	4639      	mov	r1, r7
 80100c8:	4628      	mov	r0, r5
 80100ca:	f7ff fecb 	bl	800fe64 <rshift>
 80100ce:	443c      	add	r4, r7
 80100d0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80100d4:	42a3      	cmp	r3, r4
 80100d6:	da52      	bge.n	801017e <__gethex+0x27c>
 80100d8:	4629      	mov	r1, r5
 80100da:	9802      	ldr	r0, [sp, #8]
 80100dc:	f000 fa3c 	bl	8010558 <_Bfree>
 80100e0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80100e2:	2300      	movs	r3, #0
 80100e4:	6013      	str	r3, [r2, #0]
 80100e6:	27a3      	movs	r7, #163	; 0xa3
 80100e8:	e793      	b.n	8010012 <__gethex+0x110>
 80100ea:	3101      	adds	r1, #1
 80100ec:	105b      	asrs	r3, r3, #1
 80100ee:	e7b0      	b.n	8010052 <__gethex+0x150>
 80100f0:	1e73      	subs	r3, r6, #1
 80100f2:	9305      	str	r3, [sp, #20]
 80100f4:	9a07      	ldr	r2, [sp, #28]
 80100f6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80100fa:	4293      	cmp	r3, r2
 80100fc:	d018      	beq.n	8010130 <__gethex+0x22e>
 80100fe:	f1bb 0f20 	cmp.w	fp, #32
 8010102:	d107      	bne.n	8010114 <__gethex+0x212>
 8010104:	9b04      	ldr	r3, [sp, #16]
 8010106:	f8c3 a000 	str.w	sl, [r3]
 801010a:	3304      	adds	r3, #4
 801010c:	f04f 0a00 	mov.w	sl, #0
 8010110:	9304      	str	r3, [sp, #16]
 8010112:	46d3      	mov	fp, sl
 8010114:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8010118:	f7ff fede 	bl	800fed8 <__hexdig_fun>
 801011c:	f000 000f 	and.w	r0, r0, #15
 8010120:	fa00 f00b 	lsl.w	r0, r0, fp
 8010124:	ea4a 0a00 	orr.w	sl, sl, r0
 8010128:	f10b 0b04 	add.w	fp, fp, #4
 801012c:	9b05      	ldr	r3, [sp, #20]
 801012e:	e00d      	b.n	801014c <__gethex+0x24a>
 8010130:	9b05      	ldr	r3, [sp, #20]
 8010132:	9a08      	ldr	r2, [sp, #32]
 8010134:	4413      	add	r3, r2
 8010136:	42bb      	cmp	r3, r7
 8010138:	d3e1      	bcc.n	80100fe <__gethex+0x1fc>
 801013a:	4618      	mov	r0, r3
 801013c:	9a01      	ldr	r2, [sp, #4]
 801013e:	9903      	ldr	r1, [sp, #12]
 8010140:	9309      	str	r3, [sp, #36]	; 0x24
 8010142:	f000 ffb5 	bl	80110b0 <strncmp>
 8010146:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010148:	2800      	cmp	r0, #0
 801014a:	d1d8      	bne.n	80100fe <__gethex+0x1fc>
 801014c:	461e      	mov	r6, r3
 801014e:	e791      	b.n	8010074 <__gethex+0x172>
 8010150:	1eb9      	subs	r1, r7, #2
 8010152:	4628      	mov	r0, r5
 8010154:	f000 fdac 	bl	8010cb0 <__any_on>
 8010158:	2800      	cmp	r0, #0
 801015a:	d0b2      	beq.n	80100c2 <__gethex+0x1c0>
 801015c:	f04f 0a03 	mov.w	sl, #3
 8010160:	e7b1      	b.n	80100c6 <__gethex+0x1c4>
 8010162:	da09      	bge.n	8010178 <__gethex+0x276>
 8010164:	1bf7      	subs	r7, r6, r7
 8010166:	4629      	mov	r1, r5
 8010168:	463a      	mov	r2, r7
 801016a:	9802      	ldr	r0, [sp, #8]
 801016c:	f000 fba4 	bl	80108b8 <__lshift>
 8010170:	1be4      	subs	r4, r4, r7
 8010172:	4605      	mov	r5, r0
 8010174:	f100 0914 	add.w	r9, r0, #20
 8010178:	f04f 0a00 	mov.w	sl, #0
 801017c:	e7a8      	b.n	80100d0 <__gethex+0x1ce>
 801017e:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8010182:	42a0      	cmp	r0, r4
 8010184:	dd6a      	ble.n	801025c <__gethex+0x35a>
 8010186:	1b04      	subs	r4, r0, r4
 8010188:	42a6      	cmp	r6, r4
 801018a:	dc2e      	bgt.n	80101ea <__gethex+0x2e8>
 801018c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010190:	2b02      	cmp	r3, #2
 8010192:	d022      	beq.n	80101da <__gethex+0x2d8>
 8010194:	2b03      	cmp	r3, #3
 8010196:	d024      	beq.n	80101e2 <__gethex+0x2e0>
 8010198:	2b01      	cmp	r3, #1
 801019a:	d115      	bne.n	80101c8 <__gethex+0x2c6>
 801019c:	42a6      	cmp	r6, r4
 801019e:	d113      	bne.n	80101c8 <__gethex+0x2c6>
 80101a0:	2e01      	cmp	r6, #1
 80101a2:	dc0b      	bgt.n	80101bc <__gethex+0x2ba>
 80101a4:	9a06      	ldr	r2, [sp, #24]
 80101a6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80101aa:	6013      	str	r3, [r2, #0]
 80101ac:	2301      	movs	r3, #1
 80101ae:	612b      	str	r3, [r5, #16]
 80101b0:	f8c9 3000 	str.w	r3, [r9]
 80101b4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80101b6:	2762      	movs	r7, #98	; 0x62
 80101b8:	601d      	str	r5, [r3, #0]
 80101ba:	e72a      	b.n	8010012 <__gethex+0x110>
 80101bc:	1e71      	subs	r1, r6, #1
 80101be:	4628      	mov	r0, r5
 80101c0:	f000 fd76 	bl	8010cb0 <__any_on>
 80101c4:	2800      	cmp	r0, #0
 80101c6:	d1ed      	bne.n	80101a4 <__gethex+0x2a2>
 80101c8:	4629      	mov	r1, r5
 80101ca:	9802      	ldr	r0, [sp, #8]
 80101cc:	f000 f9c4 	bl	8010558 <_Bfree>
 80101d0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80101d2:	2300      	movs	r3, #0
 80101d4:	6013      	str	r3, [r2, #0]
 80101d6:	2750      	movs	r7, #80	; 0x50
 80101d8:	e71b      	b.n	8010012 <__gethex+0x110>
 80101da:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80101dc:	2b00      	cmp	r3, #0
 80101de:	d0e1      	beq.n	80101a4 <__gethex+0x2a2>
 80101e0:	e7f2      	b.n	80101c8 <__gethex+0x2c6>
 80101e2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80101e4:	2b00      	cmp	r3, #0
 80101e6:	d1dd      	bne.n	80101a4 <__gethex+0x2a2>
 80101e8:	e7ee      	b.n	80101c8 <__gethex+0x2c6>
 80101ea:	1e67      	subs	r7, r4, #1
 80101ec:	f1ba 0f00 	cmp.w	sl, #0
 80101f0:	d131      	bne.n	8010256 <__gethex+0x354>
 80101f2:	b127      	cbz	r7, 80101fe <__gethex+0x2fc>
 80101f4:	4639      	mov	r1, r7
 80101f6:	4628      	mov	r0, r5
 80101f8:	f000 fd5a 	bl	8010cb0 <__any_on>
 80101fc:	4682      	mov	sl, r0
 80101fe:	117a      	asrs	r2, r7, #5
 8010200:	2301      	movs	r3, #1
 8010202:	f007 071f 	and.w	r7, r7, #31
 8010206:	fa03 f707 	lsl.w	r7, r3, r7
 801020a:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 801020e:	4621      	mov	r1, r4
 8010210:	421f      	tst	r7, r3
 8010212:	4628      	mov	r0, r5
 8010214:	bf18      	it	ne
 8010216:	f04a 0a02 	orrne.w	sl, sl, #2
 801021a:	1b36      	subs	r6, r6, r4
 801021c:	f7ff fe22 	bl	800fe64 <rshift>
 8010220:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8010224:	2702      	movs	r7, #2
 8010226:	f1ba 0f00 	cmp.w	sl, #0
 801022a:	d048      	beq.n	80102be <__gethex+0x3bc>
 801022c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010230:	2b02      	cmp	r3, #2
 8010232:	d015      	beq.n	8010260 <__gethex+0x35e>
 8010234:	2b03      	cmp	r3, #3
 8010236:	d017      	beq.n	8010268 <__gethex+0x366>
 8010238:	2b01      	cmp	r3, #1
 801023a:	d109      	bne.n	8010250 <__gethex+0x34e>
 801023c:	f01a 0f02 	tst.w	sl, #2
 8010240:	d006      	beq.n	8010250 <__gethex+0x34e>
 8010242:	f8d9 3000 	ldr.w	r3, [r9]
 8010246:	ea4a 0a03 	orr.w	sl, sl, r3
 801024a:	f01a 0f01 	tst.w	sl, #1
 801024e:	d10e      	bne.n	801026e <__gethex+0x36c>
 8010250:	f047 0710 	orr.w	r7, r7, #16
 8010254:	e033      	b.n	80102be <__gethex+0x3bc>
 8010256:	f04f 0a01 	mov.w	sl, #1
 801025a:	e7d0      	b.n	80101fe <__gethex+0x2fc>
 801025c:	2701      	movs	r7, #1
 801025e:	e7e2      	b.n	8010226 <__gethex+0x324>
 8010260:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010262:	f1c3 0301 	rsb	r3, r3, #1
 8010266:	9315      	str	r3, [sp, #84]	; 0x54
 8010268:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801026a:	2b00      	cmp	r3, #0
 801026c:	d0f0      	beq.n	8010250 <__gethex+0x34e>
 801026e:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8010272:	f105 0314 	add.w	r3, r5, #20
 8010276:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 801027a:	eb03 010a 	add.w	r1, r3, sl
 801027e:	f04f 0c00 	mov.w	ip, #0
 8010282:	4618      	mov	r0, r3
 8010284:	f853 2b04 	ldr.w	r2, [r3], #4
 8010288:	f1b2 3fff 	cmp.w	r2, #4294967295
 801028c:	d01c      	beq.n	80102c8 <__gethex+0x3c6>
 801028e:	3201      	adds	r2, #1
 8010290:	6002      	str	r2, [r0, #0]
 8010292:	2f02      	cmp	r7, #2
 8010294:	f105 0314 	add.w	r3, r5, #20
 8010298:	d138      	bne.n	801030c <__gethex+0x40a>
 801029a:	f8d8 2000 	ldr.w	r2, [r8]
 801029e:	3a01      	subs	r2, #1
 80102a0:	42b2      	cmp	r2, r6
 80102a2:	d10a      	bne.n	80102ba <__gethex+0x3b8>
 80102a4:	1171      	asrs	r1, r6, #5
 80102a6:	2201      	movs	r2, #1
 80102a8:	f006 061f 	and.w	r6, r6, #31
 80102ac:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80102b0:	fa02 f606 	lsl.w	r6, r2, r6
 80102b4:	421e      	tst	r6, r3
 80102b6:	bf18      	it	ne
 80102b8:	4617      	movne	r7, r2
 80102ba:	f047 0720 	orr.w	r7, r7, #32
 80102be:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80102c0:	601d      	str	r5, [r3, #0]
 80102c2:	9b06      	ldr	r3, [sp, #24]
 80102c4:	601c      	str	r4, [r3, #0]
 80102c6:	e6a4      	b.n	8010012 <__gethex+0x110>
 80102c8:	4299      	cmp	r1, r3
 80102ca:	f843 cc04 	str.w	ip, [r3, #-4]
 80102ce:	d8d8      	bhi.n	8010282 <__gethex+0x380>
 80102d0:	68ab      	ldr	r3, [r5, #8]
 80102d2:	4599      	cmp	r9, r3
 80102d4:	db12      	blt.n	80102fc <__gethex+0x3fa>
 80102d6:	6869      	ldr	r1, [r5, #4]
 80102d8:	9802      	ldr	r0, [sp, #8]
 80102da:	3101      	adds	r1, #1
 80102dc:	f000 f917 	bl	801050e <_Balloc>
 80102e0:	692a      	ldr	r2, [r5, #16]
 80102e2:	3202      	adds	r2, #2
 80102e4:	f105 010c 	add.w	r1, r5, #12
 80102e8:	4683      	mov	fp, r0
 80102ea:	0092      	lsls	r2, r2, #2
 80102ec:	300c      	adds	r0, #12
 80102ee:	f000 f903 	bl	80104f8 <memcpy>
 80102f2:	4629      	mov	r1, r5
 80102f4:	9802      	ldr	r0, [sp, #8]
 80102f6:	f000 f92f 	bl	8010558 <_Bfree>
 80102fa:	465d      	mov	r5, fp
 80102fc:	692b      	ldr	r3, [r5, #16]
 80102fe:	1c5a      	adds	r2, r3, #1
 8010300:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8010304:	612a      	str	r2, [r5, #16]
 8010306:	2201      	movs	r2, #1
 8010308:	615a      	str	r2, [r3, #20]
 801030a:	e7c2      	b.n	8010292 <__gethex+0x390>
 801030c:	692a      	ldr	r2, [r5, #16]
 801030e:	454a      	cmp	r2, r9
 8010310:	dd0b      	ble.n	801032a <__gethex+0x428>
 8010312:	2101      	movs	r1, #1
 8010314:	4628      	mov	r0, r5
 8010316:	f7ff fda5 	bl	800fe64 <rshift>
 801031a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801031e:	3401      	adds	r4, #1
 8010320:	42a3      	cmp	r3, r4
 8010322:	f6ff aed9 	blt.w	80100d8 <__gethex+0x1d6>
 8010326:	2701      	movs	r7, #1
 8010328:	e7c7      	b.n	80102ba <__gethex+0x3b8>
 801032a:	f016 061f 	ands.w	r6, r6, #31
 801032e:	d0fa      	beq.n	8010326 <__gethex+0x424>
 8010330:	449a      	add	sl, r3
 8010332:	f1c6 0620 	rsb	r6, r6, #32
 8010336:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 801033a:	f000 f98f 	bl	801065c <__hi0bits>
 801033e:	42b0      	cmp	r0, r6
 8010340:	dbe7      	blt.n	8010312 <__gethex+0x410>
 8010342:	e7f0      	b.n	8010326 <__gethex+0x424>

08010344 <L_shift>:
 8010344:	f1c2 0208 	rsb	r2, r2, #8
 8010348:	0092      	lsls	r2, r2, #2
 801034a:	b570      	push	{r4, r5, r6, lr}
 801034c:	f1c2 0620 	rsb	r6, r2, #32
 8010350:	6843      	ldr	r3, [r0, #4]
 8010352:	6804      	ldr	r4, [r0, #0]
 8010354:	fa03 f506 	lsl.w	r5, r3, r6
 8010358:	432c      	orrs	r4, r5
 801035a:	40d3      	lsrs	r3, r2
 801035c:	6004      	str	r4, [r0, #0]
 801035e:	f840 3f04 	str.w	r3, [r0, #4]!
 8010362:	4288      	cmp	r0, r1
 8010364:	d3f4      	bcc.n	8010350 <L_shift+0xc>
 8010366:	bd70      	pop	{r4, r5, r6, pc}

08010368 <__match>:
 8010368:	b530      	push	{r4, r5, lr}
 801036a:	6803      	ldr	r3, [r0, #0]
 801036c:	3301      	adds	r3, #1
 801036e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010372:	b914      	cbnz	r4, 801037a <__match+0x12>
 8010374:	6003      	str	r3, [r0, #0]
 8010376:	2001      	movs	r0, #1
 8010378:	bd30      	pop	{r4, r5, pc}
 801037a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801037e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8010382:	2d19      	cmp	r5, #25
 8010384:	bf98      	it	ls
 8010386:	3220      	addls	r2, #32
 8010388:	42a2      	cmp	r2, r4
 801038a:	d0f0      	beq.n	801036e <__match+0x6>
 801038c:	2000      	movs	r0, #0
 801038e:	e7f3      	b.n	8010378 <__match+0x10>

08010390 <__hexnan>:
 8010390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010394:	680b      	ldr	r3, [r1, #0]
 8010396:	6801      	ldr	r1, [r0, #0]
 8010398:	115f      	asrs	r7, r3, #5
 801039a:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 801039e:	f013 031f 	ands.w	r3, r3, #31
 80103a2:	b087      	sub	sp, #28
 80103a4:	bf18      	it	ne
 80103a6:	3704      	addne	r7, #4
 80103a8:	2500      	movs	r5, #0
 80103aa:	1f3e      	subs	r6, r7, #4
 80103ac:	4682      	mov	sl, r0
 80103ae:	4690      	mov	r8, r2
 80103b0:	9301      	str	r3, [sp, #4]
 80103b2:	f847 5c04 	str.w	r5, [r7, #-4]
 80103b6:	46b1      	mov	r9, r6
 80103b8:	4634      	mov	r4, r6
 80103ba:	9502      	str	r5, [sp, #8]
 80103bc:	46ab      	mov	fp, r5
 80103be:	784a      	ldrb	r2, [r1, #1]
 80103c0:	1c4b      	adds	r3, r1, #1
 80103c2:	9303      	str	r3, [sp, #12]
 80103c4:	b342      	cbz	r2, 8010418 <__hexnan+0x88>
 80103c6:	4610      	mov	r0, r2
 80103c8:	9105      	str	r1, [sp, #20]
 80103ca:	9204      	str	r2, [sp, #16]
 80103cc:	f7ff fd84 	bl	800fed8 <__hexdig_fun>
 80103d0:	2800      	cmp	r0, #0
 80103d2:	d143      	bne.n	801045c <__hexnan+0xcc>
 80103d4:	9a04      	ldr	r2, [sp, #16]
 80103d6:	9905      	ldr	r1, [sp, #20]
 80103d8:	2a20      	cmp	r2, #32
 80103da:	d818      	bhi.n	801040e <__hexnan+0x7e>
 80103dc:	9b02      	ldr	r3, [sp, #8]
 80103de:	459b      	cmp	fp, r3
 80103e0:	dd13      	ble.n	801040a <__hexnan+0x7a>
 80103e2:	454c      	cmp	r4, r9
 80103e4:	d206      	bcs.n	80103f4 <__hexnan+0x64>
 80103e6:	2d07      	cmp	r5, #7
 80103e8:	dc04      	bgt.n	80103f4 <__hexnan+0x64>
 80103ea:	462a      	mov	r2, r5
 80103ec:	4649      	mov	r1, r9
 80103ee:	4620      	mov	r0, r4
 80103f0:	f7ff ffa8 	bl	8010344 <L_shift>
 80103f4:	4544      	cmp	r4, r8
 80103f6:	d944      	bls.n	8010482 <__hexnan+0xf2>
 80103f8:	2300      	movs	r3, #0
 80103fa:	f1a4 0904 	sub.w	r9, r4, #4
 80103fe:	f844 3c04 	str.w	r3, [r4, #-4]
 8010402:	f8cd b008 	str.w	fp, [sp, #8]
 8010406:	464c      	mov	r4, r9
 8010408:	461d      	mov	r5, r3
 801040a:	9903      	ldr	r1, [sp, #12]
 801040c:	e7d7      	b.n	80103be <__hexnan+0x2e>
 801040e:	2a29      	cmp	r2, #41	; 0x29
 8010410:	d14a      	bne.n	80104a8 <__hexnan+0x118>
 8010412:	3102      	adds	r1, #2
 8010414:	f8ca 1000 	str.w	r1, [sl]
 8010418:	f1bb 0f00 	cmp.w	fp, #0
 801041c:	d044      	beq.n	80104a8 <__hexnan+0x118>
 801041e:	454c      	cmp	r4, r9
 8010420:	d206      	bcs.n	8010430 <__hexnan+0xa0>
 8010422:	2d07      	cmp	r5, #7
 8010424:	dc04      	bgt.n	8010430 <__hexnan+0xa0>
 8010426:	462a      	mov	r2, r5
 8010428:	4649      	mov	r1, r9
 801042a:	4620      	mov	r0, r4
 801042c:	f7ff ff8a 	bl	8010344 <L_shift>
 8010430:	4544      	cmp	r4, r8
 8010432:	d928      	bls.n	8010486 <__hexnan+0xf6>
 8010434:	4643      	mov	r3, r8
 8010436:	f854 2b04 	ldr.w	r2, [r4], #4
 801043a:	f843 2b04 	str.w	r2, [r3], #4
 801043e:	42a6      	cmp	r6, r4
 8010440:	d2f9      	bcs.n	8010436 <__hexnan+0xa6>
 8010442:	2200      	movs	r2, #0
 8010444:	f843 2b04 	str.w	r2, [r3], #4
 8010448:	429e      	cmp	r6, r3
 801044a:	d2fb      	bcs.n	8010444 <__hexnan+0xb4>
 801044c:	6833      	ldr	r3, [r6, #0]
 801044e:	b91b      	cbnz	r3, 8010458 <__hexnan+0xc8>
 8010450:	4546      	cmp	r6, r8
 8010452:	d127      	bne.n	80104a4 <__hexnan+0x114>
 8010454:	2301      	movs	r3, #1
 8010456:	6033      	str	r3, [r6, #0]
 8010458:	2005      	movs	r0, #5
 801045a:	e026      	b.n	80104aa <__hexnan+0x11a>
 801045c:	3501      	adds	r5, #1
 801045e:	2d08      	cmp	r5, #8
 8010460:	f10b 0b01 	add.w	fp, fp, #1
 8010464:	dd06      	ble.n	8010474 <__hexnan+0xe4>
 8010466:	4544      	cmp	r4, r8
 8010468:	d9cf      	bls.n	801040a <__hexnan+0x7a>
 801046a:	2300      	movs	r3, #0
 801046c:	f844 3c04 	str.w	r3, [r4, #-4]
 8010470:	2501      	movs	r5, #1
 8010472:	3c04      	subs	r4, #4
 8010474:	6822      	ldr	r2, [r4, #0]
 8010476:	f000 000f 	and.w	r0, r0, #15
 801047a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801047e:	6020      	str	r0, [r4, #0]
 8010480:	e7c3      	b.n	801040a <__hexnan+0x7a>
 8010482:	2508      	movs	r5, #8
 8010484:	e7c1      	b.n	801040a <__hexnan+0x7a>
 8010486:	9b01      	ldr	r3, [sp, #4]
 8010488:	2b00      	cmp	r3, #0
 801048a:	d0df      	beq.n	801044c <__hexnan+0xbc>
 801048c:	f04f 32ff 	mov.w	r2, #4294967295
 8010490:	f1c3 0320 	rsb	r3, r3, #32
 8010494:	fa22 f303 	lsr.w	r3, r2, r3
 8010498:	f857 2c04 	ldr.w	r2, [r7, #-4]
 801049c:	401a      	ands	r2, r3
 801049e:	f847 2c04 	str.w	r2, [r7, #-4]
 80104a2:	e7d3      	b.n	801044c <__hexnan+0xbc>
 80104a4:	3e04      	subs	r6, #4
 80104a6:	e7d1      	b.n	801044c <__hexnan+0xbc>
 80104a8:	2004      	movs	r0, #4
 80104aa:	b007      	add	sp, #28
 80104ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080104b0 <__localeconv_l>:
 80104b0:	30f0      	adds	r0, #240	; 0xf0
 80104b2:	4770      	bx	lr

080104b4 <_localeconv_r>:
 80104b4:	4b04      	ldr	r3, [pc, #16]	; (80104c8 <_localeconv_r+0x14>)
 80104b6:	681b      	ldr	r3, [r3, #0]
 80104b8:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80104ba:	4b04      	ldr	r3, [pc, #16]	; (80104cc <_localeconv_r+0x18>)
 80104bc:	2800      	cmp	r0, #0
 80104be:	bf08      	it	eq
 80104c0:	4618      	moveq	r0, r3
 80104c2:	30f0      	adds	r0, #240	; 0xf0
 80104c4:	4770      	bx	lr
 80104c6:	bf00      	nop
 80104c8:	200000ec 	.word	0x200000ec
 80104cc:	2000092c 	.word	0x2000092c

080104d0 <__retarget_lock_acquire_recursive>:
 80104d0:	4770      	bx	lr

080104d2 <__retarget_lock_release_recursive>:
 80104d2:	4770      	bx	lr

080104d4 <__ascii_mbtowc>:
 80104d4:	b082      	sub	sp, #8
 80104d6:	b901      	cbnz	r1, 80104da <__ascii_mbtowc+0x6>
 80104d8:	a901      	add	r1, sp, #4
 80104da:	b142      	cbz	r2, 80104ee <__ascii_mbtowc+0x1a>
 80104dc:	b14b      	cbz	r3, 80104f2 <__ascii_mbtowc+0x1e>
 80104de:	7813      	ldrb	r3, [r2, #0]
 80104e0:	600b      	str	r3, [r1, #0]
 80104e2:	7812      	ldrb	r2, [r2, #0]
 80104e4:	1c10      	adds	r0, r2, #0
 80104e6:	bf18      	it	ne
 80104e8:	2001      	movne	r0, #1
 80104ea:	b002      	add	sp, #8
 80104ec:	4770      	bx	lr
 80104ee:	4610      	mov	r0, r2
 80104f0:	e7fb      	b.n	80104ea <__ascii_mbtowc+0x16>
 80104f2:	f06f 0001 	mvn.w	r0, #1
 80104f6:	e7f8      	b.n	80104ea <__ascii_mbtowc+0x16>

080104f8 <memcpy>:
 80104f8:	b510      	push	{r4, lr}
 80104fa:	1e43      	subs	r3, r0, #1
 80104fc:	440a      	add	r2, r1
 80104fe:	4291      	cmp	r1, r2
 8010500:	d100      	bne.n	8010504 <memcpy+0xc>
 8010502:	bd10      	pop	{r4, pc}
 8010504:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010508:	f803 4f01 	strb.w	r4, [r3, #1]!
 801050c:	e7f7      	b.n	80104fe <memcpy+0x6>

0801050e <_Balloc>:
 801050e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8010510:	b570      	push	{r4, r5, r6, lr}
 8010512:	4605      	mov	r5, r0
 8010514:	460c      	mov	r4, r1
 8010516:	b17b      	cbz	r3, 8010538 <_Balloc+0x2a>
 8010518:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 801051a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801051e:	b9a0      	cbnz	r0, 801054a <_Balloc+0x3c>
 8010520:	2101      	movs	r1, #1
 8010522:	fa01 f604 	lsl.w	r6, r1, r4
 8010526:	1d72      	adds	r2, r6, #5
 8010528:	0092      	lsls	r2, r2, #2
 801052a:	4628      	mov	r0, r5
 801052c:	f000 feae 	bl	801128c <_calloc_r>
 8010530:	b148      	cbz	r0, 8010546 <_Balloc+0x38>
 8010532:	e9c0 4601 	strd	r4, r6, [r0, #4]
 8010536:	e00b      	b.n	8010550 <_Balloc+0x42>
 8010538:	2221      	movs	r2, #33	; 0x21
 801053a:	2104      	movs	r1, #4
 801053c:	f000 fea6 	bl	801128c <_calloc_r>
 8010540:	64e8      	str	r0, [r5, #76]	; 0x4c
 8010542:	2800      	cmp	r0, #0
 8010544:	d1e8      	bne.n	8010518 <_Balloc+0xa>
 8010546:	2000      	movs	r0, #0
 8010548:	bd70      	pop	{r4, r5, r6, pc}
 801054a:	6802      	ldr	r2, [r0, #0]
 801054c:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 8010550:	2300      	movs	r3, #0
 8010552:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010556:	e7f7      	b.n	8010548 <_Balloc+0x3a>

08010558 <_Bfree>:
 8010558:	b131      	cbz	r1, 8010568 <_Bfree+0x10>
 801055a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 801055c:	684a      	ldr	r2, [r1, #4]
 801055e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8010562:	6008      	str	r0, [r1, #0]
 8010564:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8010568:	4770      	bx	lr

0801056a <__multadd>:
 801056a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801056e:	690d      	ldr	r5, [r1, #16]
 8010570:	461f      	mov	r7, r3
 8010572:	4606      	mov	r6, r0
 8010574:	460c      	mov	r4, r1
 8010576:	f101 0c14 	add.w	ip, r1, #20
 801057a:	2300      	movs	r3, #0
 801057c:	f8dc 0000 	ldr.w	r0, [ip]
 8010580:	b281      	uxth	r1, r0
 8010582:	fb02 7101 	mla	r1, r2, r1, r7
 8010586:	0c0f      	lsrs	r7, r1, #16
 8010588:	0c00      	lsrs	r0, r0, #16
 801058a:	fb02 7000 	mla	r0, r2, r0, r7
 801058e:	b289      	uxth	r1, r1
 8010590:	3301      	adds	r3, #1
 8010592:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8010596:	429d      	cmp	r5, r3
 8010598:	ea4f 4710 	mov.w	r7, r0, lsr #16
 801059c:	f84c 1b04 	str.w	r1, [ip], #4
 80105a0:	dcec      	bgt.n	801057c <__multadd+0x12>
 80105a2:	b1d7      	cbz	r7, 80105da <__multadd+0x70>
 80105a4:	68a3      	ldr	r3, [r4, #8]
 80105a6:	42ab      	cmp	r3, r5
 80105a8:	dc12      	bgt.n	80105d0 <__multadd+0x66>
 80105aa:	6861      	ldr	r1, [r4, #4]
 80105ac:	4630      	mov	r0, r6
 80105ae:	3101      	adds	r1, #1
 80105b0:	f7ff ffad 	bl	801050e <_Balloc>
 80105b4:	6922      	ldr	r2, [r4, #16]
 80105b6:	3202      	adds	r2, #2
 80105b8:	f104 010c 	add.w	r1, r4, #12
 80105bc:	4680      	mov	r8, r0
 80105be:	0092      	lsls	r2, r2, #2
 80105c0:	300c      	adds	r0, #12
 80105c2:	f7ff ff99 	bl	80104f8 <memcpy>
 80105c6:	4621      	mov	r1, r4
 80105c8:	4630      	mov	r0, r6
 80105ca:	f7ff ffc5 	bl	8010558 <_Bfree>
 80105ce:	4644      	mov	r4, r8
 80105d0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80105d4:	3501      	adds	r5, #1
 80105d6:	615f      	str	r7, [r3, #20]
 80105d8:	6125      	str	r5, [r4, #16]
 80105da:	4620      	mov	r0, r4
 80105dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080105e0 <__s2b>:
 80105e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80105e4:	460c      	mov	r4, r1
 80105e6:	4615      	mov	r5, r2
 80105e8:	461f      	mov	r7, r3
 80105ea:	2209      	movs	r2, #9
 80105ec:	3308      	adds	r3, #8
 80105ee:	4606      	mov	r6, r0
 80105f0:	fb93 f3f2 	sdiv	r3, r3, r2
 80105f4:	2100      	movs	r1, #0
 80105f6:	2201      	movs	r2, #1
 80105f8:	429a      	cmp	r2, r3
 80105fa:	db20      	blt.n	801063e <__s2b+0x5e>
 80105fc:	4630      	mov	r0, r6
 80105fe:	f7ff ff86 	bl	801050e <_Balloc>
 8010602:	9b08      	ldr	r3, [sp, #32]
 8010604:	6143      	str	r3, [r0, #20]
 8010606:	2d09      	cmp	r5, #9
 8010608:	f04f 0301 	mov.w	r3, #1
 801060c:	6103      	str	r3, [r0, #16]
 801060e:	dd19      	ble.n	8010644 <__s2b+0x64>
 8010610:	f104 0809 	add.w	r8, r4, #9
 8010614:	46c1      	mov	r9, r8
 8010616:	442c      	add	r4, r5
 8010618:	f819 3b01 	ldrb.w	r3, [r9], #1
 801061c:	4601      	mov	r1, r0
 801061e:	3b30      	subs	r3, #48	; 0x30
 8010620:	220a      	movs	r2, #10
 8010622:	4630      	mov	r0, r6
 8010624:	f7ff ffa1 	bl	801056a <__multadd>
 8010628:	45a1      	cmp	r9, r4
 801062a:	d1f5      	bne.n	8010618 <__s2b+0x38>
 801062c:	eb08 0405 	add.w	r4, r8, r5
 8010630:	3c08      	subs	r4, #8
 8010632:	1b2d      	subs	r5, r5, r4
 8010634:	1963      	adds	r3, r4, r5
 8010636:	42bb      	cmp	r3, r7
 8010638:	db07      	blt.n	801064a <__s2b+0x6a>
 801063a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801063e:	0052      	lsls	r2, r2, #1
 8010640:	3101      	adds	r1, #1
 8010642:	e7d9      	b.n	80105f8 <__s2b+0x18>
 8010644:	340a      	adds	r4, #10
 8010646:	2509      	movs	r5, #9
 8010648:	e7f3      	b.n	8010632 <__s2b+0x52>
 801064a:	f814 3b01 	ldrb.w	r3, [r4], #1
 801064e:	4601      	mov	r1, r0
 8010650:	3b30      	subs	r3, #48	; 0x30
 8010652:	220a      	movs	r2, #10
 8010654:	4630      	mov	r0, r6
 8010656:	f7ff ff88 	bl	801056a <__multadd>
 801065a:	e7eb      	b.n	8010634 <__s2b+0x54>

0801065c <__hi0bits>:
 801065c:	0c02      	lsrs	r2, r0, #16
 801065e:	0412      	lsls	r2, r2, #16
 8010660:	4603      	mov	r3, r0
 8010662:	b9b2      	cbnz	r2, 8010692 <__hi0bits+0x36>
 8010664:	0403      	lsls	r3, r0, #16
 8010666:	2010      	movs	r0, #16
 8010668:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801066c:	bf04      	itt	eq
 801066e:	021b      	lsleq	r3, r3, #8
 8010670:	3008      	addeq	r0, #8
 8010672:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8010676:	bf04      	itt	eq
 8010678:	011b      	lsleq	r3, r3, #4
 801067a:	3004      	addeq	r0, #4
 801067c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8010680:	bf04      	itt	eq
 8010682:	009b      	lsleq	r3, r3, #2
 8010684:	3002      	addeq	r0, #2
 8010686:	2b00      	cmp	r3, #0
 8010688:	db06      	blt.n	8010698 <__hi0bits+0x3c>
 801068a:	005b      	lsls	r3, r3, #1
 801068c:	d503      	bpl.n	8010696 <__hi0bits+0x3a>
 801068e:	3001      	adds	r0, #1
 8010690:	4770      	bx	lr
 8010692:	2000      	movs	r0, #0
 8010694:	e7e8      	b.n	8010668 <__hi0bits+0xc>
 8010696:	2020      	movs	r0, #32
 8010698:	4770      	bx	lr

0801069a <__lo0bits>:
 801069a:	6803      	ldr	r3, [r0, #0]
 801069c:	f013 0207 	ands.w	r2, r3, #7
 80106a0:	4601      	mov	r1, r0
 80106a2:	d00b      	beq.n	80106bc <__lo0bits+0x22>
 80106a4:	07da      	lsls	r2, r3, #31
 80106a6:	d423      	bmi.n	80106f0 <__lo0bits+0x56>
 80106a8:	0798      	lsls	r0, r3, #30
 80106aa:	bf49      	itett	mi
 80106ac:	085b      	lsrmi	r3, r3, #1
 80106ae:	089b      	lsrpl	r3, r3, #2
 80106b0:	2001      	movmi	r0, #1
 80106b2:	600b      	strmi	r3, [r1, #0]
 80106b4:	bf5c      	itt	pl
 80106b6:	600b      	strpl	r3, [r1, #0]
 80106b8:	2002      	movpl	r0, #2
 80106ba:	4770      	bx	lr
 80106bc:	b298      	uxth	r0, r3
 80106be:	b9a8      	cbnz	r0, 80106ec <__lo0bits+0x52>
 80106c0:	0c1b      	lsrs	r3, r3, #16
 80106c2:	2010      	movs	r0, #16
 80106c4:	f013 0fff 	tst.w	r3, #255	; 0xff
 80106c8:	bf04      	itt	eq
 80106ca:	0a1b      	lsreq	r3, r3, #8
 80106cc:	3008      	addeq	r0, #8
 80106ce:	071a      	lsls	r2, r3, #28
 80106d0:	bf04      	itt	eq
 80106d2:	091b      	lsreq	r3, r3, #4
 80106d4:	3004      	addeq	r0, #4
 80106d6:	079a      	lsls	r2, r3, #30
 80106d8:	bf04      	itt	eq
 80106da:	089b      	lsreq	r3, r3, #2
 80106dc:	3002      	addeq	r0, #2
 80106de:	07da      	lsls	r2, r3, #31
 80106e0:	d402      	bmi.n	80106e8 <__lo0bits+0x4e>
 80106e2:	085b      	lsrs	r3, r3, #1
 80106e4:	d006      	beq.n	80106f4 <__lo0bits+0x5a>
 80106e6:	3001      	adds	r0, #1
 80106e8:	600b      	str	r3, [r1, #0]
 80106ea:	4770      	bx	lr
 80106ec:	4610      	mov	r0, r2
 80106ee:	e7e9      	b.n	80106c4 <__lo0bits+0x2a>
 80106f0:	2000      	movs	r0, #0
 80106f2:	4770      	bx	lr
 80106f4:	2020      	movs	r0, #32
 80106f6:	4770      	bx	lr

080106f8 <__i2b>:
 80106f8:	b510      	push	{r4, lr}
 80106fa:	460c      	mov	r4, r1
 80106fc:	2101      	movs	r1, #1
 80106fe:	f7ff ff06 	bl	801050e <_Balloc>
 8010702:	2201      	movs	r2, #1
 8010704:	6144      	str	r4, [r0, #20]
 8010706:	6102      	str	r2, [r0, #16]
 8010708:	bd10      	pop	{r4, pc}

0801070a <__multiply>:
 801070a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801070e:	4614      	mov	r4, r2
 8010710:	690a      	ldr	r2, [r1, #16]
 8010712:	6923      	ldr	r3, [r4, #16]
 8010714:	429a      	cmp	r2, r3
 8010716:	bfb8      	it	lt
 8010718:	460b      	movlt	r3, r1
 801071a:	4688      	mov	r8, r1
 801071c:	bfbc      	itt	lt
 801071e:	46a0      	movlt	r8, r4
 8010720:	461c      	movlt	r4, r3
 8010722:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8010726:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801072a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801072e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8010732:	eb07 0609 	add.w	r6, r7, r9
 8010736:	42b3      	cmp	r3, r6
 8010738:	bfb8      	it	lt
 801073a:	3101      	addlt	r1, #1
 801073c:	f7ff fee7 	bl	801050e <_Balloc>
 8010740:	f100 0514 	add.w	r5, r0, #20
 8010744:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8010748:	462b      	mov	r3, r5
 801074a:	2200      	movs	r2, #0
 801074c:	4573      	cmp	r3, lr
 801074e:	d316      	bcc.n	801077e <__multiply+0x74>
 8010750:	f104 0214 	add.w	r2, r4, #20
 8010754:	f108 0114 	add.w	r1, r8, #20
 8010758:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 801075c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8010760:	9300      	str	r3, [sp, #0]
 8010762:	9b00      	ldr	r3, [sp, #0]
 8010764:	9201      	str	r2, [sp, #4]
 8010766:	4293      	cmp	r3, r2
 8010768:	d80c      	bhi.n	8010784 <__multiply+0x7a>
 801076a:	2e00      	cmp	r6, #0
 801076c:	dd03      	ble.n	8010776 <__multiply+0x6c>
 801076e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8010772:	2b00      	cmp	r3, #0
 8010774:	d05d      	beq.n	8010832 <__multiply+0x128>
 8010776:	6106      	str	r6, [r0, #16]
 8010778:	b003      	add	sp, #12
 801077a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801077e:	f843 2b04 	str.w	r2, [r3], #4
 8010782:	e7e3      	b.n	801074c <__multiply+0x42>
 8010784:	f8b2 b000 	ldrh.w	fp, [r2]
 8010788:	f1bb 0f00 	cmp.w	fp, #0
 801078c:	d023      	beq.n	80107d6 <__multiply+0xcc>
 801078e:	4689      	mov	r9, r1
 8010790:	46ac      	mov	ip, r5
 8010792:	f04f 0800 	mov.w	r8, #0
 8010796:	f859 4b04 	ldr.w	r4, [r9], #4
 801079a:	f8dc a000 	ldr.w	sl, [ip]
 801079e:	b2a3      	uxth	r3, r4
 80107a0:	fa1f fa8a 	uxth.w	sl, sl
 80107a4:	fb0b a303 	mla	r3, fp, r3, sl
 80107a8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80107ac:	f8dc 4000 	ldr.w	r4, [ip]
 80107b0:	4443      	add	r3, r8
 80107b2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80107b6:	fb0b 840a 	mla	r4, fp, sl, r8
 80107ba:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80107be:	46e2      	mov	sl, ip
 80107c0:	b29b      	uxth	r3, r3
 80107c2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80107c6:	454f      	cmp	r7, r9
 80107c8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80107cc:	f84a 3b04 	str.w	r3, [sl], #4
 80107d0:	d82b      	bhi.n	801082a <__multiply+0x120>
 80107d2:	f8cc 8004 	str.w	r8, [ip, #4]
 80107d6:	9b01      	ldr	r3, [sp, #4]
 80107d8:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80107dc:	3204      	adds	r2, #4
 80107de:	f1ba 0f00 	cmp.w	sl, #0
 80107e2:	d020      	beq.n	8010826 <__multiply+0x11c>
 80107e4:	682b      	ldr	r3, [r5, #0]
 80107e6:	4689      	mov	r9, r1
 80107e8:	46a8      	mov	r8, r5
 80107ea:	f04f 0b00 	mov.w	fp, #0
 80107ee:	f8b9 c000 	ldrh.w	ip, [r9]
 80107f2:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80107f6:	fb0a 440c 	mla	r4, sl, ip, r4
 80107fa:	445c      	add	r4, fp
 80107fc:	46c4      	mov	ip, r8
 80107fe:	b29b      	uxth	r3, r3
 8010800:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8010804:	f84c 3b04 	str.w	r3, [ip], #4
 8010808:	f859 3b04 	ldr.w	r3, [r9], #4
 801080c:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8010810:	0c1b      	lsrs	r3, r3, #16
 8010812:	fb0a b303 	mla	r3, sl, r3, fp
 8010816:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 801081a:	454f      	cmp	r7, r9
 801081c:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8010820:	d805      	bhi.n	801082e <__multiply+0x124>
 8010822:	f8c8 3004 	str.w	r3, [r8, #4]
 8010826:	3504      	adds	r5, #4
 8010828:	e79b      	b.n	8010762 <__multiply+0x58>
 801082a:	46d4      	mov	ip, sl
 801082c:	e7b3      	b.n	8010796 <__multiply+0x8c>
 801082e:	46e0      	mov	r8, ip
 8010830:	e7dd      	b.n	80107ee <__multiply+0xe4>
 8010832:	3e01      	subs	r6, #1
 8010834:	e799      	b.n	801076a <__multiply+0x60>
	...

08010838 <__pow5mult>:
 8010838:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801083c:	4615      	mov	r5, r2
 801083e:	f012 0203 	ands.w	r2, r2, #3
 8010842:	4606      	mov	r6, r0
 8010844:	460f      	mov	r7, r1
 8010846:	d007      	beq.n	8010858 <__pow5mult+0x20>
 8010848:	3a01      	subs	r2, #1
 801084a:	4c1a      	ldr	r4, [pc, #104]	; (80108b4 <__pow5mult+0x7c>)
 801084c:	2300      	movs	r3, #0
 801084e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010852:	f7ff fe8a 	bl	801056a <__multadd>
 8010856:	4607      	mov	r7, r0
 8010858:	10ad      	asrs	r5, r5, #2
 801085a:	d027      	beq.n	80108ac <__pow5mult+0x74>
 801085c:	6cb4      	ldr	r4, [r6, #72]	; 0x48
 801085e:	b944      	cbnz	r4, 8010872 <__pow5mult+0x3a>
 8010860:	f240 2171 	movw	r1, #625	; 0x271
 8010864:	4630      	mov	r0, r6
 8010866:	f7ff ff47 	bl	80106f8 <__i2b>
 801086a:	2300      	movs	r3, #0
 801086c:	64b0      	str	r0, [r6, #72]	; 0x48
 801086e:	4604      	mov	r4, r0
 8010870:	6003      	str	r3, [r0, #0]
 8010872:	f04f 0800 	mov.w	r8, #0
 8010876:	07eb      	lsls	r3, r5, #31
 8010878:	d50a      	bpl.n	8010890 <__pow5mult+0x58>
 801087a:	4639      	mov	r1, r7
 801087c:	4622      	mov	r2, r4
 801087e:	4630      	mov	r0, r6
 8010880:	f7ff ff43 	bl	801070a <__multiply>
 8010884:	4639      	mov	r1, r7
 8010886:	4681      	mov	r9, r0
 8010888:	4630      	mov	r0, r6
 801088a:	f7ff fe65 	bl	8010558 <_Bfree>
 801088e:	464f      	mov	r7, r9
 8010890:	106d      	asrs	r5, r5, #1
 8010892:	d00b      	beq.n	80108ac <__pow5mult+0x74>
 8010894:	6820      	ldr	r0, [r4, #0]
 8010896:	b938      	cbnz	r0, 80108a8 <__pow5mult+0x70>
 8010898:	4622      	mov	r2, r4
 801089a:	4621      	mov	r1, r4
 801089c:	4630      	mov	r0, r6
 801089e:	f7ff ff34 	bl	801070a <__multiply>
 80108a2:	6020      	str	r0, [r4, #0]
 80108a4:	f8c0 8000 	str.w	r8, [r0]
 80108a8:	4604      	mov	r4, r0
 80108aa:	e7e4      	b.n	8010876 <__pow5mult+0x3e>
 80108ac:	4638      	mov	r0, r7
 80108ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80108b2:	bf00      	nop
 80108b4:	08011b08 	.word	0x08011b08

080108b8 <__lshift>:
 80108b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80108bc:	460c      	mov	r4, r1
 80108be:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80108c2:	6923      	ldr	r3, [r4, #16]
 80108c4:	6849      	ldr	r1, [r1, #4]
 80108c6:	eb0a 0903 	add.w	r9, sl, r3
 80108ca:	68a3      	ldr	r3, [r4, #8]
 80108cc:	4607      	mov	r7, r0
 80108ce:	4616      	mov	r6, r2
 80108d0:	f109 0501 	add.w	r5, r9, #1
 80108d4:	42ab      	cmp	r3, r5
 80108d6:	db32      	blt.n	801093e <__lshift+0x86>
 80108d8:	4638      	mov	r0, r7
 80108da:	f7ff fe18 	bl	801050e <_Balloc>
 80108de:	2300      	movs	r3, #0
 80108e0:	4680      	mov	r8, r0
 80108e2:	f100 0114 	add.w	r1, r0, #20
 80108e6:	461a      	mov	r2, r3
 80108e8:	4553      	cmp	r3, sl
 80108ea:	db2b      	blt.n	8010944 <__lshift+0x8c>
 80108ec:	6920      	ldr	r0, [r4, #16]
 80108ee:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80108f2:	f104 0314 	add.w	r3, r4, #20
 80108f6:	f016 021f 	ands.w	r2, r6, #31
 80108fa:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80108fe:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010902:	d025      	beq.n	8010950 <__lshift+0x98>
 8010904:	f1c2 0e20 	rsb	lr, r2, #32
 8010908:	2000      	movs	r0, #0
 801090a:	681e      	ldr	r6, [r3, #0]
 801090c:	468a      	mov	sl, r1
 801090e:	4096      	lsls	r6, r2
 8010910:	4330      	orrs	r0, r6
 8010912:	f84a 0b04 	str.w	r0, [sl], #4
 8010916:	f853 0b04 	ldr.w	r0, [r3], #4
 801091a:	459c      	cmp	ip, r3
 801091c:	fa20 f00e 	lsr.w	r0, r0, lr
 8010920:	d814      	bhi.n	801094c <__lshift+0x94>
 8010922:	6048      	str	r0, [r1, #4]
 8010924:	b108      	cbz	r0, 801092a <__lshift+0x72>
 8010926:	f109 0502 	add.w	r5, r9, #2
 801092a:	3d01      	subs	r5, #1
 801092c:	4638      	mov	r0, r7
 801092e:	f8c8 5010 	str.w	r5, [r8, #16]
 8010932:	4621      	mov	r1, r4
 8010934:	f7ff fe10 	bl	8010558 <_Bfree>
 8010938:	4640      	mov	r0, r8
 801093a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801093e:	3101      	adds	r1, #1
 8010940:	005b      	lsls	r3, r3, #1
 8010942:	e7c7      	b.n	80108d4 <__lshift+0x1c>
 8010944:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8010948:	3301      	adds	r3, #1
 801094a:	e7cd      	b.n	80108e8 <__lshift+0x30>
 801094c:	4651      	mov	r1, sl
 801094e:	e7dc      	b.n	801090a <__lshift+0x52>
 8010950:	3904      	subs	r1, #4
 8010952:	f853 2b04 	ldr.w	r2, [r3], #4
 8010956:	f841 2f04 	str.w	r2, [r1, #4]!
 801095a:	459c      	cmp	ip, r3
 801095c:	d8f9      	bhi.n	8010952 <__lshift+0x9a>
 801095e:	e7e4      	b.n	801092a <__lshift+0x72>

08010960 <__mcmp>:
 8010960:	6903      	ldr	r3, [r0, #16]
 8010962:	690a      	ldr	r2, [r1, #16]
 8010964:	1a9b      	subs	r3, r3, r2
 8010966:	b530      	push	{r4, r5, lr}
 8010968:	d10c      	bne.n	8010984 <__mcmp+0x24>
 801096a:	0092      	lsls	r2, r2, #2
 801096c:	3014      	adds	r0, #20
 801096e:	3114      	adds	r1, #20
 8010970:	1884      	adds	r4, r0, r2
 8010972:	4411      	add	r1, r2
 8010974:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8010978:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801097c:	4295      	cmp	r5, r2
 801097e:	d003      	beq.n	8010988 <__mcmp+0x28>
 8010980:	d305      	bcc.n	801098e <__mcmp+0x2e>
 8010982:	2301      	movs	r3, #1
 8010984:	4618      	mov	r0, r3
 8010986:	bd30      	pop	{r4, r5, pc}
 8010988:	42a0      	cmp	r0, r4
 801098a:	d3f3      	bcc.n	8010974 <__mcmp+0x14>
 801098c:	e7fa      	b.n	8010984 <__mcmp+0x24>
 801098e:	f04f 33ff 	mov.w	r3, #4294967295
 8010992:	e7f7      	b.n	8010984 <__mcmp+0x24>

08010994 <__mdiff>:
 8010994:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010998:	460d      	mov	r5, r1
 801099a:	4607      	mov	r7, r0
 801099c:	4611      	mov	r1, r2
 801099e:	4628      	mov	r0, r5
 80109a0:	4614      	mov	r4, r2
 80109a2:	f7ff ffdd 	bl	8010960 <__mcmp>
 80109a6:	1e06      	subs	r6, r0, #0
 80109a8:	d108      	bne.n	80109bc <__mdiff+0x28>
 80109aa:	4631      	mov	r1, r6
 80109ac:	4638      	mov	r0, r7
 80109ae:	f7ff fdae 	bl	801050e <_Balloc>
 80109b2:	2301      	movs	r3, #1
 80109b4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80109b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80109bc:	bfa4      	itt	ge
 80109be:	4623      	movge	r3, r4
 80109c0:	462c      	movge	r4, r5
 80109c2:	4638      	mov	r0, r7
 80109c4:	6861      	ldr	r1, [r4, #4]
 80109c6:	bfa6      	itte	ge
 80109c8:	461d      	movge	r5, r3
 80109ca:	2600      	movge	r6, #0
 80109cc:	2601      	movlt	r6, #1
 80109ce:	f7ff fd9e 	bl	801050e <_Balloc>
 80109d2:	692b      	ldr	r3, [r5, #16]
 80109d4:	60c6      	str	r6, [r0, #12]
 80109d6:	6926      	ldr	r6, [r4, #16]
 80109d8:	f105 0914 	add.w	r9, r5, #20
 80109dc:	f104 0214 	add.w	r2, r4, #20
 80109e0:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80109e4:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80109e8:	f100 0514 	add.w	r5, r0, #20
 80109ec:	f04f 0e00 	mov.w	lr, #0
 80109f0:	f852 ab04 	ldr.w	sl, [r2], #4
 80109f4:	f859 4b04 	ldr.w	r4, [r9], #4
 80109f8:	fa1e f18a 	uxtah	r1, lr, sl
 80109fc:	b2a3      	uxth	r3, r4
 80109fe:	1ac9      	subs	r1, r1, r3
 8010a00:	0c23      	lsrs	r3, r4, #16
 8010a02:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8010a06:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8010a0a:	b289      	uxth	r1, r1
 8010a0c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8010a10:	45c8      	cmp	r8, r9
 8010a12:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8010a16:	4694      	mov	ip, r2
 8010a18:	f845 3b04 	str.w	r3, [r5], #4
 8010a1c:	d8e8      	bhi.n	80109f0 <__mdiff+0x5c>
 8010a1e:	45bc      	cmp	ip, r7
 8010a20:	d304      	bcc.n	8010a2c <__mdiff+0x98>
 8010a22:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8010a26:	b183      	cbz	r3, 8010a4a <__mdiff+0xb6>
 8010a28:	6106      	str	r6, [r0, #16]
 8010a2a:	e7c5      	b.n	80109b8 <__mdiff+0x24>
 8010a2c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8010a30:	fa1e f381 	uxtah	r3, lr, r1
 8010a34:	141a      	asrs	r2, r3, #16
 8010a36:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8010a3a:	b29b      	uxth	r3, r3
 8010a3c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010a40:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8010a44:	f845 3b04 	str.w	r3, [r5], #4
 8010a48:	e7e9      	b.n	8010a1e <__mdiff+0x8a>
 8010a4a:	3e01      	subs	r6, #1
 8010a4c:	e7e9      	b.n	8010a22 <__mdiff+0x8e>
	...

08010a50 <__ulp>:
 8010a50:	4b12      	ldr	r3, [pc, #72]	; (8010a9c <__ulp+0x4c>)
 8010a52:	ee10 2a90 	vmov	r2, s1
 8010a56:	401a      	ands	r2, r3
 8010a58:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8010a5c:	2b00      	cmp	r3, #0
 8010a5e:	dd04      	ble.n	8010a6a <__ulp+0x1a>
 8010a60:	2000      	movs	r0, #0
 8010a62:	4619      	mov	r1, r3
 8010a64:	ec41 0b10 	vmov	d0, r0, r1
 8010a68:	4770      	bx	lr
 8010a6a:	425b      	negs	r3, r3
 8010a6c:	151b      	asrs	r3, r3, #20
 8010a6e:	2b13      	cmp	r3, #19
 8010a70:	f04f 0000 	mov.w	r0, #0
 8010a74:	f04f 0100 	mov.w	r1, #0
 8010a78:	dc04      	bgt.n	8010a84 <__ulp+0x34>
 8010a7a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8010a7e:	fa42 f103 	asr.w	r1, r2, r3
 8010a82:	e7ef      	b.n	8010a64 <__ulp+0x14>
 8010a84:	3b14      	subs	r3, #20
 8010a86:	2b1e      	cmp	r3, #30
 8010a88:	f04f 0201 	mov.w	r2, #1
 8010a8c:	bfda      	itte	le
 8010a8e:	f1c3 031f 	rsble	r3, r3, #31
 8010a92:	fa02 f303 	lslle.w	r3, r2, r3
 8010a96:	4613      	movgt	r3, r2
 8010a98:	4618      	mov	r0, r3
 8010a9a:	e7e3      	b.n	8010a64 <__ulp+0x14>
 8010a9c:	7ff00000 	.word	0x7ff00000

08010aa0 <__b2d>:
 8010aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010aa2:	6905      	ldr	r5, [r0, #16]
 8010aa4:	f100 0714 	add.w	r7, r0, #20
 8010aa8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8010aac:	1f2e      	subs	r6, r5, #4
 8010aae:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8010ab2:	4620      	mov	r0, r4
 8010ab4:	f7ff fdd2 	bl	801065c <__hi0bits>
 8010ab8:	f1c0 0320 	rsb	r3, r0, #32
 8010abc:	280a      	cmp	r0, #10
 8010abe:	600b      	str	r3, [r1, #0]
 8010ac0:	f8df c074 	ldr.w	ip, [pc, #116]	; 8010b38 <__b2d+0x98>
 8010ac4:	dc14      	bgt.n	8010af0 <__b2d+0x50>
 8010ac6:	f1c0 0e0b 	rsb	lr, r0, #11
 8010aca:	fa24 f10e 	lsr.w	r1, r4, lr
 8010ace:	42b7      	cmp	r7, r6
 8010ad0:	ea41 030c 	orr.w	r3, r1, ip
 8010ad4:	bf34      	ite	cc
 8010ad6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8010ada:	2100      	movcs	r1, #0
 8010adc:	3015      	adds	r0, #21
 8010ade:	fa04 f000 	lsl.w	r0, r4, r0
 8010ae2:	fa21 f10e 	lsr.w	r1, r1, lr
 8010ae6:	ea40 0201 	orr.w	r2, r0, r1
 8010aea:	ec43 2b10 	vmov	d0, r2, r3
 8010aee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010af0:	42b7      	cmp	r7, r6
 8010af2:	bf3a      	itte	cc
 8010af4:	f1a5 0608 	subcc.w	r6, r5, #8
 8010af8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8010afc:	2100      	movcs	r1, #0
 8010afe:	380b      	subs	r0, #11
 8010b00:	d015      	beq.n	8010b2e <__b2d+0x8e>
 8010b02:	4084      	lsls	r4, r0
 8010b04:	f1c0 0520 	rsb	r5, r0, #32
 8010b08:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8010b0c:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8010b10:	42be      	cmp	r6, r7
 8010b12:	fa21 fc05 	lsr.w	ip, r1, r5
 8010b16:	ea44 030c 	orr.w	r3, r4, ip
 8010b1a:	bf8c      	ite	hi
 8010b1c:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8010b20:	2400      	movls	r4, #0
 8010b22:	fa01 f000 	lsl.w	r0, r1, r0
 8010b26:	40ec      	lsrs	r4, r5
 8010b28:	ea40 0204 	orr.w	r2, r0, r4
 8010b2c:	e7dd      	b.n	8010aea <__b2d+0x4a>
 8010b2e:	ea44 030c 	orr.w	r3, r4, ip
 8010b32:	460a      	mov	r2, r1
 8010b34:	e7d9      	b.n	8010aea <__b2d+0x4a>
 8010b36:	bf00      	nop
 8010b38:	3ff00000 	.word	0x3ff00000

08010b3c <__d2b>:
 8010b3c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010b40:	460e      	mov	r6, r1
 8010b42:	2101      	movs	r1, #1
 8010b44:	ec59 8b10 	vmov	r8, r9, d0
 8010b48:	4615      	mov	r5, r2
 8010b4a:	f7ff fce0 	bl	801050e <_Balloc>
 8010b4e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8010b52:	4607      	mov	r7, r0
 8010b54:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010b58:	bb34      	cbnz	r4, 8010ba8 <__d2b+0x6c>
 8010b5a:	9301      	str	r3, [sp, #4]
 8010b5c:	f1b8 0300 	subs.w	r3, r8, #0
 8010b60:	d027      	beq.n	8010bb2 <__d2b+0x76>
 8010b62:	a802      	add	r0, sp, #8
 8010b64:	f840 3d08 	str.w	r3, [r0, #-8]!
 8010b68:	f7ff fd97 	bl	801069a <__lo0bits>
 8010b6c:	9900      	ldr	r1, [sp, #0]
 8010b6e:	b1f0      	cbz	r0, 8010bae <__d2b+0x72>
 8010b70:	9a01      	ldr	r2, [sp, #4]
 8010b72:	f1c0 0320 	rsb	r3, r0, #32
 8010b76:	fa02 f303 	lsl.w	r3, r2, r3
 8010b7a:	430b      	orrs	r3, r1
 8010b7c:	40c2      	lsrs	r2, r0
 8010b7e:	617b      	str	r3, [r7, #20]
 8010b80:	9201      	str	r2, [sp, #4]
 8010b82:	9b01      	ldr	r3, [sp, #4]
 8010b84:	61bb      	str	r3, [r7, #24]
 8010b86:	2b00      	cmp	r3, #0
 8010b88:	bf14      	ite	ne
 8010b8a:	2102      	movne	r1, #2
 8010b8c:	2101      	moveq	r1, #1
 8010b8e:	6139      	str	r1, [r7, #16]
 8010b90:	b1c4      	cbz	r4, 8010bc4 <__d2b+0x88>
 8010b92:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8010b96:	4404      	add	r4, r0
 8010b98:	6034      	str	r4, [r6, #0]
 8010b9a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8010b9e:	6028      	str	r0, [r5, #0]
 8010ba0:	4638      	mov	r0, r7
 8010ba2:	b003      	add	sp, #12
 8010ba4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010ba8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010bac:	e7d5      	b.n	8010b5a <__d2b+0x1e>
 8010bae:	6179      	str	r1, [r7, #20]
 8010bb0:	e7e7      	b.n	8010b82 <__d2b+0x46>
 8010bb2:	a801      	add	r0, sp, #4
 8010bb4:	f7ff fd71 	bl	801069a <__lo0bits>
 8010bb8:	9b01      	ldr	r3, [sp, #4]
 8010bba:	617b      	str	r3, [r7, #20]
 8010bbc:	2101      	movs	r1, #1
 8010bbe:	6139      	str	r1, [r7, #16]
 8010bc0:	3020      	adds	r0, #32
 8010bc2:	e7e5      	b.n	8010b90 <__d2b+0x54>
 8010bc4:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8010bc8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8010bcc:	6030      	str	r0, [r6, #0]
 8010bce:	6918      	ldr	r0, [r3, #16]
 8010bd0:	f7ff fd44 	bl	801065c <__hi0bits>
 8010bd4:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8010bd8:	e7e1      	b.n	8010b9e <__d2b+0x62>

08010bda <__ratio>:
 8010bda:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010bde:	4688      	mov	r8, r1
 8010be0:	4669      	mov	r1, sp
 8010be2:	4681      	mov	r9, r0
 8010be4:	f7ff ff5c 	bl	8010aa0 <__b2d>
 8010be8:	a901      	add	r1, sp, #4
 8010bea:	4640      	mov	r0, r8
 8010bec:	ec57 6b10 	vmov	r6, r7, d0
 8010bf0:	f7ff ff56 	bl	8010aa0 <__b2d>
 8010bf4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010bf8:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8010bfc:	eba3 0c02 	sub.w	ip, r3, r2
 8010c00:	e9dd 3200 	ldrd	r3, r2, [sp]
 8010c04:	1a9b      	subs	r3, r3, r2
 8010c06:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8010c0a:	ec5b ab10 	vmov	sl, fp, d0
 8010c0e:	2b00      	cmp	r3, #0
 8010c10:	bfce      	itee	gt
 8010c12:	463a      	movgt	r2, r7
 8010c14:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8010c18:	465a      	movle	r2, fp
 8010c1a:	4659      	mov	r1, fp
 8010c1c:	463d      	mov	r5, r7
 8010c1e:	bfd4      	ite	le
 8010c20:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8010c24:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8010c28:	4630      	mov	r0, r6
 8010c2a:	ee10 2a10 	vmov	r2, s0
 8010c2e:	460b      	mov	r3, r1
 8010c30:	4629      	mov	r1, r5
 8010c32:	f7ef fe1b 	bl	800086c <__aeabi_ddiv>
 8010c36:	ec41 0b10 	vmov	d0, r0, r1
 8010c3a:	b003      	add	sp, #12
 8010c3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010c40 <_mprec_log10>:
 8010c40:	2817      	cmp	r0, #23
 8010c42:	b5d0      	push	{r4, r6, r7, lr}
 8010c44:	4604      	mov	r4, r0
 8010c46:	dc07      	bgt.n	8010c58 <_mprec_log10+0x18>
 8010c48:	4b09      	ldr	r3, [pc, #36]	; (8010c70 <_mprec_log10+0x30>)
 8010c4a:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
 8010c4e:	e9d4 0100 	ldrd	r0, r1, [r4]
 8010c52:	ec41 0b10 	vmov	d0, r0, r1
 8010c56:	bdd0      	pop	{r4, r6, r7, pc}
 8010c58:	4906      	ldr	r1, [pc, #24]	; (8010c74 <_mprec_log10+0x34>)
 8010c5a:	4f07      	ldr	r7, [pc, #28]	; (8010c78 <_mprec_log10+0x38>)
 8010c5c:	2000      	movs	r0, #0
 8010c5e:	2600      	movs	r6, #0
 8010c60:	4632      	mov	r2, r6
 8010c62:	463b      	mov	r3, r7
 8010c64:	f7ef fcd8 	bl	8000618 <__aeabi_dmul>
 8010c68:	3c01      	subs	r4, #1
 8010c6a:	d1f9      	bne.n	8010c60 <_mprec_log10+0x20>
 8010c6c:	e7f1      	b.n	8010c52 <_mprec_log10+0x12>
 8010c6e:	bf00      	nop
 8010c70:	08011a40 	.word	0x08011a40
 8010c74:	3ff00000 	.word	0x3ff00000
 8010c78:	40240000 	.word	0x40240000

08010c7c <__copybits>:
 8010c7c:	3901      	subs	r1, #1
 8010c7e:	b510      	push	{r4, lr}
 8010c80:	1149      	asrs	r1, r1, #5
 8010c82:	6914      	ldr	r4, [r2, #16]
 8010c84:	3101      	adds	r1, #1
 8010c86:	f102 0314 	add.w	r3, r2, #20
 8010c8a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8010c8e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8010c92:	42a3      	cmp	r3, r4
 8010c94:	4602      	mov	r2, r0
 8010c96:	d303      	bcc.n	8010ca0 <__copybits+0x24>
 8010c98:	2300      	movs	r3, #0
 8010c9a:	428a      	cmp	r2, r1
 8010c9c:	d305      	bcc.n	8010caa <__copybits+0x2e>
 8010c9e:	bd10      	pop	{r4, pc}
 8010ca0:	f853 2b04 	ldr.w	r2, [r3], #4
 8010ca4:	f840 2b04 	str.w	r2, [r0], #4
 8010ca8:	e7f3      	b.n	8010c92 <__copybits+0x16>
 8010caa:	f842 3b04 	str.w	r3, [r2], #4
 8010cae:	e7f4      	b.n	8010c9a <__copybits+0x1e>

08010cb0 <__any_on>:
 8010cb0:	f100 0214 	add.w	r2, r0, #20
 8010cb4:	6900      	ldr	r0, [r0, #16]
 8010cb6:	114b      	asrs	r3, r1, #5
 8010cb8:	4298      	cmp	r0, r3
 8010cba:	b510      	push	{r4, lr}
 8010cbc:	db11      	blt.n	8010ce2 <__any_on+0x32>
 8010cbe:	dd0a      	ble.n	8010cd6 <__any_on+0x26>
 8010cc0:	f011 011f 	ands.w	r1, r1, #31
 8010cc4:	d007      	beq.n	8010cd6 <__any_on+0x26>
 8010cc6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8010cca:	fa24 f001 	lsr.w	r0, r4, r1
 8010cce:	fa00 f101 	lsl.w	r1, r0, r1
 8010cd2:	428c      	cmp	r4, r1
 8010cd4:	d10b      	bne.n	8010cee <__any_on+0x3e>
 8010cd6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010cda:	4293      	cmp	r3, r2
 8010cdc:	d803      	bhi.n	8010ce6 <__any_on+0x36>
 8010cde:	2000      	movs	r0, #0
 8010ce0:	bd10      	pop	{r4, pc}
 8010ce2:	4603      	mov	r3, r0
 8010ce4:	e7f7      	b.n	8010cd6 <__any_on+0x26>
 8010ce6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010cea:	2900      	cmp	r1, #0
 8010cec:	d0f5      	beq.n	8010cda <__any_on+0x2a>
 8010cee:	2001      	movs	r0, #1
 8010cf0:	e7f6      	b.n	8010ce0 <__any_on+0x30>
	...

08010cf4 <_realloc_r>:
 8010cf4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010cf8:	4682      	mov	sl, r0
 8010cfa:	460c      	mov	r4, r1
 8010cfc:	b929      	cbnz	r1, 8010d0a <_realloc_r+0x16>
 8010cfe:	4611      	mov	r1, r2
 8010d00:	b003      	add	sp, #12
 8010d02:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d06:	f7fb bd0b 	b.w	800c720 <_malloc_r>
 8010d0a:	9201      	str	r2, [sp, #4]
 8010d0c:	f7fb ff46 	bl	800cb9c <__malloc_lock>
 8010d10:	9a01      	ldr	r2, [sp, #4]
 8010d12:	f854 5c04 	ldr.w	r5, [r4, #-4]
 8010d16:	f102 080b 	add.w	r8, r2, #11
 8010d1a:	f1b8 0f16 	cmp.w	r8, #22
 8010d1e:	f1a4 0908 	sub.w	r9, r4, #8
 8010d22:	f025 0603 	bic.w	r6, r5, #3
 8010d26:	d90b      	bls.n	8010d40 <_realloc_r+0x4c>
 8010d28:	f038 0807 	bics.w	r8, r8, #7
 8010d2c:	d50a      	bpl.n	8010d44 <_realloc_r+0x50>
 8010d2e:	230c      	movs	r3, #12
 8010d30:	f8ca 3000 	str.w	r3, [sl]
 8010d34:	f04f 0b00 	mov.w	fp, #0
 8010d38:	4658      	mov	r0, fp
 8010d3a:	b003      	add	sp, #12
 8010d3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d40:	f04f 0810 	mov.w	r8, #16
 8010d44:	4590      	cmp	r8, r2
 8010d46:	d3f2      	bcc.n	8010d2e <_realloc_r+0x3a>
 8010d48:	45b0      	cmp	r8, r6
 8010d4a:	f340 8170 	ble.w	801102e <_realloc_r+0x33a>
 8010d4e:	49a9      	ldr	r1, [pc, #676]	; (8010ff4 <_realloc_r+0x300>)
 8010d50:	9101      	str	r1, [sp, #4]
 8010d52:	f8d1 c008 	ldr.w	ip, [r1, #8]
 8010d56:	eb09 0306 	add.w	r3, r9, r6
 8010d5a:	459c      	cmp	ip, r3
 8010d5c:	6858      	ldr	r0, [r3, #4]
 8010d5e:	d005      	beq.n	8010d6c <_realloc_r+0x78>
 8010d60:	f020 0101 	bic.w	r1, r0, #1
 8010d64:	4419      	add	r1, r3
 8010d66:	6849      	ldr	r1, [r1, #4]
 8010d68:	07cf      	lsls	r7, r1, #31
 8010d6a:	d447      	bmi.n	8010dfc <_realloc_r+0x108>
 8010d6c:	f020 0003 	bic.w	r0, r0, #3
 8010d70:	459c      	cmp	ip, r3
 8010d72:	eb06 0700 	add.w	r7, r6, r0
 8010d76:	d119      	bne.n	8010dac <_realloc_r+0xb8>
 8010d78:	f108 0110 	add.w	r1, r8, #16
 8010d7c:	42b9      	cmp	r1, r7
 8010d7e:	dc3f      	bgt.n	8010e00 <_realloc_r+0x10c>
 8010d80:	eb09 0308 	add.w	r3, r9, r8
 8010d84:	9a01      	ldr	r2, [sp, #4]
 8010d86:	eba7 0708 	sub.w	r7, r7, r8
 8010d8a:	f047 0701 	orr.w	r7, r7, #1
 8010d8e:	6093      	str	r3, [r2, #8]
 8010d90:	605f      	str	r7, [r3, #4]
 8010d92:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8010d96:	f003 0301 	and.w	r3, r3, #1
 8010d9a:	ea43 0308 	orr.w	r3, r3, r8
 8010d9e:	f844 3c04 	str.w	r3, [r4, #-4]
 8010da2:	4650      	mov	r0, sl
 8010da4:	f7fb ff00 	bl	800cba8 <__malloc_unlock>
 8010da8:	46a3      	mov	fp, r4
 8010daa:	e7c5      	b.n	8010d38 <_realloc_r+0x44>
 8010dac:	45b8      	cmp	r8, r7
 8010dae:	dc27      	bgt.n	8010e00 <_realloc_r+0x10c>
 8010db0:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 8010db4:	60da      	str	r2, [r3, #12]
 8010db6:	6093      	str	r3, [r2, #8]
 8010db8:	eba7 0008 	sub.w	r0, r7, r8
 8010dbc:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8010dc0:	280f      	cmp	r0, #15
 8010dc2:	f002 0201 	and.w	r2, r2, #1
 8010dc6:	eb09 0307 	add.w	r3, r9, r7
 8010dca:	f240 8132 	bls.w	8011032 <_realloc_r+0x33e>
 8010dce:	eb09 0108 	add.w	r1, r9, r8
 8010dd2:	ea48 0202 	orr.w	r2, r8, r2
 8010dd6:	f040 0001 	orr.w	r0, r0, #1
 8010dda:	f8c9 2004 	str.w	r2, [r9, #4]
 8010dde:	6048      	str	r0, [r1, #4]
 8010de0:	685a      	ldr	r2, [r3, #4]
 8010de2:	f042 0201 	orr.w	r2, r2, #1
 8010de6:	605a      	str	r2, [r3, #4]
 8010de8:	3108      	adds	r1, #8
 8010dea:	4650      	mov	r0, sl
 8010dec:	f7fe ff7e 	bl	800fcec <_free_r>
 8010df0:	4650      	mov	r0, sl
 8010df2:	f7fb fed9 	bl	800cba8 <__malloc_unlock>
 8010df6:	f109 0b08 	add.w	fp, r9, #8
 8010dfa:	e79d      	b.n	8010d38 <_realloc_r+0x44>
 8010dfc:	2000      	movs	r0, #0
 8010dfe:	4603      	mov	r3, r0
 8010e00:	07e9      	lsls	r1, r5, #31
 8010e02:	f100 80c6 	bmi.w	8010f92 <_realloc_r+0x29e>
 8010e06:	f854 5c08 	ldr.w	r5, [r4, #-8]
 8010e0a:	eba9 0505 	sub.w	r5, r9, r5
 8010e0e:	6869      	ldr	r1, [r5, #4]
 8010e10:	f021 0103 	bic.w	r1, r1, #3
 8010e14:	eb01 0b06 	add.w	fp, r1, r6
 8010e18:	2b00      	cmp	r3, #0
 8010e1a:	f000 8086 	beq.w	8010f2a <_realloc_r+0x236>
 8010e1e:	459c      	cmp	ip, r3
 8010e20:	eb00 070b 	add.w	r7, r0, fp
 8010e24:	d149      	bne.n	8010eba <_realloc_r+0x1c6>
 8010e26:	f108 0310 	add.w	r3, r8, #16
 8010e2a:	42bb      	cmp	r3, r7
 8010e2c:	dc7d      	bgt.n	8010f2a <_realloc_r+0x236>
 8010e2e:	46ab      	mov	fp, r5
 8010e30:	68eb      	ldr	r3, [r5, #12]
 8010e32:	f85b 2f08 	ldr.w	r2, [fp, #8]!
 8010e36:	60d3      	str	r3, [r2, #12]
 8010e38:	609a      	str	r2, [r3, #8]
 8010e3a:	1f32      	subs	r2, r6, #4
 8010e3c:	2a24      	cmp	r2, #36	; 0x24
 8010e3e:	d837      	bhi.n	8010eb0 <_realloc_r+0x1bc>
 8010e40:	2a13      	cmp	r2, #19
 8010e42:	d933      	bls.n	8010eac <_realloc_r+0x1b8>
 8010e44:	6823      	ldr	r3, [r4, #0]
 8010e46:	60ab      	str	r3, [r5, #8]
 8010e48:	6863      	ldr	r3, [r4, #4]
 8010e4a:	60eb      	str	r3, [r5, #12]
 8010e4c:	2a1b      	cmp	r2, #27
 8010e4e:	d81b      	bhi.n	8010e88 <_realloc_r+0x194>
 8010e50:	3408      	adds	r4, #8
 8010e52:	f105 0310 	add.w	r3, r5, #16
 8010e56:	6822      	ldr	r2, [r4, #0]
 8010e58:	601a      	str	r2, [r3, #0]
 8010e5a:	6862      	ldr	r2, [r4, #4]
 8010e5c:	605a      	str	r2, [r3, #4]
 8010e5e:	68a2      	ldr	r2, [r4, #8]
 8010e60:	609a      	str	r2, [r3, #8]
 8010e62:	eb05 0308 	add.w	r3, r5, r8
 8010e66:	9a01      	ldr	r2, [sp, #4]
 8010e68:	eba7 0708 	sub.w	r7, r7, r8
 8010e6c:	f047 0701 	orr.w	r7, r7, #1
 8010e70:	6093      	str	r3, [r2, #8]
 8010e72:	605f      	str	r7, [r3, #4]
 8010e74:	686b      	ldr	r3, [r5, #4]
 8010e76:	f003 0301 	and.w	r3, r3, #1
 8010e7a:	ea43 0308 	orr.w	r3, r3, r8
 8010e7e:	606b      	str	r3, [r5, #4]
 8010e80:	4650      	mov	r0, sl
 8010e82:	f7fb fe91 	bl	800cba8 <__malloc_unlock>
 8010e86:	e757      	b.n	8010d38 <_realloc_r+0x44>
 8010e88:	68a3      	ldr	r3, [r4, #8]
 8010e8a:	612b      	str	r3, [r5, #16]
 8010e8c:	68e3      	ldr	r3, [r4, #12]
 8010e8e:	616b      	str	r3, [r5, #20]
 8010e90:	2a24      	cmp	r2, #36	; 0x24
 8010e92:	bf01      	itttt	eq
 8010e94:	6923      	ldreq	r3, [r4, #16]
 8010e96:	61ab      	streq	r3, [r5, #24]
 8010e98:	6962      	ldreq	r2, [r4, #20]
 8010e9a:	61ea      	streq	r2, [r5, #28]
 8010e9c:	bf19      	ittee	ne
 8010e9e:	3410      	addne	r4, #16
 8010ea0:	f105 0318 	addne.w	r3, r5, #24
 8010ea4:	f105 0320 	addeq.w	r3, r5, #32
 8010ea8:	3418      	addeq	r4, #24
 8010eaa:	e7d4      	b.n	8010e56 <_realloc_r+0x162>
 8010eac:	465b      	mov	r3, fp
 8010eae:	e7d2      	b.n	8010e56 <_realloc_r+0x162>
 8010eb0:	4621      	mov	r1, r4
 8010eb2:	4658      	mov	r0, fp
 8010eb4:	f000 fa17 	bl	80112e6 <memmove>
 8010eb8:	e7d3      	b.n	8010e62 <_realloc_r+0x16e>
 8010eba:	45b8      	cmp	r8, r7
 8010ebc:	dc35      	bgt.n	8010f2a <_realloc_r+0x236>
 8010ebe:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 8010ec2:	4628      	mov	r0, r5
 8010ec4:	60da      	str	r2, [r3, #12]
 8010ec6:	6093      	str	r3, [r2, #8]
 8010ec8:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8010ecc:	68eb      	ldr	r3, [r5, #12]
 8010ece:	60d3      	str	r3, [r2, #12]
 8010ed0:	609a      	str	r2, [r3, #8]
 8010ed2:	1f32      	subs	r2, r6, #4
 8010ed4:	2a24      	cmp	r2, #36	; 0x24
 8010ed6:	d824      	bhi.n	8010f22 <_realloc_r+0x22e>
 8010ed8:	2a13      	cmp	r2, #19
 8010eda:	d908      	bls.n	8010eee <_realloc_r+0x1fa>
 8010edc:	6823      	ldr	r3, [r4, #0]
 8010ede:	60ab      	str	r3, [r5, #8]
 8010ee0:	6863      	ldr	r3, [r4, #4]
 8010ee2:	60eb      	str	r3, [r5, #12]
 8010ee4:	2a1b      	cmp	r2, #27
 8010ee6:	d80a      	bhi.n	8010efe <_realloc_r+0x20a>
 8010ee8:	3408      	adds	r4, #8
 8010eea:	f105 0010 	add.w	r0, r5, #16
 8010eee:	6823      	ldr	r3, [r4, #0]
 8010ef0:	6003      	str	r3, [r0, #0]
 8010ef2:	6863      	ldr	r3, [r4, #4]
 8010ef4:	6043      	str	r3, [r0, #4]
 8010ef6:	68a3      	ldr	r3, [r4, #8]
 8010ef8:	6083      	str	r3, [r0, #8]
 8010efa:	46a9      	mov	r9, r5
 8010efc:	e75c      	b.n	8010db8 <_realloc_r+0xc4>
 8010efe:	68a3      	ldr	r3, [r4, #8]
 8010f00:	612b      	str	r3, [r5, #16]
 8010f02:	68e3      	ldr	r3, [r4, #12]
 8010f04:	616b      	str	r3, [r5, #20]
 8010f06:	2a24      	cmp	r2, #36	; 0x24
 8010f08:	bf01      	itttt	eq
 8010f0a:	6923      	ldreq	r3, [r4, #16]
 8010f0c:	61ab      	streq	r3, [r5, #24]
 8010f0e:	6963      	ldreq	r3, [r4, #20]
 8010f10:	61eb      	streq	r3, [r5, #28]
 8010f12:	bf19      	ittee	ne
 8010f14:	3410      	addne	r4, #16
 8010f16:	f105 0018 	addne.w	r0, r5, #24
 8010f1a:	f105 0020 	addeq.w	r0, r5, #32
 8010f1e:	3418      	addeq	r4, #24
 8010f20:	e7e5      	b.n	8010eee <_realloc_r+0x1fa>
 8010f22:	4621      	mov	r1, r4
 8010f24:	f000 f9df 	bl	80112e6 <memmove>
 8010f28:	e7e7      	b.n	8010efa <_realloc_r+0x206>
 8010f2a:	45d8      	cmp	r8, fp
 8010f2c:	dc31      	bgt.n	8010f92 <_realloc_r+0x29e>
 8010f2e:	4628      	mov	r0, r5
 8010f30:	68eb      	ldr	r3, [r5, #12]
 8010f32:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8010f36:	60d3      	str	r3, [r2, #12]
 8010f38:	609a      	str	r2, [r3, #8]
 8010f3a:	1f32      	subs	r2, r6, #4
 8010f3c:	2a24      	cmp	r2, #36	; 0x24
 8010f3e:	d824      	bhi.n	8010f8a <_realloc_r+0x296>
 8010f40:	2a13      	cmp	r2, #19
 8010f42:	d908      	bls.n	8010f56 <_realloc_r+0x262>
 8010f44:	6823      	ldr	r3, [r4, #0]
 8010f46:	60ab      	str	r3, [r5, #8]
 8010f48:	6863      	ldr	r3, [r4, #4]
 8010f4a:	60eb      	str	r3, [r5, #12]
 8010f4c:	2a1b      	cmp	r2, #27
 8010f4e:	d80a      	bhi.n	8010f66 <_realloc_r+0x272>
 8010f50:	3408      	adds	r4, #8
 8010f52:	f105 0010 	add.w	r0, r5, #16
 8010f56:	6823      	ldr	r3, [r4, #0]
 8010f58:	6003      	str	r3, [r0, #0]
 8010f5a:	6863      	ldr	r3, [r4, #4]
 8010f5c:	6043      	str	r3, [r0, #4]
 8010f5e:	68a3      	ldr	r3, [r4, #8]
 8010f60:	6083      	str	r3, [r0, #8]
 8010f62:	465f      	mov	r7, fp
 8010f64:	e7c9      	b.n	8010efa <_realloc_r+0x206>
 8010f66:	68a3      	ldr	r3, [r4, #8]
 8010f68:	612b      	str	r3, [r5, #16]
 8010f6a:	68e3      	ldr	r3, [r4, #12]
 8010f6c:	616b      	str	r3, [r5, #20]
 8010f6e:	2a24      	cmp	r2, #36	; 0x24
 8010f70:	bf01      	itttt	eq
 8010f72:	6923      	ldreq	r3, [r4, #16]
 8010f74:	61ab      	streq	r3, [r5, #24]
 8010f76:	6963      	ldreq	r3, [r4, #20]
 8010f78:	61eb      	streq	r3, [r5, #28]
 8010f7a:	bf19      	ittee	ne
 8010f7c:	3410      	addne	r4, #16
 8010f7e:	f105 0018 	addne.w	r0, r5, #24
 8010f82:	f105 0020 	addeq.w	r0, r5, #32
 8010f86:	3418      	addeq	r4, #24
 8010f88:	e7e5      	b.n	8010f56 <_realloc_r+0x262>
 8010f8a:	4621      	mov	r1, r4
 8010f8c:	f000 f9ab 	bl	80112e6 <memmove>
 8010f90:	e7e7      	b.n	8010f62 <_realloc_r+0x26e>
 8010f92:	4611      	mov	r1, r2
 8010f94:	4650      	mov	r0, sl
 8010f96:	f7fb fbc3 	bl	800c720 <_malloc_r>
 8010f9a:	4683      	mov	fp, r0
 8010f9c:	2800      	cmp	r0, #0
 8010f9e:	f43f af6f 	beq.w	8010e80 <_realloc_r+0x18c>
 8010fa2:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8010fa6:	f023 0301 	bic.w	r3, r3, #1
 8010faa:	444b      	add	r3, r9
 8010fac:	f1a0 0208 	sub.w	r2, r0, #8
 8010fb0:	4293      	cmp	r3, r2
 8010fb2:	d105      	bne.n	8010fc0 <_realloc_r+0x2cc>
 8010fb4:	f850 7c04 	ldr.w	r7, [r0, #-4]
 8010fb8:	f027 0703 	bic.w	r7, r7, #3
 8010fbc:	4437      	add	r7, r6
 8010fbe:	e6fb      	b.n	8010db8 <_realloc_r+0xc4>
 8010fc0:	1f32      	subs	r2, r6, #4
 8010fc2:	2a24      	cmp	r2, #36	; 0x24
 8010fc4:	d82f      	bhi.n	8011026 <_realloc_r+0x332>
 8010fc6:	2a13      	cmp	r2, #19
 8010fc8:	d92a      	bls.n	8011020 <_realloc_r+0x32c>
 8010fca:	6823      	ldr	r3, [r4, #0]
 8010fcc:	6003      	str	r3, [r0, #0]
 8010fce:	6863      	ldr	r3, [r4, #4]
 8010fd0:	6043      	str	r3, [r0, #4]
 8010fd2:	2a1b      	cmp	r2, #27
 8010fd4:	d810      	bhi.n	8010ff8 <_realloc_r+0x304>
 8010fd6:	f104 0208 	add.w	r2, r4, #8
 8010fda:	f100 0308 	add.w	r3, r0, #8
 8010fde:	6811      	ldr	r1, [r2, #0]
 8010fe0:	6019      	str	r1, [r3, #0]
 8010fe2:	6851      	ldr	r1, [r2, #4]
 8010fe4:	6059      	str	r1, [r3, #4]
 8010fe6:	6892      	ldr	r2, [r2, #8]
 8010fe8:	609a      	str	r2, [r3, #8]
 8010fea:	4621      	mov	r1, r4
 8010fec:	4650      	mov	r0, sl
 8010fee:	f7fe fe7d 	bl	800fcec <_free_r>
 8010ff2:	e745      	b.n	8010e80 <_realloc_r+0x18c>
 8010ff4:	20000518 	.word	0x20000518
 8010ff8:	68a3      	ldr	r3, [r4, #8]
 8010ffa:	6083      	str	r3, [r0, #8]
 8010ffc:	68e3      	ldr	r3, [r4, #12]
 8010ffe:	60c3      	str	r3, [r0, #12]
 8011000:	2a24      	cmp	r2, #36	; 0x24
 8011002:	bf01      	itttt	eq
 8011004:	6923      	ldreq	r3, [r4, #16]
 8011006:	6103      	streq	r3, [r0, #16]
 8011008:	6961      	ldreq	r1, [r4, #20]
 801100a:	6141      	streq	r1, [r0, #20]
 801100c:	bf19      	ittee	ne
 801100e:	f104 0210 	addne.w	r2, r4, #16
 8011012:	f100 0310 	addne.w	r3, r0, #16
 8011016:	f104 0218 	addeq.w	r2, r4, #24
 801101a:	f100 0318 	addeq.w	r3, r0, #24
 801101e:	e7de      	b.n	8010fde <_realloc_r+0x2ea>
 8011020:	4603      	mov	r3, r0
 8011022:	4622      	mov	r2, r4
 8011024:	e7db      	b.n	8010fde <_realloc_r+0x2ea>
 8011026:	4621      	mov	r1, r4
 8011028:	f000 f95d 	bl	80112e6 <memmove>
 801102c:	e7dd      	b.n	8010fea <_realloc_r+0x2f6>
 801102e:	4637      	mov	r7, r6
 8011030:	e6c2      	b.n	8010db8 <_realloc_r+0xc4>
 8011032:	4317      	orrs	r7, r2
 8011034:	f8c9 7004 	str.w	r7, [r9, #4]
 8011038:	685a      	ldr	r2, [r3, #4]
 801103a:	f042 0201 	orr.w	r2, r2, #1
 801103e:	605a      	str	r2, [r3, #4]
 8011040:	e6d6      	b.n	8010df0 <_realloc_r+0xfc>
 8011042:	bf00      	nop

08011044 <frexp>:
 8011044:	b570      	push	{r4, r5, r6, lr}
 8011046:	2100      	movs	r1, #0
 8011048:	ec55 4b10 	vmov	r4, r5, d0
 801104c:	6001      	str	r1, [r0, #0]
 801104e:	4916      	ldr	r1, [pc, #88]	; (80110a8 <frexp+0x64>)
 8011050:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8011054:	428b      	cmp	r3, r1
 8011056:	4606      	mov	r6, r0
 8011058:	462a      	mov	r2, r5
 801105a:	dc22      	bgt.n	80110a2 <frexp+0x5e>
 801105c:	ee10 1a10 	vmov	r1, s0
 8011060:	4319      	orrs	r1, r3
 8011062:	d01e      	beq.n	80110a2 <frexp+0x5e>
 8011064:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011068:	da0d      	bge.n	8011086 <frexp+0x42>
 801106a:	2200      	movs	r2, #0
 801106c:	4b0f      	ldr	r3, [pc, #60]	; (80110ac <frexp+0x68>)
 801106e:	ee10 0a10 	vmov	r0, s0
 8011072:	4629      	mov	r1, r5
 8011074:	f7ef fad0 	bl	8000618 <__aeabi_dmul>
 8011078:	460a      	mov	r2, r1
 801107a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801107e:	f06f 0135 	mvn.w	r1, #53	; 0x35
 8011082:	4604      	mov	r4, r0
 8011084:	6031      	str	r1, [r6, #0]
 8011086:	6831      	ldr	r1, [r6, #0]
 8011088:	151b      	asrs	r3, r3, #20
 801108a:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 801108e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8011092:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 8011096:	440b      	add	r3, r1
 8011098:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 801109c:	6033      	str	r3, [r6, #0]
 801109e:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 80110a2:	ec45 4b10 	vmov	d0, r4, r5
 80110a6:	bd70      	pop	{r4, r5, r6, pc}
 80110a8:	7fefffff 	.word	0x7fefffff
 80110ac:	43500000 	.word	0x43500000

080110b0 <strncmp>:
 80110b0:	b510      	push	{r4, lr}
 80110b2:	b16a      	cbz	r2, 80110d0 <strncmp+0x20>
 80110b4:	3901      	subs	r1, #1
 80110b6:	1884      	adds	r4, r0, r2
 80110b8:	f810 3b01 	ldrb.w	r3, [r0], #1
 80110bc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80110c0:	4293      	cmp	r3, r2
 80110c2:	d103      	bne.n	80110cc <strncmp+0x1c>
 80110c4:	42a0      	cmp	r0, r4
 80110c6:	d001      	beq.n	80110cc <strncmp+0x1c>
 80110c8:	2b00      	cmp	r3, #0
 80110ca:	d1f5      	bne.n	80110b8 <strncmp+0x8>
 80110cc:	1a98      	subs	r0, r3, r2
 80110ce:	bd10      	pop	{r4, pc}
 80110d0:	4610      	mov	r0, r2
 80110d2:	e7fc      	b.n	80110ce <strncmp+0x1e>

080110d4 <__ssprint_r>:
 80110d4:	6893      	ldr	r3, [r2, #8]
 80110d6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80110da:	4681      	mov	r9, r0
 80110dc:	460c      	mov	r4, r1
 80110de:	4616      	mov	r6, r2
 80110e0:	2b00      	cmp	r3, #0
 80110e2:	d05e      	beq.n	80111a2 <__ssprint_r+0xce>
 80110e4:	f04f 0b00 	mov.w	fp, #0
 80110e8:	f8d2 a000 	ldr.w	sl, [r2]
 80110ec:	465f      	mov	r7, fp
 80110ee:	b357      	cbz	r7, 8011146 <__ssprint_r+0x72>
 80110f0:	68a3      	ldr	r3, [r4, #8]
 80110f2:	429f      	cmp	r7, r3
 80110f4:	d340      	bcc.n	8011178 <__ssprint_r+0xa4>
 80110f6:	89a2      	ldrh	r2, [r4, #12]
 80110f8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80110fc:	d03c      	beq.n	8011178 <__ssprint_r+0xa4>
 80110fe:	6825      	ldr	r5, [r4, #0]
 8011100:	6921      	ldr	r1, [r4, #16]
 8011102:	eba5 0801 	sub.w	r8, r5, r1
 8011106:	6965      	ldr	r5, [r4, #20]
 8011108:	2302      	movs	r3, #2
 801110a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801110e:	fb95 f5f3 	sdiv	r5, r5, r3
 8011112:	f108 0301 	add.w	r3, r8, #1
 8011116:	443b      	add	r3, r7
 8011118:	429d      	cmp	r5, r3
 801111a:	bf38      	it	cc
 801111c:	461d      	movcc	r5, r3
 801111e:	0553      	lsls	r3, r2, #21
 8011120:	d544      	bpl.n	80111ac <__ssprint_r+0xd8>
 8011122:	4629      	mov	r1, r5
 8011124:	4648      	mov	r0, r9
 8011126:	f7fb fafb 	bl	800c720 <_malloc_r>
 801112a:	b988      	cbnz	r0, 8011150 <__ssprint_r+0x7c>
 801112c:	230c      	movs	r3, #12
 801112e:	f8c9 3000 	str.w	r3, [r9]
 8011132:	89a3      	ldrh	r3, [r4, #12]
 8011134:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011138:	81a3      	strh	r3, [r4, #12]
 801113a:	2300      	movs	r3, #0
 801113c:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8011140:	f04f 30ff 	mov.w	r0, #4294967295
 8011144:	e02f      	b.n	80111a6 <__ssprint_r+0xd2>
 8011146:	e9da b700 	ldrd	fp, r7, [sl]
 801114a:	f10a 0a08 	add.w	sl, sl, #8
 801114e:	e7ce      	b.n	80110ee <__ssprint_r+0x1a>
 8011150:	4642      	mov	r2, r8
 8011152:	6921      	ldr	r1, [r4, #16]
 8011154:	9001      	str	r0, [sp, #4]
 8011156:	f7ff f9cf 	bl	80104f8 <memcpy>
 801115a:	89a2      	ldrh	r2, [r4, #12]
 801115c:	9b01      	ldr	r3, [sp, #4]
 801115e:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8011162:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8011166:	81a2      	strh	r2, [r4, #12]
 8011168:	6123      	str	r3, [r4, #16]
 801116a:	6165      	str	r5, [r4, #20]
 801116c:	4443      	add	r3, r8
 801116e:	eba5 0508 	sub.w	r5, r5, r8
 8011172:	6023      	str	r3, [r4, #0]
 8011174:	60a5      	str	r5, [r4, #8]
 8011176:	463b      	mov	r3, r7
 8011178:	42bb      	cmp	r3, r7
 801117a:	bf28      	it	cs
 801117c:	463b      	movcs	r3, r7
 801117e:	461a      	mov	r2, r3
 8011180:	4659      	mov	r1, fp
 8011182:	6820      	ldr	r0, [r4, #0]
 8011184:	9301      	str	r3, [sp, #4]
 8011186:	f000 f8ae 	bl	80112e6 <memmove>
 801118a:	68a2      	ldr	r2, [r4, #8]
 801118c:	9b01      	ldr	r3, [sp, #4]
 801118e:	1ad2      	subs	r2, r2, r3
 8011190:	60a2      	str	r2, [r4, #8]
 8011192:	6822      	ldr	r2, [r4, #0]
 8011194:	4413      	add	r3, r2
 8011196:	6023      	str	r3, [r4, #0]
 8011198:	68b3      	ldr	r3, [r6, #8]
 801119a:	1bdf      	subs	r7, r3, r7
 801119c:	60b7      	str	r7, [r6, #8]
 801119e:	2f00      	cmp	r7, #0
 80111a0:	d1d1      	bne.n	8011146 <__ssprint_r+0x72>
 80111a2:	2000      	movs	r0, #0
 80111a4:	6070      	str	r0, [r6, #4]
 80111a6:	b003      	add	sp, #12
 80111a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80111ac:	462a      	mov	r2, r5
 80111ae:	4648      	mov	r0, r9
 80111b0:	f7ff fda0 	bl	8010cf4 <_realloc_r>
 80111b4:	4603      	mov	r3, r0
 80111b6:	2800      	cmp	r0, #0
 80111b8:	d1d6      	bne.n	8011168 <__ssprint_r+0x94>
 80111ba:	6921      	ldr	r1, [r4, #16]
 80111bc:	4648      	mov	r0, r9
 80111be:	f7fe fd95 	bl	800fcec <_free_r>
 80111c2:	e7b3      	b.n	801112c <__ssprint_r+0x58>

080111c4 <__ascii_wctomb>:
 80111c4:	b149      	cbz	r1, 80111da <__ascii_wctomb+0x16>
 80111c6:	2aff      	cmp	r2, #255	; 0xff
 80111c8:	bf85      	ittet	hi
 80111ca:	238a      	movhi	r3, #138	; 0x8a
 80111cc:	6003      	strhi	r3, [r0, #0]
 80111ce:	700a      	strbls	r2, [r1, #0]
 80111d0:	f04f 30ff 	movhi.w	r0, #4294967295
 80111d4:	bf98      	it	ls
 80111d6:	2001      	movls	r0, #1
 80111d8:	4770      	bx	lr
 80111da:	4608      	mov	r0, r1
 80111dc:	4770      	bx	lr
	...

080111e0 <__register_exitproc>:
 80111e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80111e4:	4c26      	ldr	r4, [pc, #152]	; (8011280 <__register_exitproc+0xa0>)
 80111e6:	4606      	mov	r6, r0
 80111e8:	6820      	ldr	r0, [r4, #0]
 80111ea:	4698      	mov	r8, r3
 80111ec:	460f      	mov	r7, r1
 80111ee:	4691      	mov	r9, r2
 80111f0:	f7ff f96e 	bl	80104d0 <__retarget_lock_acquire_recursive>
 80111f4:	4b23      	ldr	r3, [pc, #140]	; (8011284 <__register_exitproc+0xa4>)
 80111f6:	681d      	ldr	r5, [r3, #0]
 80111f8:	f8d5 0148 	ldr.w	r0, [r5, #328]	; 0x148
 80111fc:	b918      	cbnz	r0, 8011206 <__register_exitproc+0x26>
 80111fe:	f505 70a6 	add.w	r0, r5, #332	; 0x14c
 8011202:	f8c5 0148 	str.w	r0, [r5, #328]	; 0x148
 8011206:	6843      	ldr	r3, [r0, #4]
 8011208:	2b1f      	cmp	r3, #31
 801120a:	dd19      	ble.n	8011240 <__register_exitproc+0x60>
 801120c:	4b1e      	ldr	r3, [pc, #120]	; (8011288 <__register_exitproc+0xa8>)
 801120e:	b933      	cbnz	r3, 801121e <__register_exitproc+0x3e>
 8011210:	6820      	ldr	r0, [r4, #0]
 8011212:	f7ff f95e 	bl	80104d2 <__retarget_lock_release_recursive>
 8011216:	f04f 30ff 	mov.w	r0, #4294967295
 801121a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801121e:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8011222:	f7fb fa6d 	bl	800c700 <malloc>
 8011226:	2800      	cmp	r0, #0
 8011228:	d0f2      	beq.n	8011210 <__register_exitproc+0x30>
 801122a:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
 801122e:	6003      	str	r3, [r0, #0]
 8011230:	2200      	movs	r2, #0
 8011232:	6042      	str	r2, [r0, #4]
 8011234:	f8c5 0148 	str.w	r0, [r5, #328]	; 0x148
 8011238:	f8c0 2188 	str.w	r2, [r0, #392]	; 0x188
 801123c:	f8c0 218c 	str.w	r2, [r0, #396]	; 0x18c
 8011240:	6843      	ldr	r3, [r0, #4]
 8011242:	b19e      	cbz	r6, 801126c <__register_exitproc+0x8c>
 8011244:	eb00 0583 	add.w	r5, r0, r3, lsl #2
 8011248:	2201      	movs	r2, #1
 801124a:	f8c5 9088 	str.w	r9, [r5, #136]	; 0x88
 801124e:	f8d0 1188 	ldr.w	r1, [r0, #392]	; 0x188
 8011252:	409a      	lsls	r2, r3
 8011254:	4311      	orrs	r1, r2
 8011256:	2e02      	cmp	r6, #2
 8011258:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
 801125c:	f8c5 8108 	str.w	r8, [r5, #264]	; 0x108
 8011260:	bf02      	ittt	eq
 8011262:	f8d0 118c 	ldreq.w	r1, [r0, #396]	; 0x18c
 8011266:	430a      	orreq	r2, r1
 8011268:	f8c0 218c 	streq.w	r2, [r0, #396]	; 0x18c
 801126c:	1c5a      	adds	r2, r3, #1
 801126e:	3302      	adds	r3, #2
 8011270:	6042      	str	r2, [r0, #4]
 8011272:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
 8011276:	6820      	ldr	r0, [r4, #0]
 8011278:	f7ff f92b 	bl	80104d2 <__retarget_lock_release_recursive>
 801127c:	2000      	movs	r0, #0
 801127e:	e7cc      	b.n	801121a <__register_exitproc+0x3a>
 8011280:	20000928 	.word	0x20000928
 8011284:	08011950 	.word	0x08011950
 8011288:	0800c701 	.word	0x0800c701

0801128c <_calloc_r>:
 801128c:	b510      	push	{r4, lr}
 801128e:	4351      	muls	r1, r2
 8011290:	f7fb fa46 	bl	800c720 <_malloc_r>
 8011294:	4604      	mov	r4, r0
 8011296:	b198      	cbz	r0, 80112c0 <_calloc_r+0x34>
 8011298:	f850 2c04 	ldr.w	r2, [r0, #-4]
 801129c:	f022 0203 	bic.w	r2, r2, #3
 80112a0:	3a04      	subs	r2, #4
 80112a2:	2a24      	cmp	r2, #36	; 0x24
 80112a4:	d81b      	bhi.n	80112de <_calloc_r+0x52>
 80112a6:	2a13      	cmp	r2, #19
 80112a8:	d917      	bls.n	80112da <_calloc_r+0x4e>
 80112aa:	2100      	movs	r1, #0
 80112ac:	2a1b      	cmp	r2, #27
 80112ae:	e9c0 1100 	strd	r1, r1, [r0]
 80112b2:	d807      	bhi.n	80112c4 <_calloc_r+0x38>
 80112b4:	f100 0308 	add.w	r3, r0, #8
 80112b8:	2200      	movs	r2, #0
 80112ba:	e9c3 2200 	strd	r2, r2, [r3]
 80112be:	609a      	str	r2, [r3, #8]
 80112c0:	4620      	mov	r0, r4
 80112c2:	bd10      	pop	{r4, pc}
 80112c4:	2a24      	cmp	r2, #36	; 0x24
 80112c6:	e9c0 1102 	strd	r1, r1, [r0, #8]
 80112ca:	bf11      	iteee	ne
 80112cc:	f100 0310 	addne.w	r3, r0, #16
 80112d0:	6101      	streq	r1, [r0, #16]
 80112d2:	f100 0318 	addeq.w	r3, r0, #24
 80112d6:	6141      	streq	r1, [r0, #20]
 80112d8:	e7ee      	b.n	80112b8 <_calloc_r+0x2c>
 80112da:	4603      	mov	r3, r0
 80112dc:	e7ec      	b.n	80112b8 <_calloc_r+0x2c>
 80112de:	2100      	movs	r1, #0
 80112e0:	f7fb fc54 	bl	800cb8c <memset>
 80112e4:	e7ec      	b.n	80112c0 <_calloc_r+0x34>

080112e6 <memmove>:
 80112e6:	4288      	cmp	r0, r1
 80112e8:	b510      	push	{r4, lr}
 80112ea:	eb01 0302 	add.w	r3, r1, r2
 80112ee:	d807      	bhi.n	8011300 <memmove+0x1a>
 80112f0:	1e42      	subs	r2, r0, #1
 80112f2:	4299      	cmp	r1, r3
 80112f4:	d00a      	beq.n	801130c <memmove+0x26>
 80112f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80112fa:	f802 4f01 	strb.w	r4, [r2, #1]!
 80112fe:	e7f8      	b.n	80112f2 <memmove+0xc>
 8011300:	4283      	cmp	r3, r0
 8011302:	d9f5      	bls.n	80112f0 <memmove+0xa>
 8011304:	1881      	adds	r1, r0, r2
 8011306:	1ad2      	subs	r2, r2, r3
 8011308:	42d3      	cmn	r3, r2
 801130a:	d100      	bne.n	801130e <memmove+0x28>
 801130c:	bd10      	pop	{r4, pc}
 801130e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011312:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8011316:	e7f7      	b.n	8011308 <memmove+0x22>

08011318 <_init>:
 8011318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801131a:	bf00      	nop
 801131c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801131e:	bc08      	pop	{r3}
 8011320:	469e      	mov	lr, r3
 8011322:	4770      	bx	lr

08011324 <_fini>:
 8011324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011326:	bf00      	nop
 8011328:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801132a:	bc08      	pop	{r3}
 801132c:	469e      	mov	lr, r3
 801132e:	4770      	bx	lr
