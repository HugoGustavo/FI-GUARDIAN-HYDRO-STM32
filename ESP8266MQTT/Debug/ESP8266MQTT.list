
ESP8266MQTT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fb40  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008d0  0800fcd0  0800fcd0  0001fcd0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080105a0  080105a0  00030aa0  2**0
                  CONTENTS
  4 .ARM          00000008  080105a0  080105a0  000205a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080105a8  080105a8  00030aa0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080105a8  080105a8  000205a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080105b0  080105b0  000205b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000aa0  20000000  080105b4  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005e0  20000aa0  08011054  00030aa0  2**2
                  ALLOC
 10 ._user_heap_stack 00001fe0  20001080  08011054  00031080  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030aa0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000485ad  00000000  00000000  00030ad0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000096f9  00000000  00000000  0007907d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002518  00000000  00000000  00082778  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000020f0  00000000  00000000  00084c90  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002fd3b  00000000  00000000  00086d80  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00025ebe  00000000  00000000  000b6abb  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f204a  00000000  00000000  000dc979  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001ce9c3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a3e4  00000000  00000000  001cea40  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000aa0 	.word	0x20000aa0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800fcb8 	.word	0x0800fcb8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000aa4 	.word	0x20000aa4
 80001cc:	0800fcb8 	.word	0x0800fcb8

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b972 	b.w	8000fa4 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f806 	bl	8000cd8 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__udivmoddi4>:
 8000cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cdc:	9e08      	ldr	r6, [sp, #32]
 8000cde:	4604      	mov	r4, r0
 8000ce0:	4688      	mov	r8, r1
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d14b      	bne.n	8000d7e <__udivmoddi4+0xa6>
 8000ce6:	428a      	cmp	r2, r1
 8000ce8:	4615      	mov	r5, r2
 8000cea:	d967      	bls.n	8000dbc <__udivmoddi4+0xe4>
 8000cec:	fab2 f282 	clz	r2, r2
 8000cf0:	b14a      	cbz	r2, 8000d06 <__udivmoddi4+0x2e>
 8000cf2:	f1c2 0720 	rsb	r7, r2, #32
 8000cf6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cfa:	fa20 f707 	lsr.w	r7, r0, r7
 8000cfe:	4095      	lsls	r5, r2
 8000d00:	ea47 0803 	orr.w	r8, r7, r3
 8000d04:	4094      	lsls	r4, r2
 8000d06:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d0a:	0c23      	lsrs	r3, r4, #16
 8000d0c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d10:	fa1f fc85 	uxth.w	ip, r5
 8000d14:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d18:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d1c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d20:	4299      	cmp	r1, r3
 8000d22:	d909      	bls.n	8000d38 <__udivmoddi4+0x60>
 8000d24:	18eb      	adds	r3, r5, r3
 8000d26:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d2a:	f080 811b 	bcs.w	8000f64 <__udivmoddi4+0x28c>
 8000d2e:	4299      	cmp	r1, r3
 8000d30:	f240 8118 	bls.w	8000f64 <__udivmoddi4+0x28c>
 8000d34:	3f02      	subs	r7, #2
 8000d36:	442b      	add	r3, r5
 8000d38:	1a5b      	subs	r3, r3, r1
 8000d3a:	b2a4      	uxth	r4, r4
 8000d3c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d40:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d48:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d4c:	45a4      	cmp	ip, r4
 8000d4e:	d909      	bls.n	8000d64 <__udivmoddi4+0x8c>
 8000d50:	192c      	adds	r4, r5, r4
 8000d52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d56:	f080 8107 	bcs.w	8000f68 <__udivmoddi4+0x290>
 8000d5a:	45a4      	cmp	ip, r4
 8000d5c:	f240 8104 	bls.w	8000f68 <__udivmoddi4+0x290>
 8000d60:	3802      	subs	r0, #2
 8000d62:	442c      	add	r4, r5
 8000d64:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d68:	eba4 040c 	sub.w	r4, r4, ip
 8000d6c:	2700      	movs	r7, #0
 8000d6e:	b11e      	cbz	r6, 8000d78 <__udivmoddi4+0xa0>
 8000d70:	40d4      	lsrs	r4, r2
 8000d72:	2300      	movs	r3, #0
 8000d74:	e9c6 4300 	strd	r4, r3, [r6]
 8000d78:	4639      	mov	r1, r7
 8000d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d909      	bls.n	8000d96 <__udivmoddi4+0xbe>
 8000d82:	2e00      	cmp	r6, #0
 8000d84:	f000 80eb 	beq.w	8000f5e <__udivmoddi4+0x286>
 8000d88:	2700      	movs	r7, #0
 8000d8a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d8e:	4638      	mov	r0, r7
 8000d90:	4639      	mov	r1, r7
 8000d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d96:	fab3 f783 	clz	r7, r3
 8000d9a:	2f00      	cmp	r7, #0
 8000d9c:	d147      	bne.n	8000e2e <__udivmoddi4+0x156>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d302      	bcc.n	8000da8 <__udivmoddi4+0xd0>
 8000da2:	4282      	cmp	r2, r0
 8000da4:	f200 80fa 	bhi.w	8000f9c <__udivmoddi4+0x2c4>
 8000da8:	1a84      	subs	r4, r0, r2
 8000daa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dae:	2001      	movs	r0, #1
 8000db0:	4698      	mov	r8, r3
 8000db2:	2e00      	cmp	r6, #0
 8000db4:	d0e0      	beq.n	8000d78 <__udivmoddi4+0xa0>
 8000db6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dba:	e7dd      	b.n	8000d78 <__udivmoddi4+0xa0>
 8000dbc:	b902      	cbnz	r2, 8000dc0 <__udivmoddi4+0xe8>
 8000dbe:	deff      	udf	#255	; 0xff
 8000dc0:	fab2 f282 	clz	r2, r2
 8000dc4:	2a00      	cmp	r2, #0
 8000dc6:	f040 808f 	bne.w	8000ee8 <__udivmoddi4+0x210>
 8000dca:	1b49      	subs	r1, r1, r5
 8000dcc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dd0:	fa1f f885 	uxth.w	r8, r5
 8000dd4:	2701      	movs	r7, #1
 8000dd6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dda:	0c23      	lsrs	r3, r4, #16
 8000ddc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000de0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000de4:	fb08 f10c 	mul.w	r1, r8, ip
 8000de8:	4299      	cmp	r1, r3
 8000dea:	d907      	bls.n	8000dfc <__udivmoddi4+0x124>
 8000dec:	18eb      	adds	r3, r5, r3
 8000dee:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000df2:	d202      	bcs.n	8000dfa <__udivmoddi4+0x122>
 8000df4:	4299      	cmp	r1, r3
 8000df6:	f200 80cd 	bhi.w	8000f94 <__udivmoddi4+0x2bc>
 8000dfa:	4684      	mov	ip, r0
 8000dfc:	1a59      	subs	r1, r3, r1
 8000dfe:	b2a3      	uxth	r3, r4
 8000e00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e04:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e08:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e0c:	fb08 f800 	mul.w	r8, r8, r0
 8000e10:	45a0      	cmp	r8, r4
 8000e12:	d907      	bls.n	8000e24 <__udivmoddi4+0x14c>
 8000e14:	192c      	adds	r4, r5, r4
 8000e16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e1a:	d202      	bcs.n	8000e22 <__udivmoddi4+0x14a>
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	f200 80b6 	bhi.w	8000f8e <__udivmoddi4+0x2b6>
 8000e22:	4618      	mov	r0, r3
 8000e24:	eba4 0408 	sub.w	r4, r4, r8
 8000e28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e2c:	e79f      	b.n	8000d6e <__udivmoddi4+0x96>
 8000e2e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e32:	40bb      	lsls	r3, r7
 8000e34:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e38:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e3c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e40:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e44:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e48:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e4c:	4325      	orrs	r5, r4
 8000e4e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e52:	0c2c      	lsrs	r4, r5, #16
 8000e54:	fb08 3319 	mls	r3, r8, r9, r3
 8000e58:	fa1f fa8e 	uxth.w	sl, lr
 8000e5c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e60:	fb09 f40a 	mul.w	r4, r9, sl
 8000e64:	429c      	cmp	r4, r3
 8000e66:	fa02 f207 	lsl.w	r2, r2, r7
 8000e6a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e6e:	d90b      	bls.n	8000e88 <__udivmoddi4+0x1b0>
 8000e70:	eb1e 0303 	adds.w	r3, lr, r3
 8000e74:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e78:	f080 8087 	bcs.w	8000f8a <__udivmoddi4+0x2b2>
 8000e7c:	429c      	cmp	r4, r3
 8000e7e:	f240 8084 	bls.w	8000f8a <__udivmoddi4+0x2b2>
 8000e82:	f1a9 0902 	sub.w	r9, r9, #2
 8000e86:	4473      	add	r3, lr
 8000e88:	1b1b      	subs	r3, r3, r4
 8000e8a:	b2ad      	uxth	r5, r5
 8000e8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e90:	fb08 3310 	mls	r3, r8, r0, r3
 8000e94:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e98:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e9c:	45a2      	cmp	sl, r4
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x1da>
 8000ea0:	eb1e 0404 	adds.w	r4, lr, r4
 8000ea4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ea8:	d26b      	bcs.n	8000f82 <__udivmoddi4+0x2aa>
 8000eaa:	45a2      	cmp	sl, r4
 8000eac:	d969      	bls.n	8000f82 <__udivmoddi4+0x2aa>
 8000eae:	3802      	subs	r0, #2
 8000eb0:	4474      	add	r4, lr
 8000eb2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000eb6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eba:	eba4 040a 	sub.w	r4, r4, sl
 8000ebe:	454c      	cmp	r4, r9
 8000ec0:	46c2      	mov	sl, r8
 8000ec2:	464b      	mov	r3, r9
 8000ec4:	d354      	bcc.n	8000f70 <__udivmoddi4+0x298>
 8000ec6:	d051      	beq.n	8000f6c <__udivmoddi4+0x294>
 8000ec8:	2e00      	cmp	r6, #0
 8000eca:	d069      	beq.n	8000fa0 <__udivmoddi4+0x2c8>
 8000ecc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ed0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ed4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ed8:	40fd      	lsrs	r5, r7
 8000eda:	40fc      	lsrs	r4, r7
 8000edc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ee0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ee4:	2700      	movs	r7, #0
 8000ee6:	e747      	b.n	8000d78 <__udivmoddi4+0xa0>
 8000ee8:	f1c2 0320 	rsb	r3, r2, #32
 8000eec:	fa20 f703 	lsr.w	r7, r0, r3
 8000ef0:	4095      	lsls	r5, r2
 8000ef2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ef6:	fa21 f303 	lsr.w	r3, r1, r3
 8000efa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000efe:	4338      	orrs	r0, r7
 8000f00:	0c01      	lsrs	r1, r0, #16
 8000f02:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f06:	fa1f f885 	uxth.w	r8, r5
 8000f0a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f12:	fb07 f308 	mul.w	r3, r7, r8
 8000f16:	428b      	cmp	r3, r1
 8000f18:	fa04 f402 	lsl.w	r4, r4, r2
 8000f1c:	d907      	bls.n	8000f2e <__udivmoddi4+0x256>
 8000f1e:	1869      	adds	r1, r5, r1
 8000f20:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f24:	d22f      	bcs.n	8000f86 <__udivmoddi4+0x2ae>
 8000f26:	428b      	cmp	r3, r1
 8000f28:	d92d      	bls.n	8000f86 <__udivmoddi4+0x2ae>
 8000f2a:	3f02      	subs	r7, #2
 8000f2c:	4429      	add	r1, r5
 8000f2e:	1acb      	subs	r3, r1, r3
 8000f30:	b281      	uxth	r1, r0
 8000f32:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f36:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f3a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f3e:	fb00 f308 	mul.w	r3, r0, r8
 8000f42:	428b      	cmp	r3, r1
 8000f44:	d907      	bls.n	8000f56 <__udivmoddi4+0x27e>
 8000f46:	1869      	adds	r1, r5, r1
 8000f48:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f4c:	d217      	bcs.n	8000f7e <__udivmoddi4+0x2a6>
 8000f4e:	428b      	cmp	r3, r1
 8000f50:	d915      	bls.n	8000f7e <__udivmoddi4+0x2a6>
 8000f52:	3802      	subs	r0, #2
 8000f54:	4429      	add	r1, r5
 8000f56:	1ac9      	subs	r1, r1, r3
 8000f58:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f5c:	e73b      	b.n	8000dd6 <__udivmoddi4+0xfe>
 8000f5e:	4637      	mov	r7, r6
 8000f60:	4630      	mov	r0, r6
 8000f62:	e709      	b.n	8000d78 <__udivmoddi4+0xa0>
 8000f64:	4607      	mov	r7, r0
 8000f66:	e6e7      	b.n	8000d38 <__udivmoddi4+0x60>
 8000f68:	4618      	mov	r0, r3
 8000f6a:	e6fb      	b.n	8000d64 <__udivmoddi4+0x8c>
 8000f6c:	4541      	cmp	r1, r8
 8000f6e:	d2ab      	bcs.n	8000ec8 <__udivmoddi4+0x1f0>
 8000f70:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f74:	eb69 020e 	sbc.w	r2, r9, lr
 8000f78:	3801      	subs	r0, #1
 8000f7a:	4613      	mov	r3, r2
 8000f7c:	e7a4      	b.n	8000ec8 <__udivmoddi4+0x1f0>
 8000f7e:	4660      	mov	r0, ip
 8000f80:	e7e9      	b.n	8000f56 <__udivmoddi4+0x27e>
 8000f82:	4618      	mov	r0, r3
 8000f84:	e795      	b.n	8000eb2 <__udivmoddi4+0x1da>
 8000f86:	4667      	mov	r7, ip
 8000f88:	e7d1      	b.n	8000f2e <__udivmoddi4+0x256>
 8000f8a:	4681      	mov	r9, r0
 8000f8c:	e77c      	b.n	8000e88 <__udivmoddi4+0x1b0>
 8000f8e:	3802      	subs	r0, #2
 8000f90:	442c      	add	r4, r5
 8000f92:	e747      	b.n	8000e24 <__udivmoddi4+0x14c>
 8000f94:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f98:	442b      	add	r3, r5
 8000f9a:	e72f      	b.n	8000dfc <__udivmoddi4+0x124>
 8000f9c:	4638      	mov	r0, r7
 8000f9e:	e708      	b.n	8000db2 <__udivmoddi4+0xda>
 8000fa0:	4637      	mov	r7, r6
 8000fa2:	e6e9      	b.n	8000d78 <__udivmoddi4+0xa0>

08000fa4 <__aeabi_idiv0>:
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop

08000fa8 <app_init>:
sen0169*				sensor_sen0169		= NULL;
sen0189*				sensor_sen0189		= NULL;
sen0237a*				sensor_sen0237a		= NULL;
char*					message				= NULL;

void app_init(){
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
	configure_delay();
 8000fac:	f000 f816 	bl	8000fdc <configure_delay>
	configure_ssd1306();
 8000fb0:	f000 f81a 	bl	8000fe8 <configure_ssd1306>
	configure_init_screen();
 8000fb4:	f000 f820 	bl	8000ff8 <configure_init_screen>
	configure_esp();
 8000fb8:	f000 f83a 	bl	8001030 <configure_esp>

	configure_ds18b20();
 8000fbc:	f000 f870 	bl	80010a0 <configure_ds18b20>
	configure_sen0161();
 8000fc0:	f000 f890 	bl	80010e4 <configure_sen0161>
	configure_sen0165();
 8000fc4:	f000 f8ac 	bl	8001120 <configure_sen0165>
	configure_sen0169();
 8000fc8:	f000 f8ce 	bl	8001168 <configure_sen0169>
	configure_sen0189();
 8000fcc:	f000 f8ea 	bl	80011a4 <configure_sen0189>
	configure_sen0237a();
 8000fd0:	f000 f906 	bl	80011e0 <configure_sen0237a>

	configure_mqtt_client();
 8000fd4:	f000 f942 	bl	800125c <configure_mqtt_client>
}
 8000fd8:	bf00      	nop
 8000fda:	bd80      	pop	{r7, pc}

08000fdc <configure_delay>:

void configure_delay(void){
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
	DWT_Init();
 8000fe0:	f005 fe78 	bl	8006cd4 <DWT_Init>
}
 8000fe4:	bf00      	nop
 8000fe6:	bd80      	pop	{r7, pc}

08000fe8 <configure_ssd1306>:

void configure_ssd1306(void){
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
	SSD1306_Init();
 8000fec:	f005 fe14 	bl	8006c18 <SSD1306_Init>
	SDD1306_Clear_Screen();
 8000ff0:	f005 fde2 	bl	8006bb8 <SDD1306_Clear_Screen>
}
 8000ff4:	bf00      	nop
 8000ff6:	bd80      	pop	{r7, pc}

08000ff8 <configure_init_screen>:

void configure_init_screen(void){
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
	SSD1306_Write_Centered_String((uint8_t*) "FI-GUARDIAN", (uint8_t) 2);
 8000ffc:	2102      	movs	r1, #2
 8000ffe:	4809      	ldr	r0, [pc, #36]	; (8001024 <configure_init_screen+0x2c>)
 8001000:	f005 fdb4 	bl	8006b6c <SSD1306_Write_Centered_String>
	SSD1306_Write_Centered_String((uint8_t*) "SMART WATER", (uint8_t) 3);
 8001004:	2103      	movs	r1, #3
 8001006:	4808      	ldr	r0, [pc, #32]	; (8001028 <configure_init_screen+0x30>)
 8001008:	f005 fdb0 	bl	8006b6c <SSD1306_Write_Centered_String>
	SSD1306_Write_Centered_String((uint8_t*) "powered by UFU & VM9", (uint8_t) 5);
 800100c:	2105      	movs	r1, #5
 800100e:	4807      	ldr	r0, [pc, #28]	; (800102c <configure_init_screen+0x34>)
 8001010:	f005 fdac 	bl	8006b6c <SSD1306_Write_Centered_String>
	stm32_util_delay_in_seconds(8);
 8001014:	2008      	movs	r0, #8
 8001016:	f006 fdc9 	bl	8007bac <stm32_util_delay_in_seconds>
	SDD1306_Clear_Screen();
 800101a:	f005 fdcd 	bl	8006bb8 <SDD1306_Clear_Screen>
}
 800101e:	bf00      	nop
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	0800fcd0 	.word	0x0800fcd0
 8001028:	0800fcdc 	.word	0x0800fcdc
 800102c:	0800fce8 	.word	0x0800fce8

08001030 <configure_esp>:

void configure_esp(void){
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
	logger_info(logger_get_instance(), (char*) "Configurando ESP8266");
 8001034:	f005 fe94 	bl	8006d60 <logger_get_instance>
 8001038:	4603      	mov	r3, r0
 800103a:	4913      	ldr	r1, [pc, #76]	; (8001088 <configure_esp+0x58>)
 800103c:	4618      	mov	r0, r3
 800103e:	f005 fead 	bl	8006d9c <logger_info>
	esp = esp8266_init();
 8001042:	f001 fede 	bl	8002e02 <esp8266_init>
 8001046:	4602      	mov	r2, r0
 8001048:	4b10      	ldr	r3, [pc, #64]	; (800108c <configure_esp+0x5c>)
 800104a:	601a      	str	r2, [r3, #0]
	esp8266_setOprToStationSoftAP(esp);
 800104c:	4b0f      	ldr	r3, [pc, #60]	; (800108c <configure_esp+0x5c>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4618      	mov	r0, r3
 8001052:	f001 ff53 	bl	8002efc <esp8266_setOprToStationSoftAP>
	esp8266_enableMUX(esp);
 8001056:	4b0d      	ldr	r3, [pc, #52]	; (800108c <configure_esp+0x5c>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4618      	mov	r0, r3
 800105c:	f001 ffae 	bl	8002fbc <esp8266_enableMUX>
	esp8266_joinAP(esp, SMART_WATER_PROPERTIES_SSID, SMART_WATER_PROPERTIES_PASSWORD_SSID);
 8001060:	4b0a      	ldr	r3, [pc, #40]	; (800108c <configure_esp+0x5c>)
 8001062:	6818      	ldr	r0, [r3, #0]
 8001064:	4b0a      	ldr	r3, [pc, #40]	; (8001090 <configure_esp+0x60>)
 8001066:	6819      	ldr	r1, [r3, #0]
 8001068:	4b0a      	ldr	r3, [pc, #40]	; (8001094 <configure_esp+0x64>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	461a      	mov	r2, r3
 800106e:	f001 ff6d 	bl	8002f4c <esp8266_joinAP>
	esp8266_createTCP(esp, (uint8_t*) SMART_WATER_PROPERTIES_API_GATEWAY_HOST, SMART_WATER_PROPERTIES_API_GATEWAY_PORT);
 8001072:	4b06      	ldr	r3, [pc, #24]	; (800108c <configure_esp+0x5c>)
 8001074:	6818      	ldr	r0, [r3, #0]
 8001076:	4b08      	ldr	r3, [pc, #32]	; (8001098 <configure_esp+0x68>)
 8001078:	6819      	ldr	r1, [r3, #0]
 800107a:	4b08      	ldr	r3, [pc, #32]	; (800109c <configure_esp+0x6c>)
 800107c:	881b      	ldrh	r3, [r3, #0]
 800107e:	461a      	mov	r2, r3
 8001080:	f001 ffb8 	bl	8002ff4 <esp8266_createTCP>
}
 8001084:	bf00      	nop
 8001086:	bd80      	pop	{r7, pc}
 8001088:	0800fd00 	.word	0x0800fd00
 800108c:	20000abc 	.word	0x20000abc
 8001090:	20000008 	.word	0x20000008
 8001094:	2000000c 	.word	0x2000000c
 8001098:	20000010 	.word	0x20000010
 800109c:	20000014 	.word	0x20000014

080010a0 <configure_ds18b20>:

void configure_ds18b20(void){
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
	if( DS18B20_PROPERTIES_PORT != NULL ){
 80010a4:	4b0b      	ldr	r3, [pc, #44]	; (80010d4 <configure_ds18b20+0x34>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d011      	beq.n	80010d0 <configure_ds18b20+0x30>
		logger_info(logger_get_instance(), (char*) "Configurando DS18B20");
 80010ac:	f005 fe58 	bl	8006d60 <logger_get_instance>
 80010b0:	4603      	mov	r3, r0
 80010b2:	4909      	ldr	r1, [pc, #36]	; (80010d8 <configure_ds18b20+0x38>)
 80010b4:	4618      	mov	r0, r3
 80010b6:	f005 fe71 	bl	8006d9c <logger_info>
		sensor_ds18b20 = ds18b20_init(DS18B20_PROPERTIES_PORT, DS18B20_PROPERTIES_PIN);
 80010ba:	4b06      	ldr	r3, [pc, #24]	; (80010d4 <configure_ds18b20+0x34>)
 80010bc:	681a      	ldr	r2, [r3, #0]
 80010be:	4b07      	ldr	r3, [pc, #28]	; (80010dc <configure_ds18b20+0x3c>)
 80010c0:	881b      	ldrh	r3, [r3, #0]
 80010c2:	4619      	mov	r1, r3
 80010c4:	4610      	mov	r0, r2
 80010c6:	f001 f84f 	bl	8002168 <ds18b20_init>
 80010ca:	4602      	mov	r2, r0
 80010cc:	4b04      	ldr	r3, [pc, #16]	; (80010e0 <configure_ds18b20+0x40>)
 80010ce:	601a      	str	r2, [r3, #0]
	}
}
 80010d0:	bf00      	nop
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	20000034 	.word	0x20000034
 80010d8:	0800fd18 	.word	0x0800fd18
 80010dc:	20000038 	.word	0x20000038
 80010e0:	20000ac4 	.word	0x20000ac4

080010e4 <configure_sen0161>:

void configure_sen0161(void){
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
	if( SEN0161_PROPERTIES_PIN != 0 ){
 80010e8:	4b0a      	ldr	r3, [pc, #40]	; (8001114 <configure_sen0161+0x30>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d00e      	beq.n	800110e <configure_sen0161+0x2a>
		logger_info(logger_get_instance(), (char*) "Configurando SEN0161");
 80010f0:	f005 fe36 	bl	8006d60 <logger_get_instance>
 80010f4:	4603      	mov	r3, r0
 80010f6:	4908      	ldr	r1, [pc, #32]	; (8001118 <configure_sen0161+0x34>)
 80010f8:	4618      	mov	r0, r3
 80010fa:	f005 fe4f 	bl	8006d9c <logger_info>
		sensor_sen0161 = sen0161_init(SEN0161_PROPERTIES_PIN);
 80010fe:	4b05      	ldr	r3, [pc, #20]	; (8001114 <configure_sen0161+0x30>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4618      	mov	r0, r3
 8001104:	f005 f84a 	bl	800619c <sen0161_init>
 8001108:	4602      	mov	r2, r0
 800110a:	4b04      	ldr	r3, [pc, #16]	; (800111c <configure_sen0161+0x38>)
 800110c:	601a      	str	r2, [r3, #0]
	}
}
 800110e:	bf00      	nop
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	20000ae4 	.word	0x20000ae4
 8001118:	0800fd30 	.word	0x0800fd30
 800111c:	20000ac8 	.word	0x20000ac8

08001120 <configure_sen0165>:

void configure_sen0165(void){
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
	if( SEN0165_PROPERTIES_PIN != 0 ){
 8001124:	4b0c      	ldr	r3, [pc, #48]	; (8001158 <configure_sen0165+0x38>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d013      	beq.n	8001154 <configure_sen0165+0x34>
		logger_info(logger_get_instance(), (char*) "Configurando SEN0165");
 800112c:	f005 fe18 	bl	8006d60 <logger_get_instance>
 8001130:	4603      	mov	r3, r0
 8001132:	490a      	ldr	r1, [pc, #40]	; (800115c <configure_sen0165+0x3c>)
 8001134:	4618      	mov	r0, r3
 8001136:	f005 fe31 	bl	8006d9c <logger_info>
		sensor_sen0165 = sen0165_init(SEN0165_PROPERTIES_PIN, SEN0165_PROPERTIES_OFFSET);
 800113a:	4b07      	ldr	r3, [pc, #28]	; (8001158 <configure_sen0165+0x38>)
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	4b08      	ldr	r3, [pc, #32]	; (8001160 <configure_sen0165+0x40>)
 8001140:	edd3 7a00 	vldr	s15, [r3]
 8001144:	eeb0 0a67 	vmov.f32	s0, s15
 8001148:	4610      	mov	r0, r2
 800114a:	f005 f88f 	bl	800626c <sen0165_init>
 800114e:	4602      	mov	r2, r0
 8001150:	4b04      	ldr	r3, [pc, #16]	; (8001164 <configure_sen0165+0x44>)
 8001152:	601a      	str	r2, [r3, #0]
	}
}
 8001154:	bf00      	nop
 8001156:	bd80      	pop	{r7, pc}
 8001158:	20000044 	.word	0x20000044
 800115c:	0800fd48 	.word	0x0800fd48
 8001160:	20000048 	.word	0x20000048
 8001164:	20000acc 	.word	0x20000acc

08001168 <configure_sen0169>:

void configure_sen0169(void){
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
	if( SEN0169_PROPERTIES_PIN != 0 ){
 800116c:	4b0a      	ldr	r3, [pc, #40]	; (8001198 <configure_sen0169+0x30>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d00e      	beq.n	8001192 <configure_sen0169+0x2a>
		logger_info(logger_get_instance(), (char*) "Configurando SEN0169");
 8001174:	f005 fdf4 	bl	8006d60 <logger_get_instance>
 8001178:	4603      	mov	r3, r0
 800117a:	4908      	ldr	r1, [pc, #32]	; (800119c <configure_sen0169+0x34>)
 800117c:	4618      	mov	r0, r3
 800117e:	f005 fe0d 	bl	8006d9c <logger_info>
		sensor_sen0169 = sen0169_init(SEN0169_PROPERTIES_PIN);
 8001182:	4b05      	ldr	r3, [pc, #20]	; (8001198 <configure_sen0169+0x30>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4618      	mov	r0, r3
 8001188:	f005 f8e4 	bl	8006354 <sen0169_init>
 800118c:	4602      	mov	r2, r0
 800118e:	4b04      	ldr	r3, [pc, #16]	; (80011a0 <configure_sen0169+0x38>)
 8001190:	601a      	str	r2, [r3, #0]
	}

}
 8001192:	bf00      	nop
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	20000050 	.word	0x20000050
 800119c:	0800fd60 	.word	0x0800fd60
 80011a0:	20000ad0 	.word	0x20000ad0

080011a4 <configure_sen0189>:

void configure_sen0189(void){
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
	if( SEN0189_PROPERTIES_PIN != 0 ){
 80011a8:	4b0a      	ldr	r3, [pc, #40]	; (80011d4 <configure_sen0189+0x30>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d00e      	beq.n	80011ce <configure_sen0189+0x2a>
		logger_info(logger_get_instance(), (char*) "Configurando SEN0189");
 80011b0:	f005 fdd6 	bl	8006d60 <logger_get_instance>
 80011b4:	4603      	mov	r3, r0
 80011b6:	4908      	ldr	r1, [pc, #32]	; (80011d8 <configure_sen0189+0x34>)
 80011b8:	4618      	mov	r0, r3
 80011ba:	f005 fdef 	bl	8006d9c <logger_info>
		sensor_sen0189 = sen0189_init(SEN0189_PROPERTIES_PIN);
 80011be:	4b05      	ldr	r3, [pc, #20]	; (80011d4 <configure_sen0189+0x30>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4618      	mov	r0, r3
 80011c4:	f005 f92e 	bl	8006424 <sen0189_init>
 80011c8:	4602      	mov	r2, r0
 80011ca:	4b04      	ldr	r3, [pc, #16]	; (80011dc <configure_sen0189+0x38>)
 80011cc:	601a      	str	r2, [r3, #0]
	}
}
 80011ce:	bf00      	nop
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	20000058 	.word	0x20000058
 80011d8:	0800fd78 	.word	0x0800fd78
 80011dc:	20000ad4 	.word	0x20000ad4

080011e0 <configure_sen0237a>:

void configure_sen0237a(void){
 80011e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011e2:	b085      	sub	sp, #20
 80011e4:	af04      	add	r7, sp, #16
	if( SEN0237A_PROPERTIES_PIN != 0 ){
 80011e6:	4b14      	ldr	r3, [pc, #80]	; (8001238 <configure_sen0237a+0x58>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d01f      	beq.n	800122e <configure_sen0237a+0x4e>
		logger_info(logger_get_instance(), (char*) "Configurando SEN0237A");
 80011ee:	f005 fdb7 	bl	8006d60 <logger_get_instance>
 80011f2:	4603      	mov	r3, r0
 80011f4:	4911      	ldr	r1, [pc, #68]	; (800123c <configure_sen0237a+0x5c>)
 80011f6:	4618      	mov	r0, r3
 80011f8:	f005 fdd0 	bl	8006d9c <logger_info>
		sensor_sen0237a = sen0237a_init(
 80011fc:	4b0e      	ldr	r3, [pc, #56]	; (8001238 <configure_sen0237a+0x58>)
 80011fe:	6818      	ldr	r0, [r3, #0]
 8001200:	4b0f      	ldr	r3, [pc, #60]	; (8001240 <configure_sen0237a+0x60>)
 8001202:	781c      	ldrb	r4, [r3, #0]
 8001204:	4b0f      	ldr	r3, [pc, #60]	; (8001244 <configure_sen0237a+0x64>)
 8001206:	781d      	ldrb	r5, [r3, #0]
 8001208:	4b0f      	ldr	r3, [pc, #60]	; (8001248 <configure_sen0237a+0x68>)
 800120a:	681e      	ldr	r6, [r3, #0]
 800120c:	4b0f      	ldr	r3, [pc, #60]	; (800124c <configure_sen0237a+0x6c>)
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	4a0f      	ldr	r2, [pc, #60]	; (8001250 <configure_sen0237a+0x70>)
 8001212:	6812      	ldr	r2, [r2, #0]
 8001214:	490f      	ldr	r1, [pc, #60]	; (8001254 <configure_sen0237a+0x74>)
 8001216:	7809      	ldrb	r1, [r1, #0]
 8001218:	9102      	str	r1, [sp, #8]
 800121a:	9201      	str	r2, [sp, #4]
 800121c:	9300      	str	r3, [sp, #0]
 800121e:	4633      	mov	r3, r6
 8001220:	462a      	mov	r2, r5
 8001222:	4621      	mov	r1, r4
 8001224:	f005 f94a 	bl	80064bc <sen0237a_init>
 8001228:	4602      	mov	r2, r0
 800122a:	4b0b      	ldr	r3, [pc, #44]	; (8001258 <configure_sen0237a+0x78>)
 800122c:	601a      	str	r2, [r3, #0]
				SEN0237A_PROPERTIES_VOLTAGE_POINT_1,
				SEN0237A_PROPERTIES_TEMPERATURE_POINT_1,
				SEN0237A_PROPERTIES_VOLTAGE_POINT_2,
				SEN0237A_PROPERTIES_TEMPERATURE_POINT_2);
	}
}
 800122e:	bf00      	nop
 8001230:	3704      	adds	r7, #4
 8001232:	46bd      	mov	sp, r7
 8001234:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001236:	bf00      	nop
 8001238:	20000060 	.word	0x20000060
 800123c:	0800fd90 	.word	0x0800fd90
 8001240:	20000ae8 	.word	0x20000ae8
 8001244:	20000064 	.word	0x20000064
 8001248:	20000068 	.word	0x20000068
 800124c:	2000006c 	.word	0x2000006c
 8001250:	20000aec 	.word	0x20000aec
 8001254:	2000006d 	.word	0x2000006d
 8001258:	20000ad8 	.word	0x20000ad8

0800125c <configure_mqtt_client>:

void configure_mqtt_client(void){
 800125c:	b590      	push	{r4, r7, lr}
 800125e:	b083      	sub	sp, #12
 8001260:	af02      	add	r7, sp, #8
	logger_info(logger_get_instance(), (char*) "Conectando ao Gateway");
 8001262:	f005 fd7d 	bl	8006d60 <logger_get_instance>
 8001266:	4603      	mov	r3, r0
 8001268:	490f      	ldr	r1, [pc, #60]	; (80012a8 <configure_mqtt_client+0x4c>)
 800126a:	4618      	mov	r0, r3
 800126c:	f005 fd96 	bl	8006d9c <logger_info>
	mqtt = mqtt_client_init(esp);
 8001270:	4b0e      	ldr	r3, [pc, #56]	; (80012ac <configure_mqtt_client+0x50>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4618      	mov	r0, r3
 8001276:	f003 f9c7 	bl	8004608 <mqtt_client_init>
 800127a:	4602      	mov	r2, r0
 800127c:	4b0c      	ldr	r3, [pc, #48]	; (80012b0 <configure_mqtt_client+0x54>)
 800127e:	601a      	str	r2, [r3, #0]
	mqtt_client_connect(mqtt, SMART_WATER_PROPERTIES_SMART_WATER_ID, SMART_WATER_PROPERTIES_API_GATEWAY_HOST, SMART_WATER_PROPERTIES_API_GATEWAY_PORT, 60, true);
 8001280:	4b0b      	ldr	r3, [pc, #44]	; (80012b0 <configure_mqtt_client+0x54>)
 8001282:	6818      	ldr	r0, [r3, #0]
 8001284:	4b0b      	ldr	r3, [pc, #44]	; (80012b4 <configure_mqtt_client+0x58>)
 8001286:	6819      	ldr	r1, [r3, #0]
 8001288:	4b0b      	ldr	r3, [pc, #44]	; (80012b8 <configure_mqtt_client+0x5c>)
 800128a:	681a      	ldr	r2, [r3, #0]
 800128c:	4b0b      	ldr	r3, [pc, #44]	; (80012bc <configure_mqtt_client+0x60>)
 800128e:	881b      	ldrh	r3, [r3, #0]
 8001290:	461c      	mov	r4, r3
 8001292:	2301      	movs	r3, #1
 8001294:	9301      	str	r3, [sp, #4]
 8001296:	233c      	movs	r3, #60	; 0x3c
 8001298:	9300      	str	r3, [sp, #0]
 800129a:	4623      	mov	r3, r4
 800129c:	f003 fad4 	bl	8004848 <mqtt_client_connect>
}
 80012a0:	bf00      	nop
 80012a2:	3704      	adds	r7, #4
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd90      	pop	{r4, r7, pc}
 80012a8:	0800fda8 	.word	0x0800fda8
 80012ac:	20000abc 	.word	0x20000abc
 80012b0:	20000ac0 	.word	0x20000ac0
 80012b4:	20000004 	.word	0x20000004
 80012b8:	20000010 	.word	0x20000010
 80012bc:	20000014 	.word	0x20000014

080012c0 <app_measure>:

void app_measure(void){
 80012c0:	b590      	push	{r4, r7, lr}
 80012c2:	b095      	sub	sp, #84	; 0x54
 80012c4:	af00      	add	r7, sp, #0
	logger_clean(logger_get_instance());
 80012c6:	f005 fd4b 	bl	8006d60 <logger_get_instance>
 80012ca:	4603      	mov	r3, r0
 80012cc:	4618      	mov	r0, r3
 80012ce:	f005 fd99 	bl	8006e04 <logger_clean>

	message_builder* builder = message_builder_get_instance();
 80012d2:	f005 ffd5 	bl	8007280 <message_builder_get_instance>
 80012d6:	6378      	str	r0, [r7, #52]	; 0x34
	message_builder_instance = message_builder_set_reply_host(builder, SMART_WATER_PROPERTIES_REPLY_HOST);
 80012d8:	4bb4      	ldr	r3, [pc, #720]	; (80015ac <app_measure+0x2ec>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4619      	mov	r1, r3
 80012de:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80012e0:	f006 f824 	bl	800732c <message_builder_set_reply_host>
 80012e4:	4602      	mov	r2, r0
 80012e6:	4bb2      	ldr	r3, [pc, #712]	; (80015b0 <app_measure+0x2f0>)
 80012e8:	601a      	str	r2, [r3, #0]
	message_builder_instance = message_builder_set_reply_port(builder, SMART_WATER_PROPERTIES_REPLY_PORT);
 80012ea:	4bb2      	ldr	r3, [pc, #712]	; (80015b4 <app_measure+0x2f4>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4619      	mov	r1, r3
 80012f0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80012f2:	f006 f82f 	bl	8007354 <message_builder_set_reply_port>
 80012f6:	4602      	mov	r2, r0
 80012f8:	4bad      	ldr	r3, [pc, #692]	; (80015b0 <app_measure+0x2f0>)
 80012fa:	601a      	str	r2, [r3, #0]
	message_builder_instance = message_builder_set_reply_channel(builder, SMART_WATER_PROPERTIES_REPLY_CHANNEL);
 80012fc:	4bae      	ldr	r3, [pc, #696]	; (80015b8 <app_measure+0x2f8>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4619      	mov	r1, r3
 8001302:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001304:	f006 f83a 	bl	800737c <message_builder_set_reply_channel>
 8001308:	4602      	mov	r2, r0
 800130a:	4ba9      	ldr	r3, [pc, #676]	; (80015b0 <app_measure+0x2f0>)
 800130c:	601a      	str	r2, [r3, #0]
	message_builder_instance = message_builder_set_method(builder, SMART_WATER_PROPERTIES_METHOD);
 800130e:	4bab      	ldr	r3, [pc, #684]	; (80015bc <app_measure+0x2fc>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4619      	mov	r1, r3
 8001314:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001316:	f006 f845 	bl	80073a4 <message_builder_set_method>
 800131a:	4602      	mov	r2, r0
 800131c:	4ba4      	ldr	r3, [pc, #656]	; (80015b0 <app_measure+0x2f0>)
 800131e:	601a      	str	r2, [r3, #0]
	message_builder_instance = message_builder_set_uri(builder, SMART_WATER_PROPERTIES_URI);
 8001320:	4ba7      	ldr	r3, [pc, #668]	; (80015c0 <app_measure+0x300>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4619      	mov	r1, r3
 8001326:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001328:	f006 f850 	bl	80073cc <message_builder_set_uri>
 800132c:	4602      	mov	r2, r0
 800132e:	4ba0      	ldr	r3, [pc, #640]	; (80015b0 <app_measure+0x2f0>)
 8001330:	601a      	str	r2, [r3, #0]

	char* buffer_ds18b20 = NULL;
 8001332:	2300      	movs	r3, #0
 8001334:	64fb      	str	r3, [r7, #76]	; 0x4c
	char* buffer_sen0161 = NULL;
 8001336:	2300      	movs	r3, #0
 8001338:	64bb      	str	r3, [r7, #72]	; 0x48
	char* buffer_sen0165 = NULL;
 800133a:	2300      	movs	r3, #0
 800133c:	647b      	str	r3, [r7, #68]	; 0x44
	char* buffer_sen0169 = NULL;
 800133e:	2300      	movs	r3, #0
 8001340:	643b      	str	r3, [r7, #64]	; 0x40
	char* buffer_sen0189 = NULL;
 8001342:	2300      	movs	r3, #0
 8001344:	63fb      	str	r3, [r7, #60]	; 0x3c
	char* buffer_sen0237a = NULL;
 8001346:	2300      	movs	r3, #0
 8001348:	63bb      	str	r3, [r7, #56]	; 0x38


	if( sensor_ds18b20 != NULL ){
 800134a:	4b9e      	ldr	r3, [pc, #632]	; (80015c4 <app_measure+0x304>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d033      	beq.n	80013ba <app_measure+0xfa>
		float temperature = ds18b20_read(sensor_ds18b20);
 8001352:	4b9c      	ldr	r3, [pc, #624]	; (80015c4 <app_measure+0x304>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4618      	mov	r0, r3
 8001358:	f000 ffc8 	bl	80022ec <ds18b20_read>
 800135c:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30
		buffer_ds18b20 = (char*) malloc(10*sizeof(char));
 8001360:	200a      	movs	r0, #10
 8001362:	f009 fe1d 	bl	800afa0 <malloc>
 8001366:	4603      	mov	r3, r0
 8001368:	64fb      	str	r3, [r7, #76]	; 0x4c
		gcvt(temperature, 6, buffer_ds18b20);
 800136a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800136c:	f7ff f8fc 	bl	8000568 <__aeabi_f2d>
 8001370:	4603      	mov	r3, r0
 8001372:	460c      	mov	r4, r1
 8001374:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001376:	2006      	movs	r0, #6
 8001378:	ec44 3b10 	vmov	d0, r3, r4
 800137c:	f009 fdba 	bl	800aef4 <gcvt>
		message_builder_instance = message_builder_put_body(builder, DS18B20_PROPERTIES_LABEL, buffer_ds18b20);
 8001380:	4b91      	ldr	r3, [pc, #580]	; (80015c8 <app_measure+0x308>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001386:	4619      	mov	r1, r3
 8001388:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800138a:	f006 f833 	bl	80073f4 <message_builder_put_body>
 800138e:	4602      	mov	r2, r0
 8001390:	4b87      	ldr	r3, [pc, #540]	; (80015b0 <app_measure+0x2f0>)
 8001392:	601a      	str	r2, [r3, #0]

		char* property_value = string_util_property(DS18B20_PROPERTIES_LABEL, buffer_ds18b20);
 8001394:	4b8c      	ldr	r3, [pc, #560]	; (80015c8 <app_measure+0x308>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800139a:	4618      	mov	r0, r3
 800139c:	f006 fc42 	bl	8007c24 <string_util_property>
 80013a0:	62f8      	str	r0, [r7, #44]	; 0x2c
		logger_info(logger_get_instance(), property_value);
 80013a2:	f005 fcdd 	bl	8006d60 <logger_get_instance>
 80013a6:	4603      	mov	r3, r0
 80013a8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80013aa:	4618      	mov	r0, r3
 80013ac:	f005 fcf6 	bl	8006d9c <logger_info>
		free(property_value);
 80013b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80013b2:	f009 fdfd 	bl	800afb0 <free>
		property_value = NULL;
 80013b6:	2300      	movs	r3, #0
 80013b8:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	if( sensor_sen0161 != NULL ){
 80013ba:	4b84      	ldr	r3, [pc, #528]	; (80015cc <app_measure+0x30c>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d033      	beq.n	800142a <app_measure+0x16a>
		float ph = sen0161_read(sensor_sen0161);
 80013c2:	4b82      	ldr	r3, [pc, #520]	; (80015cc <app_measure+0x30c>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4618      	mov	r0, r3
 80013c8:	f004 ff16 	bl	80061f8 <sen0161_read>
 80013cc:	ed87 0a0a 	vstr	s0, [r7, #40]	; 0x28
		buffer_sen0161 = (char*) malloc(10*sizeof(char));
 80013d0:	200a      	movs	r0, #10
 80013d2:	f009 fde5 	bl	800afa0 <malloc>
 80013d6:	4603      	mov	r3, r0
 80013d8:	64bb      	str	r3, [r7, #72]	; 0x48
		gcvt(ph, 6, buffer_sen0161);
 80013da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80013dc:	f7ff f8c4 	bl	8000568 <__aeabi_f2d>
 80013e0:	4603      	mov	r3, r0
 80013e2:	460c      	mov	r4, r1
 80013e4:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80013e6:	2006      	movs	r0, #6
 80013e8:	ec44 3b10 	vmov	d0, r3, r4
 80013ec:	f009 fd82 	bl	800aef4 <gcvt>
		message_builder_instance = message_builder_put_body(builder, SEN0161_PROPERTIES_LABEL, buffer_sen0161);
 80013f0:	4b77      	ldr	r3, [pc, #476]	; (80015d0 <app_measure+0x310>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80013f6:	4619      	mov	r1, r3
 80013f8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80013fa:	f005 fffb 	bl	80073f4 <message_builder_put_body>
 80013fe:	4602      	mov	r2, r0
 8001400:	4b6b      	ldr	r3, [pc, #428]	; (80015b0 <app_measure+0x2f0>)
 8001402:	601a      	str	r2, [r3, #0]

		char* property_value = string_util_property(SEN0161_PROPERTIES_LABEL, buffer_sen0161);
 8001404:	4b72      	ldr	r3, [pc, #456]	; (80015d0 <app_measure+0x310>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800140a:	4618      	mov	r0, r3
 800140c:	f006 fc0a 	bl	8007c24 <string_util_property>
 8001410:	6278      	str	r0, [r7, #36]	; 0x24
		logger_info(logger_get_instance(), property_value);
 8001412:	f005 fca5 	bl	8006d60 <logger_get_instance>
 8001416:	4603      	mov	r3, r0
 8001418:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800141a:	4618      	mov	r0, r3
 800141c:	f005 fcbe 	bl	8006d9c <logger_info>
		free(property_value);
 8001420:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001422:	f009 fdc5 	bl	800afb0 <free>
		property_value = NULL;
 8001426:	2300      	movs	r3, #0
 8001428:	627b      	str	r3, [r7, #36]	; 0x24
	}

	if( sensor_sen0165 != NULL ){
 800142a:	4b6a      	ldr	r3, [pc, #424]	; (80015d4 <app_measure+0x314>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d033      	beq.n	800149a <app_measure+0x1da>
		float orp = sen0165_read(sensor_sen0165);
 8001432:	4b68      	ldr	r3, [pc, #416]	; (80015d4 <app_measure+0x314>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4618      	mov	r0, r3
 8001438:	f004 ff52 	bl	80062e0 <sen0165_read>
 800143c:	ed87 0a08 	vstr	s0, [r7, #32]
		buffer_sen0165 = (char*) malloc(10*sizeof(char));
 8001440:	200a      	movs	r0, #10
 8001442:	f009 fdad 	bl	800afa0 <malloc>
 8001446:	4603      	mov	r3, r0
 8001448:	647b      	str	r3, [r7, #68]	; 0x44
		gcvt(orp, 6, buffer_sen0165);
 800144a:	6a38      	ldr	r0, [r7, #32]
 800144c:	f7ff f88c 	bl	8000568 <__aeabi_f2d>
 8001450:	4603      	mov	r3, r0
 8001452:	460c      	mov	r4, r1
 8001454:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001456:	2006      	movs	r0, #6
 8001458:	ec44 3b10 	vmov	d0, r3, r4
 800145c:	f009 fd4a 	bl	800aef4 <gcvt>
		message_builder_instance = message_builder_put_body(builder, SEN0165_PROPERTIES_LABEL, buffer_sen0165);
 8001460:	4b5d      	ldr	r3, [pc, #372]	; (80015d8 <app_measure+0x318>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001466:	4619      	mov	r1, r3
 8001468:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800146a:	f005 ffc3 	bl	80073f4 <message_builder_put_body>
 800146e:	4602      	mov	r2, r0
 8001470:	4b4f      	ldr	r3, [pc, #316]	; (80015b0 <app_measure+0x2f0>)
 8001472:	601a      	str	r2, [r3, #0]

		char* property_value = string_util_property(SEN0165_PROPERTIES_LABEL, buffer_sen0165);
 8001474:	4b58      	ldr	r3, [pc, #352]	; (80015d8 <app_measure+0x318>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800147a:	4618      	mov	r0, r3
 800147c:	f006 fbd2 	bl	8007c24 <string_util_property>
 8001480:	61f8      	str	r0, [r7, #28]
		logger_info(logger_get_instance(), property_value);
 8001482:	f005 fc6d 	bl	8006d60 <logger_get_instance>
 8001486:	4603      	mov	r3, r0
 8001488:	69f9      	ldr	r1, [r7, #28]
 800148a:	4618      	mov	r0, r3
 800148c:	f005 fc86 	bl	8006d9c <logger_info>
		free(property_value);
 8001490:	69f8      	ldr	r0, [r7, #28]
 8001492:	f009 fd8d 	bl	800afb0 <free>
		property_value = NULL;
 8001496:	2300      	movs	r3, #0
 8001498:	61fb      	str	r3, [r7, #28]
	}

	if( sensor_sen0169 != NULL ){
 800149a:	4b50      	ldr	r3, [pc, #320]	; (80015dc <app_measure+0x31c>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d033      	beq.n	800150a <app_measure+0x24a>
		float ph = sen0169_read(sensor_sen0169);
 80014a2:	4b4e      	ldr	r3, [pc, #312]	; (80015dc <app_measure+0x31c>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4618      	mov	r0, r3
 80014a8:	f004 ff82 	bl	80063b0 <sen0169_read>
 80014ac:	ed87 0a06 	vstr	s0, [r7, #24]
		buffer_sen0169 = (char*) malloc(10*sizeof(char));
 80014b0:	200a      	movs	r0, #10
 80014b2:	f009 fd75 	bl	800afa0 <malloc>
 80014b6:	4603      	mov	r3, r0
 80014b8:	643b      	str	r3, [r7, #64]	; 0x40
		gcvt(ph, 6, buffer_sen0169);
 80014ba:	69b8      	ldr	r0, [r7, #24]
 80014bc:	f7ff f854 	bl	8000568 <__aeabi_f2d>
 80014c0:	4603      	mov	r3, r0
 80014c2:	460c      	mov	r4, r1
 80014c4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80014c6:	2006      	movs	r0, #6
 80014c8:	ec44 3b10 	vmov	d0, r3, r4
 80014cc:	f009 fd12 	bl	800aef4 <gcvt>
		message_builder_instance = message_builder_put_body(builder, SEN0169_PROPERTIES_LABEL, buffer_sen0169);
 80014d0:	4b43      	ldr	r3, [pc, #268]	; (80015e0 <app_measure+0x320>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80014d6:	4619      	mov	r1, r3
 80014d8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80014da:	f005 ff8b 	bl	80073f4 <message_builder_put_body>
 80014de:	4602      	mov	r2, r0
 80014e0:	4b33      	ldr	r3, [pc, #204]	; (80015b0 <app_measure+0x2f0>)
 80014e2:	601a      	str	r2, [r3, #0]

		char* property_value = string_util_property(SEN0169_PROPERTIES_LABEL, buffer_sen0169);
 80014e4:	4b3e      	ldr	r3, [pc, #248]	; (80015e0 <app_measure+0x320>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80014ea:	4618      	mov	r0, r3
 80014ec:	f006 fb9a 	bl	8007c24 <string_util_property>
 80014f0:	6178      	str	r0, [r7, #20]
		logger_info(logger_get_instance(), property_value);
 80014f2:	f005 fc35 	bl	8006d60 <logger_get_instance>
 80014f6:	4603      	mov	r3, r0
 80014f8:	6979      	ldr	r1, [r7, #20]
 80014fa:	4618      	mov	r0, r3
 80014fc:	f005 fc4e 	bl	8006d9c <logger_info>
		free(property_value);
 8001500:	6978      	ldr	r0, [r7, #20]
 8001502:	f009 fd55 	bl	800afb0 <free>
		property_value = NULL;
 8001506:	2300      	movs	r3, #0
 8001508:	617b      	str	r3, [r7, #20]
	}

	if( sensor_sen0189 != NULL ){
 800150a:	4b36      	ldr	r3, [pc, #216]	; (80015e4 <app_measure+0x324>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d033      	beq.n	800157a <app_measure+0x2ba>
		float turbidity = sen0189_read(sensor_sen0189);
 8001512:	4b34      	ldr	r3, [pc, #208]	; (80015e4 <app_measure+0x324>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4618      	mov	r0, r3
 8001518:	f004 ff96 	bl	8006448 <sen0189_read>
 800151c:	ed87 0a04 	vstr	s0, [r7, #16]
		buffer_sen0189 = (char*) malloc(10*sizeof(char));
 8001520:	200a      	movs	r0, #10
 8001522:	f009 fd3d 	bl	800afa0 <malloc>
 8001526:	4603      	mov	r3, r0
 8001528:	63fb      	str	r3, [r7, #60]	; 0x3c
		gcvt(turbidity, 6, buffer_sen0189);
 800152a:	6938      	ldr	r0, [r7, #16]
 800152c:	f7ff f81c 	bl	8000568 <__aeabi_f2d>
 8001530:	4603      	mov	r3, r0
 8001532:	460c      	mov	r4, r1
 8001534:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001536:	2006      	movs	r0, #6
 8001538:	ec44 3b10 	vmov	d0, r3, r4
 800153c:	f009 fcda 	bl	800aef4 <gcvt>
		message_builder_instance = message_builder_put_body(builder, SEN0189_PROPERTIES_LABEL, buffer_sen0189);
 8001540:	4b29      	ldr	r3, [pc, #164]	; (80015e8 <app_measure+0x328>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001546:	4619      	mov	r1, r3
 8001548:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800154a:	f005 ff53 	bl	80073f4 <message_builder_put_body>
 800154e:	4602      	mov	r2, r0
 8001550:	4b17      	ldr	r3, [pc, #92]	; (80015b0 <app_measure+0x2f0>)
 8001552:	601a      	str	r2, [r3, #0]

		char* property_value = string_util_property(SEN0189_PROPERTIES_LABEL, buffer_sen0189);
 8001554:	4b24      	ldr	r3, [pc, #144]	; (80015e8 <app_measure+0x328>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800155a:	4618      	mov	r0, r3
 800155c:	f006 fb62 	bl	8007c24 <string_util_property>
 8001560:	60f8      	str	r0, [r7, #12]
		logger_info(logger_get_instance(), property_value);
 8001562:	f005 fbfd 	bl	8006d60 <logger_get_instance>
 8001566:	4603      	mov	r3, r0
 8001568:	68f9      	ldr	r1, [r7, #12]
 800156a:	4618      	mov	r0, r3
 800156c:	f005 fc16 	bl	8006d9c <logger_info>
		free(property_value);
 8001570:	68f8      	ldr	r0, [r7, #12]
 8001572:	f009 fd1d 	bl	800afb0 <free>
		property_value = NULL;
 8001576:	2300      	movs	r3, #0
 8001578:	60fb      	str	r3, [r7, #12]
	}

	if( sensor_sen0237a != NULL && sensor_ds18b20 != NULL){
 800157a:	4b1c      	ldr	r3, [pc, #112]	; (80015ec <app_measure+0x32c>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d077      	beq.n	8001672 <app_measure+0x3b2>
 8001582:	4b10      	ldr	r3, [pc, #64]	; (80015c4 <app_measure+0x304>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d073      	beq.n	8001672 <app_measure+0x3b2>
		sen0237a_set_current_temperature(sensor_sen0237a, (uint32_t) ceil(ds18b20_read(sensor_ds18b20)));
 800158a:	4b18      	ldr	r3, [pc, #96]	; (80015ec <app_measure+0x32c>)
 800158c:	681c      	ldr	r4, [r3, #0]
 800158e:	4b0d      	ldr	r3, [pc, #52]	; (80015c4 <app_measure+0x304>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4618      	mov	r0, r3
 8001594:	f000 feaa 	bl	80022ec <ds18b20_read>
 8001598:	ee10 3a10 	vmov	r3, s0
 800159c:	4618      	mov	r0, r3
 800159e:	f7fe ffe3 	bl	8000568 <__aeabi_f2d>
 80015a2:	4602      	mov	r2, r0
 80015a4:	460b      	mov	r3, r1
 80015a6:	ec43 2b10 	vmov	d0, r2, r3
 80015aa:	e021      	b.n	80015f0 <app_measure+0x330>
 80015ac:	2000001c 	.word	0x2000001c
 80015b0:	20000b08 	.word	0x20000b08
 80015b4:	20000020 	.word	0x20000020
 80015b8:	20000024 	.word	0x20000024
 80015bc:	20000028 	.word	0x20000028
 80015c0:	2000002c 	.word	0x2000002c
 80015c4:	20000ac4 	.word	0x20000ac4
 80015c8:	2000003c 	.word	0x2000003c
 80015cc:	20000ac8 	.word	0x20000ac8
 80015d0:	20000040 	.word	0x20000040
 80015d4:	20000acc 	.word	0x20000acc
 80015d8:	2000004c 	.word	0x2000004c
 80015dc:	20000ad0 	.word	0x20000ad0
 80015e0:	20000054 	.word	0x20000054
 80015e4:	20000ad4 	.word	0x20000ad4
 80015e8:	2000005c 	.word	0x2000005c
 80015ec:	20000ad8 	.word	0x20000ad8
 80015f0:	f00e fae2 	bl	800fbb8 <ceil>
 80015f4:	ec53 2b10 	vmov	r2, r3, d0
 80015f8:	4610      	mov	r0, r2
 80015fa:	4619      	mov	r1, r3
 80015fc:	f7ff fae4 	bl	8000bc8 <__aeabi_d2uiz>
 8001600:	4603      	mov	r3, r0
 8001602:	4619      	mov	r1, r3
 8001604:	4620      	mov	r0, r4
 8001606:	f005 f93c 	bl	8006882 <sen0237a_set_current_temperature>
		float dissolved_oxygen = sen0237a_read(sensor_sen0237a);
 800160a:	4b39      	ldr	r3, [pc, #228]	; (80016f0 <app_measure+0x430>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4618      	mov	r0, r3
 8001610:	f005 f94a 	bl	80068a8 <sen0237a_read>
 8001614:	ed87 0a02 	vstr	s0, [r7, #8]
		buffer_sen0237a = (char*) malloc(10*sizeof(char));
 8001618:	200a      	movs	r0, #10
 800161a:	f009 fcc1 	bl	800afa0 <malloc>
 800161e:	4603      	mov	r3, r0
 8001620:	63bb      	str	r3, [r7, #56]	; 0x38
		gcvt(dissolved_oxygen, 6, buffer_sen0237a);
 8001622:	68b8      	ldr	r0, [r7, #8]
 8001624:	f7fe ffa0 	bl	8000568 <__aeabi_f2d>
 8001628:	4603      	mov	r3, r0
 800162a:	460c      	mov	r4, r1
 800162c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800162e:	2006      	movs	r0, #6
 8001630:	ec44 3b10 	vmov	d0, r3, r4
 8001634:	f009 fc5e 	bl	800aef4 <gcvt>
		message_builder_instance = message_builder_put_body(builder, SEN0237A_PROPERTIES_LABEL, buffer_sen0237a);
 8001638:	4b2e      	ldr	r3, [pc, #184]	; (80016f4 <app_measure+0x434>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800163e:	4619      	mov	r1, r3
 8001640:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001642:	f005 fed7 	bl	80073f4 <message_builder_put_body>
 8001646:	4602      	mov	r2, r0
 8001648:	4b2b      	ldr	r3, [pc, #172]	; (80016f8 <app_measure+0x438>)
 800164a:	601a      	str	r2, [r3, #0]

		char* property_value = string_util_property(SEN0237A_PROPERTIES_LABEL, buffer_sen0237a);
 800164c:	4b29      	ldr	r3, [pc, #164]	; (80016f4 <app_measure+0x434>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001652:	4618      	mov	r0, r3
 8001654:	f006 fae6 	bl	8007c24 <string_util_property>
 8001658:	6078      	str	r0, [r7, #4]
		logger_info(logger_get_instance(), property_value);
 800165a:	f005 fb81 	bl	8006d60 <logger_get_instance>
 800165e:	4603      	mov	r3, r0
 8001660:	6879      	ldr	r1, [r7, #4]
 8001662:	4618      	mov	r0, r3
 8001664:	f005 fb9a 	bl	8006d9c <logger_info>
		free(property_value);
 8001668:	6878      	ldr	r0, [r7, #4]
 800166a:	f009 fca1 	bl	800afb0 <free>
		property_value = NULL;
 800166e:	2300      	movs	r3, #0
 8001670:	607b      	str	r3, [r7, #4]
	}

	message = message_builder_build(message_builder_instance);
 8001672:	4b21      	ldr	r3, [pc, #132]	; (80016f8 <app_measure+0x438>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4618      	mov	r0, r3
 8001678:	f005 fed4 	bl	8007424 <message_builder_build>
 800167c:	4602      	mov	r2, r0
 800167e:	4b1f      	ldr	r3, [pc, #124]	; (80016fc <app_measure+0x43c>)
 8001680:	601a      	str	r2, [r3, #0]

	if( buffer_ds18b20 != NULL ) free(buffer_ds18b20);
 8001682:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001684:	2b00      	cmp	r3, #0
 8001686:	d002      	beq.n	800168e <app_measure+0x3ce>
 8001688:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800168a:	f009 fc91 	bl	800afb0 <free>
	if( buffer_sen0161 != NULL ) free(buffer_sen0161);
 800168e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001690:	2b00      	cmp	r3, #0
 8001692:	d002      	beq.n	800169a <app_measure+0x3da>
 8001694:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001696:	f009 fc8b 	bl	800afb0 <free>
	if( buffer_sen0165 != NULL ) free(buffer_sen0165);
 800169a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800169c:	2b00      	cmp	r3, #0
 800169e:	d002      	beq.n	80016a6 <app_measure+0x3e6>
 80016a0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80016a2:	f009 fc85 	bl	800afb0 <free>
	if( buffer_sen0169 != NULL ) free(buffer_sen0169);
 80016a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d002      	beq.n	80016b2 <app_measure+0x3f2>
 80016ac:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80016ae:	f009 fc7f 	bl	800afb0 <free>
	if( buffer_sen0189 != NULL ) free(buffer_sen0189);
 80016b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d002      	beq.n	80016be <app_measure+0x3fe>
 80016b8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80016ba:	f009 fc79 	bl	800afb0 <free>
	if( buffer_sen0237a != NULL ) free(buffer_sen0237a);
 80016be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d002      	beq.n	80016ca <app_measure+0x40a>
 80016c4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80016c6:	f009 fc73 	bl	800afb0 <free>

	buffer_ds18b20 = NULL;
 80016ca:	2300      	movs	r3, #0
 80016cc:	64fb      	str	r3, [r7, #76]	; 0x4c
	buffer_sen0161 = NULL;
 80016ce:	2300      	movs	r3, #0
 80016d0:	64bb      	str	r3, [r7, #72]	; 0x48
	buffer_sen0165 = NULL;
 80016d2:	2300      	movs	r3, #0
 80016d4:	647b      	str	r3, [r7, #68]	; 0x44
	buffer_sen0169 = NULL;
 80016d6:	2300      	movs	r3, #0
 80016d8:	643b      	str	r3, [r7, #64]	; 0x40
	buffer_sen0189 = NULL;
 80016da:	2300      	movs	r3, #0
 80016dc:	63fb      	str	r3, [r7, #60]	; 0x3c
	buffer_sen0237a = NULL;
 80016de:	2300      	movs	r3, #0
 80016e0:	63bb      	str	r3, [r7, #56]	; 0x38

	message_builder_destroy();
 80016e2:	f005 ffcf 	bl	8007684 <message_builder_destroy>
}
 80016e6:	bf00      	nop
 80016e8:	3754      	adds	r7, #84	; 0x54
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd90      	pop	{r4, r7, pc}
 80016ee:	bf00      	nop
 80016f0:	20000ad8 	.word	0x20000ad8
 80016f4:	20000070 	.word	0x20000070
 80016f8:	20000b08 	.word	0x20000b08
 80016fc:	20000adc 	.word	0x20000adc

08001700 <app_send>:

void app_send(void){
 8001700:	b590      	push	{r4, r7, lr}
 8001702:	b085      	sub	sp, #20
 8001704:	af02      	add	r7, sp, #8
	unsigned char MQTT_QOS_LEVEL = QOS_LEVEL == 0x00 || QOS_LEVEL == 0x01 || QOS_LEVEL == 0x02 ? QOS_LEVEL : 0x00;
 8001706:	4b16      	ldr	r3, [pc, #88]	; (8001760 <app_send+0x60>)
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d007      	beq.n	800171e <app_send+0x1e>
 800170e:	4b14      	ldr	r3, [pc, #80]	; (8001760 <app_send+0x60>)
 8001710:	781b      	ldrb	r3, [r3, #0]
 8001712:	2b01      	cmp	r3, #1
 8001714:	d003      	beq.n	800171e <app_send+0x1e>
 8001716:	4b12      	ldr	r3, [pc, #72]	; (8001760 <app_send+0x60>)
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	2b02      	cmp	r3, #2
 800171c:	d102      	bne.n	8001724 <app_send+0x24>
 800171e:	4b10      	ldr	r3, [pc, #64]	; (8001760 <app_send+0x60>)
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	e000      	b.n	8001726 <app_send+0x26>
 8001724:	2300      	movs	r3, #0
 8001726:	71fb      	strb	r3, [r7, #7]
	mqtt_client_publish(mqtt, (char*) SMART_WATER_PROPERTIES_API_GATEWAY_CHANNEL, (char*) message, MQTT_QOS_LEVEL, false);
 8001728:	4b0e      	ldr	r3, [pc, #56]	; (8001764 <app_send+0x64>)
 800172a:	6818      	ldr	r0, [r3, #0]
 800172c:	4b0e      	ldr	r3, [pc, #56]	; (8001768 <app_send+0x68>)
 800172e:	6819      	ldr	r1, [r3, #0]
 8001730:	4b0e      	ldr	r3, [pc, #56]	; (800176c <app_send+0x6c>)
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	79fc      	ldrb	r4, [r7, #7]
 8001736:	2300      	movs	r3, #0
 8001738:	9300      	str	r3, [sp, #0]
 800173a:	4623      	mov	r3, r4
 800173c:	f003 f8ac 	bl	8004898 <mqtt_client_publish>
	if( message != NULL ) free(message);
 8001740:	4b0a      	ldr	r3, [pc, #40]	; (800176c <app_send+0x6c>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d004      	beq.n	8001752 <app_send+0x52>
 8001748:	4b08      	ldr	r3, [pc, #32]	; (800176c <app_send+0x6c>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4618      	mov	r0, r3
 800174e:	f009 fc2f 	bl	800afb0 <free>
	message = NULL;
 8001752:	4b06      	ldr	r3, [pc, #24]	; (800176c <app_send+0x6c>)
 8001754:	2200      	movs	r2, #0
 8001756:	601a      	str	r2, [r3, #0]
}
 8001758:	bf00      	nop
 800175a:	370c      	adds	r7, #12
 800175c:	46bd      	mov	sp, r7
 800175e:	bd90      	pop	{r4, r7, pc}
 8001760:	20000ae0 	.word	0x20000ae0
 8001764:	20000ac0 	.word	0x20000ac0
 8001768:	20000018 	.word	0x20000018
 800176c:	20000adc 	.word	0x20000adc

08001770 <app_wait>:

void app_wait(void){
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
	stm32_util_delay_in_seconds(SMART_WATER_PROPERTIES_MEASUREMENT_CYCLE_IN_SECONDS);
 8001774:	4b03      	ldr	r3, [pc, #12]	; (8001784 <app_wait+0x14>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4618      	mov	r0, r3
 800177a:	f006 fa17 	bl	8007bac <stm32_util_delay_in_seconds>
}
 800177e:	bf00      	nop
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	20000030 	.word	0x20000030

08001788 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800178c:	4b04      	ldr	r3, [pc, #16]	; (80017a0 <__NVIC_GetPriorityGrouping+0x18>)
 800178e:	68db      	ldr	r3, [r3, #12]
 8001790:	0a1b      	lsrs	r3, r3, #8
 8001792:	f003 0307 	and.w	r3, r3, #7
}
 8001796:	4618      	mov	r0, r3
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr
 80017a0:	e000ed00 	.word	0xe000ed00

080017a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b083      	sub	sp, #12
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	4603      	mov	r3, r0
 80017ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	db0b      	blt.n	80017ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017b6:	79fb      	ldrb	r3, [r7, #7]
 80017b8:	f003 021f 	and.w	r2, r3, #31
 80017bc:	4907      	ldr	r1, [pc, #28]	; (80017dc <__NVIC_EnableIRQ+0x38>)
 80017be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c2:	095b      	lsrs	r3, r3, #5
 80017c4:	2001      	movs	r0, #1
 80017c6:	fa00 f202 	lsl.w	r2, r0, r2
 80017ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017ce:	bf00      	nop
 80017d0:	370c      	adds	r7, #12
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	e000e100 	.word	0xe000e100

080017e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	4603      	mov	r3, r0
 80017e8:	6039      	str	r1, [r7, #0]
 80017ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	db0a      	blt.n	800180a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	b2da      	uxtb	r2, r3
 80017f8:	490c      	ldr	r1, [pc, #48]	; (800182c <__NVIC_SetPriority+0x4c>)
 80017fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017fe:	0112      	lsls	r2, r2, #4
 8001800:	b2d2      	uxtb	r2, r2
 8001802:	440b      	add	r3, r1
 8001804:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001808:	e00a      	b.n	8001820 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	b2da      	uxtb	r2, r3
 800180e:	4908      	ldr	r1, [pc, #32]	; (8001830 <__NVIC_SetPriority+0x50>)
 8001810:	79fb      	ldrb	r3, [r7, #7]
 8001812:	f003 030f 	and.w	r3, r3, #15
 8001816:	3b04      	subs	r3, #4
 8001818:	0112      	lsls	r2, r2, #4
 800181a:	b2d2      	uxtb	r2, r2
 800181c:	440b      	add	r3, r1
 800181e:	761a      	strb	r2, [r3, #24]
}
 8001820:	bf00      	nop
 8001822:	370c      	adds	r7, #12
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr
 800182c:	e000e100 	.word	0xe000e100
 8001830:	e000ed00 	.word	0xe000ed00

08001834 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001834:	b480      	push	{r7}
 8001836:	b089      	sub	sp, #36	; 0x24
 8001838:	af00      	add	r7, sp, #0
 800183a:	60f8      	str	r0, [r7, #12]
 800183c:	60b9      	str	r1, [r7, #8]
 800183e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	f003 0307 	and.w	r3, r3, #7
 8001846:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001848:	69fb      	ldr	r3, [r7, #28]
 800184a:	f1c3 0307 	rsb	r3, r3, #7
 800184e:	2b04      	cmp	r3, #4
 8001850:	bf28      	it	cs
 8001852:	2304      	movcs	r3, #4
 8001854:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001856:	69fb      	ldr	r3, [r7, #28]
 8001858:	3304      	adds	r3, #4
 800185a:	2b06      	cmp	r3, #6
 800185c:	d902      	bls.n	8001864 <NVIC_EncodePriority+0x30>
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	3b03      	subs	r3, #3
 8001862:	e000      	b.n	8001866 <NVIC_EncodePriority+0x32>
 8001864:	2300      	movs	r3, #0
 8001866:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001868:	f04f 32ff 	mov.w	r2, #4294967295
 800186c:	69bb      	ldr	r3, [r7, #24]
 800186e:	fa02 f303 	lsl.w	r3, r2, r3
 8001872:	43da      	mvns	r2, r3
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	401a      	ands	r2, r3
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800187c:	f04f 31ff 	mov.w	r1, #4294967295
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	fa01 f303 	lsl.w	r3, r1, r3
 8001886:	43d9      	mvns	r1, r3
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800188c:	4313      	orrs	r3, r2
         );
}
 800188e:	4618      	mov	r0, r3
 8001890:	3724      	adds	r7, #36	; 0x24
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr

0800189a <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800189a:	b490      	push	{r4, r7}
 800189c:	b084      	sub	sp, #16
 800189e:	af00      	add	r7, sp, #0
 80018a0:	60f8      	str	r0, [r7, #12]
 80018a2:	60b9      	str	r1, [r7, #8]
 80018a4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	3330      	adds	r3, #48	; 0x30
 80018aa:	461a      	mov	r2, r3
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	0a1b      	lsrs	r3, r3, #8
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	f003 030c 	and.w	r3, r3, #12
 80018b6:	4413      	add	r3, r2
 80018b8:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80018ba:	6822      	ldr	r2, [r4, #0]
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	f003 031f 	and.w	r3, r3, #31
 80018c2:	211f      	movs	r1, #31
 80018c4:	fa01 f303 	lsl.w	r3, r1, r3
 80018c8:	43db      	mvns	r3, r3
 80018ca:	401a      	ands	r2, r3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	0e9b      	lsrs	r3, r3, #26
 80018d0:	f003 011f 	and.w	r1, r3, #31
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	f003 031f 	and.w	r3, r3, #31
 80018da:	fa01 f303 	lsl.w	r3, r1, r3
 80018de:	4313      	orrs	r3, r2
 80018e0:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80018e2:	bf00      	nop
 80018e4:	3710      	adds	r7, #16
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bc90      	pop	{r4, r7}
 80018ea:	4770      	bx	lr

080018ec <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80018ec:	b490      	push	{r4, r7}
 80018ee:	b084      	sub	sp, #16
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	60f8      	str	r0, [r7, #12]
 80018f4:	60b9      	str	r1, [r7, #8]
 80018f6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	3314      	adds	r3, #20
 80018fc:	461a      	mov	r2, r3
 80018fe:	68bb      	ldr	r3, [r7, #8]
 8001900:	0e5b      	lsrs	r3, r3, #25
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	f003 0304 	and.w	r3, r3, #4
 8001908:	4413      	add	r3, r2
 800190a:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800190c:	6822      	ldr	r2, [r4, #0]
 800190e:	68bb      	ldr	r3, [r7, #8]
 8001910:	0d1b      	lsrs	r3, r3, #20
 8001912:	f003 031f 	and.w	r3, r3, #31
 8001916:	2107      	movs	r1, #7
 8001918:	fa01 f303 	lsl.w	r3, r1, r3
 800191c:	43db      	mvns	r3, r3
 800191e:	401a      	ands	r2, r3
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	0d1b      	lsrs	r3, r3, #20
 8001924:	f003 031f 	and.w	r3, r3, #31
 8001928:	6879      	ldr	r1, [r7, #4]
 800192a:	fa01 f303 	lsl.w	r3, r1, r3
 800192e:	4313      	orrs	r3, r2
 8001930:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001932:	bf00      	nop
 8001934:	3710      	adds	r7, #16
 8001936:	46bd      	mov	sp, r7
 8001938:	bc90      	pop	{r4, r7}
 800193a:	4770      	bx	lr

0800193c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800193c:	b480      	push	{r7}
 800193e:	b085      	sub	sp, #20
 8001940:	af00      	add	r7, sp, #0
 8001942:	60f8      	str	r0, [r7, #12]
 8001944:	60b9      	str	r1, [r7, #8]
 8001946:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800194e:	68bb      	ldr	r3, [r7, #8]
 8001950:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001954:	43db      	mvns	r3, r3
 8001956:	401a      	ands	r2, r3
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	f003 0318 	and.w	r3, r3, #24
 800195e:	4908      	ldr	r1, [pc, #32]	; (8001980 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001960:	40d9      	lsrs	r1, r3
 8001962:	68bb      	ldr	r3, [r7, #8]
 8001964:	400b      	ands	r3, r1
 8001966:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800196a:	431a      	orrs	r2, r3
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001972:	bf00      	nop
 8001974:	3714      	adds	r7, #20
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop
 8001980:	0007ffff 	.word	0x0007ffff

08001984 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001994:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001998:	687a      	ldr	r2, [r7, #4]
 800199a:	6093      	str	r3, [r2, #8]
}
 800199c:	bf00      	nop
 800199e:	370c      	adds	r7, #12
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr

080019a8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80019b8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80019bc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80019c4:	bf00      	nop
 80019c6:	370c      	adds	r7, #12
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr

080019d0 <LL_ADC_DisableIT_EOC>:
  * @rmtoll IER      EOCIE          LL_ADC_DisableIT_EOC
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOC(ADC_TypeDef *ADCx)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	f023 0204 	bic.w	r2, r3, #4
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	605a      	str	r2, [r3, #4]
}
 80019e4:	bf00      	nop
 80019e6:	370c      	adds	r7, #12
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr

080019f0 <LL_ADC_DisableIT_EOS>:
  * @rmtoll IER      EOSIE          LL_ADC_DisableIT_EOS
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOS(ADC_TypeDef *ADCx)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOS);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	f023 0208 	bic.w	r2, r3, #8
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	605a      	str	r2, [r3, #4]
}
 8001a04:	bf00      	nop
 8001a06:	370c      	adds	r7, #12
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr

08001a10 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b085      	sub	sp, #20
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001a18:	4b08      	ldr	r3, [pc, #32]	; (8001a3c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001a1a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a1c:	4907      	ldr	r1, [pc, #28]	; (8001a3c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	4313      	orrs	r3, r2
 8001a22:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001a24:	4b05      	ldr	r3, [pc, #20]	; (8001a3c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001a26:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
}
 8001a30:	bf00      	nop
 8001a32:	3714      	adds	r7, #20
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr
 8001a3c:	40021000 	.word	0x40021000

08001a40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a44:	f006 f9ad 	bl	8007da2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a48:	f000 f813 	bl	8001a72 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a4c:	f000 f9d4 	bl	8001df8 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001a50:	f000 f890 	bl	8001b74 <MX_ADC1_Init>
  MX_I2C2_Init();
 8001a54:	f000 f92a 	bl	8001cac <MX_I2C2_Init>
  MX_USART2_UART_Init();
 8001a58:	f000 f99e 	bl	8001d98 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 8001a5c:	f000 f966 	bl	8001d2c <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  app_init();
 8001a60:	f7ff faa2 	bl	8000fa8 <app_init>
    while (1){
  	  app_measure();
 8001a64:	f7ff fc2c 	bl	80012c0 <app_measure>
    	  app_send();
 8001a68:	f7ff fe4a 	bl	8001700 <app_send>
    	  app_wait();
 8001a6c:	f7ff fe80 	bl	8001770 <app_wait>
    while (1){
 8001a70:	e7f8      	b.n	8001a64 <main+0x24>

08001a72 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a72:	b580      	push	{r7, lr}
 8001a74:	b0ae      	sub	sp, #184	; 0xb8
 8001a76:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a78:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001a7c:	2244      	movs	r2, #68	; 0x44
 8001a7e:	2100      	movs	r1, #0
 8001a80:	4618      	mov	r0, r3
 8001a82:	f009 fcd3 	bl	800b42c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a86:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	601a      	str	r2, [r3, #0]
 8001a8e:	605a      	str	r2, [r3, #4]
 8001a90:	609a      	str	r2, [r3, #8]
 8001a92:	60da      	str	r2, [r3, #12]
 8001a94:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a96:	463b      	mov	r3, r7
 8001a98:	2260      	movs	r2, #96	; 0x60
 8001a9a:	2100      	movs	r1, #0
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f009 fcc5 	bl	800b42c <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001aa6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001aaa:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001aac:	2302      	movs	r3, #2
 8001aae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLN = 20;
 8001abe:	2314      	movs	r3, #20
 8001ac0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001ac4:	2307      	movs	r3, #7
 8001ac6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001aca:	2302      	movs	r3, #2
 8001acc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001ad0:	2302      	movs	r3, #2
 8001ad2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ad6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001ada:	4618      	mov	r0, r3
 8001adc:	f007 f8a4 	bl	8008c28 <HAL_RCC_OscConfig>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d001      	beq.n	8001aea <SystemClock_Config+0x78>
  {
    Error_Handler();
 8001ae6:	f000 fa01 	bl	8001eec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001aea:	230f      	movs	r3, #15
 8001aec:	663b      	str	r3, [r7, #96]	; 0x60
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001aee:	2303      	movs	r3, #3
 8001af0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001af2:	2300      	movs	r3, #0
 8001af4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001af6:	2300      	movs	r3, #0
 8001af8:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001afa:	2300      	movs	r3, #0
 8001afc:	673b      	str	r3, [r7, #112]	; 0x70

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001afe:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001b02:	2104      	movs	r1, #4
 8001b04:	4618      	mov	r0, r3
 8001b06:	f007 fcaf 	bl	8009468 <HAL_RCC_ClockConfig>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d001      	beq.n	8001b14 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8001b10:	f000 f9ec 	bl	8001eec <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C2
 8001b14:	f244 0382 	movw	r3, #16514	; 0x4082
 8001b18:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001b22:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001b26:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8001b28:	2303      	movs	r3, #3
 8001b2a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8001b30:	2308      	movs	r3, #8
 8001b32:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001b34:	2307      	movs	r3, #7
 8001b36:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001b38:	2302      	movs	r3, #2
 8001b3a:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001b3c:	2302      	movs	r3, #2
 8001b3e:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001b40:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001b44:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b46:	463b      	mov	r3, r7
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f007 fe91 	bl	8009870 <HAL_RCCEx_PeriphCLKConfig>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d001      	beq.n	8001b58 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8001b54:	f000 f9ca 	bl	8001eec <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001b58:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001b5c:	f007 f80e 	bl	8008b7c <HAL_PWREx_ControlVoltageScaling>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d001      	beq.n	8001b6a <SystemClock_Config+0xf8>
  {
    Error_Handler();
 8001b66:	f000 f9c1 	bl	8001eec <Error_Handler>
  }
}
 8001b6a:	bf00      	nop
 8001b6c:	37b8      	adds	r7, #184	; 0xb8
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
	...

08001b74 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b090      	sub	sp, #64	; 0x40
 8001b78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8001b7a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001b7e:	2200      	movs	r2, #0
 8001b80:	601a      	str	r2, [r3, #0]
 8001b82:	605a      	str	r2, [r3, #4]
 8001b84:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8001b86:	f107 031c 	add.w	r3, r7, #28
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	601a      	str	r2, [r3, #0]
 8001b8e:	605a      	str	r2, [r3, #4]
 8001b90:	609a      	str	r2, [r3, #8]
 8001b92:	60da      	str	r2, [r3, #12]
 8001b94:	611a      	str	r2, [r3, #16]
 8001b96:	615a      	str	r2, [r3, #20]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 8001b98:	2300      	movs	r3, #0
 8001b9a:	61bb      	str	r3, [r7, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b9c:	463b      	mov	r3, r7
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	601a      	str	r2, [r3, #0]
 8001ba2:	605a      	str	r2, [r3, #4]
 8001ba4:	609a      	str	r2, [r3, #8]
 8001ba6:	60da      	str	r2, [r3, #12]
 8001ba8:	611a      	str	r2, [r3, #16]
 8001baa:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_ADC);
 8001bac:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001bb0:	f7ff ff2e 	bl	8001a10 <LL_AHB2_GRP1_EnableClock>
  
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8001bb4:	2004      	movs	r0, #4
 8001bb6:	f7ff ff2b 	bl	8001a10 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8001bba:	2001      	movs	r0, #1
 8001bbc:	f7ff ff28 	bl	8001a10 <LL_AHB2_GRP1_EnableClock>
  PC0   ------> ADC1_IN1
  PC1   ------> ADC1_IN2
  PC2   ------> ADC1_IN3
  PA7   ------> ADC1_IN12 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2;
 8001bc0:	2307      	movs	r3, #7
 8001bc2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001bc4:	2303      	movs	r3, #3
 8001bc6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bcc:	463b      	mov	r3, r7
 8001bce:	4619      	mov	r1, r3
 8001bd0:	4832      	ldr	r0, [pc, #200]	; (8001c9c <MX_ADC1_Init+0x128>)
 8001bd2:	f009 f908 	bl	800ade6 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 8001bd6:	2380      	movs	r3, #128	; 0x80
 8001bd8:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001bde:	2300      	movs	r3, #0
 8001be0:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001be2:	463b      	mov	r3, r7
 8001be4:	4619      	mov	r1, r3
 8001be6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bea:	f009 f8fc 	bl	800ade6 <LL_GPIO_Init>

  /* ADC1 interrupt Init */
  NVIC_SetPriority(ADC1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 0));
 8001bee:	f7ff fdcb 	bl	8001788 <__NVIC_GetPriorityGrouping>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	2101      	movs	r1, #1
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f7ff fe1b 	bl	8001834 <NVIC_EncodePriority>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	4619      	mov	r1, r3
 8001c02:	2012      	movs	r0, #18
 8001c04:	f7ff fdec 	bl	80017e0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(ADC1_IRQn);
 8001c08:	2012      	movs	r0, #18
 8001c0a:	f7ff fdcb 	bl	80017a4 <__NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	637b      	str	r3, [r7, #52]	; 0x34
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8001c12:	2300      	movs	r3, #0
 8001c14:	63bb      	str	r3, [r7, #56]	; 0x38
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 8001c16:	2300      	movs	r3, #0
 8001c18:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8001c1a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001c1e:	4619      	mov	r1, r3
 8001c20:	481f      	ldr	r0, [pc, #124]	; (8001ca0 <MX_ADC1_Init+0x12c>)
 8001c22:	f008 ff6b 	bl	800aafc <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8001c26:	2300      	movs	r3, #0
 8001c28:	61fb      	str	r3, [r7, #28]
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	623b      	str	r3, [r7, #32]
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	627b      	str	r3, [r7, #36]	; 0x24
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_CONTINUOUS;
 8001c32:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c36:	62bb      	str	r3, [r7, #40]	; 0x28
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_PRESERVED;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	633b      	str	r3, [r7, #48]	; 0x30
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8001c40:	f107 031c 	add.w	r3, r7, #28
 8001c44:	4619      	mov	r1, r3
 8001c46:	4816      	ldr	r0, [pc, #88]	; (8001ca0 <MX_ADC1_Init+0x12c>)
 8001c48:	f008 ff7e 	bl	800ab48 <LL_ADC_REG_Init>
  LL_ADC_DisableIT_EOC(ADC1);
 8001c4c:	4814      	ldr	r0, [pc, #80]	; (8001ca0 <MX_ADC1_Init+0x12c>)
 8001c4e:	f7ff febf 	bl	80019d0 <LL_ADC_DisableIT_EOC>
  LL_ADC_DisableIT_EOS(ADC1);
 8001c52:	4813      	ldr	r0, [pc, #76]	; (8001ca0 <MX_ADC1_Init+0x12c>)
 8001c54:	f7ff fecc 	bl	80019f0 <LL_ADC_DisableIT_EOS>
  LL_ADC_DisableDeepPowerDown(ADC1);
 8001c58:	4811      	ldr	r0, [pc, #68]	; (8001ca0 <MX_ADC1_Init+0x12c>)
 8001c5a:	f7ff fe93 	bl	8001984 <LL_ADC_DisableDeepPowerDown>
  LL_ADC_EnableInternalRegulator(ADC1);
 8001c5e:	4810      	ldr	r0, [pc, #64]	; (8001ca0 <MX_ADC1_Init+0x12c>)
 8001c60:	f7ff fea2 	bl	80019a8 <LL_ADC_EnableInternalRegulator>
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_ASYNC_DIV1;
 8001c64:	2300      	movs	r3, #0
 8001c66:	61bb      	str	r3, [r7, #24]
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 8001c68:	f107 0318 	add.w	r3, r7, #24
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	480d      	ldr	r0, [pc, #52]	; (8001ca4 <MX_ADC1_Init+0x130>)
 8001c70:	f008 ff26 	bl	800aac0 <LL_ADC_CommonInit>
  /** Configure Regular Channel 
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_1);
 8001c74:	4a0c      	ldr	r2, [pc, #48]	; (8001ca8 <MX_ADC1_Init+0x134>)
 8001c76:	2106      	movs	r1, #6
 8001c78:	4809      	ldr	r0, [pc, #36]	; (8001ca0 <MX_ADC1_Init+0x12c>)
 8001c7a:	f7ff fe0e 	bl	800189a <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_1, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001c7e:	2200      	movs	r2, #0
 8001c80:	4909      	ldr	r1, [pc, #36]	; (8001ca8 <MX_ADC1_Init+0x134>)
 8001c82:	4807      	ldr	r0, [pc, #28]	; (8001ca0 <MX_ADC1_Init+0x12c>)
 8001c84:	f7ff fe32 	bl	80018ec <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC1, LL_ADC_CHANNEL_1, LL_ADC_SINGLE_ENDED);
 8001c88:	227f      	movs	r2, #127	; 0x7f
 8001c8a:	4907      	ldr	r1, [pc, #28]	; (8001ca8 <MX_ADC1_Init+0x134>)
 8001c8c:	4804      	ldr	r0, [pc, #16]	; (8001ca0 <MX_ADC1_Init+0x12c>)
 8001c8e:	f7ff fe55 	bl	800193c <LL_ADC_SetChannelSingleDiff>
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001c92:	bf00      	nop
 8001c94:	3740      	adds	r7, #64	; 0x40
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	48000800 	.word	0x48000800
 8001ca0:	50040000 	.word	0x50040000
 8001ca4:	50040300 	.word	0x50040300
 8001ca8:	04300002 	.word	0x04300002

08001cac <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001cb0:	4b1b      	ldr	r3, [pc, #108]	; (8001d20 <MX_I2C2_Init+0x74>)
 8001cb2:	4a1c      	ldr	r2, [pc, #112]	; (8001d24 <MX_I2C2_Init+0x78>)
 8001cb4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 8001cb6:	4b1a      	ldr	r3, [pc, #104]	; (8001d20 <MX_I2C2_Init+0x74>)
 8001cb8:	4a1b      	ldr	r2, [pc, #108]	; (8001d28 <MX_I2C2_Init+0x7c>)
 8001cba:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001cbc:	4b18      	ldr	r3, [pc, #96]	; (8001d20 <MX_I2C2_Init+0x74>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001cc2:	4b17      	ldr	r3, [pc, #92]	; (8001d20 <MX_I2C2_Init+0x74>)
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001cc8:	4b15      	ldr	r3, [pc, #84]	; (8001d20 <MX_I2C2_Init+0x74>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001cce:	4b14      	ldr	r3, [pc, #80]	; (8001d20 <MX_I2C2_Init+0x74>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001cd4:	4b12      	ldr	r3, [pc, #72]	; (8001d20 <MX_I2C2_Init+0x74>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001cda:	4b11      	ldr	r3, [pc, #68]	; (8001d20 <MX_I2C2_Init+0x74>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ce0:	4b0f      	ldr	r3, [pc, #60]	; (8001d20 <MX_I2C2_Init+0x74>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001ce6:	480e      	ldr	r0, [pc, #56]	; (8001d20 <MX_I2C2_Init+0x74>)
 8001ce8:	f006 fbaa 	bl	8008440 <HAL_I2C_Init>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d001      	beq.n	8001cf6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001cf2:	f000 f8fb 	bl	8001eec <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001cf6:	2100      	movs	r1, #0
 8001cf8:	4809      	ldr	r0, [pc, #36]	; (8001d20 <MX_I2C2_Init+0x74>)
 8001cfa:	f006 fe99 	bl	8008a30 <HAL_I2CEx_ConfigAnalogFilter>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d001      	beq.n	8001d08 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001d04:	f000 f8f2 	bl	8001eec <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001d08:	2100      	movs	r1, #0
 8001d0a:	4805      	ldr	r0, [pc, #20]	; (8001d20 <MX_I2C2_Init+0x74>)
 8001d0c:	f006 fedb 	bl	8008ac6 <HAL_I2CEx_ConfigDigitalFilter>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d001      	beq.n	8001d1a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001d16:	f000 f8e9 	bl	8001eec <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001d1a:	bf00      	nop
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	20000b44 	.word	0x20000b44
 8001d24:	40005800 	.word	0x40005800
 8001d28:	10909cec 	.word	0x10909cec

08001d2c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b084      	sub	sp, #16
 8001d30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d32:	1d3b      	adds	r3, r7, #4
 8001d34:	2200      	movs	r2, #0
 8001d36:	601a      	str	r2, [r3, #0]
 8001d38:	605a      	str	r2, [r3, #4]
 8001d3a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001d3c:	4b14      	ldr	r3, [pc, #80]	; (8001d90 <MX_TIM6_Init+0x64>)
 8001d3e:	4a15      	ldr	r2, [pc, #84]	; (8001d94 <MX_TIM6_Init+0x68>)
 8001d40:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 83;
 8001d42:	4b13      	ldr	r3, [pc, #76]	; (8001d90 <MX_TIM6_Init+0x64>)
 8001d44:	2253      	movs	r2, #83	; 0x53
 8001d46:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d48:	4b11      	ldr	r3, [pc, #68]	; (8001d90 <MX_TIM6_Init+0x64>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 4200;
 8001d4e:	4b10      	ldr	r3, [pc, #64]	; (8001d90 <MX_TIM6_Init+0x64>)
 8001d50:	f241 0268 	movw	r2, #4200	; 0x1068
 8001d54:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d56:	4b0e      	ldr	r3, [pc, #56]	; (8001d90 <MX_TIM6_Init+0x64>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001d5c:	480c      	ldr	r0, [pc, #48]	; (8001d90 <MX_TIM6_Init+0x64>)
 8001d5e:	f008 f8bb 	bl	8009ed8 <HAL_TIM_Base_Init>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d001      	beq.n	8001d6c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001d68:	f000 f8c0 	bl	8001eec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d70:	2300      	movs	r3, #0
 8001d72:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001d74:	1d3b      	adds	r3, r7, #4
 8001d76:	4619      	mov	r1, r3
 8001d78:	4805      	ldr	r0, [pc, #20]	; (8001d90 <MX_TIM6_Init+0x64>)
 8001d7a:	f008 f93d 	bl	8009ff8 <HAL_TIMEx_MasterConfigSynchronization>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d001      	beq.n	8001d88 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001d84:	f000 f8b2 	bl	8001eec <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001d88:	bf00      	nop
 8001d8a:	3710      	adds	r7, #16
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	20000b90 	.word	0x20000b90
 8001d94:	40001000 	.word	0x40001000

08001d98 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001d9c:	4b14      	ldr	r3, [pc, #80]	; (8001df0 <MX_USART2_UART_Init+0x58>)
 8001d9e:	4a15      	ldr	r2, [pc, #84]	; (8001df4 <MX_USART2_UART_Init+0x5c>)
 8001da0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001da2:	4b13      	ldr	r3, [pc, #76]	; (8001df0 <MX_USART2_UART_Init+0x58>)
 8001da4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001da8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001daa:	4b11      	ldr	r3, [pc, #68]	; (8001df0 <MX_USART2_UART_Init+0x58>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001db0:	4b0f      	ldr	r3, [pc, #60]	; (8001df0 <MX_USART2_UART_Init+0x58>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001db6:	4b0e      	ldr	r3, [pc, #56]	; (8001df0 <MX_USART2_UART_Init+0x58>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001dbc:	4b0c      	ldr	r3, [pc, #48]	; (8001df0 <MX_USART2_UART_Init+0x58>)
 8001dbe:	220c      	movs	r2, #12
 8001dc0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dc2:	4b0b      	ldr	r3, [pc, #44]	; (8001df0 <MX_USART2_UART_Init+0x58>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001dc8:	4b09      	ldr	r3, [pc, #36]	; (8001df0 <MX_USART2_UART_Init+0x58>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001dce:	4b08      	ldr	r3, [pc, #32]	; (8001df0 <MX_USART2_UART_Init+0x58>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001dd4:	4b06      	ldr	r3, [pc, #24]	; (8001df0 <MX_USART2_UART_Init+0x58>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001dda:	4805      	ldr	r0, [pc, #20]	; (8001df0 <MX_USART2_UART_Init+0x58>)
 8001ddc:	f008 f972 	bl	800a0c4 <HAL_UART_Init>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d001      	beq.n	8001dea <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001de6:	f000 f881 	bl	8001eec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001dea:	bf00      	nop
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	20000bd0 	.word	0x20000bd0
 8001df4:	40004400 	.word	0x40004400

08001df8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b08a      	sub	sp, #40	; 0x28
 8001dfc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dfe:	f107 0314 	add.w	r3, r7, #20
 8001e02:	2200      	movs	r2, #0
 8001e04:	601a      	str	r2, [r3, #0]
 8001e06:	605a      	str	r2, [r3, #4]
 8001e08:	609a      	str	r2, [r3, #8]
 8001e0a:	60da      	str	r2, [r3, #12]
 8001e0c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e0e:	4b35      	ldr	r3, [pc, #212]	; (8001ee4 <MX_GPIO_Init+0xec>)
 8001e10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e12:	4a34      	ldr	r2, [pc, #208]	; (8001ee4 <MX_GPIO_Init+0xec>)
 8001e14:	f043 0304 	orr.w	r3, r3, #4
 8001e18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e1a:	4b32      	ldr	r3, [pc, #200]	; (8001ee4 <MX_GPIO_Init+0xec>)
 8001e1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e1e:	f003 0304 	and.w	r3, r3, #4
 8001e22:	613b      	str	r3, [r7, #16]
 8001e24:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e26:	4b2f      	ldr	r3, [pc, #188]	; (8001ee4 <MX_GPIO_Init+0xec>)
 8001e28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e2a:	4a2e      	ldr	r2, [pc, #184]	; (8001ee4 <MX_GPIO_Init+0xec>)
 8001e2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e32:	4b2c      	ldr	r3, [pc, #176]	; (8001ee4 <MX_GPIO_Init+0xec>)
 8001e34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e3a:	60fb      	str	r3, [r7, #12]
 8001e3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e3e:	4b29      	ldr	r3, [pc, #164]	; (8001ee4 <MX_GPIO_Init+0xec>)
 8001e40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e42:	4a28      	ldr	r2, [pc, #160]	; (8001ee4 <MX_GPIO_Init+0xec>)
 8001e44:	f043 0301 	orr.w	r3, r3, #1
 8001e48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e4a:	4b26      	ldr	r3, [pc, #152]	; (8001ee4 <MX_GPIO_Init+0xec>)
 8001e4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e4e:	f003 0301 	and.w	r3, r3, #1
 8001e52:	60bb      	str	r3, [r7, #8]
 8001e54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e56:	4b23      	ldr	r3, [pc, #140]	; (8001ee4 <MX_GPIO_Init+0xec>)
 8001e58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e5a:	4a22      	ldr	r2, [pc, #136]	; (8001ee4 <MX_GPIO_Init+0xec>)
 8001e5c:	f043 0302 	orr.w	r3, r3, #2
 8001e60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e62:	4b20      	ldr	r3, [pc, #128]	; (8001ee4 <MX_GPIO_Init+0xec>)
 8001e64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e66:	f003 0302 	and.w	r3, r3, #2
 8001e6a:	607b      	str	r3, [r7, #4]
 8001e6c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP_EN_GPIO_Port, ESP_EN_Pin, GPIO_PIN_RESET);
 8001e6e:	2200      	movs	r2, #0
 8001e70:	2120      	movs	r1, #32
 8001e72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e76:	f006 facb 	bl	8008410 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP_POWER_EN_GPIO_Port, ESP_POWER_EN_Pin, GPIO_PIN_SET);
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001e80:	4819      	ldr	r0, [pc, #100]	; (8001ee8 <MX_GPIO_Init+0xf0>)
 8001e82:	f006 fac5 	bl	8008410 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001e86:	2301      	movs	r3, #1
 8001e88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e92:	f107 0314 	add.w	r3, r7, #20
 8001e96:	4619      	mov	r1, r3
 8001e98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e9c:	f006 f926 	bl	80080ec <HAL_GPIO_Init>

  /*Configure GPIO pin : ESP_EN_Pin */
  GPIO_InitStruct.Pin = ESP_EN_Pin;
 8001ea0:	2320      	movs	r3, #32
 8001ea2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eac:	2300      	movs	r3, #0
 8001eae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ESP_EN_GPIO_Port, &GPIO_InitStruct);
 8001eb0:	f107 0314 	add.w	r3, r7, #20
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001eba:	f006 f917 	bl	80080ec <HAL_GPIO_Init>

  /*Configure GPIO pin : ESP_POWER_EN_Pin */
  GPIO_InitStruct.Pin = ESP_POWER_EN_Pin;
 8001ebe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ec2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ESP_POWER_EN_GPIO_Port, &GPIO_InitStruct);
 8001ed0:	f107 0314 	add.w	r3, r7, #20
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	4804      	ldr	r0, [pc, #16]	; (8001ee8 <MX_GPIO_Init+0xf0>)
 8001ed8:	f006 f908 	bl	80080ec <HAL_GPIO_Init>

}
 8001edc:	bf00      	nop
 8001ede:	3728      	adds	r7, #40	; 0x28
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	40021000 	.word	0x40021000
 8001ee8:	48000400 	.word	0x48000400

08001eec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001ef0:	bf00      	nop
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr
	...

08001efc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b083      	sub	sp, #12
 8001f00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f02:	4b0f      	ldr	r3, [pc, #60]	; (8001f40 <HAL_MspInit+0x44>)
 8001f04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f06:	4a0e      	ldr	r2, [pc, #56]	; (8001f40 <HAL_MspInit+0x44>)
 8001f08:	f043 0301 	orr.w	r3, r3, #1
 8001f0c:	6613      	str	r3, [r2, #96]	; 0x60
 8001f0e:	4b0c      	ldr	r3, [pc, #48]	; (8001f40 <HAL_MspInit+0x44>)
 8001f10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f12:	f003 0301 	and.w	r3, r3, #1
 8001f16:	607b      	str	r3, [r7, #4]
 8001f18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f1a:	4b09      	ldr	r3, [pc, #36]	; (8001f40 <HAL_MspInit+0x44>)
 8001f1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f1e:	4a08      	ldr	r2, [pc, #32]	; (8001f40 <HAL_MspInit+0x44>)
 8001f20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f24:	6593      	str	r3, [r2, #88]	; 0x58
 8001f26:	4b06      	ldr	r3, [pc, #24]	; (8001f40 <HAL_MspInit+0x44>)
 8001f28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f2e:	603b      	str	r3, [r7, #0]
 8001f30:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f32:	bf00      	nop
 8001f34:	370c      	adds	r7, #12
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr
 8001f3e:	bf00      	nop
 8001f40:	40021000 	.word	0x40021000

08001f44 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b08a      	sub	sp, #40	; 0x28
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f4c:	f107 0314 	add.w	r3, r7, #20
 8001f50:	2200      	movs	r2, #0
 8001f52:	601a      	str	r2, [r3, #0]
 8001f54:	605a      	str	r2, [r3, #4]
 8001f56:	609a      	str	r2, [r3, #8]
 8001f58:	60da      	str	r2, [r3, #12]
 8001f5a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a17      	ldr	r2, [pc, #92]	; (8001fc0 <HAL_I2C_MspInit+0x7c>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d128      	bne.n	8001fb8 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f66:	4b17      	ldr	r3, [pc, #92]	; (8001fc4 <HAL_I2C_MspInit+0x80>)
 8001f68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f6a:	4a16      	ldr	r2, [pc, #88]	; (8001fc4 <HAL_I2C_MspInit+0x80>)
 8001f6c:	f043 0302 	orr.w	r3, r3, #2
 8001f70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f72:	4b14      	ldr	r3, [pc, #80]	; (8001fc4 <HAL_I2C_MspInit+0x80>)
 8001f74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f76:	f003 0302 	and.w	r3, r3, #2
 8001f7a:	613b      	str	r3, [r7, #16]
 8001f7c:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration    
    PB11     ------> I2C2_SDA
    PB13     ------> I2C2_SCL 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8001f7e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001f82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f84:	2312      	movs	r3, #18
 8001f86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f8c:	2303      	movs	r3, #3
 8001f8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001f90:	2304      	movs	r3, #4
 8001f92:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f94:	f107 0314 	add.w	r3, r7, #20
 8001f98:	4619      	mov	r1, r3
 8001f9a:	480b      	ldr	r0, [pc, #44]	; (8001fc8 <HAL_I2C_MspInit+0x84>)
 8001f9c:	f006 f8a6 	bl	80080ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001fa0:	4b08      	ldr	r3, [pc, #32]	; (8001fc4 <HAL_I2C_MspInit+0x80>)
 8001fa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fa4:	4a07      	ldr	r2, [pc, #28]	; (8001fc4 <HAL_I2C_MspInit+0x80>)
 8001fa6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001faa:	6593      	str	r3, [r2, #88]	; 0x58
 8001fac:	4b05      	ldr	r3, [pc, #20]	; (8001fc4 <HAL_I2C_MspInit+0x80>)
 8001fae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fb0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fb4:	60fb      	str	r3, [r7, #12]
 8001fb6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001fb8:	bf00      	nop
 8001fba:	3728      	adds	r7, #40	; 0x28
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	40005800 	.word	0x40005800
 8001fc4:	40021000 	.word	0x40021000
 8001fc8:	48000400 	.word	0x48000400

08001fcc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b085      	sub	sp, #20
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a0a      	ldr	r2, [pc, #40]	; (8002004 <HAL_TIM_Base_MspInit+0x38>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d10b      	bne.n	8001ff6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001fde:	4b0a      	ldr	r3, [pc, #40]	; (8002008 <HAL_TIM_Base_MspInit+0x3c>)
 8001fe0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fe2:	4a09      	ldr	r2, [pc, #36]	; (8002008 <HAL_TIM_Base_MspInit+0x3c>)
 8001fe4:	f043 0310 	orr.w	r3, r3, #16
 8001fe8:	6593      	str	r3, [r2, #88]	; 0x58
 8001fea:	4b07      	ldr	r3, [pc, #28]	; (8002008 <HAL_TIM_Base_MspInit+0x3c>)
 8001fec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fee:	f003 0310 	and.w	r3, r3, #16
 8001ff2:	60fb      	str	r3, [r7, #12]
 8001ff4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001ff6:	bf00      	nop
 8001ff8:	3714      	adds	r7, #20
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr
 8002002:	bf00      	nop
 8002004:	40001000 	.word	0x40001000
 8002008:	40021000 	.word	0x40021000

0800200c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b08a      	sub	sp, #40	; 0x28
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002014:	f107 0314 	add.w	r3, r7, #20
 8002018:	2200      	movs	r2, #0
 800201a:	601a      	str	r2, [r3, #0]
 800201c:	605a      	str	r2, [r3, #4]
 800201e:	609a      	str	r2, [r3, #8]
 8002020:	60da      	str	r2, [r3, #12]
 8002022:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a17      	ldr	r2, [pc, #92]	; (8002088 <HAL_UART_MspInit+0x7c>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d128      	bne.n	8002080 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800202e:	4b17      	ldr	r3, [pc, #92]	; (800208c <HAL_UART_MspInit+0x80>)
 8002030:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002032:	4a16      	ldr	r2, [pc, #88]	; (800208c <HAL_UART_MspInit+0x80>)
 8002034:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002038:	6593      	str	r3, [r2, #88]	; 0x58
 800203a:	4b14      	ldr	r3, [pc, #80]	; (800208c <HAL_UART_MspInit+0x80>)
 800203c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800203e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002042:	613b      	str	r3, [r7, #16]
 8002044:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002046:	4b11      	ldr	r3, [pc, #68]	; (800208c <HAL_UART_MspInit+0x80>)
 8002048:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800204a:	4a10      	ldr	r2, [pc, #64]	; (800208c <HAL_UART_MspInit+0x80>)
 800204c:	f043 0301 	orr.w	r3, r3, #1
 8002050:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002052:	4b0e      	ldr	r3, [pc, #56]	; (800208c <HAL_UART_MspInit+0x80>)
 8002054:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002056:	f003 0301 	and.w	r3, r3, #1
 800205a:	60fb      	str	r3, [r7, #12]
 800205c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800205e:	230c      	movs	r3, #12
 8002060:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002062:	2302      	movs	r3, #2
 8002064:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002066:	2300      	movs	r3, #0
 8002068:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800206a:	2303      	movs	r3, #3
 800206c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800206e:	2307      	movs	r3, #7
 8002070:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002072:	f107 0314 	add.w	r3, r7, #20
 8002076:	4619      	mov	r1, r3
 8002078:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800207c:	f006 f836 	bl	80080ec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002080:	bf00      	nop
 8002082:	3728      	adds	r7, #40	; 0x28
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}
 8002088:	40004400 	.word	0x40004400
 800208c:	40021000 	.word	0x40021000

08002090 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002094:	bf00      	nop
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr

0800209e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800209e:	b480      	push	{r7}
 80020a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020a2:	e7fe      	b.n	80020a2 <HardFault_Handler+0x4>

080020a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020a8:	e7fe      	b.n	80020a8 <MemManage_Handler+0x4>

080020aa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020aa:	b480      	push	{r7}
 80020ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020ae:	e7fe      	b.n	80020ae <BusFault_Handler+0x4>

080020b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020b0:	b480      	push	{r7}
 80020b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020b4:	e7fe      	b.n	80020b4 <UsageFault_Handler+0x4>

080020b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020b6:	b480      	push	{r7}
 80020b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020ba:	bf00      	nop
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr

080020c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020c8:	bf00      	nop
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr

080020d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020d2:	b480      	push	{r7}
 80020d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020d6:	bf00      	nop
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr

080020e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020e4:	f005 feb0 	bl	8007e48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020e8:	bf00      	nop
 80020ea:	bd80      	pop	{r7, pc}

080020ec <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 80020ec:	b480      	push	{r7}
 80020ee:	af00      	add	r7, sp, #0

  /* USER CODE END ADC1_IRQn 0 */
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 80020f0:	bf00      	nop
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr
	...

080020fc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002100:	4b17      	ldr	r3, [pc, #92]	; (8002160 <SystemInit+0x64>)
 8002102:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002106:	4a16      	ldr	r2, [pc, #88]	; (8002160 <SystemInit+0x64>)
 8002108:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800210c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002110:	4b14      	ldr	r3, [pc, #80]	; (8002164 <SystemInit+0x68>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a13      	ldr	r2, [pc, #76]	; (8002164 <SystemInit+0x68>)
 8002116:	f043 0301 	orr.w	r3, r3, #1
 800211a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800211c:	4b11      	ldr	r3, [pc, #68]	; (8002164 <SystemInit+0x68>)
 800211e:	2200      	movs	r2, #0
 8002120:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8002122:	4b10      	ldr	r3, [pc, #64]	; (8002164 <SystemInit+0x68>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a0f      	ldr	r2, [pc, #60]	; (8002164 <SystemInit+0x68>)
 8002128:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800212c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8002130:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8002132:	4b0c      	ldr	r3, [pc, #48]	; (8002164 <SystemInit+0x68>)
 8002134:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002138:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800213a:	4b0a      	ldr	r3, [pc, #40]	; (8002164 <SystemInit+0x68>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a09      	ldr	r2, [pc, #36]	; (8002164 <SystemInit+0x68>)
 8002140:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002144:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8002146:	4b07      	ldr	r3, [pc, #28]	; (8002164 <SystemInit+0x68>)
 8002148:	2200      	movs	r2, #0
 800214a:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800214c:	4b04      	ldr	r3, [pc, #16]	; (8002160 <SystemInit+0x64>)
 800214e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002152:	609a      	str	r2, [r3, #8]
#endif
}
 8002154:	bf00      	nop
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr
 800215e:	bf00      	nop
 8002160:	e000ed00 	.word	0xe000ed00
 8002164:	40021000 	.word	0x40021000

08002168 <ds18b20_init>:
#include<ds18b20/ds18b20.h>

ds18b20* ds18b20_init(GPIO_TypeDef* port, uint16_t pin){
 8002168:	b580      	push	{r7, lr}
 800216a:	b084      	sub	sp, #16
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	460b      	mov	r3, r1
 8002172:	807b      	strh	r3, [r7, #2]
	ds18b20* result = (ds18b20*) malloc(sizeof(ds18b20));
 8002174:	2006      	movs	r0, #6
 8002176:	f008 ff13 	bl	800afa0 <malloc>
 800217a:	4603      	mov	r3, r0
 800217c:	60fb      	str	r3, [r7, #12]
	result->port = port;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	687a      	ldr	r2, [r7, #4]
 8002182:	601a      	str	r2, [r3, #0]
	result->pin = pin;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	887a      	ldrh	r2, [r7, #2]
 8002188:	809a      	strh	r2, [r3, #4]
	return result;
 800218a:	68fb      	ldr	r3, [r7, #12]
}
 800218c:	4618      	mov	r0, r3
 800218e:	3710      	adds	r7, #16
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}

08002194 <dsb18b20_is_presence>:
	if( ds18b20 == NULL ) return;
	free(ds18b20);
	ds18b20 = NULL;
}

uint8_t dsb18b20_is_presence(ds18b20* ds18b20){
 8002194:	b580      	push	{r7, lr}
 8002196:	b084      	sub	sp, #16
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
	if( ds18b20 == NULL ) return 0;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d101      	bne.n	80021a6 <dsb18b20_is_presence+0x12>
 80021a2:	2300      	movs	r3, #0
 80021a4:	e036      	b.n	8002214 <dsb18b20_is_presence+0x80>

	stm32_util_set_pin_output(ds18b20->port, ds18b20->pin);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	889b      	ldrh	r3, [r3, #4]
 80021ae:	b29b      	uxth	r3, r3
 80021b0:	4619      	mov	r1, r3
 80021b2:	4610      	mov	r0, r2
 80021b4:	f005 fcbe 	bl	8007b34 <stm32_util_set_pin_output>
	HAL_GPIO_WritePin(ds18b20->port, ds18b20->pin, 0);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6818      	ldr	r0, [r3, #0]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	889b      	ldrh	r3, [r3, #4]
 80021c0:	b29b      	uxth	r3, r3
 80021c2:	2200      	movs	r2, #0
 80021c4:	4619      	mov	r1, r3
 80021c6:	f006 f923 	bl	8008410 <HAL_GPIO_WritePin>
	stm32_util_delay_in_microseconds(480);
 80021ca:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 80021ce:	f005 fcfd 	bl	8007bcc <stm32_util_delay_in_microseconds>
	stm32_util_set_pin_input(ds18b20->port, ds18b20->pin);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	889b      	ldrh	r3, [r3, #4]
 80021da:	b29b      	uxth	r3, r3
 80021dc:	4619      	mov	r1, r3
 80021de:	4610      	mov	r0, r2
 80021e0:	f005 fcc6 	bl	8007b70 <stm32_util_set_pin_input>
	stm32_util_delay_in_microseconds(80);
 80021e4:	2050      	movs	r0, #80	; 0x50
 80021e6:	f005 fcf1 	bl	8007bcc <stm32_util_delay_in_microseconds>

	uint8_t result = 0;
 80021ea:	2300      	movs	r3, #0
 80021ec:	73fb      	strb	r3, [r7, #15]
	if( ! HAL_GPIO_ReadPin(ds18b20->port, ds18b20->pin) ) result = 1;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	889b      	ldrh	r3, [r3, #4]
 80021f6:	b29b      	uxth	r3, r3
 80021f8:	4619      	mov	r1, r3
 80021fa:	4610      	mov	r0, r2
 80021fc:	f006 f8f0 	bl	80083e0 <HAL_GPIO_ReadPin>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d101      	bne.n	800220a <dsb18b20_is_presence+0x76>
 8002206:	2301      	movs	r3, #1
 8002208:	73fb      	strb	r3, [r7, #15]
	stm32_util_delay_in_microseconds(400);
 800220a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800220e:	f005 fcdd 	bl	8007bcc <stm32_util_delay_in_microseconds>
	return result;
 8002212:	7bfb      	ldrb	r3, [r7, #15]

}
 8002214:	4618      	mov	r0, r3
 8002216:	3710      	adds	r7, #16
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}

0800221c <ds18b20_write>:

void ds18b20_write(ds18b20* ds18b20, uint8_t data){
 800221c:	b580      	push	{r7, lr}
 800221e:	b084      	sub	sp, #16
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
 8002224:	460b      	mov	r3, r1
 8002226:	70fb      	strb	r3, [r7, #3]
	if( ds18b20 == NULL ) return;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d05a      	beq.n	80022e4 <ds18b20_write+0xc8>

	stm32_util_set_pin_output(ds18b20->port, ds18b20->pin);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	889b      	ldrh	r3, [r3, #4]
 8002236:	b29b      	uxth	r3, r3
 8002238:	4619      	mov	r1, r3
 800223a:	4610      	mov	r0, r2
 800223c:	f005 fc7a 	bl	8007b34 <stm32_util_set_pin_output>
	for (int i=0; i<8; i++){
 8002240:	2300      	movs	r3, #0
 8002242:	60fb      	str	r3, [r7, #12]
 8002244:	e04a      	b.n	80022dc <ds18b20_write+0xc0>
		if ( (data & (1<<i)) != 0 ){
 8002246:	78fa      	ldrb	r2, [r7, #3]
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	fa42 f303 	asr.w	r3, r2, r3
 800224e:	f003 0301 	and.w	r3, r3, #1
 8002252:	2b00      	cmp	r3, #0
 8002254:	d021      	beq.n	800229a <ds18b20_write+0x7e>
			stm32_util_set_pin_output(ds18b20->port, ds18b20->pin);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	889b      	ldrh	r3, [r3, #4]
 800225e:	b29b      	uxth	r3, r3
 8002260:	4619      	mov	r1, r3
 8002262:	4610      	mov	r0, r2
 8002264:	f005 fc66 	bl	8007b34 <stm32_util_set_pin_output>
			HAL_GPIO_WritePin(ds18b20->port, ds18b20->pin, 0);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6818      	ldr	r0, [r3, #0]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	889b      	ldrh	r3, [r3, #4]
 8002270:	b29b      	uxth	r3, r3
 8002272:	2200      	movs	r2, #0
 8002274:	4619      	mov	r1, r3
 8002276:	f006 f8cb 	bl	8008410 <HAL_GPIO_WritePin>
			stm32_util_delay_in_microseconds(1);
 800227a:	2001      	movs	r0, #1
 800227c:	f005 fca6 	bl	8007bcc <stm32_util_delay_in_microseconds>
			stm32_util_set_pin_input(ds18b20->port, ds18b20->pin);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	889b      	ldrh	r3, [r3, #4]
 8002288:	b29b      	uxth	r3, r3
 800228a:	4619      	mov	r1, r3
 800228c:	4610      	mov	r0, r2
 800228e:	f005 fc6f 	bl	8007b70 <stm32_util_set_pin_input>
			stm32_util_delay_in_microseconds(50);
 8002292:	2032      	movs	r0, #50	; 0x32
 8002294:	f005 fc9a 	bl	8007bcc <stm32_util_delay_in_microseconds>
 8002298:	e01d      	b.n	80022d6 <ds18b20_write+0xba>
		} else {
			stm32_util_set_pin_output(ds18b20->port, ds18b20->pin);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	889b      	ldrh	r3, [r3, #4]
 80022a2:	b29b      	uxth	r3, r3
 80022a4:	4619      	mov	r1, r3
 80022a6:	4610      	mov	r0, r2
 80022a8:	f005 fc44 	bl	8007b34 <stm32_util_set_pin_output>
			HAL_GPIO_WritePin(ds18b20->port, ds18b20->pin, 0);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6818      	ldr	r0, [r3, #0]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	889b      	ldrh	r3, [r3, #4]
 80022b4:	b29b      	uxth	r3, r3
 80022b6:	2200      	movs	r2, #0
 80022b8:	4619      	mov	r1, r3
 80022ba:	f006 f8a9 	bl	8008410 <HAL_GPIO_WritePin>
			stm32_util_delay_in_microseconds(50);
 80022be:	2032      	movs	r0, #50	; 0x32
 80022c0:	f005 fc84 	bl	8007bcc <stm32_util_delay_in_microseconds>
			stm32_util_set_pin_input(ds18b20->port, ds18b20->pin);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	889b      	ldrh	r3, [r3, #4]
 80022cc:	b29b      	uxth	r3, r3
 80022ce:	4619      	mov	r1, r3
 80022d0:	4610      	mov	r0, r2
 80022d2:	f005 fc4d 	bl	8007b70 <stm32_util_set_pin_input>
	for (int i=0; i<8; i++){
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	3301      	adds	r3, #1
 80022da:	60fb      	str	r3, [r7, #12]
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	2b07      	cmp	r3, #7
 80022e0:	ddb1      	ble.n	8002246 <ds18b20_write+0x2a>
 80022e2:	e000      	b.n	80022e6 <ds18b20_write+0xca>
	if( ds18b20 == NULL ) return;
 80022e4:	bf00      	nop
		}
	}
}
 80022e6:	3710      	adds	r7, #16
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}

080022ec <ds18b20_read>:

float ds18b20_read(ds18b20* ds18b20){
 80022ec:	b5b0      	push	{r4, r5, r7, lr}
 80022ee:	b084      	sub	sp, #16
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
	if( ds18b20 == NULL ) return 0;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d102      	bne.n	8002300 <ds18b20_read+0x14>
 80022fa:	f04f 0300 	mov.w	r3, #0
 80022fe:	e089      	b.n	8002414 <ds18b20_read+0x128>

	dsb18b20_is_presence(ds18b20);
 8002300:	6878      	ldr	r0, [r7, #4]
 8002302:	f7ff ff47 	bl	8002194 <dsb18b20_is_presence>
	stm32_util_delay_in_milliseconds(1);
 8002306:	2001      	movs	r0, #1
 8002308:	f005 fc6b 	bl	8007be2 <stm32_util_delay_in_milliseconds>
	ds18b20_write(ds18b20, 0xCC);
 800230c:	21cc      	movs	r1, #204	; 0xcc
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	f7ff ff84 	bl	800221c <ds18b20_write>
	ds18b20_write(ds18b20, 0x44);
 8002314:	2144      	movs	r1, #68	; 0x44
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	f7ff ff80 	bl	800221c <ds18b20_write>
	stm32_util_delay_in_milliseconds(800);
 800231c:	f44f 7048 	mov.w	r0, #800	; 0x320
 8002320:	f005 fc5f 	bl	8007be2 <stm32_util_delay_in_milliseconds>

	dsb18b20_is_presence(ds18b20);
 8002324:	6878      	ldr	r0, [r7, #4]
 8002326:	f7ff ff35 	bl	8002194 <dsb18b20_is_presence>
	stm32_util_delay_in_milliseconds(1);
 800232a:	2001      	movs	r0, #1
 800232c:	f005 fc59 	bl	8007be2 <stm32_util_delay_in_milliseconds>
	ds18b20_write(ds18b20, 0xCC);
 8002330:	21cc      	movs	r1, #204	; 0xcc
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	f7ff ff72 	bl	800221c <ds18b20_write>
	ds18b20_write(ds18b20, 0xBE);
 8002338:	21be      	movs	r1, #190	; 0xbe
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	f7ff ff6e 	bl	800221c <ds18b20_write>

	uint8_t value[] = {0,0};
 8002340:	2300      	movs	r3, #0
 8002342:	723b      	strb	r3, [r7, #8]
 8002344:	2300      	movs	r3, #0
 8002346:	727b      	strb	r3, [r7, #9]
	for(register int j = 0; j < 2; j++){
 8002348:	2400      	movs	r4, #0
 800234a:	e04c      	b.n	80023e6 <ds18b20_read+0xfa>
		stm32_util_set_pin_input(ds18b20->port, ds18b20->pin);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	889b      	ldrh	r3, [r3, #4]
 8002354:	b29b      	uxth	r3, r3
 8002356:	4619      	mov	r1, r3
 8002358:	4610      	mov	r0, r2
 800235a:	f005 fc09 	bl	8007b70 <stm32_util_set_pin_input>
		for (register int i=0; i < 8; i++){
 800235e:	2500      	movs	r5, #0
 8002360:	e03e      	b.n	80023e0 <ds18b20_read+0xf4>
			stm32_util_set_pin_output(ds18b20->port, ds18b20->pin);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	889b      	ldrh	r3, [r3, #4]
 800236a:	b29b      	uxth	r3, r3
 800236c:	4619      	mov	r1, r3
 800236e:	4610      	mov	r0, r2
 8002370:	f005 fbe0 	bl	8007b34 <stm32_util_set_pin_output>
			HAL_GPIO_WritePin(ds18b20->port, ds18b20->pin, 0);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6818      	ldr	r0, [r3, #0]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	889b      	ldrh	r3, [r3, #4]
 800237c:	b29b      	uxth	r3, r3
 800237e:	2200      	movs	r2, #0
 8002380:	4619      	mov	r1, r3
 8002382:	f006 f845 	bl	8008410 <HAL_GPIO_WritePin>
			stm32_util_delay_in_microseconds(1);
 8002386:	2001      	movs	r0, #1
 8002388:	f005 fc20 	bl	8007bcc <stm32_util_delay_in_microseconds>
			stm32_util_set_pin_input(ds18b20->port, ds18b20->pin);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	889b      	ldrh	r3, [r3, #4]
 8002394:	b29b      	uxth	r3, r3
 8002396:	4619      	mov	r1, r3
 8002398:	4610      	mov	r0, r2
 800239a:	f005 fbe9 	bl	8007b70 <stm32_util_set_pin_input>
			if (HAL_GPIO_ReadPin(ds18b20->port, ds18b20->pin)) value[j] |= 1<<i;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	889b      	ldrh	r3, [r3, #4]
 80023a6:	b29b      	uxth	r3, r3
 80023a8:	4619      	mov	r1, r3
 80023aa:	4610      	mov	r0, r2
 80023ac:	f006 f818 	bl	80083e0 <HAL_GPIO_ReadPin>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d010      	beq.n	80023d8 <ds18b20_read+0xec>
 80023b6:	f107 0310 	add.w	r3, r7, #16
 80023ba:	4423      	add	r3, r4
 80023bc:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 80023c0:	b25a      	sxtb	r2, r3
 80023c2:	2301      	movs	r3, #1
 80023c4:	40ab      	lsls	r3, r5
 80023c6:	b25b      	sxtb	r3, r3
 80023c8:	4313      	orrs	r3, r2
 80023ca:	b25b      	sxtb	r3, r3
 80023cc:	b2da      	uxtb	r2, r3
 80023ce:	f107 0310 	add.w	r3, r7, #16
 80023d2:	4423      	add	r3, r4
 80023d4:	f803 2c08 	strb.w	r2, [r3, #-8]
			stm32_util_delay_in_microseconds(50);
 80023d8:	2032      	movs	r0, #50	; 0x32
 80023da:	f005 fbf7 	bl	8007bcc <stm32_util_delay_in_microseconds>
		for (register int i=0; i < 8; i++){
 80023de:	3501      	adds	r5, #1
 80023e0:	2d07      	cmp	r5, #7
 80023e2:	ddbe      	ble.n	8002362 <ds18b20_read+0x76>
	for(register int j = 0; j < 2; j++){
 80023e4:	3401      	adds	r4, #1
 80023e6:	2c01      	cmp	r4, #1
 80023e8:	ddb0      	ble.n	800234c <ds18b20_read+0x60>
		}
	}
	float result =  ( (value[1] << 8) | value[0] ) / 16.0;
 80023ea:	7a7b      	ldrb	r3, [r7, #9]
 80023ec:	021b      	lsls	r3, r3, #8
 80023ee:	7a3a      	ldrb	r2, [r7, #8]
 80023f0:	4313      	orrs	r3, r2
 80023f2:	4618      	mov	r0, r3
 80023f4:	f7fe f8a6 	bl	8000544 <__aeabi_i2d>
 80023f8:	f04f 0200 	mov.w	r2, #0
 80023fc:	4b09      	ldr	r3, [pc, #36]	; (8002424 <ds18b20_read+0x138>)
 80023fe:	f7fe fa35 	bl	800086c <__aeabi_ddiv>
 8002402:	4603      	mov	r3, r0
 8002404:	460c      	mov	r4, r1
 8002406:	4618      	mov	r0, r3
 8002408:	4621      	mov	r1, r4
 800240a:	f7fe fbfd 	bl	8000c08 <__aeabi_d2f>
 800240e:	4603      	mov	r3, r0
 8002410:	60fb      	str	r3, [r7, #12]
	return result;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	ee07 3a90 	vmov	s15, r3
}
 8002418:	eeb0 0a67 	vmov.f32	s0, s15
 800241c:	3710      	adds	r7, #16
 800241e:	46bd      	mov	sp, r7
 8002420:	bdb0      	pop	{r4, r5, r7, pc}
 8002422:	bf00      	nop
 8002424:	40300000 	.word	0x40300000

08002428 <at_init>:
uint8_t at_rx_cbuf_area[AT_CBUF_MAX];
ceb_cbuf_t at_cb;
at_cmd_t cmd;
volatile bool at_started = false;

bool at_init(void) {
 8002428:	b580      	push	{r7, lr}
 800242a:	af00      	add	r7, sp, #0
    if(ceb_cbuf_init(&at_cb, at_rx_cbuf_area, AT_CBUF_MAX) == CEB_CBUF_OK)
 800242c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002430:	4907      	ldr	r1, [pc, #28]	; (8002450 <at_init+0x28>)
 8002432:	4808      	ldr	r0, [pc, #32]	; (8002454 <at_init+0x2c>)
 8002434:	f000 fbaa 	bl	8002b8c <ceb_cbuf_init>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d102      	bne.n	8002444 <at_init+0x1c>
    	at_started = true;
 800243e:	4b06      	ldr	r3, [pc, #24]	; (8002458 <at_init+0x30>)
 8002440:	2201      	movs	r2, #1
 8002442:	701a      	strb	r2, [r3, #0]

    return at_started;
 8002444:	4b04      	ldr	r3, [pc, #16]	; (8002458 <at_init+0x30>)
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	b2db      	uxtb	r3, r3
}   
 800244a:	4618      	mov	r0, r3
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	20000c5c 	.word	0x20000c5c
 8002454:	20000c50 	.word	0x20000c50
 8002458:	20000af0 	.word	0x20000af0

0800245c <at_send_cmd_blocking>:

ceb_cbuf_t* at_get_cbuf(void){
    return &at_cb;
}

at_status_t at_send_cmd_blocking(at_cmd_t* cmd, uint32_t tmrout_ms){
 800245c:	b5b0      	push	{r4, r5, r7, lr}
 800245e:	b0aa      	sub	sp, #168	; 0xa8
 8002460:	af04      	add	r7, sp, #16
 8002462:	6078      	str	r0, [r7, #4]
 8002464:	6039      	str	r1, [r7, #0]
    if(cmd->id >= AT_CMD_NONE)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	781b      	ldrb	r3, [r3, #0]
 800246a:	2b13      	cmp	r3, #19
 800246c:	d901      	bls.n	8002472 <at_send_cmd_blocking+0x16>
        return AT_STATUS_INVAL_CMD;
 800246e:	2303      	movs	r3, #3
 8002470:	e366      	b.n	8002b40 <at_send_cmd_blocking+0x6e4>

    // AT, if any
    hw_serial_tx(at_at, strlen((const char*)at_at));
 8002472:	4bb1      	ldr	r3, [pc, #708]	; (8002738 <at_send_cmd_blocking+0x2dc>)
 8002474:	681c      	ldr	r4, [r3, #0]
 8002476:	4bb0      	ldr	r3, [pc, #704]	; (8002738 <at_send_cmd_blocking+0x2dc>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4618      	mov	r0, r3
 800247c:	f7fd feb2 	bl	80001e4 <strlen>
 8002480:	4603      	mov	r3, r0
 8002482:	b29b      	uxth	r3, r3
 8002484:	4619      	mov	r1, r3
 8002486:	4620      	mov	r0, r4
 8002488:	f000 ff20 	bl	80032cc <hw_serial_tx>

    // base command name
    hw_serial_tx(at_cmd_basename_str[cmd->id], strlen((const char*)at_cmd_basename_str[cmd->id]));
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	781b      	ldrb	r3, [r3, #0]
 8002490:	461a      	mov	r2, r3
 8002492:	4baa      	ldr	r3, [pc, #680]	; (800273c <at_send_cmd_blocking+0x2e0>)
 8002494:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	461a      	mov	r2, r3
 800249e:	4ba7      	ldr	r3, [pc, #668]	; (800273c <at_send_cmd_blocking+0x2e0>)
 80024a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024a4:	4618      	mov	r0, r3
 80024a6:	f7fd fe9d 	bl	80001e4 <strlen>
 80024aa:	4603      	mov	r3, r0
 80024ac:	b29b      	uxth	r3, r3
 80024ae:	4619      	mov	r1, r3
 80024b0:	4620      	mov	r0, r4
 80024b2:	f000 ff0b 	bl	80032cc <hw_serial_tx>

    // parameters, if any
    switch(cmd->id){
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	781b      	ldrb	r3, [r3, #0]
 80024ba:	3b02      	subs	r3, #2
 80024bc:	2b11      	cmp	r3, #17
 80024be:	f200 82ce 	bhi.w	8002a5e <at_send_cmd_blocking+0x602>
 80024c2:	a201      	add	r2, pc, #4	; (adr r2, 80024c8 <at_send_cmd_blocking+0x6c>)
 80024c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024c8:	0800257d 	.word	0x0800257d
 80024cc:	08002599 	.word	0x08002599
 80024d0:	08002511 	.word	0x08002511
 80024d4:	08002a5f 	.word	0x08002a5f
 80024d8:	080025bd 	.word	0x080025bd
 80024dc:	08002613 	.word	0x08002613
 80024e0:	080026c1 	.word	0x080026c1
 80024e4:	08002645 	.word	0x08002645
 80024e8:	08002759 	.word	0x08002759
 80024ec:	080027eb 	.word	0x080027eb
 80024f0:	0800281f 	.word	0x0800281f
 80024f4:	08002535 	.word	0x08002535
 80024f8:	08002887 	.word	0x08002887
 80024fc:	080029e5 	.word	0x080029e5
 8002500:	08002983 	.word	0x08002983
 8002504:	08002853 	.word	0x08002853
 8002508:	08002559 	.word	0x08002559
 800250c:	08002a13 	.word	0x08002a13
        case AT_CMD_WIFI_AP_MODE: {
            uint8_t mode = '0' + cmd->payload.wifi_mode.ap_station;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	785b      	ldrb	r3, [r3, #1]
 8002514:	3330      	adds	r3, #48	; 0x30
 8002516:	b2db      	uxtb	r3, r3
 8002518:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
            hw_serial_tx((uint8_t *)"=", 1);
 800251c:	2101      	movs	r1, #1
 800251e:	4888      	ldr	r0, [pc, #544]	; (8002740 <at_send_cmd_blocking+0x2e4>)
 8002520:	f000 fed4 	bl	80032cc <hw_serial_tx>
            hw_serial_tx(&mode, 1);
 8002524:	f107 0393 	add.w	r3, r7, #147	; 0x93
 8002528:	2101      	movs	r1, #1
 800252a:	4618      	mov	r0, r3
 800252c:	f000 fece 	bl	80032cc <hw_serial_tx>
            break;
 8002530:	bf00      	nop
 8002532:	e2ae      	b.n	8002a92 <at_send_cmd_blocking+0x636>
        }

        case AT_CMD_CON_MUX: {
            uint8_t mode = '0' + cmd->payload.mux.enabled;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	785b      	ldrb	r3, [r3, #1]
 8002538:	3330      	adds	r3, #48	; 0x30
 800253a:	b2db      	uxtb	r3, r3
 800253c:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
            hw_serial_tx((uint8_t *)"=", 1);
 8002540:	2101      	movs	r1, #1
 8002542:	487f      	ldr	r0, [pc, #508]	; (8002740 <at_send_cmd_blocking+0x2e4>)
 8002544:	f000 fec2 	bl	80032cc <hw_serial_tx>
            hw_serial_tx(&mode, 1);
 8002548:	f107 0392 	add.w	r3, r7, #146	; 0x92
 800254c:	2101      	movs	r1, #1
 800254e:	4618      	mov	r0, r3
 8002550:	f000 febc 	bl	80032cc <hw_serial_tx>
            break;
 8002554:	bf00      	nop
 8002556:	e29c      	b.n	8002a92 <at_send_cmd_blocking+0x636>
        }

        case AT_CMD_CON_MODE: {
            uint8_t mode = '0' + cmd->payload.con_mode.mode;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	785b      	ldrb	r3, [r3, #1]
 800255c:	3330      	adds	r3, #48	; 0x30
 800255e:	b2db      	uxtb	r3, r3
 8002560:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91
            hw_serial_tx((uint8_t *)"=", 1);
 8002564:	2101      	movs	r1, #1
 8002566:	4876      	ldr	r0, [pc, #472]	; (8002740 <at_send_cmd_blocking+0x2e4>)
 8002568:	f000 feb0 	bl	80032cc <hw_serial_tx>
            hw_serial_tx(&mode, 1);
 800256c:	f107 0391 	add.w	r3, r7, #145	; 0x91
 8002570:	2101      	movs	r1, #1
 8002572:	4618      	mov	r0, r3
 8002574:	f000 feaa 	bl	80032cc <hw_serial_tx>
            break;            
 8002578:	bf00      	nop
 800257a:	e28a      	b.n	8002a92 <at_send_cmd_blocking+0x636>
        }

        case AT_CMD_ECHO: {
            uint8_t mode = '0' + cmd->payload.echo.enabled;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	785b      	ldrb	r3, [r3, #1]
 8002580:	3330      	adds	r3, #48	; 0x30
 8002582:	b2db      	uxtb	r3, r3
 8002584:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
            hw_serial_tx(&mode, 1);
 8002588:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800258c:	2101      	movs	r1, #1
 800258e:	4618      	mov	r0, r3
 8002590:	f000 fe9c 	bl	80032cc <hw_serial_tx>
            break;                        
 8002594:	bf00      	nop
 8002596:	e27c      	b.n	8002a92 <at_send_cmd_blocking+0x636>
        }

        case AT_CMD_WIFI_AUTO_CON: {
            uint8_t enabled = '0' + cmd->payload.wifi_autocon.enabled;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	785b      	ldrb	r3, [r3, #1]
 800259c:	3330      	adds	r3, #48	; 0x30
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            hw_serial_tx((uint8_t *)"=", 1);
 80025a4:	2101      	movs	r1, #1
 80025a6:	4866      	ldr	r0, [pc, #408]	; (8002740 <at_send_cmd_blocking+0x2e4>)
 80025a8:	f000 fe90 	bl	80032cc <hw_serial_tx>
            hw_serial_tx(&enabled, 1);
 80025ac:	f107 038f 	add.w	r3, r7, #143	; 0x8f
 80025b0:	2101      	movs	r1, #1
 80025b2:	4618      	mov	r0, r3
 80025b4:	f000 fe8a 	bl	80032cc <hw_serial_tx>
        	break;
 80025b8:	bf00      	nop
 80025ba:	e26a      	b.n	8002a92 <at_send_cmd_blocking+0x636>
        }

        case AT_CMD_WIFI_AP_SET: {
            hw_serial_tx((uint8_t *)"=\"", 2);
 80025bc:	2102      	movs	r1, #2
 80025be:	4861      	ldr	r0, [pc, #388]	; (8002744 <at_send_cmd_blocking+0x2e8>)
 80025c0:	f000 fe84 	bl	80032cc <hw_serial_tx>
            hw_serial_tx(cmd->payload.wifi_ap.ssid, strlen((char*)cmd->payload.wifi_ap.ssid));
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	f8d3 4001 	ldr.w	r4, [r3, #1]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	f8d3 3001 	ldr.w	r3, [r3, #1]
 80025d0:	4618      	mov	r0, r3
 80025d2:	f7fd fe07 	bl	80001e4 <strlen>
 80025d6:	4603      	mov	r3, r0
 80025d8:	b29b      	uxth	r3, r3
 80025da:	4619      	mov	r1, r3
 80025dc:	4620      	mov	r0, r4
 80025de:	f000 fe75 	bl	80032cc <hw_serial_tx>
            hw_serial_tx((uint8_t *)"\",\"", 3);
 80025e2:	2103      	movs	r1, #3
 80025e4:	4858      	ldr	r0, [pc, #352]	; (8002748 <at_send_cmd_blocking+0x2ec>)
 80025e6:	f000 fe71 	bl	80032cc <hw_serial_tx>
            hw_serial_tx(cmd->payload.wifi_ap.pwd, strlen((char*)cmd->payload.wifi_ap.pwd));
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	f8d3 4005 	ldr.w	r4, [r3, #5]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	f8d3 3005 	ldr.w	r3, [r3, #5]
 80025f6:	4618      	mov	r0, r3
 80025f8:	f7fd fdf4 	bl	80001e4 <strlen>
 80025fc:	4603      	mov	r3, r0
 80025fe:	b29b      	uxth	r3, r3
 8002600:	4619      	mov	r1, r3
 8002602:	4620      	mov	r0, r4
 8002604:	f000 fe62 	bl	80032cc <hw_serial_tx>
            hw_serial_tx((uint8_t *)"\"", 1);
 8002608:	2101      	movs	r1, #1
 800260a:	4850      	ldr	r0, [pc, #320]	; (800274c <at_send_cmd_blocking+0x2f0>)
 800260c:	f000 fe5e 	bl	80032cc <hw_serial_tx>
            break;
 8002610:	e23f      	b.n	8002a92 <at_send_cmd_blocking+0x636>
        }

        case AT_CMD_WIFI_AP_DHCP: {
            uint8_t val[10];
            sprintf((char*)val, "=%d,%d", cmd->payload.wifi_dhcp.ap_station, cmd->payload.wifi_dhcp.enabled);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	785b      	ldrb	r3, [r3, #1]
 8002616:	461a      	mov	r2, r3
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	789b      	ldrb	r3, [r3, #2]
 800261c:	f107 0084 	add.w	r0, r7, #132	; 0x84
 8002620:	494b      	ldr	r1, [pc, #300]	; (8002750 <at_send_cmd_blocking+0x2f4>)
 8002622:	f008 ff27 	bl	800b474 <sprintf>
            hw_serial_tx(val, strlen((char*)val));
 8002626:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800262a:	4618      	mov	r0, r3
 800262c:	f7fd fdda 	bl	80001e4 <strlen>
 8002630:	4603      	mov	r3, r0
 8002632:	b29a      	uxth	r2, r3
 8002634:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002638:	4611      	mov	r1, r2
 800263a:	4618      	mov	r0, r3
 800263c:	f000 fe46 	bl	80032cc <hw_serial_tx>
            break;
 8002640:	bf00      	nop
 8002642:	e226      	b.n	8002a92 <at_send_cmd_blocking+0x636>
        }

        case AT_CMD_WIFI_AP_NET_CFG: {
            hw_serial_tx((uint8_t *)"=\"", 2);
 8002644:	2102      	movs	r1, #2
 8002646:	483f      	ldr	r0, [pc, #252]	; (8002744 <at_send_cmd_blocking+0x2e8>)
 8002648:	f000 fe40 	bl	80032cc <hw_serial_tx>
            hw_serial_tx(cmd->payload.wifi_net_cfg.ip, strlen((char*)cmd->payload.wifi_net_cfg.ip));
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	f8d3 4001 	ldr.w	r4, [r3, #1]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8002658:	4618      	mov	r0, r3
 800265a:	f7fd fdc3 	bl	80001e4 <strlen>
 800265e:	4603      	mov	r3, r0
 8002660:	b29b      	uxth	r3, r3
 8002662:	4619      	mov	r1, r3
 8002664:	4620      	mov	r0, r4
 8002666:	f000 fe31 	bl	80032cc <hw_serial_tx>
            hw_serial_tx((uint8_t *)"\",\"", 3);
 800266a:	2103      	movs	r1, #3
 800266c:	4836      	ldr	r0, [pc, #216]	; (8002748 <at_send_cmd_blocking+0x2ec>)
 800266e:	f000 fe2d 	bl	80032cc <hw_serial_tx>
            hw_serial_tx(cmd->payload.wifi_net_cfg.gateway, strlen((char*)cmd->payload.wifi_net_cfg.gateway));
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	f8d3 4005 	ldr.w	r4, [r3, #5]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	f8d3 3005 	ldr.w	r3, [r3, #5]
 800267e:	4618      	mov	r0, r3
 8002680:	f7fd fdb0 	bl	80001e4 <strlen>
 8002684:	4603      	mov	r3, r0
 8002686:	b29b      	uxth	r3, r3
 8002688:	4619      	mov	r1, r3
 800268a:	4620      	mov	r0, r4
 800268c:	f000 fe1e 	bl	80032cc <hw_serial_tx>
            hw_serial_tx((uint8_t *)"\",\"", 3);
 8002690:	2103      	movs	r1, #3
 8002692:	482d      	ldr	r0, [pc, #180]	; (8002748 <at_send_cmd_blocking+0x2ec>)
 8002694:	f000 fe1a 	bl	80032cc <hw_serial_tx>
            hw_serial_tx(cmd->payload.wifi_net_cfg.mask, strlen((char*)cmd->payload.wifi_net_cfg.mask));
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	f8d3 4009 	ldr.w	r4, [r3, #9]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	f8d3 3009 	ldr.w	r3, [r3, #9]
 80026a4:	4618      	mov	r0, r3
 80026a6:	f7fd fd9d 	bl	80001e4 <strlen>
 80026aa:	4603      	mov	r3, r0
 80026ac:	b29b      	uxth	r3, r3
 80026ae:	4619      	mov	r1, r3
 80026b0:	4620      	mov	r0, r4
 80026b2:	f000 fe0b 	bl	80032cc <hw_serial_tx>
            hw_serial_tx((uint8_t *)"\"", 1);
 80026b6:	2101      	movs	r1, #1
 80026b8:	4824      	ldr	r0, [pc, #144]	; (800274c <at_send_cmd_blocking+0x2f0>)
 80026ba:	f000 fe07 	bl	80032cc <hw_serial_tx>
            break;
 80026be:	e1e8      	b.n	8002a92 <at_send_cmd_blocking+0x636>
        }

        case AT_CMD_WIFI_AP_DHCP_CFG: {
            uint8_t val[10];
            sprintf((char *)val, "=%d,%d,\"", cmd->payload.wifi_dhcp_cfg.enabled, cmd->payload.wifi_dhcp_cfg.lease_time_min);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	785b      	ldrb	r3, [r3, #1]
 80026c4:	461a      	mov	r2, r3
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	885b      	ldrh	r3, [r3, #2]
 80026ca:	b29b      	uxth	r3, r3
 80026cc:	f107 0078 	add.w	r0, r7, #120	; 0x78
 80026d0:	4920      	ldr	r1, [pc, #128]	; (8002754 <at_send_cmd_blocking+0x2f8>)
 80026d2:	f008 fecf 	bl	800b474 <sprintf>
            hw_serial_tx(val, strlen((char*)val));
 80026d6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80026da:	4618      	mov	r0, r3
 80026dc:	f7fd fd82 	bl	80001e4 <strlen>
 80026e0:	4603      	mov	r3, r0
 80026e2:	b29a      	uxth	r2, r3
 80026e4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80026e8:	4611      	mov	r1, r2
 80026ea:	4618      	mov	r0, r3
 80026ec:	f000 fdee 	bl	80032cc <hw_serial_tx>
            hw_serial_tx(cmd->payload.wifi_dhcp_cfg.ip_begin, strlen((char*)cmd->payload.wifi_dhcp_cfg.ip_begin));
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	685c      	ldr	r4, [r3, #4]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	4618      	mov	r0, r3
 80026fa:	f7fd fd73 	bl	80001e4 <strlen>
 80026fe:	4603      	mov	r3, r0
 8002700:	b29b      	uxth	r3, r3
 8002702:	4619      	mov	r1, r3
 8002704:	4620      	mov	r0, r4
 8002706:	f000 fde1 	bl	80032cc <hw_serial_tx>
            hw_serial_tx((uint8_t *)"\",\"", 3);
 800270a:	2103      	movs	r1, #3
 800270c:	480e      	ldr	r0, [pc, #56]	; (8002748 <at_send_cmd_blocking+0x2ec>)
 800270e:	f000 fddd 	bl	80032cc <hw_serial_tx>
            hw_serial_tx(cmd->payload.wifi_dhcp_cfg.ip_end, strlen((char*)cmd->payload.wifi_dhcp_cfg.ip_end));
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	689c      	ldr	r4, [r3, #8]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	4618      	mov	r0, r3
 800271c:	f7fd fd62 	bl	80001e4 <strlen>
 8002720:	4603      	mov	r3, r0
 8002722:	b29b      	uxth	r3, r3
 8002724:	4619      	mov	r1, r3
 8002726:	4620      	mov	r0, r4
 8002728:	f000 fdd0 	bl	80032cc <hw_serial_tx>
            hw_serial_tx((uint8_t *)"\"", 1);
 800272c:	2101      	movs	r1, #1
 800272e:	4807      	ldr	r0, [pc, #28]	; (800274c <at_send_cmd_blocking+0x2f0>)
 8002730:	f000 fdcc 	bl	80032cc <hw_serial_tx>
            break;
 8002734:	bf00      	nop
 8002736:	e1ac      	b.n	8002a92 <at_send_cmd_blocking+0x636>
 8002738:	200000d8 	.word	0x200000d8
 800273c:	20000074 	.word	0x20000074
 8002740:	0800ff70 	.word	0x0800ff70
 8002744:	0800ff74 	.word	0x0800ff74
 8002748:	0800ff78 	.word	0x0800ff78
 800274c:	0800ff7c 	.word	0x0800ff7c
 8002750:	0800ff80 	.word	0x0800ff80
 8002754:	0800ff88 	.word	0x0800ff88
        }
        case AT_CMD_WIFI_AP_SECURITY: {
            uint8_t val[16];
            hw_serial_tx((uint8_t *)"=\"", 2);
 8002758:	2102      	movs	r1, #2
 800275a:	48c3      	ldr	r0, [pc, #780]	; (8002a68 <at_send_cmd_blocking+0x60c>)
 800275c:	f000 fdb6 	bl	80032cc <hw_serial_tx>
            hw_serial_tx(cmd->payload.wifi_security.ssid, strlen((char*)cmd->payload.wifi_security.ssid));
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	f8d3 4001 	ldr.w	r4, [r3, #1]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	f8d3 3001 	ldr.w	r3, [r3, #1]
 800276c:	4618      	mov	r0, r3
 800276e:	f7fd fd39 	bl	80001e4 <strlen>
 8002772:	4603      	mov	r3, r0
 8002774:	b29b      	uxth	r3, r3
 8002776:	4619      	mov	r1, r3
 8002778:	4620      	mov	r0, r4
 800277a:	f000 fda7 	bl	80032cc <hw_serial_tx>
            hw_serial_tx((uint8_t *)"\",\"", 3);
 800277e:	2103      	movs	r1, #3
 8002780:	48ba      	ldr	r0, [pc, #744]	; (8002a6c <at_send_cmd_blocking+0x610>)
 8002782:	f000 fda3 	bl	80032cc <hw_serial_tx>
            hw_serial_tx(cmd->payload.wifi_security.pwd, strlen((char*)cmd->payload.wifi_security.pwd));
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	f8d3 4005 	ldr.w	r4, [r3, #5]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	f8d3 3005 	ldr.w	r3, [r3, #5]
 8002792:	4618      	mov	r0, r3
 8002794:	f7fd fd26 	bl	80001e4 <strlen>
 8002798:	4603      	mov	r3, r0
 800279a:	b29b      	uxth	r3, r3
 800279c:	4619      	mov	r1, r3
 800279e:	4620      	mov	r0, r4
 80027a0:	f000 fd94 	bl	80032cc <hw_serial_tx>
            sprintf((char*)val, "\",%d,%d,%d,%d", cmd->payload.wifi_security.channel, cmd->payload.wifi_security.crypto, cmd->payload.wifi_security.max_conn, cmd->payload.wifi_security.ssid_hidden);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	7a5b      	ldrb	r3, [r3, #9]
 80027a8:	4619      	mov	r1, r3
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	7a9b      	ldrb	r3, [r3, #10]
 80027ae:	461c      	mov	r4, r3
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	7adb      	ldrb	r3, [r3, #11]
 80027b4:	461a      	mov	r2, r3
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	7b1b      	ldrb	r3, [r3, #12]
 80027ba:	f107 0068 	add.w	r0, r7, #104	; 0x68
 80027be:	9301      	str	r3, [sp, #4]
 80027c0:	9200      	str	r2, [sp, #0]
 80027c2:	4623      	mov	r3, r4
 80027c4:	460a      	mov	r2, r1
 80027c6:	49aa      	ldr	r1, [pc, #680]	; (8002a70 <at_send_cmd_blocking+0x614>)
 80027c8:	f008 fe54 	bl	800b474 <sprintf>
            hw_serial_tx(val, strlen((char*)val));
 80027cc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80027d0:	4618      	mov	r0, r3
 80027d2:	f7fd fd07 	bl	80001e4 <strlen>
 80027d6:	4603      	mov	r3, r0
 80027d8:	b29a      	uxth	r2, r3
 80027da:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80027de:	4611      	mov	r1, r2
 80027e0:	4618      	mov	r0, r3
 80027e2:	f000 fd73 	bl	80032cc <hw_serial_tx>
            break;
 80027e6:	bf00      	nop
 80027e8:	e153      	b.n	8002a92 <at_send_cmd_blocking+0x636>
        }

        case AT_CMD_CON_SERVER: {
            uint8_t val[10];
            sprintf((char*)val,"=%d,%d", cmd->payload.con_server.create, cmd->payload.con_server.port);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	785b      	ldrb	r3, [r3, #1]
 80027ee:	461a      	mov	r2, r3
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	885b      	ldrh	r3, [r3, #2]
 80027f4:	b29b      	uxth	r3, r3
 80027f6:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 80027fa:	499e      	ldr	r1, [pc, #632]	; (8002a74 <at_send_cmd_blocking+0x618>)
 80027fc:	f008 fe3a 	bl	800b474 <sprintf>
            hw_serial_tx(val, strlen((char*)val));
 8002800:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002804:	4618      	mov	r0, r3
 8002806:	f7fd fced 	bl	80001e4 <strlen>
 800280a:	4603      	mov	r3, r0
 800280c:	b29a      	uxth	r2, r3
 800280e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002812:	4611      	mov	r1, r2
 8002814:	4618      	mov	r0, r3
 8002816:	f000 fd59 	bl	80032cc <hw_serial_tx>
            break;
 800281a:	bf00      	nop
 800281c:	e139      	b.n	8002a92 <at_send_cmd_blocking+0x636>
        }

        case AT_CMD_CON_SERVER_TMROUT: {
            uint8_t val[10];
            sprintf((char*)val, "=%d", cmd->payload.con_server_tmrout.timeout_s);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8002824:	b29b      	uxth	r3, r3
 8002826:	461a      	mov	r2, r3
 8002828:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800282c:	4992      	ldr	r1, [pc, #584]	; (8002a78 <at_send_cmd_blocking+0x61c>)
 800282e:	4618      	mov	r0, r3
 8002830:	f008 fe20 	bl	800b474 <sprintf>
            hw_serial_tx(val, strlen((char*)val));
 8002834:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002838:	4618      	mov	r0, r3
 800283a:	f7fd fcd3 	bl	80001e4 <strlen>
 800283e:	4603      	mov	r3, r0
 8002840:	b29a      	uxth	r2, r3
 8002842:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002846:	4611      	mov	r1, r2
 8002848:	4618      	mov	r0, r3
 800284a:	f000 fd3f 	bl	80032cc <hw_serial_tx>
            break;
 800284e:	bf00      	nop
 8002850:	e11f      	b.n	8002a92 <at_send_cmd_blocking+0x636>
        }

        case AT_CMD_SLL_BUFFER_SIZE: {
            uint8_t val[10];
            sprintf((char *)val, "=%d", cmd->payload.ssl_buffer.size);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8002858:	b29b      	uxth	r3, r3
 800285a:	461a      	mov	r2, r3
 800285c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002860:	4985      	ldr	r1, [pc, #532]	; (8002a78 <at_send_cmd_blocking+0x61c>)
 8002862:	4618      	mov	r0, r3
 8002864:	f008 fe06 	bl	800b474 <sprintf>
            hw_serial_tx(val, strlen((char*)val));
 8002868:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800286c:	4618      	mov	r0, r3
 800286e:	f7fd fcb9 	bl	80001e4 <strlen>
 8002872:	4603      	mov	r3, r0
 8002874:	b29a      	uxth	r2, r3
 8002876:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800287a:	4611      	mov	r1, r2
 800287c:	4618      	mov	r0, r3
 800287e:	f000 fd25 	bl	80032cc <hw_serial_tx>
            break;
 8002882:	bf00      	nop
 8002884:	e105      	b.n	8002a92 <at_send_cmd_blocking+0x636>
        }

        case AT_CMD_CON_START: {
            uint8_t val[10];
            if(cmd->payload.con_start.channel >= 0) {
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	f993 3009 	ldrsb.w	r3, [r3, #9]
 800288c:	2b00      	cmp	r3, #0
 800288e:	db17      	blt.n	80028c0 <at_send_cmd_blocking+0x464>
                sprintf((char *)val, "=%d,\"", cmd->payload.con_start.channel);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8002896:	461a      	mov	r2, r3
 8002898:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800289c:	4977      	ldr	r1, [pc, #476]	; (8002a7c <at_send_cmd_blocking+0x620>)
 800289e:	4618      	mov	r0, r3
 80028a0:	f008 fde8 	bl	800b474 <sprintf>
                hw_serial_tx(val,strlen((char*)val));
 80028a4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80028a8:	4618      	mov	r0, r3
 80028aa:	f7fd fc9b 	bl	80001e4 <strlen>
 80028ae:	4603      	mov	r3, r0
 80028b0:	b29a      	uxth	r2, r3
 80028b2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80028b6:	4611      	mov	r1, r2
 80028b8:	4618      	mov	r0, r3
 80028ba:	f000 fd07 	bl	80032cc <hw_serial_tx>
 80028be:	e003      	b.n	80028c8 <at_send_cmd_blocking+0x46c>
            }
            else hw_serial_tx((uint8_t *)"=\"", 2);
 80028c0:	2102      	movs	r1, #2
 80028c2:	4869      	ldr	r0, [pc, #420]	; (8002a68 <at_send_cmd_blocking+0x60c>)
 80028c4:	f000 fd02 	bl	80032cc <hw_serial_tx>
            
            hw_serial_tx(cmd->payload.con_start.transport, strlen((char*)cmd->payload.con_start.transport));
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	f8d3 4005 	ldr.w	r4, [r3, #5]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	f8d3 3005 	ldr.w	r3, [r3, #5]
 80028d4:	4618      	mov	r0, r3
 80028d6:	f7fd fc85 	bl	80001e4 <strlen>
 80028da:	4603      	mov	r3, r0
 80028dc:	b29b      	uxth	r3, r3
 80028de:	4619      	mov	r1, r3
 80028e0:	4620      	mov	r0, r4
 80028e2:	f000 fcf3 	bl	80032cc <hw_serial_tx>
            hw_serial_tx((uint8_t *)"\",\"", 3);
 80028e6:	2103      	movs	r1, #3
 80028e8:	4860      	ldr	r0, [pc, #384]	; (8002a6c <at_send_cmd_blocking+0x610>)
 80028ea:	f000 fcef 	bl	80032cc <hw_serial_tx>
            hw_serial_tx(cmd->payload.con_start.site, strlen((char*)cmd->payload.con_start.site));
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	f8d3 4001 	ldr.w	r4, [r3, #1]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	f8d3 3001 	ldr.w	r3, [r3, #1]
 80028fa:	4618      	mov	r0, r3
 80028fc:	f7fd fc72 	bl	80001e4 <strlen>
 8002900:	4603      	mov	r3, r0
 8002902:	b29b      	uxth	r3, r3
 8002904:	4619      	mov	r1, r3
 8002906:	4620      	mov	r0, r4
 8002908:	f000 fce0 	bl	80032cc <hw_serial_tx>
            sprintf((char*)val, "\",%d", cmd->payload.con_start.port);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	895b      	ldrh	r3, [r3, #10]
 8002910:	b29b      	uxth	r3, r3
 8002912:	461a      	mov	r2, r3
 8002914:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002918:	4959      	ldr	r1, [pc, #356]	; (8002a80 <at_send_cmd_blocking+0x624>)
 800291a:	4618      	mov	r0, r3
 800291c:	f008 fdaa 	bl	800b474 <sprintf>
            hw_serial_tx(val, strlen((char*)val));
 8002920:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002924:	4618      	mov	r0, r3
 8002926:	f7fd fc5d 	bl	80001e4 <strlen>
 800292a:	4603      	mov	r3, r0
 800292c:	b29a      	uxth	r2, r3
 800292e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002932:	4611      	mov	r1, r2
 8002934:	4618      	mov	r0, r3
 8002936:	f000 fcc9 	bl	80032cc <hw_serial_tx>

            if(strcmp((char*)cmd->payload.con_start.transport, "UDP") == 0) {
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	f8d3 3005 	ldr.w	r3, [r3, #5]
 8002940:	4950      	ldr	r1, [pc, #320]	; (8002a84 <at_send_cmd_blocking+0x628>)
 8002942:	4618      	mov	r0, r3
 8002944:	f7fd fc44 	bl	80001d0 <strcmp>
 8002948:	4603      	mov	r3, r0
 800294a:	2b00      	cmp	r3, #0
 800294c:	f040 8089 	bne.w	8002a62 <at_send_cmd_blocking+0x606>
                sprintf((char*) val, ",%d,0", cmd->payload.con_start.port);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	895b      	ldrh	r3, [r3, #10]
 8002954:	b29b      	uxth	r3, r3
 8002956:	461a      	mov	r2, r3
 8002958:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800295c:	494a      	ldr	r1, [pc, #296]	; (8002a88 <at_send_cmd_blocking+0x62c>)
 800295e:	4618      	mov	r0, r3
 8002960:	f008 fd88 	bl	800b474 <sprintf>
                hw_serial_tx(val, strlen((char*)val));
 8002964:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002968:	4618      	mov	r0, r3
 800296a:	f7fd fc3b 	bl	80001e4 <strlen>
 800296e:	4603      	mov	r3, r0
 8002970:	b29a      	uxth	r2, r3
 8002972:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002976:	4611      	mov	r1, r2
 8002978:	4618      	mov	r0, r3
 800297a:	f000 fca7 	bl	80032cc <hw_serial_tx>
            }            

            break;
 800297e:	bf00      	nop
 8002980:	e06f      	b.n	8002a62 <at_send_cmd_blocking+0x606>
        }

        case AT_CMD_CON_SEND: {
            if(cmd->payload.con_send.transparent == 0){
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	7a9b      	ldrb	r3, [r3, #10]
 8002986:	2b00      	cmp	r3, #0
 8002988:	f040 8082 	bne.w	8002a90 <at_send_cmd_blocking+0x634>
                uint8_t val[10];
                if(cmd->payload.con_send.channel >= 0)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8002992:	2b00      	cmp	r3, #0
 8002994:	db0d      	blt.n	80029b2 <at_send_cmd_blocking+0x556>
                    sprintf((char*)val, "=%d,%d", cmd->payload.con_send.channel, cmd->payload.con_send.size);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	f993 3003 	ldrsb.w	r3, [r3, #3]
 800299c:	461a      	mov	r2, r3
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80029a4:	b29b      	uxth	r3, r3
 80029a6:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 80029aa:	4932      	ldr	r1, [pc, #200]	; (8002a74 <at_send_cmd_blocking+0x618>)
 80029ac:	f008 fd62 	bl	800b474 <sprintf>
 80029b0:	e00a      	b.n	80029c8 <at_send_cmd_blocking+0x56c>
                else
                    sprintf((char*)val, "=%d", cmd->payload.con_send.size);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80029b8:	b29b      	uxth	r3, r3
 80029ba:	461a      	mov	r2, r3
 80029bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80029c0:	492d      	ldr	r1, [pc, #180]	; (8002a78 <at_send_cmd_blocking+0x61c>)
 80029c2:	4618      	mov	r0, r3
 80029c4:	f008 fd56 	bl	800b474 <sprintf>

                hw_serial_tx(val, strlen((char*) val));
 80029c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80029cc:	4618      	mov	r0, r3
 80029ce:	f7fd fc09 	bl	80001e4 <strlen>
 80029d2:	4603      	mov	r3, r0
 80029d4:	b29a      	uxth	r2, r3
 80029d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80029da:	4611      	mov	r1, r2
 80029dc:	4618      	mov	r0, r3
 80029de:	f000 fc75 	bl	80032cc <hw_serial_tx>
                    sprintf((char*)val, "\",%d", cmd->payload.con_send.port);
                    hw_serial_tx(val, strlen((char*)val));
                }
                */
            }            
            break;
 80029e2:	e055      	b.n	8002a90 <at_send_cmd_blocking+0x634>
        }

        case AT_CMD_CON_CLOSE: {
            if(cmd->payload.con_close.channel >= 0){
            	uint8_t val[10];
                sprintf((char*)val, "=%d", cmd->payload.con_close.channel);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	785b      	ldrb	r3, [r3, #1]
 80029e8:	461a      	mov	r2, r3
 80029ea:	f107 0320 	add.w	r3, r7, #32
 80029ee:	4922      	ldr	r1, [pc, #136]	; (8002a78 <at_send_cmd_blocking+0x61c>)
 80029f0:	4618      	mov	r0, r3
 80029f2:	f008 fd3f 	bl	800b474 <sprintf>
                hw_serial_tx(val, strlen((char*)val));
 80029f6:	f107 0320 	add.w	r3, r7, #32
 80029fa:	4618      	mov	r0, r3
 80029fc:	f7fd fbf2 	bl	80001e4 <strlen>
 8002a00:	4603      	mov	r3, r0
 8002a02:	b29a      	uxth	r2, r3
 8002a04:	f107 0320 	add.w	r3, r7, #32
 8002a08:	4611      	mov	r1, r2
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f000 fc5e 	bl	80032cc <hw_serial_tx>
            }
            break;
 8002a10:	e03f      	b.n	8002a92 <at_send_cmd_blocking+0x636>
        }

        case AT_CMD_UART:{
            uint8_t val[20];
            sprintf((char*)val, "=%u,%d,%d,%d,%d", (unsigned int) cmd->payload.uart.baud_rate, cmd->payload.uart.data_bits, cmd->payload.uart.stop_bit, cmd->payload.uart.parity, cmd->payload.uart.flow_control);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	f8d3 2001 	ldr.w	r2, [r3, #1]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	795b      	ldrb	r3, [r3, #5]
 8002a1c:	461d      	mov	r5, r3
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	799b      	ldrb	r3, [r3, #6]
 8002a22:	4619      	mov	r1, r3
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	79db      	ldrb	r3, [r3, #7]
 8002a28:	461c      	mov	r4, r3
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	7a1b      	ldrb	r3, [r3, #8]
 8002a2e:	f107 000c 	add.w	r0, r7, #12
 8002a32:	9302      	str	r3, [sp, #8]
 8002a34:	9401      	str	r4, [sp, #4]
 8002a36:	9100      	str	r1, [sp, #0]
 8002a38:	462b      	mov	r3, r5
 8002a3a:	4914      	ldr	r1, [pc, #80]	; (8002a8c <at_send_cmd_blocking+0x630>)
 8002a3c:	f008 fd1a 	bl	800b474 <sprintf>
            hw_serial_tx(val, strlen((char*)val));
 8002a40:	f107 030c 	add.w	r3, r7, #12
 8002a44:	4618      	mov	r0, r3
 8002a46:	f7fd fbcd 	bl	80001e4 <strlen>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	b29a      	uxth	r2, r3
 8002a4e:	f107 030c 	add.w	r3, r7, #12
 8002a52:	4611      	mov	r1, r2
 8002a54:	4618      	mov	r0, r3
 8002a56:	f000 fc39 	bl	80032cc <hw_serial_tx>
        	break;
 8002a5a:	bf00      	nop
 8002a5c:	e019      	b.n	8002a92 <at_send_cmd_blocking+0x636>
        }

        default:
            break;
 8002a5e:	bf00      	nop
 8002a60:	e017      	b.n	8002a92 <at_send_cmd_blocking+0x636>
            break;
 8002a62:	bf00      	nop
 8002a64:	e015      	b.n	8002a92 <at_send_cmd_blocking+0x636>
 8002a66:	bf00      	nop
 8002a68:	0800ff74 	.word	0x0800ff74
 8002a6c:	0800ff78 	.word	0x0800ff78
 8002a70:	0800ff94 	.word	0x0800ff94
 8002a74:	0800ff80 	.word	0x0800ff80
 8002a78:	0800ffa4 	.word	0x0800ffa4
 8002a7c:	0800ffa8 	.word	0x0800ffa8
 8002a80:	0800ffb0 	.word	0x0800ffb0
 8002a84:	0800ffb8 	.word	0x0800ffb8
 8002a88:	0800ffbc 	.word	0x0800ffbc
 8002a8c:	0800ffc4 	.word	0x0800ffc4
            break;
 8002a90:	bf00      	nop
    }

    // end of line, if any
    hw_serial_tx(at_eol, strlen((const char*)at_eol));
 8002a92:	4b2d      	ldr	r3, [pc, #180]	; (8002b48 <at_send_cmd_blocking+0x6ec>)
 8002a94:	681c      	ldr	r4, [r3, #0]
 8002a96:	4b2c      	ldr	r3, [pc, #176]	; (8002b48 <at_send_cmd_blocking+0x6ec>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f7fd fba2 	bl	80001e4 <strlen>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	b29b      	uxth	r3, r3
 8002aa4:	4619      	mov	r1, r3
 8002aa6:	4620      	mov	r0, r4
 8002aa8:	f000 fc10 	bl	80032cc <hw_serial_tx>
    
    // set expected answer
    int16_t ans;
    uint16_t nb;
    switch(cmd->id){
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	781b      	ldrb	r3, [r3, #0]
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d002      	beq.n	8002aba <at_send_cmd_blocking+0x65e>
 8002ab4:	2b10      	cmp	r3, #16
 8002ab6:	d016      	beq.n	8002ae6 <at_send_cmd_blocking+0x68a>
 8002ab8:	e023      	b.n	8002b02 <at_send_cmd_blocking+0x6a6>
        case AT_CMD_RST:
            ans = ceb_cbuf_find_str(&at_cb, (uint8_t*) at_ready, strlen((const char*)at_ready), &nb, tmrout_ms);
 8002aba:	4b24      	ldr	r3, [pc, #144]	; (8002b4c <at_send_cmd_blocking+0x6f0>)
 8002abc:	681c      	ldr	r4, [r3, #0]
 8002abe:	4b23      	ldr	r3, [pc, #140]	; (8002b4c <at_send_cmd_blocking+0x6f0>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f7fd fb8e 	bl	80001e4 <strlen>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	b29a      	uxth	r2, r3
 8002acc:	f107 0194 	add.w	r1, r7, #148	; 0x94
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	9300      	str	r3, [sp, #0]
 8002ad4:	460b      	mov	r3, r1
 8002ad6:	4621      	mov	r1, r4
 8002ad8:	481d      	ldr	r0, [pc, #116]	; (8002b50 <at_send_cmd_blocking+0x6f4>)
 8002ada:	f000 f8d7 	bl	8002c8c <ceb_cbuf_find_str>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
            break;
 8002ae4:	e017      	b.n	8002b16 <at_send_cmd_blocking+0x6ba>
        case AT_CMD_CON_SEND:
            ans = ceb_cbuf_find_str(&at_cb, (uint8_t *)">", 1, &nb, tmrout_ms);
 8002ae6:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	9300      	str	r3, [sp, #0]
 8002aee:	4613      	mov	r3, r2
 8002af0:	2201      	movs	r2, #1
 8002af2:	4918      	ldr	r1, [pc, #96]	; (8002b54 <at_send_cmd_blocking+0x6f8>)
 8002af4:	4816      	ldr	r0, [pc, #88]	; (8002b50 <at_send_cmd_blocking+0x6f4>)
 8002af6:	f000 f8c9 	bl	8002c8c <ceb_cbuf_find_str>
 8002afa:	4603      	mov	r3, r0
 8002afc:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
            break;
 8002b00:	e009      	b.n	8002b16 <at_send_cmd_blocking+0x6ba>
        default:
            ans = ceb_cbuf_find_multi_str(&at_cb, at_ok_error, 2, tmrout_ms);
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	2202      	movs	r2, #2
 8002b06:	4914      	ldr	r1, [pc, #80]	; (8002b58 <at_send_cmd_blocking+0x6fc>)
 8002b08:	4811      	ldr	r0, [pc, #68]	; (8002b50 <at_send_cmd_blocking+0x6f4>)
 8002b0a:	f000 f904 	bl	8002d16 <ceb_cbuf_find_multi_str>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
            break;
 8002b14:	bf00      	nop
    }

    switch(ans){
 8002b16:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d007      	beq.n	8002b2e <at_send_cmd_blocking+0x6d2>
 8002b1e:	2b02      	cmp	r3, #2
 8002b20:	d001      	beq.n	8002b26 <at_send_cmd_blocking+0x6ca>
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d107      	bne.n	8002b36 <at_send_cmd_blocking+0x6da>
        case 0:
        case 2:
            cmd->status = AT_STATUS_OK;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	735a      	strb	r2, [r3, #13]
            break;
 8002b2c:	e007      	b.n	8002b3e <at_send_cmd_blocking+0x6e2>
        case 1:
            cmd->status = AT_STATUS_ERROR;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2201      	movs	r2, #1
 8002b32:	735a      	strb	r2, [r3, #13]
            break;
 8002b34:	e003      	b.n	8002b3e <at_send_cmd_blocking+0x6e2>
        case -1:
        default:
            cmd->status = AT_STATUS_NO_ANSWER;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2204      	movs	r2, #4
 8002b3a:	735a      	strb	r2, [r3, #13]
            break;
 8002b3c:	bf00      	nop
    }
    return AT_STATUS_OK;
 8002b3e:	2300      	movs	r3, #0
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	3798      	adds	r7, #152	; 0x98
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bdb0      	pop	{r4, r5, r7, pc}
 8002b48:	200000d4 	.word	0x200000d4
 8002b4c:	200000dc 	.word	0x200000dc
 8002b50:	20000c50 	.word	0x20000c50
 8002b54:	0800ffd4 	.word	0x0800ffd4
 8002b58:	200000c4 	.word	0x200000c4

08002b5c <at_rx_interrupt>:

void at_rx_interrupt(uint8_t c){
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b082      	sub	sp, #8
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	4603      	mov	r3, r0
 8002b64:	71fb      	strb	r3, [r7, #7]
	if(at_started){
 8002b66:	4b07      	ldr	r3, [pc, #28]	; (8002b84 <at_rx_interrupt+0x28>)
 8002b68:	781b      	ldrb	r3, [r3, #0]
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d004      	beq.n	8002b7a <at_rx_interrupt+0x1e>
		if(ceb_cbuf_put(&at_cb, c) == CEB_CBUF_FULL){
 8002b70:	79fb      	ldrb	r3, [r7, #7]
 8002b72:	4619      	mov	r1, r3
 8002b74:	4804      	ldr	r0, [pc, #16]	; (8002b88 <at_rx_interrupt+0x2c>)
 8002b76:	f000 f857 	bl	8002c28 <ceb_cbuf_put>
			//printf("%02X-",buffer[0]);
			//printf("%c",c);
			//fflush(stdout);
		}
	}
}
 8002b7a:	bf00      	nop
 8002b7c:	3708      	adds	r7, #8
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	20000af0 	.word	0x20000af0
 8002b88:	20000c50 	.word	0x20000c50

08002b8c <ceb_cbuf_init>:
#include <esp8266/ceb_cbuf.h>

#define CEB_CBUF_INC(v,mv)   ((((v) + 1) >= (mv)) ? 0 : (v) + 1)

cbuf_status_t ceb_cbuf_init(ceb_cbuf_t *cb, uint8_t *area, uint16_t size)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b085      	sub	sp, #20
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	60f8      	str	r0, [r7, #12]
 8002b94:	60b9      	str	r1, [r7, #8]
 8002b96:	4613      	mov	r3, r2
 8002b98:	80fb      	strh	r3, [r7, #6]
	cb->buffer = area;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	68ba      	ldr	r2, [r7, #8]
 8002b9e:	f8c3 2006 	str.w	r2, [r3, #6]
	cb->size = size;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	88fa      	ldrh	r2, [r7, #6]
 8002ba6:	809a      	strh	r2, [r3, #4]
	cb->prod = cb->cons = 0;
 8002ba8:	2100      	movs	r1, #0
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	460a      	mov	r2, r1
 8002bae:	805a      	strh	r2, [r3, #2]
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	460a      	mov	r2, r1
 8002bb4:	801a      	strh	r2, [r3, #0]

	return CEB_CBUF_OK;
 8002bb6:	2300      	movs	r3, #0
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	3714      	adds	r7, #20
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr

08002bc4 <ceb_cbuf_get>:

	return CEB_CBUF_OK;
}

cbuf_status_t ceb_cbuf_get(ceb_cbuf_t *cb, uint8_t *c)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
 8002bcc:	6039      	str	r1, [r7, #0]
	if(cb->cons == cb->prod)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	885b      	ldrh	r3, [r3, #2]
 8002bd2:	b29a      	uxth	r2, r3
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	881b      	ldrh	r3, [r3, #0]
 8002bd8:	b29b      	uxth	r3, r3
 8002bda:	429a      	cmp	r2, r3
 8002bdc:	d101      	bne.n	8002be2 <ceb_cbuf_get+0x1e>
		return CEB_CBUF_EMPTY;
 8002bde:	2302      	movs	r3, #2
 8002be0:	e01c      	b.n	8002c1c <ceb_cbuf_get+0x58>

	*c = cb->buffer[cb->cons];
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	f8d3 3006 	ldr.w	r3, [r3, #6]
 8002be8:	687a      	ldr	r2, [r7, #4]
 8002bea:	8852      	ldrh	r2, [r2, #2]
 8002bec:	b292      	uxth	r2, r2
 8002bee:	4413      	add	r3, r2
 8002bf0:	781a      	ldrb	r2, [r3, #0]
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	701a      	strb	r2, [r3, #0]
	cb->cons = CEB_CBUF_INC(cb->cons,cb->size);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	885b      	ldrh	r3, [r3, #2]
 8002bfa:	b29b      	uxth	r3, r3
 8002bfc:	3301      	adds	r3, #1
 8002bfe:	687a      	ldr	r2, [r7, #4]
 8002c00:	8892      	ldrh	r2, [r2, #4]
 8002c02:	b292      	uxth	r2, r2
 8002c04:	4293      	cmp	r3, r2
 8002c06:	da05      	bge.n	8002c14 <ceb_cbuf_get+0x50>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	885b      	ldrh	r3, [r3, #2]
 8002c0c:	b29b      	uxth	r3, r3
 8002c0e:	3301      	adds	r3, #1
 8002c10:	b29a      	uxth	r2, r3
 8002c12:	e000      	b.n	8002c16 <ceb_cbuf_get+0x52>
 8002c14:	2200      	movs	r2, #0
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	805a      	strh	r2, [r3, #2]

	return CEB_CBUF_OK;
 8002c1a:	2300      	movs	r3, #0
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	370c      	adds	r7, #12
 8002c20:	46bd      	mov	sp, r7
 8002c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c26:	4770      	bx	lr

08002c28 <ceb_cbuf_put>:

cbuf_status_t ceb_cbuf_put(ceb_cbuf_t *cb, uint8_t c)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b085      	sub	sp, #20
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
 8002c30:	460b      	mov	r3, r1
 8002c32:	70fb      	strb	r3, [r7, #3]
	uint16_t next_prod = CEB_CBUF_INC(cb->prod,cb->size);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	881b      	ldrh	r3, [r3, #0]
 8002c38:	b29b      	uxth	r3, r3
 8002c3a:	3301      	adds	r3, #1
 8002c3c:	687a      	ldr	r2, [r7, #4]
 8002c3e:	8892      	ldrh	r2, [r2, #4]
 8002c40:	b292      	uxth	r2, r2
 8002c42:	4293      	cmp	r3, r2
 8002c44:	da05      	bge.n	8002c52 <ceb_cbuf_put+0x2a>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	881b      	ldrh	r3, [r3, #0]
 8002c4a:	b29b      	uxth	r3, r3
 8002c4c:	3301      	adds	r3, #1
 8002c4e:	b29b      	uxth	r3, r3
 8002c50:	e000      	b.n	8002c54 <ceb_cbuf_put+0x2c>
 8002c52:	2300      	movs	r3, #0
 8002c54:	81fb      	strh	r3, [r7, #14]

	if(next_prod == cb->cons)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	885b      	ldrh	r3, [r3, #2]
 8002c5a:	b29b      	uxth	r3, r3
 8002c5c:	89fa      	ldrh	r2, [r7, #14]
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	d101      	bne.n	8002c66 <ceb_cbuf_put+0x3e>
		return CEB_CBUF_FULL;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e00c      	b.n	8002c80 <ceb_cbuf_put+0x58>

	cb->buffer[cb->prod] = c;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	f8d3 3006 	ldr.w	r3, [r3, #6]
 8002c6c:	687a      	ldr	r2, [r7, #4]
 8002c6e:	8812      	ldrh	r2, [r2, #0]
 8002c70:	b292      	uxth	r2, r2
 8002c72:	4413      	add	r3, r2
 8002c74:	78fa      	ldrb	r2, [r7, #3]
 8002c76:	701a      	strb	r2, [r3, #0]
	cb->prod = next_prod;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	89fa      	ldrh	r2, [r7, #14]
 8002c7c:	801a      	strh	r2, [r3, #0]

	return CEB_CBUF_OK;
 8002c7e:	2300      	movs	r3, #0
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	3714      	adds	r7, #20
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr

08002c8c <ceb_cbuf_find_str>:

#if 1
int16_t ceb_cbuf_find_str(ceb_cbuf_t *cb, uint8_t *str, uint16_t len, uint16_t *nb, uint32_t tmrout_ms)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b088      	sub	sp, #32
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	60f8      	str	r0, [r7, #12]
 8002c94:	60b9      	str	r1, [r7, #8]
 8002c96:	603b      	str	r3, [r7, #0]
 8002c98:	4613      	mov	r3, r2
 8002c9a:	80fb      	strh	r3, [r7, #6]
	uint16_t n_match = 0;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	83fb      	strh	r3, [r7, #30]
	uint8_t c;
	uint32_t tmr = hw_time_get();
 8002ca0:	f000 fb3c 	bl	800331c <hw_time_get>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	61bb      	str	r3, [r7, #24]

	*nb = 0;
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	2200      	movs	r2, #0
 8002cac:	801a      	strh	r2, [r3, #0]
	do
	{
		if(ceb_cbuf_get(cb,&c) == CEB_CBUF_OK)
 8002cae:	f107 0317 	add.w	r3, r7, #23
 8002cb2:	4619      	mov	r1, r3
 8002cb4:	68f8      	ldr	r0, [r7, #12]
 8002cb6:	f7ff ff85 	bl	8002bc4 <ceb_cbuf_get>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d118      	bne.n	8002cf2 <ceb_cbuf_find_str+0x66>
		{
			*nb = *nb + 1;
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	881b      	ldrh	r3, [r3, #0]
 8002cc4:	3301      	adds	r3, #1
 8002cc6:	b29a      	uxth	r2, r3
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	801a      	strh	r2, [r3, #0]
			if(str[n_match] == c)
 8002ccc:	8bfb      	ldrh	r3, [r7, #30]
 8002cce:	68ba      	ldr	r2, [r7, #8]
 8002cd0:	4413      	add	r3, r2
 8002cd2:	781a      	ldrb	r2, [r3, #0]
 8002cd4:	7dfb      	ldrb	r3, [r7, #23]
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	d103      	bne.n	8002ce2 <ceb_cbuf_find_str+0x56>
				n_match++;
 8002cda:	8bfb      	ldrh	r3, [r7, #30]
 8002cdc:	3301      	adds	r3, #1
 8002cde:	83fb      	strh	r3, [r7, #30]
 8002ce0:	e001      	b.n	8002ce6 <ceb_cbuf_find_str+0x5a>
			else
				n_match = 0;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	83fb      	strh	r3, [r7, #30]

			if(n_match >= len)
 8002ce6:	8bfa      	ldrh	r2, [r7, #30]
 8002ce8:	88fb      	ldrh	r3, [r7, #6]
 8002cea:	429a      	cmp	r2, r3
 8002cec:	d301      	bcc.n	8002cf2 <ceb_cbuf_find_str+0x66>
				return 0;		
 8002cee:	2300      	movs	r3, #0
 8002cf0:	e00d      	b.n	8002d0e <ceb_cbuf_find_str+0x82>
		}
	} while (hw_time_elapsed(tmr,hw_time_get()) < tmrout_ms);
 8002cf2:	f000 fb13 	bl	800331c <hw_time_get>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	4619      	mov	r1, r3
 8002cfa:	69b8      	ldr	r0, [r7, #24]
 8002cfc:	f000 fb15 	bl	800332a <hw_time_elapsed>
 8002d00:	4603      	mov	r3, r0
 8002d02:	461a      	mov	r2, r3
 8002d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d8d1      	bhi.n	8002cae <ceb_cbuf_find_str+0x22>

	return -1;
 8002d0a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3720      	adds	r7, #32
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}

08002d16 <ceb_cbuf_find_multi_str>:

int16_t ceb_cbuf_find_multi_str(ceb_cbuf_t *cb, ceb_cbuf_str_t *str_list, uint16_t len_list, uint32_t tmrout_ms)
{
 8002d16:	b580      	push	{r7, lr}
 8002d18:	b088      	sub	sp, #32
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	60f8      	str	r0, [r7, #12]
 8002d1e:	60b9      	str	r1, [r7, #8]
 8002d20:	603b      	str	r3, [r7, #0]
 8002d22:	4613      	mov	r3, r2
 8002d24:	80fb      	strh	r3, [r7, #6]
	uint16_t n;
	uint8_t c;
	uint32_t tmr = hw_time_get();
 8002d26:	f000 faf9 	bl	800331c <hw_time_get>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	61bb      	str	r3, [r7, #24]

	for(n = 0; n < len_list ; n++)
 8002d2e:	2300      	movs	r3, #0
 8002d30:	83fb      	strh	r3, [r7, #30]
 8002d32:	e00a      	b.n	8002d4a <ceb_cbuf_find_multi_str+0x34>
		str_list[n].n_match = 0;
 8002d34:	8bfb      	ldrh	r3, [r7, #30]
 8002d36:	00db      	lsls	r3, r3, #3
 8002d38:	68ba      	ldr	r2, [r7, #8]
 8002d3a:	4413      	add	r3, r2
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	719a      	strb	r2, [r3, #6]
 8002d40:	2200      	movs	r2, #0
 8002d42:	71da      	strb	r2, [r3, #7]
	for(n = 0; n < len_list ; n++)
 8002d44:	8bfb      	ldrh	r3, [r7, #30]
 8002d46:	3301      	adds	r3, #1
 8002d48:	83fb      	strh	r3, [r7, #30]
 8002d4a:	8bfa      	ldrh	r2, [r7, #30]
 8002d4c:	88fb      	ldrh	r3, [r7, #6]
 8002d4e:	429a      	cmp	r2, r3
 8002d50:	d3f0      	bcc.n	8002d34 <ceb_cbuf_find_multi_str+0x1e>

	do
	{
		if(ceb_cbuf_get(cb,&c) == CEB_CBUF_OK)
 8002d52:	f107 0317 	add.w	r3, r7, #23
 8002d56:	4619      	mov	r1, r3
 8002d58:	68f8      	ldr	r0, [r7, #12]
 8002d5a:	f7ff ff33 	bl	8002bc4 <ceb_cbuf_get>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d13c      	bne.n	8002dde <ceb_cbuf_find_multi_str+0xc8>
		{
			for(n = 0; n < len_list ; n++)
 8002d64:	2300      	movs	r3, #0
 8002d66:	83fb      	strh	r3, [r7, #30]
 8002d68:	e035      	b.n	8002dd6 <ceb_cbuf_find_multi_str+0xc0>
			{
				if(str_list[n].str[str_list[n].n_match] == c)
 8002d6a:	8bfb      	ldrh	r3, [r7, #30]
 8002d6c:	00db      	lsls	r3, r3, #3
 8002d6e:	68ba      	ldr	r2, [r7, #8]
 8002d70:	4413      	add	r3, r2
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	8bfa      	ldrh	r2, [r7, #30]
 8002d76:	00d2      	lsls	r2, r2, #3
 8002d78:	68b9      	ldr	r1, [r7, #8]
 8002d7a:	440a      	add	r2, r1
 8002d7c:	88d2      	ldrh	r2, [r2, #6]
 8002d7e:	b292      	uxth	r2, r2
 8002d80:	4413      	add	r3, r2
 8002d82:	781a      	ldrb	r2, [r3, #0]
 8002d84:	7dfb      	ldrb	r3, [r7, #23]
 8002d86:	429a      	cmp	r2, r3
 8002d88:	d109      	bne.n	8002d9e <ceb_cbuf_find_multi_str+0x88>
					str_list[n].n_match++;
 8002d8a:	8bfb      	ldrh	r3, [r7, #30]
 8002d8c:	00db      	lsls	r3, r3, #3
 8002d8e:	68ba      	ldr	r2, [r7, #8]
 8002d90:	4413      	add	r3, r2
 8002d92:	88da      	ldrh	r2, [r3, #6]
 8002d94:	b292      	uxth	r2, r2
 8002d96:	3201      	adds	r2, #1
 8002d98:	b292      	uxth	r2, r2
 8002d9a:	80da      	strh	r2, [r3, #6]
 8002d9c:	e007      	b.n	8002dae <ceb_cbuf_find_multi_str+0x98>
				else
					str_list[n].n_match = 0;
 8002d9e:	8bfb      	ldrh	r3, [r7, #30]
 8002da0:	00db      	lsls	r3, r3, #3
 8002da2:	68ba      	ldr	r2, [r7, #8]
 8002da4:	4413      	add	r3, r2
 8002da6:	2200      	movs	r2, #0
 8002da8:	719a      	strb	r2, [r3, #6]
 8002daa:	2200      	movs	r2, #0
 8002dac:	71da      	strb	r2, [r3, #7]

				if(str_list[n].n_match >= str_list[n].len)
 8002dae:	8bfb      	ldrh	r3, [r7, #30]
 8002db0:	00db      	lsls	r3, r3, #3
 8002db2:	68ba      	ldr	r2, [r7, #8]
 8002db4:	4413      	add	r3, r2
 8002db6:	88db      	ldrh	r3, [r3, #6]
 8002db8:	b29a      	uxth	r2, r3
 8002dba:	8bfb      	ldrh	r3, [r7, #30]
 8002dbc:	00db      	lsls	r3, r3, #3
 8002dbe:	68b9      	ldr	r1, [r7, #8]
 8002dc0:	440b      	add	r3, r1
 8002dc2:	889b      	ldrh	r3, [r3, #4]
 8002dc4:	b29b      	uxth	r3, r3
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	d302      	bcc.n	8002dd0 <ceb_cbuf_find_multi_str+0xba>
					return n;
 8002dca:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002dce:	e014      	b.n	8002dfa <ceb_cbuf_find_multi_str+0xe4>
			for(n = 0; n < len_list ; n++)
 8002dd0:	8bfb      	ldrh	r3, [r7, #30]
 8002dd2:	3301      	adds	r3, #1
 8002dd4:	83fb      	strh	r3, [r7, #30]
 8002dd6:	8bfa      	ldrh	r2, [r7, #30]
 8002dd8:	88fb      	ldrh	r3, [r7, #6]
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d3c5      	bcc.n	8002d6a <ceb_cbuf_find_multi_str+0x54>
			}
		}
	} while (hw_time_elapsed(tmr,hw_time_get()) < tmrout_ms);
 8002dde:	f000 fa9d 	bl	800331c <hw_time_get>
 8002de2:	4603      	mov	r3, r0
 8002de4:	4619      	mov	r1, r3
 8002de6:	69b8      	ldr	r0, [r7, #24]
 8002de8:	f000 fa9f 	bl	800332a <hw_time_elapsed>
 8002dec:	4603      	mov	r3, r0
 8002dee:	461a      	mov	r2, r3
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d8ad      	bhi.n	8002d52 <ceb_cbuf_find_multi_str+0x3c>

	return -1;	
 8002df6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3720      	adds	r7, #32
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}

08002e02 <esp8266_init>:
#include <esp8266/esp8266.h>

esp8266* esp8266_init(void){
 8002e02:	b580      	push	{r7, lr}
 8002e04:	b082      	sub	sp, #8
 8002e06:	af00      	add	r7, sp, #0
	esp8266* esp = (esp8266*) malloc(sizeof(esp8266));
 8002e08:	200f      	movs	r0, #15
 8002e0a:	f008 f8c9 	bl	800afa0 <malloc>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	607b      	str	r3, [r7, #4]
    esp->ssid = NULL;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2200      	movs	r2, #0
 8002e16:	701a      	strb	r2, [r3, #0]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	705a      	strb	r2, [r3, #1]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	709a      	strb	r2, [r3, #2]
 8002e20:	2200      	movs	r2, #0
 8002e22:	70da      	strb	r2, [r3, #3]
    esp->password = NULL;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2200      	movs	r2, #0
 8002e28:	711a      	strb	r2, [r3, #4]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	715a      	strb	r2, [r3, #5]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	719a      	strb	r2, [r3, #6]
 8002e32:	2200      	movs	r2, #0
 8002e34:	71da      	strb	r2, [r3, #7]
    esp->connected = false;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	721a      	strb	r2, [r3, #8]
    esp->ip = NULL;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	725a      	strb	r2, [r3, #9]
 8002e42:	2200      	movs	r2, #0
 8002e44:	729a      	strb	r2, [r3, #10]
 8002e46:	2200      	movs	r2, #0
 8002e48:	72da      	strb	r2, [r3, #11]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	731a      	strb	r2, [r3, #12]
    esp->port = 1883;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2200      	movs	r2, #0
 8002e52:	f042 025b 	orr.w	r2, r2, #91	; 0x5b
 8002e56:	735a      	strb	r2, [r3, #13]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	f042 0207 	orr.w	r2, r2, #7
 8002e5e:	739a      	strb	r2, [r3, #14]
    esp8266_turn_on(esp);
 8002e60:	6878      	ldr	r0, [r7, #4]
 8002e62:	f000 f805 	bl	8002e70 <esp8266_turn_on>
    return esp;
 8002e66:	687b      	ldr	r3, [r7, #4]
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	3708      	adds	r7, #8
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}

08002e70 <esp8266_turn_on>:
	esp8266_turn_off(esp8266);
	free(esp8266);
	esp8266 = NULL;
}

void esp8266_turn_on(esp8266* esp8266){
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b082      	sub	sp, #8
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
	if( esp8266 == NULL ) return;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d036      	beq.n	8002eec <esp8266_turn_on+0x7c>
	// app_init
	hw_esp_power_set(true);
 8002e7e:	2001      	movs	r0, #1
 8002e80:	f000 f91a 	bl	80030b8 <hw_esp_power_set>
	hw_time_sleep(100);
 8002e84:	2064      	movs	r0, #100	; 0x64
 8002e86:	f000 fa69 	bl	800335c <hw_time_sleep>
	hw_uart_init();
 8002e8a:	f000 fa7d 	bl	8003388 <hw_uart_init>

	// iot_on
	// WifiOn
	hw_esp_power_set(true);
 8002e8e:	2001      	movs	r0, #1
 8002e90:	f000 f912 	bl	80030b8 <hw_esp_power_set>
	hw_esp_reset_set(false);
 8002e94:	2000      	movs	r0, #0
 8002e96:	f000 f92b 	bl	80030f0 <hw_esp_reset_set>
	hw_esp_enable_set(true);
 8002e9a:	2001      	movs	r0, #1
 8002e9c:	f000 f933 	bl	8003106 <hw_esp_enable_set>

	// iot_on
	hw_time_sleep(1000);
 8002ea0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002ea4:	f000 fa5a 	bl	800335c <hw_time_sleep>
	at_init();
 8002ea8:	f7ff fabe 	bl	8002428 <at_init>

	cmd.id = AT_CMD_READY;
 8002eac:	4b12      	ldr	r3, [pc, #72]	; (8002ef8 <esp8266_turn_on+0x88>)
 8002eae:	2200      	movs	r2, #0
 8002eb0:	701a      	strb	r2, [r3, #0]
	at_send_cmd_blocking(&cmd,1000);
 8002eb2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002eb6:	4810      	ldr	r0, [pc, #64]	; (8002ef8 <esp8266_turn_on+0x88>)
 8002eb8:	f7ff fad0 	bl	800245c <at_send_cmd_blocking>

	cmd.id = AT_CMD_READY;
 8002ebc:	4b0e      	ldr	r3, [pc, #56]	; (8002ef8 <esp8266_turn_on+0x88>)
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	701a      	strb	r2, [r3, #0]
	at_send_cmd_blocking(&cmd,3000);
 8002ec2:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8002ec6:	480c      	ldr	r0, [pc, #48]	; (8002ef8 <esp8266_turn_on+0x88>)
 8002ec8:	f7ff fac8 	bl	800245c <at_send_cmd_blocking>

	if(cmd.status != AT_STATUS_OK) return;
 8002ecc:	4b0a      	ldr	r3, [pc, #40]	; (8002ef8 <esp8266_turn_on+0x88>)
 8002ece:	7b5b      	ldrb	r3, [r3, #13]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d10d      	bne.n	8002ef0 <esp8266_turn_on+0x80>

	cmd.id = AT_CMD_WIFI_AUTO_CON;
 8002ed4:	4b08      	ldr	r3, [pc, #32]	; (8002ef8 <esp8266_turn_on+0x88>)
 8002ed6:	2203      	movs	r2, #3
 8002ed8:	701a      	strb	r2, [r3, #0]
	cmd.payload.wifi_autocon.enabled = 0;
 8002eda:	4b07      	ldr	r3, [pc, #28]	; (8002ef8 <esp8266_turn_on+0x88>)
 8002edc:	2200      	movs	r2, #0
 8002ede:	705a      	strb	r2, [r3, #1]
	at_send_cmd_blocking(&cmd,1000);
 8002ee0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002ee4:	4804      	ldr	r0, [pc, #16]	; (8002ef8 <esp8266_turn_on+0x88>)
 8002ee6:	f7ff fab9 	bl	800245c <at_send_cmd_blocking>
 8002eea:	e002      	b.n	8002ef2 <esp8266_turn_on+0x82>
	if( esp8266 == NULL ) return;
 8002eec:	bf00      	nop
 8002eee:	e000      	b.n	8002ef2 <esp8266_turn_on+0x82>
	if(cmd.status != AT_STATUS_OK) return;
 8002ef0:	bf00      	nop
}
 8002ef2:	3708      	adds	r7, #8
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}
 8002ef8:	2000105c 	.word	0x2000105c

08002efc <esp8266_setOprToStationSoftAP>:
	if( esp8266 == NULL ) return;
	cmd.id = AT_CMD_RST;
	at_send_cmd_blocking(&cmd, 6000);
}

void esp8266_setOprToStationSoftAP(esp8266* esp8266){
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b082      	sub	sp, #8
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
	if ( esp8266 == NULL ) return;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d019      	beq.n	8002f3e <esp8266_setOprToStationSoftAP+0x42>

	cmd.id = AT_CMD_WIFI_AP_MODE;
 8002f0a:	4b0f      	ldr	r3, [pc, #60]	; (8002f48 <esp8266_setOprToStationSoftAP+0x4c>)
 8002f0c:	2204      	movs	r2, #4
 8002f0e:	701a      	strb	r2, [r3, #0]
	cmd.payload.wifi_mode.ap_station = AT_WIFI_MODE_STATION;
 8002f10:	4b0d      	ldr	r3, [pc, #52]	; (8002f48 <esp8266_setOprToStationSoftAP+0x4c>)
 8002f12:	2201      	movs	r2, #1
 8002f14:	705a      	strb	r2, [r3, #1]
	at_send_cmd_blocking(&cmd,2000);
 8002f16:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8002f1a:	480b      	ldr	r0, [pc, #44]	; (8002f48 <esp8266_setOprToStationSoftAP+0x4c>)
 8002f1c:	f7ff fa9e 	bl	800245c <at_send_cmd_blocking>

    cmd.id = AT_CMD_WIFI_AP_DHCP;
 8002f20:	4b09      	ldr	r3, [pc, #36]	; (8002f48 <esp8266_setOprToStationSoftAP+0x4c>)
 8002f22:	2207      	movs	r2, #7
 8002f24:	701a      	strb	r2, [r3, #0]
    cmd.payload.wifi_dhcp.ap_station = 1;
 8002f26:	4b08      	ldr	r3, [pc, #32]	; (8002f48 <esp8266_setOprToStationSoftAP+0x4c>)
 8002f28:	2201      	movs	r2, #1
 8002f2a:	705a      	strb	r2, [r3, #1]
    cmd.payload.wifi_dhcp.enabled = 1;
 8002f2c:	4b06      	ldr	r3, [pc, #24]	; (8002f48 <esp8266_setOprToStationSoftAP+0x4c>)
 8002f2e:	2201      	movs	r2, #1
 8002f30:	709a      	strb	r2, [r3, #2]
    at_send_cmd_blocking(&cmd,2000);
 8002f32:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8002f36:	4804      	ldr	r0, [pc, #16]	; (8002f48 <esp8266_setOprToStationSoftAP+0x4c>)
 8002f38:	f7ff fa90 	bl	800245c <at_send_cmd_blocking>
 8002f3c:	e000      	b.n	8002f40 <esp8266_setOprToStationSoftAP+0x44>
	if ( esp8266 == NULL ) return;
 8002f3e:	bf00      	nop
}
 8002f40:	3708      	adds	r7, #8
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	bf00      	nop
 8002f48:	2000105c 	.word	0x2000105c

08002f4c <esp8266_joinAP>:

bool esp8266_joinAP(esp8266* esp8266, uint8_t* ssid, uint8_t* password){
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b084      	sub	sp, #16
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	60f8      	str	r0, [r7, #12]
 8002f54:	60b9      	str	r1, [r7, #8]
 8002f56:	607a      	str	r2, [r7, #4]
	if( esp8266 == NULL ) return false;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d101      	bne.n	8002f62 <esp8266_joinAP+0x16>
 8002f5e:	2300      	movs	r3, #0
 8002f60:	e025      	b.n	8002fae <esp8266_joinAP+0x62>

	cmd.id = AT_CMD_WIFI_AP_SET;
 8002f62:	4b15      	ldr	r3, [pc, #84]	; (8002fb8 <esp8266_joinAP+0x6c>)
 8002f64:	2206      	movs	r2, #6
 8002f66:	701a      	strb	r2, [r3, #0]
	cmd.payload.wifi_ap.ssid = ssid;
 8002f68:	4a13      	ldr	r2, [pc, #76]	; (8002fb8 <esp8266_joinAP+0x6c>)
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	f8c2 3001 	str.w	r3, [r2, #1]
	cmd.payload.wifi_ap.pwd = password;
 8002f70:	4a11      	ldr	r2, [pc, #68]	; (8002fb8 <esp8266_joinAP+0x6c>)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	f8c2 3005 	str.w	r3, [r2, #5]

	at_send_cmd_blocking(&cmd, 30000);
 8002f78:	f247 5130 	movw	r1, #30000	; 0x7530
 8002f7c:	480e      	ldr	r0, [pc, #56]	; (8002fb8 <esp8266_joinAP+0x6c>)
 8002f7e:	f7ff fa6d 	bl	800245c <at_send_cmd_blocking>
	if( cmd.status != AT_STATUS_OK ) return false;
 8002f82:	4b0d      	ldr	r3, [pc, #52]	; (8002fb8 <esp8266_joinAP+0x6c>)
 8002f84:	7b5b      	ldrb	r3, [r3, #13]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d001      	beq.n	8002f8e <esp8266_joinAP+0x42>
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	e00f      	b.n	8002fae <esp8266_joinAP+0x62>

	cmd.id = AT_CMD_SLL_BUFFER_SIZE;
 8002f8e:	4b0a      	ldr	r3, [pc, #40]	; (8002fb8 <esp8266_joinAP+0x6c>)
 8002f90:	2211      	movs	r2, #17
 8002f92:	701a      	strb	r2, [r3, #0]
	cmd.payload.ssl_buffer.size = 4096;
 8002f94:	4b08      	ldr	r3, [pc, #32]	; (8002fb8 <esp8266_joinAP+0x6c>)
 8002f96:	2200      	movs	r2, #0
 8002f98:	705a      	strb	r2, [r3, #1]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	f042 0210 	orr.w	r2, r2, #16
 8002fa0:	709a      	strb	r2, [r3, #2]
	at_send_cmd_blocking(&cmd, 2000);
 8002fa2:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8002fa6:	4804      	ldr	r0, [pc, #16]	; (8002fb8 <esp8266_joinAP+0x6c>)
 8002fa8:	f7ff fa58 	bl	800245c <at_send_cmd_blocking>

	return true;
 8002fac:	2301      	movs	r3, #1

}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	3710      	adds	r7, #16
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	bf00      	nop
 8002fb8:	2000105c 	.word	0x2000105c

08002fbc <esp8266_enableMUX>:

bool esp8266_enableMUX(esp8266* esp8266){
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b082      	sub	sp, #8
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
	if ( esp8266 == NULL ) return false;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d101      	bne.n	8002fce <esp8266_enableMUX+0x12>
 8002fca:	2300      	movs	r3, #0
 8002fcc:	e00b      	b.n	8002fe6 <esp8266_enableMUX+0x2a>
    cmd.id = AT_CMD_CON_MUX;
 8002fce:	4b08      	ldr	r3, [pc, #32]	; (8002ff0 <esp8266_enableMUX+0x34>)
 8002fd0:	220d      	movs	r2, #13
 8002fd2:	701a      	strb	r2, [r3, #0]
    cmd.payload.mux.enabled = 1;
 8002fd4:	4b06      	ldr	r3, [pc, #24]	; (8002ff0 <esp8266_enableMUX+0x34>)
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	705a      	strb	r2, [r3, #1]
    at_send_cmd_blocking(&cmd, 2000);
 8002fda:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8002fde:	4804      	ldr	r0, [pc, #16]	; (8002ff0 <esp8266_enableMUX+0x34>)
 8002fe0:	f7ff fa3c 	bl	800245c <at_send_cmd_blocking>

    return true;
 8002fe4:	2301      	movs	r3, #1
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	3708      	adds	r7, #8
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	bf00      	nop
 8002ff0:	2000105c 	.word	0x2000105c

08002ff4 <esp8266_createTCP>:
    cmd.payload.mux.enabled = 0;
    at_send_cmd_blocking(&cmd, 2000);
    return true;
}

bool esp8266_createTCP(esp8266* esp8266, uint8_t* ip, uint16_t port){
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b084      	sub	sp, #16
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	60f8      	str	r0, [r7, #12]
 8002ffc:	60b9      	str	r1, [r7, #8]
 8002ffe:	4613      	mov	r3, r2
 8003000:	80fb      	strh	r3, [r7, #6]
	if ( esp8266 == NULL ) return false;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d101      	bne.n	800300c <esp8266_createTCP+0x18>
 8003008:	2300      	movs	r3, #0
 800300a:	e01a      	b.n	8003042 <esp8266_createTCP+0x4e>

	cmd.id = AT_CMD_CON_START;
 800300c:	4b0f      	ldr	r3, [pc, #60]	; (800304c <esp8266_createTCP+0x58>)
 800300e:	220e      	movs	r2, #14
 8003010:	701a      	strb	r2, [r3, #0]
	cmd.payload.con_start.port = port;
 8003012:	4b0e      	ldr	r3, [pc, #56]	; (800304c <esp8266_createTCP+0x58>)
 8003014:	88fa      	ldrh	r2, [r7, #6]
 8003016:	815a      	strh	r2, [r3, #10]
	cmd.payload.con_start.transport = (uint8_t*) "TCP";
 8003018:	4b0c      	ldr	r3, [pc, #48]	; (800304c <esp8266_createTCP+0x58>)
 800301a:	4a0d      	ldr	r2, [pc, #52]	; (8003050 <esp8266_createTCP+0x5c>)
 800301c:	f8c3 2005 	str.w	r2, [r3, #5]
	cmd.payload.con_start.site = ip;
 8003020:	4a0a      	ldr	r2, [pc, #40]	; (800304c <esp8266_createTCP+0x58>)
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	f8c2 3001 	str.w	r3, [r2, #1]
	cmd.payload.con_start.channel = 0;
 8003028:	4b08      	ldr	r3, [pc, #32]	; (800304c <esp8266_createTCP+0x58>)
 800302a:	2200      	movs	r2, #0
 800302c:	725a      	strb	r2, [r3, #9]
	at_send_cmd_blocking(&cmd, 10000);
 800302e:	f242 7110 	movw	r1, #10000	; 0x2710
 8003032:	4806      	ldr	r0, [pc, #24]	; (800304c <esp8266_createTCP+0x58>)
 8003034:	f7ff fa12 	bl	800245c <at_send_cmd_blocking>

	esp8266->connected = true; //cmd.status != AT_STATUS_OK ? false : true;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2201      	movs	r2, #1
 800303c:	721a      	strb	r2, [r3, #8]

	return esp8266->connected;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	7a1b      	ldrb	r3, [r3, #8]
}
 8003042:	4618      	mov	r0, r3
 8003044:	3710      	adds	r7, #16
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop
 800304c:	2000105c 	.word	0x2000105c
 8003050:	0800ffd8 	.word	0x0800ffd8

08003054 <esp8266_send>:

uint32_t esp8266_recv(esp8266* esp8266){
	return 0;
}

bool esp8266_send(esp8266* esp8266, uint8_t* buffer, uint16_t buffer_size){
 8003054:	b580      	push	{r7, lr}
 8003056:	b086      	sub	sp, #24
 8003058:	af00      	add	r7, sp, #0
 800305a:	60f8      	str	r0, [r7, #12]
 800305c:	60b9      	str	r1, [r7, #8]
 800305e:	4613      	mov	r3, r2
 8003060:	80fb      	strh	r3, [r7, #6]
	if( esp8266 == NULL ) return false;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d101      	bne.n	800306c <esp8266_send+0x18>
 8003068:	2300      	movs	r3, #0
 800306a:	e01e      	b.n	80030aa <esp8266_send+0x56>

    cmd.id = AT_CMD_CON_SEND;
 800306c:	4b11      	ldr	r3, [pc, #68]	; (80030b4 <esp8266_send+0x60>)
 800306e:	2210      	movs	r2, #16
 8003070:	701a      	strb	r2, [r3, #0]
    cmd.payload.con_send.size = buffer_size;
 8003072:	4b10      	ldr	r3, [pc, #64]	; (80030b4 <esp8266_send+0x60>)
 8003074:	88fa      	ldrh	r2, [r7, #6]
 8003076:	f8a3 2001 	strh.w	r2, [r3, #1]
    cmd.payload.con_send.transparent = 0;
 800307a:	4b0e      	ldr	r3, [pc, #56]	; (80030b4 <esp8266_send+0x60>)
 800307c:	2200      	movs	r2, #0
 800307e:	729a      	strb	r2, [r3, #10]
    cmd.payload.con_send.channel = 0;
 8003080:	4b0c      	ldr	r3, [pc, #48]	; (80030b4 <esp8266_send+0x60>)
 8003082:	2200      	movs	r2, #0
 8003084:	70da      	strb	r2, [r3, #3]
    at_send_cmd_blocking(&cmd, 2000);
 8003086:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800308a:	480a      	ldr	r0, [pc, #40]	; (80030b4 <esp8266_send+0x60>)
 800308c:	f7ff f9e6 	bl	800245c <at_send_cmd_blocking>

    hw_serial_tx(buffer, buffer_size);
 8003090:	88fb      	ldrh	r3, [r7, #6]
 8003092:	4619      	mov	r1, r3
 8003094:	68b8      	ldr	r0, [r7, #8]
 8003096:	f000 f919 	bl	80032cc <hw_serial_tx>

    bool result = cmd.status != AT_STATUS_OK ? false : true;
 800309a:	4b06      	ldr	r3, [pc, #24]	; (80030b4 <esp8266_send+0x60>)
 800309c:	7b5b      	ldrb	r3, [r3, #13]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	bf0c      	ite	eq
 80030a2:	2301      	moveq	r3, #1
 80030a4:	2300      	movne	r3, #0
 80030a6:	75fb      	strb	r3, [r7, #23]

    return result;
 80030a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3718      	adds	r7, #24
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop
 80030b4:	2000105c 	.word	0x2000105c

080030b8 <hw_esp_power_set>:
//		HAL_GPIO_WritePin(DSP_ON_GPIO_Port,DSP_ON_Pin,GPIO_PIN_RESET);
//	else
//		HAL_GPIO_WritePin(DSP_ON_GPIO_Port,DSP_ON_Pin,GPIO_PIN_SET);
}

void hw_esp_power_set(bool value){
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b082      	sub	sp, #8
 80030bc:	af00      	add	r7, sp, #0
 80030be:	4603      	mov	r3, r0
 80030c0:	71fb      	strb	r3, [r7, #7]
	if(value)
 80030c2:	79fb      	ldrb	r3, [r7, #7]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d006      	beq.n	80030d6 <hw_esp_power_set+0x1e>
		HAL_GPIO_WritePin(ESP_POWER_EN_GPIO_Port, ESP_POWER_EN_Pin, GPIO_PIN_RESET);
 80030c8:	2200      	movs	r2, #0
 80030ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80030ce:	4807      	ldr	r0, [pc, #28]	; (80030ec <hw_esp_power_set+0x34>)
 80030d0:	f005 f99e 	bl	8008410 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(ESP_POWER_EN_GPIO_Port, ESP_POWER_EN_Pin, GPIO_PIN_SET);
}
 80030d4:	e005      	b.n	80030e2 <hw_esp_power_set+0x2a>
		HAL_GPIO_WritePin(ESP_POWER_EN_GPIO_Port, ESP_POWER_EN_Pin, GPIO_PIN_SET);
 80030d6:	2201      	movs	r2, #1
 80030d8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80030dc:	4803      	ldr	r0, [pc, #12]	; (80030ec <hw_esp_power_set+0x34>)
 80030de:	f005 f997 	bl	8008410 <HAL_GPIO_WritePin>
}
 80030e2:	bf00      	nop
 80030e4:	3708      	adds	r7, #8
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	bf00      	nop
 80030ec:	48000400 	.word	0x48000400

080030f0 <hw_esp_reset_set>:

void hw_esp_reset_set(bool value){
 80030f0:	b480      	push	{r7}
 80030f2:	b083      	sub	sp, #12
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	4603      	mov	r3, r0
 80030f8:	71fb      	strb	r3, [r7, #7]
//	if(value)
//		HAL_GPIO_WritePin(ESP_RST_GPIO_Port,ESP_RST_Pin,GPIO_PIN_RESET);
//	else
//		HAL_GPIO_WritePin(ESP_RST_GPIO_Port,ESP_RST_Pin,GPIO_PIN_SET);
}
 80030fa:	bf00      	nop
 80030fc:	370c      	adds	r7, #12
 80030fe:	46bd      	mov	sp, r7
 8003100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003104:	4770      	bx	lr

08003106 <hw_esp_enable_set>:

void hw_esp_enable_set(bool value){
 8003106:	b580      	push	{r7, lr}
 8003108:	b082      	sub	sp, #8
 800310a:	af00      	add	r7, sp, #0
 800310c:	4603      	mov	r3, r0
 800310e:	71fb      	strb	r3, [r7, #7]
	if(value)
 8003110:	79fb      	ldrb	r3, [r7, #7]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d006      	beq.n	8003124 <hw_esp_enable_set+0x1e>
		HAL_GPIO_WritePin(ESP_EN_GPIO_Port, ESP_EN_Pin, GPIO_PIN_SET);
 8003116:	2201      	movs	r2, #1
 8003118:	2120      	movs	r1, #32
 800311a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800311e:	f005 f977 	bl	8008410 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(ESP_EN_GPIO_Port, ESP_EN_Pin, GPIO_PIN_RESET);
}
 8003122:	e005      	b.n	8003130 <hw_esp_enable_set+0x2a>
		HAL_GPIO_WritePin(ESP_EN_GPIO_Port, ESP_EN_Pin, GPIO_PIN_RESET);
 8003124:	2200      	movs	r2, #0
 8003126:	2120      	movs	r1, #32
 8003128:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800312c:	f005 f970 	bl	8008410 <HAL_GPIO_WritePin>
}
 8003130:	bf00      	nop
 8003132:	3708      	adds	r7, #8
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}

08003138 <hw_debug>:
#if 0
{
	CDC_Transmit_FS((uint8_t*)msg,len);
}
#else
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b084      	sub	sp, #16
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
 8003140:	460b      	mov	r3, r1
 8003142:	807b      	strh	r3, [r7, #2]
	static uint8_t col 	= 0;
	static uint8_t row 	= 0;
	uint8_t nrow 		= 0;
 8003144:	2300      	movs	r3, #0
 8003146:	73fb      	strb	r3, [r7, #15]
	int n;

	SSD1306_Goto(col*6, row);
 8003148:	4b34      	ldr	r3, [pc, #208]	; (800321c <hw_debug+0xe4>)
 800314a:	781b      	ldrb	r3, [r3, #0]
 800314c:	461a      	mov	r2, r3
 800314e:	0052      	lsls	r2, r2, #1
 8003150:	4413      	add	r3, r2
 8003152:	005b      	lsls	r3, r3, #1
 8003154:	b2da      	uxtb	r2, r3
 8003156:	4b32      	ldr	r3, [pc, #200]	; (8003220 <hw_debug+0xe8>)
 8003158:	781b      	ldrb	r3, [r3, #0]
 800315a:	4619      	mov	r1, r3
 800315c:	4610      	mov	r0, r2
 800315e:	f003 fc55 	bl	8006a0c <SSD1306_Goto>

	for(n = 0 ; n < len; n++){
 8003162:	2300      	movs	r3, #0
 8003164:	60bb      	str	r3, [r7, #8]
 8003166:	e051      	b.n	800320c <hw_debug+0xd4>
		if(msg[n] == '\n' || msg[n] == '\r'){
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	687a      	ldr	r2, [r7, #4]
 800316c:	4413      	add	r3, r2
 800316e:	781b      	ldrb	r3, [r3, #0]
 8003170:	2b0a      	cmp	r3, #10
 8003172:	d005      	beq.n	8003180 <hw_debug+0x48>
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	687a      	ldr	r2, [r7, #4]
 8003178:	4413      	add	r3, r2
 800317a:	781b      	ldrb	r3, [r3, #0]
 800317c:	2b0d      	cmp	r3, #13
 800317e:	d10c      	bne.n	800319a <hw_debug+0x62>
			nrow = (row+1) >= SSD1306_HEIGHT/8 ? 0 : row+1;
 8003180:	4b27      	ldr	r3, [pc, #156]	; (8003220 <hw_debug+0xe8>)
 8003182:	781b      	ldrb	r3, [r3, #0]
 8003184:	3301      	adds	r3, #1
 8003186:	2b07      	cmp	r3, #7
 8003188:	dc04      	bgt.n	8003194 <hw_debug+0x5c>
 800318a:	4b25      	ldr	r3, [pc, #148]	; (8003220 <hw_debug+0xe8>)
 800318c:	781b      	ldrb	r3, [r3, #0]
 800318e:	3301      	adds	r3, #1
 8003190:	b2db      	uxtb	r3, r3
 8003192:	e000      	b.n	8003196 <hw_debug+0x5e>
 8003194:	2300      	movs	r3, #0
 8003196:	73fb      	strb	r3, [r7, #15]
 8003198:	e020      	b.n	80031dc <hw_debug+0xa4>
		}
		else {
			SSD1306_Write_Char(msg[n], &SSD1306_Font_07X05);
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	687a      	ldr	r2, [r7, #4]
 800319e:	4413      	add	r3, r2
 80031a0:	781b      	ldrb	r3, [r3, #0]
 80031a2:	4920      	ldr	r1, [pc, #128]	; (8003224 <hw_debug+0xec>)
 80031a4:	4618      	mov	r0, r3
 80031a6:	f003 fc5f 	bl	8006a68 <SSD1306_Write_Char>
			col++;
 80031aa:	4b1c      	ldr	r3, [pc, #112]	; (800321c <hw_debug+0xe4>)
 80031ac:	781b      	ldrb	r3, [r3, #0]
 80031ae:	3301      	adds	r3, #1
 80031b0:	b2da      	uxtb	r2, r3
 80031b2:	4b1a      	ldr	r3, [pc, #104]	; (800321c <hw_debug+0xe4>)
 80031b4:	701a      	strb	r2, [r3, #0]
			if(col >= SSD1306_WIDTH/6){
 80031b6:	4b19      	ldr	r3, [pc, #100]	; (800321c <hw_debug+0xe4>)
 80031b8:	781b      	ldrb	r3, [r3, #0]
 80031ba:	2b14      	cmp	r3, #20
 80031bc:	d90e      	bls.n	80031dc <hw_debug+0xa4>
				col = 0;
 80031be:	4b17      	ldr	r3, [pc, #92]	; (800321c <hw_debug+0xe4>)
 80031c0:	2200      	movs	r2, #0
 80031c2:	701a      	strb	r2, [r3, #0]
				nrow = (row+1) >= SSD1306_HEIGHT/8 ? 0 : row+1;
 80031c4:	4b16      	ldr	r3, [pc, #88]	; (8003220 <hw_debug+0xe8>)
 80031c6:	781b      	ldrb	r3, [r3, #0]
 80031c8:	3301      	adds	r3, #1
 80031ca:	2b07      	cmp	r3, #7
 80031cc:	dc04      	bgt.n	80031d8 <hw_debug+0xa0>
 80031ce:	4b14      	ldr	r3, [pc, #80]	; (8003220 <hw_debug+0xe8>)
 80031d0:	781b      	ldrb	r3, [r3, #0]
 80031d2:	3301      	adds	r3, #1
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	e000      	b.n	80031da <hw_debug+0xa2>
 80031d8:	2300      	movs	r3, #0
 80031da:	73fb      	strb	r3, [r7, #15]
			}
		}

		if(row != nrow){
 80031dc:	4b10      	ldr	r3, [pc, #64]	; (8003220 <hw_debug+0xe8>)
 80031de:	781b      	ldrb	r3, [r3, #0]
 80031e0:	7bfa      	ldrb	r2, [r7, #15]
 80031e2:	429a      	cmp	r2, r3
 80031e4:	d00f      	beq.n	8003206 <hw_debug+0xce>
			row = nrow;
 80031e6:	4a0e      	ldr	r2, [pc, #56]	; (8003220 <hw_debug+0xe8>)
 80031e8:	7bfb      	ldrb	r3, [r7, #15]
 80031ea:	7013      	strb	r3, [r2, #0]
			SSD1306_Goto(col*6, row);
 80031ec:	4b0b      	ldr	r3, [pc, #44]	; (800321c <hw_debug+0xe4>)
 80031ee:	781b      	ldrb	r3, [r3, #0]
 80031f0:	461a      	mov	r2, r3
 80031f2:	0052      	lsls	r2, r2, #1
 80031f4:	4413      	add	r3, r2
 80031f6:	005b      	lsls	r3, r3, #1
 80031f8:	b2da      	uxtb	r2, r3
 80031fa:	4b09      	ldr	r3, [pc, #36]	; (8003220 <hw_debug+0xe8>)
 80031fc:	781b      	ldrb	r3, [r3, #0]
 80031fe:	4619      	mov	r1, r3
 8003200:	4610      	mov	r0, r2
 8003202:	f003 fc03 	bl	8006a0c <SSD1306_Goto>
	for(n = 0 ; n < len; n++){
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	3301      	adds	r3, #1
 800320a:	60bb      	str	r3, [r7, #8]
 800320c:	887b      	ldrh	r3, [r7, #2]
 800320e:	68ba      	ldr	r2, [r7, #8]
 8003210:	429a      	cmp	r2, r3
 8003212:	dba9      	blt.n	8003168 <hw_debug+0x30>
		}
	}
}
 8003214:	bf00      	nop
 8003216:	3710      	adds	r7, #16
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}
 800321c:	20000af2 	.word	0x20000af2
 8003220:	20000af3 	.word	0x20000af3
 8003224:	200000e4 	.word	0x200000e4

08003228 <USART2_IRQHandler>:
#endif

void USART2_IRQHandler(void){
 8003228:	b580      	push	{r7, lr}
 800322a:	b084      	sub	sp, #16
 800322c:	af00      	add	r7, sp, #0
    uint8_t c = 0;
 800322e:	2300      	movs	r3, #0
 8003230:	71fb      	strb	r3, [r7, #7]
    uint32_t sr;
    USART_TypeDef* h = UART_HANDLE.Instance;
 8003232:	4b16      	ldr	r3, [pc, #88]	; (800328c <USART2_IRQHandler+0x64>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	60bb      	str	r3, [r7, #8]

    // lê o status register e trata erros até que desapareçam
    // (o manual manda ler o SR e em seguida DR)

    sr = h->ISR;
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	69db      	ldr	r3, [r3, #28]
 800323c:	60fb      	str	r3, [r7, #12]

    while(sr & (UART_FLAG_ORE | UART_FLAG_PE | UART_FLAG_FE | UART_FLAG_NE)){
 800323e:	e005      	b.n	800324c <USART2_IRQHandler+0x24>
    	h->ICR = UART_CLEAR_OREF | UART_CLEAR_PEF | UART_CLEAR_FEF | UART_CLEAR_NEF;
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	220f      	movs	r2, #15
 8003244:	621a      	str	r2, [r3, #32]
    	sr = h->ISR;
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	69db      	ldr	r3, [r3, #28]
 800324a:	60fb      	str	r3, [r7, #12]
    while(sr & (UART_FLAG_ORE | UART_FLAG_PE | UART_FLAG_FE | UART_FLAG_NE)){
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	f003 030f 	and.w	r3, r3, #15
 8003252:	2b00      	cmp	r3, #0
 8003254:	d1f4      	bne.n	8003240 <USART2_IRQHandler+0x18>
        //c = h->RDR;
    }

    if(sr & UART_FLAG_RXNE){
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	f003 0320 	and.w	r3, r3, #32
 800325c:	2b00      	cmp	r3, #0
 800325e:	d011      	beq.n	8003284 <USART2_IRQHandler+0x5c>
        c = h->RDR;
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003264:	b29b      	uxth	r3, r3
 8003266:	b2db      	uxtb	r3, r3
 8003268:	71fb      	strb	r3, [r7, #7]

        if(hw_debug_enable)
 800326a:	4b09      	ldr	r3, [pc, #36]	; (8003290 <USART2_IRQHandler+0x68>)
 800326c:	781b      	ldrb	r3, [r3, #0]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d004      	beq.n	800327c <USART2_IRQHandler+0x54>
        	hw_debug(&c, 1);
 8003272:	1dfb      	adds	r3, r7, #7
 8003274:	2101      	movs	r1, #1
 8003276:	4618      	mov	r0, r3
 8003278:	f7ff ff5e 	bl	8003138 <hw_debug>

        at_rx_interrupt(c);
 800327c:	79fb      	ldrb	r3, [r7, #7]
 800327e:	4618      	mov	r0, r3
 8003280:	f7ff fc6c 	bl	8002b5c <at_rx_interrupt>
        // some action here
    }
}
 8003284:	bf00      	nop
 8003286:	3710      	adds	r7, #16
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}
 800328c:	20000bd0 	.word	0x20000bd0
 8003290:	20000af1 	.word	0x20000af1

08003294 <hw_serial_send_byte>:

static void hw_serial_send_byte(uint8_t c){
 8003294:	b480      	push	{r7}
 8003296:	b085      	sub	sp, #20
 8003298:	af00      	add	r7, sp, #0
 800329a:	4603      	mov	r3, r0
 800329c:	71fb      	strb	r3, [r7, #7]
	USART_TypeDef* h = UART_HANDLE.Instance;
 800329e:	4b0a      	ldr	r3, [pc, #40]	; (80032c8 <hw_serial_send_byte+0x34>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	60fb      	str	r3, [r7, #12]
	while( !(h->ISR & UART_FLAG_TXE) ) {}
 80032a4:	bf00      	nop
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	69db      	ldr	r3, [r3, #28]
 80032aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d0f9      	beq.n	80032a6 <hw_serial_send_byte+0x12>
	h->TDR = c;
 80032b2:	79fb      	ldrb	r3, [r7, #7]
 80032b4:	b29a      	uxth	r2, r3
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	851a      	strh	r2, [r3, #40]	; 0x28
}
 80032ba:	bf00      	nop
 80032bc:	3714      	adds	r7, #20
 80032be:	46bd      	mov	sp, r7
 80032c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c4:	4770      	bx	lr
 80032c6:	bf00      	nop
 80032c8:	20000bd0 	.word	0x20000bd0

080032cc <hw_serial_tx>:

uint32_t hw_serial_tx(const uint8_t* str, uint16_t len){
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b084      	sub	sp, #16
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
 80032d4:	460b      	mov	r3, r1
 80032d6:	807b      	strh	r3, [r7, #2]
	uint16_t n;

	if(hw_debug_enable)
 80032d8:	4b0f      	ldr	r3, [pc, #60]	; (8003318 <hw_serial_tx+0x4c>)
 80032da:	781b      	ldrb	r3, [r3, #0]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d004      	beq.n	80032ea <hw_serial_tx+0x1e>
		hw_debug(str, len);
 80032e0:	887b      	ldrh	r3, [r7, #2]
 80032e2:	4619      	mov	r1, r3
 80032e4:	6878      	ldr	r0, [r7, #4]
 80032e6:	f7ff ff27 	bl	8003138 <hw_debug>

	for(n = 0 ; n < len ; n++)
 80032ea:	2300      	movs	r3, #0
 80032ec:	81fb      	strh	r3, [r7, #14]
 80032ee:	e009      	b.n	8003304 <hw_serial_tx+0x38>
		hw_serial_send_byte(str[n]);
 80032f0:	89fb      	ldrh	r3, [r7, #14]
 80032f2:	687a      	ldr	r2, [r7, #4]
 80032f4:	4413      	add	r3, r2
 80032f6:	781b      	ldrb	r3, [r3, #0]
 80032f8:	4618      	mov	r0, r3
 80032fa:	f7ff ffcb 	bl	8003294 <hw_serial_send_byte>
	for(n = 0 ; n < len ; n++)
 80032fe:	89fb      	ldrh	r3, [r7, #14]
 8003300:	3301      	adds	r3, #1
 8003302:	81fb      	strh	r3, [r7, #14]
 8003304:	89fa      	ldrh	r2, [r7, #14]
 8003306:	887b      	ldrh	r3, [r7, #2]
 8003308:	429a      	cmp	r2, r3
 800330a:	d3f1      	bcc.n	80032f0 <hw_serial_tx+0x24>

	return len;
 800330c:	887b      	ldrh	r3, [r7, #2]
}
 800330e:	4618      	mov	r0, r3
 8003310:	3710      	adds	r7, #16
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}
 8003316:	bf00      	nop
 8003318:	20000af1 	.word	0x20000af1

0800331c <hw_time_get>:

uint32_t hw_time_get(void){
 800331c:	b580      	push	{r7, lr}
 800331e:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 8003320:	f004 fda4 	bl	8007e6c <HAL_GetTick>
 8003324:	4603      	mov	r3, r0
}
 8003326:	4618      	mov	r0, r3
 8003328:	bd80      	pop	{r7, pc}

0800332a <hw_time_elapsed>:

uint32_t hw_time_elapsed(uint32_t tmr_old_ms, uint32_t tmr_new_ms){
 800332a:	b480      	push	{r7}
 800332c:	b085      	sub	sp, #20
 800332e:	af00      	add	r7, sp, #0
 8003330:	6078      	str	r0, [r7, #4]
 8003332:	6039      	str	r1, [r7, #0]
    uint32_t elapsed_ms;

    if(tmr_new_ms < tmr_old_ms)
 8003334:	683a      	ldr	r2, [r7, #0]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	429a      	cmp	r2, r3
 800333a:	d204      	bcs.n	8003346 <hw_time_elapsed+0x1c>
        elapsed_ms = UINT32_MAX - tmr_old_ms + tmr_new_ms + 1;
 800333c:	683a      	ldr	r2, [r7, #0]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	1ad3      	subs	r3, r2, r3
 8003342:	60fb      	str	r3, [r7, #12]
 8003344:	e003      	b.n	800334e <hw_time_elapsed+0x24>
    else
        elapsed_ms = tmr_new_ms - tmr_old_ms;
 8003346:	683a      	ldr	r2, [r7, #0]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	1ad3      	subs	r3, r2, r3
 800334c:	60fb      	str	r3, [r7, #12]

    return elapsed_ms;
 800334e:	68fb      	ldr	r3, [r7, #12]
}
 8003350:	4618      	mov	r0, r3
 8003352:	3714      	adds	r7, #20
 8003354:	46bd      	mov	sp, r7
 8003356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335a:	4770      	bx	lr

0800335c <hw_time_sleep>:

void hw_time_sleep(uint32_t tmr_ms){
 800335c:	b580      	push	{r7, lr}
 800335e:	b084      	sub	sp, #16
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
    uint32_t tmr_new_ms;
    uint32_t tmr_old_ms = hw_time_get();
 8003364:	f7ff ffda 	bl	800331c <hw_time_get>
 8003368:	60f8      	str	r0, [r7, #12]

    do{
        tmr_new_ms = hw_time_get();
 800336a:	f7ff ffd7 	bl	800331c <hw_time_get>
 800336e:	60b8      	str	r0, [r7, #8]
    } while(hw_time_elapsed(tmr_old_ms, tmr_new_ms) < tmr_ms);
 8003370:	68b9      	ldr	r1, [r7, #8]
 8003372:	68f8      	ldr	r0, [r7, #12]
 8003374:	f7ff ffd9 	bl	800332a <hw_time_elapsed>
 8003378:	4602      	mov	r2, r0
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	4293      	cmp	r3, r2
 800337e:	d8f4      	bhi.n	800336a <hw_time_sleep+0xe>
}
 8003380:	bf00      	nop
 8003382:	3710      	adds	r7, #16
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}

08003388 <hw_uart_init>:

void hw_debug_set(bool state){
	hw_debug_enable = state;
}

void hw_uart_init(void){
 8003388:	b580      	push	{r7, lr}
 800338a:	af00      	add	r7, sp, #0
	UART_HANDLE.Instance->CR3 |= USART_CR3_EIE;
 800338c:	4b0c      	ldr	r3, [pc, #48]	; (80033c0 <hw_uart_init+0x38>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	689a      	ldr	r2, [r3, #8]
 8003392:	4b0b      	ldr	r3, [pc, #44]	; (80033c0 <hw_uart_init+0x38>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f042 0201 	orr.w	r2, r2, #1
 800339a:	609a      	str	r2, [r3, #8]
	UART_HANDLE.Instance->CR1 |= USART_CR1_PEIE | USART_CR1_RXNEIE;
 800339c:	4b08      	ldr	r3, [pc, #32]	; (80033c0 <hw_uart_init+0x38>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	4b07      	ldr	r3, [pc, #28]	; (80033c0 <hw_uart_init+0x38>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 80033aa:	601a      	str	r2, [r3, #0]
	HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 80033ac:	2200      	movs	r2, #0
 80033ae:	2101      	movs	r1, #1
 80033b0:	2026      	movs	r0, #38	; 0x26
 80033b2:	f004 fe64 	bl	800807e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART2_IRQn);
 80033b6:	2026      	movs	r0, #38	; 0x26
 80033b8:	f004 fe7d 	bl	80080b6 <HAL_NVIC_EnableIRQ>
}
 80033bc:	bf00      	nop
 80033be:	bd80      	pop	{r7, pc}
 80033c0:	20000bd0 	.word	0x20000bd0

080033c4 <_times>:
int _unlink(char* name){
	errno = ENOENT;
	return -1;
}

int _times(struct tms *buf){
 80033c4:	b480      	push	{r7}
 80033c6:	b083      	sub	sp, #12
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
	return -1;
 80033cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	370c      	adds	r7, #12
 80033d4:	46bd      	mov	sp, r7
 80033d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033da:	4770      	bx	lr

080033dc <_sbrk>:

/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr){
 80033dc:	b580      	push	{r7, lr}
 80033de:	b084      	sub	sp, #16
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80033e4:	4b11      	ldr	r3, [pc, #68]	; (800342c <_sbrk+0x50>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d102      	bne.n	80033f2 <_sbrk+0x16>
		heap_end = &end;
 80033ec:	4b0f      	ldr	r3, [pc, #60]	; (800342c <_sbrk+0x50>)
 80033ee:	4a10      	ldr	r2, [pc, #64]	; (8003430 <_sbrk+0x54>)
 80033f0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80033f2:	4b0e      	ldr	r3, [pc, #56]	; (800342c <_sbrk+0x50>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr){
 80033f8:	4b0c      	ldr	r3, [pc, #48]	; (800342c <_sbrk+0x50>)
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	4413      	add	r3, r2
 8003400:	466a      	mov	r2, sp
 8003402:	4293      	cmp	r3, r2
 8003404:	d907      	bls.n	8003416 <_sbrk+0x3a>
		errno = ENOMEM;
 8003406:	f007 fda1 	bl	800af4c <__errno>
 800340a:	4602      	mov	r2, r0
 800340c:	230c      	movs	r3, #12
 800340e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8003410:	f04f 33ff 	mov.w	r3, #4294967295
 8003414:	e006      	b.n	8003424 <_sbrk+0x48>
	}

	heap_end += incr;
 8003416:	4b05      	ldr	r3, [pc, #20]	; (800342c <_sbrk+0x50>)
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	4413      	add	r3, r2
 800341e:	4a03      	ldr	r2, [pc, #12]	; (800342c <_sbrk+0x50>)
 8003420:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8003422:	68fb      	ldr	r3, [r7, #12]
}
 8003424:	4618      	mov	r0, r3
 8003426:	3710      	adds	r7, #16
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}
 800342c:	20000af4 	.word	0x20000af4
 8003430:	20001080 	.word	0x20001080

08003434 <assembler_build_to_control_packet>:
#include <mqtt_client/assembler.h>

control_packet* assembler_build_to_control_packet(bytes* bytes){
 8003434:	b580      	push	{r7, lr}
 8003436:	b084      	sub	sp, #16
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
	if( bytes == NULL ) return NULL;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d101      	bne.n	8003446 <assembler_build_to_control_packet+0x12>
 8003442:	2300      	movs	r3, #0
 8003444:	e020      	b.n	8003488 <assembler_build_to_control_packet+0x54>
	control_packet* result = (control_packet*) malloc(sizeof(control_packet));
 8003446:	2006      	movs	r0, #6
 8003448:	f007 fdaa 	bl	800afa0 <malloc>
 800344c:	4603      	mov	r3, r0
 800344e:	60fb      	str	r3, [r7, #12]

	unsigned char typeAndFlags	= bytes_at(bytes, 0);
 8003450:	2100      	movs	r1, #0
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f000 fa61 	bl	800391a <bytes_at>
 8003458:	4603      	mov	r3, r0
 800345a:	72fb      	strb	r3, [r7, #11]
	result->type                	= typeAndFlags & 0xF0;
 800345c:	7afb      	ldrb	r3, [r7, #11]
 800345e:	f023 030f 	bic.w	r3, r3, #15
 8003462:	b2da      	uxtb	r2, r3
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	701a      	strb	r2, [r3, #0]
	result->flags               	= typeAndFlags & 0x0F;
 8003468:	7afb      	ldrb	r3, [r7, #11]
 800346a:	f003 030f 	and.w	r3, r3, #15
 800346e:	b2da      	uxtb	r2, r3
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	705a      	strb	r2, [r3, #1]
	result->remaining_length    	= bytes_at(bytes, 1);
 8003474:	2101      	movs	r1, #1
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f000 fa4f 	bl	800391a <bytes_at>
 800347c:	4603      	mov	r3, r0
 800347e:	461a      	mov	r2, r3
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	f8c3 2002 	str.w	r2, [r3, #2]

	return result;
 8003486:	68fb      	ldr	r3, [r7, #12]
}
 8003488:	4618      	mov	r0, r3
 800348a:	3710      	adds	r7, #16
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}

08003490 <assembler_build_to_connect>:
	result->clean_session = bytes_at(bytes, 2) == 0x00 ? true : false;
	result->return_code = bytes_at(bytes, 3);
	return result;
}

connect* assembler_build_to_connect(bytes* bytes){
 8003490:	b590      	push	{r4, r7, lr}
 8003492:	b089      	sub	sp, #36	; 0x24
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
	if( bytes == NULL ) return NULL;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d101      	bne.n	80034a2 <assembler_build_to_connect+0x12>
 800349e:	2300      	movs	r3, #0
 80034a0:	e0ea      	b.n	8003678 <assembler_build_to_connect+0x1e8>
	connect* result = (connect*) malloc(sizeof(connect));
 80034a2:	201e      	movs	r0, #30
 80034a4:	f007 fd7c 	bl	800afa0 <malloc>
 80034a8:	4603      	mov	r3, r0
 80034aa:	61fb      	str	r3, [r7, #28]
	result->control_packet = assembler_build_to_control_packet(bytes);
 80034ac:	6878      	ldr	r0, [r7, #4]
 80034ae:	f7ff ffc1 	bl	8003434 <assembler_build_to_control_packet>
 80034b2:	4602      	mov	r2, r0
 80034b4:	69fb      	ldr	r3, [r7, #28]
 80034b6:	601a      	str	r2, [r3, #0]

	unsigned int index = 2;
 80034b8:	2302      	movs	r3, #2
 80034ba:	60fb      	str	r3, [r7, #12]

	// Protocol Name
	result->variable_header = bytes_init();
 80034bc:	f000 f9bc 	bl	8003838 <bytes_init>
 80034c0:	4602      	mov	r2, r0
 80034c2:	69fb      	ldr	r3, [r7, #28]
 80034c4:	605a      	str	r2, [r3, #4]
	bytes_push_back( result->variable_header, (unsigned char) bytes_at(bytes, (index++)) );
 80034c6:	69fb      	ldr	r3, [r7, #28]
 80034c8:	685c      	ldr	r4, [r3, #4]
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	1c5a      	adds	r2, r3, #1
 80034ce:	60fa      	str	r2, [r7, #12]
 80034d0:	4619      	mov	r1, r3
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	f000 fa21 	bl	800391a <bytes_at>
 80034d8:	4603      	mov	r3, r0
 80034da:	4619      	mov	r1, r3
 80034dc:	4620      	mov	r0, r4
 80034de:	f000 fa4a 	bl	8003976 <bytes_push_back>
	bytes_push_back( result->variable_header, (unsigned char) bytes_at(bytes, (index++)) );
 80034e2:	69fb      	ldr	r3, [r7, #28]
 80034e4:	685c      	ldr	r4, [r3, #4]
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	1c5a      	adds	r2, r3, #1
 80034ea:	60fa      	str	r2, [r7, #12]
 80034ec:	4619      	mov	r1, r3
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f000 fa13 	bl	800391a <bytes_at>
 80034f4:	4603      	mov	r3, r0
 80034f6:	4619      	mov	r1, r3
 80034f8:	4620      	mov	r0, r4
 80034fa:	f000 fa3c 	bl	8003976 <bytes_push_back>
	bytes_push_back( result->variable_header, (unsigned char) bytes_at(bytes, (index++)) );
 80034fe:	69fb      	ldr	r3, [r7, #28]
 8003500:	685c      	ldr	r4, [r3, #4]
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	1c5a      	adds	r2, r3, #1
 8003506:	60fa      	str	r2, [r7, #12]
 8003508:	4619      	mov	r1, r3
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f000 fa05 	bl	800391a <bytes_at>
 8003510:	4603      	mov	r3, r0
 8003512:	4619      	mov	r1, r3
 8003514:	4620      	mov	r0, r4
 8003516:	f000 fa2e 	bl	8003976 <bytes_push_back>
	bytes_push_back( result->variable_header, (unsigned char) bytes_at(bytes, (index++)) );
 800351a:	69fb      	ldr	r3, [r7, #28]
 800351c:	685c      	ldr	r4, [r3, #4]
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	1c5a      	adds	r2, r3, #1
 8003522:	60fa      	str	r2, [r7, #12]
 8003524:	4619      	mov	r1, r3
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f000 f9f7 	bl	800391a <bytes_at>
 800352c:	4603      	mov	r3, r0
 800352e:	4619      	mov	r1, r3
 8003530:	4620      	mov	r0, r4
 8003532:	f000 fa20 	bl	8003976 <bytes_push_back>
	bytes_push_back( result->variable_header, (unsigned char) bytes_at(bytes, (index++)) );
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	685c      	ldr	r4, [r3, #4]
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	1c5a      	adds	r2, r3, #1
 800353e:	60fa      	str	r2, [r7, #12]
 8003540:	4619      	mov	r1, r3
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f000 f9e9 	bl	800391a <bytes_at>
 8003548:	4603      	mov	r3, r0
 800354a:	4619      	mov	r1, r3
 800354c:	4620      	mov	r0, r4
 800354e:	f000 fa12 	bl	8003976 <bytes_push_back>
	bytes_push_back( result->variable_header, (unsigned char) bytes_at(bytes, (index++)) );
 8003552:	69fb      	ldr	r3, [r7, #28]
 8003554:	685c      	ldr	r4, [r3, #4]
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	1c5a      	adds	r2, r3, #1
 800355a:	60fa      	str	r2, [r7, #12]
 800355c:	4619      	mov	r1, r3
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f000 f9db 	bl	800391a <bytes_at>
 8003564:	4603      	mov	r3, r0
 8003566:	4619      	mov	r1, r3
 8003568:	4620      	mov	r0, r4
 800356a:	f000 fa04 	bl	8003976 <bytes_push_back>

	// Protocol Level
	bytes_push_back( result->variable_header, (unsigned char) bytes_at(bytes, (index++)) );
 800356e:	69fb      	ldr	r3, [r7, #28]
 8003570:	685c      	ldr	r4, [r3, #4]
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	1c5a      	adds	r2, r3, #1
 8003576:	60fa      	str	r2, [r7, #12]
 8003578:	4619      	mov	r1, r3
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f000 f9cd 	bl	800391a <bytes_at>
 8003580:	4603      	mov	r3, r0
 8003582:	4619      	mov	r1, r3
 8003584:	4620      	mov	r0, r4
 8003586:	f000 f9f6 	bl	8003976 <bytes_push_back>

	// Flags
	bytes_push_back( result->variable_header, (unsigned char) bytes_at(bytes, (index++)));
 800358a:	69fb      	ldr	r3, [r7, #28]
 800358c:	685c      	ldr	r4, [r3, #4]
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	1c5a      	adds	r2, r3, #1
 8003592:	60fa      	str	r2, [r7, #12]
 8003594:	4619      	mov	r1, r3
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f000 f9bf 	bl	800391a <bytes_at>
 800359c:	4603      	mov	r3, r0
 800359e:	4619      	mov	r1, r3
 80035a0:	4620      	mov	r0, r4
 80035a2:	f000 f9e8 	bl	8003976 <bytes_push_back>

	// Keep Alive
	unsigned int msb_keep_alive = (unsigned int) (bytes_at(bytes, (index++)) << 8);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	1c5a      	adds	r2, r3, #1
 80035aa:	60fa      	str	r2, [r7, #12]
 80035ac:	4619      	mov	r1, r3
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f000 f9b3 	bl	800391a <bytes_at>
 80035b4:	4603      	mov	r3, r0
 80035b6:	021b      	lsls	r3, r3, #8
 80035b8:	61bb      	str	r3, [r7, #24]
	unsigned int lsb_keep_alive = (unsigned int) bytes_at(bytes, (index++));
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	1c5a      	adds	r2, r3, #1
 80035be:	60fa      	str	r2, [r7, #12]
 80035c0:	4619      	mov	r1, r3
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f000 f9a9 	bl	800391a <bytes_at>
 80035c8:	4603      	mov	r3, r0
 80035ca:	617b      	str	r3, [r7, #20]
	result->keep_alive = msb_keep_alive + lsb_keep_alive;
 80035cc:	69bb      	ldr	r3, [r7, #24]
 80035ce:	b29a      	uxth	r2, r3
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	b29b      	uxth	r3, r3
 80035d4:	4413      	add	r3, r2
 80035d6:	b29a      	uxth	r2, r3
 80035d8:	69fb      	ldr	r3, [r7, #28]
 80035da:	811a      	strh	r2, [r3, #8]

	// Client Identifier
	result->client_identifier = packet_util_build_string(bytes, &index);
 80035dc:	f107 030c 	add.w	r3, r7, #12
 80035e0:	4619      	mov	r1, r3
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f001 fb90 	bl	8004d08 <packet_util_build_string>
 80035e8:	4602      	mov	r2, r0
 80035ea:	69fb      	ldr	r3, [r7, #28]
 80035ec:	f8c3 200a 	str.w	r2, [r3, #10]

	// Flags
	unsigned char flags = bytes_at(result->variable_header, 7);
 80035f0:	69fb      	ldr	r3, [r7, #28]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	2107      	movs	r1, #7
 80035f6:	4618      	mov	r0, r3
 80035f8:	f000 f98f 	bl	800391a <bytes_at>
 80035fc:	4603      	mov	r3, r0
 80035fe:	74fb      	strb	r3, [r7, #19]
	if ( flags & ( 0x01 << 2 ) ){
 8003600:	7cfb      	ldrb	r3, [r7, #19]
 8003602:	f003 0304 	and.w	r3, r3, #4
 8003606:	2b00      	cmp	r3, #0
 8003608:	d035      	beq.n	8003676 <assembler_build_to_connect+0x1e6>
		result->will_topic = packet_util_build_string(bytes, &index);
 800360a:	f107 030c 	add.w	r3, r7, #12
 800360e:	4619      	mov	r1, r3
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	f001 fb79 	bl	8004d08 <packet_util_build_string>
 8003616:	4602      	mov	r2, r0
 8003618:	69fb      	ldr	r3, [r7, #28]
 800361a:	f8c3 200e 	str.w	r2, [r3, #14]
		if ( flags & ( 0x01 << 2 ) )
 800361e:	7cfb      	ldrb	r3, [r7, #19]
 8003620:	f003 0304 	and.w	r3, r3, #4
 8003624:	2b00      	cmp	r3, #0
 8003626:	d009      	beq.n	800363c <assembler_build_to_connect+0x1ac>
			result->will_message = packet_util_build_string(bytes, &index);
 8003628:	f107 030c 	add.w	r3, r7, #12
 800362c:	4619      	mov	r1, r3
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f001 fb6a 	bl	8004d08 <packet_util_build_string>
 8003634:	4602      	mov	r2, r0
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	f8c3 2012 	str.w	r2, [r3, #18]
		if ( flags & ( 0x01 << 7 ) ){
 800363c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8003640:	2b00      	cmp	r3, #0
 8003642:	da18      	bge.n	8003676 <assembler_build_to_connect+0x1e6>
			result->username = packet_util_build_string(bytes, &index);
 8003644:	f107 030c 	add.w	r3, r7, #12
 8003648:	4619      	mov	r1, r3
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f001 fb5c 	bl	8004d08 <packet_util_build_string>
 8003650:	4602      	mov	r2, r0
 8003652:	69fb      	ldr	r3, [r7, #28]
 8003654:	f8c3 2016 	str.w	r2, [r3, #22]
			if ( flags & ( 0x01 << 6 ) )
 8003658:	7cfb      	ldrb	r3, [r7, #19]
 800365a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800365e:	2b00      	cmp	r3, #0
 8003660:	d009      	beq.n	8003676 <assembler_build_to_connect+0x1e6>
				result->password = packet_util_build_string(bytes, &index);
 8003662:	f107 030c 	add.w	r3, r7, #12
 8003666:	4619      	mov	r1, r3
 8003668:	6878      	ldr	r0, [r7, #4]
 800366a:	f001 fb4d 	bl	8004d08 <packet_util_build_string>
 800366e:	4602      	mov	r2, r0
 8003670:	69fb      	ldr	r3, [r7, #28]
 8003672:	f8c3 201a 	str.w	r2, [r3, #26]
		}
	}

	return result;
 8003676:	69fb      	ldr	r3, [r7, #28]
}
 8003678:	4618      	mov	r0, r3
 800367a:	3724      	adds	r7, #36	; 0x24
 800367c:	46bd      	mov	sp, r7
 800367e:	bd90      	pop	{r4, r7, pc}

08003680 <assembler_build_to_publish>:
	unsigned int lsb_packet_identifier = (unsigned int) bytes_at(bytes, 3);
	result->packet_identifier = msb_packet_identifier + lsb_packet_identifier;
	return result;
}

publish* assembler_build_to_publish(bytes* bytes){
 8003680:	b580      	push	{r7, lr}
 8003682:	b086      	sub	sp, #24
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
	if( bytes == NULL ) return NULL;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d101      	bne.n	8003692 <assembler_build_to_publish+0x12>
 800368e:	2300      	movs	r3, #0
 8003690:	e06e      	b.n	8003770 <assembler_build_to_publish+0xf0>

	publish* result = (publish*) malloc(sizeof(publish));
 8003692:	2011      	movs	r0, #17
 8003694:	f007 fc84 	bl	800afa0 <malloc>
 8003698:	4603      	mov	r3, r0
 800369a:	617b      	str	r3, [r7, #20]
	result->dup       	= control_packet_get_flags(result->control_packet) & 0x08 ? true : false;
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4618      	mov	r0, r3
 80036a2:	f000 fe55 	bl	8004350 <control_packet_get_flags>
 80036a6:	4603      	mov	r3, r0
 80036a8:	f003 0308 	and.w	r3, r3, #8
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	bf14      	ite	ne
 80036b0:	2301      	movne	r3, #1
 80036b2:	2300      	moveq	r3, #0
 80036b4:	b2da      	uxtb	r2, r3
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	711a      	strb	r2, [r3, #4]
	result->qos_level 	= (unsigned char) ( (control_packet_get_flags(result->control_packet) & 0x06) >> 1 );
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4618      	mov	r0, r3
 80036c0:	f000 fe46 	bl	8004350 <control_packet_get_flags>
 80036c4:	4603      	mov	r3, r0
 80036c6:	105b      	asrs	r3, r3, #1
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	f003 0303 	and.w	r3, r3, #3
 80036ce:	b2da      	uxtb	r2, r3
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	715a      	strb	r2, [r3, #5]
	result->retain    	= control_packet_get_flags(result->control_packet) & 0x01 ? true : false;
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4618      	mov	r0, r3
 80036da:	f000 fe39 	bl	8004350 <control_packet_get_flags>
 80036de:	4603      	mov	r3, r0
 80036e0:	f003 0301 	and.w	r3, r3, #1
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	bf14      	ite	ne
 80036e8:	2301      	movne	r3, #1
 80036ea:	2300      	moveq	r3, #0
 80036ec:	b2da      	uxtb	r2, r3
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	719a      	strb	r2, [r3, #6]

	unsigned int index = 2;
 80036f2:	2302      	movs	r3, #2
 80036f4:	60bb      	str	r3, [r7, #8]
	result->topic_name = packet_util_build_string(bytes, &index);
 80036f6:	f107 0308 	add.w	r3, r7, #8
 80036fa:	4619      	mov	r1, r3
 80036fc:	6878      	ldr	r0, [r7, #4]
 80036fe:	f001 fb03 	bl	8004d08 <packet_util_build_string>
 8003702:	4602      	mov	r2, r0
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	f8c3 2007 	str.w	r2, [r3, #7]
	if( result->qos_level == PUBLISH_QOS_LEVEL_1 || result->qos_level == PUBLISH_QOS_LEVEL_2 ) {
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	795a      	ldrb	r2, [r3, #5]
 800370e:	4b1a      	ldr	r3, [pc, #104]	; (8003778 <assembler_build_to_publish+0xf8>)
 8003710:	781b      	ldrb	r3, [r3, #0]
 8003712:	429a      	cmp	r2, r3
 8003714:	d005      	beq.n	8003722 <assembler_build_to_publish+0xa2>
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	795a      	ldrb	r2, [r3, #5]
 800371a:	4b18      	ldr	r3, [pc, #96]	; (800377c <assembler_build_to_publish+0xfc>)
 800371c:	781b      	ldrb	r3, [r3, #0]
 800371e:	429a      	cmp	r2, r3
 8003720:	d11b      	bne.n	800375a <assembler_build_to_publish+0xda>
		unsigned int msb_packet_identifier = (unsigned int) ( bytes_at(bytes,index++) << 8 );
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	1c5a      	adds	r2, r3, #1
 8003726:	60ba      	str	r2, [r7, #8]
 8003728:	4619      	mov	r1, r3
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f000 f8f5 	bl	800391a <bytes_at>
 8003730:	4603      	mov	r3, r0
 8003732:	021b      	lsls	r3, r3, #8
 8003734:	613b      	str	r3, [r7, #16]
		unsigned int lsb_packet_identifier = (unsigned int) bytes_at(bytes, index++);
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	1c5a      	adds	r2, r3, #1
 800373a:	60ba      	str	r2, [r7, #8]
 800373c:	4619      	mov	r1, r3
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f000 f8eb 	bl	800391a <bytes_at>
 8003744:	4603      	mov	r3, r0
 8003746:	60fb      	str	r3, [r7, #12]
		result->packet_identifier = msb_packet_identifier + lsb_packet_identifier;
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	b29a      	uxth	r2, r3
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	b29b      	uxth	r3, r3
 8003750:	4413      	add	r3, r2
 8003752:	b29a      	uxth	r2, r3
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	f8a3 200b 	strh.w	r2, [r3, #11]
	}

	result->payload = packet_util_build_string(bytes, &index);
 800375a:	f107 0308 	add.w	r3, r7, #8
 800375e:	4619      	mov	r1, r3
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	f001 fad1 	bl	8004d08 <packet_util_build_string>
 8003766:	4602      	mov	r2, r0
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	f8c3 200d 	str.w	r2, [r3, #13]

	return result;
 800376e:	697b      	ldr	r3, [r7, #20]
}
 8003770:	4618      	mov	r0, r3
 8003772:	3718      	adds	r7, #24
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}
 8003778:	200000e0 	.word	0x200000e0
 800377c:	200000e1 	.word	0x200000e1

08003780 <assembler_build_to_pub_rel>:
	unsigned int lsb_packet_identifier = (unsigned int) bytes_at(bytes, 3);
	result->packet_identifier = msb_packet_identifier + lsb_packet_identifier;
	return result;
}

pub_rel* assembler_build_to_pub_rel(bytes* bytes){
 8003780:	b580      	push	{r7, lr}
 8003782:	b086      	sub	sp, #24
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
	if( bytes == NULL ) return NULL;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d101      	bne.n	8003792 <assembler_build_to_pub_rel+0x12>
 800378e:	2300      	movs	r3, #0
 8003790:	e01d      	b.n	80037ce <assembler_build_to_pub_rel+0x4e>
	pub_rel* result = (pub_rel*) malloc(sizeof(pub_rel));
 8003792:	2008      	movs	r0, #8
 8003794:	f007 fc04 	bl	800afa0 <malloc>
 8003798:	4603      	mov	r3, r0
 800379a:	617b      	str	r3, [r7, #20]
	result->control_packet = assembler_build_to_control_packet(bytes);
 800379c:	6878      	ldr	r0, [r7, #4]
 800379e:	f7ff fe49 	bl	8003434 <assembler_build_to_control_packet>
 80037a2:	4602      	mov	r2, r0
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	601a      	str	r2, [r3, #0]
	unsigned int msb_packet_identifier = (unsigned int) ( bytes_at(bytes, 2) << 8);
 80037a8:	2102      	movs	r1, #2
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f000 f8b5 	bl	800391a <bytes_at>
 80037b0:	4603      	mov	r3, r0
 80037b2:	021b      	lsls	r3, r3, #8
 80037b4:	613b      	str	r3, [r7, #16]
	unsigned int lsb_packet_identifier = (unsigned int) bytes_at(bytes, 3);
 80037b6:	2103      	movs	r1, #3
 80037b8:	6878      	ldr	r0, [r7, #4]
 80037ba:	f000 f8ae 	bl	800391a <bytes_at>
 80037be:	4603      	mov	r3, r0
 80037c0:	60fb      	str	r3, [r7, #12]
	result->packet_identifier = msb_packet_identifier + lsb_packet_identifier;
 80037c2:	693a      	ldr	r2, [r7, #16]
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	441a      	add	r2, r3
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	605a      	str	r2, [r3, #4]
	return result;
 80037cc:	697b      	ldr	r3, [r7, #20]
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	3718      	adds	r7, #24
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}

080037d6 <node_init>:
#include <mqtt_client/bytes.h>

node* node_init(const unsigned char value, node* previous, node* next){
 80037d6:	b580      	push	{r7, lr}
 80037d8:	b086      	sub	sp, #24
 80037da:	af00      	add	r7, sp, #0
 80037dc:	4603      	mov	r3, r0
 80037de:	60b9      	str	r1, [r7, #8]
 80037e0:	607a      	str	r2, [r7, #4]
 80037e2:	73fb      	strb	r3, [r7, #15]
	node* result = (node*) malloc(sizeof(node));
 80037e4:	200c      	movs	r0, #12
 80037e6:	f007 fbdb 	bl	800afa0 <malloc>
 80037ea:	4603      	mov	r3, r0
 80037ec:	617b      	str	r3, [r7, #20]
	result->value = value;
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	7bfa      	ldrb	r2, [r7, #15]
 80037f2:	701a      	strb	r2, [r3, #0]
	result->previous = previous;
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	68ba      	ldr	r2, [r7, #8]
 80037f8:	605a      	str	r2, [r3, #4]
	result->next = next;
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	687a      	ldr	r2, [r7, #4]
 80037fe:	609a      	str	r2, [r3, #8]
	return result;
 8003800:	697b      	ldr	r3, [r7, #20]
}
 8003802:	4618      	mov	r0, r3
 8003804:	3718      	adds	r7, #24
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}

0800380a <node_destroy>:

void node_destroy(node* node){
 800380a:	b580      	push	{r7, lr}
 800380c:	b082      	sub	sp, #8
 800380e:	af00      	add	r7, sp, #0
 8003810:	6078      	str	r0, [r7, #4]
	if( node == NULL ) return;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d00b      	beq.n	8003830 <node_destroy+0x26>
	node->previous = NULL;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2200      	movs	r2, #0
 800381c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2200      	movs	r2, #0
 8003822:	609a      	str	r2, [r3, #8]
	free(node);
 8003824:	6878      	ldr	r0, [r7, #4]
 8003826:	f007 fbc3 	bl	800afb0 <free>
	node = NULL;
 800382a:	2300      	movs	r3, #0
 800382c:	607b      	str	r3, [r7, #4]
 800382e:	e000      	b.n	8003832 <node_destroy+0x28>
	if( node == NULL ) return;
 8003830:	bf00      	nop
}
 8003832:	3708      	adds	r7, #8
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}

08003838 <bytes_init>:

bytes* bytes_init(){
 8003838:	b580      	push	{r7, lr}
 800383a:	b082      	sub	sp, #8
 800383c:	af00      	add	r7, sp, #0
	bytes* result = (bytes*) malloc(sizeof(bytes));
 800383e:	200c      	movs	r0, #12
 8003840:	f007 fbae 	bl	800afa0 <malloc>
 8003844:	4603      	mov	r3, r0
 8003846:	607b      	str	r3, [r7, #4]
	result->front = NULL;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2200      	movs	r2, #0
 800384c:	701a      	strb	r2, [r3, #0]
 800384e:	2200      	movs	r2, #0
 8003850:	705a      	strb	r2, [r3, #1]
 8003852:	2200      	movs	r2, #0
 8003854:	709a      	strb	r2, [r3, #2]
 8003856:	2200      	movs	r2, #0
 8003858:	70da      	strb	r2, [r3, #3]
	result->back = NULL;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2200      	movs	r2, #0
 800385e:	711a      	strb	r2, [r3, #4]
 8003860:	2200      	movs	r2, #0
 8003862:	715a      	strb	r2, [r3, #5]
 8003864:	2200      	movs	r2, #0
 8003866:	719a      	strb	r2, [r3, #6]
 8003868:	2200      	movs	r2, #0
 800386a:	71da      	strb	r2, [r3, #7]
	result->size = 0;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2200      	movs	r2, #0
 8003870:	721a      	strb	r2, [r3, #8]
 8003872:	2200      	movs	r2, #0
 8003874:	725a      	strb	r2, [r3, #9]
 8003876:	2200      	movs	r2, #0
 8003878:	729a      	strb	r2, [r3, #10]
 800387a:	2200      	movs	r2, #0
 800387c:	72da      	strb	r2, [r3, #11]
	return result;
 800387e:	687b      	ldr	r3, [r7, #4]
}
 8003880:	4618      	mov	r0, r3
 8003882:	3708      	adds	r7, #8
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}

08003888 <bytes_destroy>:

void bytes_destroy(bytes* bytes){
 8003888:	b580      	push	{r7, lr}
 800388a:	b084      	sub	sp, #16
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
	if( bytes == NULL ) return;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d028      	beq.n	80038e8 <bytes_destroy+0x60>

	node* next = NULL;
 8003896:	2300      	movs	r3, #0
 8003898:	60bb      	str	r3, [r7, #8]
	node* actual = bytes->front;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	60fb      	str	r3, [r7, #12]
	while( actual != NULL ){
 80038a0:	e007      	b.n	80038b2 <bytes_destroy+0x2a>
		next = actual->next;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	60bb      	str	r3, [r7, #8]
		node_destroy(actual);
 80038a8:	68f8      	ldr	r0, [r7, #12]
 80038aa:	f7ff ffae 	bl	800380a <node_destroy>
		actual = next;
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	60fb      	str	r3, [r7, #12]
	while( actual != NULL ){
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d1f4      	bne.n	80038a2 <bytes_destroy+0x1a>
	}
	bytes->front = NULL;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2200      	movs	r2, #0
 80038bc:	701a      	strb	r2, [r3, #0]
 80038be:	2200      	movs	r2, #0
 80038c0:	705a      	strb	r2, [r3, #1]
 80038c2:	2200      	movs	r2, #0
 80038c4:	709a      	strb	r2, [r3, #2]
 80038c6:	2200      	movs	r2, #0
 80038c8:	70da      	strb	r2, [r3, #3]
	bytes->back = NULL;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2200      	movs	r2, #0
 80038ce:	711a      	strb	r2, [r3, #4]
 80038d0:	2200      	movs	r2, #0
 80038d2:	715a      	strb	r2, [r3, #5]
 80038d4:	2200      	movs	r2, #0
 80038d6:	719a      	strb	r2, [r3, #6]
 80038d8:	2200      	movs	r2, #0
 80038da:	71da      	strb	r2, [r3, #7]
	free(bytes);
 80038dc:	6878      	ldr	r0, [r7, #4]
 80038de:	f007 fb67 	bl	800afb0 <free>
	bytes = NULL;
 80038e2:	2300      	movs	r3, #0
 80038e4:	607b      	str	r3, [r7, #4]
 80038e6:	e000      	b.n	80038ea <bytes_destroy+0x62>
	if( bytes == NULL ) return;
 80038e8:	bf00      	nop
}
 80038ea:	3710      	adds	r7, #16
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}

080038f0 <bytes_is_empty>:

unsigned char bytes_is_empty(bytes* bytes){
 80038f0:	b480      	push	{r7}
 80038f2:	b083      	sub	sp, #12
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
	return bytes == NULL || bytes->size == 0 ? 1 : 0;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d003      	beq.n	8003906 <bytes_is_empty+0x16>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d101      	bne.n	800390a <bytes_is_empty+0x1a>
 8003906:	2301      	movs	r3, #1
 8003908:	e000      	b.n	800390c <bytes_is_empty+0x1c>
 800390a:	2300      	movs	r3, #0
 800390c:	b2db      	uxtb	r3, r3
}
 800390e:	4618      	mov	r0, r3
 8003910:	370c      	adds	r7, #12
 8003912:	46bd      	mov	sp, r7
 8003914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003918:	4770      	bx	lr

0800391a <bytes_at>:

unsigned char bytes_at(bytes* bytes, const unsigned int index){
 800391a:	b480      	push	{r7}
 800391c:	b085      	sub	sp, #20
 800391e:	af00      	add	r7, sp, #0
 8003920:	6078      	str	r0, [r7, #4]
 8003922:	6039      	str	r1, [r7, #0]
	if( bytes == NULL || index >= bytes->size )
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d004      	beq.n	8003934 <bytes_at+0x1a>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	683a      	ldr	r2, [r7, #0]
 8003930:	429a      	cmp	r2, r3
 8003932:	d301      	bcc.n	8003938 <bytes_at+0x1e>
		return (unsigned char) 0;
 8003934:	2300      	movs	r3, #0
 8003936:	e018      	b.n	800396a <bytes_at+0x50>

	int position = index;
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	60fb      	str	r3, [r7, #12]
	node* current = bytes->front;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	60bb      	str	r3, [r7, #8]
	while( position != 0 && current != NULL) {
 8003942:	e005      	b.n	8003950 <bytes_at+0x36>
		current = current->next;
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	60bb      	str	r3, [r7, #8]
		position--;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	3b01      	subs	r3, #1
 800394e:	60fb      	str	r3, [r7, #12]
	while( position != 0 && current != NULL) {
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d002      	beq.n	800395c <bytes_at+0x42>
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d1f3      	bne.n	8003944 <bytes_at+0x2a>
	}

	return current == NULL ? (unsigned char) 0 : current->value;
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d002      	beq.n	8003968 <bytes_at+0x4e>
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	781b      	ldrb	r3, [r3, #0]
 8003966:	e000      	b.n	800396a <bytes_at+0x50>
 8003968:	2300      	movs	r3, #0
}
 800396a:	4618      	mov	r0, r3
 800396c:	3714      	adds	r7, #20
 800396e:	46bd      	mov	sp, r7
 8003970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003974:	4770      	bx	lr

08003976 <bytes_push_back>:
	if( bytes_is_empty(bytes) )
		return (unsigned char) 0;
	return bytes->back->value;
}

void bytes_push_back(bytes* bytes, const unsigned char value){
 8003976:	b580      	push	{r7, lr}
 8003978:	b084      	sub	sp, #16
 800397a:	af00      	add	r7, sp, #0
 800397c:	6078      	str	r0, [r7, #4]
 800397e:	460b      	mov	r3, r1
 8003980:	70fb      	strb	r3, [r7, #3]
	node* node = node_init(value, bytes->back, NULL);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6859      	ldr	r1, [r3, #4]
 8003986:	78fb      	ldrb	r3, [r7, #3]
 8003988:	2200      	movs	r2, #0
 800398a:	4618      	mov	r0, r3
 800398c:	f7ff ff23 	bl	80037d6 <node_init>
 8003990:	60f8      	str	r0, [r7, #12]
	if( bytes->front == NULL ){
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d107      	bne.n	80039aa <bytes_push_back+0x34>
		bytes->front = bytes->back = node;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	68fa      	ldr	r2, [r7, #12]
 800399e:	605a      	str	r2, [r3, #4]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	685a      	ldr	r2, [r3, #4]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	601a      	str	r2, [r3, #0]
 80039a8:	e006      	b.n	80039b8 <bytes_push_back+0x42>
	} else {
		bytes->back->next = node;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	68fa      	ldr	r2, [r7, #12]
 80039b0:	609a      	str	r2, [r3, #8]
		bytes->back = node;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	68fa      	ldr	r2, [r7, #12]
 80039b6:	605a      	str	r2, [r3, #4]
	}
	bytes->size++;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	1c5a      	adds	r2, r3, #1
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	609a      	str	r2, [r3, #8]
}
 80039c2:	bf00      	nop
 80039c4:	3710      	adds	r7, #16
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}

080039ca <bytes_get_size>:
	}

	bytes->size--;
}

unsigned int bytes_get_size(bytes* bytes){
 80039ca:	b580      	push	{r7, lr}
 80039cc:	b082      	sub	sp, #8
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	6078      	str	r0, [r7, #4]
	return bytes_is_empty(bytes) ? 0 : bytes->size;
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f7ff ff8c 	bl	80038f0 <bytes_is_empty>
 80039d8:	4603      	mov	r3, r0
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d102      	bne.n	80039e4 <bytes_get_size+0x1a>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	e000      	b.n	80039e6 <bytes_get_size+0x1c>
 80039e4:	2300      	movs	r3, #0
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3708      	adds	r7, #8
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}

080039ee <bytes_concat>:

void bytes_concat(bytes* destiny, bytes* source){
 80039ee:	b590      	push	{r4, r7, lr}
 80039f0:	b083      	sub	sp, #12
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	6078      	str	r0, [r7, #4]
 80039f6:	6039      	str	r1, [r7, #0]
	if ( bytes_is_empty(source) ) return;
 80039f8:	6838      	ldr	r0, [r7, #0]
 80039fa:	f7ff ff79 	bl	80038f0 <bytes_is_empty>
 80039fe:	4603      	mov	r3, r0
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d112      	bne.n	8003a2a <bytes_concat+0x3c>
	for(register unsigned int i = 0; i < bytes_get_size(source); i++){
 8003a04:	2400      	movs	r4, #0
 8003a06:	e009      	b.n	8003a1c <bytes_concat+0x2e>
		bytes_push_back(destiny, bytes_at(source, i));
 8003a08:	4621      	mov	r1, r4
 8003a0a:	6838      	ldr	r0, [r7, #0]
 8003a0c:	f7ff ff85 	bl	800391a <bytes_at>
 8003a10:	4603      	mov	r3, r0
 8003a12:	4619      	mov	r1, r3
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	f7ff ffae 	bl	8003976 <bytes_push_back>
	for(register unsigned int i = 0; i < bytes_get_size(source); i++){
 8003a1a:	3401      	adds	r4, #1
 8003a1c:	6838      	ldr	r0, [r7, #0]
 8003a1e:	f7ff ffd4 	bl	80039ca <bytes_get_size>
 8003a22:	4603      	mov	r3, r0
 8003a24:	429c      	cmp	r4, r3
 8003a26:	d3ef      	bcc.n	8003a08 <bytes_concat+0x1a>
 8003a28:	e000      	b.n	8003a2c <bytes_concat+0x3e>
	if ( bytes_is_empty(source) ) return;
 8003a2a:	bf00      	nop
	}
}
 8003a2c:	370c      	adds	r7, #12
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd90      	pop	{r4, r7, pc}

08003a32 <bytes_to_array>:

unsigned char* bytes_to_array(bytes* bytes){
 8003a32:	b5b0      	push	{r4, r5, r7, lr}
 8003a34:	b084      	sub	sp, #16
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	6078      	str	r0, [r7, #4]
	if ( bytes_is_empty(bytes) ) return NULL;
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	f7ff ff58 	bl	80038f0 <bytes_is_empty>
 8003a40:	4603      	mov	r3, r0
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d001      	beq.n	8003a4a <bytes_to_array+0x18>
 8003a46:	2300      	movs	r3, #0
 8003a48:	e017      	b.n	8003a7a <bytes_to_array+0x48>

	unsigned int size = bytes_get_size(bytes);
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f7ff ffbd 	bl	80039ca <bytes_get_size>
 8003a50:	60f8      	str	r0, [r7, #12]
	unsigned char* result = (unsigned char*) malloc(size*sizeof(unsigned char));
 8003a52:	68f8      	ldr	r0, [r7, #12]
 8003a54:	f007 faa4 	bl	800afa0 <malloc>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	60bb      	str	r3, [r7, #8]
	for(register unsigned int i = 0; i < size; i++) result[i] = bytes_at(bytes, i);
 8003a5c:	2400      	movs	r4, #0
 8003a5e:	e008      	b.n	8003a72 <bytes_to_array+0x40>
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	191d      	adds	r5, r3, r4
 8003a64:	4621      	mov	r1, r4
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f7ff ff57 	bl	800391a <bytes_at>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	702b      	strb	r3, [r5, #0]
 8003a70:	3401      	adds	r4, #1
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	429c      	cmp	r4, r3
 8003a76:	d3f3      	bcc.n	8003a60 <bytes_to_array+0x2e>
	return result;
 8003a78:	68bb      	ldr	r3, [r7, #8]
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	3710      	adds	r7, #16
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bdb0      	pop	{r4, r5, r7, pc}

08003a82 <connack_init>:

const unsigned char CONNACK_RETURN_CODE_CONNECTION_REFUSED_BAD_USERNAME_OR_PASSWORD      = 0x04;

const unsigned char CONNACK_RETURN_CODE_CONNECTION_REFUSED_NOT_AUTHORIZED                = 0x05;

connack* connack_init(const bool clean_session, const unsigned char return_code){
 8003a82:	b580      	push	{r7, lr}
 8003a84:	b084      	sub	sp, #16
 8003a86:	af00      	add	r7, sp, #0
 8003a88:	4603      	mov	r3, r0
 8003a8a:	460a      	mov	r2, r1
 8003a8c:	71fb      	strb	r3, [r7, #7]
 8003a8e:	4613      	mov	r3, r2
 8003a90:	71bb      	strb	r3, [r7, #6]
	connack* result = (connack*) malloc(sizeof(connack));
 8003a92:	2006      	movs	r0, #6
 8003a94:	f007 fa84 	bl	800afa0 <malloc>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	60fb      	str	r3, [r7, #12]
	result->clean_session      	= clean_session;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	79fa      	ldrb	r2, [r7, #7]
 8003aa0:	711a      	strb	r2, [r3, #4]
	result->return_code        	= return_code;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	79ba      	ldrb	r2, [r7, #6]
 8003aa6:	715a      	strb	r2, [r3, #5]
	return result;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	3710      	adds	r7, #16
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}

08003ab2 <connack_destroy>:

void connack_destroy(connack* connack){
 8003ab2:	b580      	push	{r7, lr}
 8003ab4:	b082      	sub	sp, #8
 8003ab6:	af00      	add	r7, sp, #0
 8003ab8:	6078      	str	r0, [r7, #4]
	if( connack == NULL ) return;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d00e      	beq.n	8003ade <connack_destroy+0x2c>

	connack->control_packet = NULL;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	701a      	strb	r2, [r3, #0]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	705a      	strb	r2, [r3, #1]
 8003aca:	2200      	movs	r2, #0
 8003acc:	709a      	strb	r2, [r3, #2]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	70da      	strb	r2, [r3, #3]
	free(connack);
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	f007 fa6c 	bl	800afb0 <free>
	connack = NULL;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	607b      	str	r3, [r7, #4]
 8003adc:	e000      	b.n	8003ae0 <connack_destroy+0x2e>
	if( connack == NULL ) return;
 8003ade:	bf00      	nop
}
 8003ae0:	3708      	adds	r7, #8
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}

08003ae6 <connack_is_connection_accepted>:
void connack_set_return_code(connack* connack, const unsigned char return_code){
	if( connack == NULL ) return;
	connack->return_code = return_code;
}

bool connack_is_connection_accepted(connack* connack){
 8003ae6:	b480      	push	{r7}
 8003ae8:	b083      	sub	sp, #12
 8003aea:	af00      	add	r7, sp, #0
 8003aec:	6078      	str	r0, [r7, #4]
	return connack == NULL ? false : connack->return_code == CONNACK_RETURN_CODE_CONNECTION_ACCEPTED;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d006      	beq.n	8003b02 <connack_is_connection_accepted+0x1c>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	795b      	ldrb	r3, [r3, #5]
 8003af8:	2200      	movs	r2, #0
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d101      	bne.n	8003b02 <connack_is_connection_accepted+0x1c>
 8003afe:	2301      	movs	r3, #1
 8003b00:	e000      	b.n	8003b04 <connack_is_connection_accepted+0x1e>
 8003b02:	2300      	movs	r3, #0
 8003b04:	f003 0301 	and.w	r3, r3, #1
 8003b08:	b2db      	uxtb	r3, r3
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	370c      	adds	r7, #12
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b14:	4770      	bx	lr

08003b16 <connack_service_init>:
#include "../../Inc/mqtt_client/connack_service.h"

connack_service* connack_service_init(control_packet_proxy* control_packet_proxy){
 8003b16:	b580      	push	{r7, lr}
 8003b18:	b084      	sub	sp, #16
 8003b1a:	af00      	add	r7, sp, #0
 8003b1c:	6078      	str	r0, [r7, #4]
	if(control_packet_proxy == NULL) return NULL;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d101      	bne.n	8003b28 <connack_service_init+0x12>
 8003b24:	2300      	movs	r3, #0
 8003b26:	e008      	b.n	8003b3a <connack_service_init+0x24>
	connack_service* result = (connack_service*) malloc(sizeof(connack_service));
 8003b28:	2004      	movs	r0, #4
 8003b2a:	f007 fa39 	bl	800afa0 <malloc>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	60fb      	str	r3, [r7, #12]
	result->control_packet_proxy = control_packet_proxy;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	687a      	ldr	r2, [r7, #4]
 8003b36:	601a      	str	r2, [r3, #0]
	return result;
 8003b38:	68fb      	ldr	r3, [r7, #12]
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3710      	adds	r7, #16
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}

08003b42 <connack_service_destroy>:

void connack_service_destroy(connack_service* connack_service){
 8003b42:	b580      	push	{r7, lr}
 8003b44:	b082      	sub	sp, #8
 8003b46:	af00      	add	r7, sp, #0
 8003b48:	6078      	str	r0, [r7, #4]
	if( connack_service == NULL ) return;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d00e      	beq.n	8003b6e <connack_service_destroy+0x2c>
	connack_service->control_packet_proxy = NULL;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2200      	movs	r2, #0
 8003b54:	701a      	strb	r2, [r3, #0]
 8003b56:	2200      	movs	r2, #0
 8003b58:	705a      	strb	r2, [r3, #1]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	709a      	strb	r2, [r3, #2]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	70da      	strb	r2, [r3, #3]
	free(connack_service);
 8003b62:	6878      	ldr	r0, [r7, #4]
 8003b64:	f007 fa24 	bl	800afb0 <free>
	connack_service = NULL;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	607b      	str	r3, [r7, #4]
 8003b6c:	e000      	b.n	8003b70 <connack_service_destroy+0x2e>
	if( connack_service == NULL ) return;
 8003b6e:	bf00      	nop
}
 8003b70:	3708      	adds	r7, #8
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}
	...

08003b78 <connack_service_create>:

connack* connack_service_create(connack_service* connack_service){
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b086      	sub	sp, #24
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
	if( connack_service == NULL ) return NULL;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d101      	bne.n	8003b8a <connack_service_create+0x12>
 8003b86:	2300      	movs	r3, #0
 8003b88:	e010      	b.n	8003bac <connack_service_create+0x34>
	session* session = session_get_instance();
 8003b8a:	f001 ff05 	bl	8005998 <session_get_instance>
 8003b8e:	6178      	str	r0, [r7, #20]
	bool clean_session = session_is_clean(session);
 8003b90:	6978      	ldr	r0, [r7, #20]
 8003b92:	f001 ffe0 	bl	8005b56 <session_is_clean>
 8003b96:	4603      	mov	r3, r0
 8003b98:	74fb      	strb	r3, [r7, #19]
	connack* result = connack_init(clean_session, CONNACK_RETURN_CODE_CONNECTION_ACCEPTED);
 8003b9a:	4b06      	ldr	r3, [pc, #24]	; (8003bb4 <connack_service_create+0x3c>)
 8003b9c:	781a      	ldrb	r2, [r3, #0]
 8003b9e:	7cfb      	ldrb	r3, [r7, #19]
 8003ba0:	4611      	mov	r1, r2
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f7ff ff6d 	bl	8003a82 <connack_init>
 8003ba8:	60f8      	str	r0, [r7, #12]
	return result;
 8003baa:	68fb      	ldr	r3, [r7, #12]
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3718      	adds	r7, #24
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}
 8003bb4:	080100e8 	.word	0x080100e8

08003bb8 <connect_init>:
const unsigned char CONNECT_QOS_LEVEL_1 = 0x01;

const unsigned char CONNECT_QOS_LEVEL_2 = 0x02;


connect* connect_init(const bool username, const bool password, const bool will_retain, const unsigned char will_QoS, const bool will_flag, const bool clean_session, const unsigned int keep_alive){
 8003bb8:	b590      	push	{r4, r7, lr}
 8003bba:	b085      	sub	sp, #20
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	4604      	mov	r4, r0
 8003bc0:	4608      	mov	r0, r1
 8003bc2:	4611      	mov	r1, r2
 8003bc4:	461a      	mov	r2, r3
 8003bc6:	4623      	mov	r3, r4
 8003bc8:	71fb      	strb	r3, [r7, #7]
 8003bca:	4603      	mov	r3, r0
 8003bcc:	71bb      	strb	r3, [r7, #6]
 8003bce:	460b      	mov	r3, r1
 8003bd0:	717b      	strb	r3, [r7, #5]
 8003bd2:	4613      	mov	r3, r2
 8003bd4:	713b      	strb	r3, [r7, #4]
	connect* result = (connect*) malloc(sizeof(connect));
 8003bd6:	201e      	movs	r0, #30
 8003bd8:	f007 f9e2 	bl	800afa0 <malloc>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	60bb      	str	r3, [r7, #8]
	result->control_packet = control_packet_init(CONTROL_PACKET_TYPE_CONNECT, CONTROL_PACKET_FLAG_CONNECT, 0x00);
 8003be0:	4b5f      	ldr	r3, [pc, #380]	; (8003d60 <connect_init+0x1a8>)
 8003be2:	7818      	ldrb	r0, [r3, #0]
 8003be4:	4b5f      	ldr	r3, [pc, #380]	; (8003d64 <connect_init+0x1ac>)
 8003be6:	781b      	ldrb	r3, [r3, #0]
 8003be8:	2200      	movs	r2, #0
 8003bea:	4619      	mov	r1, r3
 8003bec:	f000 fb94 	bl	8004318 <control_packet_init>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	601a      	str	r2, [r3, #0]

	result->variable_header = bytes_init();
 8003bf6:	f7ff fe1f 	bl	8003838 <bytes_init>
 8003bfa:	4602      	mov	r2, r0
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	605a      	str	r2, [r3, #4]
	bytes_push_back( result->variable_header, (unsigned char) 0 );
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	2100      	movs	r1, #0
 8003c06:	4618      	mov	r0, r3
 8003c08:	f7ff feb5 	bl	8003976 <bytes_push_back>
	bytes_push_back( result->variable_header, (unsigned char) 4 );
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	2104      	movs	r1, #4
 8003c12:	4618      	mov	r0, r3
 8003c14:	f7ff feaf 	bl	8003976 <bytes_push_back>
	bytes_push_back( result->variable_header, (unsigned char) 'M' );
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	214d      	movs	r1, #77	; 0x4d
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f7ff fea9 	bl	8003976 <bytes_push_back>
	bytes_push_back( result->variable_header, (unsigned char) 'Q' );
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	2151      	movs	r1, #81	; 0x51
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f7ff fea3 	bl	8003976 <bytes_push_back>
	bytes_push_back( result->variable_header, (unsigned char) 'T' );
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	2154      	movs	r1, #84	; 0x54
 8003c36:	4618      	mov	r0, r3
 8003c38:	f7ff fe9d 	bl	8003976 <bytes_push_back>
	bytes_push_back( result->variable_header, (unsigned char) 'T' );
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	2154      	movs	r1, #84	; 0x54
 8003c42:	4618      	mov	r0, r3
 8003c44:	f7ff fe97 	bl	8003976 <bytes_push_back>
	bytes_push_back( result->variable_header, (unsigned char) 4 );
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	2104      	movs	r1, #4
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f7ff fe91 	bl	8003976 <bytes_push_back>

	// Connect Flag bits
	unsigned char flags = (unsigned char) 0;
 8003c54:	2300      	movs	r3, #0
 8003c56:	73fb      	strb	r3, [r7, #15]
	flags = flags | ( (username ? 0x01 : 0x00) << 7 ); // User Name Flag
 8003c58:	79fb      	ldrb	r3, [r7, #7]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d002      	beq.n	8003c64 <connect_init+0xac>
 8003c5e:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 8003c62:	e000      	b.n	8003c66 <connect_init+0xae>
 8003c64:	2200      	movs	r2, #0
 8003c66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	b25b      	sxtb	r3, r3
 8003c6e:	73fb      	strb	r3, [r7, #15]
	flags = flags | ( (password ? 0x01 : 0x00) << 6 ); // Password Flag
 8003c70:	79bb      	ldrb	r3, [r7, #6]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d001      	beq.n	8003c7a <connect_init+0xc2>
 8003c76:	2240      	movs	r2, #64	; 0x40
 8003c78:	e000      	b.n	8003c7c <connect_init+0xc4>
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c80:	4313      	orrs	r3, r2
 8003c82:	b25b      	sxtb	r3, r3
 8003c84:	73fb      	strb	r3, [r7, #15]
	flags = flags | ( (will_retain ? 0x01 : 0x00) << 5 ); // Will Retain
 8003c86:	797b      	ldrb	r3, [r7, #5]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d001      	beq.n	8003c90 <connect_init+0xd8>
 8003c8c:	2220      	movs	r2, #32
 8003c8e:	e000      	b.n	8003c92 <connect_init+0xda>
 8003c90:	2200      	movs	r2, #0
 8003c92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c96:	4313      	orrs	r3, r2
 8003c98:	b25b      	sxtb	r3, r3
 8003c9a:	73fb      	strb	r3, [r7, #15]
	flags = flags | ( (will_QoS & 0x03) << 3 ); // Will QoS
 8003c9c:	793b      	ldrb	r3, [r7, #4]
 8003c9e:	00db      	lsls	r3, r3, #3
 8003ca0:	b25b      	sxtb	r3, r3
 8003ca2:	f003 0318 	and.w	r3, r3, #24
 8003ca6:	b25a      	sxtb	r2, r3
 8003ca8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003cac:	4313      	orrs	r3, r2
 8003cae:	b25b      	sxtb	r3, r3
 8003cb0:	73fb      	strb	r3, [r7, #15]
	flags = flags | ( (will_flag ? 0x01 : 0x00) << 2 ); // Will Flag
 8003cb2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d001      	beq.n	8003cbe <connect_init+0x106>
 8003cba:	2204      	movs	r2, #4
 8003cbc:	e000      	b.n	8003cc0 <connect_init+0x108>
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	b25b      	sxtb	r3, r3
 8003cc8:	73fb      	strb	r3, [r7, #15]
	flags = flags | ( (clean_session ? 0x01 : 0x00) << 1 ); // Clean Session
 8003cca:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d001      	beq.n	8003cd6 <connect_init+0x11e>
 8003cd2:	2202      	movs	r2, #2
 8003cd4:	e000      	b.n	8003cd8 <connect_init+0x120>
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	b25b      	sxtb	r3, r3
 8003ce0:	73fb      	strb	r3, [r7, #15]

	// Condition of will_flag
	if ( ! will_flag ){
 8003ce2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003ce6:	f083 0301 	eor.w	r3, r3, #1
 8003cea:	b2db      	uxtb	r3, r3
 8003cec:	2b00      	cmp	r3, #0
		flags = flags | ( 0x00 << 5 ); // Will Retain
	    flags = flags | ( 0x00 << 3 ); // Will QoS
	}

	if ( ! username ){
 8003cee:	79fb      	ldrb	r3, [r7, #7]
 8003cf0:	f083 0301 	eor.w	r3, r3, #1
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	2b00      	cmp	r3, #0
		flags = flags | ( 0x00 << 6 ); // Password Flag
	}

	bytes_push_back( result->variable_header, flags);
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	7bfa      	ldrb	r2, [r7, #15]
 8003cfe:	4611      	mov	r1, r2
 8003d00:	4618      	mov	r0, r3
 8003d02:	f7ff fe38 	bl	8003976 <bytes_push_back>
	result->keep_alive = keep_alive;
 8003d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d08:	b29a      	uxth	r2, r3
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	811a      	strh	r2, [r3, #8]

	result->will_topic = NULL;
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	2200      	movs	r2, #0
 8003d12:	739a      	strb	r2, [r3, #14]
 8003d14:	2200      	movs	r2, #0
 8003d16:	73da      	strb	r2, [r3, #15]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	741a      	strb	r2, [r3, #16]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	745a      	strb	r2, [r3, #17]
	result->will_message = NULL;
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	2200      	movs	r2, #0
 8003d24:	749a      	strb	r2, [r3, #18]
 8003d26:	2200      	movs	r2, #0
 8003d28:	74da      	strb	r2, [r3, #19]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	751a      	strb	r2, [r3, #20]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	755a      	strb	r2, [r3, #21]
	result->username = NULL;
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	2200      	movs	r2, #0
 8003d36:	759a      	strb	r2, [r3, #22]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	75da      	strb	r2, [r3, #23]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	761a      	strb	r2, [r3, #24]
 8003d40:	2200      	movs	r2, #0
 8003d42:	765a      	strb	r2, [r3, #25]
	result->password = NULL;
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	2200      	movs	r2, #0
 8003d48:	769a      	strb	r2, [r3, #26]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	76da      	strb	r2, [r3, #27]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	771a      	strb	r2, [r3, #28]
 8003d52:	2200      	movs	r2, #0
 8003d54:	775a      	strb	r2, [r3, #29]

	return result;
 8003d56:	68bb      	ldr	r3, [r7, #8]
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	3714      	adds	r7, #20
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd90      	pop	{r4, r7, pc}
 8003d60:	080100ec 	.word	0x080100ec
 8003d64:	080100f4 	.word	0x080100f4

08003d68 <connect_destroy>:

void connect_destroy(connect* connect){
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b082      	sub	sp, #8
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
	if(connect == NULL) return;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d049      	beq.n	8003e0a <connect_destroy+0xa2>

	connect->control_packet = NULL;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	701a      	strb	r2, [r3, #0]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	705a      	strb	r2, [r3, #1]
 8003d80:	2200      	movs	r2, #0
 8003d82:	709a      	strb	r2, [r3, #2]
 8003d84:	2200      	movs	r2, #0
 8003d86:	70da      	strb	r2, [r3, #3]

	bytes_destroy(connect->variable_header);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f7ff fd7b 	bl	8003888 <bytes_destroy>

	connect->variable_header = NULL;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2200      	movs	r2, #0
 8003d96:	711a      	strb	r2, [r3, #4]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	715a      	strb	r2, [r3, #5]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	719a      	strb	r2, [r3, #6]
 8003da0:	2200      	movs	r2, #0
 8003da2:	71da      	strb	r2, [r3, #7]
	connect->client_identifier = NULL;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2200      	movs	r2, #0
 8003da8:	729a      	strb	r2, [r3, #10]
 8003daa:	2200      	movs	r2, #0
 8003dac:	72da      	strb	r2, [r3, #11]
 8003dae:	2200      	movs	r2, #0
 8003db0:	731a      	strb	r2, [r3, #12]
 8003db2:	2200      	movs	r2, #0
 8003db4:	735a      	strb	r2, [r3, #13]
	connect->will_topic = NULL;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2200      	movs	r2, #0
 8003dba:	739a      	strb	r2, [r3, #14]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	73da      	strb	r2, [r3, #15]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	741a      	strb	r2, [r3, #16]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	745a      	strb	r2, [r3, #17]
	connect->will_message = NULL;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	749a      	strb	r2, [r3, #18]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	74da      	strb	r2, [r3, #19]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	751a      	strb	r2, [r3, #20]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	755a      	strb	r2, [r3, #21]
	connect->username = NULL;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	759a      	strb	r2, [r3, #22]
 8003de0:	2200      	movs	r2, #0
 8003de2:	75da      	strb	r2, [r3, #23]
 8003de4:	2200      	movs	r2, #0
 8003de6:	761a      	strb	r2, [r3, #24]
 8003de8:	2200      	movs	r2, #0
 8003dea:	765a      	strb	r2, [r3, #25]
	connect->password = NULL;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2200      	movs	r2, #0
 8003df0:	769a      	strb	r2, [r3, #26]
 8003df2:	2200      	movs	r2, #0
 8003df4:	76da      	strb	r2, [r3, #27]
 8003df6:	2200      	movs	r2, #0
 8003df8:	771a      	strb	r2, [r3, #28]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	775a      	strb	r2, [r3, #29]

	free(connect);
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f007 f8d6 	bl	800afb0 <free>
	connect = NULL;
 8003e04:	2300      	movs	r3, #0
 8003e06:	607b      	str	r3, [r7, #4]
 8003e08:	e000      	b.n	8003e0c <connect_destroy+0xa4>
	if(connect == NULL) return;
 8003e0a:	bf00      	nop
}
 8003e0c:	3708      	adds	r7, #8
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}

08003e12 <connect_get_client_identifier>:
void connect_set_keep_alive(connect* connect, const unsigned int keep_alive){
	if( connect == NULL) return;
	connect->keep_alive = keep_alive;
}

char* connect_get_client_identifier(connect* connect){
 8003e12:	b480      	push	{r7}
 8003e14:	b083      	sub	sp, #12
 8003e16:	af00      	add	r7, sp, #0
 8003e18:	6078      	str	r0, [r7, #4]
	return connect == NULL ? NULL : connect->client_identifier;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d003      	beq.n	8003e28 <connect_get_client_identifier+0x16>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	f8d3 300a 	ldr.w	r3, [r3, #10]
 8003e26:	e000      	b.n	8003e2a <connect_get_client_identifier+0x18>
 8003e28:	2300      	movs	r3, #0
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	370c      	adds	r7, #12
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e34:	4770      	bx	lr

08003e36 <connect_set_client_identifier>:

void connect_set_client_identifier(connect* connect, char* client_identifier){
 8003e36:	b480      	push	{r7}
 8003e38:	b083      	sub	sp, #12
 8003e3a:	af00      	add	r7, sp, #0
 8003e3c:	6078      	str	r0, [r7, #4]
 8003e3e:	6039      	str	r1, [r7, #0]
	if( connect == NULL) return;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d004      	beq.n	8003e50 <connect_set_client_identifier+0x1a>
	connect->client_identifier = client_identifier;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	683a      	ldr	r2, [r7, #0]
 8003e4a:	f8c3 200a 	str.w	r2, [r3, #10]
 8003e4e:	e000      	b.n	8003e52 <connect_set_client_identifier+0x1c>
	if( connect == NULL) return;
 8003e50:	bf00      	nop
}
 8003e52:	370c      	adds	r7, #12
 8003e54:	46bd      	mov	sp, r7
 8003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5a:	4770      	bx	lr

08003e5c <connect_set_username>:

char* connect_get_username(connect* connect){
	return connect == NULL ? NULL : connect->username;
}

void connect_set_username(connect* connect, char* username){
 8003e5c:	b480      	push	{r7}
 8003e5e:	b083      	sub	sp, #12
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
 8003e64:	6039      	str	r1, [r7, #0]
	if( connect == NULL) return;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d004      	beq.n	8003e76 <connect_set_username+0x1a>
	connect->username = username;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	683a      	ldr	r2, [r7, #0]
 8003e70:	f8c3 2016 	str.w	r2, [r3, #22]
 8003e74:	e000      	b.n	8003e78 <connect_set_username+0x1c>
	if( connect == NULL) return;
 8003e76:	bf00      	nop
}
 8003e78:	370c      	adds	r7, #12
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e80:	4770      	bx	lr

08003e82 <connect_set_password>:

char* connect_get_password(connect* connect){
	return connect == NULL ? NULL : connect->password;
}

void connect_set_password(connect* connect, char* password){
 8003e82:	b480      	push	{r7}
 8003e84:	b083      	sub	sp, #12
 8003e86:	af00      	add	r7, sp, #0
 8003e88:	6078      	str	r0, [r7, #4]
 8003e8a:	6039      	str	r1, [r7, #0]
	if( connect == NULL) return;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d004      	beq.n	8003e9c <connect_set_password+0x1a>
	connect->password = password;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	683a      	ldr	r2, [r7, #0]
 8003e96:	f8c3 201a 	str.w	r2, [r3, #26]
 8003e9a:	e000      	b.n	8003e9e <connect_set_password+0x1c>
	if( connect == NULL) return;
 8003e9c:	bf00      	nop
}
 8003e9e:	370c      	adds	r7, #12
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea6:	4770      	bx	lr

08003ea8 <connect_to_bytes>:

bytes* connect_to_bytes(connect* connect){
 8003ea8:	b590      	push	{r4, r7, lr}
 8003eaa:	b08f      	sub	sp, #60	; 0x3c
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
	if( connect == NULL) return NULL;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d101      	bne.n	8003eba <connect_to_bytes+0x12>
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	e0f5      	b.n	80040a6 <connect_to_bytes+0x1fe>

	bytes* payload = bytes_init();
 8003eba:	f7ff fcbd 	bl	8003838 <bytes_init>
 8003ebe:	6378      	str	r0, [r7, #52]	; 0x34

	char* client_identifier = connect_get_client_identifier(connect);
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	f7ff ffa6 	bl	8003e12 <connect_get_client_identifier>
 8003ec6:	6338      	str	r0, [r7, #48]	; 0x30
	if ( ! string_util_is_empty(client_identifier) ){
 8003ec8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003eca:	f003 fe95 	bl	8007bf8 <string_util_is_empty>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	f083 0301 	eor.w	r3, r3, #1
 8003ed4:	b2db      	uxtb	r3, r3
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d025      	beq.n	8003f26 <connect_to_bytes+0x7e>
		if ( string_util_length(client_identifier) >= 24 ){ // Deve ter no maximo 23 caracteres
 8003eda:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003edc:	f003 ff03 	bl	8007ce6 <string_util_length>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	2b17      	cmp	r3, #23
 8003ee4:	d914      	bls.n	8003f10 <connect_to_bytes+0x68>
			char* client_identifier_sub_string = string_util_build_empty_string(23+1);
 8003ee6:	2018      	movs	r0, #24
 8003ee8:	f003 ff09 	bl	8007cfe <string_util_build_empty_string>
 8003eec:	62b8      	str	r0, [r7, #40]	; 0x28
			string_util_copy(client_identifier_sub_string, client_identifier, 23);
 8003eee:	2217      	movs	r2, #23
 8003ef0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003ef2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ef4:	f003 ff1d 	bl	8007d32 <string_util_copy>
			bytes* client_identifier_bytes = packet_util_build_bytes(client_identifier_sub_string);
 8003ef8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003efa:	f000 fed7 	bl	8004cac <packet_util_build_bytes>
 8003efe:	6278      	str	r0, [r7, #36]	; 0x24
			bytes_concat(payload, client_identifier_bytes);
 8003f00:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003f02:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003f04:	f7ff fd73 	bl	80039ee <bytes_concat>
			bytes_destroy(client_identifier_bytes);
 8003f08:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003f0a:	f7ff fcbd 	bl	8003888 <bytes_destroy>
 8003f0e:	e00a      	b.n	8003f26 <connect_to_bytes+0x7e>
		} else {
			bytes* client_identifier_bytes = packet_util_build_bytes(client_identifier);
 8003f10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003f12:	f000 fecb 	bl	8004cac <packet_util_build_bytes>
 8003f16:	62f8      	str	r0, [r7, #44]	; 0x2c
			bytes_concat(payload, client_identifier_bytes);
 8003f18:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003f1a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003f1c:	f7ff fd67 	bl	80039ee <bytes_concat>
			bytes_destroy(client_identifier_bytes);
 8003f20:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003f22:	f7ff fcb1 	bl	8003888 <bytes_destroy>
		}
	}


	unsigned char flags = bytes_at(connect->variable_header, 7);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	2107      	movs	r1, #7
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f7ff fcf4 	bl	800391a <bytes_at>
 8003f32:	4603      	mov	r3, r0
 8003f34:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	if ( ( flags & ( 0x01 << 2 ) ) && ! string_util_is_empty(connect->will_topic) ){
 8003f38:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003f3c:	f003 0304 	and.w	r3, r3, #4
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d019      	beq.n	8003f78 <connect_to_bytes+0xd0>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	f8d3 300e 	ldr.w	r3, [r3, #14]
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f003 fe54 	bl	8007bf8 <string_util_is_empty>
 8003f50:	4603      	mov	r3, r0
 8003f52:	f083 0301 	eor.w	r3, r3, #1
 8003f56:	b2db      	uxtb	r3, r3
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d00d      	beq.n	8003f78 <connect_to_bytes+0xd0>
		bytes* will_topic_bytes = packet_util_build_bytes(connect->will_topic);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	f8d3 300e 	ldr.w	r3, [r3, #14]
 8003f62:	4618      	mov	r0, r3
 8003f64:	f000 fea2 	bl	8004cac <packet_util_build_bytes>
 8003f68:	61f8      	str	r0, [r7, #28]
		bytes_concat(payload, will_topic_bytes);
 8003f6a:	69f9      	ldr	r1, [r7, #28]
 8003f6c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003f6e:	f7ff fd3e 	bl	80039ee <bytes_concat>
		bytes_destroy(will_topic_bytes);
 8003f72:	69f8      	ldr	r0, [r7, #28]
 8003f74:	f7ff fc88 	bl	8003888 <bytes_destroy>
	}

	if ( ( flags & ( 0x01 << 2 ) ) && ! string_util_is_empty(connect->will_message) ){
 8003f78:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003f7c:	f003 0304 	and.w	r3, r3, #4
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d019      	beq.n	8003fb8 <connect_to_bytes+0x110>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	f8d3 3012 	ldr.w	r3, [r3, #18]
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f003 fe34 	bl	8007bf8 <string_util_is_empty>
 8003f90:	4603      	mov	r3, r0
 8003f92:	f083 0301 	eor.w	r3, r3, #1
 8003f96:	b2db      	uxtb	r3, r3
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d00d      	beq.n	8003fb8 <connect_to_bytes+0x110>
		bytes* will_message_bytes = packet_util_build_bytes(connect->will_message);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	f8d3 3012 	ldr.w	r3, [r3, #18]
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f000 fe82 	bl	8004cac <packet_util_build_bytes>
 8003fa8:	61b8      	str	r0, [r7, #24]
		bytes_concat(payload, will_message_bytes);
 8003faa:	69b9      	ldr	r1, [r7, #24]
 8003fac:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003fae:	f7ff fd1e 	bl	80039ee <bytes_concat>
		bytes_destroy(will_message_bytes);
 8003fb2:	69b8      	ldr	r0, [r7, #24]
 8003fb4:	f7ff fc68 	bl	8003888 <bytes_destroy>
	}

	if ( ( flags & ( 0x01 << 7 ) ) && ! string_util_is_empty(connect->username) ){
 8003fb8:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	da39      	bge.n	8004034 <connect_to_bytes+0x18c>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	f8d3 3016 	ldr.w	r3, [r3, #22]
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f003 fe16 	bl	8007bf8 <string_util_is_empty>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	f083 0301 	eor.w	r3, r3, #1
 8003fd2:	b2db      	uxtb	r3, r3
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d02d      	beq.n	8004034 <connect_to_bytes+0x18c>
		bytes* username_bytes = packet_util_build_bytes(connect->username);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	f8d3 3016 	ldr.w	r3, [r3, #22]
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f000 fe64 	bl	8004cac <packet_util_build_bytes>
 8003fe4:	6178      	str	r0, [r7, #20]
		bytes_concat(payload, username_bytes);
 8003fe6:	6979      	ldr	r1, [r7, #20]
 8003fe8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003fea:	f7ff fd00 	bl	80039ee <bytes_concat>
	    if ( ( flags & ( 0x01 << 6 ) ) && ! string_util_is_empty(connect->password) ){
 8003fee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003ff2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d019      	beq.n	800402e <connect_to_bytes+0x186>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	f8d3 301a 	ldr.w	r3, [r3, #26]
 8004000:	4618      	mov	r0, r3
 8004002:	f003 fdf9 	bl	8007bf8 <string_util_is_empty>
 8004006:	4603      	mov	r3, r0
 8004008:	f083 0301 	eor.w	r3, r3, #1
 800400c:	b2db      	uxtb	r3, r3
 800400e:	2b00      	cmp	r3, #0
 8004010:	d00d      	beq.n	800402e <connect_to_bytes+0x186>
	    	bytes* password_bytes = packet_util_build_bytes(connect->password);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	f8d3 301a 	ldr.w	r3, [r3, #26]
 8004018:	4618      	mov	r0, r3
 800401a:	f000 fe47 	bl	8004cac <packet_util_build_bytes>
 800401e:	6138      	str	r0, [r7, #16]
	    	bytes_concat(payload, password_bytes);
 8004020:	6939      	ldr	r1, [r7, #16]
 8004022:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004024:	f7ff fce3 	bl	80039ee <bytes_concat>
	    	bytes_destroy(password_bytes);
 8004028:	6938      	ldr	r0, [r7, #16]
 800402a:	f7ff fc2d 	bl	8003888 <bytes_destroy>
	    }
	    bytes_destroy(username_bytes);
 800402e:	6978      	ldr	r0, [r7, #20]
 8004030:	f7ff fc2a 	bl	8003888 <bytes_destroy>
	}

	long int remaining_length = bytes_get_size(connect->variable_header) + bytes_get_size(payload) + sizeof(connect->keep_alive);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	4618      	mov	r0, r3
 800403a:	f7ff fcc6 	bl	80039ca <bytes_get_size>
 800403e:	4604      	mov	r4, r0
 8004040:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004042:	f7ff fcc2 	bl	80039ca <bytes_get_size>
 8004046:	4603      	mov	r3, r0
 8004048:	4423      	add	r3, r4
 800404a:	3302      	adds	r3, #2
 800404c:	60fb      	str	r3, [r7, #12]
	control_packet_set_remaining_length(connect->control_packet, remaining_length);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	68f9      	ldr	r1, [r7, #12]
 8004054:	4618      	mov	r0, r3
 8004056:	f000 f99f 	bl	8004398 <control_packet_set_remaining_length>

	bytes* result = control_packet_to_bytes(connect->control_packet);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4618      	mov	r0, r3
 8004060:	f000 f9ad 	bl	80043be <control_packet_to_bytes>
 8004064:	60b8      	str	r0, [r7, #8]
	bytes_concat(result, connect->variable_header);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	4619      	mov	r1, r3
 800406c:	68b8      	ldr	r0, [r7, #8]
 800406e:	f7ff fcbe 	bl	80039ee <bytes_concat>
	bytes_push_back( result, (unsigned char) ( (connect->keep_alive & 0xFF00) >> 8) );
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	891b      	ldrh	r3, [r3, #8]
 8004076:	b29b      	uxth	r3, r3
 8004078:	0a1b      	lsrs	r3, r3, #8
 800407a:	b29b      	uxth	r3, r3
 800407c:	b2db      	uxtb	r3, r3
 800407e:	4619      	mov	r1, r3
 8004080:	68b8      	ldr	r0, [r7, #8]
 8004082:	f7ff fc78 	bl	8003976 <bytes_push_back>
	bytes_push_back( result, (unsigned char) ( (connect->keep_alive & 0x00FF) ) );
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	891b      	ldrh	r3, [r3, #8]
 800408a:	b29b      	uxth	r3, r3
 800408c:	b2db      	uxtb	r3, r3
 800408e:	4619      	mov	r1, r3
 8004090:	68b8      	ldr	r0, [r7, #8]
 8004092:	f7ff fc70 	bl	8003976 <bytes_push_back>
	bytes_concat( result, payload);
 8004096:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004098:	68b8      	ldr	r0, [r7, #8]
 800409a:	f7ff fca8 	bl	80039ee <bytes_concat>
	bytes_destroy(payload);
 800409e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80040a0:	f7ff fbf2 	bl	8003888 <bytes_destroy>
	return result;
 80040a4:	68bb      	ldr	r3, [r7, #8]
}
 80040a6:	4618      	mov	r0, r3
 80040a8:	373c      	adds	r7, #60	; 0x3c
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd90      	pop	{r4, r7, pc}

080040ae <connect_service_init>:
#include <mqtt_client/connect_service.h>

connect_service* connect_service_init(control_packet_proxy* control_packet_proxy){
 80040ae:	b580      	push	{r7, lr}
 80040b0:	b084      	sub	sp, #16
 80040b2:	af00      	add	r7, sp, #0
 80040b4:	6078      	str	r0, [r7, #4]
	if( control_packet_proxy == NULL ) return NULL;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d101      	bne.n	80040c0 <connect_service_init+0x12>
 80040bc:	2300      	movs	r3, #0
 80040be:	e008      	b.n	80040d2 <connect_service_init+0x24>
	connect_service* result = (connect_service*) malloc(sizeof(connect_service));
 80040c0:	2004      	movs	r0, #4
 80040c2:	f006 ff6d 	bl	800afa0 <malloc>
 80040c6:	4603      	mov	r3, r0
 80040c8:	60fb      	str	r3, [r7, #12]
	result->control_packet_proxy = control_packet_proxy;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	687a      	ldr	r2, [r7, #4]
 80040ce:	601a      	str	r2, [r3, #0]
	return result;
 80040d0:	68fb      	ldr	r3, [r7, #12]
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	3710      	adds	r7, #16
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}

080040da <connect_service_destroy>:

void connect_service_destroy(connect_service* connect_service){
 80040da:	b580      	push	{r7, lr}
 80040dc:	b082      	sub	sp, #8
 80040de:	af00      	add	r7, sp, #0
 80040e0:	6078      	str	r0, [r7, #4]
	if( connect_service == NULL ) return;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d00e      	beq.n	8004106 <connect_service_destroy+0x2c>
	connect_service->control_packet_proxy = NULL;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2200      	movs	r2, #0
 80040ec:	701a      	strb	r2, [r3, #0]
 80040ee:	2200      	movs	r2, #0
 80040f0:	705a      	strb	r2, [r3, #1]
 80040f2:	2200      	movs	r2, #0
 80040f4:	709a      	strb	r2, [r3, #2]
 80040f6:	2200      	movs	r2, #0
 80040f8:	70da      	strb	r2, [r3, #3]
	free(connect_service);
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f006 ff58 	bl	800afb0 <free>
	connect_service = NULL;
 8004100:	2300      	movs	r3, #0
 8004102:	607b      	str	r3, [r7, #4]
 8004104:	e000      	b.n	8004108 <connect_service_destroy+0x2e>
	if( connect_service == NULL ) return;
 8004106:	bf00      	nop
}
 8004108:	3708      	adds	r7, #8
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}
	...

08004110 <connect_service_create>:

connect* connect_service_create(connect_service* connect_service){
 8004110:	b580      	push	{r7, lr}
 8004112:	b08c      	sub	sp, #48	; 0x30
 8004114:	af04      	add	r7, sp, #16
 8004116:	6078      	str	r0, [r7, #4]
	if( connect_service == NULL ) return NULL;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d101      	bne.n	8004122 <connect_service_create+0x12>
 800411e:	2300      	movs	r3, #0
 8004120:	e0ac      	b.n	800427c <connect_service_create+0x16c>

	session* session 		= session_get_instance();
 8004122:	f001 fc39 	bl	8005998 <session_get_instance>
 8004126:	61b8      	str	r0, [r7, #24]
	bool has_username		= string_util_is_empty(session_get_username(session)) ? false : true;
 8004128:	69b8      	ldr	r0, [r7, #24]
 800412a:	f001 fe20 	bl	8005d6e <session_get_username>
 800412e:	4603      	mov	r3, r0
 8004130:	4618      	mov	r0, r3
 8004132:	f003 fd61 	bl	8007bf8 <string_util_is_empty>
 8004136:	4603      	mov	r3, r0
 8004138:	f083 0301 	eor.w	r3, r3, #1
 800413c:	75fb      	strb	r3, [r7, #23]
	bool has_password       = string_util_is_empty(session_get_password(session)) ? false : true;
 800413e:	69b8      	ldr	r0, [r7, #24]
 8004140:	f001 fe26 	bl	8005d90 <session_get_password>
 8004144:	4603      	mov	r3, r0
 8004146:	4618      	mov	r0, r3
 8004148:	f003 fd56 	bl	8007bf8 <string_util_is_empty>
 800414c:	4603      	mov	r3, r0
 800414e:	f083 0301 	eor.w	r3, r3, #1
 8004152:	75bb      	strb	r3, [r7, #22]
	bool is_id_empty        = string_util_is_empty(session_get_id(session));
 8004154:	69b8      	ldr	r0, [r7, #24]
 8004156:	f001 fcdb 	bl	8005b10 <session_get_id>
 800415a:	4603      	mov	r3, r0
 800415c:	4618      	mov	r0, r3
 800415e:	f003 fd4b 	bl	8007bf8 <string_util_is_empty>
 8004162:	4603      	mov	r3, r0
 8004164:	757b      	strb	r3, [r7, #21]
	bool clean              = is_id_empty ? true : session_is_clean(session);
 8004166:	7d7b      	ldrb	r3, [r7, #21]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d105      	bne.n	8004178 <connect_service_create+0x68>
 800416c:	69b8      	ldr	r0, [r7, #24]
 800416e:	f001 fcf2 	bl	8005b56 <session_is_clean>
 8004172:	4603      	mov	r3, r0
 8004174:	2b00      	cmp	r3, #0
 8004176:	d001      	beq.n	800417c <connect_service_create+0x6c>
 8004178:	2301      	movs	r3, #1
 800417a:	e000      	b.n	800417e <connect_service_create+0x6e>
 800417c:	2300      	movs	r3, #0
 800417e:	753b      	strb	r3, [r7, #20]
	unsigned int keep_alive = session_get_keep_alive(session);
 8004180:	69b8      	ldr	r0, [r7, #24]
 8004182:	f001 fd5a 	bl	8005c3a <session_get_keep_alive>
 8004186:	6138      	str	r0, [r7, #16]

	connect* connect = NULL;
 8004188:	2300      	movs	r3, #0
 800418a:	61fb      	str	r3, [r7, #28]
	unsigned char qos = session_get_qos(session);
 800418c:	69b8      	ldr	r0, [r7, #24]
 800418e:	f001 fd79 	bl	8005c84 <session_get_qos>
 8004192:	4603      	mov	r3, r0
 8004194:	73fb      	strb	r3, [r7, #15]
	if ( qos == CONNECT_QOS_LEVEL_0){
 8004196:	4b3b      	ldr	r3, [pc, #236]	; (8004284 <connect_service_create+0x174>)
 8004198:	781b      	ldrb	r3, [r3, #0]
 800419a:	7bfa      	ldrb	r2, [r7, #15]
 800419c:	429a      	cmp	r2, r3
 800419e:	d10f      	bne.n	80041c0 <connect_service_create+0xb0>
		connect = connect_init(has_username, has_password, false, CONNECT_QOS_LEVEL_0, false, clean, keep_alive);
 80041a0:	4b38      	ldr	r3, [pc, #224]	; (8004284 <connect_service_create+0x174>)
 80041a2:	781a      	ldrb	r2, [r3, #0]
 80041a4:	7db9      	ldrb	r1, [r7, #22]
 80041a6:	7df8      	ldrb	r0, [r7, #23]
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	9302      	str	r3, [sp, #8]
 80041ac:	7d3b      	ldrb	r3, [r7, #20]
 80041ae:	9301      	str	r3, [sp, #4]
 80041b0:	2300      	movs	r3, #0
 80041b2:	9300      	str	r3, [sp, #0]
 80041b4:	4613      	mov	r3, r2
 80041b6:	2200      	movs	r2, #0
 80041b8:	f7ff fcfe 	bl	8003bb8 <connect_init>
 80041bc:	61f8      	str	r0, [r7, #28]
 80041be:	e038      	b.n	8004232 <connect_service_create+0x122>
	} else if ( qos == CONNECT_QOS_LEVEL_1 ){
 80041c0:	4b31      	ldr	r3, [pc, #196]	; (8004288 <connect_service_create+0x178>)
 80041c2:	781b      	ldrb	r3, [r3, #0]
 80041c4:	7bfa      	ldrb	r2, [r7, #15]
 80041c6:	429a      	cmp	r2, r3
 80041c8:	d10f      	bne.n	80041ea <connect_service_create+0xda>
		connect = connect_init(has_username, has_password, false, CONNECT_QOS_LEVEL_1, false, clean, keep_alive);
 80041ca:	4b2f      	ldr	r3, [pc, #188]	; (8004288 <connect_service_create+0x178>)
 80041cc:	781a      	ldrb	r2, [r3, #0]
 80041ce:	7db9      	ldrb	r1, [r7, #22]
 80041d0:	7df8      	ldrb	r0, [r7, #23]
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	9302      	str	r3, [sp, #8]
 80041d6:	7d3b      	ldrb	r3, [r7, #20]
 80041d8:	9301      	str	r3, [sp, #4]
 80041da:	2300      	movs	r3, #0
 80041dc:	9300      	str	r3, [sp, #0]
 80041de:	4613      	mov	r3, r2
 80041e0:	2200      	movs	r2, #0
 80041e2:	f7ff fce9 	bl	8003bb8 <connect_init>
 80041e6:	61f8      	str	r0, [r7, #28]
 80041e8:	e023      	b.n	8004232 <connect_service_create+0x122>
	} else if ( qos == CONNECT_QOS_LEVEL_2 ){
 80041ea:	4b28      	ldr	r3, [pc, #160]	; (800428c <connect_service_create+0x17c>)
 80041ec:	781b      	ldrb	r3, [r3, #0]
 80041ee:	7bfa      	ldrb	r2, [r7, #15]
 80041f0:	429a      	cmp	r2, r3
 80041f2:	d10f      	bne.n	8004214 <connect_service_create+0x104>
		connect = connect_init(has_username, has_password, false, CONNECT_QOS_LEVEL_2, false, clean, keep_alive);
 80041f4:	4b25      	ldr	r3, [pc, #148]	; (800428c <connect_service_create+0x17c>)
 80041f6:	781a      	ldrb	r2, [r3, #0]
 80041f8:	7db9      	ldrb	r1, [r7, #22]
 80041fa:	7df8      	ldrb	r0, [r7, #23]
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	9302      	str	r3, [sp, #8]
 8004200:	7d3b      	ldrb	r3, [r7, #20]
 8004202:	9301      	str	r3, [sp, #4]
 8004204:	2300      	movs	r3, #0
 8004206:	9300      	str	r3, [sp, #0]
 8004208:	4613      	mov	r3, r2
 800420a:	2200      	movs	r2, #0
 800420c:	f7ff fcd4 	bl	8003bb8 <connect_init>
 8004210:	61f8      	str	r0, [r7, #28]
 8004212:	e00e      	b.n	8004232 <connect_service_create+0x122>
	} else {
		connect = connect_init(has_username, has_password, false, CONNECT_QOS_LEVEL_0, false, clean, keep_alive);
 8004214:	4b1b      	ldr	r3, [pc, #108]	; (8004284 <connect_service_create+0x174>)
 8004216:	781a      	ldrb	r2, [r3, #0]
 8004218:	7db9      	ldrb	r1, [r7, #22]
 800421a:	7df8      	ldrb	r0, [r7, #23]
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	9302      	str	r3, [sp, #8]
 8004220:	7d3b      	ldrb	r3, [r7, #20]
 8004222:	9301      	str	r3, [sp, #4]
 8004224:	2300      	movs	r3, #0
 8004226:	9300      	str	r3, [sp, #0]
 8004228:	4613      	mov	r3, r2
 800422a:	2200      	movs	r2, #0
 800422c:	f7ff fcc4 	bl	8003bb8 <connect_init>
 8004230:	61f8      	str	r0, [r7, #28]
	}

	if ( has_username ) connect_set_username(connect, session_get_username(session));
 8004232:	7dfb      	ldrb	r3, [r7, #23]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d007      	beq.n	8004248 <connect_service_create+0x138>
 8004238:	69b8      	ldr	r0, [r7, #24]
 800423a:	f001 fd98 	bl	8005d6e <session_get_username>
 800423e:	4603      	mov	r3, r0
 8004240:	4619      	mov	r1, r3
 8004242:	69f8      	ldr	r0, [r7, #28]
 8004244:	f7ff fe0a 	bl	8003e5c <connect_set_username>
	if ( has_password ) connect_set_password(connect, session_get_password(session));
 8004248:	7dbb      	ldrb	r3, [r7, #22]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d007      	beq.n	800425e <connect_service_create+0x14e>
 800424e:	69b8      	ldr	r0, [r7, #24]
 8004250:	f001 fd9e 	bl	8005d90 <session_get_password>
 8004254:	4603      	mov	r3, r0
 8004256:	4619      	mov	r1, r3
 8004258:	69f8      	ldr	r0, [r7, #28]
 800425a:	f7ff fe12 	bl	8003e82 <connect_set_password>
	if ( ! is_id_empty ) connect_set_client_identifier(connect, session_get_id(session));
 800425e:	7d7b      	ldrb	r3, [r7, #21]
 8004260:	f083 0301 	eor.w	r3, r3, #1
 8004264:	b2db      	uxtb	r3, r3
 8004266:	2b00      	cmp	r3, #0
 8004268:	d007      	beq.n	800427a <connect_service_create+0x16a>
 800426a:	69b8      	ldr	r0, [r7, #24]
 800426c:	f001 fc50 	bl	8005b10 <session_get_id>
 8004270:	4603      	mov	r3, r0
 8004272:	4619      	mov	r1, r3
 8004274:	69f8      	ldr	r0, [r7, #28]
 8004276:	f7ff fdde 	bl	8003e36 <connect_set_client_identifier>

	return connect;
 800427a:	69fb      	ldr	r3, [r7, #28]
}
 800427c:	4618      	mov	r0, r3
 800427e:	3720      	adds	r7, #32
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}
 8004284:	080100e9 	.word	0x080100e9
 8004288:	080100ea 	.word	0x080100ea
 800428c:	080100eb 	.word	0x080100eb

08004290 <connect_service_write>:
	connect* connect = bytes_is_empty(bytes) ? NULL : assembler_build_to_connect(bytes);
	bytes_destroy(bytes);
	return connect;
}

void connect_service_write(connect_service* connect_service, connect* connect){
 8004290:	b580      	push	{r7, lr}
 8004292:	b088      	sub	sp, #32
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
 8004298:	6039      	str	r1, [r7, #0]
	if ( connect_service == NULL || connect == NULL ) return;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d037      	beq.n	8004310 <connect_service_write+0x80>
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d034      	beq.n	8004310 <connect_service_write+0x80>
	session* session = session_get_instance();
 80042a6:	f001 fb77 	bl	8005998 <session_get_instance>
 80042aa:	61f8      	str	r0, [r7, #28]
	if ( ! session_is_connected(session) ){
 80042ac:	69f8      	ldr	r0, [r7, #28]
 80042ae:	f001 fd37 	bl	8005d20 <session_is_connected>
 80042b2:	4603      	mov	r3, r0
 80042b4:	f083 0301 	eor.w	r3, r3, #1
 80042b8:	b2db      	uxtb	r3, r3
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d01a      	beq.n	80042f4 <connect_service_write+0x64>
		char* host = session_get_host(session);
 80042be:	69f8      	ldr	r0, [r7, #28]
 80042c0:	f001 fc70 	bl	8005ba4 <session_get_host>
 80042c4:	61b8      	str	r0, [r7, #24]
		unsigned int port = session_get_port(session);
 80042c6:	69f8      	ldr	r0, [r7, #28]
 80042c8:	f001 fc91 	bl	8005bee <session_get_port>
 80042cc:	6178      	str	r0, [r7, #20]
		control_packet_proxy_connect(connect_service->control_packet_proxy, host, port);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	697a      	ldr	r2, [r7, #20]
 80042d4:	69b9      	ldr	r1, [r7, #24]
 80042d6:	4618      	mov	r0, r3
 80042d8:	f000 f905 	bl	80044e6 <control_packet_proxy_connect>
		bool connected = control_packet_proxy_is_connected(connect_service->control_packet_proxy);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4618      	mov	r0, r3
 80042e2:	f000 f915 	bl	8004510 <control_packet_proxy_is_connected>
 80042e6:	4603      	mov	r3, r0
 80042e8:	74fb      	strb	r3, [r7, #19]
		session_set_connected(session, connected);
 80042ea:	7cfb      	ldrb	r3, [r7, #19]
 80042ec:	4619      	mov	r1, r3
 80042ee:	69f8      	ldr	r0, [r7, #28]
 80042f0:	f001 fd2a 	bl	8005d48 <session_set_connected>
	}
	bytes* bytes = connect_to_bytes(connect);
 80042f4:	6838      	ldr	r0, [r7, #0]
 80042f6:	f7ff fdd7 	bl	8003ea8 <connect_to_bytes>
 80042fa:	60f8      	str	r0, [r7, #12]
	control_packet_proxy_write(connect_service->control_packet_proxy, bytes);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	68f9      	ldr	r1, [r7, #12]
 8004302:	4618      	mov	r0, r3
 8004304:	f000 f917 	bl	8004536 <control_packet_proxy_write>
	bytes_destroy(bytes);
 8004308:	68f8      	ldr	r0, [r7, #12]
 800430a:	f7ff fabd 	bl	8003888 <bytes_destroy>
 800430e:	e000      	b.n	8004312 <connect_service_write+0x82>
	if ( connect_service == NULL || connect == NULL ) return;
 8004310:	bf00      	nop
}
 8004312:	3720      	adds	r7, #32
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}

08004318 <control_packet_init>:
const unsigned char CONTROL_PACKET_FLAG_UNSUBACK     = 0x00;
const unsigned char CONTROL_PACKET_FLAG_PINGREQ      = 0x00;
const unsigned char CONTROL_PACKET_FLAG_PINGRESP     = 0x00;
const unsigned char CONTROL_PACKET_FLAG_DISCONNECT   = 0x00;

control_packet* control_packet_init(const unsigned char type, const unsigned char flags, const long int remaining_length){
 8004318:	b580      	push	{r7, lr}
 800431a:	b084      	sub	sp, #16
 800431c:	af00      	add	r7, sp, #0
 800431e:	4603      	mov	r3, r0
 8004320:	603a      	str	r2, [r7, #0]
 8004322:	71fb      	strb	r3, [r7, #7]
 8004324:	460b      	mov	r3, r1
 8004326:	71bb      	strb	r3, [r7, #6]
	control_packet* result = (control_packet*) malloc(sizeof(control_packet));
 8004328:	2006      	movs	r0, #6
 800432a:	f006 fe39 	bl	800afa0 <malloc>
 800432e:	4603      	mov	r3, r0
 8004330:	60fb      	str	r3, [r7, #12]
	result->type 				= type;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	79fa      	ldrb	r2, [r7, #7]
 8004336:	701a      	strb	r2, [r3, #0]
	result->flags 				= flags;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	79ba      	ldrb	r2, [r7, #6]
 800433c:	705a      	strb	r2, [r3, #1]
	result->remaining_length 	= remaining_length;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	683a      	ldr	r2, [r7, #0]
 8004342:	f8c3 2002 	str.w	r2, [r3, #2]

	return result;
 8004346:	68fb      	ldr	r3, [r7, #12]
}
 8004348:	4618      	mov	r0, r3
 800434a:	3710      	adds	r7, #16
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}

08004350 <control_packet_get_flags>:
void control_packet_set_type(control_packet* control_packet, const unsigned char type){
	if( control_packet == NULL ) return;
	control_packet->type = type;
}

unsigned char control_packet_get_flags(control_packet* control_packet){
 8004350:	b480      	push	{r7}
 8004352:	b083      	sub	sp, #12
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
	return control_packet == NULL ? (unsigned char) 0 : control_packet->flags;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d002      	beq.n	8004364 <control_packet_get_flags+0x14>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	785b      	ldrb	r3, [r3, #1]
 8004362:	e000      	b.n	8004366 <control_packet_get_flags+0x16>
 8004364:	2300      	movs	r3, #0
}
 8004366:	4618      	mov	r0, r3
 8004368:	370c      	adds	r7, #12
 800436a:	46bd      	mov	sp, r7
 800436c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004370:	4770      	bx	lr

08004372 <control_packet_set_flags>:

void control_packet_set_flags(control_packet* control_packet, const unsigned char flags){
 8004372:	b480      	push	{r7}
 8004374:	b083      	sub	sp, #12
 8004376:	af00      	add	r7, sp, #0
 8004378:	6078      	str	r0, [r7, #4]
 800437a:	460b      	mov	r3, r1
 800437c:	70fb      	strb	r3, [r7, #3]
	if( control_packet == NULL ) return;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d003      	beq.n	800438c <control_packet_set_flags+0x1a>
	control_packet->flags = flags;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	78fa      	ldrb	r2, [r7, #3]
 8004388:	705a      	strb	r2, [r3, #1]
 800438a:	e000      	b.n	800438e <control_packet_set_flags+0x1c>
	if( control_packet == NULL ) return;
 800438c:	bf00      	nop
}
 800438e:	370c      	adds	r7, #12
 8004390:	46bd      	mov	sp, r7
 8004392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004396:	4770      	bx	lr

08004398 <control_packet_set_remaining_length>:

long int control_packet_get_remaining_length(control_packet* control_packet){
	return control_packet == NULL ? (long int) 0 : control_packet->remaining_length;
}

void control_packet_set_remaining_length(control_packet* control_packet, const long int remaining_length){
 8004398:	b480      	push	{r7}
 800439a:	b083      	sub	sp, #12
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
 80043a0:	6039      	str	r1, [r7, #0]
	if( control_packet == NULL ) return;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d004      	beq.n	80043b2 <control_packet_set_remaining_length+0x1a>
	control_packet->remaining_length = remaining_length;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	683a      	ldr	r2, [r7, #0]
 80043ac:	f8c3 2002 	str.w	r2, [r3, #2]
 80043b0:	e000      	b.n	80043b4 <control_packet_set_remaining_length+0x1c>
	if( control_packet == NULL ) return;
 80043b2:	bf00      	nop
}
 80043b4:	370c      	adds	r7, #12
 80043b6:	46bd      	mov	sp, r7
 80043b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043bc:	4770      	bx	lr

080043be <control_packet_to_bytes>:

bytes* control_packet_to_bytes(control_packet* control_packet){
 80043be:	b580      	push	{r7, lr}
 80043c0:	b086      	sub	sp, #24
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	6078      	str	r0, [r7, #4]
	if( control_packet == NULL ) return NULL;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d101      	bne.n	80043d0 <control_packet_to_bytes+0x12>
 80043cc:	2300      	movs	r3, #0
 80043ce:	e02f      	b.n	8004430 <control_packet_to_bytes+0x72>

	bytes* result = bytes_init();
 80043d0:	f7ff fa32 	bl	8003838 <bytes_init>
 80043d4:	60f8      	str	r0, [r7, #12]
	bytes_push_back(result, (unsigned char) ( control_packet->type | control_packet->flags ));
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	781a      	ldrb	r2, [r3, #0]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	785b      	ldrb	r3, [r3, #1]
 80043de:	4313      	orrs	r3, r2
 80043e0:	b2db      	uxtb	r3, r3
 80043e2:	4619      	mov	r1, r3
 80043e4:	68f8      	ldr	r0, [r7, #12]
 80043e6:	f7ff fac6 	bl	8003976 <bytes_push_back>

	unsigned char encode_byte;
	long int remaining_length = control_packet->remaining_length;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	f8d3 3002 	ldr.w	r3, [r3, #2]
 80043f0:	613b      	str	r3, [r7, #16]
	do {
		encode_byte = remaining_length % 128;
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	425a      	negs	r2, r3
 80043f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80043fa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80043fe:	bf58      	it	pl
 8004400:	4253      	negpl	r3, r2
 8004402:	75fb      	strb	r3, [r7, #23]
		remaining_length = remaining_length / 128;
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	2b00      	cmp	r3, #0
 8004408:	da00      	bge.n	800440c <control_packet_to_bytes+0x4e>
 800440a:	337f      	adds	r3, #127	; 0x7f
 800440c:	11db      	asrs	r3, r3, #7
 800440e:	613b      	str	r3, [r7, #16]
		if( remaining_length ) encode_byte = encode_byte | 0x80;
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d003      	beq.n	800441e <control_packet_to_bytes+0x60>
 8004416:	7dfb      	ldrb	r3, [r7, #23]
 8004418:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800441c:	75fb      	strb	r3, [r7, #23]
		bytes_push_back(result, (unsigned char) encode_byte);
 800441e:	7dfb      	ldrb	r3, [r7, #23]
 8004420:	4619      	mov	r1, r3
 8004422:	68f8      	ldr	r0, [r7, #12]
 8004424:	f7ff faa7 	bl	8003976 <bytes_push_back>
	} while ( remaining_length > 0 );
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	2b00      	cmp	r3, #0
 800442c:	dce1      	bgt.n	80043f2 <control_packet_to_bytes+0x34>

	return result;
 800442e:	68fb      	ldr	r3, [r7, #12]
}
 8004430:	4618      	mov	r0, r3
 8004432:	3718      	adds	r7, #24
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}

08004438 <control_packet_proxy_init>:
#include "../../Inc/mqtt_client/control_packet_proxy.h"

control_packet_proxy* control_packet_proxy_init(wifi* wifi, ping_req_service* ping_req_service, ping_resp_service* ping_resp_service, unsigned int connection_attempts){
 8004438:	b580      	push	{r7, lr}
 800443a:	b086      	sub	sp, #24
 800443c:	af00      	add	r7, sp, #0
 800443e:	60f8      	str	r0, [r7, #12]
 8004440:	60b9      	str	r1, [r7, #8]
 8004442:	607a      	str	r2, [r7, #4]
 8004444:	603b      	str	r3, [r7, #0]
	if( wifi == NULL || ping_req_service == NULL ||  ping_resp_service == NULL || connection_attempts == 0 ) return NULL;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d008      	beq.n	800445e <control_packet_proxy_init+0x26>
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d005      	beq.n	800445e <control_packet_proxy_init+0x26>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d002      	beq.n	800445e <control_packet_proxy_init+0x26>
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d101      	bne.n	8004462 <control_packet_proxy_init+0x2a>
 800445e:	2300      	movs	r3, #0
 8004460:	e011      	b.n	8004486 <control_packet_proxy_init+0x4e>
	control_packet_proxy* result = (control_packet_proxy*) malloc(sizeof(control_packet_proxy));
 8004462:	2010      	movs	r0, #16
 8004464:	f006 fd9c 	bl	800afa0 <malloc>
 8004468:	4603      	mov	r3, r0
 800446a:	617b      	str	r3, [r7, #20]
	result->wifi = wifi;
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	68fa      	ldr	r2, [r7, #12]
 8004470:	601a      	str	r2, [r3, #0]
	result->ping_req_service = ping_req_service;
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	68ba      	ldr	r2, [r7, #8]
 8004476:	605a      	str	r2, [r3, #4]
	result->ping_resp_service = ping_resp_service;
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	687a      	ldr	r2, [r7, #4]
 800447c:	609a      	str	r2, [r3, #8]
	result->connection_attempts = connection_attempts;
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	683a      	ldr	r2, [r7, #0]
 8004482:	60da      	str	r2, [r3, #12]
	return result;
 8004484:	697b      	ldr	r3, [r7, #20]
}
 8004486:	4618      	mov	r0, r3
 8004488:	3718      	adds	r7, #24
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}

0800448e <control_packet_proxy_destroy>:

void control_packet_proxy_destroy(control_packet_proxy* control_packet_proxy){
 800448e:	b580      	push	{r7, lr}
 8004490:	b082      	sub	sp, #8
 8004492:	af00      	add	r7, sp, #0
 8004494:	6078      	str	r0, [r7, #4]
	if( control_packet_proxy == NULL ) return;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d020      	beq.n	80044de <control_packet_proxy_destroy+0x50>
	control_packet_proxy->wifi = NULL;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2200      	movs	r2, #0
 80044a0:	701a      	strb	r2, [r3, #0]
 80044a2:	2200      	movs	r2, #0
 80044a4:	705a      	strb	r2, [r3, #1]
 80044a6:	2200      	movs	r2, #0
 80044a8:	709a      	strb	r2, [r3, #2]
 80044aa:	2200      	movs	r2, #0
 80044ac:	70da      	strb	r2, [r3, #3]
	control_packet_proxy->ping_req_service = NULL;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2200      	movs	r2, #0
 80044b2:	711a      	strb	r2, [r3, #4]
 80044b4:	2200      	movs	r2, #0
 80044b6:	715a      	strb	r2, [r3, #5]
 80044b8:	2200      	movs	r2, #0
 80044ba:	719a      	strb	r2, [r3, #6]
 80044bc:	2200      	movs	r2, #0
 80044be:	71da      	strb	r2, [r3, #7]
	control_packet_proxy->ping_resp_service = NULL;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2200      	movs	r2, #0
 80044c4:	721a      	strb	r2, [r3, #8]
 80044c6:	2200      	movs	r2, #0
 80044c8:	725a      	strb	r2, [r3, #9]
 80044ca:	2200      	movs	r2, #0
 80044cc:	729a      	strb	r2, [r3, #10]
 80044ce:	2200      	movs	r2, #0
 80044d0:	72da      	strb	r2, [r3, #11]
	free(control_packet_proxy);
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	f006 fd6c 	bl	800afb0 <free>
	control_packet_proxy = NULL;
 80044d8:	2300      	movs	r3, #0
 80044da:	607b      	str	r3, [r7, #4]
 80044dc:	e000      	b.n	80044e0 <control_packet_proxy_destroy+0x52>
	if( control_packet_proxy == NULL ) return;
 80044de:	bf00      	nop
}
 80044e0:	3708      	adds	r7, #8
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}

080044e6 <control_packet_proxy_connect>:

void control_packet_proxy_connect(control_packet_proxy* control_packet_proxy, char* ip, unsigned int port){
 80044e6:	b580      	push	{r7, lr}
 80044e8:	b084      	sub	sp, #16
 80044ea:	af00      	add	r7, sp, #0
 80044ec:	60f8      	str	r0, [r7, #12]
 80044ee:	60b9      	str	r1, [r7, #8]
 80044f0:	607a      	str	r2, [r7, #4]
	if( control_packet_proxy == NULL ) return;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d007      	beq.n	8004508 <control_packet_proxy_connect+0x22>
	wifi_connect(control_packet_proxy->wifi, ip, port);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	687a      	ldr	r2, [r7, #4]
 80044fe:	68b9      	ldr	r1, [r7, #8]
 8004500:	4618      	mov	r0, r3
 8004502:	f001 fdc0 	bl	8006086 <wifi_connect>
 8004506:	e000      	b.n	800450a <control_packet_proxy_connect+0x24>
	if( control_packet_proxy == NULL ) return;
 8004508:	bf00      	nop
}
 800450a:	3710      	adds	r7, #16
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}

08004510 <control_packet_proxy_is_connected>:
void control_packet_proxy_disconnect(control_packet_proxy* control_packet_proxy){
	if( control_packet_proxy == NULL ) return;
	wifi_disconnect(control_packet_proxy->wifi);
}

bool control_packet_proxy_is_connected(control_packet_proxy* control_packet_proxy){
 8004510:	b580      	push	{r7, lr}
 8004512:	b082      	sub	sp, #8
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
	if( control_packet_proxy == NULL ) return false;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d101      	bne.n	8004522 <control_packet_proxy_is_connected+0x12>
 800451e:	2300      	movs	r3, #0
 8004520:	e005      	b.n	800452e <control_packet_proxy_is_connected+0x1e>
	return wifi_is_connected(control_packet_proxy->wifi);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4618      	mov	r0, r3
 8004528:	f001 fdd3 	bl	80060d2 <wifi_is_connected>
 800452c:	4603      	mov	r3, r0
}
 800452e:	4618      	mov	r0, r3
 8004530:	3708      	adds	r7, #8
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}

08004536 <control_packet_proxy_write>:
bytes* control_packet_proxy_read(control_packet_proxy* control_packet_proxy){
	if( control_packet_proxy == NULL ) return NULL;
	return wifi_read(control_packet_proxy->wifi);
}

void control_packet_proxy_write(control_packet_proxy* control_packet_proxy, bytes* bytes){
 8004536:	b580      	push	{r7, lr}
 8004538:	b086      	sub	sp, #24
 800453a:	af00      	add	r7, sp, #0
 800453c:	6078      	str	r0, [r7, #4]
 800453e:	6039      	str	r1, [r7, #0]
	if(control_packet_proxy == NULL || bytes == NULL ) return;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d02a      	beq.n	800459c <control_packet_proxy_write+0x66>
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d027      	beq.n	800459c <control_packet_proxy_write+0x66>
	session* session = session_get_instance();
 800454c:	f001 fa24 	bl	8005998 <session_get_instance>
 8004550:	6178      	str	r0, [r7, #20]
	if( session_is_expired(session) ){
 8004552:	6978      	ldr	r0, [r7, #20]
 8004554:	f001 fc46 	bl	8005de4 <session_is_expired>
 8004558:	4603      	mov	r3, r0
 800455a:	2b00      	cmp	r3, #0
 800455c:	d014      	beq.n	8004588 <control_packet_proxy_write+0x52>
		ping_req* ping_req = ping_req_service_create(control_packet_proxy->ping_req_service);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	4618      	mov	r0, r3
 8004564:	f000 fc6f 	bl	8004e46 <ping_req_service_create>
 8004568:	6138      	str	r0, [r7, #16]
		ping_req_service_write(control_packet_proxy->ping_req_service, ping_req);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	6939      	ldr	r1, [r7, #16]
 8004570:	4618      	mov	r0, r3
 8004572:	f000 fc78 	bl	8004e66 <ping_req_service_write>

		ping_resp* ping_resp = ping_resp_service_read(control_packet_proxy->ping_resp_service);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	4618      	mov	r0, r3
 800457c:	f000 fcda 	bl	8004f34 <ping_resp_service_read>
 8004580:	60f8      	str	r0, [r7, #12]
		if( ping_resp == NULL ) return;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d00b      	beq.n	80045a0 <control_packet_proxy_write+0x6a>
	}
	wifi_write(control_packet_proxy->wifi, bytes);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	6839      	ldr	r1, [r7, #0]
 800458e:	4618      	mov	r0, r3
 8004590:	f001 fdc3 	bl	800611a <wifi_write>
	session_signal_time_last_package(session);
 8004594:	6978      	ldr	r0, [r7, #20]
 8004596:	f001 fc0d 	bl	8005db4 <session_signal_time_last_package>
 800459a:	e002      	b.n	80045a2 <control_packet_proxy_write+0x6c>
	if(control_packet_proxy == NULL || bytes == NULL ) return;
 800459c:	bf00      	nop
 800459e:	e000      	b.n	80045a2 <control_packet_proxy_write+0x6c>
		if( ping_resp == NULL ) return;
 80045a0:	bf00      	nop
}
 80045a2:	3718      	adds	r7, #24
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bd80      	pop	{r7, pc}

080045a8 <disconnect_service_init>:
#include "../../Inc/mqtt_client/disconnect_service.h"


disconnect_service* disconnect_service_init(control_packet_proxy* control_packet_proxy){
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b084      	sub	sp, #16
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
	if( control_packet_proxy == NULL ) return NULL;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d101      	bne.n	80045ba <disconnect_service_init+0x12>
 80045b6:	2300      	movs	r3, #0
 80045b8:	e008      	b.n	80045cc <disconnect_service_init+0x24>
	disconnect_service* result = (disconnect_service*) malloc(sizeof(disconnect_service));
 80045ba:	2004      	movs	r0, #4
 80045bc:	f006 fcf0 	bl	800afa0 <malloc>
 80045c0:	4603      	mov	r3, r0
 80045c2:	60fb      	str	r3, [r7, #12]
	result->control_packet_proxy = control_packet_proxy;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	687a      	ldr	r2, [r7, #4]
 80045c8:	601a      	str	r2, [r3, #0]
	return result;
 80045ca:	68fb      	ldr	r3, [r7, #12]
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	3710      	adds	r7, #16
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}

080045d4 <disconnect_service_destroy>:

void disconnect_service_destroy(disconnect_service* disconnect_service){
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b082      	sub	sp, #8
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
	if( disconnect_service == NULL ) return;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d00e      	beq.n	8004600 <disconnect_service_destroy+0x2c>
	disconnect_service->control_packet_proxy = NULL;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2200      	movs	r2, #0
 80045e6:	701a      	strb	r2, [r3, #0]
 80045e8:	2200      	movs	r2, #0
 80045ea:	705a      	strb	r2, [r3, #1]
 80045ec:	2200      	movs	r2, #0
 80045ee:	709a      	strb	r2, [r3, #2]
 80045f0:	2200      	movs	r2, #0
 80045f2:	70da      	strb	r2, [r3, #3]
	free(disconnect_service);
 80045f4:	6878      	ldr	r0, [r7, #4]
 80045f6:	f006 fcdb 	bl	800afb0 <free>
	disconnect_service = NULL;
 80045fa:	2300      	movs	r3, #0
 80045fc:	607b      	str	r3, [r7, #4]
 80045fe:	e000      	b.n	8004602 <disconnect_service_destroy+0x2e>
	if( disconnect_service == NULL ) return;
 8004600:	bf00      	nop
}
 8004602:	3708      	adds	r7, #8
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}

08004608 <mqtt_client_init>:
unsigned char MQTT_CLIENT_QOS_LEVEL_1 = 0x01;

unsigned char MQTT_CLIENT_QOS_LEVEL_2 = 0x02;


mqtt_client* mqtt_client_init(esp8266* esp8266){
 8004608:	b5f0      	push	{r4, r5, r6, r7, lr}
 800460a:	b08b      	sub	sp, #44	; 0x2c
 800460c:	af06      	add	r7, sp, #24
 800460e:	6078      	str	r0, [r7, #4]
	if( esp8266 == NULL ) return NULL;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d101      	bne.n	800461a <mqtt_client_init+0x12>
 8004616:	2300      	movs	r3, #0
 8004618:	e0c0      	b.n	800479c <mqtt_client_init+0x194>

	mqtt_client* result = (mqtt_client*) malloc(sizeof(mqtt_client));
 800461a:	2034      	movs	r0, #52	; 0x34
 800461c:	f006 fcc0 	bl	800afa0 <malloc>
 8004620:	4603      	mov	r3, r0
 8004622:	60fb      	str	r3, [r7, #12]

	result->wifi 					= wifi_init(esp8266, 1000);
 8004624:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004628:	6878      	ldr	r0, [r7, #4]
 800462a:	f001 fcbe 	bl	8005faa <wifi_init>
 800462e:	4602      	mov	r2, r0
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	601a      	str	r2, [r3, #0]
	result->ping_req_service 		= ping_req_service_init(result->wifi);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4618      	mov	r0, r3
 800463a:	f000 fbd4 	bl	8004de6 <ping_req_service_init>
 800463e:	4602      	mov	r2, r0
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	605a      	str	r2, [r3, #4]
	result->ping_resp_service		= ping_resp_service_init(result->wifi);
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4618      	mov	r0, r3
 800464a:	f000 fc43 	bl	8004ed4 <ping_resp_service_init>
 800464e:	4602      	mov	r2, r0
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	609a      	str	r2, [r3, #8]
	result->control_packet_proxy 	= control_packet_proxy_init(result->wifi, result->ping_req_service, result->ping_resp_service, 3);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	6818      	ldr	r0, [r3, #0]
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	6859      	ldr	r1, [r3, #4]
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	689a      	ldr	r2, [r3, #8]
 8004660:	2303      	movs	r3, #3
 8004662:	f7ff fee9 	bl	8004438 <control_packet_proxy_init>
 8004666:	4602      	mov	r2, r0
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	60da      	str	r2, [r3, #12]
	result->connack_service			= connack_service_init(result->control_packet_proxy);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	68db      	ldr	r3, [r3, #12]
 8004670:	4618      	mov	r0, r3
 8004672:	f7ff fa50 	bl	8003b16 <connack_service_init>
 8004676:	4602      	mov	r2, r0
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	611a      	str	r2, [r3, #16]
	result->connect_service			= connect_service_init(result->control_packet_proxy);
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	68db      	ldr	r3, [r3, #12]
 8004680:	4618      	mov	r0, r3
 8004682:	f7ff fd14 	bl	80040ae <connect_service_init>
 8004686:	4602      	mov	r2, r0
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	615a      	str	r2, [r3, #20]
	result->disconnect_service		= disconnect_service_init(result->control_packet_proxy);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	68db      	ldr	r3, [r3, #12]
 8004690:	4618      	mov	r0, r3
 8004692:	f7ff ff89 	bl	80045a8 <disconnect_service_init>
 8004696:	4602      	mov	r2, r0
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	619a      	str	r2, [r3, #24]
	result->pub_ack_service			= pub_ack_service_init(result->control_packet_proxy);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	68db      	ldr	r3, [r3, #12]
 80046a0:	4618      	mov	r0, r3
 80046a2:	f000 fcb4 	bl	800500e <pub_ack_service_init>
 80046a6:	4602      	mov	r2, r0
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	61da      	str	r2, [r3, #28]
	result->pub_comp_service			= pub_comp_service_init(result->control_packet_proxy);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	68db      	ldr	r3, [r3, #12]
 80046b0:	4618      	mov	r0, r3
 80046b2:	f000 fd40 	bl	8005136 <pub_comp_service_init>
 80046b6:	4602      	mov	r2, r0
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	621a      	str	r2, [r3, #32]
	result->publish_service			= publish_service_init(result->control_packet_proxy);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	68db      	ldr	r3, [r3, #12]
 80046c0:	4618      	mov	r0, r3
 80046c2:	f001 f8b7 	bl	8005834 <publish_service_init>
 80046c6:	4602      	mov	r2, r0
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	625a      	str	r2, [r3, #36]	; 0x24
	result->pub_rec_service			= pub_rec_service_init(result->control_packet_proxy);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	68db      	ldr	r3, [r3, #12]
 80046d0:	4618      	mov	r0, r3
 80046d2:	f000 fdc4 	bl	800525e <pub_rec_service_init>
 80046d6:	4602      	mov	r2, r0
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	629a      	str	r2, [r3, #40]	; 0x28
	result->pub_rel_service			= pub_rel_service_init(result->control_packet_proxy);
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	68db      	ldr	r3, [r3, #12]
 80046e0:	4618      	mov	r0, r3
 80046e2:	f000 fe91 	bl	8005408 <pub_rel_service_init>
 80046e6:	4602      	mov	r2, r0
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	62da      	str	r2, [r3, #44]	; 0x2c
	result->mqtt_service				= mqtt_service_init(result->control_packet_proxy, result->connack_service, result->connect_service, result->disconnect_service, result->pub_ack_service, result->pub_comp_service, result->publish_service, result->pub_rec_service, result->pub_rel_service);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	68dd      	ldr	r5, [r3, #12]
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	691e      	ldr	r6, [r3, #16]
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	f8d3 c014 	ldr.w	ip, [r3, #20]
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	f8d3 e018 	ldr.w	lr, [r3, #24]
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	69db      	ldr	r3, [r3, #28]
 8004704:	68fa      	ldr	r2, [r7, #12]
 8004706:	6a12      	ldr	r2, [r2, #32]
 8004708:	68f9      	ldr	r1, [r7, #12]
 800470a:	6a49      	ldr	r1, [r1, #36]	; 0x24
 800470c:	68f8      	ldr	r0, [r7, #12]
 800470e:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8004710:	68fc      	ldr	r4, [r7, #12]
 8004712:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
 8004714:	9404      	str	r4, [sp, #16]
 8004716:	9003      	str	r0, [sp, #12]
 8004718:	9102      	str	r1, [sp, #8]
 800471a:	9201      	str	r2, [sp, #4]
 800471c:	9300      	str	r3, [sp, #0]
 800471e:	4673      	mov	r3, lr
 8004720:	4662      	mov	r2, ip
 8004722:	4631      	mov	r1, r6
 8004724:	4628      	mov	r0, r5
 8004726:	f000 f8fc 	bl	8004922 <mqtt_service_init>
 800472a:	4602      	mov	r2, r0
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	631a      	str	r2, [r3, #48]	; 0x30

	if( result->wifi == NULL || result->ping_req_service == NULL || result->ping_resp_service == NULL ||
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d02b      	beq.n	8004790 <mqtt_client_init+0x188>
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d027      	beq.n	8004790 <mqtt_client_init+0x188>
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d023      	beq.n	8004790 <mqtt_client_init+0x188>
		result->control_packet_proxy == NULL || result->connack_service == NULL || result->connect_service == NULL ||
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	68db      	ldr	r3, [r3, #12]
	if( result->wifi == NULL || result->ping_req_service == NULL || result->ping_resp_service == NULL ||
 800474c:	2b00      	cmp	r3, #0
 800474e:	d01f      	beq.n	8004790 <mqtt_client_init+0x188>
		result->control_packet_proxy == NULL || result->connack_service == NULL || result->connect_service == NULL ||
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	691b      	ldr	r3, [r3, #16]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d01b      	beq.n	8004790 <mqtt_client_init+0x188>
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	695b      	ldr	r3, [r3, #20]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d017      	beq.n	8004790 <mqtt_client_init+0x188>
		result->disconnect_service == NULL || result->pub_ack_service == NULL || result->pub_comp_service == NULL ||
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	699b      	ldr	r3, [r3, #24]
		result->control_packet_proxy == NULL || result->connack_service == NULL || result->connect_service == NULL ||
 8004764:	2b00      	cmp	r3, #0
 8004766:	d013      	beq.n	8004790 <mqtt_client_init+0x188>
		result->disconnect_service == NULL || result->pub_ack_service == NULL || result->pub_comp_service == NULL ||
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	69db      	ldr	r3, [r3, #28]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d00f      	beq.n	8004790 <mqtt_client_init+0x188>
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	6a1b      	ldr	r3, [r3, #32]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d00b      	beq.n	8004790 <mqtt_client_init+0x188>
		result->publish_service == NULL || result->pub_rec_service == NULL || result->pub_rel_service == NULL ){
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
		result->disconnect_service == NULL || result->pub_ack_service == NULL || result->pub_comp_service == NULL ||
 800477c:	2b00      	cmp	r3, #0
 800477e:	d007      	beq.n	8004790 <mqtt_client_init+0x188>
		result->publish_service == NULL || result->pub_rec_service == NULL || result->pub_rel_service == NULL ){
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004784:	2b00      	cmp	r3, #0
 8004786:	d003      	beq.n	8004790 <mqtt_client_init+0x188>
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800478c:	2b00      	cmp	r3, #0
 800478e:	d104      	bne.n	800479a <mqtt_client_init+0x192>

		mqtt_client_destroy(result);
 8004790:	68f8      	ldr	r0, [r7, #12]
 8004792:	f000 f807 	bl	80047a4 <mqtt_client_destroy>

		return NULL;
 8004796:	2300      	movs	r3, #0
 8004798:	e000      	b.n	800479c <mqtt_client_init+0x194>
	}

	return result;
 800479a:	68fb      	ldr	r3, [r7, #12]
}
 800479c:	4618      	mov	r0, r3
 800479e:	3714      	adds	r7, #20
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080047a4 <mqtt_client_destroy>:

void mqtt_client_destroy(mqtt_client* mqtt_client){
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b082      	sub	sp, #8
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
	if ( mqtt_client == NULL ) return;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d046      	beq.n	8004840 <mqtt_client_destroy+0x9c>

	wifi_destroy(mqtt_client->wifi);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4618      	mov	r0, r3
 80047b8:	f001 fc2b 	bl	8006012 <wifi_destroy>
	ping_req_service_destroy(mqtt_client->ping_req_service);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	4618      	mov	r0, r3
 80047c2:	f000 fb26 	bl	8004e12 <ping_req_service_destroy>
	ping_resp_service_destroy(mqtt_client->ping_resp_service);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	4618      	mov	r0, r3
 80047cc:	f000 fb98 	bl	8004f00 <ping_resp_service_destroy>
	control_packet_proxy_destroy(mqtt_client->control_packet_proxy);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	68db      	ldr	r3, [r3, #12]
 80047d4:	4618      	mov	r0, r3
 80047d6:	f7ff fe5a 	bl	800448e <control_packet_proxy_destroy>
	connack_service_destroy(mqtt_client->connack_service);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	691b      	ldr	r3, [r3, #16]
 80047de:	4618      	mov	r0, r3
 80047e0:	f7ff f9af 	bl	8003b42 <connack_service_destroy>
	connect_service_destroy(mqtt_client->connect_service);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	695b      	ldr	r3, [r3, #20]
 80047e8:	4618      	mov	r0, r3
 80047ea:	f7ff fc76 	bl	80040da <connect_service_destroy>
	disconnect_service_destroy(mqtt_client->disconnect_service);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	699b      	ldr	r3, [r3, #24]
 80047f2:	4618      	mov	r0, r3
 80047f4:	f7ff feee 	bl	80045d4 <disconnect_service_destroy>
	pub_ack_service_destroy(mqtt_client->pub_ack_service);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	69db      	ldr	r3, [r3, #28]
 80047fc:	4618      	mov	r0, r3
 80047fe:	f000 fc1c 	bl	800503a <pub_ack_service_destroy>
	pub_comp_service_destroy(mqtt_client->pub_comp_service);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6a1b      	ldr	r3, [r3, #32]
 8004806:	4618      	mov	r0, r3
 8004808:	f000 fcab 	bl	8005162 <pub_comp_service_destroy>
	publish_service_destroy(mqtt_client->publish_service);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004810:	4618      	mov	r0, r3
 8004812:	f001 f825 	bl	8005860 <publish_service_destroy>
	pub_rec_service_destroy(mqtt_client->pub_rec_service);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800481a:	4618      	mov	r0, r3
 800481c:	f000 fd35 	bl	800528a <pub_rec_service_destroy>
	pub_rel_service_destroy(mqtt_client->pub_rel_service);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004824:	4618      	mov	r0, r3
 8004826:	f000 fe00 	bl	800542a <pub_rel_service_destroy>
	mqtt_service_destroy(mqtt_client->mqtt_service);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800482e:	4618      	mov	r0, r3
 8004830:	f000 f8a3 	bl	800497a <mqtt_service_destroy>

	free(mqtt_client);
 8004834:	6878      	ldr	r0, [r7, #4]
 8004836:	f006 fbbb 	bl	800afb0 <free>
	mqtt_client = NULL;
 800483a:	2300      	movs	r3, #0
 800483c:	607b      	str	r3, [r7, #4]
 800483e:	e000      	b.n	8004842 <mqtt_client_destroy+0x9e>
	if ( mqtt_client == NULL ) return;
 8004840:	bf00      	nop
}
 8004842:	3708      	adds	r7, #8
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}

08004848 <mqtt_client_connect>:

void mqtt_client_connect(mqtt_client* mqtt_client, char* id, char* host, unsigned int port, unsigned int keep_alive, bool clean_session){
 8004848:	b580      	push	{r7, lr}
 800484a:	b086      	sub	sp, #24
 800484c:	af02      	add	r7, sp, #8
 800484e:	60f8      	str	r0, [r7, #12]
 8004850:	60b9      	str	r1, [r7, #8]
 8004852:	607a      	str	r2, [r7, #4]
 8004854:	603b      	str	r3, [r7, #0]
	if( mqtt_client == NULL ) return;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d014      	beq.n	8004886 <mqtt_client_connect+0x3e>
	wifi_connect(mqtt_client->wifi, (uint8_t*) SMART_WATER_PROPERTIES_API_GATEWAY_HOST, (unsigned int) SMART_WATER_PROPERTIES_API_GATEWAY_PORT);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	6818      	ldr	r0, [r3, #0]
 8004860:	4b0b      	ldr	r3, [pc, #44]	; (8004890 <mqtt_client_connect+0x48>)
 8004862:	6819      	ldr	r1, [r3, #0]
 8004864:	4b0b      	ldr	r3, [pc, #44]	; (8004894 <mqtt_client_connect+0x4c>)
 8004866:	881b      	ldrh	r3, [r3, #0]
 8004868:	461a      	mov	r2, r3
 800486a:	f001 fc0c 	bl	8006086 <wifi_connect>
	mqtt_service_connect(mqtt_client->mqtt_service, id, host, port, keep_alive, clean_session);
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004872:	7f3b      	ldrb	r3, [r7, #28]
 8004874:	9301      	str	r3, [sp, #4]
 8004876:	69bb      	ldr	r3, [r7, #24]
 8004878:	9300      	str	r3, [sp, #0]
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	687a      	ldr	r2, [r7, #4]
 800487e:	68b9      	ldr	r1, [r7, #8]
 8004880:	f000 f90f 	bl	8004aa2 <mqtt_service_connect>
 8004884:	e000      	b.n	8004888 <mqtt_client_connect+0x40>
	if( mqtt_client == NULL ) return;
 8004886:	bf00      	nop
}
 8004888:	3710      	adds	r7, #16
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}
 800488e:	bf00      	nop
 8004890:	20000010 	.word	0x20000010
 8004894:	20000014 	.word	0x20000014

08004898 <mqtt_client_publish>:

void mqtt_client_publish(mqtt_client* mqtt_client, char* topic, char* payload, unsigned char qos, bool retain){
 8004898:	b580      	push	{r7, lr}
 800489a:	b086      	sub	sp, #24
 800489c:	af02      	add	r7, sp, #8
 800489e:	60f8      	str	r0, [r7, #12]
 80048a0:	60b9      	str	r1, [r7, #8]
 80048a2:	607a      	str	r2, [r7, #4]
 80048a4:	70fb      	strb	r3, [r7, #3]
	if( mqtt_client == NULL ) return;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d00a      	beq.n	80048c2 <mqtt_client_publish+0x2a>
	mqtt_service_publish(mqtt_client->mqtt_service, topic, payload, qos, retain);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80048b0:	78fa      	ldrb	r2, [r7, #3]
 80048b2:	7e3b      	ldrb	r3, [r7, #24]
 80048b4:	9300      	str	r3, [sp, #0]
 80048b6:	4613      	mov	r3, r2
 80048b8:	687a      	ldr	r2, [r7, #4]
 80048ba:	68b9      	ldr	r1, [r7, #8]
 80048bc:	f000 f944 	bl	8004b48 <mqtt_service_publish>
 80048c0:	e000      	b.n	80048c4 <mqtt_client_publish+0x2c>
	if( mqtt_client == NULL ) return;
 80048c2:	bf00      	nop
}
 80048c4:	3710      	adds	r7, #16
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}

080048ca <mqtt_server_request>:

	free(mqtt_server);
	mqtt_server = NULL;
}

void mqtt_server_request(mqtt_server* mqtt_server, bytes* bytes){
 80048ca:	b580      	push	{r7, lr}
 80048cc:	b082      	sub	sp, #8
 80048ce:	af00      	add	r7, sp, #0
 80048d0:	6078      	str	r0, [r7, #4]
 80048d2:	6039      	str	r1, [r7, #0]
	if( mqtt_server == NULL || bytes == NULL) return;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d01f      	beq.n	800491a <mqtt_server_request+0x50>
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d01c      	beq.n	800491a <mqtt_server_request+0x50>

	if( mqtt_server->connect == NULL ){
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d106      	bne.n	80048f6 <mqtt_server_request+0x2c>
		mqtt_server->connect = assembler_build_to_connect(bytes);
 80048e8:	6838      	ldr	r0, [r7, #0]
 80048ea:	f7fe fdd1 	bl	8003490 <assembler_build_to_connect>
 80048ee:	4602      	mov	r2, r0
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	601a      	str	r2, [r3, #0]
 80048f4:	e012      	b.n	800491c <mqtt_server_request+0x52>
	} else if ( mqtt_server->publish == NULL ){
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	689b      	ldr	r3, [r3, #8]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d106      	bne.n	800490c <mqtt_server_request+0x42>
		mqtt_server->publish = assembler_build_to_publish(bytes);
 80048fe:	6838      	ldr	r0, [r7, #0]
 8004900:	f7fe febe 	bl	8003680 <assembler_build_to_publish>
 8004904:	4602      	mov	r2, r0
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	609a      	str	r2, [r3, #8]
 800490a:	e007      	b.n	800491c <mqtt_server_request+0x52>
	} else {
		mqtt_server->pub_rel = assembler_build_to_pub_rel(bytes);
 800490c:	6838      	ldr	r0, [r7, #0]
 800490e:	f7fe ff37 	bl	8003780 <assembler_build_to_pub_rel>
 8004912:	4602      	mov	r2, r0
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	611a      	str	r2, [r3, #16]
 8004918:	e000      	b.n	800491c <mqtt_server_request+0x52>
	if( mqtt_server == NULL || bytes == NULL) return;
 800491a:	bf00      	nop
	}
}
 800491c:	3708      	adds	r7, #8
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}

08004922 <mqtt_service_init>:
unsigned char MQTT_SERVICE_QOS_LEVEL_1 = 0x01;

unsigned char MQTT_SERVICE_QOS_LEVEL_2 = 0x02;


mqtt_service* mqtt_service_init(control_packet_proxy* control_packet_proxy, connack_service* connack_service, connect_service* connect_service, disconnect_service* disconnect_service, pub_ack_service* pub_ack_service, pub_comp_service* pub_comp_service, publish_service* publish_service, pub_rec_service* pub_rec_service, pub_rel_service* pub_rel_service){
 8004922:	b580      	push	{r7, lr}
 8004924:	b086      	sub	sp, #24
 8004926:	af00      	add	r7, sp, #0
 8004928:	60f8      	str	r0, [r7, #12]
 800492a:	60b9      	str	r1, [r7, #8]
 800492c:	607a      	str	r2, [r7, #4]
 800492e:	603b      	str	r3, [r7, #0]
	mqtt_service* result = (mqtt_service*) malloc(sizeof(mqtt_service));
 8004930:	2024      	movs	r0, #36	; 0x24
 8004932:	f006 fb35 	bl	800afa0 <malloc>
 8004936:	4603      	mov	r3, r0
 8004938:	617b      	str	r3, [r7, #20]
	result->control_packet_proxy   = control_packet_proxy;
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	68fa      	ldr	r2, [r7, #12]
 800493e:	601a      	str	r2, [r3, #0]
	result->connack_service        = connack_service;
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	68ba      	ldr	r2, [r7, #8]
 8004944:	605a      	str	r2, [r3, #4]
	result->connect_service        = connect_service;
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	687a      	ldr	r2, [r7, #4]
 800494a:	609a      	str	r2, [r3, #8]
	result->disconnect_service     = disconnect_service;
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	683a      	ldr	r2, [r7, #0]
 8004950:	60da      	str	r2, [r3, #12]
	result->pub_ack_service        = pub_ack_service;
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	6a3a      	ldr	r2, [r7, #32]
 8004956:	611a      	str	r2, [r3, #16]
	result->pub_comp_service       = pub_comp_service;
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800495c:	615a      	str	r2, [r3, #20]
	result->publish_service        = publish_service;
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004962:	619a      	str	r2, [r3, #24]
	result->pub_rec_service        = pub_rec_service;
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004968:	61da      	str	r2, [r3, #28]
	result->pub_rel_service        = pub_rel_service;
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800496e:	621a      	str	r2, [r3, #32]
	return result;
 8004970:	697b      	ldr	r3, [r7, #20]
}
 8004972:	4618      	mov	r0, r3
 8004974:	3718      	adds	r7, #24
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}

0800497a <mqtt_service_destroy>:

void mqtt_service_destroy(mqtt_service* mqtt_service){
 800497a:	b580      	push	{r7, lr}
 800497c:	b082      	sub	sp, #8
 800497e:	af00      	add	r7, sp, #0
 8004980:	6078      	str	r0, [r7, #4]
	if( mqtt_service == NULL ) return;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2b00      	cmp	r3, #0
 8004986:	f000 8088 	beq.w	8004a9a <mqtt_service_destroy+0x120>

	control_packet_proxy_destroy(mqtt_service->control_packet_proxy);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4618      	mov	r0, r3
 8004990:	f7ff fd7d 	bl	800448e <control_packet_proxy_destroy>
	connack_service_destroy(mqtt_service->connack_service);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	4618      	mov	r0, r3
 800499a:	f7ff f8d2 	bl	8003b42 <connack_service_destroy>
	connect_service_destroy(mqtt_service->connect_service);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	4618      	mov	r0, r3
 80049a4:	f7ff fb99 	bl	80040da <connect_service_destroy>
	disconnect_service_destroy(mqtt_service->disconnect_service);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	68db      	ldr	r3, [r3, #12]
 80049ac:	4618      	mov	r0, r3
 80049ae:	f7ff fe11 	bl	80045d4 <disconnect_service_destroy>
	pub_ack_service_destroy(mqtt_service->pub_ack_service);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	691b      	ldr	r3, [r3, #16]
 80049b6:	4618      	mov	r0, r3
 80049b8:	f000 fb3f 	bl	800503a <pub_ack_service_destroy>
	pub_comp_service_destroy(mqtt_service->pub_comp_service);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	695b      	ldr	r3, [r3, #20]
 80049c0:	4618      	mov	r0, r3
 80049c2:	f000 fbce 	bl	8005162 <pub_comp_service_destroy>
	publish_service_destroy(mqtt_service->publish_service);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	699b      	ldr	r3, [r3, #24]
 80049ca:	4618      	mov	r0, r3
 80049cc:	f000 ff48 	bl	8005860 <publish_service_destroy>
	pub_rec_service_destroy(mqtt_service->pub_rec_service);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	69db      	ldr	r3, [r3, #28]
 80049d4:	4618      	mov	r0, r3
 80049d6:	f000 fc58 	bl	800528a <pub_rec_service_destroy>
	pub_rel_service_destroy(mqtt_service->pub_rel_service);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6a1b      	ldr	r3, [r3, #32]
 80049de:	4618      	mov	r0, r3
 80049e0:	f000 fd23 	bl	800542a <pub_rel_service_destroy>

	mqtt_service->control_packet_proxy = NULL;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2200      	movs	r2, #0
 80049e8:	701a      	strb	r2, [r3, #0]
 80049ea:	2200      	movs	r2, #0
 80049ec:	705a      	strb	r2, [r3, #1]
 80049ee:	2200      	movs	r2, #0
 80049f0:	709a      	strb	r2, [r3, #2]
 80049f2:	2200      	movs	r2, #0
 80049f4:	70da      	strb	r2, [r3, #3]
	mqtt_service->connack_service = NULL;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2200      	movs	r2, #0
 80049fa:	711a      	strb	r2, [r3, #4]
 80049fc:	2200      	movs	r2, #0
 80049fe:	715a      	strb	r2, [r3, #5]
 8004a00:	2200      	movs	r2, #0
 8004a02:	719a      	strb	r2, [r3, #6]
 8004a04:	2200      	movs	r2, #0
 8004a06:	71da      	strb	r2, [r3, #7]
	mqtt_service->connect_service = NULL;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	721a      	strb	r2, [r3, #8]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	725a      	strb	r2, [r3, #9]
 8004a12:	2200      	movs	r2, #0
 8004a14:	729a      	strb	r2, [r3, #10]
 8004a16:	2200      	movs	r2, #0
 8004a18:	72da      	strb	r2, [r3, #11]
	mqtt_service->disconnect_service = NULL;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	731a      	strb	r2, [r3, #12]
 8004a20:	2200      	movs	r2, #0
 8004a22:	735a      	strb	r2, [r3, #13]
 8004a24:	2200      	movs	r2, #0
 8004a26:	739a      	strb	r2, [r3, #14]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	73da      	strb	r2, [r3, #15]
	mqtt_service->pub_ack_service = NULL;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	741a      	strb	r2, [r3, #16]
 8004a32:	2200      	movs	r2, #0
 8004a34:	745a      	strb	r2, [r3, #17]
 8004a36:	2200      	movs	r2, #0
 8004a38:	749a      	strb	r2, [r3, #18]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	74da      	strb	r2, [r3, #19]
	mqtt_service->pub_comp_service = NULL;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2200      	movs	r2, #0
 8004a42:	751a      	strb	r2, [r3, #20]
 8004a44:	2200      	movs	r2, #0
 8004a46:	755a      	strb	r2, [r3, #21]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	759a      	strb	r2, [r3, #22]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	75da      	strb	r2, [r3, #23]
	mqtt_service->publish_service = NULL;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2200      	movs	r2, #0
 8004a54:	761a      	strb	r2, [r3, #24]
 8004a56:	2200      	movs	r2, #0
 8004a58:	765a      	strb	r2, [r3, #25]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	769a      	strb	r2, [r3, #26]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	76da      	strb	r2, [r3, #27]
	mqtt_service->pub_rec_service = NULL;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2200      	movs	r2, #0
 8004a66:	771a      	strb	r2, [r3, #28]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	775a      	strb	r2, [r3, #29]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	779a      	strb	r2, [r3, #30]
 8004a70:	2200      	movs	r2, #0
 8004a72:	77da      	strb	r2, [r3, #31]
	mqtt_service->pub_rel_service = NULL;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2200      	movs	r2, #0
 8004a78:	f883 2020 	strb.w	r2, [r3, #32]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8004a82:	2200      	movs	r2, #0
 8004a84:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8004a88:	2200      	movs	r2, #0
 8004a8a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

	free(mqtt_service);
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	f006 fa8e 	bl	800afb0 <free>
	mqtt_service = NULL;
 8004a94:	2300      	movs	r3, #0
 8004a96:	607b      	str	r3, [r7, #4]
 8004a98:	e000      	b.n	8004a9c <mqtt_service_destroy+0x122>
	if( mqtt_service == NULL ) return;
 8004a9a:	bf00      	nop
}
 8004a9c:	3708      	adds	r7, #8
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}

08004aa2 <mqtt_service_connect>:

void mqtt_service_connect(mqtt_service* mqtt_service, char* id, char* host, unsigned int port, unsigned int keep_alive, bool clean_session){
 8004aa2:	b580      	push	{r7, lr}
 8004aa4:	b088      	sub	sp, #32
 8004aa6:	af00      	add	r7, sp, #0
 8004aa8:	60f8      	str	r0, [r7, #12]
 8004aaa:	60b9      	str	r1, [r7, #8]
 8004aac:	607a      	str	r2, [r7, #4]
 8004aae:	603b      	str	r3, [r7, #0]
    session* session = session_get_instance();
 8004ab0:	f000 ff72 	bl	8005998 <session_get_instance>
 8004ab4:	61f8      	str	r0, [r7, #28]
    session_set_id(session, id);
 8004ab6:	68b9      	ldr	r1, [r7, #8]
 8004ab8:	69f8      	ldr	r0, [r7, #28]
 8004aba:	f001 f83a 	bl	8005b32 <session_set_id>
    session_set_host(session, host);
 8004abe:	6879      	ldr	r1, [r7, #4]
 8004ac0:	69f8      	ldr	r0, [r7, #28]
 8004ac2:	f001 f881 	bl	8005bc8 <session_set_host>
    session_set_port(session, port);
 8004ac6:	6839      	ldr	r1, [r7, #0]
 8004ac8:	69f8      	ldr	r0, [r7, #28]
 8004aca:	f001 f8a3 	bl	8005c14 <session_set_port>
    session_set_keep_alive(session, keep_alive);
 8004ace:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004ad0:	69f8      	ldr	r0, [r7, #28]
 8004ad2:	f001 f8c4 	bl	8005c5e <session_set_keep_alive>
    session_set_clean(session, clean_session);
 8004ad6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004ada:	4619      	mov	r1, r3
 8004adc:	69f8      	ldr	r0, [r7, #28]
 8004ade:	f001 f84e 	bl	8005b7e <session_set_clean>

    connect* connect = connect_service_create(mqtt_service->connect_service);
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f7ff fb12 	bl	8004110 <connect_service_create>
 8004aec:	61b8      	str	r0, [r7, #24]
    connect_service_write(mqtt_service->connect_service, connect);
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	689b      	ldr	r3, [r3, #8]
 8004af2:	69b9      	ldr	r1, [r7, #24]
 8004af4:	4618      	mov	r0, r3
 8004af6:	f7ff fbcb 	bl	8004290 <connect_service_write>
    connack* connack = connack_service_create(mqtt_service->connack_service);
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	4618      	mov	r0, r3
 8004b00:	f7ff f83a 	bl	8003b78 <connack_service_create>
 8004b04:	6178      	str	r0, [r7, #20]

    session_set_connected(session,  session_is_connected(session) && connack_is_connection_accepted(connack) );
 8004b06:	69f8      	ldr	r0, [r7, #28]
 8004b08:	f001 f90a 	bl	8005d20 <session_is_connected>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d007      	beq.n	8004b22 <mqtt_service_connect+0x80>
 8004b12:	6978      	ldr	r0, [r7, #20]
 8004b14:	f7fe ffe7 	bl	8003ae6 <connack_is_connection_accepted>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d001      	beq.n	8004b22 <mqtt_service_connect+0x80>
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e000      	b.n	8004b24 <mqtt_service_connect+0x82>
 8004b22:	2300      	movs	r3, #0
 8004b24:	f003 0301 	and.w	r3, r3, #1
 8004b28:	b2db      	uxtb	r3, r3
 8004b2a:	4619      	mov	r1, r3
 8004b2c:	69f8      	ldr	r0, [r7, #28]
 8004b2e:	f001 f90b 	bl	8005d48 <session_set_connected>

    connack_destroy(connack);
 8004b32:	6978      	ldr	r0, [r7, #20]
 8004b34:	f7fe ffbd 	bl	8003ab2 <connack_destroy>
    connect_destroy(connect);
 8004b38:	69b8      	ldr	r0, [r7, #24]
 8004b3a:	f7ff f915 	bl	8003d68 <connect_destroy>
}
 8004b3e:	bf00      	nop
 8004b40:	3720      	adds	r7, #32
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}
	...

08004b48 <mqtt_service_publish>:

void mqtt_service_publish(mqtt_service* mqtt_service, char* topic, char* payload, unsigned char qos, bool retain){
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b08a      	sub	sp, #40	; 0x28
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	60f8      	str	r0, [r7, #12]
 8004b50:	60b9      	str	r1, [r7, #8]
 8004b52:	607a      	str	r2, [r7, #4]
 8004b54:	70fb      	strb	r3, [r7, #3]
	if( mqtt_service == NULL || topic == NULL || payload == NULL ) return;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	f000 809e 	beq.w	8004c9a <mqtt_service_publish+0x152>
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	f000 809a 	beq.w	8004c9a <mqtt_service_publish+0x152>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	f000 8096 	beq.w	8004c9a <mqtt_service_publish+0x152>

	session* session = session_get_instance();
 8004b6e:	f000 ff13 	bl	8005998 <session_get_instance>
 8004b72:	6278      	str	r0, [r7, #36]	; 0x24
	session_set_qos(session, qos);
 8004b74:	78fb      	ldrb	r3, [r7, #3]
 8004b76:	4619      	mov	r1, r3
 8004b78:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004b7a:	f001 f897 	bl	8005cac <session_set_qos>
	session_set_retain(session, retain);
 8004b7e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004b82:	4619      	mov	r1, r3
 8004b84:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004b86:	f001 f8b8 	bl	8005cfa <session_set_retain>

	if( session_is_connected(session) ){
 8004b8a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004b8c:	f001 f8c8 	bl	8005d20 <session_is_connected>
 8004b90:	4603      	mov	r3, r0
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	f000 8082 	beq.w	8004c9c <mqtt_service_publish+0x154>
		publish* publish = publish_service_create(mqtt_service->publish_service);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	699b      	ldr	r3, [r3, #24]
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	f000 fe79 	bl	8005894 <publish_service_create>
 8004ba2:	6238      	str	r0, [r7, #32]
		publish_set_payload(publish, payload);
 8004ba4:	6879      	ldr	r1, [r7, #4]
 8004ba6:	6a38      	ldr	r0, [r7, #32]
 8004ba8:	f000 fd8a 	bl	80056c0 <publish_set_payload>
		publish_set_topic_name(publish, topic);
 8004bac:	68b9      	ldr	r1, [r7, #8]
 8004bae:	6a38      	ldr	r0, [r7, #32]
 8004bb0:	f000 fd4c 	bl	800564c <publish_set_topic_name>
		publish_service_write(mqtt_service->publish_service, publish);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	699b      	ldr	r3, [r3, #24]
 8004bb8:	6a39      	ldr	r1, [r7, #32]
 8004bba:	4618      	mov	r0, r3
 8004bbc:	f000 fece 	bl	800595c <publish_service_write>

		if ( session_get_qos(session) == PUBLISH_QOS_LEVEL_1 ){
 8004bc0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004bc2:	f001 f85f 	bl	8005c84 <session_get_qos>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	461a      	mov	r2, r3
 8004bca:	4b36      	ldr	r3, [pc, #216]	; (8004ca4 <mqtt_service_publish+0x15c>)
 8004bcc:	781b      	ldrb	r3, [r3, #0]
 8004bce:	429a      	cmp	r2, r3
 8004bd0:	d115      	bne.n	8004bfe <mqtt_service_publish+0xb6>
			session_set_unacknowledged_publish(session, publish);
 8004bd2:	6a39      	ldr	r1, [r7, #32]
 8004bd4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004bd6:	f001 f925 	bl	8005e24 <session_set_unacknowledged_publish>
			pub_ack* pub_ack = pub_ack_service_create(mqtt_service->pub_ack_service);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	691b      	ldr	r3, [r3, #16]
 8004bde:	4618      	mov	r0, r3
 8004be0:	f000 fa45 	bl	800506e <pub_ack_service_create>
 8004be4:	6138      	str	r0, [r7, #16]
			session_confirm(session, pub_ack_get_packet_identifier(pub_ack));
 8004be6:	6938      	ldr	r0, [r7, #16]
 8004be8:	f000 fa00 	bl	8004fec <pub_ack_get_packet_identifier>
 8004bec:	4603      	mov	r3, r0
 8004bee:	4619      	mov	r1, r3
 8004bf0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004bf2:	f001 f941 	bl	8005e78 <session_confirm>

			pub_ack_destroy(pub_ack);
 8004bf6:	6938      	ldr	r0, [r7, #16]
 8004bf8:	f000 f9de 	bl	8004fb8 <pub_ack_destroy>
 8004bfc:	e049      	b.n	8004c92 <mqtt_service_publish+0x14a>
		} else if ( session_get_qos(session) == PUBLISH_QOS_LEVEL_2 ){
 8004bfe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004c00:	f001 f840 	bl	8005c84 <session_get_qos>
 8004c04:	4603      	mov	r3, r0
 8004c06:	461a      	mov	r2, r3
 8004c08:	4b27      	ldr	r3, [pc, #156]	; (8004ca8 <mqtt_service_publish+0x160>)
 8004c0a:	781b      	ldrb	r3, [r3, #0]
 8004c0c:	429a      	cmp	r2, r3
 8004c0e:	d140      	bne.n	8004c92 <mqtt_service_publish+0x14a>
			session_set_unacknowledged_publish(session, publish);
 8004c10:	6a39      	ldr	r1, [r7, #32]
 8004c12:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004c14:	f001 f906 	bl	8005e24 <session_set_unacknowledged_publish>

			pub_rec* pub_rec = pub_rec_service_create(mqtt_service->pub_rec_service);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	69db      	ldr	r3, [r3, #28]
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	f000 fb4d 	bl	80052bc <pub_rec_service_create>
 8004c22:	61f8      	str	r0, [r7, #28]
			session_confirm(session, pub_rec_get_packet_identifier(pub_rec));
 8004c24:	69f8      	ldr	r0, [r7, #28]
 8004c26:	f000 fb09 	bl	800523c <pub_rec_get_packet_identifier>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	4619      	mov	r1, r3
 8004c2e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004c30:	f001 f922 	bl	8005e78 <session_confirm>
			session_set_unacknowledged_pub_rec(session, pub_rec);
 8004c34:	69f9      	ldr	r1, [r7, #28]
 8004c36:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004c38:	f001 f909 	bl	8005e4e <session_set_unacknowledged_pub_rec>

			pub_rel* pub_rel = pub_rel_service_create(mqtt_service->pub_rel_service);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	6a1b      	ldr	r3, [r3, #32]
 8004c40:	4618      	mov	r0, r3
 8004c42:	f000 fc0c 	bl	800545e <pub_rel_service_create>
 8004c46:	61b8      	str	r0, [r7, #24]
			pub_rel_set_packet_identifier(pub_rel, publish_get_packet_identifier(publish));
 8004c48:	6a38      	ldr	r0, [r7, #32]
 8004c4a:	f000 fd12 	bl	8005672 <publish_get_packet_identifier>
 8004c4e:	4603      	mov	r3, r0
 8004c50:	4619      	mov	r1, r3
 8004c52:	69b8      	ldr	r0, [r7, #24]
 8004c54:	f000 fb97 	bl	8005386 <pub_rel_set_packet_identifier>
			pub_rel_service_write(mqtt_service->pub_rel_service, pub_rel);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	6a1b      	ldr	r3, [r3, #32]
 8004c5c:	69b9      	ldr	r1, [r7, #24]
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f000 fc16 	bl	8005490 <pub_rel_service_write>

			pub_comp* pub_comp = pub_comp_service_create(mqtt_service->pub_comp_service);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	695b      	ldr	r3, [r3, #20]
 8004c68:	4618      	mov	r0, r3
 8004c6a:	f000 fa94 	bl	8005196 <pub_comp_service_create>
 8004c6e:	6178      	str	r0, [r7, #20]
			session_confirm(session, pub_comp_get_packet_identifier(pub_comp));
 8004c70:	6978      	ldr	r0, [r7, #20]
 8004c72:	f000 fa4f 	bl	8005114 <pub_comp_get_packet_identifier>
 8004c76:	4603      	mov	r3, r0
 8004c78:	4619      	mov	r1, r3
 8004c7a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004c7c:	f001 f8fc 	bl	8005e78 <session_confirm>

			pub_comp_destroy(pub_comp);
 8004c80:	6978      	ldr	r0, [r7, #20]
 8004c82:	f000 fa2d 	bl	80050e0 <pub_comp_destroy>
			pub_rel_destroy(pub_rel);
 8004c86:	69b8      	ldr	r0, [r7, #24]
 8004c88:	f000 fb52 	bl	8005330 <pub_rel_destroy>
			pub_rec_destroy(pub_rec);
 8004c8c:	69f8      	ldr	r0, [r7, #28]
 8004c8e:	f000 fabb 	bl	8005208 <pub_rec_destroy>
		}

		publish_destroy(publish);
 8004c92:	6a38      	ldr	r0, [r7, #32]
 8004c94:	f000 fcae 	bl	80055f4 <publish_destroy>
 8004c98:	e000      	b.n	8004c9c <mqtt_service_publish+0x154>
	if( mqtt_service == NULL || topic == NULL || payload == NULL ) return;
 8004c9a:	bf00      	nop
	}
}
 8004c9c:	3728      	adds	r7, #40	; 0x28
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}
 8004ca2:	bf00      	nop
 8004ca4:	200000e0 	.word	0x200000e0
 8004ca8:	200000e1 	.word	0x200000e1

08004cac <packet_util_build_bytes>:
#include "../../Inc/mqtt_client/packet_util.h"

bytes* packet_util_build_bytes(char* input){
 8004cac:	b590      	push	{r4, r7, lr}
 8004cae:	b087      	sub	sp, #28
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
	bytes* result = bytes_init();
 8004cb4:	f7fe fdc0 	bl	8003838 <bytes_init>
 8004cb8:	6178      	str	r0, [r7, #20]

	unsigned int length = string_util_length(input);
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f003 f813 	bl	8007ce6 <string_util_length>
 8004cc0:	6138      	str	r0, [r7, #16]
	unsigned char msb_length = (unsigned char) ( (0xFF00 & length) >> 8 );
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	0a1b      	lsrs	r3, r3, #8
 8004cc6:	73fb      	strb	r3, [r7, #15]
	unsigned char lsb_length = (unsigned char) ( 0x00FF & length );
 8004cc8:	693b      	ldr	r3, [r7, #16]
 8004cca:	73bb      	strb	r3, [r7, #14]
	bytes_push_back(result, msb_length);
 8004ccc:	7bfb      	ldrb	r3, [r7, #15]
 8004cce:	4619      	mov	r1, r3
 8004cd0:	6978      	ldr	r0, [r7, #20]
 8004cd2:	f7fe fe50 	bl	8003976 <bytes_push_back>
	bytes_push_back(result, lsb_length);
 8004cd6:	7bbb      	ldrb	r3, [r7, #14]
 8004cd8:	4619      	mov	r1, r3
 8004cda:	6978      	ldr	r0, [r7, #20]
 8004cdc:	f7fe fe4b 	bl	8003976 <bytes_push_back>

	for(register int i = 0; i < length; i++)
 8004ce0:	2400      	movs	r4, #0
 8004ce2:	e008      	b.n	8004cf6 <packet_util_build_bytes+0x4a>
		bytes_push_back(result, (unsigned char) input[i] );
 8004ce4:	4622      	mov	r2, r4
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	4413      	add	r3, r2
 8004cea:	781b      	ldrb	r3, [r3, #0]
 8004cec:	4619      	mov	r1, r3
 8004cee:	6978      	ldr	r0, [r7, #20]
 8004cf0:	f7fe fe41 	bl	8003976 <bytes_push_back>
	for(register int i = 0; i < length; i++)
 8004cf4:	3401      	adds	r4, #1
 8004cf6:	4622      	mov	r2, r4
 8004cf8:	693b      	ldr	r3, [r7, #16]
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d8f2      	bhi.n	8004ce4 <packet_util_build_bytes+0x38>

	return result;
 8004cfe:	697b      	ldr	r3, [r7, #20]
}
 8004d00:	4618      	mov	r0, r3
 8004d02:	371c      	adds	r7, #28
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bd90      	pop	{r4, r7, pc}

08004d08 <packet_util_build_string>:



char* packet_util_build_string(bytes* bytes, unsigned int* from){
 8004d08:	b5b0      	push	{r4, r5, r7, lr}
 8004d0a:	b086      	sub	sp, #24
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
 8004d10:	6039      	str	r1, [r7, #0]
	unsigned int msb_length = (unsigned int) ( bytes_at(bytes, *from) << 8);
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4619      	mov	r1, r3
 8004d18:	6878      	ldr	r0, [r7, #4]
 8004d1a:	f7fe fdfe 	bl	800391a <bytes_at>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	021b      	lsls	r3, r3, #8
 8004d22:	617b      	str	r3, [r7, #20]
	unsigned int lsb_length = (unsigned int) (bytes_at(bytes, (*from)+1));
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	3301      	adds	r3, #1
 8004d2a:	4619      	mov	r1, r3
 8004d2c:	6878      	ldr	r0, [r7, #4]
 8004d2e:	f7fe fdf4 	bl	800391a <bytes_at>
 8004d32:	4603      	mov	r3, r0
 8004d34:	613b      	str	r3, [r7, #16]
	unsigned int length = msb_length + lsb_length;
 8004d36:	697a      	ldr	r2, [r7, #20]
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	4413      	add	r3, r2
 8004d3c:	60fb      	str	r3, [r7, #12]

	char* field = string_util_build_empty_string(length+1);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	3301      	adds	r3, #1
 8004d42:	4618      	mov	r0, r3
 8004d44:	f002 ffdb 	bl	8007cfe <string_util_build_empty_string>
 8004d48:	60b8      	str	r0, [r7, #8]

	for(register unsigned int i = 0; i < length; i++ )
 8004d4a:	2400      	movs	r4, #0
 8004d4c:	e00c      	b.n	8004d68 <packet_util_build_string+0x60>
		field[i] = (char) bytes_at(bytes, *from + i + 2);
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4423      	add	r3, r4
 8004d54:	1c9a      	adds	r2, r3, #2
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	191d      	adds	r5, r3, r4
 8004d5a:	4611      	mov	r1, r2
 8004d5c:	6878      	ldr	r0, [r7, #4]
 8004d5e:	f7fe fddc 	bl	800391a <bytes_at>
 8004d62:	4603      	mov	r3, r0
 8004d64:	702b      	strb	r3, [r5, #0]
	for(register unsigned int i = 0; i < length; i++ )
 8004d66:	3401      	adds	r4, #1
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	429c      	cmp	r4, r3
 8004d6c:	d3ef      	bcc.n	8004d4e <packet_util_build_string+0x46>

	*from = *from + length + 2;
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	681a      	ldr	r2, [r3, #0]
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	4413      	add	r3, r2
 8004d76:	1c9a      	adds	r2, r3, #2
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	601a      	str	r2, [r3, #0]
	return field;
 8004d7c:	68bb      	ldr	r3, [r7, #8]
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3718      	adds	r7, #24
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bdb0      	pop	{r4, r5, r7, pc}
	...

08004d88 <ping_req_init>:
#include "../../Inc/mqtt_client/ping_req.h"


ping_req* ping_req_init(){
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b082      	sub	sp, #8
 8004d8c:	af00      	add	r7, sp, #0
	ping_req* result = (ping_req*) malloc(sizeof(ping_req));
 8004d8e:	2004      	movs	r0, #4
 8004d90:	f006 f906 	bl	800afa0 <malloc>
 8004d94:	4603      	mov	r3, r0
 8004d96:	607b      	str	r3, [r7, #4]
	result->control_packet = control_packet_init(CONTROL_PACKET_TYPE_PINGREQ, CONTROL_PACKET_FLAG_PINGREQ, 0x00);
 8004d98:	4b07      	ldr	r3, [pc, #28]	; (8004db8 <ping_req_init+0x30>)
 8004d9a:	7818      	ldrb	r0, [r3, #0]
 8004d9c:	4b07      	ldr	r3, [pc, #28]	; (8004dbc <ping_req_init+0x34>)
 8004d9e:	781b      	ldrb	r3, [r3, #0]
 8004da0:	2200      	movs	r2, #0
 8004da2:	4619      	mov	r1, r3
 8004da4:	f7ff fab8 	bl	8004318 <control_packet_init>
 8004da8:	4602      	mov	r2, r0
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	601a      	str	r2, [r3, #0]
	return result;
 8004dae:	687b      	ldr	r3, [r7, #4]
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	3708      	adds	r7, #8
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}
 8004db8:	080100f2 	.word	0x080100f2
 8004dbc:	080100fa 	.word	0x080100fa

08004dc0 <ping_req_to_bytes>:

	free(ping_req);
	ping_req = NULL;
}

bytes* ping_req_to_bytes(ping_req* ping_req){
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b082      	sub	sp, #8
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
	if( ping_req == NULL ) return NULL;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d101      	bne.n	8004dd2 <ping_req_to_bytes+0x12>
 8004dce:	2300      	movs	r3, #0
 8004dd0:	e005      	b.n	8004dde <ping_req_to_bytes+0x1e>
	return control_packet_to_bytes(ping_req->control_packet);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f7ff faf1 	bl	80043be <control_packet_to_bytes>
 8004ddc:	4603      	mov	r3, r0
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	3708      	adds	r7, #8
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}

08004de6 <ping_req_service_init>:
#include "../../Inc/mqtt_client/ping_req_service.h"


ping_req_service* ping_req_service_init(wifi* wifi){
 8004de6:	b580      	push	{r7, lr}
 8004de8:	b084      	sub	sp, #16
 8004dea:	af00      	add	r7, sp, #0
 8004dec:	6078      	str	r0, [r7, #4]
	if( wifi == NULL ) return NULL;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d101      	bne.n	8004df8 <ping_req_service_init+0x12>
 8004df4:	2300      	movs	r3, #0
 8004df6:	e008      	b.n	8004e0a <ping_req_service_init+0x24>
	ping_req_service* result = (ping_req_service*) malloc(sizeof(ping_req_service));
 8004df8:	2004      	movs	r0, #4
 8004dfa:	f006 f8d1 	bl	800afa0 <malloc>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	60fb      	str	r3, [r7, #12]
	result->wifi = wifi;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	687a      	ldr	r2, [r7, #4]
 8004e06:	601a      	str	r2, [r3, #0]
	return result;
 8004e08:	68fb      	ldr	r3, [r7, #12]
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	3710      	adds	r7, #16
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}

08004e12 <ping_req_service_destroy>:

void ping_req_service_destroy(ping_req_service* ping_req_service){
 8004e12:	b580      	push	{r7, lr}
 8004e14:	b082      	sub	sp, #8
 8004e16:	af00      	add	r7, sp, #0
 8004e18:	6078      	str	r0, [r7, #4]
	if( ping_req_service == NULL ) return;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d00e      	beq.n	8004e3e <ping_req_service_destroy+0x2c>
	ping_req_service->wifi = NULL;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2200      	movs	r2, #0
 8004e24:	701a      	strb	r2, [r3, #0]
 8004e26:	2200      	movs	r2, #0
 8004e28:	705a      	strb	r2, [r3, #1]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	709a      	strb	r2, [r3, #2]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	70da      	strb	r2, [r3, #3]
	free(ping_req_service);
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	f006 f8bc 	bl	800afb0 <free>
	ping_req_service = NULL;
 8004e38:	2300      	movs	r3, #0
 8004e3a:	607b      	str	r3, [r7, #4]
 8004e3c:	e000      	b.n	8004e40 <ping_req_service_destroy+0x2e>
	if( ping_req_service == NULL ) return;
 8004e3e:	bf00      	nop
}
 8004e40:	3708      	adds	r7, #8
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd80      	pop	{r7, pc}

08004e46 <ping_req_service_create>:

ping_req* ping_req_service_create(ping_req_service* ping_req_service){
 8004e46:	b580      	push	{r7, lr}
 8004e48:	b082      	sub	sp, #8
 8004e4a:	af00      	add	r7, sp, #0
 8004e4c:	6078      	str	r0, [r7, #4]
	if( ping_req_service == NULL ) return NULL;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d101      	bne.n	8004e58 <ping_req_service_create+0x12>
 8004e54:	2300      	movs	r3, #0
 8004e56:	e002      	b.n	8004e5e <ping_req_service_create+0x18>
	return ping_req_init();
 8004e58:	f7ff ff96 	bl	8004d88 <ping_req_init>
 8004e5c:	4603      	mov	r3, r0
}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	3708      	adds	r7, #8
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}

08004e66 <ping_req_service_write>:
    ping_req* ping_req = bytes_is_empty(bytes)? NULL : ping_req_init(bytes);
    bytes_destroy(bytes);
    return ping_req;
}

void ping_req_service_write(ping_req_service* ping_req_service, ping_req* ping_req){
 8004e66:	b580      	push	{r7, lr}
 8004e68:	b084      	sub	sp, #16
 8004e6a:	af00      	add	r7, sp, #0
 8004e6c:	6078      	str	r0, [r7, #4]
 8004e6e:	6039      	str	r1, [r7, #0]
	if( ping_req == NULL ) return;
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d00d      	beq.n	8004e92 <ping_req_service_write+0x2c>
	bytes* bytes = ping_req_to_bytes(ping_req);
 8004e76:	6838      	ldr	r0, [r7, #0]
 8004e78:	f7ff ffa2 	bl	8004dc0 <ping_req_to_bytes>
 8004e7c:	60f8      	str	r0, [r7, #12]
	wifi_write(ping_req_service->wifi, bytes);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	68f9      	ldr	r1, [r7, #12]
 8004e84:	4618      	mov	r0, r3
 8004e86:	f001 f948 	bl	800611a <wifi_write>
	bytes_destroy(bytes);
 8004e8a:	68f8      	ldr	r0, [r7, #12]
 8004e8c:	f7fe fcfc 	bl	8003888 <bytes_destroy>
 8004e90:	e000      	b.n	8004e94 <ping_req_service_write+0x2e>
	if( ping_req == NULL ) return;
 8004e92:	bf00      	nop
}
 8004e94:	3710      	adds	r7, #16
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}
	...

08004e9c <ping_resp_init>:
#include "../../Inc/mqtt_client/ping_resp.h"


ping_resp* ping_resp_init(){
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b082      	sub	sp, #8
 8004ea0:	af00      	add	r7, sp, #0
	ping_resp* result = (ping_resp*) malloc(sizeof(ping_resp));
 8004ea2:	2004      	movs	r0, #4
 8004ea4:	f006 f87c 	bl	800afa0 <malloc>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	607b      	str	r3, [r7, #4]
	result->control_packet = control_packet_init(CONTROL_PACKET_TYPE_PINGRESP, CONTROL_PACKET_FLAG_PINGRESP, 0x00);
 8004eac:	4b07      	ldr	r3, [pc, #28]	; (8004ecc <ping_resp_init+0x30>)
 8004eae:	7818      	ldrb	r0, [r3, #0]
 8004eb0:	4b07      	ldr	r3, [pc, #28]	; (8004ed0 <ping_resp_init+0x34>)
 8004eb2:	781b      	ldrb	r3, [r3, #0]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	4619      	mov	r1, r3
 8004eb8:	f7ff fa2e 	bl	8004318 <control_packet_init>
 8004ebc:	4602      	mov	r2, r0
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	601a      	str	r2, [r3, #0]
	return result;
 8004ec2:	687b      	ldr	r3, [r7, #4]
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	3708      	adds	r7, #8
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bd80      	pop	{r7, pc}
 8004ecc:	080100f3 	.word	0x080100f3
 8004ed0:	080100fb 	.word	0x080100fb

08004ed4 <ping_resp_service_init>:
#include "../../Inc/mqtt_client/ping_resp_service.h"


ping_resp_service* ping_resp_service_init(wifi* wifi){
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b084      	sub	sp, #16
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
	if( wifi == NULL ) return NULL;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d101      	bne.n	8004ee6 <ping_resp_service_init+0x12>
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	e008      	b.n	8004ef8 <ping_resp_service_init+0x24>
	ping_resp_service* result = (ping_resp_service*) malloc(sizeof(ping_resp_service));
 8004ee6:	2004      	movs	r0, #4
 8004ee8:	f006 f85a 	bl	800afa0 <malloc>
 8004eec:	4603      	mov	r3, r0
 8004eee:	60fb      	str	r3, [r7, #12]
	result->wifi = wifi;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	687a      	ldr	r2, [r7, #4]
 8004ef4:	601a      	str	r2, [r3, #0]
	return result;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	3710      	adds	r7, #16
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}

08004f00 <ping_resp_service_destroy>:

void ping_resp_service_destroy(ping_resp_service* ping_resp_service){
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b082      	sub	sp, #8
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
	if( ping_resp_service == NULL ) return;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d00e      	beq.n	8004f2c <ping_resp_service_destroy+0x2c>
	ping_resp_service->wifi = NULL;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2200      	movs	r2, #0
 8004f12:	701a      	strb	r2, [r3, #0]
 8004f14:	2200      	movs	r2, #0
 8004f16:	705a      	strb	r2, [r3, #1]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	709a      	strb	r2, [r3, #2]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	70da      	strb	r2, [r3, #3]
	free(ping_resp_service);
 8004f20:	6878      	ldr	r0, [r7, #4]
 8004f22:	f006 f845 	bl	800afb0 <free>
	ping_resp_service = NULL;
 8004f26:	2300      	movs	r3, #0
 8004f28:	607b      	str	r3, [r7, #4]
 8004f2a:	e000      	b.n	8004f2e <ping_resp_service_destroy+0x2e>
	if( ping_resp_service == NULL ) return;
 8004f2c:	bf00      	nop
}
 8004f2e:	3708      	adds	r7, #8
 8004f30:	46bd      	mov	sp, r7
 8004f32:	bd80      	pop	{r7, pc}

08004f34 <ping_resp_service_read>:
ping_resp* ping_resp_service_create(ping_resp_service* ping_resp_service){
	if( ping_resp_service == NULL ) return NULL;
	return ping_resp_init();
}

ping_resp* ping_resp_service_read(ping_resp_service* ping_resp_service){
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b084      	sub	sp, #16
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
	if( ping_resp_service == NULL ) return NULL;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d101      	bne.n	8004f46 <ping_resp_service_read+0x12>
 8004f42:	2300      	movs	r3, #0
 8004f44:	e013      	b.n	8004f6e <ping_resp_service_read+0x3a>
    bytes* bytes = wifi_read(ping_resp_service->wifi);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	f001 f8d5 	bl	80060fa <wifi_read>
 8004f50:	60f8      	str	r0, [r7, #12]
    ping_resp* ping_resp = bytes_is_empty(bytes)? NULL : ping_resp_init(bytes);
 8004f52:	68f8      	ldr	r0, [r7, #12]
 8004f54:	f7fe fccc 	bl	80038f0 <bytes_is_empty>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d104      	bne.n	8004f68 <ping_resp_service_read+0x34>
 8004f5e:	68f8      	ldr	r0, [r7, #12]
 8004f60:	f7ff ff9c 	bl	8004e9c <ping_resp_init>
 8004f64:	4603      	mov	r3, r0
 8004f66:	e000      	b.n	8004f6a <ping_resp_service_read+0x36>
 8004f68:	2300      	movs	r3, #0
 8004f6a:	60bb      	str	r3, [r7, #8]
    return ping_resp;
 8004f6c:	68bb      	ldr	r3, [r7, #8]
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3710      	adds	r7, #16
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}
	...

08004f78 <pub_ack_init>:
#include "../../Inc/mqtt_client/pub_ack.h"


pub_ack* pub_ack_init(unsigned int packet_identifier){
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b084      	sub	sp, #16
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
	pub_ack* result = (pub_ack*) malloc(sizeof(pub_ack));
 8004f80:	2008      	movs	r0, #8
 8004f82:	f006 f80d 	bl	800afa0 <malloc>
 8004f86:	4603      	mov	r3, r0
 8004f88:	60fb      	str	r3, [r7, #12]
	result->control_packet = control_packet_init(CONTROL_PACKET_TYPE_PUBACK, CONTROL_PACKET_FLAG_PUBACK, 0x00);
 8004f8a:	4b09      	ldr	r3, [pc, #36]	; (8004fb0 <pub_ack_init+0x38>)
 8004f8c:	7818      	ldrb	r0, [r3, #0]
 8004f8e:	4b09      	ldr	r3, [pc, #36]	; (8004fb4 <pub_ack_init+0x3c>)
 8004f90:	781b      	ldrb	r3, [r3, #0]
 8004f92:	2200      	movs	r2, #0
 8004f94:	4619      	mov	r1, r3
 8004f96:	f7ff f9bf 	bl	8004318 <control_packet_init>
 8004f9a:	4602      	mov	r2, r0
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	601a      	str	r2, [r3, #0]
	result->packet_identifier = packet_identifier;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	687a      	ldr	r2, [r7, #4]
 8004fa4:	605a      	str	r2, [r3, #4]
	return result;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	3710      	adds	r7, #16
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bd80      	pop	{r7, pc}
 8004fb0:	080100ee 	.word	0x080100ee
 8004fb4:	080100f6 	.word	0x080100f6

08004fb8 <pub_ack_destroy>:

void pub_ack_destroy(pub_ack* pub_ack){
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b082      	sub	sp, #8
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
	if( pub_ack == NULL ) return;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d00e      	beq.n	8004fe4 <pub_ack_destroy+0x2c>

	pub_ack->control_packet = NULL;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	701a      	strb	r2, [r3, #0]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	705a      	strb	r2, [r3, #1]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	709a      	strb	r2, [r3, #2]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	70da      	strb	r2, [r3, #3]

	free(pub_ack);
 8004fd8:	6878      	ldr	r0, [r7, #4]
 8004fda:	f005 ffe9 	bl	800afb0 <free>
	pub_ack = NULL;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	607b      	str	r3, [r7, #4]
 8004fe2:	e000      	b.n	8004fe6 <pub_ack_destroy+0x2e>
	if( pub_ack == NULL ) return;
 8004fe4:	bf00      	nop
}
 8004fe6:	3708      	adds	r7, #8
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bd80      	pop	{r7, pc}

08004fec <pub_ack_get_packet_identifier>:

unsigned int pub_ack_get_packet_identifier(pub_ack* pub_ack){
 8004fec:	b480      	push	{r7}
 8004fee:	b083      	sub	sp, #12
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
	return pub_ack == NULL ? 0 : pub_ack->packet_identifier;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d002      	beq.n	8005000 <pub_ack_get_packet_identifier+0x14>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	e000      	b.n	8005002 <pub_ack_get_packet_identifier+0x16>
 8005000:	2300      	movs	r3, #0
}
 8005002:	4618      	mov	r0, r3
 8005004:	370c      	adds	r7, #12
 8005006:	46bd      	mov	sp, r7
 8005008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500c:	4770      	bx	lr

0800500e <pub_ack_service_init>:
#include "../../Inc/mqtt_client/pub_ack_service.h"


pub_ack_service* pub_ack_service_init(control_packet_proxy* control_packet_proxy){
 800500e:	b580      	push	{r7, lr}
 8005010:	b084      	sub	sp, #16
 8005012:	af00      	add	r7, sp, #0
 8005014:	6078      	str	r0, [r7, #4]
	if( control_packet_proxy == NULL ) return NULL;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d101      	bne.n	8005020 <pub_ack_service_init+0x12>
 800501c:	2300      	movs	r3, #0
 800501e:	e008      	b.n	8005032 <pub_ack_service_init+0x24>
	pub_ack_service* result = (pub_ack_service*) malloc(sizeof(pub_ack_service));
 8005020:	2004      	movs	r0, #4
 8005022:	f005 ffbd 	bl	800afa0 <malloc>
 8005026:	4603      	mov	r3, r0
 8005028:	60fb      	str	r3, [r7, #12]
	result->control_packet_proxy = control_packet_proxy;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	687a      	ldr	r2, [r7, #4]
 800502e:	601a      	str	r2, [r3, #0]
	return result;
 8005030:	68fb      	ldr	r3, [r7, #12]
}
 8005032:	4618      	mov	r0, r3
 8005034:	3710      	adds	r7, #16
 8005036:	46bd      	mov	sp, r7
 8005038:	bd80      	pop	{r7, pc}

0800503a <pub_ack_service_destroy>:

void pub_ack_service_destroy(pub_ack_service* pub_ack_service){
 800503a:	b580      	push	{r7, lr}
 800503c:	b082      	sub	sp, #8
 800503e:	af00      	add	r7, sp, #0
 8005040:	6078      	str	r0, [r7, #4]
	if( pub_ack_service == NULL ) return;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d00e      	beq.n	8005066 <pub_ack_service_destroy+0x2c>
	pub_ack_service->control_packet_proxy = NULL;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2200      	movs	r2, #0
 800504c:	701a      	strb	r2, [r3, #0]
 800504e:	2200      	movs	r2, #0
 8005050:	705a      	strb	r2, [r3, #1]
 8005052:	2200      	movs	r2, #0
 8005054:	709a      	strb	r2, [r3, #2]
 8005056:	2200      	movs	r2, #0
 8005058:	70da      	strb	r2, [r3, #3]
	free(pub_ack_service);
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	f005 ffa8 	bl	800afb0 <free>
	pub_ack_service = NULL;
 8005060:	2300      	movs	r3, #0
 8005062:	607b      	str	r3, [r7, #4]
 8005064:	e000      	b.n	8005068 <pub_ack_service_destroy+0x2e>
	if( pub_ack_service == NULL ) return;
 8005066:	bf00      	nop
}
 8005068:	3708      	adds	r7, #8
 800506a:	46bd      	mov	sp, r7
 800506c:	bd80      	pop	{r7, pc}

0800506e <pub_ack_service_create>:

pub_ack* pub_ack_service_create(pub_ack_service* pub_ack_service){
 800506e:	b580      	push	{r7, lr}
 8005070:	b086      	sub	sp, #24
 8005072:	af00      	add	r7, sp, #0
 8005074:	6078      	str	r0, [r7, #4]
	if( pub_ack_service == NULL ) return NULL;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d101      	bne.n	8005080 <pub_ack_service_create+0x12>
 800507c:	2300      	movs	r3, #0
 800507e:	e00b      	b.n	8005098 <pub_ack_service_create+0x2a>
	session* session = session_get_instance();
 8005080:	f000 fc8a 	bl	8005998 <session_get_instance>
 8005084:	6178      	str	r0, [r7, #20]
	unsigned int packet_identifier = session_get_last_packet_identifier(session);
 8005086:	6978      	ldr	r0, [r7, #20]
 8005088:	f000 ff76 	bl	8005f78 <session_get_last_packet_identifier>
 800508c:	6138      	str	r0, [r7, #16]
	pub_ack* pub_ack = pub_ack_init(packet_identifier);
 800508e:	6938      	ldr	r0, [r7, #16]
 8005090:	f7ff ff72 	bl	8004f78 <pub_ack_init>
 8005094:	60f8      	str	r0, [r7, #12]
	return pub_ack;
 8005096:	68fb      	ldr	r3, [r7, #12]
}
 8005098:	4618      	mov	r0, r3
 800509a:	3718      	adds	r7, #24
 800509c:	46bd      	mov	sp, r7
 800509e:	bd80      	pop	{r7, pc}

080050a0 <pub_comp_init>:
#include "../../Inc/mqtt_client/pub_comp.h"

pub_comp* pub_comp_init(unsigned int packet_identifier){
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b084      	sub	sp, #16
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
	pub_comp* result = (pub_comp*) malloc(sizeof(pub_comp));
 80050a8:	2008      	movs	r0, #8
 80050aa:	f005 ff79 	bl	800afa0 <malloc>
 80050ae:	4603      	mov	r3, r0
 80050b0:	60fb      	str	r3, [r7, #12]
	result->control_packet = control_packet_init(CONTROL_PACKET_TYPE_PUBCOMP, CONTROL_PACKET_FLAG_PUBCOMP, 0x00);
 80050b2:	4b09      	ldr	r3, [pc, #36]	; (80050d8 <pub_comp_init+0x38>)
 80050b4:	7818      	ldrb	r0, [r3, #0]
 80050b6:	4b09      	ldr	r3, [pc, #36]	; (80050dc <pub_comp_init+0x3c>)
 80050b8:	781b      	ldrb	r3, [r3, #0]
 80050ba:	2200      	movs	r2, #0
 80050bc:	4619      	mov	r1, r3
 80050be:	f7ff f92b 	bl	8004318 <control_packet_init>
 80050c2:	4602      	mov	r2, r0
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	601a      	str	r2, [r3, #0]
	result->packet_identifier = packet_identifier;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	687a      	ldr	r2, [r7, #4]
 80050cc:	605a      	str	r2, [r3, #4]
	return result;
 80050ce:	68fb      	ldr	r3, [r7, #12]
}
 80050d0:	4618      	mov	r0, r3
 80050d2:	3710      	adds	r7, #16
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bd80      	pop	{r7, pc}
 80050d8:	080100f1 	.word	0x080100f1
 80050dc:	080100f9 	.word	0x080100f9

080050e0 <pub_comp_destroy>:

void pub_comp_destroy(pub_comp* pub_comp){
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b082      	sub	sp, #8
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
	if( pub_comp == NULL ) return;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d00e      	beq.n	800510c <pub_comp_destroy+0x2c>

	pub_comp->control_packet = NULL;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2200      	movs	r2, #0
 80050f2:	701a      	strb	r2, [r3, #0]
 80050f4:	2200      	movs	r2, #0
 80050f6:	705a      	strb	r2, [r3, #1]
 80050f8:	2200      	movs	r2, #0
 80050fa:	709a      	strb	r2, [r3, #2]
 80050fc:	2200      	movs	r2, #0
 80050fe:	70da      	strb	r2, [r3, #3]

	free(pub_comp);
 8005100:	6878      	ldr	r0, [r7, #4]
 8005102:	f005 ff55 	bl	800afb0 <free>
	pub_comp = NULL;
 8005106:	2300      	movs	r3, #0
 8005108:	607b      	str	r3, [r7, #4]
 800510a:	e000      	b.n	800510e <pub_comp_destroy+0x2e>
	if( pub_comp == NULL ) return;
 800510c:	bf00      	nop
}
 800510e:	3708      	adds	r7, #8
 8005110:	46bd      	mov	sp, r7
 8005112:	bd80      	pop	{r7, pc}

08005114 <pub_comp_get_packet_identifier>:

unsigned int pub_comp_get_packet_identifier(pub_comp* pub_comp){
 8005114:	b480      	push	{r7}
 8005116:	b083      	sub	sp, #12
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
	return pub_comp == NULL ? 0 : pub_comp->packet_identifier;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d002      	beq.n	8005128 <pub_comp_get_packet_identifier+0x14>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	e000      	b.n	800512a <pub_comp_get_packet_identifier+0x16>
 8005128:	2300      	movs	r3, #0
}
 800512a:	4618      	mov	r0, r3
 800512c:	370c      	adds	r7, #12
 800512e:	46bd      	mov	sp, r7
 8005130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005134:	4770      	bx	lr

08005136 <pub_comp_service_init>:
#include "../../Inc/mqtt_client/pub_comp_service.h"


pub_comp_service* pub_comp_service_init(control_packet_proxy* control_packet_proxy){
 8005136:	b580      	push	{r7, lr}
 8005138:	b084      	sub	sp, #16
 800513a:	af00      	add	r7, sp, #0
 800513c:	6078      	str	r0, [r7, #4]
	if( control_packet_proxy == NULL ) return NULL;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d101      	bne.n	8005148 <pub_comp_service_init+0x12>
 8005144:	2300      	movs	r3, #0
 8005146:	e008      	b.n	800515a <pub_comp_service_init+0x24>
	pub_comp_service* result = (pub_comp_service*) malloc(sizeof(pub_comp_service));
 8005148:	2004      	movs	r0, #4
 800514a:	f005 ff29 	bl	800afa0 <malloc>
 800514e:	4603      	mov	r3, r0
 8005150:	60fb      	str	r3, [r7, #12]
	result->control_packet_proxy = control_packet_proxy;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	687a      	ldr	r2, [r7, #4]
 8005156:	601a      	str	r2, [r3, #0]
	return result;
 8005158:	68fb      	ldr	r3, [r7, #12]
}
 800515a:	4618      	mov	r0, r3
 800515c:	3710      	adds	r7, #16
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}

08005162 <pub_comp_service_destroy>:

void pub_comp_service_destroy(pub_comp_service* pub_comp_service){
 8005162:	b580      	push	{r7, lr}
 8005164:	b082      	sub	sp, #8
 8005166:	af00      	add	r7, sp, #0
 8005168:	6078      	str	r0, [r7, #4]
	if( pub_comp_service == NULL ) return;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d00e      	beq.n	800518e <pub_comp_service_destroy+0x2c>
	pub_comp_service->control_packet_proxy = NULL;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2200      	movs	r2, #0
 8005174:	701a      	strb	r2, [r3, #0]
 8005176:	2200      	movs	r2, #0
 8005178:	705a      	strb	r2, [r3, #1]
 800517a:	2200      	movs	r2, #0
 800517c:	709a      	strb	r2, [r3, #2]
 800517e:	2200      	movs	r2, #0
 8005180:	70da      	strb	r2, [r3, #3]
	free(pub_comp_service);
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	f005 ff14 	bl	800afb0 <free>
	pub_comp_service = NULL;
 8005188:	2300      	movs	r3, #0
 800518a:	607b      	str	r3, [r7, #4]
 800518c:	e000      	b.n	8005190 <pub_comp_service_destroy+0x2e>
	if( pub_comp_service == NULL ) return;
 800518e:	bf00      	nop
}
 8005190:	3708      	adds	r7, #8
 8005192:	46bd      	mov	sp, r7
 8005194:	bd80      	pop	{r7, pc}

08005196 <pub_comp_service_create>:

pub_comp* pub_comp_service_create(pub_comp_service* pub_comp_service){
 8005196:	b580      	push	{r7, lr}
 8005198:	b086      	sub	sp, #24
 800519a:	af00      	add	r7, sp, #0
 800519c:	6078      	str	r0, [r7, #4]
	if( pub_comp_service == NULL ) return NULL;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d101      	bne.n	80051a8 <pub_comp_service_create+0x12>
 80051a4:	2300      	movs	r3, #0
 80051a6:	e00b      	b.n	80051c0 <pub_comp_service_create+0x2a>
    session* session = session_get_instance();
 80051a8:	f000 fbf6 	bl	8005998 <session_get_instance>
 80051ac:	6178      	str	r0, [r7, #20]
    unsigned int packet_identifier = session_get_last_packet_identifier(session);
 80051ae:	6978      	ldr	r0, [r7, #20]
 80051b0:	f000 fee2 	bl	8005f78 <session_get_last_packet_identifier>
 80051b4:	6138      	str	r0, [r7, #16]
    pub_comp* pub_comp = pub_comp_init(packet_identifier);
 80051b6:	6938      	ldr	r0, [r7, #16]
 80051b8:	f7ff ff72 	bl	80050a0 <pub_comp_init>
 80051bc:	60f8      	str	r0, [r7, #12]
    return pub_comp;
 80051be:	68fb      	ldr	r3, [r7, #12]
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	3718      	adds	r7, #24
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd80      	pop	{r7, pc}

080051c8 <pub_rec_init>:
#include "../../Inc/mqtt_client/pub_rec.h"


pub_rec* pub_rec_init(unsigned int packet_identifier){
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b084      	sub	sp, #16
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
	pub_rec* result = (pub_rec*) malloc(sizeof(pub_rec));
 80051d0:	2008      	movs	r0, #8
 80051d2:	f005 fee5 	bl	800afa0 <malloc>
 80051d6:	4603      	mov	r3, r0
 80051d8:	60fb      	str	r3, [r7, #12]
	result->control_packet = control_packet_init(CONTROL_PACKET_TYPE_PUBREC, CONTROL_PACKET_FLAG_PUBREC, 0x00);
 80051da:	4b09      	ldr	r3, [pc, #36]	; (8005200 <pub_rec_init+0x38>)
 80051dc:	7818      	ldrb	r0, [r3, #0]
 80051de:	4b09      	ldr	r3, [pc, #36]	; (8005204 <pub_rec_init+0x3c>)
 80051e0:	781b      	ldrb	r3, [r3, #0]
 80051e2:	2200      	movs	r2, #0
 80051e4:	4619      	mov	r1, r3
 80051e6:	f7ff f897 	bl	8004318 <control_packet_init>
 80051ea:	4602      	mov	r2, r0
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	601a      	str	r2, [r3, #0]
	result->packet_identifier = packet_identifier;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	687a      	ldr	r2, [r7, #4]
 80051f4:	605a      	str	r2, [r3, #4]
	return result;
 80051f6:	68fb      	ldr	r3, [r7, #12]
}
 80051f8:	4618      	mov	r0, r3
 80051fa:	3710      	adds	r7, #16
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bd80      	pop	{r7, pc}
 8005200:	080100ef 	.word	0x080100ef
 8005204:	080100f7 	.word	0x080100f7

08005208 <pub_rec_destroy>:

void pub_rec_destroy(pub_rec* pub_rec){
 8005208:	b580      	push	{r7, lr}
 800520a:	b082      	sub	sp, #8
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
	if( pub_rec == NULL ) return;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d00e      	beq.n	8005234 <pub_rec_destroy+0x2c>

	pub_rec->control_packet = NULL;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2200      	movs	r2, #0
 800521a:	701a      	strb	r2, [r3, #0]
 800521c:	2200      	movs	r2, #0
 800521e:	705a      	strb	r2, [r3, #1]
 8005220:	2200      	movs	r2, #0
 8005222:	709a      	strb	r2, [r3, #2]
 8005224:	2200      	movs	r2, #0
 8005226:	70da      	strb	r2, [r3, #3]

	free(pub_rec);
 8005228:	6878      	ldr	r0, [r7, #4]
 800522a:	f005 fec1 	bl	800afb0 <free>
	pub_rec = NULL;
 800522e:	2300      	movs	r3, #0
 8005230:	607b      	str	r3, [r7, #4]
 8005232:	e000      	b.n	8005236 <pub_rec_destroy+0x2e>
	if( pub_rec == NULL ) return;
 8005234:	bf00      	nop
}
 8005236:	3708      	adds	r7, #8
 8005238:	46bd      	mov	sp, r7
 800523a:	bd80      	pop	{r7, pc}

0800523c <pub_rec_get_packet_identifier>:

unsigned int pub_rec_get_packet_identifier(pub_rec* pub_rec){
 800523c:	b480      	push	{r7}
 800523e:	b083      	sub	sp, #12
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
	return pub_rec == NULL ? 0 : pub_rec->packet_identifier;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d002      	beq.n	8005250 <pub_rec_get_packet_identifier+0x14>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	e000      	b.n	8005252 <pub_rec_get_packet_identifier+0x16>
 8005250:	2300      	movs	r3, #0
}
 8005252:	4618      	mov	r0, r3
 8005254:	370c      	adds	r7, #12
 8005256:	46bd      	mov	sp, r7
 8005258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525c:	4770      	bx	lr

0800525e <pub_rec_service_init>:
#include "../../Inc/mqtt_client/pub_rec_service.h"


pub_rec_service* pub_rec_service_init(control_packet_proxy* control_packet_proxy){
 800525e:	b580      	push	{r7, lr}
 8005260:	b084      	sub	sp, #16
 8005262:	af00      	add	r7, sp, #0
 8005264:	6078      	str	r0, [r7, #4]
	if( control_packet_proxy == NULL ) return NULL;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d101      	bne.n	8005270 <pub_rec_service_init+0x12>
 800526c:	2300      	movs	r3, #0
 800526e:	e008      	b.n	8005282 <pub_rec_service_init+0x24>
	pub_rec_service* result = (pub_rec_service*) malloc(sizeof(pub_rec_service));
 8005270:	2004      	movs	r0, #4
 8005272:	f005 fe95 	bl	800afa0 <malloc>
 8005276:	4603      	mov	r3, r0
 8005278:	60fb      	str	r3, [r7, #12]
	result->control_packet_proxy = control_packet_proxy;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	687a      	ldr	r2, [r7, #4]
 800527e:	601a      	str	r2, [r3, #0]
	return result;
 8005280:	68fb      	ldr	r3, [r7, #12]
}
 8005282:	4618      	mov	r0, r3
 8005284:	3710      	adds	r7, #16
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}

0800528a <pub_rec_service_destroy>:

void pub_rec_service_destroy(pub_rec_service* pub_rec_service){
 800528a:	b480      	push	{r7}
 800528c:	b083      	sub	sp, #12
 800528e:	af00      	add	r7, sp, #0
 8005290:	6078      	str	r0, [r7, #4]
	if( pub_rec_service == NULL ) return;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d00b      	beq.n	80052b0 <pub_rec_service_destroy+0x26>
	pub_rec_service->control_packet_proxy = NULL;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2200      	movs	r2, #0
 800529c:	701a      	strb	r2, [r3, #0]
 800529e:	2200      	movs	r2, #0
 80052a0:	705a      	strb	r2, [r3, #1]
 80052a2:	2200      	movs	r2, #0
 80052a4:	709a      	strb	r2, [r3, #2]
 80052a6:	2200      	movs	r2, #0
 80052a8:	70da      	strb	r2, [r3, #3]
	pub_rec_service = NULL;
 80052aa:	2300      	movs	r3, #0
 80052ac:	607b      	str	r3, [r7, #4]
 80052ae:	e000      	b.n	80052b2 <pub_rec_service_destroy+0x28>
	if( pub_rec_service == NULL ) return;
 80052b0:	bf00      	nop
}
 80052b2:	370c      	adds	r7, #12
 80052b4:	46bd      	mov	sp, r7
 80052b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ba:	4770      	bx	lr

080052bc <pub_rec_service_create>:

pub_rec* pub_rec_service_create(pub_rec_service* pub_rec_service){
 80052bc:	b580      	push	{r7, lr}
 80052be:	b086      	sub	sp, #24
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
	if( pub_rec_service == NULL ) return NULL;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d101      	bne.n	80052ce <pub_rec_service_create+0x12>
 80052ca:	2300      	movs	r3, #0
 80052cc:	e00b      	b.n	80052e6 <pub_rec_service_create+0x2a>
    session* session = session_get_instance();
 80052ce:	f000 fb63 	bl	8005998 <session_get_instance>
 80052d2:	6178      	str	r0, [r7, #20]
    unsigned int packet_identifier = session_get_last_packet_identifier(session);
 80052d4:	6978      	ldr	r0, [r7, #20]
 80052d6:	f000 fe4f 	bl	8005f78 <session_get_last_packet_identifier>
 80052da:	6138      	str	r0, [r7, #16]
    pub_rec* result = pub_rec_init(packet_identifier);
 80052dc:	6938      	ldr	r0, [r7, #16]
 80052de:	f7ff ff73 	bl	80051c8 <pub_rec_init>
 80052e2:	60f8      	str	r0, [r7, #12]
    return result;
 80052e4:	68fb      	ldr	r3, [r7, #12]
}
 80052e6:	4618      	mov	r0, r3
 80052e8:	3718      	adds	r7, #24
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}
	...

080052f0 <pub_rel_init>:
#include "../../Inc/mqtt_client/pub_rel.h"

pub_rel* pub_rel_init(unsigned int packet_identifier){
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b084      	sub	sp, #16
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
	pub_rel* result = (pub_rel*) malloc(sizeof(pub_rel));
 80052f8:	2008      	movs	r0, #8
 80052fa:	f005 fe51 	bl	800afa0 <malloc>
 80052fe:	4603      	mov	r3, r0
 8005300:	60fb      	str	r3, [r7, #12]
	result->control_packet = control_packet_init(CONTROL_PACKET_TYPE_PUBREL, CONTROL_PACKET_FLAG_PUBREL, 0x02);
 8005302:	4b09      	ldr	r3, [pc, #36]	; (8005328 <pub_rel_init+0x38>)
 8005304:	7818      	ldrb	r0, [r3, #0]
 8005306:	4b09      	ldr	r3, [pc, #36]	; (800532c <pub_rel_init+0x3c>)
 8005308:	781b      	ldrb	r3, [r3, #0]
 800530a:	2202      	movs	r2, #2
 800530c:	4619      	mov	r1, r3
 800530e:	f7ff f803 	bl	8004318 <control_packet_init>
 8005312:	4602      	mov	r2, r0
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	601a      	str	r2, [r3, #0]
	result->packet_identifier = packet_identifier;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	687a      	ldr	r2, [r7, #4]
 800531c:	605a      	str	r2, [r3, #4]

	return result;
 800531e:	68fb      	ldr	r3, [r7, #12]
}
 8005320:	4618      	mov	r0, r3
 8005322:	3710      	adds	r7, #16
 8005324:	46bd      	mov	sp, r7
 8005326:	bd80      	pop	{r7, pc}
 8005328:	080100f0 	.word	0x080100f0
 800532c:	080100f8 	.word	0x080100f8

08005330 <pub_rel_destroy>:

void pub_rel_destroy(pub_rel* pub_rel){
 8005330:	b580      	push	{r7, lr}
 8005332:	b082      	sub	sp, #8
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
	if( pub_rel == NULL ) return;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d00e      	beq.n	800535c <pub_rel_destroy+0x2c>

	pub_rel->control_packet = NULL;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2200      	movs	r2, #0
 8005342:	701a      	strb	r2, [r3, #0]
 8005344:	2200      	movs	r2, #0
 8005346:	705a      	strb	r2, [r3, #1]
 8005348:	2200      	movs	r2, #0
 800534a:	709a      	strb	r2, [r3, #2]
 800534c:	2200      	movs	r2, #0
 800534e:	70da      	strb	r2, [r3, #3]

	free(pub_rel);
 8005350:	6878      	ldr	r0, [r7, #4]
 8005352:	f005 fe2d 	bl	800afb0 <free>
	pub_rel = NULL;
 8005356:	2300      	movs	r3, #0
 8005358:	607b      	str	r3, [r7, #4]
 800535a:	e000      	b.n	800535e <pub_rel_destroy+0x2e>
	if( pub_rel == NULL ) return;
 800535c:	bf00      	nop
}
 800535e:	3708      	adds	r7, #8
 8005360:	46bd      	mov	sp, r7
 8005362:	bd80      	pop	{r7, pc}

08005364 <pub_rel_get_packet_identifier>:

unsigned int pub_rel_get_packet_identifier(pub_rel* pub_rel){
 8005364:	b480      	push	{r7}
 8005366:	b083      	sub	sp, #12
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
	return pub_rel == NULL ? 0 : pub_rel->packet_identifier;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d002      	beq.n	8005378 <pub_rel_get_packet_identifier+0x14>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	e000      	b.n	800537a <pub_rel_get_packet_identifier+0x16>
 8005378:	2300      	movs	r3, #0
}
 800537a:	4618      	mov	r0, r3
 800537c:	370c      	adds	r7, #12
 800537e:	46bd      	mov	sp, r7
 8005380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005384:	4770      	bx	lr

08005386 <pub_rel_set_packet_identifier>:

void pub_rel_set_packet_identifier(pub_rel* pub_rel, unsigned int packet_identifier){
 8005386:	b480      	push	{r7}
 8005388:	b083      	sub	sp, #12
 800538a:	af00      	add	r7, sp, #0
 800538c:	6078      	str	r0, [r7, #4]
 800538e:	6039      	str	r1, [r7, #0]
	if( pub_rel == NULL ) return;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d003      	beq.n	800539e <pub_rel_set_packet_identifier+0x18>
	pub_rel->packet_identifier = packet_identifier;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	683a      	ldr	r2, [r7, #0]
 800539a:	605a      	str	r2, [r3, #4]
 800539c:	e000      	b.n	80053a0 <pub_rel_set_packet_identifier+0x1a>
	if( pub_rel == NULL ) return;
 800539e:	bf00      	nop
}
 80053a0:	370c      	adds	r7, #12
 80053a2:	46bd      	mov	sp, r7
 80053a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a8:	4770      	bx	lr

080053aa <pub_rel_to_bytes>:

bytes* pub_rel_to_bytes(pub_rel* pub_rel){
 80053aa:	b580      	push	{r7, lr}
 80053ac:	b086      	sub	sp, #24
 80053ae:	af00      	add	r7, sp, #0
 80053b0:	6078      	str	r0, [r7, #4]
	if( pub_rel == NULL ) return NULL;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d101      	bne.n	80053bc <pub_rel_to_bytes+0x12>
 80053b8:	2300      	movs	r3, #0
 80053ba:	e021      	b.n	8005400 <pub_rel_to_bytes+0x56>

    bytes* packet_identifier = bytes_init();
 80053bc:	f7fe fa3c 	bl	8003838 <bytes_init>
 80053c0:	6178      	str	r0, [r7, #20]
    unsigned char msb_packet_identifier = (unsigned char) ( (0xFF00 & pub_rel->packet_identifier) >> 8 );
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	685b      	ldr	r3, [r3, #4]
 80053c6:	0a1b      	lsrs	r3, r3, #8
 80053c8:	74fb      	strb	r3, [r7, #19]
    unsigned char lsb_packet_identifier = (unsigned char) ( 0x00FF & pub_rel->packet_identifier);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	74bb      	strb	r3, [r7, #18]
    bytes_push_back(packet_identifier, msb_packet_identifier);
 80053d0:	7cfb      	ldrb	r3, [r7, #19]
 80053d2:	4619      	mov	r1, r3
 80053d4:	6978      	ldr	r0, [r7, #20]
 80053d6:	f7fe face 	bl	8003976 <bytes_push_back>
    bytes_push_back(packet_identifier, lsb_packet_identifier);
 80053da:	7cbb      	ldrb	r3, [r7, #18]
 80053dc:	4619      	mov	r1, r3
 80053de:	6978      	ldr	r0, [r7, #20]
 80053e0:	f7fe fac9 	bl	8003976 <bytes_push_back>

    bytes* result = control_packet_to_bytes(pub_rel->control_packet);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4618      	mov	r0, r3
 80053ea:	f7fe ffe8 	bl	80043be <control_packet_to_bytes>
 80053ee:	60f8      	str	r0, [r7, #12]
    bytes_concat(result, packet_identifier);
 80053f0:	6979      	ldr	r1, [r7, #20]
 80053f2:	68f8      	ldr	r0, [r7, #12]
 80053f4:	f7fe fafb 	bl	80039ee <bytes_concat>
    bytes_destroy(packet_identifier);
 80053f8:	6978      	ldr	r0, [r7, #20]
 80053fa:	f7fe fa45 	bl	8003888 <bytes_destroy>
    return result;
 80053fe:	68fb      	ldr	r3, [r7, #12]
}
 8005400:	4618      	mov	r0, r3
 8005402:	3718      	adds	r7, #24
 8005404:	46bd      	mov	sp, r7
 8005406:	bd80      	pop	{r7, pc}

08005408 <pub_rel_service_init>:
#include "../../Inc/mqtt_client/pub_rel_service.h"

pub_rel_service* pub_rel_service_init(control_packet_proxy* control_packet_proxy){
 8005408:	b580      	push	{r7, lr}
 800540a:	b084      	sub	sp, #16
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
	pub_rel_service* result = (pub_rel_service*) malloc(sizeof(pub_rel_service));
 8005410:	2004      	movs	r0, #4
 8005412:	f005 fdc5 	bl	800afa0 <malloc>
 8005416:	4603      	mov	r3, r0
 8005418:	60fb      	str	r3, [r7, #12]
	result->control_packet_proxy = control_packet_proxy;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	687a      	ldr	r2, [r7, #4]
 800541e:	601a      	str	r2, [r3, #0]
	return result;
 8005420:	68fb      	ldr	r3, [r7, #12]
}
 8005422:	4618      	mov	r0, r3
 8005424:	3710      	adds	r7, #16
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}

0800542a <pub_rel_service_destroy>:

void pub_rel_service_destroy(pub_rel_service* pub_rel_service){
 800542a:	b580      	push	{r7, lr}
 800542c:	b082      	sub	sp, #8
 800542e:	af00      	add	r7, sp, #0
 8005430:	6078      	str	r0, [r7, #4]
	if( pub_rel_service == NULL ) return;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d00e      	beq.n	8005456 <pub_rel_service_destroy+0x2c>
	pub_rel_service->control_packet_proxy = NULL;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2200      	movs	r2, #0
 800543c:	701a      	strb	r2, [r3, #0]
 800543e:	2200      	movs	r2, #0
 8005440:	705a      	strb	r2, [r3, #1]
 8005442:	2200      	movs	r2, #0
 8005444:	709a      	strb	r2, [r3, #2]
 8005446:	2200      	movs	r2, #0
 8005448:	70da      	strb	r2, [r3, #3]
	free(pub_rel_service);
 800544a:	6878      	ldr	r0, [r7, #4]
 800544c:	f005 fdb0 	bl	800afb0 <free>
	pub_rel_service = NULL;
 8005450:	2300      	movs	r3, #0
 8005452:	607b      	str	r3, [r7, #4]
 8005454:	e000      	b.n	8005458 <pub_rel_service_destroy+0x2e>
	if( pub_rel_service == NULL ) return;
 8005456:	bf00      	nop
}
 8005458:	3708      	adds	r7, #8
 800545a:	46bd      	mov	sp, r7
 800545c:	bd80      	pop	{r7, pc}

0800545e <pub_rel_service_create>:

pub_rel* pub_rel_service_create(pub_rel_service* pub_rel_service){
 800545e:	b580      	push	{r7, lr}
 8005460:	b086      	sub	sp, #24
 8005462:	af00      	add	r7, sp, #0
 8005464:	6078      	str	r0, [r7, #4]
	if( pub_rel_service == NULL ) return NULL;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d101      	bne.n	8005470 <pub_rel_service_create+0x12>
 800546c:	2300      	movs	r3, #0
 800546e:	e00b      	b.n	8005488 <pub_rel_service_create+0x2a>
	session* session = session_get_instance();
 8005470:	f000 fa92 	bl	8005998 <session_get_instance>
 8005474:	6178      	str	r0, [r7, #20]
	unsigned int packet_identifier = session_get_last_packet_identifier(session);
 8005476:	6978      	ldr	r0, [r7, #20]
 8005478:	f000 fd7e 	bl	8005f78 <session_get_last_packet_identifier>
 800547c:	6138      	str	r0, [r7, #16]
	pub_rel* result= pub_rel_init(packet_identifier);
 800547e:	6938      	ldr	r0, [r7, #16]
 8005480:	f7ff ff36 	bl	80052f0 <pub_rel_init>
 8005484:	60f8      	str	r0, [r7, #12]
	return result;
 8005486:	68fb      	ldr	r3, [r7, #12]
}
 8005488:	4618      	mov	r0, r3
 800548a:	3718      	adds	r7, #24
 800548c:	46bd      	mov	sp, r7
 800548e:	bd80      	pop	{r7, pc}

08005490 <pub_rel_service_write>:
	pub_rel* pub_rel = bytes_is_empty(bytes) ? NULL : assembler_build_to_pub_rel(bytes);
	bytes_destroy(bytes);
	return pub_rel;
}

void pub_rel_service_write(pub_rel_service* pub_rel_service, pub_rel* pub_rel){
 8005490:	b580      	push	{r7, lr}
 8005492:	b084      	sub	sp, #16
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
 8005498:	6039      	str	r1, [r7, #0]
	if ( pub_rel_service == NULL ||  pub_rel == NULL ) return;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d010      	beq.n	80054c2 <pub_rel_service_write+0x32>
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d00d      	beq.n	80054c2 <pub_rel_service_write+0x32>
	bytes* bytes = pub_rel_to_bytes(pub_rel);
 80054a6:	6838      	ldr	r0, [r7, #0]
 80054a8:	f7ff ff7f 	bl	80053aa <pub_rel_to_bytes>
 80054ac:	60f8      	str	r0, [r7, #12]
	control_packet_proxy_write(pub_rel_service->control_packet_proxy, bytes);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	68f9      	ldr	r1, [r7, #12]
 80054b4:	4618      	mov	r0, r3
 80054b6:	f7ff f83e 	bl	8004536 <control_packet_proxy_write>
	bytes_destroy(bytes);
 80054ba:	68f8      	ldr	r0, [r7, #12]
 80054bc:	f7fe f9e4 	bl	8003888 <bytes_destroy>
 80054c0:	e000      	b.n	80054c4 <pub_rel_service_write+0x34>
	if ( pub_rel_service == NULL ||  pub_rel == NULL ) return;
 80054c2:	bf00      	nop
}
 80054c4:	3710      	adds	r7, #16
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bd80      	pop	{r7, pc}
	...

080054cc <publish_init>:

unsigned char PUBLISH_QOS_LEVEL_1 = 0x01;

unsigned char PUBLISH_QOS_LEVEL_2 = 0x02;

publish* publish_init(bool dup, unsigned char qos_level, bool retain){
 80054cc:	b590      	push	{r4, r7, lr}
 80054ce:	b085      	sub	sp, #20
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	4603      	mov	r3, r0
 80054d4:	71fb      	strb	r3, [r7, #7]
 80054d6:	460b      	mov	r3, r1
 80054d8:	71bb      	strb	r3, [r7, #6]
 80054da:	4613      	mov	r3, r2
 80054dc:	717b      	strb	r3, [r7, #5]
	publish* result = (publish*) malloc(sizeof(publish));
 80054de:	2011      	movs	r0, #17
 80054e0:	f005 fd5e 	bl	800afa0 <malloc>
 80054e4:	4603      	mov	r3, r0
 80054e6:	60fb      	str	r3, [r7, #12]
	result->control_packet = control_packet_init(CONTROL_PACKET_TYPE_PUBLISH, CONTROL_PACKET_FLAG_PUBLISH, 0x00);
 80054e8:	4b40      	ldr	r3, [pc, #256]	; (80055ec <publish_init+0x120>)
 80054ea:	7818      	ldrb	r0, [r3, #0]
 80054ec:	4b40      	ldr	r3, [pc, #256]	; (80055f0 <publish_init+0x124>)
 80054ee:	781b      	ldrb	r3, [r3, #0]
 80054f0:	2200      	movs	r2, #0
 80054f2:	4619      	mov	r1, r3
 80054f4:	f7fe ff10 	bl	8004318 <control_packet_init>
 80054f8:	4602      	mov	r2, r0
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	601a      	str	r2, [r3, #0]

	result->qos_level         = qos_level;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	79ba      	ldrb	r2, [r7, #6]
 8005502:	715a      	strb	r2, [r3, #5]
	result->dup               = result->qos_level == 0x00 ? false : dup;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	795b      	ldrb	r3, [r3, #5]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d004      	beq.n	8005516 <publish_init+0x4a>
 800550c:	79fb      	ldrb	r3, [r7, #7]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d001      	beq.n	8005516 <publish_init+0x4a>
 8005512:	2201      	movs	r2, #1
 8005514:	e000      	b.n	8005518 <publish_init+0x4c>
 8005516:	2200      	movs	r2, #0
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	711a      	strb	r2, [r3, #4]
    result->retain            = retain;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	797a      	ldrb	r2, [r7, #5]
 8005520:	719a      	strb	r2, [r3, #6]
    result->topic_name        = NULL;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	2200      	movs	r2, #0
 8005526:	71da      	strb	r2, [r3, #7]
 8005528:	2200      	movs	r2, #0
 800552a:	721a      	strb	r2, [r3, #8]
 800552c:	2200      	movs	r2, #0
 800552e:	725a      	strb	r2, [r3, #9]
 8005530:	2200      	movs	r2, #0
 8005532:	729a      	strb	r2, [r3, #10]
    result->packet_identifier = 0;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	2200      	movs	r2, #0
 8005538:	72da      	strb	r2, [r3, #11]
 800553a:	2200      	movs	r2, #0
 800553c:	731a      	strb	r2, [r3, #12]
    result->payload           = NULL;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	2200      	movs	r2, #0
 8005542:	735a      	strb	r2, [r3, #13]
 8005544:	2200      	movs	r2, #0
 8005546:	739a      	strb	r2, [r3, #14]
 8005548:	2200      	movs	r2, #0
 800554a:	73da      	strb	r2, [r3, #15]
 800554c:	2200      	movs	r2, #0
 800554e:	741a      	strb	r2, [r3, #16]
    control_packet_set_flags(result->control_packet, 0x00);
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	2100      	movs	r1, #0
 8005556:	4618      	mov	r0, r3
 8005558:	f7fe ff0b 	bl	8004372 <control_packet_set_flags>
    control_packet_set_flags(result->control_packet, result->dup == true ? (0x01 << 3) : control_packet_get_flags(result->control_packet) );
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681c      	ldr	r4, [r3, #0]
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	791b      	ldrb	r3, [r3, #4]
 8005564:	2b01      	cmp	r3, #1
 8005566:	d006      	beq.n	8005576 <publish_init+0xaa>
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4618      	mov	r0, r3
 800556e:	f7fe feef 	bl	8004350 <control_packet_get_flags>
 8005572:	4603      	mov	r3, r0
 8005574:	e000      	b.n	8005578 <publish_init+0xac>
 8005576:	2308      	movs	r3, #8
 8005578:	4619      	mov	r1, r3
 800557a:	4620      	mov	r0, r4
 800557c:	f7fe fef9 	bl	8004372 <control_packet_set_flags>
    control_packet_set_flags(result->control_packet, control_packet_get_flags(result->control_packet) | ( (result->qos_level & 0x03) << 1 ) );
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681c      	ldr	r4, [r3, #0]
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4618      	mov	r0, r3
 800558a:	f7fe fee1 	bl	8004350 <control_packet_get_flags>
 800558e:	4603      	mov	r3, r0
 8005590:	b25a      	sxtb	r2, r3
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	795b      	ldrb	r3, [r3, #5]
 8005596:	005b      	lsls	r3, r3, #1
 8005598:	b25b      	sxtb	r3, r3
 800559a:	f003 0306 	and.w	r3, r3, #6
 800559e:	b25b      	sxtb	r3, r3
 80055a0:	4313      	orrs	r3, r2
 80055a2:	b25b      	sxtb	r3, r3
 80055a4:	b2db      	uxtb	r3, r3
 80055a6:	4619      	mov	r1, r3
 80055a8:	4620      	mov	r0, r4
 80055aa:	f7fe fee2 	bl	8004372 <control_packet_set_flags>
    control_packet_set_flags(result->control_packet, result->retain ? control_packet_get_flags(result->control_packet) | 0x01 : control_packet_get_flags(result->control_packet));
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681c      	ldr	r4, [r3, #0]
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	799b      	ldrb	r3, [r3, #6]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d009      	beq.n	80055ce <publish_init+0x102>
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4618      	mov	r0, r3
 80055c0:	f7fe fec6 	bl	8004350 <control_packet_get_flags>
 80055c4:	4603      	mov	r3, r0
 80055c6:	f043 0301 	orr.w	r3, r3, #1
 80055ca:	b2db      	uxtb	r3, r3
 80055cc:	e005      	b.n	80055da <publish_init+0x10e>
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4618      	mov	r0, r3
 80055d4:	f7fe febc 	bl	8004350 <control_packet_get_flags>
 80055d8:	4603      	mov	r3, r0
 80055da:	4619      	mov	r1, r3
 80055dc:	4620      	mov	r0, r4
 80055de:	f7fe fec8 	bl	8004372 <control_packet_set_flags>

    return result;
 80055e2:	68fb      	ldr	r3, [r7, #12]
}
 80055e4:	4618      	mov	r0, r3
 80055e6:	3714      	adds	r7, #20
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bd90      	pop	{r4, r7, pc}
 80055ec:	080100ed 	.word	0x080100ed
 80055f0:	080100f5 	.word	0x080100f5

080055f4 <publish_destroy>:

void publish_destroy(publish* publish){
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b082      	sub	sp, #8
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
	if( publish == NULL ) return;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d020      	beq.n	8005644 <publish_destroy+0x50>

	publish->control_packet = NULL;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2200      	movs	r2, #0
 8005606:	701a      	strb	r2, [r3, #0]
 8005608:	2200      	movs	r2, #0
 800560a:	705a      	strb	r2, [r3, #1]
 800560c:	2200      	movs	r2, #0
 800560e:	709a      	strb	r2, [r3, #2]
 8005610:	2200      	movs	r2, #0
 8005612:	70da      	strb	r2, [r3, #3]
	publish->topic_name = NULL;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2200      	movs	r2, #0
 8005618:	71da      	strb	r2, [r3, #7]
 800561a:	2200      	movs	r2, #0
 800561c:	721a      	strb	r2, [r3, #8]
 800561e:	2200      	movs	r2, #0
 8005620:	725a      	strb	r2, [r3, #9]
 8005622:	2200      	movs	r2, #0
 8005624:	729a      	strb	r2, [r3, #10]
	publish->payload = NULL;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2200      	movs	r2, #0
 800562a:	735a      	strb	r2, [r3, #13]
 800562c:	2200      	movs	r2, #0
 800562e:	739a      	strb	r2, [r3, #14]
 8005630:	2200      	movs	r2, #0
 8005632:	73da      	strb	r2, [r3, #15]
 8005634:	2200      	movs	r2, #0
 8005636:	741a      	strb	r2, [r3, #16]

	free(publish);
 8005638:	6878      	ldr	r0, [r7, #4]
 800563a:	f005 fcb9 	bl	800afb0 <free>
	publish = NULL;
 800563e:	2300      	movs	r3, #0
 8005640:	607b      	str	r3, [r7, #4]
 8005642:	e000      	b.n	8005646 <publish_destroy+0x52>
	if( publish == NULL ) return;
 8005644:	bf00      	nop
}
 8005646:	3708      	adds	r7, #8
 8005648:	46bd      	mov	sp, r7
 800564a:	bd80      	pop	{r7, pc}

0800564c <publish_set_topic_name>:

char* publish_get_topic_name(publish* publish){
	return publish == NULL ? NULL : publish->topic_name;
}

void publish_set_topic_name(publish* publish, char* topic_name){
 800564c:	b480      	push	{r7}
 800564e:	b083      	sub	sp, #12
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
 8005654:	6039      	str	r1, [r7, #0]
	if( publish == NULL ) return;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d004      	beq.n	8005666 <publish_set_topic_name+0x1a>
	publish->topic_name = topic_name;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	683a      	ldr	r2, [r7, #0]
 8005660:	f8c3 2007 	str.w	r2, [r3, #7]
 8005664:	e000      	b.n	8005668 <publish_set_topic_name+0x1c>
	if( publish == NULL ) return;
 8005666:	bf00      	nop
}
 8005668:	370c      	adds	r7, #12
 800566a:	46bd      	mov	sp, r7
 800566c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005670:	4770      	bx	lr

08005672 <publish_get_packet_identifier>:

unsigned short publish_get_packet_identifier(publish* publish){
 8005672:	b480      	push	{r7}
 8005674:	b083      	sub	sp, #12
 8005676:	af00      	add	r7, sp, #0
 8005678:	6078      	str	r0, [r7, #4]
	return publish == NULL ? 0 : publish->packet_identifier;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d004      	beq.n	800568a <publish_get_packet_identifier+0x18>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 8005686:	b29b      	uxth	r3, r3
 8005688:	e000      	b.n	800568c <publish_get_packet_identifier+0x1a>
 800568a:	2300      	movs	r3, #0
}
 800568c:	4618      	mov	r0, r3
 800568e:	370c      	adds	r7, #12
 8005690:	46bd      	mov	sp, r7
 8005692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005696:	4770      	bx	lr

08005698 <publish_set_packet_identifier>:

void publish_set_packet_identifier(publish* publish, unsigned short packet_identifier){
 8005698:	b480      	push	{r7}
 800569a:	b083      	sub	sp, #12
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
 80056a0:	460b      	mov	r3, r1
 80056a2:	807b      	strh	r3, [r7, #2]
	if( publish == NULL ) return;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d004      	beq.n	80056b4 <publish_set_packet_identifier+0x1c>
	publish->packet_identifier = packet_identifier;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	887a      	ldrh	r2, [r7, #2]
 80056ae:	f8a3 200b 	strh.w	r2, [r3, #11]
 80056b2:	e000      	b.n	80056b6 <publish_set_packet_identifier+0x1e>
	if( publish == NULL ) return;
 80056b4:	bf00      	nop
}
 80056b6:	370c      	adds	r7, #12
 80056b8:	46bd      	mov	sp, r7
 80056ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056be:	4770      	bx	lr

080056c0 <publish_set_payload>:

char* publish_get_payload(publish* publish){
	return publish == NULL ? NULL : publish->payload;
}

void publish_set_payload(publish* publish, char* payload){
 80056c0:	b480      	push	{r7}
 80056c2:	b083      	sub	sp, #12
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
 80056c8:	6039      	str	r1, [r7, #0]
	if( publish == NULL ) return;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d004      	beq.n	80056da <publish_set_payload+0x1a>
	publish->payload = payload;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	683a      	ldr	r2, [r7, #0]
 80056d4:	f8c3 200d 	str.w	r2, [r3, #13]
 80056d8:	e000      	b.n	80056dc <publish_set_payload+0x1c>
	if( publish == NULL ) return;
 80056da:	bf00      	nop
}
 80056dc:	370c      	adds	r7, #12
 80056de:	46bd      	mov	sp, r7
 80056e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e4:	4770      	bx	lr
	...

080056e8 <publish_to_bytes>:

bytes* publish_to_bytes(publish* publish){
 80056e8:	b5b0      	push	{r4, r5, r7, lr}
 80056ea:	b08a      	sub	sp, #40	; 0x28
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
	if( publish == NULL ) return NULL;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d101      	bne.n	80056fa <publish_to_bytes+0x12>
 80056f6:	2300      	movs	r3, #0
 80056f8:	e093      	b.n	8005822 <publish_to_bytes+0x13a>

	bytes* variable_header = bytes_init();
 80056fa:	f7fe f89d 	bl	8003838 <bytes_init>
 80056fe:	6278      	str	r0, [r7, #36]	; 0x24
	if( ! string_util_is_empty(publish->topic_name) ){
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	f8d3 3007 	ldr.w	r3, [r3, #7]
 8005706:	4618      	mov	r0, r3
 8005708:	f002 fa76 	bl	8007bf8 <string_util_is_empty>
 800570c:	4603      	mov	r3, r0
 800570e:	f083 0301 	eor.w	r3, r3, #1
 8005712:	b2db      	uxtb	r3, r3
 8005714:	2b00      	cmp	r3, #0
 8005716:	d00d      	beq.n	8005734 <publish_to_bytes+0x4c>
		bytes* topic_name_field = packet_util_build_bytes(publish->topic_name);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	f8d3 3007 	ldr.w	r3, [r3, #7]
 800571e:	4618      	mov	r0, r3
 8005720:	f7ff fac4 	bl	8004cac <packet_util_build_bytes>
 8005724:	6238      	str	r0, [r7, #32]
		bytes_concat(variable_header, topic_name_field);
 8005726:	6a39      	ldr	r1, [r7, #32]
 8005728:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800572a:	f7fe f960 	bl	80039ee <bytes_concat>
		bytes_destroy(topic_name_field);
 800572e:	6a38      	ldr	r0, [r7, #32]
 8005730:	f7fe f8aa 	bl	8003888 <bytes_destroy>
	}

	if( publish->qos_level == PUBLISH_QOS_LEVEL_1 || publish->qos_level == PUBLISH_QOS_LEVEL_2 ) {
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	795a      	ldrb	r2, [r3, #5]
 8005738:	4b3c      	ldr	r3, [pc, #240]	; (800582c <publish_to_bytes+0x144>)
 800573a:	781b      	ldrb	r3, [r3, #0]
 800573c:	429a      	cmp	r2, r3
 800573e:	d005      	beq.n	800574c <publish_to_bytes+0x64>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	795a      	ldrb	r2, [r3, #5]
 8005744:	4b3a      	ldr	r3, [pc, #232]	; (8005830 <publish_to_bytes+0x148>)
 8005746:	781b      	ldrb	r3, [r3, #0]
 8005748:	429a      	cmp	r2, r3
 800574a:	d11f      	bne.n	800578c <publish_to_bytes+0xa4>
		bytes* packet_identifier_field = bytes_init();
 800574c:	f7fe f874 	bl	8003838 <bytes_init>
 8005750:	61f8      	str	r0, [r7, #28]
	    unsigned char msb_packet_identifier = (unsigned char) ( (0xFF00 & publish->packet_identifier) >> 8 );
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 8005758:	b29b      	uxth	r3, r3
 800575a:	0a1b      	lsrs	r3, r3, #8
 800575c:	b29b      	uxth	r3, r3
 800575e:	76fb      	strb	r3, [r7, #27]
	    unsigned char lsb_packet_identifier = (unsigned char) ( 0x00FF & publish->packet_identifier);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 8005766:	b29b      	uxth	r3, r3
 8005768:	76bb      	strb	r3, [r7, #26]
	    bytes_push_back(packet_identifier_field, msb_packet_identifier);
 800576a:	7efb      	ldrb	r3, [r7, #27]
 800576c:	4619      	mov	r1, r3
 800576e:	69f8      	ldr	r0, [r7, #28]
 8005770:	f7fe f901 	bl	8003976 <bytes_push_back>
	    bytes_push_back(packet_identifier_field, lsb_packet_identifier);
 8005774:	7ebb      	ldrb	r3, [r7, #26]
 8005776:	4619      	mov	r1, r3
 8005778:	69f8      	ldr	r0, [r7, #28]
 800577a:	f7fe f8fc 	bl	8003976 <bytes_push_back>
	    bytes_concat(variable_header, packet_identifier_field);
 800577e:	69f9      	ldr	r1, [r7, #28]
 8005780:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005782:	f7fe f934 	bl	80039ee <bytes_concat>
	    bytes_destroy(packet_identifier_field);
 8005786:	69f8      	ldr	r0, [r7, #28]
 8005788:	f7fe f87e 	bl	8003888 <bytes_destroy>
	}

	// The length of the payload can be calculated by subtracting the length of the variable header from the Remaining Length field that is in the Fixed Header
	// so there's no need to add the field size
	bytes* payload = bytes_init();
 800578c:	f7fe f854 	bl	8003838 <bytes_init>
 8005790:	6178      	str	r0, [r7, #20]
	if ( ! string_util_is_empty(publish->payload) ){
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	f8d3 300d 	ldr.w	r3, [r3, #13]
 8005798:	4618      	mov	r0, r3
 800579a:	f002 fa2d 	bl	8007bf8 <string_util_is_empty>
 800579e:	4603      	mov	r3, r0
 80057a0:	f083 0301 	eor.w	r3, r3, #1
 80057a4:	b2db      	uxtb	r3, r3
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d017      	beq.n	80057da <publish_to_bytes+0xf2>
		unsigned int length = string_util_length(publish->payload);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	f8d3 300d 	ldr.w	r3, [r3, #13]
 80057b0:	4618      	mov	r0, r3
 80057b2:	f002 fa98 	bl	8007ce6 <string_util_length>
 80057b6:	6138      	str	r0, [r7, #16]
		for(register int i = 0; i < length; i++) bytes_push_back(payload, (unsigned char) publish->payload[i] );
 80057b8:	2400      	movs	r4, #0
 80057ba:	e00a      	b.n	80057d2 <publish_to_bytes+0xea>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	f8d3 300d 	ldr.w	r3, [r3, #13]
 80057c2:	4622      	mov	r2, r4
 80057c4:	4413      	add	r3, r2
 80057c6:	781b      	ldrb	r3, [r3, #0]
 80057c8:	4619      	mov	r1, r3
 80057ca:	6978      	ldr	r0, [r7, #20]
 80057cc:	f7fe f8d3 	bl	8003976 <bytes_push_back>
 80057d0:	3401      	adds	r4, #1
 80057d2:	4622      	mov	r2, r4
 80057d4:	693b      	ldr	r3, [r7, #16]
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d8f0      	bhi.n	80057bc <publish_to_bytes+0xd4>
		//bytes_concat(payload, packet_util_build_bytes(publish->payload));
	}

	control_packet_set_remaining_length(publish->control_packet, (long int) bytes_get_size(variable_header) + bytes_get_size(payload) );
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681c      	ldr	r4, [r3, #0]
 80057de:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80057e0:	f7fe f8f3 	bl	80039ca <bytes_get_size>
 80057e4:	4605      	mov	r5, r0
 80057e6:	6978      	ldr	r0, [r7, #20]
 80057e8:	f7fe f8ef 	bl	80039ca <bytes_get_size>
 80057ec:	4603      	mov	r3, r0
 80057ee:	442b      	add	r3, r5
 80057f0:	4619      	mov	r1, r3
 80057f2:	4620      	mov	r0, r4
 80057f4:	f7fe fdd0 	bl	8004398 <control_packet_set_remaining_length>

	bytes* result = control_packet_to_bytes(publish->control_packet);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4618      	mov	r0, r3
 80057fe:	f7fe fdde 	bl	80043be <control_packet_to_bytes>
 8005802:	60f8      	str	r0, [r7, #12]
	bytes_concat(result, variable_header);
 8005804:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005806:	68f8      	ldr	r0, [r7, #12]
 8005808:	f7fe f8f1 	bl	80039ee <bytes_concat>
	bytes_concat(result, payload);
 800580c:	6979      	ldr	r1, [r7, #20]
 800580e:	68f8      	ldr	r0, [r7, #12]
 8005810:	f7fe f8ed 	bl	80039ee <bytes_concat>

	bytes_destroy(variable_header);
 8005814:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005816:	f7fe f837 	bl	8003888 <bytes_destroy>
	bytes_destroy(payload);
 800581a:	6978      	ldr	r0, [r7, #20]
 800581c:	f7fe f834 	bl	8003888 <bytes_destroy>

	return result;
 8005820:	68fb      	ldr	r3, [r7, #12]
}
 8005822:	4618      	mov	r0, r3
 8005824:	3728      	adds	r7, #40	; 0x28
 8005826:	46bd      	mov	sp, r7
 8005828:	bdb0      	pop	{r4, r5, r7, pc}
 800582a:	bf00      	nop
 800582c:	200000e0 	.word	0x200000e0
 8005830:	200000e1 	.word	0x200000e1

08005834 <publish_service_init>:
#include "../../Inc/mqtt_client/publish_service.h"


publish_service* publish_service_init(control_packet_proxy* control_packet_proxy){
 8005834:	b580      	push	{r7, lr}
 8005836:	b084      	sub	sp, #16
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
	if( control_packet_proxy == NULL ) return NULL;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d101      	bne.n	8005846 <publish_service_init+0x12>
 8005842:	2300      	movs	r3, #0
 8005844:	e008      	b.n	8005858 <publish_service_init+0x24>
	publish_service* result = (publish_service*) malloc(sizeof(publish_service));
 8005846:	2004      	movs	r0, #4
 8005848:	f005 fbaa 	bl	800afa0 <malloc>
 800584c:	4603      	mov	r3, r0
 800584e:	60fb      	str	r3, [r7, #12]
	result->control_packet_proxy = control_packet_proxy;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	687a      	ldr	r2, [r7, #4]
 8005854:	601a      	str	r2, [r3, #0]
	return result;
 8005856:	68fb      	ldr	r3, [r7, #12]
}
 8005858:	4618      	mov	r0, r3
 800585a:	3710      	adds	r7, #16
 800585c:	46bd      	mov	sp, r7
 800585e:	bd80      	pop	{r7, pc}

08005860 <publish_service_destroy>:

void publish_service_destroy(publish_service* publish_service){
 8005860:	b580      	push	{r7, lr}
 8005862:	b082      	sub	sp, #8
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
	if( publish_service == NULL ) return;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d00e      	beq.n	800588c <publish_service_destroy+0x2c>
	publish_service->control_packet_proxy = NULL;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2200      	movs	r2, #0
 8005872:	701a      	strb	r2, [r3, #0]
 8005874:	2200      	movs	r2, #0
 8005876:	705a      	strb	r2, [r3, #1]
 8005878:	2200      	movs	r2, #0
 800587a:	709a      	strb	r2, [r3, #2]
 800587c:	2200      	movs	r2, #0
 800587e:	70da      	strb	r2, [r3, #3]
	free(publish_service);
 8005880:	6878      	ldr	r0, [r7, #4]
 8005882:	f005 fb95 	bl	800afb0 <free>
	publish_service = NULL;
 8005886:	2300      	movs	r3, #0
 8005888:	607b      	str	r3, [r7, #4]
 800588a:	e000      	b.n	800588e <publish_service_destroy+0x2e>
	if( publish_service == NULL ) return;
 800588c:	bf00      	nop
}
 800588e:	3708      	adds	r7, #8
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}

08005894 <publish_service_create>:

publish* publish_service_create(publish_service* publish_service){
 8005894:	b580      	push	{r7, lr}
 8005896:	b086      	sub	sp, #24
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
	 bool           dup         = false;
 800589c:	2300      	movs	r3, #0
 800589e:	74fb      	strb	r3, [r7, #19]
	 session*       session     = session_get_instance();
 80058a0:	f000 f87a 	bl	8005998 <session_get_instance>
 80058a4:	60f8      	str	r0, [r7, #12]
	 unsigned char	qos         = session_get_qos(session);
 80058a6:	68f8      	ldr	r0, [r7, #12]
 80058a8:	f000 f9ec 	bl	8005c84 <session_get_qos>
 80058ac:	4603      	mov	r3, r0
 80058ae:	72fb      	strb	r3, [r7, #11]
	 bool           retain      = session_is_retain(session);
 80058b0:	68f8      	ldr	r0, [r7, #12]
 80058b2:	f000 fa0e 	bl	8005cd2 <session_is_retain>
 80058b6:	4603      	mov	r3, r0
 80058b8:	72bb      	strb	r3, [r7, #10]

	 publish* publish = NULL;
 80058ba:	2300      	movs	r3, #0
 80058bc:	617b      	str	r3, [r7, #20]
	 if( qos == PUBLISH_QOS_LEVEL_0 ){
 80058be:	4b24      	ldr	r3, [pc, #144]	; (8005950 <publish_service_create+0xbc>)
 80058c0:	781b      	ldrb	r3, [r3, #0]
 80058c2:	7afa      	ldrb	r2, [r7, #11]
 80058c4:	429a      	cmp	r2, r3
 80058c6:	d108      	bne.n	80058da <publish_service_create+0x46>
		 publish = publish_init(dup, PUBLISH_QOS_LEVEL_0, retain);
 80058c8:	4b21      	ldr	r3, [pc, #132]	; (8005950 <publish_service_create+0xbc>)
 80058ca:	7819      	ldrb	r1, [r3, #0]
 80058cc:	7aba      	ldrb	r2, [r7, #10]
 80058ce:	7cfb      	ldrb	r3, [r7, #19]
 80058d0:	4618      	mov	r0, r3
 80058d2:	f7ff fdfb 	bl	80054cc <publish_init>
 80058d6:	6178      	str	r0, [r7, #20]
 80058d8:	e035      	b.n	8005946 <publish_service_create+0xb2>
	 } else if ( qos == PUBLISH_QOS_LEVEL_1 ){
 80058da:	4b1e      	ldr	r3, [pc, #120]	; (8005954 <publish_service_create+0xc0>)
 80058dc:	781b      	ldrb	r3, [r3, #0]
 80058de:	7afa      	ldrb	r2, [r7, #11]
 80058e0:	429a      	cmp	r2, r3
 80058e2:	d111      	bne.n	8005908 <publish_service_create+0x74>
		 publish = publish_init(dup, PUBLISH_QOS_LEVEL_1, retain);
 80058e4:	4b1b      	ldr	r3, [pc, #108]	; (8005954 <publish_service_create+0xc0>)
 80058e6:	7819      	ldrb	r1, [r3, #0]
 80058e8:	7aba      	ldrb	r2, [r7, #10]
 80058ea:	7cfb      	ldrb	r3, [r7, #19]
 80058ec:	4618      	mov	r0, r3
 80058ee:	f7ff fded 	bl	80054cc <publish_init>
 80058f2:	6178      	str	r0, [r7, #20]
		 publish_set_packet_identifier(publish, session_generate_packet_identifier(session));
 80058f4:	68f8      	ldr	r0, [r7, #12]
 80058f6:	f000 fb1b 	bl	8005f30 <session_generate_packet_identifier>
 80058fa:	4603      	mov	r3, r0
 80058fc:	b29b      	uxth	r3, r3
 80058fe:	4619      	mov	r1, r3
 8005900:	6978      	ldr	r0, [r7, #20]
 8005902:	f7ff fec9 	bl	8005698 <publish_set_packet_identifier>
 8005906:	e01e      	b.n	8005946 <publish_service_create+0xb2>
	 } else if ( qos == PUBLISH_QOS_LEVEL_2 ){
 8005908:	4b13      	ldr	r3, [pc, #76]	; (8005958 <publish_service_create+0xc4>)
 800590a:	781b      	ldrb	r3, [r3, #0]
 800590c:	7afa      	ldrb	r2, [r7, #11]
 800590e:	429a      	cmp	r2, r3
 8005910:	d111      	bne.n	8005936 <publish_service_create+0xa2>
 		 publish = publish_init(dup, PUBLISH_QOS_LEVEL_2, retain);
 8005912:	4b11      	ldr	r3, [pc, #68]	; (8005958 <publish_service_create+0xc4>)
 8005914:	7819      	ldrb	r1, [r3, #0]
 8005916:	7aba      	ldrb	r2, [r7, #10]
 8005918:	7cfb      	ldrb	r3, [r7, #19]
 800591a:	4618      	mov	r0, r3
 800591c:	f7ff fdd6 	bl	80054cc <publish_init>
 8005920:	6178      	str	r0, [r7, #20]
 		 publish_set_packet_identifier(publish, session_generate_packet_identifier(session));
 8005922:	68f8      	ldr	r0, [r7, #12]
 8005924:	f000 fb04 	bl	8005f30 <session_generate_packet_identifier>
 8005928:	4603      	mov	r3, r0
 800592a:	b29b      	uxth	r3, r3
 800592c:	4619      	mov	r1, r3
 800592e:	6978      	ldr	r0, [r7, #20]
 8005930:	f7ff feb2 	bl	8005698 <publish_set_packet_identifier>
 8005934:	e007      	b.n	8005946 <publish_service_create+0xb2>
	 } else {
		 publish = publish_init(dup, PUBLISH_QOS_LEVEL_0, retain);
 8005936:	4b06      	ldr	r3, [pc, #24]	; (8005950 <publish_service_create+0xbc>)
 8005938:	7819      	ldrb	r1, [r3, #0]
 800593a:	7aba      	ldrb	r2, [r7, #10]
 800593c:	7cfb      	ldrb	r3, [r7, #19]
 800593e:	4618      	mov	r0, r3
 8005940:	f7ff fdc4 	bl	80054cc <publish_init>
 8005944:	6178      	str	r0, [r7, #20]
	 }

	 return publish;
 8005946:	697b      	ldr	r3, [r7, #20]
}
 8005948:	4618      	mov	r0, r3
 800594a:	3718      	adds	r7, #24
 800594c:	46bd      	mov	sp, r7
 800594e:	bd80      	pop	{r7, pc}
 8005950:	20000af8 	.word	0x20000af8
 8005954:	200000e0 	.word	0x200000e0
 8005958:	200000e1 	.word	0x200000e1

0800595c <publish_service_write>:
	publish* publish = bytes_is_empty(bytes) ? NULL : assembler_build_to_publish(bytes);
	bytes_destroy(bytes);
	return publish;
}

void publish_service_write(publish_service* publish_service, publish* publish){
 800595c:	b580      	push	{r7, lr}
 800595e:	b084      	sub	sp, #16
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
 8005964:	6039      	str	r1, [r7, #0]
	if ( publish_service == NULL ||  publish == NULL ) return;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d010      	beq.n	800598e <publish_service_write+0x32>
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d00d      	beq.n	800598e <publish_service_write+0x32>
	bytes* bytes = publish_to_bytes(publish);
 8005972:	6838      	ldr	r0, [r7, #0]
 8005974:	f7ff feb8 	bl	80056e8 <publish_to_bytes>
 8005978:	60f8      	str	r0, [r7, #12]
	control_packet_proxy_write(publish_service->control_packet_proxy, bytes);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	68f9      	ldr	r1, [r7, #12]
 8005980:	4618      	mov	r0, r3
 8005982:	f7fe fdd8 	bl	8004536 <control_packet_proxy_write>
	bytes_destroy(bytes);
 8005986:	68f8      	ldr	r0, [r7, #12]
 8005988:	f7fd ff7e 	bl	8003888 <bytes_destroy>
 800598c:	e000      	b.n	8005990 <publish_service_write+0x34>
	if ( publish_service == NULL ||  publish == NULL ) return;
 800598e:	bf00      	nop
}
 8005990:	3710      	adds	r7, #16
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}
	...

08005998 <session_get_instance>:

unsigned char SESSION_QOS_LEVEL_1 = 0x01;

unsigned char SESSION_QOS_LEVEL_2 = 0x02;

session* session_get_instance(){
 8005998:	b580      	push	{r7, lr}
 800599a:	af00      	add	r7, sp, #0
	if( session_instance == NULL ){
 800599c:	4b59      	ldr	r3, [pc, #356]	; (8005b04 <session_get_instance+0x16c>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	f040 80ab 	bne.w	8005afc <session_get_instance+0x164>
		session_instance = (session*) malloc(sizeof(session));
 80059a6:	2034      	movs	r0, #52	; 0x34
 80059a8:	f005 fafa 	bl	800afa0 <malloc>
 80059ac:	4603      	mov	r3, r0
 80059ae:	461a      	mov	r2, r3
 80059b0:	4b54      	ldr	r3, [pc, #336]	; (8005b04 <session_get_instance+0x16c>)
 80059b2:	601a      	str	r2, [r3, #0]
		session_instance->id = NULL;
 80059b4:	4b53      	ldr	r3, [pc, #332]	; (8005b04 <session_get_instance+0x16c>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	2200      	movs	r2, #0
 80059ba:	701a      	strb	r2, [r3, #0]
 80059bc:	2200      	movs	r2, #0
 80059be:	705a      	strb	r2, [r3, #1]
 80059c0:	2200      	movs	r2, #0
 80059c2:	709a      	strb	r2, [r3, #2]
 80059c4:	2200      	movs	r2, #0
 80059c6:	70da      	strb	r2, [r3, #3]
		session_instance->clean = false;
 80059c8:	4b4e      	ldr	r3, [pc, #312]	; (8005b04 <session_get_instance+0x16c>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	2200      	movs	r2, #0
 80059ce:	711a      	strb	r2, [r3, #4]
		session_instance->host = NULL;
 80059d0:	4b4c      	ldr	r3, [pc, #304]	; (8005b04 <session_get_instance+0x16c>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	2200      	movs	r2, #0
 80059d6:	715a      	strb	r2, [r3, #5]
 80059d8:	2200      	movs	r2, #0
 80059da:	719a      	strb	r2, [r3, #6]
 80059dc:	2200      	movs	r2, #0
 80059de:	71da      	strb	r2, [r3, #7]
 80059e0:	2200      	movs	r2, #0
 80059e2:	721a      	strb	r2, [r3, #8]
		session_instance->port = 1883;
 80059e4:	4b47      	ldr	r3, [pc, #284]	; (8005b04 <session_get_instance+0x16c>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	2200      	movs	r2, #0
 80059ea:	f042 025b 	orr.w	r2, r2, #91	; 0x5b
 80059ee:	725a      	strb	r2, [r3, #9]
 80059f0:	2200      	movs	r2, #0
 80059f2:	f042 0207 	orr.w	r2, r2, #7
 80059f6:	729a      	strb	r2, [r3, #10]
 80059f8:	2200      	movs	r2, #0
 80059fa:	72da      	strb	r2, [r3, #11]
 80059fc:	2200      	movs	r2, #0
 80059fe:	731a      	strb	r2, [r3, #12]
		session_instance->keep_alive = 60;
 8005a00:	4b40      	ldr	r3, [pc, #256]	; (8005b04 <session_get_instance+0x16c>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	2200      	movs	r2, #0
 8005a06:	f042 023c 	orr.w	r2, r2, #60	; 0x3c
 8005a0a:	735a      	strb	r2, [r3, #13]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	739a      	strb	r2, [r3, #14]
 8005a10:	2200      	movs	r2, #0
 8005a12:	73da      	strb	r2, [r3, #15]
 8005a14:	2200      	movs	r2, #0
 8005a16:	741a      	strb	r2, [r3, #16]
		session_instance->qos = SESSION_QOS_LEVEL_0;
 8005a18:	4b3a      	ldr	r3, [pc, #232]	; (8005b04 <session_get_instance+0x16c>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4a3a      	ldr	r2, [pc, #232]	; (8005b08 <session_get_instance+0x170>)
 8005a1e:	7812      	ldrb	r2, [r2, #0]
 8005a20:	745a      	strb	r2, [r3, #17]
		session_instance->retain = false;
 8005a22:	4b38      	ldr	r3, [pc, #224]	; (8005b04 <session_get_instance+0x16c>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	2200      	movs	r2, #0
 8005a28:	749a      	strb	r2, [r3, #18]
		session_instance->time_last_package = clock() / 1000;
 8005a2a:	f005 fa4f 	bl	800aecc <clock>
 8005a2e:	4601      	mov	r1, r0
 8005a30:	4b34      	ldr	r3, [pc, #208]	; (8005b04 <session_get_instance+0x16c>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a35      	ldr	r2, [pc, #212]	; (8005b0c <session_get_instance+0x174>)
 8005a36:	fba2 1201 	umull	r1, r2, r2, r1
 8005a3a:	0992      	lsrs	r2, r2, #6
 8005a3c:	f8c3 2013 	str.w	r2, [r3, #19]
		session_instance->connected = false;
 8005a40:	4b30      	ldr	r3, [pc, #192]	; (8005b04 <session_get_instance+0x16c>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	2200      	movs	r2, #0
 8005a46:	75da      	strb	r2, [r3, #23]
		session_instance->username = NULL;
 8005a48:	4b2e      	ldr	r3, [pc, #184]	; (8005b04 <session_get_instance+0x16c>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	761a      	strb	r2, [r3, #24]
 8005a50:	2200      	movs	r2, #0
 8005a52:	765a      	strb	r2, [r3, #25]
 8005a54:	2200      	movs	r2, #0
 8005a56:	769a      	strb	r2, [r3, #26]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	76da      	strb	r2, [r3, #27]
		session_instance->password = NULL;
 8005a5c:	4b29      	ldr	r3, [pc, #164]	; (8005b04 <session_get_instance+0x16c>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	2200      	movs	r2, #0
 8005a62:	771a      	strb	r2, [r3, #28]
 8005a64:	2200      	movs	r2, #0
 8005a66:	775a      	strb	r2, [r3, #29]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	779a      	strb	r2, [r3, #30]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	77da      	strb	r2, [r3, #31]

		session_instance->unacknowledged_publish = NULL;
 8005a70:	4b24      	ldr	r3, [pc, #144]	; (8005b04 <session_get_instance+0x16c>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	2200      	movs	r2, #0
 8005a76:	f883 2020 	strb.w	r2, [r3, #32]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8005a80:	2200      	movs	r2, #0
 8005a82:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8005a86:	2200      	movs	r2, #0
 8005a88:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		session_instance->unacknowledged_pub_rel = NULL;
 8005a8c:	4b1d      	ldr	r3, [pc, #116]	; (8005b04 <session_get_instance+0x16c>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	2200      	movs	r2, #0
 8005a92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005a96:	2200      	movs	r2, #0
 8005a98:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		session_instance->unacknowledged_pub_rec = NULL;
 8005aa8:	4b16      	ldr	r3, [pc, #88]	; (8005b04 <session_get_instance+0x16c>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	2200      	movs	r2, #0
 8005aae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 8005ab8:	2200      	movs	r2, #0
 8005aba:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 8005abe:	2200      	movs	r2, #0
 8005ac0:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

		session_instance->packet_identifier = 0;
 8005ac4:	4b0f      	ldr	r3, [pc, #60]	; (8005b04 <session_get_instance+0x16c>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8005ace:	2200      	movs	r2, #0
 8005ad0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 8005ada:	2200      	movs	r2, #0
 8005adc:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		session_instance->last_packet_identifier = 0;
 8005ae0:	4b08      	ldr	r3, [pc, #32]	; (8005b04 <session_get_instance+0x16c>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8005aea:	2200      	movs	r2, #0
 8005aec:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8005af0:	2200      	movs	r2, #0
 8005af2:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 8005af6:	2200      	movs	r2, #0
 8005af8:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	}

	return session_instance;
 8005afc:	4b01      	ldr	r3, [pc, #4]	; (8005b04 <session_get_instance+0x16c>)
 8005afe:	681b      	ldr	r3, [r3, #0]
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	bd80      	pop	{r7, pc}
 8005b04:	20000afc 	.word	0x20000afc
 8005b08:	20000b00 	.word	0x20000b00
 8005b0c:	10624dd3 	.word	0x10624dd3

08005b10 <session_get_id>:
	session_reset(session);
	free(session);
	session = NULL;
}

char* session_get_id(session* session){
 8005b10:	b480      	push	{r7}
 8005b12:	b083      	sub	sp, #12
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
	return session == NULL ? NULL : session->id;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d002      	beq.n	8005b24 <session_get_id+0x14>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	e000      	b.n	8005b26 <session_get_id+0x16>
 8005b24:	2300      	movs	r3, #0
}
 8005b26:	4618      	mov	r0, r3
 8005b28:	370c      	adds	r7, #12
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b30:	4770      	bx	lr

08005b32 <session_set_id>:

void session_set_id(session* session, char* id){
 8005b32:	b480      	push	{r7}
 8005b34:	b083      	sub	sp, #12
 8005b36:	af00      	add	r7, sp, #0
 8005b38:	6078      	str	r0, [r7, #4]
 8005b3a:	6039      	str	r1, [r7, #0]
	if( session == NULL ) return;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d003      	beq.n	8005b4a <session_set_id+0x18>
	session->id = id;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	683a      	ldr	r2, [r7, #0]
 8005b46:	601a      	str	r2, [r3, #0]
 8005b48:	e000      	b.n	8005b4c <session_set_id+0x1a>
	if( session == NULL ) return;
 8005b4a:	bf00      	nop
}
 8005b4c:	370c      	adds	r7, #12
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b54:	4770      	bx	lr

08005b56 <session_is_clean>:

bool session_is_clean(session* session){
 8005b56:	b480      	push	{r7}
 8005b58:	b083      	sub	sp, #12
 8005b5a:	af00      	add	r7, sp, #0
 8005b5c:	6078      	str	r0, [r7, #4]
	return session == NULL ? false : session->clean;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d005      	beq.n	8005b70 <session_is_clean+0x1a>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	791b      	ldrb	r3, [r3, #4]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d001      	beq.n	8005b70 <session_is_clean+0x1a>
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	e000      	b.n	8005b72 <session_is_clean+0x1c>
 8005b70:	2300      	movs	r3, #0
}
 8005b72:	4618      	mov	r0, r3
 8005b74:	370c      	adds	r7, #12
 8005b76:	46bd      	mov	sp, r7
 8005b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7c:	4770      	bx	lr

08005b7e <session_set_clean>:

void session_set_clean(session* session, bool clean){
 8005b7e:	b480      	push	{r7}
 8005b80:	b083      	sub	sp, #12
 8005b82:	af00      	add	r7, sp, #0
 8005b84:	6078      	str	r0, [r7, #4]
 8005b86:	460b      	mov	r3, r1
 8005b88:	70fb      	strb	r3, [r7, #3]
	if( session == NULL ) return;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d003      	beq.n	8005b98 <session_set_clean+0x1a>
	session->clean = clean;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	78fa      	ldrb	r2, [r7, #3]
 8005b94:	711a      	strb	r2, [r3, #4]
 8005b96:	e000      	b.n	8005b9a <session_set_clean+0x1c>
	if( session == NULL ) return;
 8005b98:	bf00      	nop
}
 8005b9a:	370c      	adds	r7, #12
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba2:	4770      	bx	lr

08005ba4 <session_get_host>:

char* session_get_host(session* session){
 8005ba4:	b480      	push	{r7}
 8005ba6:	b083      	sub	sp, #12
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
	return session == NULL ? NULL : session->host;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d003      	beq.n	8005bba <session_get_host+0x16>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	f8d3 3005 	ldr.w	r3, [r3, #5]
 8005bb8:	e000      	b.n	8005bbc <session_get_host+0x18>
 8005bba:	2300      	movs	r3, #0
}
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	370c      	adds	r7, #12
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc6:	4770      	bx	lr

08005bc8 <session_set_host>:

void session_set_host(session* session, char* host){
 8005bc8:	b480      	push	{r7}
 8005bca:	b083      	sub	sp, #12
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
 8005bd0:	6039      	str	r1, [r7, #0]
	if( session == NULL ) return;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d004      	beq.n	8005be2 <session_set_host+0x1a>
	session->host = host;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	683a      	ldr	r2, [r7, #0]
 8005bdc:	f8c3 2005 	str.w	r2, [r3, #5]
 8005be0:	e000      	b.n	8005be4 <session_set_host+0x1c>
	if( session == NULL ) return;
 8005be2:	bf00      	nop
}
 8005be4:	370c      	adds	r7, #12
 8005be6:	46bd      	mov	sp, r7
 8005be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bec:	4770      	bx	lr

08005bee <session_get_port>:

unsigned int session_get_port(session* session){
 8005bee:	b480      	push	{r7}
 8005bf0:	b083      	sub	sp, #12
 8005bf2:	af00      	add	r7, sp, #0
 8005bf4:	6078      	str	r0, [r7, #4]
	return session == NULL ? 1883 : session->port;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d003      	beq.n	8005c04 <session_get_port+0x16>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	f8d3 3009 	ldr.w	r3, [r3, #9]
 8005c02:	e001      	b.n	8005c08 <session_get_port+0x1a>
 8005c04:	f240 735b 	movw	r3, #1883	; 0x75b
}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	370c      	adds	r7, #12
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c12:	4770      	bx	lr

08005c14 <session_set_port>:

void session_set_port(session* session, unsigned int port){
 8005c14:	b480      	push	{r7}
 8005c16:	b083      	sub	sp, #12
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
 8005c1c:	6039      	str	r1, [r7, #0]
	if( session == NULL ) return;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d004      	beq.n	8005c2e <session_set_port+0x1a>
	session->port = port;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	683a      	ldr	r2, [r7, #0]
 8005c28:	f8c3 2009 	str.w	r2, [r3, #9]
 8005c2c:	e000      	b.n	8005c30 <session_set_port+0x1c>
	if( session == NULL ) return;
 8005c2e:	bf00      	nop
}
 8005c30:	370c      	adds	r7, #12
 8005c32:	46bd      	mov	sp, r7
 8005c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c38:	4770      	bx	lr

08005c3a <session_get_keep_alive>:

unsigned int session_get_keep_alive(session* session){
 8005c3a:	b480      	push	{r7}
 8005c3c:	b083      	sub	sp, #12
 8005c3e:	af00      	add	r7, sp, #0
 8005c40:	6078      	str	r0, [r7, #4]
	return session == NULL ? 60 : session->keep_alive;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d003      	beq.n	8005c50 <session_get_keep_alive+0x16>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	f8d3 300d 	ldr.w	r3, [r3, #13]
 8005c4e:	e000      	b.n	8005c52 <session_get_keep_alive+0x18>
 8005c50:	233c      	movs	r3, #60	; 0x3c
}
 8005c52:	4618      	mov	r0, r3
 8005c54:	370c      	adds	r7, #12
 8005c56:	46bd      	mov	sp, r7
 8005c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5c:	4770      	bx	lr

08005c5e <session_set_keep_alive>:

void session_set_keep_alive(session* session, unsigned int keep_alive){
 8005c5e:	b480      	push	{r7}
 8005c60:	b083      	sub	sp, #12
 8005c62:	af00      	add	r7, sp, #0
 8005c64:	6078      	str	r0, [r7, #4]
 8005c66:	6039      	str	r1, [r7, #0]
	if( session == NULL ) return;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d004      	beq.n	8005c78 <session_set_keep_alive+0x1a>
	session->keep_alive = keep_alive;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	683a      	ldr	r2, [r7, #0]
 8005c72:	f8c3 200d 	str.w	r2, [r3, #13]
 8005c76:	e000      	b.n	8005c7a <session_set_keep_alive+0x1c>
	if( session == NULL ) return;
 8005c78:	bf00      	nop
}
 8005c7a:	370c      	adds	r7, #12
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c82:	4770      	bx	lr

08005c84 <session_get_qos>:

unsigned char session_get_qos(session* session){
 8005c84:	b480      	push	{r7}
 8005c86:	b083      	sub	sp, #12
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
	return session == NULL ? SESSION_QOS_LEVEL_0 : session->qos;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d002      	beq.n	8005c98 <session_get_qos+0x14>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	7c5b      	ldrb	r3, [r3, #17]
 8005c96:	e001      	b.n	8005c9c <session_get_qos+0x18>
 8005c98:	4b03      	ldr	r3, [pc, #12]	; (8005ca8 <session_get_qos+0x24>)
 8005c9a:	781b      	ldrb	r3, [r3, #0]
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	370c      	adds	r7, #12
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca6:	4770      	bx	lr
 8005ca8:	20000b00 	.word	0x20000b00

08005cac <session_set_qos>:

void session_set_qos(session* session, unsigned char qos){
 8005cac:	b480      	push	{r7}
 8005cae:	b083      	sub	sp, #12
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
 8005cb4:	460b      	mov	r3, r1
 8005cb6:	70fb      	strb	r3, [r7, #3]
	if( session == NULL ) return;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d003      	beq.n	8005cc6 <session_set_qos+0x1a>
	session->qos = qos;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	78fa      	ldrb	r2, [r7, #3]
 8005cc2:	745a      	strb	r2, [r3, #17]
 8005cc4:	e000      	b.n	8005cc8 <session_set_qos+0x1c>
	if( session == NULL ) return;
 8005cc6:	bf00      	nop
}
 8005cc8:	370c      	adds	r7, #12
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd0:	4770      	bx	lr

08005cd2 <session_is_retain>:

bool session_is_retain(session* session){
 8005cd2:	b480      	push	{r7}
 8005cd4:	b083      	sub	sp, #12
 8005cd6:	af00      	add	r7, sp, #0
 8005cd8:	6078      	str	r0, [r7, #4]
	return session == NULL ? false : session->retain;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d005      	beq.n	8005cec <session_is_retain+0x1a>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	7c9b      	ldrb	r3, [r3, #18]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d001      	beq.n	8005cec <session_is_retain+0x1a>
 8005ce8:	2301      	movs	r3, #1
 8005cea:	e000      	b.n	8005cee <session_is_retain+0x1c>
 8005cec:	2300      	movs	r3, #0
}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	370c      	adds	r7, #12
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf8:	4770      	bx	lr

08005cfa <session_set_retain>:

void session_set_retain(session* session, bool retain){
 8005cfa:	b480      	push	{r7}
 8005cfc:	b083      	sub	sp, #12
 8005cfe:	af00      	add	r7, sp, #0
 8005d00:	6078      	str	r0, [r7, #4]
 8005d02:	460b      	mov	r3, r1
 8005d04:	70fb      	strb	r3, [r7, #3]
	if ( session == NULL ) return;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d003      	beq.n	8005d14 <session_set_retain+0x1a>
	session->retain = retain;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	78fa      	ldrb	r2, [r7, #3]
 8005d10:	749a      	strb	r2, [r3, #18]
 8005d12:	e000      	b.n	8005d16 <session_set_retain+0x1c>
	if ( session == NULL ) return;
 8005d14:	bf00      	nop
}
 8005d16:	370c      	adds	r7, #12
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1e:	4770      	bx	lr

08005d20 <session_is_connected>:
void session_set_time_last_package(session* session, unsigned long time_last_package){
	if ( session == NULL ) return;
	session->time_last_package = time_last_package;
}

bool session_is_connected(session* session){
 8005d20:	b480      	push	{r7}
 8005d22:	b083      	sub	sp, #12
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
	return session == NULL ? false : session->connected;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d005      	beq.n	8005d3a <session_is_connected+0x1a>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	7ddb      	ldrb	r3, [r3, #23]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d001      	beq.n	8005d3a <session_is_connected+0x1a>
 8005d36:	2301      	movs	r3, #1
 8005d38:	e000      	b.n	8005d3c <session_is_connected+0x1c>
 8005d3a:	2300      	movs	r3, #0
}
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	370c      	adds	r7, #12
 8005d40:	46bd      	mov	sp, r7
 8005d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d46:	4770      	bx	lr

08005d48 <session_set_connected>:

void session_set_connected(session* session, bool connected){
 8005d48:	b480      	push	{r7}
 8005d4a:	b083      	sub	sp, #12
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
 8005d50:	460b      	mov	r3, r1
 8005d52:	70fb      	strb	r3, [r7, #3]
	if ( session == NULL ) return;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d003      	beq.n	8005d62 <session_set_connected+0x1a>
	session->connected = connected;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	78fa      	ldrb	r2, [r7, #3]
 8005d5e:	75da      	strb	r2, [r3, #23]
 8005d60:	e000      	b.n	8005d64 <session_set_connected+0x1c>
	if ( session == NULL ) return;
 8005d62:	bf00      	nop
}
 8005d64:	370c      	adds	r7, #12
 8005d66:	46bd      	mov	sp, r7
 8005d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6c:	4770      	bx	lr

08005d6e <session_get_username>:

char* session_get_username(session* session){
 8005d6e:	b480      	push	{r7}
 8005d70:	b083      	sub	sp, #12
 8005d72:	af00      	add	r7, sp, #0
 8005d74:	6078      	str	r0, [r7, #4]
	return session == NULL ? NULL : session->username;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d002      	beq.n	8005d82 <session_get_username+0x14>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	699b      	ldr	r3, [r3, #24]
 8005d80:	e000      	b.n	8005d84 <session_get_username+0x16>
 8005d82:	2300      	movs	r3, #0
}
 8005d84:	4618      	mov	r0, r3
 8005d86:	370c      	adds	r7, #12
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8e:	4770      	bx	lr

08005d90 <session_get_password>:
void session_set_username(session* session, char* username){
	if ( session == NULL ) return;
	session->username = username;
}

char* session_get_password(session* session){
 8005d90:	b480      	push	{r7}
 8005d92:	b083      	sub	sp, #12
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
	return session == NULL ? NULL : session->password;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d002      	beq.n	8005da4 <session_get_password+0x14>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	69db      	ldr	r3, [r3, #28]
 8005da2:	e000      	b.n	8005da6 <session_get_password+0x16>
 8005da4:	2300      	movs	r3, #0
}
 8005da6:	4618      	mov	r0, r3
 8005da8:	370c      	adds	r7, #12
 8005daa:	46bd      	mov	sp, r7
 8005dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db0:	4770      	bx	lr
	...

08005db4 <session_signal_time_last_package>:
void session_set_password(session* session, char* password){
	if( session == NULL ) return;
	session->password = password;
}

void session_signal_time_last_package(session* session){
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b082      	sub	sp, #8
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
	if ( session == NULL ) return;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d00a      	beq.n	8005dd8 <session_signal_time_last_package+0x24>
	session->time_last_package = clock() / 1000;
 8005dc2:	f005 f883 	bl	800aecc <clock>
 8005dc6:	4602      	mov	r2, r0
 8005dc8:	4b05      	ldr	r3, [pc, #20]	; (8005de0 <session_signal_time_last_package+0x2c>)
 8005dca:	fba3 2302 	umull	r2, r3, r3, r2
 8005dce:	099a      	lsrs	r2, r3, #6
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	f8c3 2013 	str.w	r2, [r3, #19]
 8005dd6:	e000      	b.n	8005dda <session_signal_time_last_package+0x26>
	if ( session == NULL ) return;
 8005dd8:	bf00      	nop
}
 8005dda:	3708      	adds	r7, #8
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	bd80      	pop	{r7, pc}
 8005de0:	10624dd3 	.word	0x10624dd3

08005de4 <session_is_expired>:

bool session_is_expired(session* session){
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b084      	sub	sp, #16
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
	clock_t now = clock() / 1000;
 8005dec:	f005 f86e 	bl	800aecc <clock>
 8005df0:	4602      	mov	r2, r0
 8005df2:	4b0b      	ldr	r3, [pc, #44]	; (8005e20 <session_is_expired+0x3c>)
 8005df4:	fba3 2302 	umull	r2, r3, r3, r2
 8005df8:	099b      	lsrs	r3, r3, #6
 8005dfa:	60fb      	str	r3, [r7, #12]
	return (( now - session->time_last_package ) > session->keep_alive );
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	f8d3 3013 	ldr.w	r3, [r3, #19]
 8005e02:	68fa      	ldr	r2, [r7, #12]
 8005e04:	1ad2      	subs	r2, r2, r3
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	f8d3 300d 	ldr.w	r3, [r3, #13]
 8005e0c:	429a      	cmp	r2, r3
 8005e0e:	bf8c      	ite	hi
 8005e10:	2301      	movhi	r3, #1
 8005e12:	2300      	movls	r3, #0
 8005e14:	b2db      	uxtb	r3, r3
}
 8005e16:	4618      	mov	r0, r3
 8005e18:	3710      	adds	r7, #16
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	bd80      	pop	{r7, pc}
 8005e1e:	bf00      	nop
 8005e20:	10624dd3 	.word	0x10624dd3

08005e24 <session_set_unacknowledged_publish>:

void session_set_unacknowledged_publish(session* session, publish* unacknowledged_publish){
 8005e24:	b480      	push	{r7}
 8005e26:	b083      	sub	sp, #12
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
 8005e2c:	6039      	str	r1, [r7, #0]
	if( session == NULL || unacknowledged_publish == NULL ) return;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d006      	beq.n	8005e42 <session_set_unacknowledged_publish+0x1e>
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d003      	beq.n	8005e42 <session_set_unacknowledged_publish+0x1e>
	session->unacknowledged_publish = unacknowledged_publish;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	683a      	ldr	r2, [r7, #0]
 8005e3e:	621a      	str	r2, [r3, #32]
 8005e40:	e000      	b.n	8005e44 <session_set_unacknowledged_publish+0x20>
	if( session == NULL || unacknowledged_publish == NULL ) return;
 8005e42:	bf00      	nop
}
 8005e44:	370c      	adds	r7, #12
 8005e46:	46bd      	mov	sp, r7
 8005e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4c:	4770      	bx	lr

08005e4e <session_set_unacknowledged_pub_rec>:
void session_set_unacknowledged_pub_rel(session* session, pub_rel* unacknowledged_pub_rel){
	if( session == NULL || unacknowledged_pub_rel == NULL ) return;
	session->unacknowledged_pub_rel = unacknowledged_pub_rel;
}

void session_set_unacknowledged_pub_rec(session* session, pub_rec* unacknowledged_pub_rec){
 8005e4e:	b480      	push	{r7}
 8005e50:	b083      	sub	sp, #12
 8005e52:	af00      	add	r7, sp, #0
 8005e54:	6078      	str	r0, [r7, #4]
 8005e56:	6039      	str	r1, [r7, #0]
	if( session == NULL || unacknowledged_pub_rec == NULL ) return;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d006      	beq.n	8005e6c <session_set_unacknowledged_pub_rec+0x1e>
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d003      	beq.n	8005e6c <session_set_unacknowledged_pub_rec+0x1e>
	session->unacknowledged_pub_rec = unacknowledged_pub_rec;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	683a      	ldr	r2, [r7, #0]
 8005e68:	629a      	str	r2, [r3, #40]	; 0x28
 8005e6a:	e000      	b.n	8005e6e <session_set_unacknowledged_pub_rec+0x20>
	if( session == NULL || unacknowledged_pub_rec == NULL ) return;
 8005e6c:	bf00      	nop
}
 8005e6e:	370c      	adds	r7, #12
 8005e70:	46bd      	mov	sp, r7
 8005e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e76:	4770      	bx	lr

08005e78 <session_confirm>:

void session_confirm(session* session, unsigned int packet_identifier){
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b082      	sub	sp, #8
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
 8005e80:	6039      	str	r1, [r7, #0]
	if( session == NULL ) return;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d04f      	beq.n	8005f28 <session_confirm+0xb0>

    if( session->unacknowledged_publish != NULL && publish_get_packet_identifier(session->unacknowledged_publish) == packet_identifier )
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6a1b      	ldr	r3, [r3, #32]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d016      	beq.n	8005ebe <session_confirm+0x46>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6a1b      	ldr	r3, [r3, #32]
 8005e94:	4618      	mov	r0, r3
 8005e96:	f7ff fbec 	bl	8005672 <publish_get_packet_identifier>
 8005e9a:	4603      	mov	r3, r0
 8005e9c:	461a      	mov	r2, r3
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d10c      	bne.n	8005ebe <session_confirm+0x46>
    	session->unacknowledged_publish = NULL;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	f883 2020 	strb.w	r2, [r3, #32]
 8005eac:	2200      	movs	r2, #0
 8005eae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8005eb8:	2200      	movs	r2, #0
 8005eba:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

    if( session->unacknowledged_pub_rel != NULL && pub_rel_get_packet_identifier(session->unacknowledged_pub_rel) == packet_identifier )
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d015      	beq.n	8005ef2 <session_confirm+0x7a>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eca:	4618      	mov	r0, r3
 8005ecc:	f7ff fa4a 	bl	8005364 <pub_rel_get_packet_identifier>
 8005ed0:	4602      	mov	r2, r0
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d10c      	bne.n	8005ef2 <session_confirm+0x7a>
        session->unacknowledged_pub_rel = NULL;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2200      	movs	r2, #0
 8005edc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 8005eec:	2200      	movs	r2, #0
 8005eee:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

    if( session->unacknowledged_pub_rec != NULL && pub_rec_get_packet_identifier(session->unacknowledged_pub_rec) == packet_identifier )
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d017      	beq.n	8005f2a <session_confirm+0xb2>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005efe:	4618      	mov	r0, r3
 8005f00:	f7ff f99c 	bl	800523c <pub_rec_get_packet_identifier>
 8005f04:	4602      	mov	r2, r0
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d10e      	bne.n	8005f2a <session_confirm+0xb2>
    	session->unacknowledged_pub_rec = NULL;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8005f14:	2200      	movs	r2, #0
 8005f16:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 8005f20:	2200      	movs	r2, #0
 8005f22:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
 8005f26:	e000      	b.n	8005f2a <session_confirm+0xb2>
	if( session == NULL ) return;
 8005f28:	bf00      	nop
}
 8005f2a:	3708      	adds	r7, #8
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	bd80      	pop	{r7, pc}

08005f30 <session_generate_packet_identifier>:

unsigned int session_generate_packet_identifier(session* session){
 8005f30:	b480      	push	{r7}
 8005f32:	b085      	sub	sp, #20
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
	if( session == NULL ) return 0;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d101      	bne.n	8005f42 <session_generate_packet_identifier+0x12>
 8005f3e:	2300      	movs	r3, #0
 8005f40:	e012      	b.n	8005f68 <session_generate_packet_identifier+0x38>
	unsigned int result = session->packet_identifier;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f46:	60fb      	str	r3, [r7, #12]
	session->packet_identifier = (session->packet_identifier + 1) % 65534;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f4c:	1c59      	adds	r1, r3, #1
 8005f4e:	084b      	lsrs	r3, r1, #1
 8005f50:	4a08      	ldr	r2, [pc, #32]	; (8005f74 <session_generate_packet_identifier+0x44>)
 8005f52:	fba2 2303 	umull	r2, r3, r2, r3
 8005f56:	0b9a      	lsrs	r2, r3, #14
 8005f58:	4613      	mov	r3, r2
 8005f5a:	03db      	lsls	r3, r3, #15
 8005f5c:	1a9b      	subs	r3, r3, r2
 8005f5e:	005b      	lsls	r3, r3, #1
 8005f60:	1aca      	subs	r2, r1, r3
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	62da      	str	r2, [r3, #44]	; 0x2c
	//if(session->packet_identifier == 0) session->packet_identifier = 1;
	return result;
 8005f66:	68fb      	ldr	r3, [r7, #12]
}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	3714      	adds	r7, #20
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f72:	4770      	bx	lr
 8005f74:	80010003 	.word	0x80010003

08005f78 <session_get_last_packet_identifier>:

unsigned int session_get_last_packet_identifier(session* session){
 8005f78:	b480      	push	{r7}
 8005f7a:	b083      	sub	sp, #12
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
	if( session == NULL ) return 0;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d101      	bne.n	8005f8a <session_get_last_packet_identifier+0x12>
 8005f86:	2300      	movs	r3, #0
 8005f88:	e009      	b.n	8005f9e <session_get_last_packet_identifier+0x26>
	return session->packet_identifier == 0 ? session->packet_identifier - 1 : 65533;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d103      	bne.n	8005f9a <session_get_last_packet_identifier+0x22>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f96:	3b01      	subs	r3, #1
 8005f98:	e001      	b.n	8005f9e <session_get_last_packet_identifier+0x26>
 8005f9a:	f64f 73fd 	movw	r3, #65533	; 0xfffd
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	370c      	adds	r7, #12
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa8:	4770      	bx	lr

08005faa <wifi_init>:
#include "../../Inc/mqtt_client/wifi.h"

wifi* wifi_init(esp8266* esp8266, unsigned int timeout){
 8005faa:	b580      	push	{r7, lr}
 8005fac:	b084      	sub	sp, #16
 8005fae:	af00      	add	r7, sp, #0
 8005fb0:	6078      	str	r0, [r7, #4]
 8005fb2:	6039      	str	r1, [r7, #0]
	wifi* result = (wifi*) malloc(sizeof(wifi));
 8005fb4:	f241 0015 	movw	r0, #4117	; 0x1015
 8005fb8:	f004 fff2 	bl	800afa0 <malloc>
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	60fb      	str	r3, [r7, #12]

	result->connected     = esp8266->connected;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	7a1a      	ldrb	r2, [r3, #8]
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	701a      	strb	r2, [r3, #0]
	result->esp8266       = esp8266;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	687a      	ldr	r2, [r7, #4]
 8005fcc:	f8c3 2001 	str.w	r2, [r3, #1]
	result->timeout       = timeout;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	683a      	ldr	r2, [r7, #0]
 8005fd4:	f8c3 2005 	str.w	r2, [r3, #5]
	result->received      = NULL;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fde:	330d      	adds	r3, #13
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	701a      	strb	r2, [r3, #0]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	705a      	strb	r2, [r3, #1]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	709a      	strb	r2, [r3, #2]
 8005fec:	2200      	movs	r2, #0
 8005fee:	70da      	strb	r2, [r3, #3]
	result->mqtt_server   = NULL;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ff6:	3311      	adds	r3, #17
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	701a      	strb	r2, [r3, #0]
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	705a      	strb	r2, [r3, #1]
 8006000:	2200      	movs	r2, #0
 8006002:	709a      	strb	r2, [r3, #2]
 8006004:	2200      	movs	r2, #0
 8006006:	70da      	strb	r2, [r3, #3]

	return result;
 8006008:	68fb      	ldr	r3, [r7, #12]
}
 800600a:	4618      	mov	r0, r3
 800600c:	3710      	adds	r7, #16
 800600e:	46bd      	mov	sp, r7
 8006010:	bd80      	pop	{r7, pc}

08006012 <wifi_destroy>:

void wifi_destroy(wifi* wifi){
 8006012:	b580      	push	{r7, lr}
 8006014:	b082      	sub	sp, #8
 8006016:	af00      	add	r7, sp, #0
 8006018:	6078      	str	r0, [r7, #4]
	if( wifi == NULL ) return;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d02e      	beq.n	800607e <wifi_destroy+0x6c>
	wifi->esp8266 = NULL;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2200      	movs	r2, #0
 8006024:	705a      	strb	r2, [r3, #1]
 8006026:	2200      	movs	r2, #0
 8006028:	709a      	strb	r2, [r3, #2]
 800602a:	2200      	movs	r2, #0
 800602c:	70da      	strb	r2, [r3, #3]
 800602e:	2200      	movs	r2, #0
 8006030:	711a      	strb	r2, [r3, #4]
	bytes_destroy(wifi->received);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006038:	330d      	adds	r3, #13
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4618      	mov	r0, r3
 800603e:	f7fd fc23 	bl	8003888 <bytes_destroy>
	wifi->received = NULL;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006048:	330d      	adds	r3, #13
 800604a:	2200      	movs	r2, #0
 800604c:	701a      	strb	r2, [r3, #0]
 800604e:	2200      	movs	r2, #0
 8006050:	705a      	strb	r2, [r3, #1]
 8006052:	2200      	movs	r2, #0
 8006054:	709a      	strb	r2, [r3, #2]
 8006056:	2200      	movs	r2, #0
 8006058:	70da      	strb	r2, [r3, #3]
	wifi->mqtt_server = NULL;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006060:	3311      	adds	r3, #17
 8006062:	2200      	movs	r2, #0
 8006064:	701a      	strb	r2, [r3, #0]
 8006066:	2200      	movs	r2, #0
 8006068:	705a      	strb	r2, [r3, #1]
 800606a:	2200      	movs	r2, #0
 800606c:	709a      	strb	r2, [r3, #2]
 800606e:	2200      	movs	r2, #0
 8006070:	70da      	strb	r2, [r3, #3]
	free(wifi);
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	f004 ff9c 	bl	800afb0 <free>
	wifi = NULL;
 8006078:	2300      	movs	r3, #0
 800607a:	607b      	str	r3, [r7, #4]
 800607c:	e000      	b.n	8006080 <wifi_destroy+0x6e>
	if( wifi == NULL ) return;
 800607e:	bf00      	nop
}
 8006080:	3708      	adds	r7, #8
 8006082:	46bd      	mov	sp, r7
 8006084:	bd80      	pop	{r7, pc}

08006086 <wifi_connect>:

void wifi_connect(wifi* wifi, char* ip, unsigned int port){
 8006086:	b580      	push	{r7, lr}
 8006088:	b084      	sub	sp, #16
 800608a:	af00      	add	r7, sp, #0
 800608c:	60f8      	str	r0, [r7, #12]
 800608e:	60b9      	str	r1, [r7, #8]
 8006090:	607a      	str	r2, [r7, #4]
	if( wifi == NULL ) return;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d018      	beq.n	80060ca <wifi_connect+0x44>

	if ( wifi->mqtt_server != NULL ){
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800609e:	3311      	adds	r3, #17
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d003      	beq.n	80060ae <wifi_connect+0x28>
		wifi->connected = true;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	2201      	movs	r2, #1
 80060aa:	701a      	strb	r2, [r3, #0]
		return;\
 80060ac:	e00e      	b.n	80060cc <wifi_connect+0x46>
	}
	wifi->connected = esp8266_createTCP(wifi->esp8266, (uint8_t*) ip, (uint16_t) port);
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	f8d3 3001 	ldr.w	r3, [r3, #1]
 80060b4:	687a      	ldr	r2, [r7, #4]
 80060b6:	b292      	uxth	r2, r2
 80060b8:	68b9      	ldr	r1, [r7, #8]
 80060ba:	4618      	mov	r0, r3
 80060bc:	f7fc ff9a 	bl	8002ff4 <esp8266_createTCP>
 80060c0:	4603      	mov	r3, r0
 80060c2:	461a      	mov	r2, r3
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	701a      	strb	r2, [r3, #0]
 80060c8:	e000      	b.n	80060cc <wifi_connect+0x46>
	if( wifi == NULL ) return;
 80060ca:	bf00      	nop
}
 80060cc:	3710      	adds	r7, #16
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}

080060d2 <wifi_is_connected>:

    esp8266_releaseTCP(wifi->esp8266);
    wifi->connected = false;
}

bool wifi_is_connected(wifi* wifi){
 80060d2:	b480      	push	{r7}
 80060d4:	b083      	sub	sp, #12
 80060d6:	af00      	add	r7, sp, #0
 80060d8:	6078      	str	r0, [r7, #4]
	return wifi == NULL ? false : wifi->connected;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d005      	beq.n	80060ec <wifi_is_connected+0x1a>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	781b      	ldrb	r3, [r3, #0]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d001      	beq.n	80060ec <wifi_is_connected+0x1a>
 80060e8:	2301      	movs	r3, #1
 80060ea:	e000      	b.n	80060ee <wifi_is_connected+0x1c>
 80060ec:	2300      	movs	r3, #0
}
 80060ee:	4618      	mov	r0, r3
 80060f0:	370c      	adds	r7, #12
 80060f2:	46bd      	mov	sp, r7
 80060f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f8:	4770      	bx	lr

080060fa <wifi_read>:

bytes* wifi_read(wifi* wifi){
 80060fa:	b580      	push	{r7, lr}
 80060fc:	b082      	sub	sp, #8
 80060fe:	af00      	add	r7, sp, #0
 8006100:	6078      	str	r0, [r7, #4]
	if( wifi == NULL ) return NULL;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d101      	bne.n	800610c <wifi_read+0x12>
 8006108:	2300      	movs	r3, #0
 800610a:	e002      	b.n	8006112 <wifi_read+0x18>
	return bytes_init();
 800610c:	f7fd fb94 	bl	8003838 <bytes_init>
 8006110:	4603      	mov	r3, r0
}
 8006112:	4618      	mov	r0, r3
 8006114:	3708      	adds	r7, #8
 8006116:	46bd      	mov	sp, r7
 8006118:	bd80      	pop	{r7, pc}

0800611a <wifi_write>:

void wifi_write(wifi* wifi, bytes* bytes){
 800611a:	b580      	push	{r7, lr}
 800611c:	b084      	sub	sp, #16
 800611e:	af00      	add	r7, sp, #0
 8006120:	6078      	str	r0, [r7, #4]
 8006122:	6039      	str	r1, [r7, #0]
    if( ! wifi->connected || bytes == NULL || bytes_is_empty(bytes) ) return;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	781b      	ldrb	r3, [r3, #0]
 8006128:	f083 0301 	eor.w	r3, r3, #1
 800612c:	b2db      	uxtb	r3, r3
 800612e:	2b00      	cmp	r3, #0
 8006130:	d130      	bne.n	8006194 <wifi_write+0x7a>
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d02d      	beq.n	8006194 <wifi_write+0x7a>
 8006138:	6838      	ldr	r0, [r7, #0]
 800613a:	f7fd fbd9 	bl	80038f0 <bytes_is_empty>
 800613e:	4603      	mov	r3, r0
 8006140:	2b00      	cmp	r3, #0
 8006142:	d127      	bne.n	8006194 <wifi_write+0x7a>

    if( wifi->mqtt_server != NULL ){
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800614a:	3311      	adds	r3, #17
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d009      	beq.n	8006166 <wifi_write+0x4c>
        mqtt_server_request(wifi->mqtt_server, bytes);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006158:	3311      	adds	r3, #17
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	6839      	ldr	r1, [r7, #0]
 800615e:	4618      	mov	r0, r3
 8006160:	f7fe fbb3 	bl	80048ca <mqtt_server_request>
        return;
 8006164:	e017      	b.n	8006196 <wifi_write+0x7c>
    }

    uint8_t* array = bytes_to_array(bytes);
 8006166:	6838      	ldr	r0, [r7, #0]
 8006168:	f7fd fc63 	bl	8003a32 <bytes_to_array>
 800616c:	60f8      	str	r0, [r7, #12]
    uint16_t size = bytes_get_size(bytes);
 800616e:	6838      	ldr	r0, [r7, #0]
 8006170:	f7fd fc2b 	bl	80039ca <bytes_get_size>
 8006174:	4603      	mov	r3, r0
 8006176:	817b      	strh	r3, [r7, #10]
    esp8266_send(wifi->esp8266, array, size);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	f8d3 3001 	ldr.w	r3, [r3, #1]
 800617e:	897a      	ldrh	r2, [r7, #10]
 8006180:	68f9      	ldr	r1, [r7, #12]
 8006182:	4618      	mov	r0, r3
 8006184:	f7fc ff66 	bl	8003054 <esp8266_send>
    free(array);
 8006188:	68f8      	ldr	r0, [r7, #12]
 800618a:	f004 ff11 	bl	800afb0 <free>
    array = NULL;
 800618e:	2300      	movs	r3, #0
 8006190:	60fb      	str	r3, [r7, #12]
 8006192:	e000      	b.n	8006196 <wifi_write+0x7c>
    if( ! wifi->connected || bytes == NULL || bytes_is_empty(bytes) ) return;
 8006194:	bf00      	nop
}
 8006196:	3710      	adds	r7, #16
 8006198:	46bd      	mov	sp, r7
 800619a:	bd80      	pop	{r7, pc}

0800619c <sen0161_init>:
#include <sen0161/sen0161.h>

sen0161* sen0161_init(uint32_t channel){
 800619c:	b590      	push	{r4, r7, lr}
 800619e:	b085      	sub	sp, #20
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
	sen0161* result = (sen0161*) malloc(sizeof(sen0161));
 80061a4:	2038      	movs	r0, #56	; 0x38
 80061a6:	f004 fefb 	bl	800afa0 <malloc>
 80061aa:	4603      	mov	r3, r0
 80061ac:	60fb      	str	r3, [r7, #12]
	result->channel = channel;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	687a      	ldr	r2, [r7, #4]
 80061b2:	601a      	str	r2, [r3, #0]
	for(register int i = 0; i < 12; i++) result->readings[i] = 0;
 80061b4:	2400      	movs	r4, #0
 80061b6:	e00b      	b.n	80061d0 <sen0161_init+0x34>
 80061b8:	68fa      	ldr	r2, [r7, #12]
 80061ba:	00a3      	lsls	r3, r4, #2
 80061bc:	4413      	add	r3, r2
 80061be:	2200      	movs	r2, #0
 80061c0:	711a      	strb	r2, [r3, #4]
 80061c2:	2200      	movs	r2, #0
 80061c4:	715a      	strb	r2, [r3, #5]
 80061c6:	2200      	movs	r2, #0
 80061c8:	719a      	strb	r2, [r3, #6]
 80061ca:	2200      	movs	r2, #0
 80061cc:	71da      	strb	r2, [r3, #7]
 80061ce:	3401      	adds	r4, #1
 80061d0:	2c0b      	cmp	r4, #11
 80061d2:	ddf1      	ble.n	80061b8 <sen0161_init+0x1c>
	result->index = 0;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	2200      	movs	r2, #0
 80061d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 80061dc:	2200      	movs	r2, #0
 80061de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80061e2:	2200      	movs	r2, #0
 80061e4:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 80061e8:	2200      	movs	r2, #0
 80061ea:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	return result;
 80061ee:	68fb      	ldr	r3, [r7, #12]
}
 80061f0:	4618      	mov	r0, r3
 80061f2:	3714      	adds	r7, #20
 80061f4:	46bd      	mov	sp, r7
 80061f6:	bd90      	pop	{r4, r7, pc}

080061f8 <sen0161_read>:
void sen0161_set_index(sen0161* sen0161, const unsigned int index){
	if( sen0161 == NULL ) return;
	sen0161->index = index;
}

float sen0161_read(sen0161* sen0161){
 80061f8:	b590      	push	{r4, r7, lr}
 80061fa:	b085      	sub	sp, #20
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
	if( sen0161 == NULL ) return 0.0;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d102      	bne.n	800620c <sen0161_read+0x14>
 8006206:	f04f 0300 	mov.w	r3, #0
 800620a:	e023      	b.n	8006254 <sen0161_read+0x5c>
		float voltage_2 = 4.4621;
		float alpha = (ph_1 - ph_2) / ( voltage_1 - voltage_2 );
		float beta = ph_1 - ( alpha*voltage_1 );
	**********************************************************************************************************/

	float raw_adc = stm32_util_read_analog(sen0161->channel);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4618      	mov	r0, r3
 8006212:	f001 fc11 	bl	8007a38 <stm32_util_read_analog>
 8006216:	4603      	mov	r3, r0
 8006218:	ee07 3a90 	vmov	s15, r3
 800621c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006220:	edc7 7a03 	vstr	s15, [r7, #12]
	return raw_adc * 5.0 / 4096.0;
 8006224:	68f8      	ldr	r0, [r7, #12]
 8006226:	f7fa f99f 	bl	8000568 <__aeabi_f2d>
 800622a:	f04f 0200 	mov.w	r2, #0
 800622e:	4b0d      	ldr	r3, [pc, #52]	; (8006264 <sen0161_read+0x6c>)
 8006230:	f7fa f9f2 	bl	8000618 <__aeabi_dmul>
 8006234:	4603      	mov	r3, r0
 8006236:	460c      	mov	r4, r1
 8006238:	4618      	mov	r0, r3
 800623a:	4621      	mov	r1, r4
 800623c:	f04f 0200 	mov.w	r2, #0
 8006240:	4b09      	ldr	r3, [pc, #36]	; (8006268 <sen0161_read+0x70>)
 8006242:	f7fa fb13 	bl	800086c <__aeabi_ddiv>
 8006246:	4603      	mov	r3, r0
 8006248:	460c      	mov	r4, r1
 800624a:	4618      	mov	r0, r3
 800624c:	4621      	mov	r1, r4
 800624e:	f7fa fcdb 	bl	8000c08 <__aeabi_d2f>
 8006252:	4603      	mov	r3, r0
 8006254:	ee07 3a90 	vmov	s15, r3
	float voltage = sen0161_average(sen0161) * 5.0 / 4096.0;
	float alpha = -122.323929;
	float beta = 558.821594;

	return alpha * voltage + beta;
}
 8006258:	eeb0 0a67 	vmov.f32	s0, s15
 800625c:	3714      	adds	r7, #20
 800625e:	46bd      	mov	sp, r7
 8006260:	bd90      	pop	{r4, r7, pc}
 8006262:	bf00      	nop
 8006264:	40140000 	.word	0x40140000
 8006268:	40b00000 	.word	0x40b00000

0800626c <sen0165_init>:
#include <sen0165/sen0165.h>

sen0165* sen0165_init(uint32_t channel, float offset){
 800626c:	b590      	push	{r4, r7, lr}
 800626e:	b085      	sub	sp, #20
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
 8006274:	ed87 0a00 	vstr	s0, [r7]
	sen0165* result = (sen0165*) malloc(sizeof(sen0165));
 8006278:	203c      	movs	r0, #60	; 0x3c
 800627a:	f004 fe91 	bl	800afa0 <malloc>
 800627e:	4603      	mov	r3, r0
 8006280:	60fb      	str	r3, [r7, #12]
	result->channel = channel;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	687a      	ldr	r2, [r7, #4]
 8006286:	601a      	str	r2, [r3, #0]
	result->offset = offset;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	683a      	ldr	r2, [r7, #0]
 800628c:	605a      	str	r2, [r3, #4]
	for(register int i = 0; i < 12; i++) result->readings[i] = 0;
 800628e:	2400      	movs	r4, #0
 8006290:	e011      	b.n	80062b6 <sen0165_init+0x4a>
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	1ca2      	adds	r2, r4, #2
 8006296:	2100      	movs	r1, #0
 8006298:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
 800629c:	0091      	lsls	r1, r2, #2
 800629e:	4419      	add	r1, r3
 80062a0:	2000      	movs	r0, #0
 80062a2:	7048      	strb	r0, [r1, #1]
 80062a4:	0091      	lsls	r1, r2, #2
 80062a6:	4419      	add	r1, r3
 80062a8:	2000      	movs	r0, #0
 80062aa:	7088      	strb	r0, [r1, #2]
 80062ac:	0092      	lsls	r2, r2, #2
 80062ae:	441a      	add	r2, r3
 80062b0:	2300      	movs	r3, #0
 80062b2:	70d3      	strb	r3, [r2, #3]
 80062b4:	3401      	adds	r4, #1
 80062b6:	2c0b      	cmp	r4, #11
 80062b8:	ddeb      	ble.n	8006292 <sen0165_init+0x26>
	result->index = 0;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	2200      	movs	r2, #0
 80062be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 80062c2:	2200      	movs	r2, #0
 80062c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 80062c8:	2200      	movs	r2, #0
 80062ca:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 80062ce:	2200      	movs	r2, #0
 80062d0:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	return result;
 80062d4:	68fb      	ldr	r3, [r7, #12]
}
 80062d6:	4618      	mov	r0, r3
 80062d8:	3714      	adds	r7, #20
 80062da:	46bd      	mov	sp, r7
 80062dc:	bd90      	pop	{r4, r7, pc}
	...

080062e0 <sen0165_read>:
void sen0165_set_index(sen0165* sen0165, const unsigned int index){
	if( sen0165 == NULL ) return;
	sen0165->index = index;
}

float sen0165_read(sen0165* sen0165){
 80062e0:	b590      	push	{r4, r7, lr}
 80062e2:	b085      	sub	sp, #20
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
	if( sen0165 == NULL ) return 0.0;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d102      	bne.n	80062f4 <sen0165_read+0x14>
 80062ee:	f04f 0300 	mov.w	r3, #0
 80062f2:	e023      	b.n	800633c <sen0165_read+0x5c>

	float raw_adc = stm32_util_read_analog(sen0165->channel);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4618      	mov	r0, r3
 80062fa:	f001 fb9d 	bl	8007a38 <stm32_util_read_analog>
 80062fe:	4603      	mov	r3, r0
 8006300:	ee07 3a90 	vmov	s15, r3
 8006304:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006308:	edc7 7a03 	vstr	s15, [r7, #12]
	return raw_adc * 5.0 / 4096.0;
 800630c:	68f8      	ldr	r0, [r7, #12]
 800630e:	f7fa f92b 	bl	8000568 <__aeabi_f2d>
 8006312:	f04f 0200 	mov.w	r2, #0
 8006316:	4b0d      	ldr	r3, [pc, #52]	; (800634c <sen0165_read+0x6c>)
 8006318:	f7fa f97e 	bl	8000618 <__aeabi_dmul>
 800631c:	4603      	mov	r3, r0
 800631e:	460c      	mov	r4, r1
 8006320:	4618      	mov	r0, r3
 8006322:	4621      	mov	r1, r4
 8006324:	f04f 0200 	mov.w	r2, #0
 8006328:	4b09      	ldr	r3, [pc, #36]	; (8006350 <sen0165_read+0x70>)
 800632a:	f7fa fa9f 	bl	800086c <__aeabi_ddiv>
 800632e:	4603      	mov	r3, r0
 8006330:	460c      	mov	r4, r1
 8006332:	4618      	mov	r0, r3
 8006334:	4621      	mov	r1, r4
 8006336:	f7fa fc67 	bl	8000c08 <__aeabi_d2f>
 800633a:	4603      	mov	r3, r0
 800633c:	ee07 3a90 	vmov	s15, r3
	sen0165->readings[sen0165->index] = raw_adc;
	sen0165->index = ( sen0165->index + 1 ) % 12;

	float orpValue = ( 2000.0 - ( sen0165_average(sen0165) * 5.0 * 1000 / 4096.0 ) ) - sen0165->offset;
	return orpValue;
}
 8006340:	eeb0 0a67 	vmov.f32	s0, s15
 8006344:	3714      	adds	r7, #20
 8006346:	46bd      	mov	sp, r7
 8006348:	bd90      	pop	{r4, r7, pc}
 800634a:	bf00      	nop
 800634c:	40140000 	.word	0x40140000
 8006350:	40b00000 	.word	0x40b00000

08006354 <sen0169_init>:
#include <sen0169/sen0169.h>

sen0169* sen0169_init(uint32_t channel){
 8006354:	b590      	push	{r4, r7, lr}
 8006356:	b085      	sub	sp, #20
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
	sen0169* result 	= (sen0169*) malloc(sizeof(sen0169));
 800635c:	2038      	movs	r0, #56	; 0x38
 800635e:	f004 fe1f 	bl	800afa0 <malloc>
 8006362:	4603      	mov	r3, r0
 8006364:	60fb      	str	r3, [r7, #12]
	result->channel 	= channel;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	687a      	ldr	r2, [r7, #4]
 800636a:	601a      	str	r2, [r3, #0]
	for(register int i = 0; i < 12; i++) result->readings[i] = 0;
 800636c:	2400      	movs	r4, #0
 800636e:	e00b      	b.n	8006388 <sen0169_init+0x34>
 8006370:	68fa      	ldr	r2, [r7, #12]
 8006372:	00a3      	lsls	r3, r4, #2
 8006374:	4413      	add	r3, r2
 8006376:	2200      	movs	r2, #0
 8006378:	711a      	strb	r2, [r3, #4]
 800637a:	2200      	movs	r2, #0
 800637c:	715a      	strb	r2, [r3, #5]
 800637e:	2200      	movs	r2, #0
 8006380:	719a      	strb	r2, [r3, #6]
 8006382:	2200      	movs	r2, #0
 8006384:	71da      	strb	r2, [r3, #7]
 8006386:	3401      	adds	r4, #1
 8006388:	2c0b      	cmp	r4, #11
 800638a:	ddf1      	ble.n	8006370 <sen0169_init+0x1c>
	result->index 		= 0;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	2200      	movs	r2, #0
 8006390:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8006394:	2200      	movs	r2, #0
 8006396:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800639a:	2200      	movs	r2, #0
 800639c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 80063a0:	2200      	movs	r2, #0
 80063a2:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	return result;
 80063a6:	68fb      	ldr	r3, [r7, #12]
}
 80063a8:	4618      	mov	r0, r3
 80063aa:	3714      	adds	r7, #20
 80063ac:	46bd      	mov	sp, r7
 80063ae:	bd90      	pop	{r4, r7, pc}

080063b0 <sen0169_read>:
void sen0169_set_index(sen0169* sen0169, const unsigned int index){
	if( sen0169 == NULL ) return;
	sen0169->index = index;
}

float sen0169_read(sen0169* sen0169){
 80063b0:	b590      	push	{r4, r7, lr}
 80063b2:	b085      	sub	sp, #20
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
	if( sen0169 == NULL ) return 0.0;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d102      	bne.n	80063c4 <sen0169_read+0x14>
 80063be:	f04f 0300 	mov.w	r3, #0
 80063c2:	e023      	b.n	800640c <sen0169_read+0x5c>
		float voltage_2 = 4.4621;
		float alpha = (ph_1 - ph_2) / ( voltage_1 - voltage_2 );
		float beta = ph_1 - ( alpha*voltage_1 );
	**********************************************************************************************************/

	float raw_adc = stm32_util_read_analog(sen0169->channel);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	4618      	mov	r0, r3
 80063ca:	f001 fb35 	bl	8007a38 <stm32_util_read_analog>
 80063ce:	4603      	mov	r3, r0
 80063d0:	ee07 3a90 	vmov	s15, r3
 80063d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063d8:	edc7 7a03 	vstr	s15, [r7, #12]
	return raw_adc * 5.0 / 4096.0;
 80063dc:	68f8      	ldr	r0, [r7, #12]
 80063de:	f7fa f8c3 	bl	8000568 <__aeabi_f2d>
 80063e2:	f04f 0200 	mov.w	r2, #0
 80063e6:	4b0d      	ldr	r3, [pc, #52]	; (800641c <sen0169_read+0x6c>)
 80063e8:	f7fa f916 	bl	8000618 <__aeabi_dmul>
 80063ec:	4603      	mov	r3, r0
 80063ee:	460c      	mov	r4, r1
 80063f0:	4618      	mov	r0, r3
 80063f2:	4621      	mov	r1, r4
 80063f4:	f04f 0200 	mov.w	r2, #0
 80063f8:	4b09      	ldr	r3, [pc, #36]	; (8006420 <sen0169_read+0x70>)
 80063fa:	f7fa fa37 	bl	800086c <__aeabi_ddiv>
 80063fe:	4603      	mov	r3, r0
 8006400:	460c      	mov	r4, r1
 8006402:	4618      	mov	r0, r3
 8006404:	4621      	mov	r1, r4
 8006406:	f7fa fbff 	bl	8000c08 <__aeabi_d2f>
 800640a:	4603      	mov	r3, r0
 800640c:	ee07 3a90 	vmov	s15, r3
	float voltage 	= sen0169_average(sen0169) * 5.0 / 4096.0;
	float alpha 	= -122.323929;
	float beta 		= 558.821594;

	return alpha * voltage + beta;
}
 8006410:	eeb0 0a67 	vmov.f32	s0, s15
 8006414:	3714      	adds	r7, #20
 8006416:	46bd      	mov	sp, r7
 8006418:	bd90      	pop	{r4, r7, pc}
 800641a:	bf00      	nop
 800641c:	40140000 	.word	0x40140000
 8006420:	40b00000 	.word	0x40b00000

08006424 <sen0189_init>:
#include <sen0189/sen0189.h>

sen0189* sen0189_init(uint32_t channel){
 8006424:	b580      	push	{r7, lr}
 8006426:	b084      	sub	sp, #16
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
	sen0189* result = (sen0189*) malloc(sizeof(sen0189));
 800642c:	2004      	movs	r0, #4
 800642e:	f004 fdb7 	bl	800afa0 <malloc>
 8006432:	4603      	mov	r3, r0
 8006434:	60fb      	str	r3, [r7, #12]
	result->channel = channel;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	687a      	ldr	r2, [r7, #4]
 800643a:	601a      	str	r2, [r3, #0]
	return result;
 800643c:	68fb      	ldr	r3, [r7, #12]
}
 800643e:	4618      	mov	r0, r3
 8006440:	3710      	adds	r7, #16
 8006442:	46bd      	mov	sp, r7
 8006444:	bd80      	pop	{r7, pc}
	...

08006448 <sen0189_read>:
void sen0189_set_channel(sen0189* sen0189, uint32_t channel){
	if( sen0189 == NULL ) return;
	sen0189->channel = channel;
}

float sen0189_read(sen0189* sen0189){
 8006448:	b590      	push	{r4, r7, lr}
 800644a:	b085      	sub	sp, #20
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
	if( sen0189 == NULL ) return 0.0;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d102      	bne.n	800645c <sen0189_read+0x14>
 8006456:	f04f 0300 	mov.w	r3, #0
 800645a:	e023      	b.n	80064a4 <sen0189_read+0x5c>

	float raw_adc = stm32_util_read_analog(sen0189->channel);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4618      	mov	r0, r3
 8006462:	f001 fae9 	bl	8007a38 <stm32_util_read_analog>
 8006466:	4603      	mov	r3, r0
 8006468:	ee07 3a90 	vmov	s15, r3
 800646c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006470:	edc7 7a03 	vstr	s15, [r7, #12]
	return raw_adc * 5.0 / 4096.0;
 8006474:	68f8      	ldr	r0, [r7, #12]
 8006476:	f7fa f877 	bl	8000568 <__aeabi_f2d>
 800647a:	f04f 0200 	mov.w	r2, #0
 800647e:	4b0d      	ldr	r3, [pc, #52]	; (80064b4 <sen0189_read+0x6c>)
 8006480:	f7fa f8ca 	bl	8000618 <__aeabi_dmul>
 8006484:	4603      	mov	r3, r0
 8006486:	460c      	mov	r4, r1
 8006488:	4618      	mov	r0, r3
 800648a:	4621      	mov	r1, r4
 800648c:	f04f 0200 	mov.w	r2, #0
 8006490:	4b09      	ldr	r3, [pc, #36]	; (80064b8 <sen0189_read+0x70>)
 8006492:	f7fa f9eb 	bl	800086c <__aeabi_ddiv>
 8006496:	4603      	mov	r3, r0
 8006498:	460c      	mov	r4, r1
 800649a:	4618      	mov	r0, r3
 800649c:	4621      	mov	r1, r4
 800649e:	f7fa fbb3 	bl	8000c08 <__aeabi_d2f>
 80064a2:	4603      	mov	r3, r0
 80064a4:	ee07 3a90 	vmov	s15, r3

    float sensor_value = sqrtf(1346605265-448160*voltage);
	sensor_value = (sensor_value / 22408.0) + (57423.0/22408.0);

	return sensor_value;
}
 80064a8:	eeb0 0a67 	vmov.f32	s0, s15
 80064ac:	3714      	adds	r7, #20
 80064ae:	46bd      	mov	sp, r7
 80064b0:	bd90      	pop	{r4, r7, pc}
 80064b2:	bf00      	nop
 80064b4:	40140000 	.word	0x40140000
 80064b8:	40b00000 	.word	0x40b00000

080064bc <sen0237a_init>:
#include <sen0237a/sen0237a.h>

sen0237a* sen0237a_init(uint32_t channel, char mode_calibration, char points_for_calibration, uint32_t voltage_point_1, uint8_t temperature_point_1, uint32_t voltage_point_2, uint8_t temperature_point_2){
 80064bc:	b580      	push	{r7, lr}
 80064be:	b086      	sub	sp, #24
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	60f8      	str	r0, [r7, #12]
 80064c4:	607b      	str	r3, [r7, #4]
 80064c6:	460b      	mov	r3, r1
 80064c8:	72fb      	strb	r3, [r7, #11]
 80064ca:	4613      	mov	r3, r2
 80064cc:	72bb      	strb	r3, [r7, #10]
	sen0237a* result = (sen0237a*) malloc(sizeof(sen0237a));
 80064ce:	2066      	movs	r0, #102	; 0x66
 80064d0:	f004 fd66 	bl	800afa0 <malloc>
 80064d4:	4603      	mov	r3, r0
 80064d6:	617b      	str	r3, [r7, #20]

	result->channel						= channel;
 80064d8:	697b      	ldr	r3, [r7, #20]
 80064da:	68fa      	ldr	r2, [r7, #12]
 80064dc:	601a      	str	r2, [r3, #0]
	result->mode_calibration			= mode_calibration;
 80064de:	697b      	ldr	r3, [r7, #20]
 80064e0:	7afa      	ldrb	r2, [r7, #11]
 80064e2:	711a      	strb	r2, [r3, #4]
	result->points_for_calibration		= points_for_calibration;
 80064e4:	697b      	ldr	r3, [r7, #20]
 80064e6:	7aba      	ldrb	r2, [r7, #10]
 80064e8:	715a      	strb	r2, [r3, #5]

	result->voltage_point_1				= voltage_point_1;
 80064ea:	697b      	ldr	r3, [r7, #20]
 80064ec:	687a      	ldr	r2, [r7, #4]
 80064ee:	f8c3 2006 	str.w	r2, [r3, #6]
	result->temperature_point_1			= temperature_point_1;
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	f897 2020 	ldrb.w	r2, [r7, #32]
 80064f8:	729a      	strb	r2, [r3, #10]

	result->voltage_point_2				= voltage_point_2;
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064fe:	f8c3 200b 	str.w	r2, [r3, #11]
	result->temperature_point_2			= temperature_point_2;
 8006502:	697b      	ldr	r3, [r7, #20]
 8006504:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8006508:	73da      	strb	r2, [r3, #15]

	result->table_reference[0] = 14460;
 800650a:	697b      	ldr	r3, [r7, #20]
 800650c:	2200      	movs	r2, #0
 800650e:	f042 027c 	orr.w	r2, r2, #124	; 0x7c
 8006512:	751a      	strb	r2, [r3, #20]
 8006514:	2200      	movs	r2, #0
 8006516:	f042 0238 	orr.w	r2, r2, #56	; 0x38
 800651a:	755a      	strb	r2, [r3, #21]
	result->table_reference[1] = 14220;
 800651c:	697b      	ldr	r3, [r7, #20]
 800651e:	2200      	movs	r2, #0
 8006520:	f062 0273 	orn	r2, r2, #115	; 0x73
 8006524:	759a      	strb	r2, [r3, #22]
 8006526:	2200      	movs	r2, #0
 8006528:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 800652c:	75da      	strb	r2, [r3, #23]
	result->table_reference[2] = 13820;
 800652e:	697b      	ldr	r3, [r7, #20]
 8006530:	2200      	movs	r2, #0
 8006532:	f062 0203 	orn	r2, r2, #3
 8006536:	761a      	strb	r2, [r3, #24]
 8006538:	2200      	movs	r2, #0
 800653a:	f042 0235 	orr.w	r2, r2, #53	; 0x35
 800653e:	765a      	strb	r2, [r3, #25]
	result->table_reference[3] = 13440;
 8006540:	697b      	ldr	r3, [r7, #20]
 8006542:	2200      	movs	r2, #0
 8006544:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006548:	769a      	strb	r2, [r3, #26]
 800654a:	2200      	movs	r2, #0
 800654c:	f042 0234 	orr.w	r2, r2, #52	; 0x34
 8006550:	76da      	strb	r2, [r3, #27]
	result->table_reference[4] = 13090;
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	2200      	movs	r2, #0
 8006556:	f042 0222 	orr.w	r2, r2, #34	; 0x22
 800655a:	771a      	strb	r2, [r3, #28]
 800655c:	2200      	movs	r2, #0
 800655e:	f042 0233 	orr.w	r2, r2, #51	; 0x33
 8006562:	775a      	strb	r2, [r3, #29]
	result->table_reference[5] = 12740;
 8006564:	697b      	ldr	r3, [r7, #20]
 8006566:	2200      	movs	r2, #0
 8006568:	f062 023b 	orn	r2, r2, #59	; 0x3b
 800656c:	779a      	strb	r2, [r3, #30]
 800656e:	2200      	movs	r2, #0
 8006570:	f042 0231 	orr.w	r2, r2, #49	; 0x31
 8006574:	77da      	strb	r2, [r3, #31]
	result->table_reference[6] = 12420;
 8006576:	697b      	ldr	r3, [r7, #20]
 8006578:	2200      	movs	r2, #0
 800657a:	f062 027b 	orn	r2, r2, #123	; 0x7b
 800657e:	f883 2020 	strb.w	r2, [r3, #32]
 8006582:	2200      	movs	r2, #0
 8006584:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 8006588:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	result->table_reference[7] = 12110;
 800658c:	697b      	ldr	r3, [r7, #20]
 800658e:	2200      	movs	r2, #0
 8006590:	f042 024e 	orr.w	r2, r2, #78	; 0x4e
 8006594:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8006598:	2200      	movs	r2, #0
 800659a:	f042 022f 	orr.w	r2, r2, #47	; 0x2f
 800659e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	result->table_reference[8] = 11810;
 80065a2:	697b      	ldr	r3, [r7, #20]
 80065a4:	2200      	movs	r2, #0
 80065a6:	f042 0222 	orr.w	r2, r2, #34	; 0x22
 80065aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80065ae:	2200      	movs	r2, #0
 80065b0:	f042 022e 	orr.w	r2, r2, #46	; 0x2e
 80065b4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	result->table_reference[9] = 11530;
 80065b8:	697b      	ldr	r3, [r7, #20]
 80065ba:	2200      	movs	r2, #0
 80065bc:	f042 020a 	orr.w	r2, r2, #10
 80065c0:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 80065c4:	2200      	movs	r2, #0
 80065c6:	f042 022d 	orr.w	r2, r2, #45	; 0x2d
 80065ca:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

	result->table_reference[10] = 11260;
 80065ce:	697b      	ldr	r3, [r7, #20]
 80065d0:	2200      	movs	r2, #0
 80065d2:	f062 0203 	orn	r2, r2, #3
 80065d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80065da:	2200      	movs	r2, #0
 80065dc:	f042 022b 	orr.w	r2, r2, #43	; 0x2b
 80065e0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	result->table_reference[11] = 11010;
 80065e4:	697b      	ldr	r3, [r7, #20]
 80065e6:	2200      	movs	r2, #0
 80065e8:	f042 0202 	orr.w	r2, r2, #2
 80065ec:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 80065f0:	2200      	movs	r2, #0
 80065f2:	f042 022b 	orr.w	r2, r2, #43	; 0x2b
 80065f6:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	result->table_reference[12] = 10770;
 80065fa:	697b      	ldr	r3, [r7, #20]
 80065fc:	2200      	movs	r2, #0
 80065fe:	f042 0212 	orr.w	r2, r2, #18
 8006602:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8006606:	2200      	movs	r2, #0
 8006608:	f042 022a 	orr.w	r2, r2, #42	; 0x2a
 800660c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	result->table_reference[13] = 10530;
 8006610:	697b      	ldr	r3, [r7, #20]
 8006612:	2200      	movs	r2, #0
 8006614:	f042 0222 	orr.w	r2, r2, #34	; 0x22
 8006618:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 800661c:	2200      	movs	r2, #0
 800661e:	f042 0229 	orr.w	r2, r2, #41	; 0x29
 8006622:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	result->table_reference[14] = 10300;
 8006626:	697b      	ldr	r3, [r7, #20]
 8006628:	2200      	movs	r2, #0
 800662a:	f042 023c 	orr.w	r2, r2, #60	; 0x3c
 800662e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8006632:	2200      	movs	r2, #0
 8006634:	f042 0228 	orr.w	r2, r2, #40	; 0x28
 8006638:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	result->table_reference[15] = 10080;
 800663c:	697b      	ldr	r3, [r7, #20]
 800663e:	2200      	movs	r2, #0
 8006640:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8006644:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 8006648:	2200      	movs	r2, #0
 800664a:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 800664e:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	result->table_reference[16] = 9860;
 8006652:	697b      	ldr	r3, [r7, #20]
 8006654:	2200      	movs	r2, #0
 8006656:	f062 027b 	orn	r2, r2, #123	; 0x7b
 800665a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800665e:	2200      	movs	r2, #0
 8006660:	f042 0226 	orr.w	r2, r2, #38	; 0x26
 8006664:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	result->table_reference[17] = 9660;
 8006668:	697b      	ldr	r3, [r7, #20]
 800666a:	2200      	movs	r2, #0
 800666c:	f062 0243 	orn	r2, r2, #67	; 0x43
 8006670:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 8006674:	2200      	movs	r2, #0
 8006676:	f042 0225 	orr.w	r2, r2, #37	; 0x25
 800667a:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	result->table_reference[18] = 9460;
 800667e:	697b      	ldr	r3, [r7, #20]
 8006680:	2200      	movs	r2, #0
 8006682:	f062 020b 	orn	r2, r2, #11
 8006686:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 800668a:	2200      	movs	r2, #0
 800668c:	f042 0224 	orr.w	r2, r2, #36	; 0x24
 8006690:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	result->table_reference[19] = 9270;
 8006694:	697b      	ldr	r3, [r7, #20]
 8006696:	2200      	movs	r2, #0
 8006698:	f042 0236 	orr.w	r2, r2, #54	; 0x36
 800669c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 80066a0:	2200      	movs	r2, #0
 80066a2:	f042 0224 	orr.w	r2, r2, #36	; 0x24
 80066a6:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b

	result->table_reference[20] = 9080;
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	2200      	movs	r2, #0
 80066ae:	f042 0278 	orr.w	r2, r2, #120	; 0x78
 80066b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80066b6:	2200      	movs	r2, #0
 80066b8:	f042 0223 	orr.w	r2, r2, #35	; 0x23
 80066bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	result->table_reference[21] = 8900;
 80066c0:	697b      	ldr	r3, [r7, #20]
 80066c2:	2200      	movs	r2, #0
 80066c4:	f062 023b 	orn	r2, r2, #59	; 0x3b
 80066c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80066cc:	2200      	movs	r2, #0
 80066ce:	f042 0222 	orr.w	r2, r2, #34	; 0x22
 80066d2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
	result->table_reference[22] = 8730;
 80066d6:	697b      	ldr	r3, [r7, #20]
 80066d8:	2200      	movs	r2, #0
 80066da:	f042 021a 	orr.w	r2, r2, #26
 80066de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80066e2:	2200      	movs	r2, #0
 80066e4:	f042 0222 	orr.w	r2, r2, #34	; 0x22
 80066e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	result->table_reference[23] = 8570;
 80066ec:	697b      	ldr	r3, [r7, #20]
 80066ee:	2200      	movs	r2, #0
 80066f0:	f042 027a 	orr.w	r2, r2, #122	; 0x7a
 80066f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80066f8:	2200      	movs	r2, #0
 80066fa:	f042 0221 	orr.w	r2, r2, #33	; 0x21
 80066fe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
	result->table_reference[24] = 8410;
 8006702:	697b      	ldr	r3, [r7, #20]
 8006704:	2200      	movs	r2, #0
 8006706:	f062 0225 	orn	r2, r2, #37	; 0x25
 800670a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800670e:	2200      	movs	r2, #0
 8006710:	f042 0220 	orr.w	r2, r2, #32
 8006714:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	result->table_reference[25] = 8250;
 8006718:	697b      	ldr	r3, [r7, #20]
 800671a:	2200      	movs	r2, #0
 800671c:	f042 023a 	orr.w	r2, r2, #58	; 0x3a
 8006720:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006724:	2200      	movs	r2, #0
 8006726:	f042 0220 	orr.w	r2, r2, #32
 800672a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	result->table_reference[25] = 8110;
 800672e:	697b      	ldr	r3, [r7, #20]
 8006730:	2200      	movs	r2, #0
 8006732:	f062 0251 	orn	r2, r2, #81	; 0x51
 8006736:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800673a:	2200      	movs	r2, #0
 800673c:	f042 021f 	orr.w	r2, r2, #31
 8006740:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	result->table_reference[27] = 7960;
 8006744:	697b      	ldr	r3, [r7, #20]
 8006746:	2200      	movs	r2, #0
 8006748:	f042 0218 	orr.w	r2, r2, #24
 800674c:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 8006750:	2200      	movs	r2, #0
 8006752:	f042 021f 	orr.w	r2, r2, #31
 8006756:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	result->table_reference[28] = 7820;
 800675a:	697b      	ldr	r3, [r7, #20]
 800675c:	2200      	movs	r2, #0
 800675e:	f062 0273 	orn	r2, r2, #115	; 0x73
 8006762:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 8006766:	2200      	movs	r2, #0
 8006768:	f042 021e 	orr.w	r2, r2, #30
 800676c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
	result->table_reference[29] = 7690;
 8006770:	697b      	ldr	r3, [r7, #20]
 8006772:	2200      	movs	r2, #0
 8006774:	f042 020a 	orr.w	r2, r2, #10
 8006778:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 800677c:	2200      	movs	r2, #0
 800677e:	f042 021e 	orr.w	r2, r2, #30
 8006782:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f

	result->table_reference[30] = 7560;
 8006786:	697b      	ldr	r3, [r7, #20]
 8006788:	2200      	movs	r2, #0
 800678a:	f062 0277 	orn	r2, r2, #119	; 0x77
 800678e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8006792:	2200      	movs	r2, #0
 8006794:	f042 021d 	orr.w	r2, r2, #29
 8006798:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	result->table_reference[31] = 7430;
 800679c:	697b      	ldr	r3, [r7, #20]
 800679e:	2200      	movs	r2, #0
 80067a0:	f042 0206 	orr.w	r2, r2, #6
 80067a4:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
 80067a8:	2200      	movs	r2, #0
 80067aa:	f042 021d 	orr.w	r2, r2, #29
 80067ae:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	result->table_reference[32] = 7300;
 80067b2:	697b      	ldr	r3, [r7, #20]
 80067b4:	2200      	movs	r2, #0
 80067b6:	f062 027b 	orn	r2, r2, #123	; 0x7b
 80067ba:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 80067be:	2200      	movs	r2, #0
 80067c0:	f042 021c 	orr.w	r2, r2, #28
 80067c4:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	result->table_reference[33] = 7180;
 80067c8:	697b      	ldr	r3, [r7, #20]
 80067ca:	2200      	movs	r2, #0
 80067cc:	f042 020c 	orr.w	r2, r2, #12
 80067d0:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
 80067d4:	2200      	movs	r2, #0
 80067d6:	f042 021c 	orr.w	r2, r2, #28
 80067da:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	result->table_reference[34] = 7070;
 80067de:	697b      	ldr	r3, [r7, #20]
 80067e0:	2200      	movs	r2, #0
 80067e2:	f062 0261 	orn	r2, r2, #97	; 0x61
 80067e6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 80067ea:	2200      	movs	r2, #0
 80067ec:	f042 021b 	orr.w	r2, r2, #27
 80067f0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	result->table_reference[35] = 6950;
 80067f4:	697b      	ldr	r3, [r7, #20]
 80067f6:	2200      	movs	r2, #0
 80067f8:	f042 0226 	orr.w	r2, r2, #38	; 0x26
 80067fc:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
 8006800:	2200      	movs	r2, #0
 8006802:	f042 021b 	orr.w	r2, r2, #27
 8006806:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
	result->table_reference[36] = 6840;
 800680a:	697b      	ldr	r3, [r7, #20]
 800680c:	2200      	movs	r2, #0
 800680e:	f062 0247 	orn	r2, r2, #71	; 0x47
 8006812:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8006816:	2200      	movs	r2, #0
 8006818:	f042 021a 	orr.w	r2, r2, #26
 800681c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
	result->table_reference[37] = 6730;
 8006820:	697b      	ldr	r3, [r7, #20]
 8006822:	2200      	movs	r2, #0
 8006824:	f042 024a 	orr.w	r2, r2, #74	; 0x4a
 8006828:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
 800682c:	2200      	movs	r2, #0
 800682e:	f042 021a 	orr.w	r2, r2, #26
 8006832:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
	result->table_reference[38] = 6630;
 8006836:	697b      	ldr	r3, [r7, #20]
 8006838:	2200      	movs	r2, #0
 800683a:	f062 0219 	orn	r2, r2, #25
 800683e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 8006842:	2200      	movs	r2, #0
 8006844:	f042 0219 	orr.w	r2, r2, #25
 8006848:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
	result->table_reference[39] = 6530;
 800684c:	697b      	ldr	r3, [r7, #20]
 800684e:	2200      	movs	r2, #0
 8006850:	f062 027d 	orn	r2, r2, #125	; 0x7d
 8006854:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
 8006858:	2200      	movs	r2, #0
 800685a:	f042 0219 	orr.w	r2, r2, #25
 800685e:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
	result->table_reference[40] = 6410;
 8006862:	697b      	ldr	r3, [r7, #20]
 8006864:	2200      	movs	r2, #0
 8006866:	f042 020a 	orr.w	r2, r2, #10
 800686a:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 800686e:	2200      	movs	r2, #0
 8006870:	f042 0219 	orr.w	r2, r2, #25
 8006874:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65

	return result;
 8006878:	697b      	ldr	r3, [r7, #20]
}
 800687a:	4618      	mov	r0, r3
 800687c:	3718      	adds	r7, #24
 800687e:	46bd      	mov	sp, r7
 8006880:	bd80      	pop	{r7, pc}

08006882 <sen0237a_set_current_temperature>:

uint32_t sen0237a_get_current_temperature(sen0237a* sen0237a){
	return sen0237a == NULL ? 0 : sen0237a->current_temperature;
}

void sen0237a_set_current_temperature(sen0237a* sen0237a, uint32_t current_temperature){
 8006882:	b480      	push	{r7}
 8006884:	b083      	sub	sp, #12
 8006886:	af00      	add	r7, sp, #0
 8006888:	6078      	str	r0, [r7, #4]
 800688a:	6039      	str	r1, [r7, #0]
	if( sen0237a == NULL ) return;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d003      	beq.n	800689a <sen0237a_set_current_temperature+0x18>
	sen0237a->current_temperature = current_temperature;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	683a      	ldr	r2, [r7, #0]
 8006896:	611a      	str	r2, [r3, #16]
 8006898:	e000      	b.n	800689c <sen0237a_set_current_temperature+0x1a>
	if( sen0237a == NULL ) return;
 800689a:	bf00      	nop
}
 800689c:	370c      	adds	r7, #12
 800689e:	46bd      	mov	sp, r7
 80068a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a4:	4770      	bx	lr
	...

080068a8 <sen0237a_read>:

float sen0237a_read(sen0237a* sen0237a){
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b088      	sub	sp, #32
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
	if( sen0237a == NULL ) return 0.0;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d102      	bne.n	80068bc <sen0237a_read+0x14>
 80068b6:	f04f 0300 	mov.w	r3, #0
 80068ba:	e07f      	b.n	80069bc <sen0237a_read+0x114>

	float adc_raw = stm32_util_read_analog(sen0237a->channel);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4618      	mov	r0, r3
 80068c2:	f001 f8b9 	bl	8007a38 <stm32_util_read_analog>
 80068c6:	4603      	mov	r3, r0
 80068c8:	ee07 3a90 	vmov	s15, r3
 80068cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068d0:	edc7 7a06 	vstr	s15, [r7, #24]
	float adc_voltage = adc_raw * ( 5.0 / 4096.0 );
 80068d4:	edd7 7a06 	vldr	s15, [r7, #24]
 80068d8:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 80069cc <sen0237a_read+0x124>
 80068dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80068e0:	edc7 7a05 	vstr	s15, [r7, #20]

	if ( sen0237a->mode_calibration != 0x00 ){
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	791b      	ldrb	r3, [r3, #4]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d001      	beq.n	80068f0 <sen0237a_read+0x48>
		return adc_voltage;
 80068ec:	697b      	ldr	r3, [r7, #20]
 80068ee:	e065      	b.n	80069bc <sen0237a_read+0x114>
	}

	uint16_t saturation = 0;
 80068f0:	2300      	movs	r3, #0
 80068f2:	83fb      	strh	r3, [r7, #30]
	char points_for_calibration = sen0237a->points_for_calibration;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	795b      	ldrb	r3, [r3, #5]
 80068f8:	74fb      	strb	r3, [r7, #19]
	if( points_for_calibration == 0x01 ){
 80068fa:	7cfb      	ldrb	r3, [r7, #19]
 80068fc:	2b01      	cmp	r3, #1
 80068fe:	d11c      	bne.n	800693a <sen0237a_read+0x92>
		saturation = (uint32_t) sen0237a->voltage_point_1 + ( (uint32_t) 35 * sen0237a->current_temperature ) - ( (uint32_t) sen0237a->temperature_point_1 * 35 );
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	f8d3 3006 	ldr.w	r3, [r3, #6]
 8006906:	b29a      	uxth	r2, r3
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	691b      	ldr	r3, [r3, #16]
 800690c:	b29b      	uxth	r3, r3
 800690e:	4619      	mov	r1, r3
 8006910:	0089      	lsls	r1, r1, #2
 8006912:	440b      	add	r3, r1
 8006914:	4619      	mov	r1, r3
 8006916:	00c9      	lsls	r1, r1, #3
 8006918:	1acb      	subs	r3, r1, r3
 800691a:	b29b      	uxth	r3, r3
 800691c:	4413      	add	r3, r2
 800691e:	b29a      	uxth	r2, r3
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	7a9b      	ldrb	r3, [r3, #10]
 8006924:	b29b      	uxth	r3, r3
 8006926:	4619      	mov	r1, r3
 8006928:	0089      	lsls	r1, r1, #2
 800692a:	440b      	add	r3, r1
 800692c:	4619      	mov	r1, r3
 800692e:	00c9      	lsls	r1, r1, #3
 8006930:	1acb      	subs	r3, r1, r3
 8006932:	b29b      	uxth	r3, r3
 8006934:	1ad3      	subs	r3, r2, r3
 8006936:	83fb      	strh	r3, [r7, #30]
 8006938:	e026      	b.n	8006988 <sen0237a_read+0xe0>
	} else if ( points_for_calibration == 0x02 ){
 800693a:	7cfb      	ldrb	r3, [r7, #19]
 800693c:	2b02      	cmp	r3, #2
 800693e:	d123      	bne.n	8006988 <sen0237a_read+0xe0>
		saturation = (int16_t)( (int8_t)sen0237a->current_temperature - sen0237a->temperature_point_2) * ( (uint16_t)sen0237a->voltage_point_1 - sen0237a->voltage_point_2 ) / ( (uint8_t)sen0237a->temperature_point_1 - sen0237a->temperature_point_2 ) + sen0237a->voltage_point_2;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	691b      	ldr	r3, [r3, #16]
 8006944:	b25b      	sxtb	r3, r3
 8006946:	b21a      	sxth	r2, r3
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	7bdb      	ldrb	r3, [r3, #15]
 800694c:	b21b      	sxth	r3, r3
 800694e:	1ad3      	subs	r3, r2, r3
 8006950:	b21b      	sxth	r3, r3
 8006952:	461a      	mov	r2, r3
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	f8d3 3006 	ldr.w	r3, [r3, #6]
 800695a:	b29b      	uxth	r3, r3
 800695c:	4619      	mov	r1, r3
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	f8d3 300b 	ldr.w	r3, [r3, #11]
 8006964:	1acb      	subs	r3, r1, r3
 8006966:	fb03 f302 	mul.w	r3, r3, r2
 800696a:	687a      	ldr	r2, [r7, #4]
 800696c:	7a92      	ldrb	r2, [r2, #10]
 800696e:	4611      	mov	r1, r2
 8006970:	687a      	ldr	r2, [r7, #4]
 8006972:	7bd2      	ldrb	r2, [r2, #15]
 8006974:	1a8a      	subs	r2, r1, r2
 8006976:	fbb3 f3f2 	udiv	r3, r3, r2
 800697a:	b29a      	uxth	r2, r3
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	f8d3 300b 	ldr.w	r3, [r3, #11]
 8006982:	b29b      	uxth	r3, r3
 8006984:	4413      	add	r3, r2
 8006986:	83fb      	strh	r3, [r7, #30]
	}

	float result = (adc_voltage * sen0237a->table_reference[sen0237a->current_temperature] / saturation);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	691b      	ldr	r3, [r3, #16]
 800698c:	687a      	ldr	r2, [r7, #4]
 800698e:	3308      	adds	r3, #8
 8006990:	005b      	lsls	r3, r3, #1
 8006992:	4413      	add	r3, r2
 8006994:	889b      	ldrh	r3, [r3, #4]
 8006996:	b29b      	uxth	r3, r3
 8006998:	ee07 3a90 	vmov	s15, r3
 800699c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80069a0:	edd7 7a05 	vldr	s15, [r7, #20]
 80069a4:	ee67 6a27 	vmul.f32	s13, s14, s15
 80069a8:	8bfb      	ldrh	r3, [r7, #30]
 80069aa:	ee07 3a90 	vmov	s15, r3
 80069ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80069b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80069b6:	edc7 7a03 	vstr	s15, [r7, #12]
	return result;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	ee07 3a90 	vmov	s15, r3
}
 80069c0:	eeb0 0a67 	vmov.f32	s0, s15
 80069c4:	3720      	adds	r7, #32
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bd80      	pop	{r7, pc}
 80069ca:	bf00      	nop
 80069cc:	3aa00000 	.word	0x3aa00000

080069d0 <SSD1306_Write_Command>:
extern I2C_HandleTypeDef hi2c2;

#define SSD1306_I2C       &hi2c2
#define SSD1306_I2C_ADDR  (0x78)

uint8_t SSD1306_Write_Command(uint8_t command){
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b086      	sub	sp, #24
 80069d4:	af02      	add	r7, sp, #8
 80069d6:	4603      	mov	r3, r0
 80069d8:	71fb      	strb	r3, [r7, #7]
	uint8_t data[2] = {0x00, command};
 80069da:	2300      	movs	r3, #0
 80069dc:	733b      	strb	r3, [r7, #12]
 80069de:	79fb      	ldrb	r3, [r7, #7]
 80069e0:	737b      	strb	r3, [r7, #13]

    if(HAL_I2C_Master_Transmit(SSD1306_I2C, SSD1306_I2C_ADDR, data, 2, 2) != HAL_OK)
 80069e2:	f107 020c 	add.w	r2, r7, #12
 80069e6:	2302      	movs	r3, #2
 80069e8:	9300      	str	r3, [sp, #0]
 80069ea:	2302      	movs	r3, #2
 80069ec:	2178      	movs	r1, #120	; 0x78
 80069ee:	4806      	ldr	r0, [pc, #24]	; (8006a08 <SSD1306_Write_Command+0x38>)
 80069f0:	f001 fdb6 	bl	8008560 <HAL_I2C_Master_Transmit>
 80069f4:	4603      	mov	r3, r0
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d001      	beq.n	80069fe <SSD1306_Write_Command+0x2e>
        return 0;
 80069fa:	2300      	movs	r3, #0
 80069fc:	e000      	b.n	8006a00 <SSD1306_Write_Command+0x30>
    else
        return 1;
 80069fe:	2301      	movs	r3, #1
}
 8006a00:	4618      	mov	r0, r3
 8006a02:	3710      	adds	r7, #16
 8006a04:	46bd      	mov	sp, r7
 8006a06:	bd80      	pop	{r7, pc}
 8006a08:	20000b44 	.word	0x20000b44

08006a0c <SSD1306_Goto>:
        return 0;
    else
        return 1;
}

void SSD1306_Goto(uint8_t col, uint8_t row){
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b082      	sub	sp, #8
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	4603      	mov	r3, r0
 8006a14:	460a      	mov	r2, r1
 8006a16:	71fb      	strb	r3, [r7, #7]
 8006a18:	4613      	mov	r3, r2
 8006a1a:	71bb      	strb	r3, [r7, #6]
	if(row >= SSD1306_HEIGHT/8)
 8006a1c:	79bb      	ldrb	r3, [r7, #6]
 8006a1e:	2b07      	cmp	r3, #7
 8006a20:	d901      	bls.n	8006a26 <SSD1306_Goto+0x1a>
		row = SSD1306_HEIGHT/8 - 1;
 8006a22:	2307      	movs	r3, #7
 8006a24:	71bb      	strb	r3, [r7, #6]

	if(col >= SSD1306_WIDTH)
 8006a26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	da01      	bge.n	8006a32 <SSD1306_Goto+0x26>
		col = SSD1306_WIDTH - 1;
 8006a2e:	237f      	movs	r3, #127	; 0x7f
 8006a30:	71fb      	strb	r3, [r7, #7]

	SSD1306_Write_Command(0xB0 | row);
 8006a32:	79bb      	ldrb	r3, [r7, #6]
 8006a34:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8006a38:	b2db      	uxtb	r3, r3
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	f7ff ffc8 	bl	80069d0 <SSD1306_Write_Command>
	SSD1306_Write_Command(0x00 | (col & 0x0F));
 8006a40:	79fb      	ldrb	r3, [r7, #7]
 8006a42:	f003 030f 	and.w	r3, r3, #15
 8006a46:	b2db      	uxtb	r3, r3
 8006a48:	4618      	mov	r0, r3
 8006a4a:	f7ff ffc1 	bl	80069d0 <SSD1306_Write_Command>
	SSD1306_Write_Command(0x10 | (col >> 4));
 8006a4e:	79fb      	ldrb	r3, [r7, #7]
 8006a50:	091b      	lsrs	r3, r3, #4
 8006a52:	b2db      	uxtb	r3, r3
 8006a54:	f043 0310 	orr.w	r3, r3, #16
 8006a58:	b2db      	uxtb	r3, r3
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	f7ff ffb8 	bl	80069d0 <SSD1306_Write_Command>
}
 8006a60:	bf00      	nop
 8006a62:	3708      	adds	r7, #8
 8006a64:	46bd      	mov	sp, r7
 8006a66:	bd80      	pop	{r7, pc}

08006a68 <SSD1306_Write_Char>:

void SSD1306_Write_Char(uint8_t c, SSD1306_Font_t* font){
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b08a      	sub	sp, #40	; 0x28
 8006a6c:	af02      	add	r7, sp, #8
 8006a6e:	4603      	mov	r3, r0
 8006a70:	6039      	str	r1, [r7, #0]
 8006a72:	71fb      	strb	r3, [r7, #7]
	const uint8_t *base;
	uint8_t width, n;
	uint8_t data[16];

	if(c < 32 || c > 127)
 8006a74:	79fb      	ldrb	r3, [r7, #7]
 8006a76:	2b1f      	cmp	r3, #31
 8006a78:	d903      	bls.n	8006a82 <SSD1306_Write_Char+0x1a>
 8006a7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	da01      	bge.n	8006a86 <SSD1306_Write_Char+0x1e>
		c = 127;
 8006a82:	237f      	movs	r3, #127	; 0x7f
 8006a84:	71fb      	strb	r3, [r7, #7]

	c -= 32;
 8006a86:	79fb      	ldrb	r3, [r7, #7]
 8006a88:	3b20      	subs	r3, #32
 8006a8a:	71fb      	strb	r3, [r7, #7]

	width = font->width;
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	781b      	ldrb	r3, [r3, #0]
 8006a90:	77bb      	strb	r3, [r7, #30]
	data[0] = 0x40;
 8006a92:	2340      	movs	r3, #64	; 0x40
 8006a94:	723b      	strb	r3, [r7, #8]
	base = font->data + width*c;
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	685b      	ldr	r3, [r3, #4]
 8006a9a:	7fba      	ldrb	r2, [r7, #30]
 8006a9c:	79f9      	ldrb	r1, [r7, #7]
 8006a9e:	fb01 f202 	mul.w	r2, r1, r2
 8006aa2:	4413      	add	r3, r2
 8006aa4:	61bb      	str	r3, [r7, #24]
	for(n = 0 ; n < width ; n++)
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	77fb      	strb	r3, [r7, #31]
 8006aaa:	e00d      	b.n	8006ac8 <SSD1306_Write_Char+0x60>
		data[1+n] = base[n];
 8006aac:	7ffb      	ldrb	r3, [r7, #31]
 8006aae:	69ba      	ldr	r2, [r7, #24]
 8006ab0:	441a      	add	r2, r3
 8006ab2:	7ffb      	ldrb	r3, [r7, #31]
 8006ab4:	3301      	adds	r3, #1
 8006ab6:	7812      	ldrb	r2, [r2, #0]
 8006ab8:	f107 0120 	add.w	r1, r7, #32
 8006abc:	440b      	add	r3, r1
 8006abe:	f803 2c18 	strb.w	r2, [r3, #-24]
	for(n = 0 ; n < width ; n++)
 8006ac2:	7ffb      	ldrb	r3, [r7, #31]
 8006ac4:	3301      	adds	r3, #1
 8006ac6:	77fb      	strb	r3, [r7, #31]
 8006ac8:	7ffa      	ldrb	r2, [r7, #31]
 8006aca:	7fbb      	ldrb	r3, [r7, #30]
 8006acc:	429a      	cmp	r2, r3
 8006ace:	d3ed      	bcc.n	8006aac <SSD1306_Write_Char+0x44>

	data[width+1] = 0x00;
 8006ad0:	7fbb      	ldrb	r3, [r7, #30]
 8006ad2:	3301      	adds	r3, #1
 8006ad4:	f107 0220 	add.w	r2, r7, #32
 8006ad8:	4413      	add	r3, r2
 8006ada:	2200      	movs	r2, #0
 8006adc:	f803 2c18 	strb.w	r2, [r3, #-24]

	HAL_I2C_Master_Transmit(SSD1306_I2C,SSD1306_I2C_ADDR, data, width+2, 10);
 8006ae0:	7fbb      	ldrb	r3, [r7, #30]
 8006ae2:	b29b      	uxth	r3, r3
 8006ae4:	3302      	adds	r3, #2
 8006ae6:	b299      	uxth	r1, r3
 8006ae8:	f107 0208 	add.w	r2, r7, #8
 8006aec:	230a      	movs	r3, #10
 8006aee:	9300      	str	r3, [sp, #0]
 8006af0:	460b      	mov	r3, r1
 8006af2:	2178      	movs	r1, #120	; 0x78
 8006af4:	4803      	ldr	r0, [pc, #12]	; (8006b04 <SSD1306_Write_Char+0x9c>)
 8006af6:	f001 fd33 	bl	8008560 <HAL_I2C_Master_Transmit>
}
 8006afa:	bf00      	nop
 8006afc:	3720      	adds	r7, #32
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}
 8006b02:	bf00      	nop
 8006b04:	20000b44 	.word	0x20000b44

08006b08 <SSD1306_Write_Buffer>:

void SSD1306_Write_Buffer(uint8_t* str, uint8_t size, SSD1306_Font_t* font){
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b086      	sub	sp, #24
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	60f8      	str	r0, [r7, #12]
 8006b10:	460b      	mov	r3, r1
 8006b12:	607a      	str	r2, [r7, #4]
 8006b14:	72fb      	strb	r3, [r7, #11]
	uint8_t  n;
	for(n = 0 ; n < size ; n++)
 8006b16:	2300      	movs	r3, #0
 8006b18:	75fb      	strb	r3, [r7, #23]
 8006b1a:	e00a      	b.n	8006b32 <SSD1306_Write_Buffer+0x2a>
		SSD1306_Write_Char(str[n],font);
 8006b1c:	7dfb      	ldrb	r3, [r7, #23]
 8006b1e:	68fa      	ldr	r2, [r7, #12]
 8006b20:	4413      	add	r3, r2
 8006b22:	781b      	ldrb	r3, [r3, #0]
 8006b24:	6879      	ldr	r1, [r7, #4]
 8006b26:	4618      	mov	r0, r3
 8006b28:	f7ff ff9e 	bl	8006a68 <SSD1306_Write_Char>
	for(n = 0 ; n < size ; n++)
 8006b2c:	7dfb      	ldrb	r3, [r7, #23]
 8006b2e:	3301      	adds	r3, #1
 8006b30:	75fb      	strb	r3, [r7, #23]
 8006b32:	7dfa      	ldrb	r2, [r7, #23]
 8006b34:	7afb      	ldrb	r3, [r7, #11]
 8006b36:	429a      	cmp	r2, r3
 8006b38:	d3f0      	bcc.n	8006b1c <SSD1306_Write_Buffer+0x14>
}
 8006b3a:	bf00      	nop
 8006b3c:	3718      	adds	r7, #24
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	bd80      	pop	{r7, pc}
	...

08006b44 <SSD1306_Write_String>:

void SSD1306_Write_String(uint8_t *str){
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b082      	sub	sp, #8
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
	SSD1306_Write_Buffer(str,strlen((char *)str),&SSD1306_Font_07X05);
 8006b4c:	6878      	ldr	r0, [r7, #4]
 8006b4e:	f7f9 fb49 	bl	80001e4 <strlen>
 8006b52:	4603      	mov	r3, r0
 8006b54:	b2db      	uxtb	r3, r3
 8006b56:	4a04      	ldr	r2, [pc, #16]	; (8006b68 <SSD1306_Write_String+0x24>)
 8006b58:	4619      	mov	r1, r3
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	f7ff ffd4 	bl	8006b08 <SSD1306_Write_Buffer>
}
 8006b60:	bf00      	nop
 8006b62:	3708      	adds	r7, #8
 8006b64:	46bd      	mov	sp, r7
 8006b66:	bd80      	pop	{r7, pc}
 8006b68:	200000e4 	.word	0x200000e4

08006b6c <SSD1306_Write_Centered_String>:

void SSD1306_Write_Centered_String(uint8_t* str, uint8_t row){
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b084      	sub	sp, #16
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
 8006b74:	460b      	mov	r3, r1
 8006b76:	70fb      	strb	r3, [r7, #3]
	int16_t col = (SSD1306_WIDTH - strlen((char *)str)*6)/2;
 8006b78:	6878      	ldr	r0, [r7, #4]
 8006b7a:	f7f9 fb33 	bl	80001e4 <strlen>
 8006b7e:	4602      	mov	r2, r0
 8006b80:	4613      	mov	r3, r2
 8006b82:	005b      	lsls	r3, r3, #1
 8006b84:	4413      	add	r3, r2
 8006b86:	005b      	lsls	r3, r3, #1
 8006b88:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8006b8c:	085b      	lsrs	r3, r3, #1
 8006b8e:	81fb      	strh	r3, [r7, #14]
	col = col < 0 ? 0 : col;
 8006b90:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006b94:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006b98:	81fb      	strh	r3, [r7, #14]
	SSD1306_Goto(col,row);
 8006b9a:	89fb      	ldrh	r3, [r7, #14]
 8006b9c:	b2db      	uxtb	r3, r3
 8006b9e:	78fa      	ldrb	r2, [r7, #3]
 8006ba0:	4611      	mov	r1, r2
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	f7ff ff32 	bl	8006a0c <SSD1306_Goto>
	SSD1306_Write_String(str);
 8006ba8:	6878      	ldr	r0, [r7, #4]
 8006baa:	f7ff ffcb 	bl	8006b44 <SSD1306_Write_String>
}
 8006bae:	bf00      	nop
 8006bb0:	3710      	adds	r7, #16
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bd80      	pop	{r7, pc}
	...

08006bb8 <SDD1306_Clear_Screen>:

void SDD1306_Clear_Screen(void){
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b088      	sub	sp, #32
 8006bbc:	af02      	add	r7, sp, #8
	uint8_t n,m;
	uint8_t data[] = {0x40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
 8006bbe:	1d3b      	adds	r3, r7, #4
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	601a      	str	r2, [r3, #0]
 8006bc4:	605a      	str	r2, [r3, #4]
 8006bc6:	609a      	str	r2, [r3, #8]
 8006bc8:	60da      	str	r2, [r3, #12]
 8006bca:	741a      	strb	r2, [r3, #16]
 8006bcc:	2340      	movs	r3, #64	; 0x40
 8006bce:	713b      	strb	r3, [r7, #4]

	SSD1306_Goto(0,0);
 8006bd0:	2100      	movs	r1, #0
 8006bd2:	2000      	movs	r0, #0
 8006bd4:	f7ff ff1a 	bl	8006a0c <SSD1306_Goto>

	for(n = 0 ; n < SSD1306_HEIGHT/8 ; n++)
 8006bd8:	2300      	movs	r3, #0
 8006bda:	75fb      	strb	r3, [r7, #23]
 8006bdc:	e013      	b.n	8006c06 <SDD1306_Clear_Screen+0x4e>
		for(m = 0 ; m < SSD1306_WIDTH/16 ; m++)
 8006bde:	2300      	movs	r3, #0
 8006be0:	75bb      	strb	r3, [r7, #22]
 8006be2:	e00a      	b.n	8006bfa <SDD1306_Clear_Screen+0x42>
			HAL_I2C_Master_Transmit(SSD1306_I2C,SSD1306_I2C_ADDR, data, 17, 10);
 8006be4:	1d3a      	adds	r2, r7, #4
 8006be6:	230a      	movs	r3, #10
 8006be8:	9300      	str	r3, [sp, #0]
 8006bea:	2311      	movs	r3, #17
 8006bec:	2178      	movs	r1, #120	; 0x78
 8006bee:	4809      	ldr	r0, [pc, #36]	; (8006c14 <SDD1306_Clear_Screen+0x5c>)
 8006bf0:	f001 fcb6 	bl	8008560 <HAL_I2C_Master_Transmit>
		for(m = 0 ; m < SSD1306_WIDTH/16 ; m++)
 8006bf4:	7dbb      	ldrb	r3, [r7, #22]
 8006bf6:	3301      	adds	r3, #1
 8006bf8:	75bb      	strb	r3, [r7, #22]
 8006bfa:	7dbb      	ldrb	r3, [r7, #22]
 8006bfc:	2b07      	cmp	r3, #7
 8006bfe:	d9f1      	bls.n	8006be4 <SDD1306_Clear_Screen+0x2c>
	for(n = 0 ; n < SSD1306_HEIGHT/8 ; n++)
 8006c00:	7dfb      	ldrb	r3, [r7, #23]
 8006c02:	3301      	adds	r3, #1
 8006c04:	75fb      	strb	r3, [r7, #23]
 8006c06:	7dfb      	ldrb	r3, [r7, #23]
 8006c08:	2b07      	cmp	r3, #7
 8006c0a:	d9e8      	bls.n	8006bde <SDD1306_Clear_Screen+0x26>
}
 8006c0c:	bf00      	nop
 8006c0e:	3718      	adds	r7, #24
 8006c10:	46bd      	mov	sp, r7
 8006c12:	bd80      	pop	{r7, pc}
 8006c14:	20000b44 	.word	0x20000b44

08006c18 <SSD1306_Init>:

uint8_t SSD1306_Init(void){
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	af00      	add	r7, sp, #0
	
	HAL_Delay(100);
 8006c1c:	2064      	movs	r0, #100	; 0x64
 8006c1e:	f001 f931 	bl	8007e84 <HAL_Delay>

	SSD1306_Write_Command(0xAE); //display off
 8006c22:	20ae      	movs	r0, #174	; 0xae
 8006c24:	f7ff fed4 	bl	80069d0 <SSD1306_Write_Command>
	SSD1306_Write_Command(0x20); //Set Memory Addressing Mode
 8006c28:	2020      	movs	r0, #32
 8006c2a:	f7ff fed1 	bl	80069d0 <SSD1306_Write_Command>
	SSD1306_Write_Command(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8006c2e:	2010      	movs	r0, #16
 8006c30:	f7ff fece 	bl	80069d0 <SSD1306_Write_Command>
	SSD1306_Write_Command(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8006c34:	20b0      	movs	r0, #176	; 0xb0
 8006c36:	f7ff fecb 	bl	80069d0 <SSD1306_Write_Command>
	SSD1306_Write_Command(0xC8); //Set COM Output Scan Direction
 8006c3a:	20c8      	movs	r0, #200	; 0xc8
 8006c3c:	f7ff fec8 	bl	80069d0 <SSD1306_Write_Command>
	SSD1306_Write_Command(0x00); //---set low column address
 8006c40:	2000      	movs	r0, #0
 8006c42:	f7ff fec5 	bl	80069d0 <SSD1306_Write_Command>
	SSD1306_Write_Command(0x10); //---set high column address
 8006c46:	2010      	movs	r0, #16
 8006c48:	f7ff fec2 	bl	80069d0 <SSD1306_Write_Command>
	SSD1306_Write_Command(0x40); //--set start line address
 8006c4c:	2040      	movs	r0, #64	; 0x40
 8006c4e:	f7ff febf 	bl	80069d0 <SSD1306_Write_Command>
	SSD1306_Write_Command(0x81); //--set contrast control register
 8006c52:	2081      	movs	r0, #129	; 0x81
 8006c54:	f7ff febc 	bl	80069d0 <SSD1306_Write_Command>
	SSD1306_Write_Command(0xFF);
 8006c58:	20ff      	movs	r0, #255	; 0xff
 8006c5a:	f7ff feb9 	bl	80069d0 <SSD1306_Write_Command>
	SSD1306_Write_Command(0xA1); //--set segment re-map 0 to 127
 8006c5e:	20a1      	movs	r0, #161	; 0xa1
 8006c60:	f7ff feb6 	bl	80069d0 <SSD1306_Write_Command>
	SSD1306_Write_Command(0xA6); //--set normal display
 8006c64:	20a6      	movs	r0, #166	; 0xa6
 8006c66:	f7ff feb3 	bl	80069d0 <SSD1306_Write_Command>
	SSD1306_Write_Command(0xA8); //--set multiplex ratio(1 to 64)
 8006c6a:	20a8      	movs	r0, #168	; 0xa8
 8006c6c:	f7ff feb0 	bl	80069d0 <SSD1306_Write_Command>
	SSD1306_Write_Command(0x3F); //
 8006c70:	203f      	movs	r0, #63	; 0x3f
 8006c72:	f7ff fead 	bl	80069d0 <SSD1306_Write_Command>
	SSD1306_Write_Command(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8006c76:	20a4      	movs	r0, #164	; 0xa4
 8006c78:	f7ff feaa 	bl	80069d0 <SSD1306_Write_Command>
	SSD1306_Write_Command(0xD3); //-set display offset
 8006c7c:	20d3      	movs	r0, #211	; 0xd3
 8006c7e:	f7ff fea7 	bl	80069d0 <SSD1306_Write_Command>
	SSD1306_Write_Command(0x00); //-not offset
 8006c82:	2000      	movs	r0, #0
 8006c84:	f7ff fea4 	bl	80069d0 <SSD1306_Write_Command>
	SSD1306_Write_Command(0xD5); //--set display clock divide ratio/oscillator frequency
 8006c88:	20d5      	movs	r0, #213	; 0xd5
 8006c8a:	f7ff fea1 	bl	80069d0 <SSD1306_Write_Command>
	SSD1306_Write_Command(0xf0); //--set divide ratio 0xF0
 8006c8e:	20f0      	movs	r0, #240	; 0xf0
 8006c90:	f7ff fe9e 	bl	80069d0 <SSD1306_Write_Command>
	SSD1306_Write_Command(0xD9); //--set pre-charge period
 8006c94:	20d9      	movs	r0, #217	; 0xd9
 8006c96:	f7ff fe9b 	bl	80069d0 <SSD1306_Write_Command>
	SSD1306_Write_Command(0x22); //
 8006c9a:	2022      	movs	r0, #34	; 0x22
 8006c9c:	f7ff fe98 	bl	80069d0 <SSD1306_Write_Command>
	SSD1306_Write_Command(0xDA); //--set com pins hardware configuration
 8006ca0:	20da      	movs	r0, #218	; 0xda
 8006ca2:	f7ff fe95 	bl	80069d0 <SSD1306_Write_Command>
	SSD1306_Write_Command(0x12);
 8006ca6:	2012      	movs	r0, #18
 8006ca8:	f7ff fe92 	bl	80069d0 <SSD1306_Write_Command>
	SSD1306_Write_Command(0xDB); //--set vcomh
 8006cac:	20db      	movs	r0, #219	; 0xdb
 8006cae:	f7ff fe8f 	bl	80069d0 <SSD1306_Write_Command>
	SSD1306_Write_Command(0x20); //0x20,0.77xVcc,
 8006cb2:	2020      	movs	r0, #32
 8006cb4:	f7ff fe8c 	bl	80069d0 <SSD1306_Write_Command>
	SSD1306_Write_Command(0x8D); //--set DC-DC enable
 8006cb8:	208d      	movs	r0, #141	; 0x8d
 8006cba:	f7ff fe89 	bl	80069d0 <SSD1306_Write_Command>
	SSD1306_Write_Command(0x14); //
 8006cbe:	2014      	movs	r0, #20
 8006cc0:	f7ff fe86 	bl	80069d0 <SSD1306_Write_Command>
	SSD1306_Write_Command(0xAF); //--turn on SSD1306 panel
 8006cc4:	20af      	movs	r0, #175	; 0xaf
 8006cc6:	f7ff fe83 	bl	80069d0 <SSD1306_Write_Command>

	SDD1306_Clear_Screen();
 8006cca:	f7ff ff75 	bl	8006bb8 <SDD1306_Clear_Screen>
	
	return 1;
 8006cce:	2301      	movs	r3, #1
}
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	bd80      	pop	{r7, pc}

08006cd4 <DWT_Init>:
 * Initialization routine.
 * You might need to enable access to DWT registers on Cortex-M7
 *   DWT->LAR = 0xC5ACCE55
 */
void DWT_Init(void)
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	af00      	add	r7, sp, #0
    if (!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)) {
 8006cd8:	4b0c      	ldr	r3, [pc, #48]	; (8006d0c <DWT_Init+0x38>)
 8006cda:	68db      	ldr	r3, [r3, #12]
 8006cdc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d10e      	bne.n	8006d02 <DWT_Init+0x2e>
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8006ce4:	4b09      	ldr	r3, [pc, #36]	; (8006d0c <DWT_Init+0x38>)
 8006ce6:	68db      	ldr	r3, [r3, #12]
 8006ce8:	4a08      	ldr	r2, [pc, #32]	; (8006d0c <DWT_Init+0x38>)
 8006cea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006cee:	60d3      	str	r3, [r2, #12]
        DWT->CYCCNT = 0;
 8006cf0:	4b07      	ldr	r3, [pc, #28]	; (8006d10 <DWT_Init+0x3c>)
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	605a      	str	r2, [r3, #4]
        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8006cf6:	4b06      	ldr	r3, [pc, #24]	; (8006d10 <DWT_Init+0x3c>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	4a05      	ldr	r2, [pc, #20]	; (8006d10 <DWT_Init+0x3c>)
 8006cfc:	f043 0301 	orr.w	r3, r3, #1
 8006d00:	6013      	str	r3, [r2, #0]
    }
}
 8006d02:	bf00      	nop
 8006d04:	46bd      	mov	sp, r7
 8006d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0a:	4770      	bx	lr
 8006d0c:	e000edf0 	.word	0xe000edf0
 8006d10:	e0001000 	.word	0xe0001000

08006d14 <DWT_Delay>:
 * No need to check an overflow. Let it just tick :)
 *
 * @param uint32_t us  Number of microseconds to delay for
 */
void DWT_Delay(uint32_t us) // microseconds
{
 8006d14:	b480      	push	{r7}
 8006d16:	b085      	sub	sp, #20
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
    uint32_t startTick = DWT->CYCCNT,
 8006d1c:	4b0d      	ldr	r3, [pc, #52]	; (8006d54 <DWT_Delay+0x40>)
 8006d1e:	685b      	ldr	r3, [r3, #4]
 8006d20:	60fb      	str	r3, [r7, #12]
             delayTicks = us * (SystemCoreClock/1000000);
 8006d22:	4b0d      	ldr	r3, [pc, #52]	; (8006d58 <DWT_Delay+0x44>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	4a0d      	ldr	r2, [pc, #52]	; (8006d5c <DWT_Delay+0x48>)
 8006d28:	fba2 2303 	umull	r2, r3, r2, r3
 8006d2c:	0c9a      	lsrs	r2, r3, #18
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	fb02 f303 	mul.w	r3, r2, r3
 8006d34:	60bb      	str	r3, [r7, #8]

    while (DWT->CYCCNT - startTick < delayTicks);
 8006d36:	bf00      	nop
 8006d38:	4b06      	ldr	r3, [pc, #24]	; (8006d54 <DWT_Delay+0x40>)
 8006d3a:	685a      	ldr	r2, [r3, #4]
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	1ad3      	subs	r3, r2, r3
 8006d40:	68ba      	ldr	r2, [r7, #8]
 8006d42:	429a      	cmp	r2, r3
 8006d44:	d8f8      	bhi.n	8006d38 <DWT_Delay+0x24>
}
 8006d46:	bf00      	nop
 8006d48:	3714      	adds	r7, #20
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d50:	4770      	bx	lr
 8006d52:	bf00      	nop
 8006d54:	e0001000 	.word	0xe0001000
 8006d58:	20000000 	.word	0x20000000
 8006d5c:	431bde83 	.word	0x431bde83

08006d60 <logger_get_instance>:

logger* logger_instance = NULL;

const unsigned int LOGGER_MAX_LINES = 8;

logger* logger_get_instance(){
 8006d60:	b580      	push	{r7, lr}
 8006d62:	af00      	add	r7, sp, #0
	if( logger_instance == NULL ){
 8006d64:	4b0c      	ldr	r3, [pc, #48]	; (8006d98 <logger_get_instance+0x38>)
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d110      	bne.n	8006d8e <logger_get_instance+0x2e>
		logger_instance = (logger*) malloc(sizeof(logger));
 8006d6c:	2004      	movs	r0, #4
 8006d6e:	f004 f917 	bl	800afa0 <malloc>
 8006d72:	4603      	mov	r3, r0
 8006d74:	461a      	mov	r2, r3
 8006d76:	4b08      	ldr	r3, [pc, #32]	; (8006d98 <logger_get_instance+0x38>)
 8006d78:	601a      	str	r2, [r3, #0]
		logger_instance->line = 0;
 8006d7a:	4b07      	ldr	r3, [pc, #28]	; (8006d98 <logger_get_instance+0x38>)
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	701a      	strb	r2, [r3, #0]
 8006d82:	2200      	movs	r2, #0
 8006d84:	705a      	strb	r2, [r3, #1]
 8006d86:	2200      	movs	r2, #0
 8006d88:	709a      	strb	r2, [r3, #2]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	70da      	strb	r2, [r3, #3]
	}
	return logger_instance;
 8006d8e:	4b02      	ldr	r3, [pc, #8]	; (8006d98 <logger_get_instance+0x38>)
 8006d90:	681b      	ldr	r3, [r3, #0]
}
 8006d92:	4618      	mov	r0, r3
 8006d94:	bd80      	pop	{r7, pc}
 8006d96:	bf00      	nop
 8006d98:	20000b04 	.word	0x20000b04

08006d9c <logger_info>:
	unsigned int line = (++logger->line) % LOGGER_MAX_LINES;
	SSD1306_Goto(0, line);
	SSD1306_Write_String((uint8_t*) string_util_concat("[W] ", input));
}

void logger_info(logger* logger, char* input){
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b084      	sub	sp, #16
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
 8006da4:	6039      	str	r1, [r7, #0]
	if( logger == NULL ) return;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d024      	beq.n	8006df6 <logger_info+0x5a>
	if( logger->line == LOGGER_MAX_LINES-1) SDD1306_Clear_Screen();
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681a      	ldr	r2, [r3, #0]
 8006db0:	2308      	movs	r3, #8
 8006db2:	3b01      	subs	r3, #1
 8006db4:	429a      	cmp	r2, r3
 8006db6:	d101      	bne.n	8006dbc <logger_info+0x20>
 8006db8:	f7ff fefe 	bl	8006bb8 <SDD1306_Clear_Screen>
	unsigned int line = (++logger->line) % LOGGER_MAX_LINES;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	1c5a      	adds	r2, r3, #1
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	601a      	str	r2, [r3, #0]
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	2208      	movs	r2, #8
 8006dcc:	fbb3 f1f2 	udiv	r1, r3, r2
 8006dd0:	fb02 f201 	mul.w	r2, r2, r1
 8006dd4:	1a9b      	subs	r3, r3, r2
 8006dd6:	60fb      	str	r3, [r7, #12]
	SSD1306_Goto(0, line);
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	b2db      	uxtb	r3, r3
 8006ddc:	4619      	mov	r1, r3
 8006dde:	2000      	movs	r0, #0
 8006de0:	f7ff fe14 	bl	8006a0c <SSD1306_Goto>
	SSD1306_Write_String((uint8_t*) string_util_concat("[I] ", input));
 8006de4:	6839      	ldr	r1, [r7, #0]
 8006de6:	4806      	ldr	r0, [pc, #24]	; (8006e00 <logger_info+0x64>)
 8006de8:	f000 ff4c 	bl	8007c84 <string_util_concat>
 8006dec:	4603      	mov	r3, r0
 8006dee:	4618      	mov	r0, r3
 8006df0:	f7ff fea8 	bl	8006b44 <SSD1306_Write_String>
 8006df4:	e000      	b.n	8006df8 <logger_info+0x5c>
	if( logger == NULL ) return;
 8006df6:	bf00      	nop
}
 8006df8:	3710      	adds	r7, #16
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	bd80      	pop	{r7, pc}
 8006dfe:	bf00      	nop
 8006e00:	08010004 	.word	0x08010004

08006e04 <logger_clean>:
	unsigned int line = (++logger->line) % LOGGER_MAX_LINES;
	SSD1306_Goto(0, line);
	SSD1306_Write_String((uint8_t*) string_util_concat("[D] ", input));
}

void logger_clean(logger* logger){
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b082      	sub	sp, #8
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
	if( logger == NULL ) return;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d00c      	beq.n	8006e2c <logger_clean+0x28>
	logger_instance->line = 0;
 8006e12:	4b08      	ldr	r3, [pc, #32]	; (8006e34 <logger_clean+0x30>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	2200      	movs	r2, #0
 8006e18:	701a      	strb	r2, [r3, #0]
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	705a      	strb	r2, [r3, #1]
 8006e1e:	2200      	movs	r2, #0
 8006e20:	709a      	strb	r2, [r3, #2]
 8006e22:	2200      	movs	r2, #0
 8006e24:	70da      	strb	r2, [r3, #3]
	SDD1306_Clear_Screen();
 8006e26:	f7ff fec7 	bl	8006bb8 <SDD1306_Clear_Screen>
 8006e2a:	e000      	b.n	8006e2e <logger_clean+0x2a>
	if( logger == NULL ) return;
 8006e2c:	bf00      	nop
}
 8006e2e:	3708      	adds	r7, #8
 8006e30:	46bd      	mov	sp, r7
 8006e32:	bd80      	pop	{r7, pc}
 8006e34:	20000b04 	.word	0x20000b04

08006e38 <map_string_init>:
#include <util/map_string.h>

map_string* map_string_init(){
 8006e38:	b590      	push	{r4, r7, lr}
 8006e3a:	b083      	sub	sp, #12
 8006e3c:	af00      	add	r7, sp, #0
	map_string* result = (map_string*) malloc(sizeof(map_string));
 8006e3e:	2094      	movs	r0, #148	; 0x94
 8006e40:	f004 f8ae 	bl	800afa0 <malloc>
 8006e44:	4603      	mov	r3, r0
 8006e46:	607b      	str	r3, [r7, #4]
	for(register int i = 0; i < MAP_STRING_LENGTH; i++){
 8006e48:	2400      	movs	r4, #0
 8006e4a:	e011      	b.n	8006e70 <map_string_init+0x38>
		result->key[i][0] = '\0';
 8006e4c:	687a      	ldr	r2, [r7, #4]
 8006e4e:	4623      	mov	r3, r4
 8006e50:	005b      	lsls	r3, r3, #1
 8006e52:	4423      	add	r3, r4
 8006e54:	009b      	lsls	r3, r3, #2
 8006e56:	4413      	add	r3, r2
 8006e58:	2200      	movs	r2, #0
 8006e5a:	701a      	strb	r2, [r3, #0]
		result->value[i][0] = '\0';
 8006e5c:	687a      	ldr	r2, [r7, #4]
 8006e5e:	4623      	mov	r3, r4
 8006e60:	005b      	lsls	r3, r3, #1
 8006e62:	4423      	add	r3, r4
 8006e64:	009b      	lsls	r3, r3, #2
 8006e66:	4413      	add	r3, r2
 8006e68:	3348      	adds	r3, #72	; 0x48
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	701a      	strb	r2, [r3, #0]
	for(register int i = 0; i < MAP_STRING_LENGTH; i++){
 8006e6e:	3401      	adds	r4, #1
 8006e70:	2c05      	cmp	r4, #5
 8006e72:	ddeb      	ble.n	8006e4c <map_string_init+0x14>
	}
	result->index = 0;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2200      	movs	r2, #0
 8006e78:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
 8006e82:	2200      	movs	r2, #0
 8006e84:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
 8006e88:	2200      	movs	r2, #0
 8006e8a:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	return result;
 8006e8e:	687b      	ldr	r3, [r7, #4]
}
 8006e90:	4618      	mov	r0, r3
 8006e92:	370c      	adds	r7, #12
 8006e94:	46bd      	mov	sp, r7
 8006e96:	bd90      	pop	{r4, r7, pc}

08006e98 <map_string_destroy>:

void map_string_destroy(map_string* map_string){
 8006e98:	b590      	push	{r4, r7, lr}
 8006e9a:	b083      	sub	sp, #12
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
	if( map_string == NULL ) return;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d01b      	beq.n	8006ede <map_string_destroy+0x46>

	for(register int i = 0; i < MAP_STRING_LENGTH; i++){
 8006ea6:	2400      	movs	r4, #0
 8006ea8:	e011      	b.n	8006ece <map_string_destroy+0x36>
		map_string->key[i][0] = '\0';
 8006eaa:	687a      	ldr	r2, [r7, #4]
 8006eac:	4623      	mov	r3, r4
 8006eae:	005b      	lsls	r3, r3, #1
 8006eb0:	4423      	add	r3, r4
 8006eb2:	009b      	lsls	r3, r3, #2
 8006eb4:	4413      	add	r3, r2
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	701a      	strb	r2, [r3, #0]
		map_string->value[i][0] = '\0';
 8006eba:	687a      	ldr	r2, [r7, #4]
 8006ebc:	4623      	mov	r3, r4
 8006ebe:	005b      	lsls	r3, r3, #1
 8006ec0:	4423      	add	r3, r4
 8006ec2:	009b      	lsls	r3, r3, #2
 8006ec4:	4413      	add	r3, r2
 8006ec6:	3348      	adds	r3, #72	; 0x48
 8006ec8:	2200      	movs	r2, #0
 8006eca:	701a      	strb	r2, [r3, #0]
	for(register int i = 0; i < MAP_STRING_LENGTH; i++){
 8006ecc:	3401      	adds	r4, #1
 8006ece:	2c05      	cmp	r4, #5
 8006ed0:	ddeb      	ble.n	8006eaa <map_string_destroy+0x12>
	}

	free(map_string);
 8006ed2:	6878      	ldr	r0, [r7, #4]
 8006ed4:	f004 f86c 	bl	800afb0 <free>
	map_string = NULL;
 8006ed8:	2300      	movs	r3, #0
 8006eda:	607b      	str	r3, [r7, #4]
 8006edc:	e000      	b.n	8006ee0 <map_string_destroy+0x48>
	if( map_string == NULL ) return;
 8006ede:	bf00      	nop
}
 8006ee0:	370c      	adds	r7, #12
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	bd90      	pop	{r4, r7, pc}

08006ee6 <map_string_put>:

void map_string_put(map_string* map_string, char key[], char value[]){
 8006ee6:	b580      	push	{r7, lr}
 8006ee8:	b084      	sub	sp, #16
 8006eea:	af00      	add	r7, sp, #0
 8006eec:	60f8      	str	r0, [r7, #12]
 8006eee:	60b9      	str	r1, [r7, #8]
 8006ef0:	607a      	str	r2, [r7, #4]
	if( map_string == NULL || map_string->index == MAP_STRING_LENGTH || key == NULL) return;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d02a      	beq.n	8006f4e <map_string_put+0x68>
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006efe:	2b06      	cmp	r3, #6
 8006f00:	d025      	beq.n	8006f4e <map_string_put+0x68>
 8006f02:	68bb      	ldr	r3, [r7, #8]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d022      	beq.n	8006f4e <map_string_put+0x68>
	strcpy(map_string->key[map_string->index], key);
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8006f0e:	4613      	mov	r3, r2
 8006f10:	005b      	lsls	r3, r3, #1
 8006f12:	4413      	add	r3, r2
 8006f14:	009b      	lsls	r3, r3, #2
 8006f16:	68fa      	ldr	r2, [r7, #12]
 8006f18:	4413      	add	r3, r2
 8006f1a:	68b9      	ldr	r1, [r7, #8]
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	f004 fad8 	bl	800b4d2 <strcpy>
	strcpy(map_string->value[map_string->index], value);
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8006f28:	4613      	mov	r3, r2
 8006f2a:	005b      	lsls	r3, r3, #1
 8006f2c:	4413      	add	r3, r2
 8006f2e:	009b      	lsls	r3, r3, #2
 8006f30:	3348      	adds	r3, #72	; 0x48
 8006f32:	68fa      	ldr	r2, [r7, #12]
 8006f34:	4413      	add	r3, r2
 8006f36:	6879      	ldr	r1, [r7, #4]
 8006f38:	4618      	mov	r0, r3
 8006f3a:	f004 faca 	bl	800b4d2 <strcpy>
	map_string->index++;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f44:	1c5a      	adds	r2, r3, #1
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8006f4c:	e000      	b.n	8006f50 <map_string_put+0x6a>
	if( map_string == NULL || map_string->index == MAP_STRING_LENGTH || key == NULL) return;
 8006f4e:	bf00      	nop
}
 8006f50:	3710      	adds	r7, #16
 8006f52:	46bd      	mov	sp, r7
 8006f54:	bd80      	pop	{r7, pc}
	...

08006f58 <map_string_to_char>:
			break;
		}
	}
}

char* map_string_to_char(map_string* map_string){
 8006f58:	b5b0      	push	{r4, r5, r7, lr}
 8006f5a:	b088      	sub	sp, #32
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
	if( map_string == NULL ) return NULL;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d101      	bne.n	8006f6a <map_string_to_char+0x12>
 8006f66:	2300      	movs	r3, #0
 8006f68:	e134      	b.n	80071d4 <map_string_to_char+0x27c>
	unsigned int number_of_entries = map_string_number_of_entries(map_string);
 8006f6a:	6878      	ldr	r0, [r7, #4]
 8006f6c:	f000 f975 	bl	800725a <map_string_number_of_entries>
 8006f70:	61f8      	str	r0, [r7, #28]
	unsigned int length_separtors = number_of_entries * 5 + (number_of_entries-1) + 2; // Para as aspas, virgulas, dois pontos, e chaves
 8006f72:	69fa      	ldr	r2, [r7, #28]
 8006f74:	4613      	mov	r3, r2
 8006f76:	005b      	lsls	r3, r3, #1
 8006f78:	4413      	add	r3, r2
 8006f7a:	005b      	lsls	r3, r3, #1
 8006f7c:	3301      	adds	r3, #1
 8006f7e:	61bb      	str	r3, [r7, #24]
	unsigned int number_of_chars = map_string_number_of_chars(map_string);
 8006f80:	6878      	ldr	r0, [r7, #4]
 8006f82:	f000 f937 	bl	80071f4 <map_string_number_of_chars>
 8006f86:	6178      	str	r0, [r7, #20]
	char* result = (char*) malloc((length_separtors+number_of_chars+1) * sizeof(char));
 8006f88:	69ba      	ldr	r2, [r7, #24]
 8006f8a:	697b      	ldr	r3, [r7, #20]
 8006f8c:	4413      	add	r3, r2
 8006f8e:	3301      	adds	r3, #1
 8006f90:	4618      	mov	r0, r3
 8006f92:	f004 f805 	bl	800afa0 <malloc>
 8006f96:	4603      	mov	r3, r0
 8006f98:	613b      	str	r3, [r7, #16]

	strcpy(result, "{");
 8006f9a:	693b      	ldr	r3, [r7, #16]
 8006f9c:	498f      	ldr	r1, [pc, #572]	; (80071dc <map_string_to_char+0x284>)
 8006f9e:	461a      	mov	r2, r3
 8006fa0:	460b      	mov	r3, r1
 8006fa2:	881b      	ldrh	r3, [r3, #0]
 8006fa4:	8013      	strh	r3, [r2, #0]
	if( map_string->index != 0 ){
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	f000 8104 	beq.w	80071ba <map_string_to_char+0x262>
		for(register unsigned int i = 0; i < map_string->index-1; i++){
 8006fb2:	2400      	movs	r4, #0
 8006fb4:	e07b      	b.n	80070ae <map_string_to_char+0x156>
			strcat(result, "\""); strcat(result, map_string->key[i]); strcat(result, "\":");
 8006fb6:	6938      	ldr	r0, [r7, #16]
 8006fb8:	f7f9 f914 	bl	80001e4 <strlen>
 8006fbc:	4603      	mov	r3, r0
 8006fbe:	461a      	mov	r2, r3
 8006fc0:	693b      	ldr	r3, [r7, #16]
 8006fc2:	4413      	add	r3, r2
 8006fc4:	4986      	ldr	r1, [pc, #536]	; (80071e0 <map_string_to_char+0x288>)
 8006fc6:	461a      	mov	r2, r3
 8006fc8:	460b      	mov	r3, r1
 8006fca:	881b      	ldrh	r3, [r3, #0]
 8006fcc:	8013      	strh	r3, [r2, #0]
 8006fce:	4623      	mov	r3, r4
 8006fd0:	005b      	lsls	r3, r3, #1
 8006fd2:	4423      	add	r3, r4
 8006fd4:	009b      	lsls	r3, r3, #2
 8006fd6:	687a      	ldr	r2, [r7, #4]
 8006fd8:	4413      	add	r3, r2
 8006fda:	4619      	mov	r1, r3
 8006fdc:	6938      	ldr	r0, [r7, #16]
 8006fde:	f004 fa69 	bl	800b4b4 <strcat>
 8006fe2:	6938      	ldr	r0, [r7, #16]
 8006fe4:	f7f9 f8fe 	bl	80001e4 <strlen>
 8006fe8:	4603      	mov	r3, r0
 8006fea:	461a      	mov	r2, r3
 8006fec:	693b      	ldr	r3, [r7, #16]
 8006fee:	4413      	add	r3, r2
 8006ff0:	4a7c      	ldr	r2, [pc, #496]	; (80071e4 <map_string_to_char+0x28c>)
 8006ff2:	8811      	ldrh	r1, [r2, #0]
 8006ff4:	7892      	ldrb	r2, [r2, #2]
 8006ff6:	8019      	strh	r1, [r3, #0]
 8006ff8:	709a      	strb	r2, [r3, #2]
			int is_number = atof(map_string->value[i]) != 0.0 ? 1 : 0;
 8006ffa:	4623      	mov	r3, r4
 8006ffc:	005b      	lsls	r3, r3, #1
 8006ffe:	4423      	add	r3, r4
 8007000:	009b      	lsls	r3, r3, #2
 8007002:	3348      	adds	r3, #72	; 0x48
 8007004:	687a      	ldr	r2, [r7, #4]
 8007006:	4413      	add	r3, r2
 8007008:	4618      	mov	r0, r3
 800700a:	f003 ff5b 	bl	800aec4 <atof>
 800700e:	ec51 0b10 	vmov	r0, r1, d0
 8007012:	2301      	movs	r3, #1
 8007014:	461d      	mov	r5, r3
 8007016:	f04f 0200 	mov.w	r2, #0
 800701a:	f04f 0300 	mov.w	r3, #0
 800701e:	f7f9 fd63 	bl	8000ae8 <__aeabi_dcmpeq>
 8007022:	4603      	mov	r3, r0
 8007024:	2b00      	cmp	r3, #0
 8007026:	d001      	beq.n	800702c <map_string_to_char+0xd4>
 8007028:	2300      	movs	r3, #0
 800702a:	461d      	mov	r5, r3
 800702c:	b2eb      	uxtb	r3, r5
 800702e:	60bb      	str	r3, [r7, #8]
			if( is_number ){
 8007030:	68bb      	ldr	r3, [r7, #8]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d017      	beq.n	8007066 <map_string_to_char+0x10e>
				strcat(result, map_string->value[i]); strcat(result, ",");
 8007036:	4623      	mov	r3, r4
 8007038:	005b      	lsls	r3, r3, #1
 800703a:	4423      	add	r3, r4
 800703c:	009b      	lsls	r3, r3, #2
 800703e:	3348      	adds	r3, #72	; 0x48
 8007040:	687a      	ldr	r2, [r7, #4]
 8007042:	4413      	add	r3, r2
 8007044:	4619      	mov	r1, r3
 8007046:	6938      	ldr	r0, [r7, #16]
 8007048:	f004 fa34 	bl	800b4b4 <strcat>
 800704c:	6938      	ldr	r0, [r7, #16]
 800704e:	f7f9 f8c9 	bl	80001e4 <strlen>
 8007052:	4603      	mov	r3, r0
 8007054:	461a      	mov	r2, r3
 8007056:	693b      	ldr	r3, [r7, #16]
 8007058:	4413      	add	r3, r2
 800705a:	4963      	ldr	r1, [pc, #396]	; (80071e8 <map_string_to_char+0x290>)
 800705c:	461a      	mov	r2, r3
 800705e:	460b      	mov	r3, r1
 8007060:	881b      	ldrh	r3, [r3, #0]
 8007062:	8013      	strh	r3, [r2, #0]
 8007064:	e022      	b.n	80070ac <map_string_to_char+0x154>
			} else {
				strcat(result, "\""); strcat(result, map_string->value[i]); strcat(result, "\",");
 8007066:	6938      	ldr	r0, [r7, #16]
 8007068:	f7f9 f8bc 	bl	80001e4 <strlen>
 800706c:	4603      	mov	r3, r0
 800706e:	461a      	mov	r2, r3
 8007070:	693b      	ldr	r3, [r7, #16]
 8007072:	4413      	add	r3, r2
 8007074:	495a      	ldr	r1, [pc, #360]	; (80071e0 <map_string_to_char+0x288>)
 8007076:	461a      	mov	r2, r3
 8007078:	460b      	mov	r3, r1
 800707a:	881b      	ldrh	r3, [r3, #0]
 800707c:	8013      	strh	r3, [r2, #0]
 800707e:	4623      	mov	r3, r4
 8007080:	005b      	lsls	r3, r3, #1
 8007082:	4423      	add	r3, r4
 8007084:	009b      	lsls	r3, r3, #2
 8007086:	3348      	adds	r3, #72	; 0x48
 8007088:	687a      	ldr	r2, [r7, #4]
 800708a:	4413      	add	r3, r2
 800708c:	4619      	mov	r1, r3
 800708e:	6938      	ldr	r0, [r7, #16]
 8007090:	f004 fa10 	bl	800b4b4 <strcat>
 8007094:	6938      	ldr	r0, [r7, #16]
 8007096:	f7f9 f8a5 	bl	80001e4 <strlen>
 800709a:	4603      	mov	r3, r0
 800709c:	461a      	mov	r2, r3
 800709e:	693b      	ldr	r3, [r7, #16]
 80070a0:	4413      	add	r3, r2
 80070a2:	4a52      	ldr	r2, [pc, #328]	; (80071ec <map_string_to_char+0x294>)
 80070a4:	8811      	ldrh	r1, [r2, #0]
 80070a6:	7892      	ldrb	r2, [r2, #2]
 80070a8:	8019      	strh	r1, [r3, #0]
 80070aa:	709a      	strb	r2, [r3, #2]
		for(register unsigned int i = 0; i < map_string->index-1; i++){
 80070ac:	3401      	adds	r4, #1
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070b4:	3b01      	subs	r3, #1
 80070b6:	429c      	cmp	r4, r3
 80070b8:	f4ff af7d 	bcc.w	8006fb6 <map_string_to_char+0x5e>
			}
		}

		strcat(result, "\""); strcat(result, map_string->key[map_string->index-1]); strcat(result, "\":");
 80070bc:	6938      	ldr	r0, [r7, #16]
 80070be:	f7f9 f891 	bl	80001e4 <strlen>
 80070c2:	4603      	mov	r3, r0
 80070c4:	461a      	mov	r2, r3
 80070c6:	693b      	ldr	r3, [r7, #16]
 80070c8:	4413      	add	r3, r2
 80070ca:	4945      	ldr	r1, [pc, #276]	; (80071e0 <map_string_to_char+0x288>)
 80070cc:	461a      	mov	r2, r3
 80070ce:	460b      	mov	r3, r1
 80070d0:	881b      	ldrh	r3, [r3, #0]
 80070d2:	8013      	strh	r3, [r2, #0]
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070da:	1e5a      	subs	r2, r3, #1
 80070dc:	4613      	mov	r3, r2
 80070de:	005b      	lsls	r3, r3, #1
 80070e0:	4413      	add	r3, r2
 80070e2:	009b      	lsls	r3, r3, #2
 80070e4:	687a      	ldr	r2, [r7, #4]
 80070e6:	4413      	add	r3, r2
 80070e8:	4619      	mov	r1, r3
 80070ea:	6938      	ldr	r0, [r7, #16]
 80070ec:	f004 f9e2 	bl	800b4b4 <strcat>
 80070f0:	6938      	ldr	r0, [r7, #16]
 80070f2:	f7f9 f877 	bl	80001e4 <strlen>
 80070f6:	4603      	mov	r3, r0
 80070f8:	461a      	mov	r2, r3
 80070fa:	693b      	ldr	r3, [r7, #16]
 80070fc:	4413      	add	r3, r2
 80070fe:	4a39      	ldr	r2, [pc, #228]	; (80071e4 <map_string_to_char+0x28c>)
 8007100:	8811      	ldrh	r1, [r2, #0]
 8007102:	7892      	ldrb	r2, [r2, #2]
 8007104:	8019      	strh	r1, [r3, #0]
 8007106:	709a      	strb	r2, [r3, #2]
		int is_number = atof(map_string->value[map_string->index-1]) != 0.0 ? 1 : 0;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800710e:	1e5a      	subs	r2, r3, #1
 8007110:	4613      	mov	r3, r2
 8007112:	005b      	lsls	r3, r3, #1
 8007114:	4413      	add	r3, r2
 8007116:	009b      	lsls	r3, r3, #2
 8007118:	3348      	adds	r3, #72	; 0x48
 800711a:	687a      	ldr	r2, [r7, #4]
 800711c:	4413      	add	r3, r2
 800711e:	4618      	mov	r0, r3
 8007120:	f003 fed0 	bl	800aec4 <atof>
 8007124:	ec51 0b10 	vmov	r0, r1, d0
 8007128:	2301      	movs	r3, #1
 800712a:	461c      	mov	r4, r3
 800712c:	f04f 0200 	mov.w	r2, #0
 8007130:	f04f 0300 	mov.w	r3, #0
 8007134:	f7f9 fcd8 	bl	8000ae8 <__aeabi_dcmpeq>
 8007138:	4603      	mov	r3, r0
 800713a:	2b00      	cmp	r3, #0
 800713c:	d001      	beq.n	8007142 <map_string_to_char+0x1ea>
 800713e:	2300      	movs	r3, #0
 8007140:	461c      	mov	r4, r3
 8007142:	b2e3      	uxtb	r3, r4
 8007144:	60fb      	str	r3, [r7, #12]
		if( is_number ){
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d00f      	beq.n	800716c <map_string_to_char+0x214>
			strcat(result, map_string->value[map_string->index-1]);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007152:	1e5a      	subs	r2, r3, #1
 8007154:	4613      	mov	r3, r2
 8007156:	005b      	lsls	r3, r3, #1
 8007158:	4413      	add	r3, r2
 800715a:	009b      	lsls	r3, r3, #2
 800715c:	3348      	adds	r3, #72	; 0x48
 800715e:	687a      	ldr	r2, [r7, #4]
 8007160:	4413      	add	r3, r2
 8007162:	4619      	mov	r1, r3
 8007164:	6938      	ldr	r0, [r7, #16]
 8007166:	f004 f9a5 	bl	800b4b4 <strcat>
 800716a:	e026      	b.n	80071ba <map_string_to_char+0x262>
		} else {
			strcat(result, "\""); strcat(result, map_string->value[map_string->index-1]); strcat(result, "\"");
 800716c:	6938      	ldr	r0, [r7, #16]
 800716e:	f7f9 f839 	bl	80001e4 <strlen>
 8007172:	4603      	mov	r3, r0
 8007174:	461a      	mov	r2, r3
 8007176:	693b      	ldr	r3, [r7, #16]
 8007178:	4413      	add	r3, r2
 800717a:	4919      	ldr	r1, [pc, #100]	; (80071e0 <map_string_to_char+0x288>)
 800717c:	461a      	mov	r2, r3
 800717e:	460b      	mov	r3, r1
 8007180:	881b      	ldrh	r3, [r3, #0]
 8007182:	8013      	strh	r3, [r2, #0]
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800718a:	1e5a      	subs	r2, r3, #1
 800718c:	4613      	mov	r3, r2
 800718e:	005b      	lsls	r3, r3, #1
 8007190:	4413      	add	r3, r2
 8007192:	009b      	lsls	r3, r3, #2
 8007194:	3348      	adds	r3, #72	; 0x48
 8007196:	687a      	ldr	r2, [r7, #4]
 8007198:	4413      	add	r3, r2
 800719a:	4619      	mov	r1, r3
 800719c:	6938      	ldr	r0, [r7, #16]
 800719e:	f004 f989 	bl	800b4b4 <strcat>
 80071a2:	6938      	ldr	r0, [r7, #16]
 80071a4:	f7f9 f81e 	bl	80001e4 <strlen>
 80071a8:	4603      	mov	r3, r0
 80071aa:	461a      	mov	r2, r3
 80071ac:	693b      	ldr	r3, [r7, #16]
 80071ae:	4413      	add	r3, r2
 80071b0:	490b      	ldr	r1, [pc, #44]	; (80071e0 <map_string_to_char+0x288>)
 80071b2:	461a      	mov	r2, r3
 80071b4:	460b      	mov	r3, r1
 80071b6:	881b      	ldrh	r3, [r3, #0]
 80071b8:	8013      	strh	r3, [r2, #0]
		}
	}
	strcat(result, "}");
 80071ba:	6938      	ldr	r0, [r7, #16]
 80071bc:	f7f9 f812 	bl	80001e4 <strlen>
 80071c0:	4603      	mov	r3, r0
 80071c2:	461a      	mov	r2, r3
 80071c4:	693b      	ldr	r3, [r7, #16]
 80071c6:	4413      	add	r3, r2
 80071c8:	4909      	ldr	r1, [pc, #36]	; (80071f0 <map_string_to_char+0x298>)
 80071ca:	461a      	mov	r2, r3
 80071cc:	460b      	mov	r3, r1
 80071ce:	881b      	ldrh	r3, [r3, #0]
 80071d0:	8013      	strh	r3, [r2, #0]
	return result;
 80071d2:	693b      	ldr	r3, [r7, #16]
}
 80071d4:	4618      	mov	r0, r3
 80071d6:	3720      	adds	r7, #32
 80071d8:	46bd      	mov	sp, r7
 80071da:	bdb0      	pop	{r4, r5, r7, pc}
 80071dc:	08010014 	.word	0x08010014
 80071e0:	08010018 	.word	0x08010018
 80071e4:	0801001c 	.word	0x0801001c
 80071e8:	08010020 	.word	0x08010020
 80071ec:	08010024 	.word	0x08010024
 80071f0:	08010028 	.word	0x08010028

080071f4 <map_string_number_of_chars>:


unsigned int map_string_number_of_chars(map_string* map_string){
 80071f4:	b590      	push	{r4, r7, lr}
 80071f6:	b085      	sub	sp, #20
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
	if( map_string == NULL ) return 0;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d101      	bne.n	8007206 <map_string_number_of_chars+0x12>
 8007202:	2300      	movs	r3, #0
 8007204:	e025      	b.n	8007252 <map_string_number_of_chars+0x5e>

	unsigned int number_of_chars = 0;
 8007206:	2300      	movs	r3, #0
 8007208:	60fb      	str	r3, [r7, #12]
	for(register unsigned int i = 0; i < map_string->index; i++){
 800720a:	2400      	movs	r4, #0
 800720c:	e01b      	b.n	8007246 <map_string_number_of_chars+0x52>
		number_of_chars += strlen(map_string->key[i]);
 800720e:	4623      	mov	r3, r4
 8007210:	005b      	lsls	r3, r3, #1
 8007212:	4423      	add	r3, r4
 8007214:	009b      	lsls	r3, r3, #2
 8007216:	687a      	ldr	r2, [r7, #4]
 8007218:	4413      	add	r3, r2
 800721a:	4618      	mov	r0, r3
 800721c:	f7f8 ffe2 	bl	80001e4 <strlen>
 8007220:	4602      	mov	r2, r0
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	4413      	add	r3, r2
 8007226:	60fb      	str	r3, [r7, #12]
		number_of_chars += strlen(map_string->value[i]);
 8007228:	4623      	mov	r3, r4
 800722a:	005b      	lsls	r3, r3, #1
 800722c:	4423      	add	r3, r4
 800722e:	009b      	lsls	r3, r3, #2
 8007230:	3348      	adds	r3, #72	; 0x48
 8007232:	687a      	ldr	r2, [r7, #4]
 8007234:	4413      	add	r3, r2
 8007236:	4618      	mov	r0, r3
 8007238:	f7f8 ffd4 	bl	80001e4 <strlen>
 800723c:	4602      	mov	r2, r0
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	4413      	add	r3, r2
 8007242:	60fb      	str	r3, [r7, #12]
	for(register unsigned int i = 0; i < map_string->index; i++){
 8007244:	3401      	adds	r4, #1
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800724c:	429c      	cmp	r4, r3
 800724e:	d3de      	bcc.n	800720e <map_string_number_of_chars+0x1a>
	}

	return number_of_chars;
 8007250:	68fb      	ldr	r3, [r7, #12]
}
 8007252:	4618      	mov	r0, r3
 8007254:	3714      	adds	r7, #20
 8007256:	46bd      	mov	sp, r7
 8007258:	bd90      	pop	{r4, r7, pc}

0800725a <map_string_number_of_entries>:

unsigned int map_string_number_of_entries(map_string* map_string){
 800725a:	b480      	push	{r7}
 800725c:	b083      	sub	sp, #12
 800725e:	af00      	add	r7, sp, #0
 8007260:	6078      	str	r0, [r7, #4]
	if( map_string == NULL ) return 0;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d101      	bne.n	800726c <map_string_number_of_entries+0x12>
 8007268:	2300      	movs	r3, #0
 800726a:	e002      	b.n	8007272 <map_string_number_of_entries+0x18>
	return map_string->index;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
}
 8007272:	4618      	mov	r0, r3
 8007274:	370c      	adds	r7, #12
 8007276:	46bd      	mov	sp, r7
 8007278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727c:	4770      	bx	lr
	...

08007280 <message_builder_get_instance>:
#include <util/message_builder.h>

message_builder* message_builder_instance = NULL;

message_builder* message_builder_get_instance(){
 8007280:	b598      	push	{r3, r4, r7, lr}
 8007282:	af00      	add	r7, sp, #0
	if( message_builder_instance == NULL ){
 8007284:	4b28      	ldr	r3, [pc, #160]	; (8007328 <message_builder_get_instance+0xa8>)
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d148      	bne.n	800731e <message_builder_get_instance+0x9e>
		message_builder_instance = (message_builder*) malloc(sizeof(message_builder));
 800728c:	201c      	movs	r0, #28
 800728e:	f003 fe87 	bl	800afa0 <malloc>
 8007292:	4603      	mov	r3, r0
 8007294:	461a      	mov	r2, r3
 8007296:	4b24      	ldr	r3, [pc, #144]	; (8007328 <message_builder_get_instance+0xa8>)
 8007298:	601a      	str	r2, [r3, #0]
		message_builder_instance->reply_host = NULL;
 800729a:	4b23      	ldr	r3, [pc, #140]	; (8007328 <message_builder_get_instance+0xa8>)
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	2200      	movs	r2, #0
 80072a0:	701a      	strb	r2, [r3, #0]
 80072a2:	2200      	movs	r2, #0
 80072a4:	705a      	strb	r2, [r3, #1]
 80072a6:	2200      	movs	r2, #0
 80072a8:	709a      	strb	r2, [r3, #2]
 80072aa:	2200      	movs	r2, #0
 80072ac:	70da      	strb	r2, [r3, #3]
		message_builder_instance->reply_port = NULL;
 80072ae:	4b1e      	ldr	r3, [pc, #120]	; (8007328 <message_builder_get_instance+0xa8>)
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	2200      	movs	r2, #0
 80072b4:	711a      	strb	r2, [r3, #4]
 80072b6:	2200      	movs	r2, #0
 80072b8:	715a      	strb	r2, [r3, #5]
 80072ba:	2200      	movs	r2, #0
 80072bc:	719a      	strb	r2, [r3, #6]
 80072be:	2200      	movs	r2, #0
 80072c0:	71da      	strb	r2, [r3, #7]
		message_builder_instance->reply_channel = NULL;
 80072c2:	4b19      	ldr	r3, [pc, #100]	; (8007328 <message_builder_get_instance+0xa8>)
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	2200      	movs	r2, #0
 80072c8:	721a      	strb	r2, [r3, #8]
 80072ca:	2200      	movs	r2, #0
 80072cc:	725a      	strb	r2, [r3, #9]
 80072ce:	2200      	movs	r2, #0
 80072d0:	729a      	strb	r2, [r3, #10]
 80072d2:	2200      	movs	r2, #0
 80072d4:	72da      	strb	r2, [r3, #11]
		message_builder_instance->method = NULL;
 80072d6:	4b14      	ldr	r3, [pc, #80]	; (8007328 <message_builder_get_instance+0xa8>)
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	2200      	movs	r2, #0
 80072dc:	731a      	strb	r2, [r3, #12]
 80072de:	2200      	movs	r2, #0
 80072e0:	735a      	strb	r2, [r3, #13]
 80072e2:	2200      	movs	r2, #0
 80072e4:	739a      	strb	r2, [r3, #14]
 80072e6:	2200      	movs	r2, #0
 80072e8:	73da      	strb	r2, [r3, #15]
		message_builder_instance->uri = NULL;
 80072ea:	4b0f      	ldr	r3, [pc, #60]	; (8007328 <message_builder_get_instance+0xa8>)
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	2200      	movs	r2, #0
 80072f0:	741a      	strb	r2, [r3, #16]
 80072f2:	2200      	movs	r2, #0
 80072f4:	745a      	strb	r2, [r3, #17]
 80072f6:	2200      	movs	r2, #0
 80072f8:	749a      	strb	r2, [r3, #18]
 80072fa:	2200      	movs	r2, #0
 80072fc:	74da      	strb	r2, [r3, #19]
		message_builder_instance->header = NULL;
 80072fe:	4b0a      	ldr	r3, [pc, #40]	; (8007328 <message_builder_get_instance+0xa8>)
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	2200      	movs	r2, #0
 8007304:	751a      	strb	r2, [r3, #20]
 8007306:	2200      	movs	r2, #0
 8007308:	755a      	strb	r2, [r3, #21]
 800730a:	2200      	movs	r2, #0
 800730c:	759a      	strb	r2, [r3, #22]
 800730e:	2200      	movs	r2, #0
 8007310:	75da      	strb	r2, [r3, #23]
		message_builder_instance->body = map_string_init();
 8007312:	4b05      	ldr	r3, [pc, #20]	; (8007328 <message_builder_get_instance+0xa8>)
 8007314:	681c      	ldr	r4, [r3, #0]
 8007316:	f7ff fd8f 	bl	8006e38 <map_string_init>
 800731a:	4603      	mov	r3, r0
 800731c:	61a3      	str	r3, [r4, #24]
	}
	return message_builder_instance;
 800731e:	4b02      	ldr	r3, [pc, #8]	; (8007328 <message_builder_get_instance+0xa8>)
 8007320:	681b      	ldr	r3, [r3, #0]
}
 8007322:	4618      	mov	r0, r3
 8007324:	bd98      	pop	{r3, r4, r7, pc}
 8007326:	bf00      	nop
 8007328:	20000b08 	.word	0x20000b08

0800732c <message_builder_set_reply_host>:

message_builder* message_builder_set_reply_host(message_builder* message_builder, char* reply_host){
 800732c:	b480      	push	{r7}
 800732e:	b083      	sub	sp, #12
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
 8007334:	6039      	str	r1, [r7, #0]
	if( message_builder == NULL ) return NULL;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d101      	bne.n	8007340 <message_builder_set_reply_host+0x14>
 800733c:	2300      	movs	r3, #0
 800733e:	e003      	b.n	8007348 <message_builder_set_reply_host+0x1c>
	message_builder->reply_host = reply_host;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	683a      	ldr	r2, [r7, #0]
 8007344:	601a      	str	r2, [r3, #0]
	return message_builder;
 8007346:	687b      	ldr	r3, [r7, #4]
}
 8007348:	4618      	mov	r0, r3
 800734a:	370c      	adds	r7, #12
 800734c:	46bd      	mov	sp, r7
 800734e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007352:	4770      	bx	lr

08007354 <message_builder_set_reply_port>:

message_builder* message_builder_set_reply_port(message_builder* message_builder, char* reply_port){
 8007354:	b480      	push	{r7}
 8007356:	b083      	sub	sp, #12
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
 800735c:	6039      	str	r1, [r7, #0]
	if( message_builder == NULL ) return NULL;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d101      	bne.n	8007368 <message_builder_set_reply_port+0x14>
 8007364:	2300      	movs	r3, #0
 8007366:	e003      	b.n	8007370 <message_builder_set_reply_port+0x1c>
	message_builder->reply_port = reply_port;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	683a      	ldr	r2, [r7, #0]
 800736c:	605a      	str	r2, [r3, #4]
	return message_builder;
 800736e:	687b      	ldr	r3, [r7, #4]
}
 8007370:	4618      	mov	r0, r3
 8007372:	370c      	adds	r7, #12
 8007374:	46bd      	mov	sp, r7
 8007376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737a:	4770      	bx	lr

0800737c <message_builder_set_reply_channel>:

message_builder* message_builder_set_reply_channel(message_builder* message_builder, char* reply_channel){
 800737c:	b480      	push	{r7}
 800737e:	b083      	sub	sp, #12
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
 8007384:	6039      	str	r1, [r7, #0]
	if( message_builder == NULL ) return NULL;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d101      	bne.n	8007390 <message_builder_set_reply_channel+0x14>
 800738c:	2300      	movs	r3, #0
 800738e:	e003      	b.n	8007398 <message_builder_set_reply_channel+0x1c>
	message_builder->reply_channel = reply_channel;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	683a      	ldr	r2, [r7, #0]
 8007394:	609a      	str	r2, [r3, #8]
	return message_builder;
 8007396:	687b      	ldr	r3, [r7, #4]
}
 8007398:	4618      	mov	r0, r3
 800739a:	370c      	adds	r7, #12
 800739c:	46bd      	mov	sp, r7
 800739e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a2:	4770      	bx	lr

080073a4 <message_builder_set_method>:

message_builder* message_builder_set_method(message_builder* message_builder, char* method){
 80073a4:	b480      	push	{r7}
 80073a6:	b083      	sub	sp, #12
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
 80073ac:	6039      	str	r1, [r7, #0]
	if( message_builder == NULL ) return NULL;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d101      	bne.n	80073b8 <message_builder_set_method+0x14>
 80073b4:	2300      	movs	r3, #0
 80073b6:	e003      	b.n	80073c0 <message_builder_set_method+0x1c>
	message_builder->method = method;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	683a      	ldr	r2, [r7, #0]
 80073bc:	60da      	str	r2, [r3, #12]
	return message_builder;
 80073be:	687b      	ldr	r3, [r7, #4]
}
 80073c0:	4618      	mov	r0, r3
 80073c2:	370c      	adds	r7, #12
 80073c4:	46bd      	mov	sp, r7
 80073c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ca:	4770      	bx	lr

080073cc <message_builder_set_uri>:

message_builder* message_builder_set_uri(message_builder* message_builder, char* uri){
 80073cc:	b480      	push	{r7}
 80073ce:	b083      	sub	sp, #12
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
 80073d4:	6039      	str	r1, [r7, #0]
	if( message_builder == NULL ) return NULL;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d101      	bne.n	80073e0 <message_builder_set_uri+0x14>
 80073dc:	2300      	movs	r3, #0
 80073de:	e003      	b.n	80073e8 <message_builder_set_uri+0x1c>
	message_builder->uri = uri;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	683a      	ldr	r2, [r7, #0]
 80073e4:	611a      	str	r2, [r3, #16]
	return message_builder;
 80073e6:	687b      	ldr	r3, [r7, #4]
}
 80073e8:	4618      	mov	r0, r3
 80073ea:	370c      	adds	r7, #12
 80073ec:	46bd      	mov	sp, r7
 80073ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f2:	4770      	bx	lr

080073f4 <message_builder_put_body>:
	if( message_builder == NULL ) return NULL;
	map_string_put(message_builder->header, key, value);
	return message_builder;
}

message_builder* message_builder_put_body(message_builder* message_builder, char* key, char* value){
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b084      	sub	sp, #16
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	60f8      	str	r0, [r7, #12]
 80073fc:	60b9      	str	r1, [r7, #8]
 80073fe:	607a      	str	r2, [r7, #4]
	if( message_builder == NULL ) return NULL;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d101      	bne.n	800740a <message_builder_put_body+0x16>
 8007406:	2300      	movs	r3, #0
 8007408:	e007      	b.n	800741a <message_builder_put_body+0x26>
	map_string_put(message_builder->body, key, value);
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	699b      	ldr	r3, [r3, #24]
 800740e:	687a      	ldr	r2, [r7, #4]
 8007410:	68b9      	ldr	r1, [r7, #8]
 8007412:	4618      	mov	r0, r3
 8007414:	f7ff fd67 	bl	8006ee6 <map_string_put>
	return message_builder;
 8007418:	68fb      	ldr	r3, [r7, #12]
}
 800741a:	4618      	mov	r0, r3
 800741c:	3710      	adds	r7, #16
 800741e:	46bd      	mov	sp, r7
 8007420:	bd80      	pop	{r7, pc}
	...

08007424 <message_builder_build>:

char* message_builder_build(message_builder* message_builder){
 8007424:	b5b0      	push	{r4, r5, r7, lr}
 8007426:	b084      	sub	sp, #16
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
	if( message_builder == NULL ) return NULL;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d101      	bne.n	8007436 <message_builder_build+0x12>
 8007432:	2300      	movs	r3, #0
 8007434:	e10b      	b.n	800764e <message_builder_build+0x22a>

	char* message = (char*) malloc(256*sizeof(char)); message[0] = '\0';
 8007436:	f44f 7080 	mov.w	r0, #256	; 0x100
 800743a:	f003 fdb1 	bl	800afa0 <malloc>
 800743e:	4603      	mov	r3, r0
 8007440:	60fb      	str	r3, [r7, #12]
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	2200      	movs	r2, #0
 8007446:	701a      	strb	r2, [r3, #0]
	message[0] = '{';
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	227b      	movs	r2, #123	; 0x7b
 800744c:	701a      	strb	r2, [r3, #0]
	message[1] = '\0';
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	3301      	adds	r3, #1
 8007452:	2200      	movs	r2, #0
 8007454:	701a      	strb	r2, [r3, #0]

	//strcat(message, "{");
	strcat(message, (char*) "\"replyHost\":\""); strcat(message, message_builder->reply_host); strcat(message, (char*) "\",");
 8007456:	68f8      	ldr	r0, [r7, #12]
 8007458:	f7f8 fec4 	bl	80001e4 <strlen>
 800745c:	4603      	mov	r3, r0
 800745e:	461a      	mov	r2, r3
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	4413      	add	r3, r2
 8007464:	4a7c      	ldr	r2, [pc, #496]	; (8007658 <message_builder_build+0x234>)
 8007466:	461c      	mov	r4, r3
 8007468:	4613      	mov	r3, r2
 800746a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800746c:	6020      	str	r0, [r4, #0]
 800746e:	6061      	str	r1, [r4, #4]
 8007470:	60a2      	str	r2, [r4, #8]
 8007472:	881b      	ldrh	r3, [r3, #0]
 8007474:	81a3      	strh	r3, [r4, #12]
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	4619      	mov	r1, r3
 800747c:	68f8      	ldr	r0, [r7, #12]
 800747e:	f004 f819 	bl	800b4b4 <strcat>
 8007482:	68f8      	ldr	r0, [r7, #12]
 8007484:	f7f8 feae 	bl	80001e4 <strlen>
 8007488:	4603      	mov	r3, r0
 800748a:	461a      	mov	r2, r3
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	4413      	add	r3, r2
 8007490:	4a72      	ldr	r2, [pc, #456]	; (800765c <message_builder_build+0x238>)
 8007492:	8811      	ldrh	r1, [r2, #0]
 8007494:	7892      	ldrb	r2, [r2, #2]
 8007496:	8019      	strh	r1, [r3, #0]
 8007498:	709a      	strb	r2, [r3, #2]
	strcat(message, (char*) "\"replyPort\":"); strcat(message, message_builder->reply_port); strcat(message, (char*) ",");
 800749a:	68f8      	ldr	r0, [r7, #12]
 800749c:	f7f8 fea2 	bl	80001e4 <strlen>
 80074a0:	4603      	mov	r3, r0
 80074a2:	461a      	mov	r2, r3
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	4413      	add	r3, r2
 80074a8:	4a6d      	ldr	r2, [pc, #436]	; (8007660 <message_builder_build+0x23c>)
 80074aa:	461c      	mov	r4, r3
 80074ac:	4613      	mov	r3, r2
 80074ae:	cb07      	ldmia	r3!, {r0, r1, r2}
 80074b0:	6020      	str	r0, [r4, #0]
 80074b2:	6061      	str	r1, [r4, #4]
 80074b4:	60a2      	str	r2, [r4, #8]
 80074b6:	781b      	ldrb	r3, [r3, #0]
 80074b8:	7323      	strb	r3, [r4, #12]
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	685b      	ldr	r3, [r3, #4]
 80074be:	4619      	mov	r1, r3
 80074c0:	68f8      	ldr	r0, [r7, #12]
 80074c2:	f003 fff7 	bl	800b4b4 <strcat>
 80074c6:	68f8      	ldr	r0, [r7, #12]
 80074c8:	f7f8 fe8c 	bl	80001e4 <strlen>
 80074cc:	4603      	mov	r3, r0
 80074ce:	461a      	mov	r2, r3
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	4413      	add	r3, r2
 80074d4:	4963      	ldr	r1, [pc, #396]	; (8007664 <message_builder_build+0x240>)
 80074d6:	461a      	mov	r2, r3
 80074d8:	460b      	mov	r3, r1
 80074da:	881b      	ldrh	r3, [r3, #0]
 80074dc:	8013      	strh	r3, [r2, #0]
	strcat(message, (char*) "\"replyChannel\":\""); strcat(message, message_builder->reply_channel); strcat(message, (char*) "\",");
 80074de:	68f8      	ldr	r0, [r7, #12]
 80074e0:	f7f8 fe80 	bl	80001e4 <strlen>
 80074e4:	4603      	mov	r3, r0
 80074e6:	461a      	mov	r2, r3
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	4413      	add	r3, r2
 80074ec:	4a5e      	ldr	r2, [pc, #376]	; (8007668 <message_builder_build+0x244>)
 80074ee:	461d      	mov	r5, r3
 80074f0:	4614      	mov	r4, r2
 80074f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80074f4:	6028      	str	r0, [r5, #0]
 80074f6:	6069      	str	r1, [r5, #4]
 80074f8:	60aa      	str	r2, [r5, #8]
 80074fa:	60eb      	str	r3, [r5, #12]
 80074fc:	7823      	ldrb	r3, [r4, #0]
 80074fe:	742b      	strb	r3, [r5, #16]
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	689b      	ldr	r3, [r3, #8]
 8007504:	4619      	mov	r1, r3
 8007506:	68f8      	ldr	r0, [r7, #12]
 8007508:	f003 ffd4 	bl	800b4b4 <strcat>
 800750c:	68f8      	ldr	r0, [r7, #12]
 800750e:	f7f8 fe69 	bl	80001e4 <strlen>
 8007512:	4603      	mov	r3, r0
 8007514:	461a      	mov	r2, r3
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	4413      	add	r3, r2
 800751a:	4a50      	ldr	r2, [pc, #320]	; (800765c <message_builder_build+0x238>)
 800751c:	8811      	ldrh	r1, [r2, #0]
 800751e:	7892      	ldrb	r2, [r2, #2]
 8007520:	8019      	strh	r1, [r3, #0]
 8007522:	709a      	strb	r2, [r3, #2]
	strcat(message, (char*) "\"method\":\""); strcat(message, message_builder->method); strcat(message, (char*) "\",");
 8007524:	68f8      	ldr	r0, [r7, #12]
 8007526:	f7f8 fe5d 	bl	80001e4 <strlen>
 800752a:	4603      	mov	r3, r0
 800752c:	461a      	mov	r2, r3
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	4413      	add	r3, r2
 8007532:	494e      	ldr	r1, [pc, #312]	; (800766c <message_builder_build+0x248>)
 8007534:	461a      	mov	r2, r3
 8007536:	460b      	mov	r3, r1
 8007538:	cb03      	ldmia	r3!, {r0, r1}
 800753a:	6010      	str	r0, [r2, #0]
 800753c:	6051      	str	r1, [r2, #4]
 800753e:	8819      	ldrh	r1, [r3, #0]
 8007540:	789b      	ldrb	r3, [r3, #2]
 8007542:	8111      	strh	r1, [r2, #8]
 8007544:	7293      	strb	r3, [r2, #10]
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	68db      	ldr	r3, [r3, #12]
 800754a:	4619      	mov	r1, r3
 800754c:	68f8      	ldr	r0, [r7, #12]
 800754e:	f003 ffb1 	bl	800b4b4 <strcat>
 8007552:	68f8      	ldr	r0, [r7, #12]
 8007554:	f7f8 fe46 	bl	80001e4 <strlen>
 8007558:	4603      	mov	r3, r0
 800755a:	461a      	mov	r2, r3
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	4413      	add	r3, r2
 8007560:	4a3e      	ldr	r2, [pc, #248]	; (800765c <message_builder_build+0x238>)
 8007562:	8811      	ldrh	r1, [r2, #0]
 8007564:	7892      	ldrb	r2, [r2, #2]
 8007566:	8019      	strh	r1, [r3, #0]
 8007568:	709a      	strb	r2, [r3, #2]
	strcat(message, (char*) "\"uri\":\""); strcat(message, message_builder->uri); strcat(message, "\",");
 800756a:	68f8      	ldr	r0, [r7, #12]
 800756c:	f7f8 fe3a 	bl	80001e4 <strlen>
 8007570:	4603      	mov	r3, r0
 8007572:	461a      	mov	r2, r3
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	4413      	add	r3, r2
 8007578:	493d      	ldr	r1, [pc, #244]	; (8007670 <message_builder_build+0x24c>)
 800757a:	461a      	mov	r2, r3
 800757c:	460b      	mov	r3, r1
 800757e:	cb03      	ldmia	r3!, {r0, r1}
 8007580:	6010      	str	r0, [r2, #0]
 8007582:	6051      	str	r1, [r2, #4]
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	691b      	ldr	r3, [r3, #16]
 8007588:	4619      	mov	r1, r3
 800758a:	68f8      	ldr	r0, [r7, #12]
 800758c:	f003 ff92 	bl	800b4b4 <strcat>
 8007590:	68f8      	ldr	r0, [r7, #12]
 8007592:	f7f8 fe27 	bl	80001e4 <strlen>
 8007596:	4603      	mov	r3, r0
 8007598:	461a      	mov	r2, r3
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	4413      	add	r3, r2
 800759e:	4a2f      	ldr	r2, [pc, #188]	; (800765c <message_builder_build+0x238>)
 80075a0:	8811      	ldrh	r1, [r2, #0]
 80075a2:	7892      	ldrb	r2, [r2, #2]
 80075a4:	8019      	strh	r1, [r3, #0]
 80075a6:	709a      	strb	r2, [r3, #2]
	strcat(message, (char*) "\"header\":"); strcat(message, "{}"); strcat(message, (char*) ",");
 80075a8:	68f8      	ldr	r0, [r7, #12]
 80075aa:	f7f8 fe1b 	bl	80001e4 <strlen>
 80075ae:	4603      	mov	r3, r0
 80075b0:	461a      	mov	r2, r3
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	4413      	add	r3, r2
 80075b6:	492f      	ldr	r1, [pc, #188]	; (8007674 <message_builder_build+0x250>)
 80075b8:	461a      	mov	r2, r3
 80075ba:	460b      	mov	r3, r1
 80075bc:	cb03      	ldmia	r3!, {r0, r1}
 80075be:	6010      	str	r0, [r2, #0]
 80075c0:	6051      	str	r1, [r2, #4]
 80075c2:	881b      	ldrh	r3, [r3, #0]
 80075c4:	8113      	strh	r3, [r2, #8]
 80075c6:	68f8      	ldr	r0, [r7, #12]
 80075c8:	f7f8 fe0c 	bl	80001e4 <strlen>
 80075cc:	4603      	mov	r3, r0
 80075ce:	461a      	mov	r2, r3
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	4413      	add	r3, r2
 80075d4:	4a28      	ldr	r2, [pc, #160]	; (8007678 <message_builder_build+0x254>)
 80075d6:	8811      	ldrh	r1, [r2, #0]
 80075d8:	7892      	ldrb	r2, [r2, #2]
 80075da:	8019      	strh	r1, [r3, #0]
 80075dc:	709a      	strb	r2, [r3, #2]
 80075de:	68f8      	ldr	r0, [r7, #12]
 80075e0:	f7f8 fe00 	bl	80001e4 <strlen>
 80075e4:	4603      	mov	r3, r0
 80075e6:	461a      	mov	r2, r3
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	4413      	add	r3, r2
 80075ec:	491d      	ldr	r1, [pc, #116]	; (8007664 <message_builder_build+0x240>)
 80075ee:	461a      	mov	r2, r3
 80075f0:	460b      	mov	r3, r1
 80075f2:	881b      	ldrh	r3, [r3, #0]
 80075f4:	8013      	strh	r3, [r2, #0]
	strcat(message, (char*) "\"body\":"); strcat(message, map_string_to_char(message_builder->body));
 80075f6:	68f8      	ldr	r0, [r7, #12]
 80075f8:	f7f8 fdf4 	bl	80001e4 <strlen>
 80075fc:	4603      	mov	r3, r0
 80075fe:	461a      	mov	r2, r3
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	4413      	add	r3, r2
 8007604:	491d      	ldr	r1, [pc, #116]	; (800767c <message_builder_build+0x258>)
 8007606:	461a      	mov	r2, r3
 8007608:	460b      	mov	r3, r1
 800760a:	cb03      	ldmia	r3!, {r0, r1}
 800760c:	6010      	str	r0, [r2, #0]
 800760e:	6051      	str	r1, [r2, #4]
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	699b      	ldr	r3, [r3, #24]
 8007614:	4618      	mov	r0, r3
 8007616:	f7ff fc9f 	bl	8006f58 <map_string_to_char>
 800761a:	4603      	mov	r3, r0
 800761c:	4619      	mov	r1, r3
 800761e:	68f8      	ldr	r0, [r7, #12]
 8007620:	f003 ff48 	bl	800b4b4 <strcat>
	strcat(message, (char*) "}");
 8007624:	68f8      	ldr	r0, [r7, #12]
 8007626:	f7f8 fddd 	bl	80001e4 <strlen>
 800762a:	4603      	mov	r3, r0
 800762c:	461a      	mov	r2, r3
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	4413      	add	r3, r2
 8007632:	4913      	ldr	r1, [pc, #76]	; (8007680 <message_builder_build+0x25c>)
 8007634:	461a      	mov	r2, r3
 8007636:	460b      	mov	r3, r1
 8007638:	881b      	ldrh	r3, [r3, #0]
 800763a:	8013      	strh	r3, [r2, #0]
	message[strlen(message)] = '\0';
 800763c:	68f8      	ldr	r0, [r7, #12]
 800763e:	f7f8 fdd1 	bl	80001e4 <strlen>
 8007642:	4602      	mov	r2, r0
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	4413      	add	r3, r2
 8007648:	2200      	movs	r2, #0
 800764a:	701a      	strb	r2, [r3, #0]
	return message;
 800764c:	68fb      	ldr	r3, [r7, #12]
}
 800764e:	4618      	mov	r0, r3
 8007650:	3710      	adds	r7, #16
 8007652:	46bd      	mov	sp, r7
 8007654:	bdb0      	pop	{r4, r5, r7, pc}
 8007656:	bf00      	nop
 8007658:	0801002c 	.word	0x0801002c
 800765c:	0801003c 	.word	0x0801003c
 8007660:	08010040 	.word	0x08010040
 8007664:	08010050 	.word	0x08010050
 8007668:	08010054 	.word	0x08010054
 800766c:	08010068 	.word	0x08010068
 8007670:	08010074 	.word	0x08010074
 8007674:	0801007c 	.word	0x0801007c
 8007678:	08010088 	.word	0x08010088
 800767c:	0801008c 	.word	0x0801008c
 8007680:	08010094 	.word	0x08010094

08007684 <message_builder_destroy>:

void message_builder_destroy(){
 8007684:	b580      	push	{r7, lr}
 8007686:	af00      	add	r7, sp, #0
	if( message_builder_instance == NULL ) return;
 8007688:	4b30      	ldr	r3, [pc, #192]	; (800774c <message_builder_destroy+0xc8>)
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d05a      	beq.n	8007746 <message_builder_destroy+0xc2>

	//free(message_builder_instance->reply_host);
	message_builder_instance->reply_host = NULL;
 8007690:	4b2e      	ldr	r3, [pc, #184]	; (800774c <message_builder_destroy+0xc8>)
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	2200      	movs	r2, #0
 8007696:	701a      	strb	r2, [r3, #0]
 8007698:	2200      	movs	r2, #0
 800769a:	705a      	strb	r2, [r3, #1]
 800769c:	2200      	movs	r2, #0
 800769e:	709a      	strb	r2, [r3, #2]
 80076a0:	2200      	movs	r2, #0
 80076a2:	70da      	strb	r2, [r3, #3]

	//free(message_builder_instance->reply_port);
	message_builder_instance->reply_port = NULL;
 80076a4:	4b29      	ldr	r3, [pc, #164]	; (800774c <message_builder_destroy+0xc8>)
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	2200      	movs	r2, #0
 80076aa:	711a      	strb	r2, [r3, #4]
 80076ac:	2200      	movs	r2, #0
 80076ae:	715a      	strb	r2, [r3, #5]
 80076b0:	2200      	movs	r2, #0
 80076b2:	719a      	strb	r2, [r3, #6]
 80076b4:	2200      	movs	r2, #0
 80076b6:	71da      	strb	r2, [r3, #7]

	//free(message_builder_instance->reply_channel);
	message_builder_instance->reply_channel = NULL;
 80076b8:	4b24      	ldr	r3, [pc, #144]	; (800774c <message_builder_destroy+0xc8>)
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	2200      	movs	r2, #0
 80076be:	721a      	strb	r2, [r3, #8]
 80076c0:	2200      	movs	r2, #0
 80076c2:	725a      	strb	r2, [r3, #9]
 80076c4:	2200      	movs	r2, #0
 80076c6:	729a      	strb	r2, [r3, #10]
 80076c8:	2200      	movs	r2, #0
 80076ca:	72da      	strb	r2, [r3, #11]

	//free(message_builder_instance->method);
	message_builder_instance->method = NULL;
 80076cc:	4b1f      	ldr	r3, [pc, #124]	; (800774c <message_builder_destroy+0xc8>)
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	2200      	movs	r2, #0
 80076d2:	731a      	strb	r2, [r3, #12]
 80076d4:	2200      	movs	r2, #0
 80076d6:	735a      	strb	r2, [r3, #13]
 80076d8:	2200      	movs	r2, #0
 80076da:	739a      	strb	r2, [r3, #14]
 80076dc:	2200      	movs	r2, #0
 80076de:	73da      	strb	r2, [r3, #15]

	//free(message_builder_instance->uri);
	message_builder_instance->uri = NULL;
 80076e0:	4b1a      	ldr	r3, [pc, #104]	; (800774c <message_builder_destroy+0xc8>)
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	2200      	movs	r2, #0
 80076e6:	741a      	strb	r2, [r3, #16]
 80076e8:	2200      	movs	r2, #0
 80076ea:	745a      	strb	r2, [r3, #17]
 80076ec:	2200      	movs	r2, #0
 80076ee:	749a      	strb	r2, [r3, #18]
 80076f0:	2200      	movs	r2, #0
 80076f2:	74da      	strb	r2, [r3, #19]

	map_string_destroy(message_builder_instance->header);
 80076f4:	4b15      	ldr	r3, [pc, #84]	; (800774c <message_builder_destroy+0xc8>)
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	695b      	ldr	r3, [r3, #20]
 80076fa:	4618      	mov	r0, r3
 80076fc:	f7ff fbcc 	bl	8006e98 <map_string_destroy>
	message_builder_instance->header = NULL;
 8007700:	4b12      	ldr	r3, [pc, #72]	; (800774c <message_builder_destroy+0xc8>)
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	2200      	movs	r2, #0
 8007706:	751a      	strb	r2, [r3, #20]
 8007708:	2200      	movs	r2, #0
 800770a:	755a      	strb	r2, [r3, #21]
 800770c:	2200      	movs	r2, #0
 800770e:	759a      	strb	r2, [r3, #22]
 8007710:	2200      	movs	r2, #0
 8007712:	75da      	strb	r2, [r3, #23]

	map_string_destroy(message_builder_instance->body);
 8007714:	4b0d      	ldr	r3, [pc, #52]	; (800774c <message_builder_destroy+0xc8>)
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	699b      	ldr	r3, [r3, #24]
 800771a:	4618      	mov	r0, r3
 800771c:	f7ff fbbc 	bl	8006e98 <map_string_destroy>
	message_builder_instance->body = NULL;
 8007720:	4b0a      	ldr	r3, [pc, #40]	; (800774c <message_builder_destroy+0xc8>)
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	2200      	movs	r2, #0
 8007726:	761a      	strb	r2, [r3, #24]
 8007728:	2200      	movs	r2, #0
 800772a:	765a      	strb	r2, [r3, #25]
 800772c:	2200      	movs	r2, #0
 800772e:	769a      	strb	r2, [r3, #26]
 8007730:	2200      	movs	r2, #0
 8007732:	76da      	strb	r2, [r3, #27]

	free(message_builder_instance);
 8007734:	4b05      	ldr	r3, [pc, #20]	; (800774c <message_builder_destroy+0xc8>)
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	4618      	mov	r0, r3
 800773a:	f003 fc39 	bl	800afb0 <free>
	message_builder_instance = NULL;
 800773e:	4b03      	ldr	r3, [pc, #12]	; (800774c <message_builder_destroy+0xc8>)
 8007740:	2200      	movs	r2, #0
 8007742:	601a      	str	r2, [r3, #0]
 8007744:	e000      	b.n	8007748 <message_builder_destroy+0xc4>
	if( message_builder_instance == NULL ) return;
 8007746:	bf00      	nop
}
 8007748:	bd80      	pop	{r7, pc}
 800774a:	bf00      	nop
 800774c:	20000b08 	.word	0x20000b08

08007750 <LL_ADC_REG_SetSequencerRanks>:
{
 8007750:	b490      	push	{r4, r7}
 8007752:	b084      	sub	sp, #16
 8007754:	af00      	add	r7, sp, #0
 8007756:	60f8      	str	r0, [r7, #12]
 8007758:	60b9      	str	r1, [r7, #8]
 800775a:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	3330      	adds	r3, #48	; 0x30
 8007760:	461a      	mov	r2, r3
 8007762:	68bb      	ldr	r3, [r7, #8]
 8007764:	0a1b      	lsrs	r3, r3, #8
 8007766:	009b      	lsls	r3, r3, #2
 8007768:	f003 030c 	and.w	r3, r3, #12
 800776c:	4413      	add	r3, r2
 800776e:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 8007770:	6822      	ldr	r2, [r4, #0]
 8007772:	68bb      	ldr	r3, [r7, #8]
 8007774:	f003 031f 	and.w	r3, r3, #31
 8007778:	211f      	movs	r1, #31
 800777a:	fa01 f303 	lsl.w	r3, r1, r3
 800777e:	43db      	mvns	r3, r3
 8007780:	401a      	ands	r2, r3
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	0e9b      	lsrs	r3, r3, #26
 8007786:	f003 011f 	and.w	r1, r3, #31
 800778a:	68bb      	ldr	r3, [r7, #8]
 800778c:	f003 031f 	and.w	r3, r3, #31
 8007790:	fa01 f303 	lsl.w	r3, r1, r3
 8007794:	4313      	orrs	r3, r2
 8007796:	6023      	str	r3, [r4, #0]
}
 8007798:	bf00      	nop
 800779a:	3710      	adds	r7, #16
 800779c:	46bd      	mov	sp, r7
 800779e:	bc90      	pop	{r4, r7}
 80077a0:	4770      	bx	lr

080077a2 <LL_ADC_SetChannelSamplingTime>:
{
 80077a2:	b490      	push	{r4, r7}
 80077a4:	b084      	sub	sp, #16
 80077a6:	af00      	add	r7, sp, #0
 80077a8:	60f8      	str	r0, [r7, #12]
 80077aa:	60b9      	str	r1, [r7, #8]
 80077ac:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	3314      	adds	r3, #20
 80077b2:	461a      	mov	r2, r3
 80077b4:	68bb      	ldr	r3, [r7, #8]
 80077b6:	0e5b      	lsrs	r3, r3, #25
 80077b8:	009b      	lsls	r3, r3, #2
 80077ba:	f003 0304 	and.w	r3, r3, #4
 80077be:	4413      	add	r3, r2
 80077c0:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 80077c2:	6822      	ldr	r2, [r4, #0]
 80077c4:	68bb      	ldr	r3, [r7, #8]
 80077c6:	0d1b      	lsrs	r3, r3, #20
 80077c8:	f003 031f 	and.w	r3, r3, #31
 80077cc:	2107      	movs	r1, #7
 80077ce:	fa01 f303 	lsl.w	r3, r1, r3
 80077d2:	43db      	mvns	r3, r3
 80077d4:	401a      	ands	r2, r3
 80077d6:	68bb      	ldr	r3, [r7, #8]
 80077d8:	0d1b      	lsrs	r3, r3, #20
 80077da:	f003 031f 	and.w	r3, r3, #31
 80077de:	6879      	ldr	r1, [r7, #4]
 80077e0:	fa01 f303 	lsl.w	r3, r1, r3
 80077e4:	4313      	orrs	r3, r2
 80077e6:	6023      	str	r3, [r4, #0]
}
 80077e8:	bf00      	nop
 80077ea:	3710      	adds	r7, #16
 80077ec:	46bd      	mov	sp, r7
 80077ee:	bc90      	pop	{r4, r7}
 80077f0:	4770      	bx	lr
	...

080077f4 <LL_ADC_SetChannelSingleDiff>:
{
 80077f4:	b480      	push	{r7}
 80077f6:	b085      	sub	sp, #20
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	60f8      	str	r0, [r7, #12]
 80077fc:	60b9      	str	r1, [r7, #8]
 80077fe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->DIFSEL,
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8007806:	68bb      	ldr	r3, [r7, #8]
 8007808:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800780c:	43db      	mvns	r3, r3
 800780e:	401a      	ands	r2, r3
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	f003 0318 	and.w	r3, r3, #24
 8007816:	4908      	ldr	r1, [pc, #32]	; (8007838 <LL_ADC_SetChannelSingleDiff+0x44>)
 8007818:	40d9      	lsrs	r1, r3
 800781a:	68bb      	ldr	r3, [r7, #8]
 800781c:	400b      	ands	r3, r1
 800781e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007822:	431a      	orrs	r2, r3
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 800782a:	bf00      	nop
 800782c:	3714      	adds	r7, #20
 800782e:	46bd      	mov	sp, r7
 8007830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007834:	4770      	bx	lr
 8007836:	bf00      	nop
 8007838:	0007ffff 	.word	0x0007ffff

0800783c <LL_ADC_DisableDeepPowerDown>:
{
 800783c:	b480      	push	{r7}
 800783e:	b083      	sub	sp, #12
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	689b      	ldr	r3, [r3, #8]
 8007848:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800784c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007850:	687a      	ldr	r2, [r7, #4]
 8007852:	6093      	str	r3, [r2, #8]
}
 8007854:	bf00      	nop
 8007856:	370c      	adds	r7, #12
 8007858:	46bd      	mov	sp, r7
 800785a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785e:	4770      	bx	lr

08007860 <LL_ADC_EnableInternalRegulator>:
{
 8007860:	b480      	push	{r7}
 8007862:	b083      	sub	sp, #12
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	689b      	ldr	r3, [r3, #8]
 800786c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8007870:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007874:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	609a      	str	r2, [r3, #8]
}
 800787c:	bf00      	nop
 800787e:	370c      	adds	r7, #12
 8007880:	46bd      	mov	sp, r7
 8007882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007886:	4770      	bx	lr

08007888 <LL_ADC_Enable>:
{
 8007888:	b480      	push	{r7}
 800788a:	b083      	sub	sp, #12
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	689b      	ldr	r3, [r3, #8]
 8007894:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007898:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800789c:	f043 0201 	orr.w	r2, r3, #1
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	609a      	str	r2, [r3, #8]
}
 80078a4:	bf00      	nop
 80078a6:	370c      	adds	r7, #12
 80078a8:	46bd      	mov	sp, r7
 80078aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ae:	4770      	bx	lr

080078b0 <LL_ADC_Disable>:
{
 80078b0:	b480      	push	{r7}
 80078b2:	b083      	sub	sp, #12
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	689b      	ldr	r3, [r3, #8]
 80078bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80078c0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80078c4:	f043 0202 	orr.w	r2, r3, #2
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	609a      	str	r2, [r3, #8]
}
 80078cc:	bf00      	nop
 80078ce:	370c      	adds	r7, #12
 80078d0:	46bd      	mov	sp, r7
 80078d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d6:	4770      	bx	lr

080078d8 <LL_ADC_StartCalibration>:
{
 80078d8:	b480      	push	{r7}
 80078da:	b083      	sub	sp, #12
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
 80078e0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	689b      	ldr	r3, [r3, #8]
 80078e6:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80078ea:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80078ee:	683a      	ldr	r2, [r7, #0]
 80078f0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80078f4:	4313      	orrs	r3, r2
 80078f6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	609a      	str	r2, [r3, #8]
}
 80078fe:	bf00      	nop
 8007900:	370c      	adds	r7, #12
 8007902:	46bd      	mov	sp, r7
 8007904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007908:	4770      	bx	lr

0800790a <LL_ADC_IsCalibrationOnGoing>:
{
 800790a:	b480      	push	{r7}
 800790c:	b083      	sub	sp, #12
 800790e:	af00      	add	r7, sp, #0
 8007910:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	689b      	ldr	r3, [r3, #8]
 8007916:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800791a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800791e:	d101      	bne.n	8007924 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8007920:	2301      	movs	r3, #1
 8007922:	e000      	b.n	8007926 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8007924:	2300      	movs	r3, #0
}
 8007926:	4618      	mov	r0, r3
 8007928:	370c      	adds	r7, #12
 800792a:	46bd      	mov	sp, r7
 800792c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007930:	4770      	bx	lr

08007932 <LL_ADC_REG_StartConversion>:
{
 8007932:	b480      	push	{r7}
 8007934:	b083      	sub	sp, #12
 8007936:	af00      	add	r7, sp, #0
 8007938:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	689b      	ldr	r3, [r3, #8]
 800793e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007942:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007946:	f043 0204 	orr.w	r2, r3, #4
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	609a      	str	r2, [r3, #8]
}
 800794e:	bf00      	nop
 8007950:	370c      	adds	r7, #12
 8007952:	46bd      	mov	sp, r7
 8007954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007958:	4770      	bx	lr

0800795a <LL_ADC_REG_StopConversion>:
{
 800795a:	b480      	push	{r7}
 800795c:	b083      	sub	sp, #12
 800795e:	af00      	add	r7, sp, #0
 8007960:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	689b      	ldr	r3, [r3, #8]
 8007966:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800796a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800796e:	f043 0210 	orr.w	r2, r3, #16
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	609a      	str	r2, [r3, #8]
}
 8007976:	bf00      	nop
 8007978:	370c      	adds	r7, #12
 800797a:	46bd      	mov	sp, r7
 800797c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007980:	4770      	bx	lr

08007982 <LL_ADC_REG_ReadConversionData12>:
{
 8007982:	b480      	push	{r7}
 8007984:	b083      	sub	sp, #12
 8007986:	af00      	add	r7, sp, #0
 8007988:	6078      	str	r0, [r7, #4]
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800798e:	b29b      	uxth	r3, r3
}
 8007990:	4618      	mov	r0, r3
 8007992:	370c      	adds	r7, #12
 8007994:	46bd      	mov	sp, r7
 8007996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799a:	4770      	bx	lr

0800799c <LL_ADC_IsActiveFlag_ADRDY>:
{
 800799c:	b480      	push	{r7}
 800799e:	b083      	sub	sp, #12
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f003 0301 	and.w	r3, r3, #1
 80079ac:	2b01      	cmp	r3, #1
 80079ae:	d101      	bne.n	80079b4 <LL_ADC_IsActiveFlag_ADRDY+0x18>
 80079b0:	2301      	movs	r3, #1
 80079b2:	e000      	b.n	80079b6 <LL_ADC_IsActiveFlag_ADRDY+0x1a>
 80079b4:	2300      	movs	r3, #0
}
 80079b6:	4618      	mov	r0, r3
 80079b8:	370c      	adds	r7, #12
 80079ba:	46bd      	mov	sp, r7
 80079bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c0:	4770      	bx	lr

080079c2 <LL_ADC_IsActiveFlag_EOC>:
{
 80079c2:	b480      	push	{r7}
 80079c4:	b083      	sub	sp, #12
 80079c6:	af00      	add	r7, sp, #0
 80079c8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC)) ? 1UL : 0UL);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	f003 0304 	and.w	r3, r3, #4
 80079d2:	2b04      	cmp	r3, #4
 80079d4:	d101      	bne.n	80079da <LL_ADC_IsActiveFlag_EOC+0x18>
 80079d6:	2301      	movs	r3, #1
 80079d8:	e000      	b.n	80079dc <LL_ADC_IsActiveFlag_EOC+0x1a>
 80079da:	2300      	movs	r3, #0
}
 80079dc:	4618      	mov	r0, r3
 80079de:	370c      	adds	r7, #12
 80079e0:	46bd      	mov	sp, r7
 80079e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e6:	4770      	bx	lr

080079e8 <LL_ADC_ClearFlag_EOC>:
{
 80079e8:	b480      	push	{r7}
 80079ea:	b083      	sub	sp, #12
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2204      	movs	r2, #4
 80079f4:	601a      	str	r2, [r3, #0]
}
 80079f6:	bf00      	nop
 80079f8:	370c      	adds	r7, #12
 80079fa:	46bd      	mov	sp, r7
 80079fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a00:	4770      	bx	lr
	...

08007a04 <stm32_util_read_analog_configure>:
#include <util/stm32_util.h>

volatile atomic_flag adc_in_use = ATOMIC_FLAG_INIT;

void stm32_util_read_analog_configure(uint32_t channel){
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b082      	sub	sp, #8
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
	LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, channel);
 8007a0c:	687a      	ldr	r2, [r7, #4]
 8007a0e:	2106      	movs	r1, #6
 8007a10:	4808      	ldr	r0, [pc, #32]	; (8007a34 <stm32_util_read_analog_configure+0x30>)
 8007a12:	f7ff fe9d 	bl	8007750 <LL_ADC_REG_SetSequencerRanks>
	LL_ADC_SetChannelSamplingTime(ADC1, channel, LL_ADC_SAMPLINGTIME_24CYCLES_5);
 8007a16:	2203      	movs	r2, #3
 8007a18:	6879      	ldr	r1, [r7, #4]
 8007a1a:	4806      	ldr	r0, [pc, #24]	; (8007a34 <stm32_util_read_analog_configure+0x30>)
 8007a1c:	f7ff fec1 	bl	80077a2 <LL_ADC_SetChannelSamplingTime>
	LL_ADC_SetChannelSingleDiff(ADC1, channel, LL_ADC_SINGLE_ENDED);
 8007a20:	227f      	movs	r2, #127	; 0x7f
 8007a22:	6879      	ldr	r1, [r7, #4]
 8007a24:	4803      	ldr	r0, [pc, #12]	; (8007a34 <stm32_util_read_analog_configure+0x30>)
 8007a26:	f7ff fee5 	bl	80077f4 <LL_ADC_SetChannelSingleDiff>
}
 8007a2a:	bf00      	nop
 8007a2c:	3708      	adds	r7, #8
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	bd80      	pop	{r7, pc}
 8007a32:	bf00      	nop
 8007a34:	50040000 	.word	0x50040000

08007a38 <stm32_util_read_analog>:

uint16_t stm32_util_read_analog(uint32_t channel){
 8007a38:	b590      	push	{r4, r7, lr}
 8007a3a:	b085      	sub	sp, #20
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
	stm32_util_read_analog_configure(channel);
 8007a40:	6878      	ldr	r0, [r7, #4]
 8007a42:	f7ff ffdf 	bl	8007a04 <stm32_util_read_analog_configure>

	if( atomic_flag_test_and_set(&adc_in_use) == true) return 0xFFFF;
 8007a46:	4b38      	ldr	r3, [pc, #224]	; (8007b28 <stm32_util_read_analog+0xf0>)
 8007a48:	2201      	movs	r2, #1
 8007a4a:	4611      	mov	r1, r2
 8007a4c:	f3bf 8f5b 	dmb	ish
 8007a50:	e8d3 2f4f 	ldrexb	r2, [r3]
 8007a54:	e8c3 1f40 	strexb	r0, r1, [r3]
 8007a58:	2800      	cmp	r0, #0
 8007a5a:	d1f9      	bne.n	8007a50 <stm32_util_read_analog+0x18>
 8007a5c:	f3bf 8f5b 	dmb	ish
 8007a60:	b2d3      	uxtb	r3, r2
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d002      	beq.n	8007a6c <stm32_util_read_analog+0x34>
 8007a66:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007a6a:	e059      	b.n	8007b20 <stm32_util_read_analog+0xe8>

	// Start Internal Regulator
	LL_ADC_DisableDeepPowerDown(ADC1);
 8007a6c:	482f      	ldr	r0, [pc, #188]	; (8007b2c <stm32_util_read_analog+0xf4>)
 8007a6e:	f7ff fee5 	bl	800783c <LL_ADC_DisableDeepPowerDown>
	LL_ADC_EnableInternalRegulator(ADC1);
 8007a72:	482e      	ldr	r0, [pc, #184]	; (8007b2c <stm32_util_read_analog+0xf4>)
 8007a74:	f7ff fef4 	bl	8007860 <LL_ADC_EnableInternalRegulator>

	LL_ADC_StartCalibration(ADC1, LL_ADC_SINGLE_ENDED);
 8007a78:	217f      	movs	r1, #127	; 0x7f
 8007a7a:	482c      	ldr	r0, [pc, #176]	; (8007b2c <stm32_util_read_analog+0xf4>)
 8007a7c:	f7ff ff2c 	bl	80078d8 <LL_ADC_StartCalibration>
	while ( LL_ADC_IsCalibrationOnGoing(ADC1) );
 8007a80:	bf00      	nop
 8007a82:	482a      	ldr	r0, [pc, #168]	; (8007b2c <stm32_util_read_analog+0xf4>)
 8007a84:	f7ff ff41 	bl	800790a <LL_ADC_IsCalibrationOnGoing>
 8007a88:	4603      	mov	r3, r0
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d1f9      	bne.n	8007a82 <stm32_util_read_analog+0x4a>

	LL_ADC_Enable(ADC1);
 8007a8e:	4827      	ldr	r0, [pc, #156]	; (8007b2c <stm32_util_read_analog+0xf4>)
 8007a90:	f7ff fefa 	bl	8007888 <LL_ADC_Enable>
	while ( LL_ADC_IsActiveFlag_ADRDY(ADC1) == 0 );
 8007a94:	bf00      	nop
 8007a96:	4825      	ldr	r0, [pc, #148]	; (8007b2c <stm32_util_read_analog+0xf4>)
 8007a98:	f7ff ff80 	bl	800799c <LL_ADC_IsActiveFlag_ADRDY>
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d0f9      	beq.n	8007a96 <stm32_util_read_analog+0x5e>
	if( LL_ADC_IsActiveFlag_EOC(ADC1) ) LL_ADC_ClearFlag_EOC(ADC1);
 8007aa2:	4822      	ldr	r0, [pc, #136]	; (8007b2c <stm32_util_read_analog+0xf4>)
 8007aa4:	f7ff ff8d 	bl	80079c2 <LL_ADC_IsActiveFlag_EOC>
 8007aa8:	4603      	mov	r3, r0
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d002      	beq.n	8007ab4 <stm32_util_read_analog+0x7c>
 8007aae:	481f      	ldr	r0, [pc, #124]	; (8007b2c <stm32_util_read_analog+0xf4>)
 8007ab0:	f7ff ff9a 	bl	80079e8 <LL_ADC_ClearFlag_EOC>

	//LL_ADC_REG_StartConversion(ADC1);
	//while(LL_ADC_IsActiveFlag_EOC(ADC1) == 0);


	uint16_t result = 0;
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	81fb      	strh	r3, [r7, #14]
	for(register uint32_t i = 0 ; i < 10; i++){
 8007ab8:	2400      	movs	r4, #0
 8007aba:	e01e      	b.n	8007afa <stm32_util_read_analog+0xc2>
		LL_ADC_REG_StartConversion(ADC1);
 8007abc:	481b      	ldr	r0, [pc, #108]	; (8007b2c <stm32_util_read_analog+0xf4>)
 8007abe:	f7ff ff38 	bl	8007932 <LL_ADC_REG_StartConversion>
		while( LL_ADC_IsActiveFlag_EOC(ADC1) == 0 );
 8007ac2:	bf00      	nop
 8007ac4:	4819      	ldr	r0, [pc, #100]	; (8007b2c <stm32_util_read_analog+0xf4>)
 8007ac6:	f7ff ff7c 	bl	80079c2 <LL_ADC_IsActiveFlag_EOC>
 8007aca:	4603      	mov	r3, r0
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d0f9      	beq.n	8007ac4 <stm32_util_read_analog+0x8c>
		if( LL_ADC_IsActiveFlag_EOC(ADC1) ) LL_ADC_ClearFlag_EOC(ADC1);
 8007ad0:	4816      	ldr	r0, [pc, #88]	; (8007b2c <stm32_util_read_analog+0xf4>)
 8007ad2:	f7ff ff76 	bl	80079c2 <LL_ADC_IsActiveFlag_EOC>
 8007ad6:	4603      	mov	r3, r0
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d002      	beq.n	8007ae2 <stm32_util_read_analog+0xaa>
 8007adc:	4813      	ldr	r0, [pc, #76]	; (8007b2c <stm32_util_read_analog+0xf4>)
 8007ade:	f7ff ff83 	bl	80079e8 <LL_ADC_ClearFlag_EOC>
		result = result + LL_ADC_REG_ReadConversionData12(ADC1);
 8007ae2:	4812      	ldr	r0, [pc, #72]	; (8007b2c <stm32_util_read_analog+0xf4>)
 8007ae4:	f7ff ff4d 	bl	8007982 <LL_ADC_REG_ReadConversionData12>
 8007ae8:	4603      	mov	r3, r0
 8007aea:	461a      	mov	r2, r3
 8007aec:	89fb      	ldrh	r3, [r7, #14]
 8007aee:	4413      	add	r3, r2
 8007af0:	81fb      	strh	r3, [r7, #14]
		LL_ADC_REG_StopConversion(ADC1);
 8007af2:	480e      	ldr	r0, [pc, #56]	; (8007b2c <stm32_util_read_analog+0xf4>)
 8007af4:	f7ff ff31 	bl	800795a <LL_ADC_REG_StopConversion>
	for(register uint32_t i = 0 ; i < 10; i++){
 8007af8:	3401      	adds	r4, #1
 8007afa:	2c09      	cmp	r4, #9
 8007afc:	d9de      	bls.n	8007abc <stm32_util_read_analog+0x84>
	}
	result = result / 10;
 8007afe:	89fb      	ldrh	r3, [r7, #14]
 8007b00:	4a0b      	ldr	r2, [pc, #44]	; (8007b30 <stm32_util_read_analog+0xf8>)
 8007b02:	fba2 2303 	umull	r2, r3, r2, r3
 8007b06:	08db      	lsrs	r3, r3, #3
 8007b08:	81fb      	strh	r3, [r7, #14]
	LL_ADC_Disable(ADC1);
 8007b0a:	4808      	ldr	r0, [pc, #32]	; (8007b2c <stm32_util_read_analog+0xf4>)
 8007b0c:	f7ff fed0 	bl	80078b0 <LL_ADC_Disable>
	atomic_flag_clear(&adc_in_use);
 8007b10:	4b05      	ldr	r3, [pc, #20]	; (8007b28 <stm32_util_read_analog+0xf0>)
 8007b12:	f3bf 8f5b 	dmb	ish
 8007b16:	2200      	movs	r2, #0
 8007b18:	701a      	strb	r2, [r3, #0]
 8007b1a:	f3bf 8f5b 	dmb	ish
	return result;
 8007b1e:	89fb      	ldrh	r3, [r7, #14]
}
 8007b20:	4618      	mov	r0, r3
 8007b22:	3714      	adds	r7, #20
 8007b24:	46bd      	mov	sp, r7
 8007b26:	bd90      	pop	{r4, r7, pc}
 8007b28:	20000b0c 	.word	0x20000b0c
 8007b2c:	50040000 	.word	0x50040000
 8007b30:	cccccccd 	.word	0xcccccccd

08007b34 <stm32_util_set_pin_output>:


void stm32_util_set_pin_output(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin){
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b088      	sub	sp, #32
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
 8007b3c:	460b      	mov	r3, r1
 8007b3e:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007b40:	f107 030c 	add.w	r3, r7, #12
 8007b44:	2200      	movs	r2, #0
 8007b46:	601a      	str	r2, [r3, #0]
 8007b48:	605a      	str	r2, [r3, #4]
 8007b4a:	609a      	str	r2, [r3, #8]
 8007b4c:	60da      	str	r2, [r3, #12]
 8007b4e:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8007b50:	887b      	ldrh	r3, [r7, #2]
 8007b52:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007b54:	2301      	movs	r3, #1
 8007b56:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007b58:	2300      	movs	r3, #0
 8007b5a:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8007b5c:	f107 030c 	add.w	r3, r7, #12
 8007b60:	4619      	mov	r1, r3
 8007b62:	6878      	ldr	r0, [r7, #4]
 8007b64:	f000 fac2 	bl	80080ec <HAL_GPIO_Init>
}
 8007b68:	bf00      	nop
 8007b6a:	3720      	adds	r7, #32
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	bd80      	pop	{r7, pc}

08007b70 <stm32_util_set_pin_input>:

void stm32_util_set_pin_input(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin){
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b088      	sub	sp, #32
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
 8007b78:	460b      	mov	r3, r1
 8007b7a:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007b7c:	f107 030c 	add.w	r3, r7, #12
 8007b80:	2200      	movs	r2, #0
 8007b82:	601a      	str	r2, [r3, #0]
 8007b84:	605a      	str	r2, [r3, #4]
 8007b86:	609a      	str	r2, [r3, #8]
 8007b88:	60da      	str	r2, [r3, #12]
 8007b8a:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8007b8c:	887b      	ldrh	r3, [r7, #2]
 8007b8e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007b90:	2300      	movs	r3, #0
 8007b92:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007b94:	2301      	movs	r3, #1
 8007b96:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8007b98:	f107 030c 	add.w	r3, r7, #12
 8007b9c:	4619      	mov	r1, r3
 8007b9e:	6878      	ldr	r0, [r7, #4]
 8007ba0:	f000 faa4 	bl	80080ec <HAL_GPIO_Init>
}
 8007ba4:	bf00      	nop
 8007ba6:	3720      	adds	r7, #32
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	bd80      	pop	{r7, pc}

08007bac <stm32_util_delay_in_seconds>:

void stm32_util_delay_in_seconds(uint32_t seconds){
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b082      	sub	sp, #8
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
	stm32_util_delay_in_milliseconds(seconds * 1000);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007bba:	fb02 f303 	mul.w	r3, r2, r3
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	f000 f80f 	bl	8007be2 <stm32_util_delay_in_milliseconds>
}
 8007bc4:	bf00      	nop
 8007bc6:	3708      	adds	r7, #8
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	bd80      	pop	{r7, pc}

08007bcc <stm32_util_delay_in_microseconds>:

void stm32_util_delay_in_microseconds(uint32_t microseconds){
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b082      	sub	sp, #8
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
	DWT_Delay(microseconds);
 8007bd4:	6878      	ldr	r0, [r7, #4]
 8007bd6:	f7ff f89d 	bl	8006d14 <DWT_Delay>
}
 8007bda:	bf00      	nop
 8007bdc:	3708      	adds	r7, #8
 8007bde:	46bd      	mov	sp, r7
 8007be0:	bd80      	pop	{r7, pc}

08007be2 <stm32_util_delay_in_milliseconds>:

void stm32_util_delay_in_milliseconds(uint32_t milliseconds){
 8007be2:	b580      	push	{r7, lr}
 8007be4:	b082      	sub	sp, #8
 8007be6:	af00      	add	r7, sp, #0
 8007be8:	6078      	str	r0, [r7, #4]
	HAL_Delay(milliseconds);
 8007bea:	6878      	ldr	r0, [r7, #4]
 8007bec:	f000 f94a 	bl	8007e84 <HAL_Delay>
}
 8007bf0:	bf00      	nop
 8007bf2:	3708      	adds	r7, #8
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	bd80      	pop	{r7, pc}

08007bf8 <string_util_is_empty>:
#include <util/string_util.h>

bool string_util_is_empty(char* string){
 8007bf8:	b480      	push	{r7}
 8007bfa:	b083      	sub	sp, #12
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
	if( string == NULL ) return true;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d101      	bne.n	8007c0a <string_util_is_empty+0x12>
 8007c06:	2301      	movs	r3, #1
 8007c08:	e006      	b.n	8007c18 <string_util_is_empty+0x20>
	return strlen(string) == 0;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	781b      	ldrb	r3, [r3, #0]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	bf0c      	ite	eq
 8007c12:	2301      	moveq	r3, #1
 8007c14:	2300      	movne	r3, #0
 8007c16:	b2db      	uxtb	r3, r3
}
 8007c18:	4618      	mov	r0, r3
 8007c1a:	370c      	adds	r7, #12
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c22:	4770      	bx	lr

08007c24 <string_util_property>:

char* string_util_trim(char* string, char mark){
    return string_util_right_trim(string_util_left_trim(string, mark), mark);
}

char* string_util_property(char* name, char* value){
 8007c24:	b590      	push	{r4, r7, lr}
 8007c26:	b085      	sub	sp, #20
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
 8007c2c:	6039      	str	r1, [r7, #0]
	unsigned int length = strlen(name) + strlen(value) + 2;
 8007c2e:	6878      	ldr	r0, [r7, #4]
 8007c30:	f7f8 fad8 	bl	80001e4 <strlen>
 8007c34:	4604      	mov	r4, r0
 8007c36:	6838      	ldr	r0, [r7, #0]
 8007c38:	f7f8 fad4 	bl	80001e4 <strlen>
 8007c3c:	4603      	mov	r3, r0
 8007c3e:	4423      	add	r3, r4
 8007c40:	3302      	adds	r3, #2
 8007c42:	60fb      	str	r3, [r7, #12]
	char* result = (char*) malloc(length*sizeof(char));
 8007c44:	68f8      	ldr	r0, [r7, #12]
 8007c46:	f003 f9ab 	bl	800afa0 <malloc>
 8007c4a:	4603      	mov	r3, r0
 8007c4c:	60bb      	str	r3, [r7, #8]
	strcpy(result, name);
 8007c4e:	6879      	ldr	r1, [r7, #4]
 8007c50:	68b8      	ldr	r0, [r7, #8]
 8007c52:	f003 fc3e 	bl	800b4d2 <strcpy>
	strcat(result, (char*) ":");
 8007c56:	68b8      	ldr	r0, [r7, #8]
 8007c58:	f7f8 fac4 	bl	80001e4 <strlen>
 8007c5c:	4603      	mov	r3, r0
 8007c5e:	461a      	mov	r2, r3
 8007c60:	68bb      	ldr	r3, [r7, #8]
 8007c62:	4413      	add	r3, r2
 8007c64:	4906      	ldr	r1, [pc, #24]	; (8007c80 <string_util_property+0x5c>)
 8007c66:	461a      	mov	r2, r3
 8007c68:	460b      	mov	r3, r1
 8007c6a:	881b      	ldrh	r3, [r3, #0]
 8007c6c:	8013      	strh	r3, [r2, #0]
	strcat(result, value);
 8007c6e:	6839      	ldr	r1, [r7, #0]
 8007c70:	68b8      	ldr	r0, [r7, #8]
 8007c72:	f003 fc1f 	bl	800b4b4 <strcat>
	return result;
 8007c76:	68bb      	ldr	r3, [r7, #8]
}
 8007c78:	4618      	mov	r0, r3
 8007c7a:	3714      	adds	r7, #20
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	bd90      	pop	{r4, r7, pc}
 8007c80:	0801009c 	.word	0x0801009c

08007c84 <string_util_concat>:

char* string_util_concat(char* destiny, char* source){
 8007c84:	b590      	push	{r4, r7, lr}
 8007c86:	b087      	sub	sp, #28
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
 8007c8c:	6039      	str	r1, [r7, #0]
	size_t size_destiny = strlen(destiny);
 8007c8e:	6878      	ldr	r0, [r7, #4]
 8007c90:	f7f8 faa8 	bl	80001e4 <strlen>
 8007c94:	6178      	str	r0, [r7, #20]
	size_t size_source = strlen(source);
 8007c96:	6838      	ldr	r0, [r7, #0]
 8007c98:	f7f8 faa4 	bl	80001e4 <strlen>
 8007c9c:	6138      	str	r0, [r7, #16]
	size_t size = size_destiny + size_source + 1;
 8007c9e:	697a      	ldr	r2, [r7, #20]
 8007ca0:	693b      	ldr	r3, [r7, #16]
 8007ca2:	4413      	add	r3, r2
 8007ca4:	3301      	adds	r3, #1
 8007ca6:	60fb      	str	r3, [r7, #12]

	char* result = (char*) malloc(size*sizeof(char));
 8007ca8:	68f8      	ldr	r0, [r7, #12]
 8007caa:	f003 f979 	bl	800afa0 <malloc>
 8007cae:	4603      	mov	r3, r0
 8007cb0:	60bb      	str	r3, [r7, #8]
	for(register size_t i = 0; i < size; i++) result[i] = '\0';
 8007cb2:	2400      	movs	r4, #0
 8007cb4:	e004      	b.n	8007cc0 <string_util_concat+0x3c>
 8007cb6:	68bb      	ldr	r3, [r7, #8]
 8007cb8:	4423      	add	r3, r4
 8007cba:	2200      	movs	r2, #0
 8007cbc:	701a      	strb	r2, [r3, #0]
 8007cbe:	3401      	adds	r4, #1
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	429c      	cmp	r4, r3
 8007cc4:	d3f7      	bcc.n	8007cb6 <string_util_concat+0x32>
	strcpy(result, destiny);
 8007cc6:	6879      	ldr	r1, [r7, #4]
 8007cc8:	68b8      	ldr	r0, [r7, #8]
 8007cca:	f003 fc02 	bl	800b4d2 <strcpy>
	strcpy(&result[size_destiny], source);
 8007cce:	68ba      	ldr	r2, [r7, #8]
 8007cd0:	697b      	ldr	r3, [r7, #20]
 8007cd2:	4413      	add	r3, r2
 8007cd4:	6839      	ldr	r1, [r7, #0]
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	f003 fbfb 	bl	800b4d2 <strcpy>

	return result;
 8007cdc:	68bb      	ldr	r3, [r7, #8]
}
 8007cde:	4618      	mov	r0, r3
 8007ce0:	371c      	adds	r7, #28
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	bd90      	pop	{r4, r7, pc}

08007ce6 <string_util_length>:

size_t string_util_length(char* string){
 8007ce6:	b580      	push	{r7, lr}
 8007ce8:	b082      	sub	sp, #8
 8007cea:	af00      	add	r7, sp, #0
 8007cec:	6078      	str	r0, [r7, #4]
	return strlen(string);
 8007cee:	6878      	ldr	r0, [r7, #4]
 8007cf0:	f7f8 fa78 	bl	80001e4 <strlen>
 8007cf4:	4603      	mov	r3, r0
}
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	3708      	adds	r7, #8
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	bd80      	pop	{r7, pc}

08007cfe <string_util_build_empty_string>:

char* string_util_build_empty_string(size_t length){
 8007cfe:	b590      	push	{r4, r7, lr}
 8007d00:	b085      	sub	sp, #20
 8007d02:	af00      	add	r7, sp, #0
 8007d04:	6078      	str	r0, [r7, #4]
	char* result = (char*) malloc((length+1)*sizeof(char));
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	3301      	adds	r3, #1
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	f003 f948 	bl	800afa0 <malloc>
 8007d10:	4603      	mov	r3, r0
 8007d12:	60fb      	str	r3, [r7, #12]
	for(register size_t i = 0; i < length; i++) result[i] = '\0';
 8007d14:	2400      	movs	r4, #0
 8007d16:	e004      	b.n	8007d22 <string_util_build_empty_string+0x24>
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	4423      	add	r3, r4
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	701a      	strb	r2, [r3, #0]
 8007d20:	3401      	adds	r4, #1
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	429c      	cmp	r4, r3
 8007d26:	d3f7      	bcc.n	8007d18 <string_util_build_empty_string+0x1a>
	return result;
 8007d28:	68fb      	ldr	r3, [r7, #12]
}
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	3714      	adds	r7, #20
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	bd90      	pop	{r4, r7, pc}

08007d32 <string_util_copy>:


void string_util_copy(char* destiny, char* source, size_t length){
 8007d32:	b580      	push	{r7, lr}
 8007d34:	b084      	sub	sp, #16
 8007d36:	af00      	add	r7, sp, #0
 8007d38:	60f8      	str	r0, [r7, #12]
 8007d3a:	60b9      	str	r1, [r7, #8]
 8007d3c:	607a      	str	r2, [r7, #4]
	strncpy(destiny, source, length);
 8007d3e:	687a      	ldr	r2, [r7, #4]
 8007d40:	68b9      	ldr	r1, [r7, #8]
 8007d42:	68f8      	ldr	r0, [r7, #12]
 8007d44:	f003 fbcd 	bl	800b4e2 <strncpy>
}
 8007d48:	bf00      	nop
 8007d4a:	3710      	adds	r7, #16
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	bd80      	pop	{r7, pc}

08007d50 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8007d50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007d88 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8007d54:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8007d56:	e003      	b.n	8007d60 <LoopCopyDataInit>

08007d58 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8007d58:	4b0c      	ldr	r3, [pc, #48]	; (8007d8c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8007d5a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8007d5c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8007d5e:	3104      	adds	r1, #4

08007d60 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8007d60:	480b      	ldr	r0, [pc, #44]	; (8007d90 <LoopForever+0xa>)
	ldr	r3, =_edata
 8007d62:	4b0c      	ldr	r3, [pc, #48]	; (8007d94 <LoopForever+0xe>)
	adds	r2, r0, r1
 8007d64:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8007d66:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8007d68:	d3f6      	bcc.n	8007d58 <CopyDataInit>
	ldr	r2, =_sbss
 8007d6a:	4a0b      	ldr	r2, [pc, #44]	; (8007d98 <LoopForever+0x12>)
	b	LoopFillZerobss
 8007d6c:	e002      	b.n	8007d74 <LoopFillZerobss>

08007d6e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8007d6e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8007d70:	f842 3b04 	str.w	r3, [r2], #4

08007d74 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8007d74:	4b09      	ldr	r3, [pc, #36]	; (8007d9c <LoopForever+0x16>)
	cmp	r2, r3
 8007d76:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8007d78:	d3f9      	bcc.n	8007d6e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8007d7a:	f7fa f9bf 	bl	80020fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007d7e:	f003 f8eb 	bl	800af58 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8007d82:	f7f9 fe5d 	bl	8001a40 <main>

08007d86 <LoopForever>:

LoopForever:
    b LoopForever
 8007d86:	e7fe      	b.n	8007d86 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8007d88:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8007d8c:	080105b4 	.word	0x080105b4
	ldr	r0, =_sdata
 8007d90:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8007d94:	20000aa0 	.word	0x20000aa0
	ldr	r2, =_sbss
 8007d98:	20000aa0 	.word	0x20000aa0
	ldr	r3, = _ebss
 8007d9c:	20001080 	.word	0x20001080

08007da0 <CAN1_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8007da0:	e7fe      	b.n	8007da0 <CAN1_RX0_IRQHandler>

08007da2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007da2:	b580      	push	{r7, lr}
 8007da4:	b082      	sub	sp, #8
 8007da6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8007da8:	2300      	movs	r3, #0
 8007daa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007dac:	2003      	movs	r0, #3
 8007dae:	f000 f95b 	bl	8008068 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8007db2:	2000      	movs	r0, #0
 8007db4:	f000 f80e 	bl	8007dd4 <HAL_InitTick>
 8007db8:	4603      	mov	r3, r0
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d002      	beq.n	8007dc4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8007dbe:	2301      	movs	r3, #1
 8007dc0:	71fb      	strb	r3, [r7, #7]
 8007dc2:	e001      	b.n	8007dc8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8007dc4:	f7fa f89a 	bl	8001efc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8007dc8:	79fb      	ldrb	r3, [r7, #7]
}
 8007dca:	4618      	mov	r0, r3
 8007dcc:	3708      	adds	r7, #8
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	bd80      	pop	{r7, pc}
	...

08007dd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b084      	sub	sp, #16
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8007ddc:	2300      	movs	r3, #0
 8007dde:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8007de0:	4b16      	ldr	r3, [pc, #88]	; (8007e3c <HAL_InitTick+0x68>)
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d022      	beq.n	8007e2e <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8007de8:	4b15      	ldr	r3, [pc, #84]	; (8007e40 <HAL_InitTick+0x6c>)
 8007dea:	681a      	ldr	r2, [r3, #0]
 8007dec:	4b13      	ldr	r3, [pc, #76]	; (8007e3c <HAL_InitTick+0x68>)
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007df4:	fbb1 f3f3 	udiv	r3, r1, r3
 8007df8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	f000 f968 	bl	80080d2 <HAL_SYSTICK_Config>
 8007e02:	4603      	mov	r3, r0
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d10f      	bne.n	8007e28 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2b0f      	cmp	r3, #15
 8007e0c:	d809      	bhi.n	8007e22 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007e0e:	2200      	movs	r2, #0
 8007e10:	6879      	ldr	r1, [r7, #4]
 8007e12:	f04f 30ff 	mov.w	r0, #4294967295
 8007e16:	f000 f932 	bl	800807e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8007e1a:	4a0a      	ldr	r2, [pc, #40]	; (8007e44 <HAL_InitTick+0x70>)
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	6013      	str	r3, [r2, #0]
 8007e20:	e007      	b.n	8007e32 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8007e22:	2301      	movs	r3, #1
 8007e24:	73fb      	strb	r3, [r7, #15]
 8007e26:	e004      	b.n	8007e32 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8007e28:	2301      	movs	r3, #1
 8007e2a:	73fb      	strb	r3, [r7, #15]
 8007e2c:	e001      	b.n	8007e32 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8007e2e:	2301      	movs	r3, #1
 8007e30:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8007e32:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e34:	4618      	mov	r0, r3
 8007e36:	3710      	adds	r7, #16
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	bd80      	pop	{r7, pc}
 8007e3c:	200000f0 	.word	0x200000f0
 8007e40:	20000000 	.word	0x20000000
 8007e44:	200000ec 	.word	0x200000ec

08007e48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007e48:	b480      	push	{r7}
 8007e4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007e4c:	4b05      	ldr	r3, [pc, #20]	; (8007e64 <HAL_IncTick+0x1c>)
 8007e4e:	681a      	ldr	r2, [r3, #0]
 8007e50:	4b05      	ldr	r3, [pc, #20]	; (8007e68 <HAL_IncTick+0x20>)
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	4413      	add	r3, r2
 8007e56:	4a03      	ldr	r2, [pc, #12]	; (8007e64 <HAL_IncTick+0x1c>)
 8007e58:	6013      	str	r3, [r2, #0]
}
 8007e5a:	bf00      	nop
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e62:	4770      	bx	lr
 8007e64:	2000106c 	.word	0x2000106c
 8007e68:	200000f0 	.word	0x200000f0

08007e6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007e6c:	b480      	push	{r7}
 8007e6e:	af00      	add	r7, sp, #0
  return uwTick;
 8007e70:	4b03      	ldr	r3, [pc, #12]	; (8007e80 <HAL_GetTick+0x14>)
 8007e72:	681b      	ldr	r3, [r3, #0]
}
 8007e74:	4618      	mov	r0, r3
 8007e76:	46bd      	mov	sp, r7
 8007e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7c:	4770      	bx	lr
 8007e7e:	bf00      	nop
 8007e80:	2000106c 	.word	0x2000106c

08007e84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b084      	sub	sp, #16
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007e8c:	f7ff ffee 	bl	8007e6c <HAL_GetTick>
 8007e90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e9c:	d004      	beq.n	8007ea8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8007e9e:	4b09      	ldr	r3, [pc, #36]	; (8007ec4 <HAL_Delay+0x40>)
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	68fa      	ldr	r2, [r7, #12]
 8007ea4:	4413      	add	r3, r2
 8007ea6:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8007ea8:	bf00      	nop
 8007eaa:	f7ff ffdf 	bl	8007e6c <HAL_GetTick>
 8007eae:	4602      	mov	r2, r0
 8007eb0:	68bb      	ldr	r3, [r7, #8]
 8007eb2:	1ad3      	subs	r3, r2, r3
 8007eb4:	68fa      	ldr	r2, [r7, #12]
 8007eb6:	429a      	cmp	r2, r3
 8007eb8:	d8f7      	bhi.n	8007eaa <HAL_Delay+0x26>
  {
  }
}
 8007eba:	bf00      	nop
 8007ebc:	3710      	adds	r7, #16
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	bd80      	pop	{r7, pc}
 8007ec2:	bf00      	nop
 8007ec4:	200000f0 	.word	0x200000f0

08007ec8 <__NVIC_SetPriorityGrouping>:
{
 8007ec8:	b480      	push	{r7}
 8007eca:	b085      	sub	sp, #20
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	f003 0307 	and.w	r3, r3, #7
 8007ed6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007ed8:	4b0c      	ldr	r3, [pc, #48]	; (8007f0c <__NVIC_SetPriorityGrouping+0x44>)
 8007eda:	68db      	ldr	r3, [r3, #12]
 8007edc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007ede:	68ba      	ldr	r2, [r7, #8]
 8007ee0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007ee4:	4013      	ands	r3, r2
 8007ee6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007eec:	68bb      	ldr	r3, [r7, #8]
 8007eee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007ef0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007ef4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007ef8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007efa:	4a04      	ldr	r2, [pc, #16]	; (8007f0c <__NVIC_SetPriorityGrouping+0x44>)
 8007efc:	68bb      	ldr	r3, [r7, #8]
 8007efe:	60d3      	str	r3, [r2, #12]
}
 8007f00:	bf00      	nop
 8007f02:	3714      	adds	r7, #20
 8007f04:	46bd      	mov	sp, r7
 8007f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0a:	4770      	bx	lr
 8007f0c:	e000ed00 	.word	0xe000ed00

08007f10 <__NVIC_GetPriorityGrouping>:
{
 8007f10:	b480      	push	{r7}
 8007f12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007f14:	4b04      	ldr	r3, [pc, #16]	; (8007f28 <__NVIC_GetPriorityGrouping+0x18>)
 8007f16:	68db      	ldr	r3, [r3, #12]
 8007f18:	0a1b      	lsrs	r3, r3, #8
 8007f1a:	f003 0307 	and.w	r3, r3, #7
}
 8007f1e:	4618      	mov	r0, r3
 8007f20:	46bd      	mov	sp, r7
 8007f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f26:	4770      	bx	lr
 8007f28:	e000ed00 	.word	0xe000ed00

08007f2c <__NVIC_EnableIRQ>:
{
 8007f2c:	b480      	push	{r7}
 8007f2e:	b083      	sub	sp, #12
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	4603      	mov	r3, r0
 8007f34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007f36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	db0b      	blt.n	8007f56 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007f3e:	79fb      	ldrb	r3, [r7, #7]
 8007f40:	f003 021f 	and.w	r2, r3, #31
 8007f44:	4907      	ldr	r1, [pc, #28]	; (8007f64 <__NVIC_EnableIRQ+0x38>)
 8007f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007f4a:	095b      	lsrs	r3, r3, #5
 8007f4c:	2001      	movs	r0, #1
 8007f4e:	fa00 f202 	lsl.w	r2, r0, r2
 8007f52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8007f56:	bf00      	nop
 8007f58:	370c      	adds	r7, #12
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f60:	4770      	bx	lr
 8007f62:	bf00      	nop
 8007f64:	e000e100 	.word	0xe000e100

08007f68 <__NVIC_SetPriority>:
{
 8007f68:	b480      	push	{r7}
 8007f6a:	b083      	sub	sp, #12
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	4603      	mov	r3, r0
 8007f70:	6039      	str	r1, [r7, #0]
 8007f72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007f74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	db0a      	blt.n	8007f92 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	b2da      	uxtb	r2, r3
 8007f80:	490c      	ldr	r1, [pc, #48]	; (8007fb4 <__NVIC_SetPriority+0x4c>)
 8007f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007f86:	0112      	lsls	r2, r2, #4
 8007f88:	b2d2      	uxtb	r2, r2
 8007f8a:	440b      	add	r3, r1
 8007f8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007f90:	e00a      	b.n	8007fa8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	b2da      	uxtb	r2, r3
 8007f96:	4908      	ldr	r1, [pc, #32]	; (8007fb8 <__NVIC_SetPriority+0x50>)
 8007f98:	79fb      	ldrb	r3, [r7, #7]
 8007f9a:	f003 030f 	and.w	r3, r3, #15
 8007f9e:	3b04      	subs	r3, #4
 8007fa0:	0112      	lsls	r2, r2, #4
 8007fa2:	b2d2      	uxtb	r2, r2
 8007fa4:	440b      	add	r3, r1
 8007fa6:	761a      	strb	r2, [r3, #24]
}
 8007fa8:	bf00      	nop
 8007faa:	370c      	adds	r7, #12
 8007fac:	46bd      	mov	sp, r7
 8007fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb2:	4770      	bx	lr
 8007fb4:	e000e100 	.word	0xe000e100
 8007fb8:	e000ed00 	.word	0xe000ed00

08007fbc <NVIC_EncodePriority>:
{
 8007fbc:	b480      	push	{r7}
 8007fbe:	b089      	sub	sp, #36	; 0x24
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	60f8      	str	r0, [r7, #12]
 8007fc4:	60b9      	str	r1, [r7, #8]
 8007fc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	f003 0307 	and.w	r3, r3, #7
 8007fce:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007fd0:	69fb      	ldr	r3, [r7, #28]
 8007fd2:	f1c3 0307 	rsb	r3, r3, #7
 8007fd6:	2b04      	cmp	r3, #4
 8007fd8:	bf28      	it	cs
 8007fda:	2304      	movcs	r3, #4
 8007fdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007fde:	69fb      	ldr	r3, [r7, #28]
 8007fe0:	3304      	adds	r3, #4
 8007fe2:	2b06      	cmp	r3, #6
 8007fe4:	d902      	bls.n	8007fec <NVIC_EncodePriority+0x30>
 8007fe6:	69fb      	ldr	r3, [r7, #28]
 8007fe8:	3b03      	subs	r3, #3
 8007fea:	e000      	b.n	8007fee <NVIC_EncodePriority+0x32>
 8007fec:	2300      	movs	r3, #0
 8007fee:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007ff0:	f04f 32ff 	mov.w	r2, #4294967295
 8007ff4:	69bb      	ldr	r3, [r7, #24]
 8007ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8007ffa:	43da      	mvns	r2, r3
 8007ffc:	68bb      	ldr	r3, [r7, #8]
 8007ffe:	401a      	ands	r2, r3
 8008000:	697b      	ldr	r3, [r7, #20]
 8008002:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008004:	f04f 31ff 	mov.w	r1, #4294967295
 8008008:	697b      	ldr	r3, [r7, #20]
 800800a:	fa01 f303 	lsl.w	r3, r1, r3
 800800e:	43d9      	mvns	r1, r3
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008014:	4313      	orrs	r3, r2
}
 8008016:	4618      	mov	r0, r3
 8008018:	3724      	adds	r7, #36	; 0x24
 800801a:	46bd      	mov	sp, r7
 800801c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008020:	4770      	bx	lr
	...

08008024 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b082      	sub	sp, #8
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	3b01      	subs	r3, #1
 8008030:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008034:	d301      	bcc.n	800803a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008036:	2301      	movs	r3, #1
 8008038:	e00f      	b.n	800805a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800803a:	4a0a      	ldr	r2, [pc, #40]	; (8008064 <SysTick_Config+0x40>)
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	3b01      	subs	r3, #1
 8008040:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008042:	210f      	movs	r1, #15
 8008044:	f04f 30ff 	mov.w	r0, #4294967295
 8008048:	f7ff ff8e 	bl	8007f68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800804c:	4b05      	ldr	r3, [pc, #20]	; (8008064 <SysTick_Config+0x40>)
 800804e:	2200      	movs	r2, #0
 8008050:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008052:	4b04      	ldr	r3, [pc, #16]	; (8008064 <SysTick_Config+0x40>)
 8008054:	2207      	movs	r2, #7
 8008056:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008058:	2300      	movs	r3, #0
}
 800805a:	4618      	mov	r0, r3
 800805c:	3708      	adds	r7, #8
 800805e:	46bd      	mov	sp, r7
 8008060:	bd80      	pop	{r7, pc}
 8008062:	bf00      	nop
 8008064:	e000e010 	.word	0xe000e010

08008068 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008068:	b580      	push	{r7, lr}
 800806a:	b082      	sub	sp, #8
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008070:	6878      	ldr	r0, [r7, #4]
 8008072:	f7ff ff29 	bl	8007ec8 <__NVIC_SetPriorityGrouping>
}
 8008076:	bf00      	nop
 8008078:	3708      	adds	r7, #8
 800807a:	46bd      	mov	sp, r7
 800807c:	bd80      	pop	{r7, pc}

0800807e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800807e:	b580      	push	{r7, lr}
 8008080:	b086      	sub	sp, #24
 8008082:	af00      	add	r7, sp, #0
 8008084:	4603      	mov	r3, r0
 8008086:	60b9      	str	r1, [r7, #8]
 8008088:	607a      	str	r2, [r7, #4]
 800808a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800808c:	2300      	movs	r3, #0
 800808e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8008090:	f7ff ff3e 	bl	8007f10 <__NVIC_GetPriorityGrouping>
 8008094:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008096:	687a      	ldr	r2, [r7, #4]
 8008098:	68b9      	ldr	r1, [r7, #8]
 800809a:	6978      	ldr	r0, [r7, #20]
 800809c:	f7ff ff8e 	bl	8007fbc <NVIC_EncodePriority>
 80080a0:	4602      	mov	r2, r0
 80080a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80080a6:	4611      	mov	r1, r2
 80080a8:	4618      	mov	r0, r3
 80080aa:	f7ff ff5d 	bl	8007f68 <__NVIC_SetPriority>
}
 80080ae:	bf00      	nop
 80080b0:	3718      	adds	r7, #24
 80080b2:	46bd      	mov	sp, r7
 80080b4:	bd80      	pop	{r7, pc}

080080b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80080b6:	b580      	push	{r7, lr}
 80080b8:	b082      	sub	sp, #8
 80080ba:	af00      	add	r7, sp, #0
 80080bc:	4603      	mov	r3, r0
 80080be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80080c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80080c4:	4618      	mov	r0, r3
 80080c6:	f7ff ff31 	bl	8007f2c <__NVIC_EnableIRQ>
}
 80080ca:	bf00      	nop
 80080cc:	3708      	adds	r7, #8
 80080ce:	46bd      	mov	sp, r7
 80080d0:	bd80      	pop	{r7, pc}

080080d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80080d2:	b580      	push	{r7, lr}
 80080d4:	b082      	sub	sp, #8
 80080d6:	af00      	add	r7, sp, #0
 80080d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80080da:	6878      	ldr	r0, [r7, #4]
 80080dc:	f7ff ffa2 	bl	8008024 <SysTick_Config>
 80080e0:	4603      	mov	r3, r0
}
 80080e2:	4618      	mov	r0, r3
 80080e4:	3708      	adds	r7, #8
 80080e6:	46bd      	mov	sp, r7
 80080e8:	bd80      	pop	{r7, pc}
	...

080080ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80080ec:	b480      	push	{r7}
 80080ee:	b087      	sub	sp, #28
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
 80080f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80080f6:	2300      	movs	r3, #0
 80080f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80080fa:	e154      	b.n	80083a6 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80080fc:	683b      	ldr	r3, [r7, #0]
 80080fe:	681a      	ldr	r2, [r3, #0]
 8008100:	2101      	movs	r1, #1
 8008102:	697b      	ldr	r3, [r7, #20]
 8008104:	fa01 f303 	lsl.w	r3, r1, r3
 8008108:	4013      	ands	r3, r2
 800810a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	2b00      	cmp	r3, #0
 8008110:	f000 8146 	beq.w	80083a0 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008114:	683b      	ldr	r3, [r7, #0]
 8008116:	685b      	ldr	r3, [r3, #4]
 8008118:	2b01      	cmp	r3, #1
 800811a:	d00b      	beq.n	8008134 <HAL_GPIO_Init+0x48>
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	685b      	ldr	r3, [r3, #4]
 8008120:	2b02      	cmp	r3, #2
 8008122:	d007      	beq.n	8008134 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008124:	683b      	ldr	r3, [r7, #0]
 8008126:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008128:	2b11      	cmp	r3, #17
 800812a:	d003      	beq.n	8008134 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	685b      	ldr	r3, [r3, #4]
 8008130:	2b12      	cmp	r3, #18
 8008132:	d130      	bne.n	8008196 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	689b      	ldr	r3, [r3, #8]
 8008138:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800813a:	697b      	ldr	r3, [r7, #20]
 800813c:	005b      	lsls	r3, r3, #1
 800813e:	2203      	movs	r2, #3
 8008140:	fa02 f303 	lsl.w	r3, r2, r3
 8008144:	43db      	mvns	r3, r3
 8008146:	693a      	ldr	r2, [r7, #16]
 8008148:	4013      	ands	r3, r2
 800814a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	68da      	ldr	r2, [r3, #12]
 8008150:	697b      	ldr	r3, [r7, #20]
 8008152:	005b      	lsls	r3, r3, #1
 8008154:	fa02 f303 	lsl.w	r3, r2, r3
 8008158:	693a      	ldr	r2, [r7, #16]
 800815a:	4313      	orrs	r3, r2
 800815c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	693a      	ldr	r2, [r7, #16]
 8008162:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	685b      	ldr	r3, [r3, #4]
 8008168:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800816a:	2201      	movs	r2, #1
 800816c:	697b      	ldr	r3, [r7, #20]
 800816e:	fa02 f303 	lsl.w	r3, r2, r3
 8008172:	43db      	mvns	r3, r3
 8008174:	693a      	ldr	r2, [r7, #16]
 8008176:	4013      	ands	r3, r2
 8008178:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	685b      	ldr	r3, [r3, #4]
 800817e:	091b      	lsrs	r3, r3, #4
 8008180:	f003 0201 	and.w	r2, r3, #1
 8008184:	697b      	ldr	r3, [r7, #20]
 8008186:	fa02 f303 	lsl.w	r3, r2, r3
 800818a:	693a      	ldr	r2, [r7, #16]
 800818c:	4313      	orrs	r3, r2
 800818e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	693a      	ldr	r2, [r7, #16]
 8008194:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	68db      	ldr	r3, [r3, #12]
 800819a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800819c:	697b      	ldr	r3, [r7, #20]
 800819e:	005b      	lsls	r3, r3, #1
 80081a0:	2203      	movs	r2, #3
 80081a2:	fa02 f303 	lsl.w	r3, r2, r3
 80081a6:	43db      	mvns	r3, r3
 80081a8:	693a      	ldr	r2, [r7, #16]
 80081aa:	4013      	ands	r3, r2
 80081ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	689a      	ldr	r2, [r3, #8]
 80081b2:	697b      	ldr	r3, [r7, #20]
 80081b4:	005b      	lsls	r3, r3, #1
 80081b6:	fa02 f303 	lsl.w	r3, r2, r3
 80081ba:	693a      	ldr	r2, [r7, #16]
 80081bc:	4313      	orrs	r3, r2
 80081be:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	693a      	ldr	r2, [r7, #16]
 80081c4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	685b      	ldr	r3, [r3, #4]
 80081ca:	2b02      	cmp	r3, #2
 80081cc:	d003      	beq.n	80081d6 <HAL_GPIO_Init+0xea>
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	685b      	ldr	r3, [r3, #4]
 80081d2:	2b12      	cmp	r3, #18
 80081d4:	d123      	bne.n	800821e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80081d6:	697b      	ldr	r3, [r7, #20]
 80081d8:	08da      	lsrs	r2, r3, #3
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	3208      	adds	r2, #8
 80081de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80081e4:	697b      	ldr	r3, [r7, #20]
 80081e6:	f003 0307 	and.w	r3, r3, #7
 80081ea:	009b      	lsls	r3, r3, #2
 80081ec:	220f      	movs	r2, #15
 80081ee:	fa02 f303 	lsl.w	r3, r2, r3
 80081f2:	43db      	mvns	r3, r3
 80081f4:	693a      	ldr	r2, [r7, #16]
 80081f6:	4013      	ands	r3, r2
 80081f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	691a      	ldr	r2, [r3, #16]
 80081fe:	697b      	ldr	r3, [r7, #20]
 8008200:	f003 0307 	and.w	r3, r3, #7
 8008204:	009b      	lsls	r3, r3, #2
 8008206:	fa02 f303 	lsl.w	r3, r2, r3
 800820a:	693a      	ldr	r2, [r7, #16]
 800820c:	4313      	orrs	r3, r2
 800820e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8008210:	697b      	ldr	r3, [r7, #20]
 8008212:	08da      	lsrs	r2, r3, #3
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	3208      	adds	r2, #8
 8008218:	6939      	ldr	r1, [r7, #16]
 800821a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8008224:	697b      	ldr	r3, [r7, #20]
 8008226:	005b      	lsls	r3, r3, #1
 8008228:	2203      	movs	r2, #3
 800822a:	fa02 f303 	lsl.w	r3, r2, r3
 800822e:	43db      	mvns	r3, r3
 8008230:	693a      	ldr	r2, [r7, #16]
 8008232:	4013      	ands	r3, r2
 8008234:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	685b      	ldr	r3, [r3, #4]
 800823a:	f003 0203 	and.w	r2, r3, #3
 800823e:	697b      	ldr	r3, [r7, #20]
 8008240:	005b      	lsls	r3, r3, #1
 8008242:	fa02 f303 	lsl.w	r3, r2, r3
 8008246:	693a      	ldr	r2, [r7, #16]
 8008248:	4313      	orrs	r3, r2
 800824a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	693a      	ldr	r2, [r7, #16]
 8008250:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	685b      	ldr	r3, [r3, #4]
 8008256:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800825a:	2b00      	cmp	r3, #0
 800825c:	f000 80a0 	beq.w	80083a0 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008260:	4b58      	ldr	r3, [pc, #352]	; (80083c4 <HAL_GPIO_Init+0x2d8>)
 8008262:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008264:	4a57      	ldr	r2, [pc, #348]	; (80083c4 <HAL_GPIO_Init+0x2d8>)
 8008266:	f043 0301 	orr.w	r3, r3, #1
 800826a:	6613      	str	r3, [r2, #96]	; 0x60
 800826c:	4b55      	ldr	r3, [pc, #340]	; (80083c4 <HAL_GPIO_Init+0x2d8>)
 800826e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008270:	f003 0301 	and.w	r3, r3, #1
 8008274:	60bb      	str	r3, [r7, #8]
 8008276:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8008278:	4a53      	ldr	r2, [pc, #332]	; (80083c8 <HAL_GPIO_Init+0x2dc>)
 800827a:	697b      	ldr	r3, [r7, #20]
 800827c:	089b      	lsrs	r3, r3, #2
 800827e:	3302      	adds	r3, #2
 8008280:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008284:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8008286:	697b      	ldr	r3, [r7, #20]
 8008288:	f003 0303 	and.w	r3, r3, #3
 800828c:	009b      	lsls	r3, r3, #2
 800828e:	220f      	movs	r2, #15
 8008290:	fa02 f303 	lsl.w	r3, r2, r3
 8008294:	43db      	mvns	r3, r3
 8008296:	693a      	ldr	r2, [r7, #16]
 8008298:	4013      	ands	r3, r2
 800829a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80082a2:	d019      	beq.n	80082d8 <HAL_GPIO_Init+0x1ec>
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	4a49      	ldr	r2, [pc, #292]	; (80083cc <HAL_GPIO_Init+0x2e0>)
 80082a8:	4293      	cmp	r3, r2
 80082aa:	d013      	beq.n	80082d4 <HAL_GPIO_Init+0x1e8>
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	4a48      	ldr	r2, [pc, #288]	; (80083d0 <HAL_GPIO_Init+0x2e4>)
 80082b0:	4293      	cmp	r3, r2
 80082b2:	d00d      	beq.n	80082d0 <HAL_GPIO_Init+0x1e4>
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	4a47      	ldr	r2, [pc, #284]	; (80083d4 <HAL_GPIO_Init+0x2e8>)
 80082b8:	4293      	cmp	r3, r2
 80082ba:	d007      	beq.n	80082cc <HAL_GPIO_Init+0x1e0>
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	4a46      	ldr	r2, [pc, #280]	; (80083d8 <HAL_GPIO_Init+0x2ec>)
 80082c0:	4293      	cmp	r3, r2
 80082c2:	d101      	bne.n	80082c8 <HAL_GPIO_Init+0x1dc>
 80082c4:	2304      	movs	r3, #4
 80082c6:	e008      	b.n	80082da <HAL_GPIO_Init+0x1ee>
 80082c8:	2307      	movs	r3, #7
 80082ca:	e006      	b.n	80082da <HAL_GPIO_Init+0x1ee>
 80082cc:	2303      	movs	r3, #3
 80082ce:	e004      	b.n	80082da <HAL_GPIO_Init+0x1ee>
 80082d0:	2302      	movs	r3, #2
 80082d2:	e002      	b.n	80082da <HAL_GPIO_Init+0x1ee>
 80082d4:	2301      	movs	r3, #1
 80082d6:	e000      	b.n	80082da <HAL_GPIO_Init+0x1ee>
 80082d8:	2300      	movs	r3, #0
 80082da:	697a      	ldr	r2, [r7, #20]
 80082dc:	f002 0203 	and.w	r2, r2, #3
 80082e0:	0092      	lsls	r2, r2, #2
 80082e2:	4093      	lsls	r3, r2
 80082e4:	693a      	ldr	r2, [r7, #16]
 80082e6:	4313      	orrs	r3, r2
 80082e8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80082ea:	4937      	ldr	r1, [pc, #220]	; (80083c8 <HAL_GPIO_Init+0x2dc>)
 80082ec:	697b      	ldr	r3, [r7, #20]
 80082ee:	089b      	lsrs	r3, r3, #2
 80082f0:	3302      	adds	r3, #2
 80082f2:	693a      	ldr	r2, [r7, #16]
 80082f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80082f8:	4b38      	ldr	r3, [pc, #224]	; (80083dc <HAL_GPIO_Init+0x2f0>)
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	43db      	mvns	r3, r3
 8008302:	693a      	ldr	r2, [r7, #16]
 8008304:	4013      	ands	r3, r2
 8008306:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008308:	683b      	ldr	r3, [r7, #0]
 800830a:	685b      	ldr	r3, [r3, #4]
 800830c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008310:	2b00      	cmp	r3, #0
 8008312:	d003      	beq.n	800831c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8008314:	693a      	ldr	r2, [r7, #16]
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	4313      	orrs	r3, r2
 800831a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800831c:	4a2f      	ldr	r2, [pc, #188]	; (80083dc <HAL_GPIO_Init+0x2f0>)
 800831e:	693b      	ldr	r3, [r7, #16]
 8008320:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8008322:	4b2e      	ldr	r3, [pc, #184]	; (80083dc <HAL_GPIO_Init+0x2f0>)
 8008324:	685b      	ldr	r3, [r3, #4]
 8008326:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	43db      	mvns	r3, r3
 800832c:	693a      	ldr	r2, [r7, #16]
 800832e:	4013      	ands	r3, r2
 8008330:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	685b      	ldr	r3, [r3, #4]
 8008336:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800833a:	2b00      	cmp	r3, #0
 800833c:	d003      	beq.n	8008346 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800833e:	693a      	ldr	r2, [r7, #16]
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	4313      	orrs	r3, r2
 8008344:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8008346:	4a25      	ldr	r2, [pc, #148]	; (80083dc <HAL_GPIO_Init+0x2f0>)
 8008348:	693b      	ldr	r3, [r7, #16]
 800834a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800834c:	4b23      	ldr	r3, [pc, #140]	; (80083dc <HAL_GPIO_Init+0x2f0>)
 800834e:	689b      	ldr	r3, [r3, #8]
 8008350:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	43db      	mvns	r3, r3
 8008356:	693a      	ldr	r2, [r7, #16]
 8008358:	4013      	ands	r3, r2
 800835a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800835c:	683b      	ldr	r3, [r7, #0]
 800835e:	685b      	ldr	r3, [r3, #4]
 8008360:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008364:	2b00      	cmp	r3, #0
 8008366:	d003      	beq.n	8008370 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8008368:	693a      	ldr	r2, [r7, #16]
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	4313      	orrs	r3, r2
 800836e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8008370:	4a1a      	ldr	r2, [pc, #104]	; (80083dc <HAL_GPIO_Init+0x2f0>)
 8008372:	693b      	ldr	r3, [r7, #16]
 8008374:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8008376:	4b19      	ldr	r3, [pc, #100]	; (80083dc <HAL_GPIO_Init+0x2f0>)
 8008378:	68db      	ldr	r3, [r3, #12]
 800837a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	43db      	mvns	r3, r3
 8008380:	693a      	ldr	r2, [r7, #16]
 8008382:	4013      	ands	r3, r2
 8008384:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008386:	683b      	ldr	r3, [r7, #0]
 8008388:	685b      	ldr	r3, [r3, #4]
 800838a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800838e:	2b00      	cmp	r3, #0
 8008390:	d003      	beq.n	800839a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8008392:	693a      	ldr	r2, [r7, #16]
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	4313      	orrs	r3, r2
 8008398:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800839a:	4a10      	ldr	r2, [pc, #64]	; (80083dc <HAL_GPIO_Init+0x2f0>)
 800839c:	693b      	ldr	r3, [r7, #16]
 800839e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80083a0:	697b      	ldr	r3, [r7, #20]
 80083a2:	3301      	adds	r3, #1
 80083a4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80083a6:	683b      	ldr	r3, [r7, #0]
 80083a8:	681a      	ldr	r2, [r3, #0]
 80083aa:	697b      	ldr	r3, [r7, #20]
 80083ac:	fa22 f303 	lsr.w	r3, r2, r3
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	f47f aea3 	bne.w	80080fc <HAL_GPIO_Init+0x10>
  }
}
 80083b6:	bf00      	nop
 80083b8:	371c      	adds	r7, #28
 80083ba:	46bd      	mov	sp, r7
 80083bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c0:	4770      	bx	lr
 80083c2:	bf00      	nop
 80083c4:	40021000 	.word	0x40021000
 80083c8:	40010000 	.word	0x40010000
 80083cc:	48000400 	.word	0x48000400
 80083d0:	48000800 	.word	0x48000800
 80083d4:	48000c00 	.word	0x48000c00
 80083d8:	48001000 	.word	0x48001000
 80083dc:	40010400 	.word	0x40010400

080083e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80083e0:	b480      	push	{r7}
 80083e2:	b085      	sub	sp, #20
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
 80083e8:	460b      	mov	r3, r1
 80083ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	691a      	ldr	r2, [r3, #16]
 80083f0:	887b      	ldrh	r3, [r7, #2]
 80083f2:	4013      	ands	r3, r2
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d002      	beq.n	80083fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80083f8:	2301      	movs	r3, #1
 80083fa:	73fb      	strb	r3, [r7, #15]
 80083fc:	e001      	b.n	8008402 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80083fe:	2300      	movs	r3, #0
 8008400:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008402:	7bfb      	ldrb	r3, [r7, #15]
}
 8008404:	4618      	mov	r0, r3
 8008406:	3714      	adds	r7, #20
 8008408:	46bd      	mov	sp, r7
 800840a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840e:	4770      	bx	lr

08008410 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008410:	b480      	push	{r7}
 8008412:	b083      	sub	sp, #12
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
 8008418:	460b      	mov	r3, r1
 800841a:	807b      	strh	r3, [r7, #2]
 800841c:	4613      	mov	r3, r2
 800841e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008420:	787b      	ldrb	r3, [r7, #1]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d003      	beq.n	800842e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8008426:	887a      	ldrh	r2, [r7, #2]
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800842c:	e002      	b.n	8008434 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800842e:	887a      	ldrh	r2, [r7, #2]
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	629a      	str	r2, [r3, #40]	; 0x28
}
 8008434:	bf00      	nop
 8008436:	370c      	adds	r7, #12
 8008438:	46bd      	mov	sp, r7
 800843a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843e:	4770      	bx	lr

08008440 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b082      	sub	sp, #8
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d101      	bne.n	8008452 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800844e:	2301      	movs	r3, #1
 8008450:	e081      	b.n	8008556 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008458:	b2db      	uxtb	r3, r3
 800845a:	2b00      	cmp	r3, #0
 800845c:	d106      	bne.n	800846c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	2200      	movs	r2, #0
 8008462:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8008466:	6878      	ldr	r0, [r7, #4]
 8008468:	f7f9 fd6c 	bl	8001f44 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2224      	movs	r2, #36	; 0x24
 8008470:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	681a      	ldr	r2, [r3, #0]
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	f022 0201 	bic.w	r2, r2, #1
 8008482:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	685a      	ldr	r2, [r3, #4]
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008490:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	689a      	ldr	r2, [r3, #8]
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80084a0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	68db      	ldr	r3, [r3, #12]
 80084a6:	2b01      	cmp	r3, #1
 80084a8:	d107      	bne.n	80084ba <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	689a      	ldr	r2, [r3, #8]
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80084b6:	609a      	str	r2, [r3, #8]
 80084b8:	e006      	b.n	80084c8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	689a      	ldr	r2, [r3, #8]
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80084c6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	68db      	ldr	r3, [r3, #12]
 80084cc:	2b02      	cmp	r3, #2
 80084ce:	d104      	bne.n	80084da <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80084d8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	685b      	ldr	r3, [r3, #4]
 80084e0:	687a      	ldr	r2, [r7, #4]
 80084e2:	6812      	ldr	r2, [r2, #0]
 80084e4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80084e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80084ec:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	68da      	ldr	r2, [r3, #12]
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80084fc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	691a      	ldr	r2, [r3, #16]
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	695b      	ldr	r3, [r3, #20]
 8008506:	ea42 0103 	orr.w	r1, r2, r3
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	699b      	ldr	r3, [r3, #24]
 800850e:	021a      	lsls	r2, r3, #8
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	430a      	orrs	r2, r1
 8008516:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	69d9      	ldr	r1, [r3, #28]
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	6a1a      	ldr	r2, [r3, #32]
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	430a      	orrs	r2, r1
 8008526:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	681a      	ldr	r2, [r3, #0]
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	f042 0201 	orr.w	r2, r2, #1
 8008536:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	2200      	movs	r2, #0
 800853c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	2220      	movs	r2, #32
 8008542:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	2200      	movs	r2, #0
 800854a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	2200      	movs	r2, #0
 8008550:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8008554:	2300      	movs	r3, #0
}
 8008556:	4618      	mov	r0, r3
 8008558:	3708      	adds	r7, #8
 800855a:	46bd      	mov	sp, r7
 800855c:	bd80      	pop	{r7, pc}
	...

08008560 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008560:	b580      	push	{r7, lr}
 8008562:	b088      	sub	sp, #32
 8008564:	af02      	add	r7, sp, #8
 8008566:	60f8      	str	r0, [r7, #12]
 8008568:	607a      	str	r2, [r7, #4]
 800856a:	461a      	mov	r2, r3
 800856c:	460b      	mov	r3, r1
 800856e:	817b      	strh	r3, [r7, #10]
 8008570:	4613      	mov	r3, r2
 8008572:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800857a:	b2db      	uxtb	r3, r3
 800857c:	2b20      	cmp	r3, #32
 800857e:	f040 80da 	bne.w	8008736 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008588:	2b01      	cmp	r3, #1
 800858a:	d101      	bne.n	8008590 <HAL_I2C_Master_Transmit+0x30>
 800858c:	2302      	movs	r3, #2
 800858e:	e0d3      	b.n	8008738 <HAL_I2C_Master_Transmit+0x1d8>
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	2201      	movs	r2, #1
 8008594:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008598:	f7ff fc68 	bl	8007e6c <HAL_GetTick>
 800859c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800859e:	697b      	ldr	r3, [r7, #20]
 80085a0:	9300      	str	r3, [sp, #0]
 80085a2:	2319      	movs	r3, #25
 80085a4:	2201      	movs	r2, #1
 80085a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80085aa:	68f8      	ldr	r0, [r7, #12]
 80085ac:	f000 f8f0 	bl	8008790 <I2C_WaitOnFlagUntilTimeout>
 80085b0:	4603      	mov	r3, r0
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d001      	beq.n	80085ba <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80085b6:	2301      	movs	r3, #1
 80085b8:	e0be      	b.n	8008738 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	2221      	movs	r2, #33	; 0x21
 80085be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	2210      	movs	r2, #16
 80085c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	2200      	movs	r2, #0
 80085ce:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	687a      	ldr	r2, [r7, #4]
 80085d4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	893a      	ldrh	r2, [r7, #8]
 80085da:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	2200      	movs	r2, #0
 80085e0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80085e6:	b29b      	uxth	r3, r3
 80085e8:	2bff      	cmp	r3, #255	; 0xff
 80085ea:	d90e      	bls.n	800860a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	22ff      	movs	r2, #255	; 0xff
 80085f0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80085f6:	b2da      	uxtb	r2, r3
 80085f8:	8979      	ldrh	r1, [r7, #10]
 80085fa:	4b51      	ldr	r3, [pc, #324]	; (8008740 <HAL_I2C_Master_Transmit+0x1e0>)
 80085fc:	9300      	str	r3, [sp, #0]
 80085fe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008602:	68f8      	ldr	r0, [r7, #12]
 8008604:	f000 f9e6 	bl	80089d4 <I2C_TransferConfig>
 8008608:	e06c      	b.n	80086e4 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800860e:	b29a      	uxth	r2, r3
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008618:	b2da      	uxtb	r2, r3
 800861a:	8979      	ldrh	r1, [r7, #10]
 800861c:	4b48      	ldr	r3, [pc, #288]	; (8008740 <HAL_I2C_Master_Transmit+0x1e0>)
 800861e:	9300      	str	r3, [sp, #0]
 8008620:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008624:	68f8      	ldr	r0, [r7, #12]
 8008626:	f000 f9d5 	bl	80089d4 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800862a:	e05b      	b.n	80086e4 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800862c:	697a      	ldr	r2, [r7, #20]
 800862e:	6a39      	ldr	r1, [r7, #32]
 8008630:	68f8      	ldr	r0, [r7, #12]
 8008632:	f000 f8ed 	bl	8008810 <I2C_WaitOnTXISFlagUntilTimeout>
 8008636:	4603      	mov	r3, r0
 8008638:	2b00      	cmp	r3, #0
 800863a:	d001      	beq.n	8008640 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800863c:	2301      	movs	r3, #1
 800863e:	e07b      	b.n	8008738 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008644:	781a      	ldrb	r2, [r3, #0]
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008650:	1c5a      	adds	r2, r3, #1
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800865a:	b29b      	uxth	r3, r3
 800865c:	3b01      	subs	r3, #1
 800865e:	b29a      	uxth	r2, r3
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008668:	3b01      	subs	r3, #1
 800866a:	b29a      	uxth	r2, r3
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008674:	b29b      	uxth	r3, r3
 8008676:	2b00      	cmp	r3, #0
 8008678:	d034      	beq.n	80086e4 <HAL_I2C_Master_Transmit+0x184>
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800867e:	2b00      	cmp	r3, #0
 8008680:	d130      	bne.n	80086e4 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008682:	697b      	ldr	r3, [r7, #20]
 8008684:	9300      	str	r3, [sp, #0]
 8008686:	6a3b      	ldr	r3, [r7, #32]
 8008688:	2200      	movs	r2, #0
 800868a:	2180      	movs	r1, #128	; 0x80
 800868c:	68f8      	ldr	r0, [r7, #12]
 800868e:	f000 f87f 	bl	8008790 <I2C_WaitOnFlagUntilTimeout>
 8008692:	4603      	mov	r3, r0
 8008694:	2b00      	cmp	r3, #0
 8008696:	d001      	beq.n	800869c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8008698:	2301      	movs	r3, #1
 800869a:	e04d      	b.n	8008738 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086a0:	b29b      	uxth	r3, r3
 80086a2:	2bff      	cmp	r3, #255	; 0xff
 80086a4:	d90e      	bls.n	80086c4 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	22ff      	movs	r2, #255	; 0xff
 80086aa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80086b0:	b2da      	uxtb	r2, r3
 80086b2:	8979      	ldrh	r1, [r7, #10]
 80086b4:	2300      	movs	r3, #0
 80086b6:	9300      	str	r3, [sp, #0]
 80086b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80086bc:	68f8      	ldr	r0, [r7, #12]
 80086be:	f000 f989 	bl	80089d4 <I2C_TransferConfig>
 80086c2:	e00f      	b.n	80086e4 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086c8:	b29a      	uxth	r2, r3
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80086d2:	b2da      	uxtb	r2, r3
 80086d4:	8979      	ldrh	r1, [r7, #10]
 80086d6:	2300      	movs	r3, #0
 80086d8:	9300      	str	r3, [sp, #0]
 80086da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80086de:	68f8      	ldr	r0, [r7, #12]
 80086e0:	f000 f978 	bl	80089d4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086e8:	b29b      	uxth	r3, r3
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d19e      	bne.n	800862c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80086ee:	697a      	ldr	r2, [r7, #20]
 80086f0:	6a39      	ldr	r1, [r7, #32]
 80086f2:	68f8      	ldr	r0, [r7, #12]
 80086f4:	f000 f8cc 	bl	8008890 <I2C_WaitOnSTOPFlagUntilTimeout>
 80086f8:	4603      	mov	r3, r0
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d001      	beq.n	8008702 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80086fe:	2301      	movs	r3, #1
 8008700:	e01a      	b.n	8008738 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	2220      	movs	r2, #32
 8008708:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	6859      	ldr	r1, [r3, #4]
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	681a      	ldr	r2, [r3, #0]
 8008714:	4b0b      	ldr	r3, [pc, #44]	; (8008744 <HAL_I2C_Master_Transmit+0x1e4>)
 8008716:	400b      	ands	r3, r1
 8008718:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	2220      	movs	r2, #32
 800871e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	2200      	movs	r2, #0
 8008726:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	2200      	movs	r2, #0
 800872e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008732:	2300      	movs	r3, #0
 8008734:	e000      	b.n	8008738 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8008736:	2302      	movs	r3, #2
  }
}
 8008738:	4618      	mov	r0, r3
 800873a:	3718      	adds	r7, #24
 800873c:	46bd      	mov	sp, r7
 800873e:	bd80      	pop	{r7, pc}
 8008740:	80002000 	.word	0x80002000
 8008744:	fe00e800 	.word	0xfe00e800

08008748 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8008748:	b480      	push	{r7}
 800874a:	b083      	sub	sp, #12
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	699b      	ldr	r3, [r3, #24]
 8008756:	f003 0302 	and.w	r3, r3, #2
 800875a:	2b02      	cmp	r3, #2
 800875c:	d103      	bne.n	8008766 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	2200      	movs	r2, #0
 8008764:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	699b      	ldr	r3, [r3, #24]
 800876c:	f003 0301 	and.w	r3, r3, #1
 8008770:	2b01      	cmp	r3, #1
 8008772:	d007      	beq.n	8008784 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	699a      	ldr	r2, [r3, #24]
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	f042 0201 	orr.w	r2, r2, #1
 8008782:	619a      	str	r2, [r3, #24]
  }
}
 8008784:	bf00      	nop
 8008786:	370c      	adds	r7, #12
 8008788:	46bd      	mov	sp, r7
 800878a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878e:	4770      	bx	lr

08008790 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008790:	b580      	push	{r7, lr}
 8008792:	b084      	sub	sp, #16
 8008794:	af00      	add	r7, sp, #0
 8008796:	60f8      	str	r0, [r7, #12]
 8008798:	60b9      	str	r1, [r7, #8]
 800879a:	603b      	str	r3, [r7, #0]
 800879c:	4613      	mov	r3, r2
 800879e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80087a0:	e022      	b.n	80087e8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087a8:	d01e      	beq.n	80087e8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80087aa:	f7ff fb5f 	bl	8007e6c <HAL_GetTick>
 80087ae:	4602      	mov	r2, r0
 80087b0:	69bb      	ldr	r3, [r7, #24]
 80087b2:	1ad3      	subs	r3, r2, r3
 80087b4:	683a      	ldr	r2, [r7, #0]
 80087b6:	429a      	cmp	r2, r3
 80087b8:	d302      	bcc.n	80087c0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80087ba:	683b      	ldr	r3, [r7, #0]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d113      	bne.n	80087e8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087c4:	f043 0220 	orr.w	r2, r3, #32
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	2220      	movs	r2, #32
 80087d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	2200      	movs	r2, #0
 80087d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	2200      	movs	r2, #0
 80087e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80087e4:	2301      	movs	r3, #1
 80087e6:	e00f      	b.n	8008808 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	699a      	ldr	r2, [r3, #24]
 80087ee:	68bb      	ldr	r3, [r7, #8]
 80087f0:	4013      	ands	r3, r2
 80087f2:	68ba      	ldr	r2, [r7, #8]
 80087f4:	429a      	cmp	r2, r3
 80087f6:	bf0c      	ite	eq
 80087f8:	2301      	moveq	r3, #1
 80087fa:	2300      	movne	r3, #0
 80087fc:	b2db      	uxtb	r3, r3
 80087fe:	461a      	mov	r2, r3
 8008800:	79fb      	ldrb	r3, [r7, #7]
 8008802:	429a      	cmp	r2, r3
 8008804:	d0cd      	beq.n	80087a2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008806:	2300      	movs	r3, #0
}
 8008808:	4618      	mov	r0, r3
 800880a:	3710      	adds	r7, #16
 800880c:	46bd      	mov	sp, r7
 800880e:	bd80      	pop	{r7, pc}

08008810 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008810:	b580      	push	{r7, lr}
 8008812:	b084      	sub	sp, #16
 8008814:	af00      	add	r7, sp, #0
 8008816:	60f8      	str	r0, [r7, #12]
 8008818:	60b9      	str	r1, [r7, #8]
 800881a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800881c:	e02c      	b.n	8008878 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800881e:	687a      	ldr	r2, [r7, #4]
 8008820:	68b9      	ldr	r1, [r7, #8]
 8008822:	68f8      	ldr	r0, [r7, #12]
 8008824:	f000 f870 	bl	8008908 <I2C_IsAcknowledgeFailed>
 8008828:	4603      	mov	r3, r0
 800882a:	2b00      	cmp	r3, #0
 800882c:	d001      	beq.n	8008832 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800882e:	2301      	movs	r3, #1
 8008830:	e02a      	b.n	8008888 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008832:	68bb      	ldr	r3, [r7, #8]
 8008834:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008838:	d01e      	beq.n	8008878 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800883a:	f7ff fb17 	bl	8007e6c <HAL_GetTick>
 800883e:	4602      	mov	r2, r0
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	1ad3      	subs	r3, r2, r3
 8008844:	68ba      	ldr	r2, [r7, #8]
 8008846:	429a      	cmp	r2, r3
 8008848:	d302      	bcc.n	8008850 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800884a:	68bb      	ldr	r3, [r7, #8]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d113      	bne.n	8008878 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008854:	f043 0220 	orr.w	r2, r3, #32
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	2220      	movs	r2, #32
 8008860:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	2200      	movs	r2, #0
 8008868:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	2200      	movs	r2, #0
 8008870:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8008874:	2301      	movs	r3, #1
 8008876:	e007      	b.n	8008888 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	699b      	ldr	r3, [r3, #24]
 800887e:	f003 0302 	and.w	r3, r3, #2
 8008882:	2b02      	cmp	r3, #2
 8008884:	d1cb      	bne.n	800881e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008886:	2300      	movs	r3, #0
}
 8008888:	4618      	mov	r0, r3
 800888a:	3710      	adds	r7, #16
 800888c:	46bd      	mov	sp, r7
 800888e:	bd80      	pop	{r7, pc}

08008890 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008890:	b580      	push	{r7, lr}
 8008892:	b084      	sub	sp, #16
 8008894:	af00      	add	r7, sp, #0
 8008896:	60f8      	str	r0, [r7, #12]
 8008898:	60b9      	str	r1, [r7, #8]
 800889a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800889c:	e028      	b.n	80088f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800889e:	687a      	ldr	r2, [r7, #4]
 80088a0:	68b9      	ldr	r1, [r7, #8]
 80088a2:	68f8      	ldr	r0, [r7, #12]
 80088a4:	f000 f830 	bl	8008908 <I2C_IsAcknowledgeFailed>
 80088a8:	4603      	mov	r3, r0
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d001      	beq.n	80088b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80088ae:	2301      	movs	r3, #1
 80088b0:	e026      	b.n	8008900 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80088b2:	f7ff fadb 	bl	8007e6c <HAL_GetTick>
 80088b6:	4602      	mov	r2, r0
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	1ad3      	subs	r3, r2, r3
 80088bc:	68ba      	ldr	r2, [r7, #8]
 80088be:	429a      	cmp	r2, r3
 80088c0:	d302      	bcc.n	80088c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80088c2:	68bb      	ldr	r3, [r7, #8]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d113      	bne.n	80088f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088cc:	f043 0220 	orr.w	r2, r3, #32
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	2220      	movs	r2, #32
 80088d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	2200      	movs	r2, #0
 80088e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	2200      	movs	r2, #0
 80088e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80088ec:	2301      	movs	r3, #1
 80088ee:	e007      	b.n	8008900 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	699b      	ldr	r3, [r3, #24]
 80088f6:	f003 0320 	and.w	r3, r3, #32
 80088fa:	2b20      	cmp	r3, #32
 80088fc:	d1cf      	bne.n	800889e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80088fe:	2300      	movs	r3, #0
}
 8008900:	4618      	mov	r0, r3
 8008902:	3710      	adds	r7, #16
 8008904:	46bd      	mov	sp, r7
 8008906:	bd80      	pop	{r7, pc}

08008908 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008908:	b580      	push	{r7, lr}
 800890a:	b084      	sub	sp, #16
 800890c:	af00      	add	r7, sp, #0
 800890e:	60f8      	str	r0, [r7, #12]
 8008910:	60b9      	str	r1, [r7, #8]
 8008912:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	699b      	ldr	r3, [r3, #24]
 800891a:	f003 0310 	and.w	r3, r3, #16
 800891e:	2b10      	cmp	r3, #16
 8008920:	d151      	bne.n	80089c6 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008922:	e022      	b.n	800896a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8008924:	68bb      	ldr	r3, [r7, #8]
 8008926:	f1b3 3fff 	cmp.w	r3, #4294967295
 800892a:	d01e      	beq.n	800896a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800892c:	f7ff fa9e 	bl	8007e6c <HAL_GetTick>
 8008930:	4602      	mov	r2, r0
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	1ad3      	subs	r3, r2, r3
 8008936:	68ba      	ldr	r2, [r7, #8]
 8008938:	429a      	cmp	r2, r3
 800893a:	d302      	bcc.n	8008942 <I2C_IsAcknowledgeFailed+0x3a>
 800893c:	68bb      	ldr	r3, [r7, #8]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d113      	bne.n	800896a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008946:	f043 0220 	orr.w	r2, r3, #32
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	2220      	movs	r2, #32
 8008952:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	2200      	movs	r2, #0
 800895a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	2200      	movs	r2, #0
 8008962:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8008966:	2301      	movs	r3, #1
 8008968:	e02e      	b.n	80089c8 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	699b      	ldr	r3, [r3, #24]
 8008970:	f003 0320 	and.w	r3, r3, #32
 8008974:	2b20      	cmp	r3, #32
 8008976:	d1d5      	bne.n	8008924 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	2210      	movs	r2, #16
 800897e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	2220      	movs	r2, #32
 8008986:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008988:	68f8      	ldr	r0, [r7, #12]
 800898a:	f7ff fedd 	bl	8008748 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	6859      	ldr	r1, [r3, #4]
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	681a      	ldr	r2, [r3, #0]
 8008998:	4b0d      	ldr	r3, [pc, #52]	; (80089d0 <I2C_IsAcknowledgeFailed+0xc8>)
 800899a:	400b      	ands	r3, r1
 800899c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089a2:	f043 0204 	orr.w	r2, r3, #4
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	2220      	movs	r2, #32
 80089ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	2200      	movs	r2, #0
 80089b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	2200      	movs	r2, #0
 80089be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80089c2:	2301      	movs	r3, #1
 80089c4:	e000      	b.n	80089c8 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80089c6:	2300      	movs	r3, #0
}
 80089c8:	4618      	mov	r0, r3
 80089ca:	3710      	adds	r7, #16
 80089cc:	46bd      	mov	sp, r7
 80089ce:	bd80      	pop	{r7, pc}
 80089d0:	fe00e800 	.word	0xfe00e800

080089d4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80089d4:	b480      	push	{r7}
 80089d6:	b085      	sub	sp, #20
 80089d8:	af00      	add	r7, sp, #0
 80089da:	60f8      	str	r0, [r7, #12]
 80089dc:	607b      	str	r3, [r7, #4]
 80089de:	460b      	mov	r3, r1
 80089e0:	817b      	strh	r3, [r7, #10]
 80089e2:	4613      	mov	r3, r2
 80089e4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	685a      	ldr	r2, [r3, #4]
 80089ec:	69bb      	ldr	r3, [r7, #24]
 80089ee:	0d5b      	lsrs	r3, r3, #21
 80089f0:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80089f4:	4b0d      	ldr	r3, [pc, #52]	; (8008a2c <I2C_TransferConfig+0x58>)
 80089f6:	430b      	orrs	r3, r1
 80089f8:	43db      	mvns	r3, r3
 80089fa:	ea02 0103 	and.w	r1, r2, r3
 80089fe:	897b      	ldrh	r3, [r7, #10]
 8008a00:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8008a04:	7a7b      	ldrb	r3, [r7, #9]
 8008a06:	041b      	lsls	r3, r3, #16
 8008a08:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008a0c:	431a      	orrs	r2, r3
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	431a      	orrs	r2, r3
 8008a12:	69bb      	ldr	r3, [r7, #24]
 8008a14:	431a      	orrs	r2, r3
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	430a      	orrs	r2, r1
 8008a1c:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8008a1e:	bf00      	nop
 8008a20:	3714      	adds	r7, #20
 8008a22:	46bd      	mov	sp, r7
 8008a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a28:	4770      	bx	lr
 8008a2a:	bf00      	nop
 8008a2c:	03ff63ff 	.word	0x03ff63ff

08008a30 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008a30:	b480      	push	{r7}
 8008a32:	b083      	sub	sp, #12
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
 8008a38:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008a40:	b2db      	uxtb	r3, r3
 8008a42:	2b20      	cmp	r3, #32
 8008a44:	d138      	bne.n	8008ab8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008a4c:	2b01      	cmp	r3, #1
 8008a4e:	d101      	bne.n	8008a54 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008a50:	2302      	movs	r3, #2
 8008a52:	e032      	b.n	8008aba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2201      	movs	r2, #1
 8008a58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2224      	movs	r2, #36	; 0x24
 8008a60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	681a      	ldr	r2, [r3, #0]
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	f022 0201 	bic.w	r2, r2, #1
 8008a72:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	681a      	ldr	r2, [r3, #0]
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008a82:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	6819      	ldr	r1, [r3, #0]
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	683a      	ldr	r2, [r7, #0]
 8008a90:	430a      	orrs	r2, r1
 8008a92:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	681a      	ldr	r2, [r3, #0]
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	f042 0201 	orr.w	r2, r2, #1
 8008aa2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	2220      	movs	r2, #32
 8008aa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	2200      	movs	r2, #0
 8008ab0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	e000      	b.n	8008aba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008ab8:	2302      	movs	r3, #2
  }
}
 8008aba:	4618      	mov	r0, r3
 8008abc:	370c      	adds	r7, #12
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac4:	4770      	bx	lr

08008ac6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008ac6:	b480      	push	{r7}
 8008ac8:	b085      	sub	sp, #20
 8008aca:	af00      	add	r7, sp, #0
 8008acc:	6078      	str	r0, [r7, #4]
 8008ace:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008ad6:	b2db      	uxtb	r3, r3
 8008ad8:	2b20      	cmp	r3, #32
 8008ada:	d139      	bne.n	8008b50 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008ae2:	2b01      	cmp	r3, #1
 8008ae4:	d101      	bne.n	8008aea <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008ae6:	2302      	movs	r3, #2
 8008ae8:	e033      	b.n	8008b52 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	2201      	movs	r2, #1
 8008aee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	2224      	movs	r2, #36	; 0x24
 8008af6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	681a      	ldr	r2, [r3, #0]
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	f022 0201 	bic.w	r2, r2, #1
 8008b08:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008b18:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	021b      	lsls	r3, r3, #8
 8008b1e:	68fa      	ldr	r2, [r7, #12]
 8008b20:	4313      	orrs	r3, r2
 8008b22:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	68fa      	ldr	r2, [r7, #12]
 8008b2a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	681a      	ldr	r2, [r3, #0]
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	f042 0201 	orr.w	r2, r2, #1
 8008b3a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	2220      	movs	r2, #32
 8008b40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	2200      	movs	r2, #0
 8008b48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	e000      	b.n	8008b52 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008b50:	2302      	movs	r3, #2
  }
}
 8008b52:	4618      	mov	r0, r3
 8008b54:	3714      	adds	r7, #20
 8008b56:	46bd      	mov	sp, r7
 8008b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5c:	4770      	bx	lr
	...

08008b60 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8008b60:	b480      	push	{r7}
 8008b62:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8008b64:	4b04      	ldr	r3, [pc, #16]	; (8008b78 <HAL_PWREx_GetVoltageRange+0x18>)
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b74:	4770      	bx	lr
 8008b76:	bf00      	nop
 8008b78:	40007000 	.word	0x40007000

08008b7c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8008b7c:	b480      	push	{r7}
 8008b7e:	b085      	sub	sp, #20
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b8a:	d130      	bne.n	8008bee <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8008b8c:	4b23      	ldr	r3, [pc, #140]	; (8008c1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008b94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b98:	d038      	beq.n	8008c0c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008b9a:	4b20      	ldr	r3, [pc, #128]	; (8008c1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008ba2:	4a1e      	ldr	r2, [pc, #120]	; (8008c1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008ba4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008ba8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008baa:	4b1d      	ldr	r3, [pc, #116]	; (8008c20 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	2232      	movs	r2, #50	; 0x32
 8008bb0:	fb02 f303 	mul.w	r3, r2, r3
 8008bb4:	4a1b      	ldr	r2, [pc, #108]	; (8008c24 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8008bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8008bba:	0c9b      	lsrs	r3, r3, #18
 8008bbc:	3301      	adds	r3, #1
 8008bbe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008bc0:	e002      	b.n	8008bc8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	3b01      	subs	r3, #1
 8008bc6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008bc8:	4b14      	ldr	r3, [pc, #80]	; (8008c1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008bca:	695b      	ldr	r3, [r3, #20]
 8008bcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008bd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008bd4:	d102      	bne.n	8008bdc <HAL_PWREx_ControlVoltageScaling+0x60>
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d1f2      	bne.n	8008bc2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008bdc:	4b0f      	ldr	r3, [pc, #60]	; (8008c1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008bde:	695b      	ldr	r3, [r3, #20]
 8008be0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008be4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008be8:	d110      	bne.n	8008c0c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8008bea:	2303      	movs	r3, #3
 8008bec:	e00f      	b.n	8008c0e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8008bee:	4b0b      	ldr	r3, [pc, #44]	; (8008c1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008bf6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008bfa:	d007      	beq.n	8008c0c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8008bfc:	4b07      	ldr	r3, [pc, #28]	; (8008c1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008c04:	4a05      	ldr	r2, [pc, #20]	; (8008c1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008c06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008c0a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8008c0c:	2300      	movs	r3, #0
}
 8008c0e:	4618      	mov	r0, r3
 8008c10:	3714      	adds	r7, #20
 8008c12:	46bd      	mov	sp, r7
 8008c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c18:	4770      	bx	lr
 8008c1a:	bf00      	nop
 8008c1c:	40007000 	.word	0x40007000
 8008c20:	20000000 	.word	0x20000000
 8008c24:	431bde83 	.word	0x431bde83

08008c28 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b088      	sub	sp, #32
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d102      	bne.n	8008c3c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8008c36:	2301      	movs	r3, #1
 8008c38:	f000 bc11 	b.w	800945e <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008c3c:	4ba0      	ldr	r3, [pc, #640]	; (8008ec0 <HAL_RCC_OscConfig+0x298>)
 8008c3e:	689b      	ldr	r3, [r3, #8]
 8008c40:	f003 030c 	and.w	r3, r3, #12
 8008c44:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008c46:	4b9e      	ldr	r3, [pc, #632]	; (8008ec0 <HAL_RCC_OscConfig+0x298>)
 8008c48:	68db      	ldr	r3, [r3, #12]
 8008c4a:	f003 0303 	and.w	r3, r3, #3
 8008c4e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	f003 0310 	and.w	r3, r3, #16
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	f000 80e4 	beq.w	8008e26 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8008c5e:	69bb      	ldr	r3, [r7, #24]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d007      	beq.n	8008c74 <HAL_RCC_OscConfig+0x4c>
 8008c64:	69bb      	ldr	r3, [r7, #24]
 8008c66:	2b0c      	cmp	r3, #12
 8008c68:	f040 808b 	bne.w	8008d82 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8008c6c:	697b      	ldr	r3, [r7, #20]
 8008c6e:	2b01      	cmp	r3, #1
 8008c70:	f040 8087 	bne.w	8008d82 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8008c74:	4b92      	ldr	r3, [pc, #584]	; (8008ec0 <HAL_RCC_OscConfig+0x298>)
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	f003 0302 	and.w	r3, r3, #2
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d005      	beq.n	8008c8c <HAL_RCC_OscConfig+0x64>
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	699b      	ldr	r3, [r3, #24]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d101      	bne.n	8008c8c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8008c88:	2301      	movs	r3, #1
 8008c8a:	e3e8      	b.n	800945e <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	6a1a      	ldr	r2, [r3, #32]
 8008c90:	4b8b      	ldr	r3, [pc, #556]	; (8008ec0 <HAL_RCC_OscConfig+0x298>)
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	f003 0308 	and.w	r3, r3, #8
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d004      	beq.n	8008ca6 <HAL_RCC_OscConfig+0x7e>
 8008c9c:	4b88      	ldr	r3, [pc, #544]	; (8008ec0 <HAL_RCC_OscConfig+0x298>)
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008ca4:	e005      	b.n	8008cb2 <HAL_RCC_OscConfig+0x8a>
 8008ca6:	4b86      	ldr	r3, [pc, #536]	; (8008ec0 <HAL_RCC_OscConfig+0x298>)
 8008ca8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008cac:	091b      	lsrs	r3, r3, #4
 8008cae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008cb2:	4293      	cmp	r3, r2
 8008cb4:	d223      	bcs.n	8008cfe <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	6a1b      	ldr	r3, [r3, #32]
 8008cba:	4618      	mov	r0, r3
 8008cbc:	f000 fd78 	bl	80097b0 <RCC_SetFlashLatencyFromMSIRange>
 8008cc0:	4603      	mov	r3, r0
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d001      	beq.n	8008cca <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8008cc6:	2301      	movs	r3, #1
 8008cc8:	e3c9      	b.n	800945e <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008cca:	4b7d      	ldr	r3, [pc, #500]	; (8008ec0 <HAL_RCC_OscConfig+0x298>)
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	4a7c      	ldr	r2, [pc, #496]	; (8008ec0 <HAL_RCC_OscConfig+0x298>)
 8008cd0:	f043 0308 	orr.w	r3, r3, #8
 8008cd4:	6013      	str	r3, [r2, #0]
 8008cd6:	4b7a      	ldr	r3, [pc, #488]	; (8008ec0 <HAL_RCC_OscConfig+0x298>)
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	6a1b      	ldr	r3, [r3, #32]
 8008ce2:	4977      	ldr	r1, [pc, #476]	; (8008ec0 <HAL_RCC_OscConfig+0x298>)
 8008ce4:	4313      	orrs	r3, r2
 8008ce6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008ce8:	4b75      	ldr	r3, [pc, #468]	; (8008ec0 <HAL_RCC_OscConfig+0x298>)
 8008cea:	685b      	ldr	r3, [r3, #4]
 8008cec:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	69db      	ldr	r3, [r3, #28]
 8008cf4:	021b      	lsls	r3, r3, #8
 8008cf6:	4972      	ldr	r1, [pc, #456]	; (8008ec0 <HAL_RCC_OscConfig+0x298>)
 8008cf8:	4313      	orrs	r3, r2
 8008cfa:	604b      	str	r3, [r1, #4]
 8008cfc:	e025      	b.n	8008d4a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008cfe:	4b70      	ldr	r3, [pc, #448]	; (8008ec0 <HAL_RCC_OscConfig+0x298>)
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	4a6f      	ldr	r2, [pc, #444]	; (8008ec0 <HAL_RCC_OscConfig+0x298>)
 8008d04:	f043 0308 	orr.w	r3, r3, #8
 8008d08:	6013      	str	r3, [r2, #0]
 8008d0a:	4b6d      	ldr	r3, [pc, #436]	; (8008ec0 <HAL_RCC_OscConfig+0x298>)
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	6a1b      	ldr	r3, [r3, #32]
 8008d16:	496a      	ldr	r1, [pc, #424]	; (8008ec0 <HAL_RCC_OscConfig+0x298>)
 8008d18:	4313      	orrs	r3, r2
 8008d1a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008d1c:	4b68      	ldr	r3, [pc, #416]	; (8008ec0 <HAL_RCC_OscConfig+0x298>)
 8008d1e:	685b      	ldr	r3, [r3, #4]
 8008d20:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	69db      	ldr	r3, [r3, #28]
 8008d28:	021b      	lsls	r3, r3, #8
 8008d2a:	4965      	ldr	r1, [pc, #404]	; (8008ec0 <HAL_RCC_OscConfig+0x298>)
 8008d2c:	4313      	orrs	r3, r2
 8008d2e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008d30:	69bb      	ldr	r3, [r7, #24]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d109      	bne.n	8008d4a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	6a1b      	ldr	r3, [r3, #32]
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	f000 fd38 	bl	80097b0 <RCC_SetFlashLatencyFromMSIRange>
 8008d40:	4603      	mov	r3, r0
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d001      	beq.n	8008d4a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8008d46:	2301      	movs	r3, #1
 8008d48:	e389      	b.n	800945e <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008d4a:	f000 fc6f 	bl	800962c <HAL_RCC_GetSysClockFreq>
 8008d4e:	4601      	mov	r1, r0
 8008d50:	4b5b      	ldr	r3, [pc, #364]	; (8008ec0 <HAL_RCC_OscConfig+0x298>)
 8008d52:	689b      	ldr	r3, [r3, #8]
 8008d54:	091b      	lsrs	r3, r3, #4
 8008d56:	f003 030f 	and.w	r3, r3, #15
 8008d5a:	4a5a      	ldr	r2, [pc, #360]	; (8008ec4 <HAL_RCC_OscConfig+0x29c>)
 8008d5c:	5cd3      	ldrb	r3, [r2, r3]
 8008d5e:	f003 031f 	and.w	r3, r3, #31
 8008d62:	fa21 f303 	lsr.w	r3, r1, r3
 8008d66:	4a58      	ldr	r2, [pc, #352]	; (8008ec8 <HAL_RCC_OscConfig+0x2a0>)
 8008d68:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8008d6a:	4b58      	ldr	r3, [pc, #352]	; (8008ecc <HAL_RCC_OscConfig+0x2a4>)
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	4618      	mov	r0, r3
 8008d70:	f7ff f830 	bl	8007dd4 <HAL_InitTick>
 8008d74:	4603      	mov	r3, r0
 8008d76:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8008d78:	7bfb      	ldrb	r3, [r7, #15]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d052      	beq.n	8008e24 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8008d7e:	7bfb      	ldrb	r3, [r7, #15]
 8008d80:	e36d      	b.n	800945e <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	699b      	ldr	r3, [r3, #24]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d032      	beq.n	8008df0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8008d8a:	4b4d      	ldr	r3, [pc, #308]	; (8008ec0 <HAL_RCC_OscConfig+0x298>)
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	4a4c      	ldr	r2, [pc, #304]	; (8008ec0 <HAL_RCC_OscConfig+0x298>)
 8008d90:	f043 0301 	orr.w	r3, r3, #1
 8008d94:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8008d96:	f7ff f869 	bl	8007e6c <HAL_GetTick>
 8008d9a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008d9c:	e008      	b.n	8008db0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008d9e:	f7ff f865 	bl	8007e6c <HAL_GetTick>
 8008da2:	4602      	mov	r2, r0
 8008da4:	693b      	ldr	r3, [r7, #16]
 8008da6:	1ad3      	subs	r3, r2, r3
 8008da8:	2b02      	cmp	r3, #2
 8008daa:	d901      	bls.n	8008db0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8008dac:	2303      	movs	r3, #3
 8008dae:	e356      	b.n	800945e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008db0:	4b43      	ldr	r3, [pc, #268]	; (8008ec0 <HAL_RCC_OscConfig+0x298>)
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	f003 0302 	and.w	r3, r3, #2
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d0f0      	beq.n	8008d9e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008dbc:	4b40      	ldr	r3, [pc, #256]	; (8008ec0 <HAL_RCC_OscConfig+0x298>)
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	4a3f      	ldr	r2, [pc, #252]	; (8008ec0 <HAL_RCC_OscConfig+0x298>)
 8008dc2:	f043 0308 	orr.w	r3, r3, #8
 8008dc6:	6013      	str	r3, [r2, #0]
 8008dc8:	4b3d      	ldr	r3, [pc, #244]	; (8008ec0 <HAL_RCC_OscConfig+0x298>)
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	6a1b      	ldr	r3, [r3, #32]
 8008dd4:	493a      	ldr	r1, [pc, #232]	; (8008ec0 <HAL_RCC_OscConfig+0x298>)
 8008dd6:	4313      	orrs	r3, r2
 8008dd8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008dda:	4b39      	ldr	r3, [pc, #228]	; (8008ec0 <HAL_RCC_OscConfig+0x298>)
 8008ddc:	685b      	ldr	r3, [r3, #4]
 8008dde:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	69db      	ldr	r3, [r3, #28]
 8008de6:	021b      	lsls	r3, r3, #8
 8008de8:	4935      	ldr	r1, [pc, #212]	; (8008ec0 <HAL_RCC_OscConfig+0x298>)
 8008dea:	4313      	orrs	r3, r2
 8008dec:	604b      	str	r3, [r1, #4]
 8008dee:	e01a      	b.n	8008e26 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8008df0:	4b33      	ldr	r3, [pc, #204]	; (8008ec0 <HAL_RCC_OscConfig+0x298>)
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	4a32      	ldr	r2, [pc, #200]	; (8008ec0 <HAL_RCC_OscConfig+0x298>)
 8008df6:	f023 0301 	bic.w	r3, r3, #1
 8008dfa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8008dfc:	f7ff f836 	bl	8007e6c <HAL_GetTick>
 8008e00:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8008e02:	e008      	b.n	8008e16 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008e04:	f7ff f832 	bl	8007e6c <HAL_GetTick>
 8008e08:	4602      	mov	r2, r0
 8008e0a:	693b      	ldr	r3, [r7, #16]
 8008e0c:	1ad3      	subs	r3, r2, r3
 8008e0e:	2b02      	cmp	r3, #2
 8008e10:	d901      	bls.n	8008e16 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8008e12:	2303      	movs	r3, #3
 8008e14:	e323      	b.n	800945e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8008e16:	4b2a      	ldr	r3, [pc, #168]	; (8008ec0 <HAL_RCC_OscConfig+0x298>)
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	f003 0302 	and.w	r3, r3, #2
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d1f0      	bne.n	8008e04 <HAL_RCC_OscConfig+0x1dc>
 8008e22:	e000      	b.n	8008e26 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8008e24:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	f003 0301 	and.w	r3, r3, #1
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d073      	beq.n	8008f1a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8008e32:	69bb      	ldr	r3, [r7, #24]
 8008e34:	2b08      	cmp	r3, #8
 8008e36:	d005      	beq.n	8008e44 <HAL_RCC_OscConfig+0x21c>
 8008e38:	69bb      	ldr	r3, [r7, #24]
 8008e3a:	2b0c      	cmp	r3, #12
 8008e3c:	d10e      	bne.n	8008e5c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8008e3e:	697b      	ldr	r3, [r7, #20]
 8008e40:	2b03      	cmp	r3, #3
 8008e42:	d10b      	bne.n	8008e5c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008e44:	4b1e      	ldr	r3, [pc, #120]	; (8008ec0 <HAL_RCC_OscConfig+0x298>)
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d063      	beq.n	8008f18 <HAL_RCC_OscConfig+0x2f0>
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	685b      	ldr	r3, [r3, #4]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d15f      	bne.n	8008f18 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8008e58:	2301      	movs	r3, #1
 8008e5a:	e300      	b.n	800945e <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	685b      	ldr	r3, [r3, #4]
 8008e60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e64:	d106      	bne.n	8008e74 <HAL_RCC_OscConfig+0x24c>
 8008e66:	4b16      	ldr	r3, [pc, #88]	; (8008ec0 <HAL_RCC_OscConfig+0x298>)
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	4a15      	ldr	r2, [pc, #84]	; (8008ec0 <HAL_RCC_OscConfig+0x298>)
 8008e6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008e70:	6013      	str	r3, [r2, #0]
 8008e72:	e01d      	b.n	8008eb0 <HAL_RCC_OscConfig+0x288>
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	685b      	ldr	r3, [r3, #4]
 8008e78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008e7c:	d10c      	bne.n	8008e98 <HAL_RCC_OscConfig+0x270>
 8008e7e:	4b10      	ldr	r3, [pc, #64]	; (8008ec0 <HAL_RCC_OscConfig+0x298>)
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	4a0f      	ldr	r2, [pc, #60]	; (8008ec0 <HAL_RCC_OscConfig+0x298>)
 8008e84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008e88:	6013      	str	r3, [r2, #0]
 8008e8a:	4b0d      	ldr	r3, [pc, #52]	; (8008ec0 <HAL_RCC_OscConfig+0x298>)
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	4a0c      	ldr	r2, [pc, #48]	; (8008ec0 <HAL_RCC_OscConfig+0x298>)
 8008e90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008e94:	6013      	str	r3, [r2, #0]
 8008e96:	e00b      	b.n	8008eb0 <HAL_RCC_OscConfig+0x288>
 8008e98:	4b09      	ldr	r3, [pc, #36]	; (8008ec0 <HAL_RCC_OscConfig+0x298>)
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	4a08      	ldr	r2, [pc, #32]	; (8008ec0 <HAL_RCC_OscConfig+0x298>)
 8008e9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008ea2:	6013      	str	r3, [r2, #0]
 8008ea4:	4b06      	ldr	r3, [pc, #24]	; (8008ec0 <HAL_RCC_OscConfig+0x298>)
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	4a05      	ldr	r2, [pc, #20]	; (8008ec0 <HAL_RCC_OscConfig+0x298>)
 8008eaa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008eae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	685b      	ldr	r3, [r3, #4]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d01b      	beq.n	8008ef0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008eb8:	f7fe ffd8 	bl	8007e6c <HAL_GetTick>
 8008ebc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008ebe:	e010      	b.n	8008ee2 <HAL_RCC_OscConfig+0x2ba>
 8008ec0:	40021000 	.word	0x40021000
 8008ec4:	080100a0 	.word	0x080100a0
 8008ec8:	20000000 	.word	0x20000000
 8008ecc:	200000ec 	.word	0x200000ec
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008ed0:	f7fe ffcc 	bl	8007e6c <HAL_GetTick>
 8008ed4:	4602      	mov	r2, r0
 8008ed6:	693b      	ldr	r3, [r7, #16]
 8008ed8:	1ad3      	subs	r3, r2, r3
 8008eda:	2b64      	cmp	r3, #100	; 0x64
 8008edc:	d901      	bls.n	8008ee2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8008ede:	2303      	movs	r3, #3
 8008ee0:	e2bd      	b.n	800945e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008ee2:	4baf      	ldr	r3, [pc, #700]	; (80091a0 <HAL_RCC_OscConfig+0x578>)
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d0f0      	beq.n	8008ed0 <HAL_RCC_OscConfig+0x2a8>
 8008eee:	e014      	b.n	8008f1a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ef0:	f7fe ffbc 	bl	8007e6c <HAL_GetTick>
 8008ef4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008ef6:	e008      	b.n	8008f0a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008ef8:	f7fe ffb8 	bl	8007e6c <HAL_GetTick>
 8008efc:	4602      	mov	r2, r0
 8008efe:	693b      	ldr	r3, [r7, #16]
 8008f00:	1ad3      	subs	r3, r2, r3
 8008f02:	2b64      	cmp	r3, #100	; 0x64
 8008f04:	d901      	bls.n	8008f0a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8008f06:	2303      	movs	r3, #3
 8008f08:	e2a9      	b.n	800945e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008f0a:	4ba5      	ldr	r3, [pc, #660]	; (80091a0 <HAL_RCC_OscConfig+0x578>)
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d1f0      	bne.n	8008ef8 <HAL_RCC_OscConfig+0x2d0>
 8008f16:	e000      	b.n	8008f1a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008f18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	f003 0302 	and.w	r3, r3, #2
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d060      	beq.n	8008fe8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8008f26:	69bb      	ldr	r3, [r7, #24]
 8008f28:	2b04      	cmp	r3, #4
 8008f2a:	d005      	beq.n	8008f38 <HAL_RCC_OscConfig+0x310>
 8008f2c:	69bb      	ldr	r3, [r7, #24]
 8008f2e:	2b0c      	cmp	r3, #12
 8008f30:	d119      	bne.n	8008f66 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8008f32:	697b      	ldr	r3, [r7, #20]
 8008f34:	2b02      	cmp	r3, #2
 8008f36:	d116      	bne.n	8008f66 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008f38:	4b99      	ldr	r3, [pc, #612]	; (80091a0 <HAL_RCC_OscConfig+0x578>)
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d005      	beq.n	8008f50 <HAL_RCC_OscConfig+0x328>
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	68db      	ldr	r3, [r3, #12]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d101      	bne.n	8008f50 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8008f4c:	2301      	movs	r3, #1
 8008f4e:	e286      	b.n	800945e <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008f50:	4b93      	ldr	r3, [pc, #588]	; (80091a0 <HAL_RCC_OscConfig+0x578>)
 8008f52:	685b      	ldr	r3, [r3, #4]
 8008f54:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	691b      	ldr	r3, [r3, #16]
 8008f5c:	061b      	lsls	r3, r3, #24
 8008f5e:	4990      	ldr	r1, [pc, #576]	; (80091a0 <HAL_RCC_OscConfig+0x578>)
 8008f60:	4313      	orrs	r3, r2
 8008f62:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008f64:	e040      	b.n	8008fe8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	68db      	ldr	r3, [r3, #12]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d023      	beq.n	8008fb6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008f6e:	4b8c      	ldr	r3, [pc, #560]	; (80091a0 <HAL_RCC_OscConfig+0x578>)
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	4a8b      	ldr	r2, [pc, #556]	; (80091a0 <HAL_RCC_OscConfig+0x578>)
 8008f74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008f78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f7a:	f7fe ff77 	bl	8007e6c <HAL_GetTick>
 8008f7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008f80:	e008      	b.n	8008f94 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008f82:	f7fe ff73 	bl	8007e6c <HAL_GetTick>
 8008f86:	4602      	mov	r2, r0
 8008f88:	693b      	ldr	r3, [r7, #16]
 8008f8a:	1ad3      	subs	r3, r2, r3
 8008f8c:	2b02      	cmp	r3, #2
 8008f8e:	d901      	bls.n	8008f94 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8008f90:	2303      	movs	r3, #3
 8008f92:	e264      	b.n	800945e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008f94:	4b82      	ldr	r3, [pc, #520]	; (80091a0 <HAL_RCC_OscConfig+0x578>)
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d0f0      	beq.n	8008f82 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008fa0:	4b7f      	ldr	r3, [pc, #508]	; (80091a0 <HAL_RCC_OscConfig+0x578>)
 8008fa2:	685b      	ldr	r3, [r3, #4]
 8008fa4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	691b      	ldr	r3, [r3, #16]
 8008fac:	061b      	lsls	r3, r3, #24
 8008fae:	497c      	ldr	r1, [pc, #496]	; (80091a0 <HAL_RCC_OscConfig+0x578>)
 8008fb0:	4313      	orrs	r3, r2
 8008fb2:	604b      	str	r3, [r1, #4]
 8008fb4:	e018      	b.n	8008fe8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008fb6:	4b7a      	ldr	r3, [pc, #488]	; (80091a0 <HAL_RCC_OscConfig+0x578>)
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	4a79      	ldr	r2, [pc, #484]	; (80091a0 <HAL_RCC_OscConfig+0x578>)
 8008fbc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008fc0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008fc2:	f7fe ff53 	bl	8007e6c <HAL_GetTick>
 8008fc6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008fc8:	e008      	b.n	8008fdc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008fca:	f7fe ff4f 	bl	8007e6c <HAL_GetTick>
 8008fce:	4602      	mov	r2, r0
 8008fd0:	693b      	ldr	r3, [r7, #16]
 8008fd2:	1ad3      	subs	r3, r2, r3
 8008fd4:	2b02      	cmp	r3, #2
 8008fd6:	d901      	bls.n	8008fdc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8008fd8:	2303      	movs	r3, #3
 8008fda:	e240      	b.n	800945e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008fdc:	4b70      	ldr	r3, [pc, #448]	; (80091a0 <HAL_RCC_OscConfig+0x578>)
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d1f0      	bne.n	8008fca <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	f003 0308 	and.w	r3, r3, #8
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d03c      	beq.n	800906e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	695b      	ldr	r3, [r3, #20]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d01c      	beq.n	8009036 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008ffc:	4b68      	ldr	r3, [pc, #416]	; (80091a0 <HAL_RCC_OscConfig+0x578>)
 8008ffe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009002:	4a67      	ldr	r2, [pc, #412]	; (80091a0 <HAL_RCC_OscConfig+0x578>)
 8009004:	f043 0301 	orr.w	r3, r3, #1
 8009008:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800900c:	f7fe ff2e 	bl	8007e6c <HAL_GetTick>
 8009010:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009012:	e008      	b.n	8009026 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009014:	f7fe ff2a 	bl	8007e6c <HAL_GetTick>
 8009018:	4602      	mov	r2, r0
 800901a:	693b      	ldr	r3, [r7, #16]
 800901c:	1ad3      	subs	r3, r2, r3
 800901e:	2b02      	cmp	r3, #2
 8009020:	d901      	bls.n	8009026 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8009022:	2303      	movs	r3, #3
 8009024:	e21b      	b.n	800945e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009026:	4b5e      	ldr	r3, [pc, #376]	; (80091a0 <HAL_RCC_OscConfig+0x578>)
 8009028:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800902c:	f003 0302 	and.w	r3, r3, #2
 8009030:	2b00      	cmp	r3, #0
 8009032:	d0ef      	beq.n	8009014 <HAL_RCC_OscConfig+0x3ec>
 8009034:	e01b      	b.n	800906e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009036:	4b5a      	ldr	r3, [pc, #360]	; (80091a0 <HAL_RCC_OscConfig+0x578>)
 8009038:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800903c:	4a58      	ldr	r2, [pc, #352]	; (80091a0 <HAL_RCC_OscConfig+0x578>)
 800903e:	f023 0301 	bic.w	r3, r3, #1
 8009042:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009046:	f7fe ff11 	bl	8007e6c <HAL_GetTick>
 800904a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800904c:	e008      	b.n	8009060 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800904e:	f7fe ff0d 	bl	8007e6c <HAL_GetTick>
 8009052:	4602      	mov	r2, r0
 8009054:	693b      	ldr	r3, [r7, #16]
 8009056:	1ad3      	subs	r3, r2, r3
 8009058:	2b02      	cmp	r3, #2
 800905a:	d901      	bls.n	8009060 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800905c:	2303      	movs	r3, #3
 800905e:	e1fe      	b.n	800945e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009060:	4b4f      	ldr	r3, [pc, #316]	; (80091a0 <HAL_RCC_OscConfig+0x578>)
 8009062:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009066:	f003 0302 	and.w	r3, r3, #2
 800906a:	2b00      	cmp	r3, #0
 800906c:	d1ef      	bne.n	800904e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	f003 0304 	and.w	r3, r3, #4
 8009076:	2b00      	cmp	r3, #0
 8009078:	f000 80a6 	beq.w	80091c8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800907c:	2300      	movs	r3, #0
 800907e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8009080:	4b47      	ldr	r3, [pc, #284]	; (80091a0 <HAL_RCC_OscConfig+0x578>)
 8009082:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009084:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009088:	2b00      	cmp	r3, #0
 800908a:	d10d      	bne.n	80090a8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800908c:	4b44      	ldr	r3, [pc, #272]	; (80091a0 <HAL_RCC_OscConfig+0x578>)
 800908e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009090:	4a43      	ldr	r2, [pc, #268]	; (80091a0 <HAL_RCC_OscConfig+0x578>)
 8009092:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009096:	6593      	str	r3, [r2, #88]	; 0x58
 8009098:	4b41      	ldr	r3, [pc, #260]	; (80091a0 <HAL_RCC_OscConfig+0x578>)
 800909a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800909c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80090a0:	60bb      	str	r3, [r7, #8]
 80090a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80090a4:	2301      	movs	r3, #1
 80090a6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80090a8:	4b3e      	ldr	r3, [pc, #248]	; (80091a4 <HAL_RCC_OscConfig+0x57c>)
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d118      	bne.n	80090e6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80090b4:	4b3b      	ldr	r3, [pc, #236]	; (80091a4 <HAL_RCC_OscConfig+0x57c>)
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	4a3a      	ldr	r2, [pc, #232]	; (80091a4 <HAL_RCC_OscConfig+0x57c>)
 80090ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80090be:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80090c0:	f7fe fed4 	bl	8007e6c <HAL_GetTick>
 80090c4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80090c6:	e008      	b.n	80090da <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80090c8:	f7fe fed0 	bl	8007e6c <HAL_GetTick>
 80090cc:	4602      	mov	r2, r0
 80090ce:	693b      	ldr	r3, [r7, #16]
 80090d0:	1ad3      	subs	r3, r2, r3
 80090d2:	2b02      	cmp	r3, #2
 80090d4:	d901      	bls.n	80090da <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80090d6:	2303      	movs	r3, #3
 80090d8:	e1c1      	b.n	800945e <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80090da:	4b32      	ldr	r3, [pc, #200]	; (80091a4 <HAL_RCC_OscConfig+0x57c>)
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d0f0      	beq.n	80090c8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	689b      	ldr	r3, [r3, #8]
 80090ea:	2b01      	cmp	r3, #1
 80090ec:	d108      	bne.n	8009100 <HAL_RCC_OscConfig+0x4d8>
 80090ee:	4b2c      	ldr	r3, [pc, #176]	; (80091a0 <HAL_RCC_OscConfig+0x578>)
 80090f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80090f4:	4a2a      	ldr	r2, [pc, #168]	; (80091a0 <HAL_RCC_OscConfig+0x578>)
 80090f6:	f043 0301 	orr.w	r3, r3, #1
 80090fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80090fe:	e024      	b.n	800914a <HAL_RCC_OscConfig+0x522>
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	689b      	ldr	r3, [r3, #8]
 8009104:	2b05      	cmp	r3, #5
 8009106:	d110      	bne.n	800912a <HAL_RCC_OscConfig+0x502>
 8009108:	4b25      	ldr	r3, [pc, #148]	; (80091a0 <HAL_RCC_OscConfig+0x578>)
 800910a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800910e:	4a24      	ldr	r2, [pc, #144]	; (80091a0 <HAL_RCC_OscConfig+0x578>)
 8009110:	f043 0304 	orr.w	r3, r3, #4
 8009114:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009118:	4b21      	ldr	r3, [pc, #132]	; (80091a0 <HAL_RCC_OscConfig+0x578>)
 800911a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800911e:	4a20      	ldr	r2, [pc, #128]	; (80091a0 <HAL_RCC_OscConfig+0x578>)
 8009120:	f043 0301 	orr.w	r3, r3, #1
 8009124:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009128:	e00f      	b.n	800914a <HAL_RCC_OscConfig+0x522>
 800912a:	4b1d      	ldr	r3, [pc, #116]	; (80091a0 <HAL_RCC_OscConfig+0x578>)
 800912c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009130:	4a1b      	ldr	r2, [pc, #108]	; (80091a0 <HAL_RCC_OscConfig+0x578>)
 8009132:	f023 0301 	bic.w	r3, r3, #1
 8009136:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800913a:	4b19      	ldr	r3, [pc, #100]	; (80091a0 <HAL_RCC_OscConfig+0x578>)
 800913c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009140:	4a17      	ldr	r2, [pc, #92]	; (80091a0 <HAL_RCC_OscConfig+0x578>)
 8009142:	f023 0304 	bic.w	r3, r3, #4
 8009146:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	689b      	ldr	r3, [r3, #8]
 800914e:	2b00      	cmp	r3, #0
 8009150:	d016      	beq.n	8009180 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009152:	f7fe fe8b 	bl	8007e6c <HAL_GetTick>
 8009156:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009158:	e00a      	b.n	8009170 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800915a:	f7fe fe87 	bl	8007e6c <HAL_GetTick>
 800915e:	4602      	mov	r2, r0
 8009160:	693b      	ldr	r3, [r7, #16]
 8009162:	1ad3      	subs	r3, r2, r3
 8009164:	f241 3288 	movw	r2, #5000	; 0x1388
 8009168:	4293      	cmp	r3, r2
 800916a:	d901      	bls.n	8009170 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800916c:	2303      	movs	r3, #3
 800916e:	e176      	b.n	800945e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009170:	4b0b      	ldr	r3, [pc, #44]	; (80091a0 <HAL_RCC_OscConfig+0x578>)
 8009172:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009176:	f003 0302 	and.w	r3, r3, #2
 800917a:	2b00      	cmp	r3, #0
 800917c:	d0ed      	beq.n	800915a <HAL_RCC_OscConfig+0x532>
 800917e:	e01a      	b.n	80091b6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009180:	f7fe fe74 	bl	8007e6c <HAL_GetTick>
 8009184:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009186:	e00f      	b.n	80091a8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009188:	f7fe fe70 	bl	8007e6c <HAL_GetTick>
 800918c:	4602      	mov	r2, r0
 800918e:	693b      	ldr	r3, [r7, #16]
 8009190:	1ad3      	subs	r3, r2, r3
 8009192:	f241 3288 	movw	r2, #5000	; 0x1388
 8009196:	4293      	cmp	r3, r2
 8009198:	d906      	bls.n	80091a8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800919a:	2303      	movs	r3, #3
 800919c:	e15f      	b.n	800945e <HAL_RCC_OscConfig+0x836>
 800919e:	bf00      	nop
 80091a0:	40021000 	.word	0x40021000
 80091a4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80091a8:	4baa      	ldr	r3, [pc, #680]	; (8009454 <HAL_RCC_OscConfig+0x82c>)
 80091aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80091ae:	f003 0302 	and.w	r3, r3, #2
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d1e8      	bne.n	8009188 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80091b6:	7ffb      	ldrb	r3, [r7, #31]
 80091b8:	2b01      	cmp	r3, #1
 80091ba:	d105      	bne.n	80091c8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80091bc:	4ba5      	ldr	r3, [pc, #660]	; (8009454 <HAL_RCC_OscConfig+0x82c>)
 80091be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091c0:	4aa4      	ldr	r2, [pc, #656]	; (8009454 <HAL_RCC_OscConfig+0x82c>)
 80091c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80091c6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	f003 0320 	and.w	r3, r3, #32
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d03c      	beq.n	800924e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d01c      	beq.n	8009216 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80091dc:	4b9d      	ldr	r3, [pc, #628]	; (8009454 <HAL_RCC_OscConfig+0x82c>)
 80091de:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80091e2:	4a9c      	ldr	r2, [pc, #624]	; (8009454 <HAL_RCC_OscConfig+0x82c>)
 80091e4:	f043 0301 	orr.w	r3, r3, #1
 80091e8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80091ec:	f7fe fe3e 	bl	8007e6c <HAL_GetTick>
 80091f0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80091f2:	e008      	b.n	8009206 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80091f4:	f7fe fe3a 	bl	8007e6c <HAL_GetTick>
 80091f8:	4602      	mov	r2, r0
 80091fa:	693b      	ldr	r3, [r7, #16]
 80091fc:	1ad3      	subs	r3, r2, r3
 80091fe:	2b02      	cmp	r3, #2
 8009200:	d901      	bls.n	8009206 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8009202:	2303      	movs	r3, #3
 8009204:	e12b      	b.n	800945e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8009206:	4b93      	ldr	r3, [pc, #588]	; (8009454 <HAL_RCC_OscConfig+0x82c>)
 8009208:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800920c:	f003 0302 	and.w	r3, r3, #2
 8009210:	2b00      	cmp	r3, #0
 8009212:	d0ef      	beq.n	80091f4 <HAL_RCC_OscConfig+0x5cc>
 8009214:	e01b      	b.n	800924e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009216:	4b8f      	ldr	r3, [pc, #572]	; (8009454 <HAL_RCC_OscConfig+0x82c>)
 8009218:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800921c:	4a8d      	ldr	r2, [pc, #564]	; (8009454 <HAL_RCC_OscConfig+0x82c>)
 800921e:	f023 0301 	bic.w	r3, r3, #1
 8009222:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009226:	f7fe fe21 	bl	8007e6c <HAL_GetTick>
 800922a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800922c:	e008      	b.n	8009240 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800922e:	f7fe fe1d 	bl	8007e6c <HAL_GetTick>
 8009232:	4602      	mov	r2, r0
 8009234:	693b      	ldr	r3, [r7, #16]
 8009236:	1ad3      	subs	r3, r2, r3
 8009238:	2b02      	cmp	r3, #2
 800923a:	d901      	bls.n	8009240 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800923c:	2303      	movs	r3, #3
 800923e:	e10e      	b.n	800945e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8009240:	4b84      	ldr	r3, [pc, #528]	; (8009454 <HAL_RCC_OscConfig+0x82c>)
 8009242:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009246:	f003 0302 	and.w	r3, r3, #2
 800924a:	2b00      	cmp	r3, #0
 800924c:	d1ef      	bne.n	800922e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009252:	2b00      	cmp	r3, #0
 8009254:	f000 8102 	beq.w	800945c <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800925c:	2b02      	cmp	r3, #2
 800925e:	f040 80c5 	bne.w	80093ec <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8009262:	4b7c      	ldr	r3, [pc, #496]	; (8009454 <HAL_RCC_OscConfig+0x82c>)
 8009264:	68db      	ldr	r3, [r3, #12]
 8009266:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8009268:	697b      	ldr	r3, [r7, #20]
 800926a:	f003 0203 	and.w	r2, r3, #3
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009272:	429a      	cmp	r2, r3
 8009274:	d12c      	bne.n	80092d0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009276:	697b      	ldr	r3, [r7, #20]
 8009278:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009280:	3b01      	subs	r3, #1
 8009282:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8009284:	429a      	cmp	r2, r3
 8009286:	d123      	bne.n	80092d0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009288:	697b      	ldr	r3, [r7, #20]
 800928a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009292:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009294:	429a      	cmp	r2, r3
 8009296:	d11b      	bne.n	80092d0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8009298:	697b      	ldr	r3, [r7, #20]
 800929a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092a2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80092a4:	429a      	cmp	r2, r3
 80092a6:	d113      	bne.n	80092d0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80092a8:	697b      	ldr	r3, [r7, #20]
 80092aa:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092b2:	085b      	lsrs	r3, r3, #1
 80092b4:	3b01      	subs	r3, #1
 80092b6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80092b8:	429a      	cmp	r2, r3
 80092ba:	d109      	bne.n	80092d0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80092bc:	697b      	ldr	r3, [r7, #20]
 80092be:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092c6:	085b      	lsrs	r3, r3, #1
 80092c8:	3b01      	subs	r3, #1
 80092ca:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80092cc:	429a      	cmp	r2, r3
 80092ce:	d067      	beq.n	80093a0 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80092d0:	69bb      	ldr	r3, [r7, #24]
 80092d2:	2b0c      	cmp	r3, #12
 80092d4:	d062      	beq.n	800939c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80092d6:	4b5f      	ldr	r3, [pc, #380]	; (8009454 <HAL_RCC_OscConfig+0x82c>)
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d001      	beq.n	80092e6 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80092e2:	2301      	movs	r3, #1
 80092e4:	e0bb      	b.n	800945e <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80092e6:	4b5b      	ldr	r3, [pc, #364]	; (8009454 <HAL_RCC_OscConfig+0x82c>)
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	4a5a      	ldr	r2, [pc, #360]	; (8009454 <HAL_RCC_OscConfig+0x82c>)
 80092ec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80092f0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80092f2:	f7fe fdbb 	bl	8007e6c <HAL_GetTick>
 80092f6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80092f8:	e008      	b.n	800930c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80092fa:	f7fe fdb7 	bl	8007e6c <HAL_GetTick>
 80092fe:	4602      	mov	r2, r0
 8009300:	693b      	ldr	r3, [r7, #16]
 8009302:	1ad3      	subs	r3, r2, r3
 8009304:	2b02      	cmp	r3, #2
 8009306:	d901      	bls.n	800930c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8009308:	2303      	movs	r3, #3
 800930a:	e0a8      	b.n	800945e <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800930c:	4b51      	ldr	r3, [pc, #324]	; (8009454 <HAL_RCC_OscConfig+0x82c>)
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009314:	2b00      	cmp	r3, #0
 8009316:	d1f0      	bne.n	80092fa <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009318:	4b4e      	ldr	r3, [pc, #312]	; (8009454 <HAL_RCC_OscConfig+0x82c>)
 800931a:	68da      	ldr	r2, [r3, #12]
 800931c:	4b4e      	ldr	r3, [pc, #312]	; (8009458 <HAL_RCC_OscConfig+0x830>)
 800931e:	4013      	ands	r3, r2
 8009320:	687a      	ldr	r2, [r7, #4]
 8009322:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8009324:	687a      	ldr	r2, [r7, #4]
 8009326:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8009328:	3a01      	subs	r2, #1
 800932a:	0112      	lsls	r2, r2, #4
 800932c:	4311      	orrs	r1, r2
 800932e:	687a      	ldr	r2, [r7, #4]
 8009330:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8009332:	0212      	lsls	r2, r2, #8
 8009334:	4311      	orrs	r1, r2
 8009336:	687a      	ldr	r2, [r7, #4]
 8009338:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800933a:	0852      	lsrs	r2, r2, #1
 800933c:	3a01      	subs	r2, #1
 800933e:	0552      	lsls	r2, r2, #21
 8009340:	4311      	orrs	r1, r2
 8009342:	687a      	ldr	r2, [r7, #4]
 8009344:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8009346:	0852      	lsrs	r2, r2, #1
 8009348:	3a01      	subs	r2, #1
 800934a:	0652      	lsls	r2, r2, #25
 800934c:	4311      	orrs	r1, r2
 800934e:	687a      	ldr	r2, [r7, #4]
 8009350:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009352:	06d2      	lsls	r2, r2, #27
 8009354:	430a      	orrs	r2, r1
 8009356:	493f      	ldr	r1, [pc, #252]	; (8009454 <HAL_RCC_OscConfig+0x82c>)
 8009358:	4313      	orrs	r3, r2
 800935a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800935c:	4b3d      	ldr	r3, [pc, #244]	; (8009454 <HAL_RCC_OscConfig+0x82c>)
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	4a3c      	ldr	r2, [pc, #240]	; (8009454 <HAL_RCC_OscConfig+0x82c>)
 8009362:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009366:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8009368:	4b3a      	ldr	r3, [pc, #232]	; (8009454 <HAL_RCC_OscConfig+0x82c>)
 800936a:	68db      	ldr	r3, [r3, #12]
 800936c:	4a39      	ldr	r2, [pc, #228]	; (8009454 <HAL_RCC_OscConfig+0x82c>)
 800936e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009372:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8009374:	f7fe fd7a 	bl	8007e6c <HAL_GetTick>
 8009378:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800937a:	e008      	b.n	800938e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800937c:	f7fe fd76 	bl	8007e6c <HAL_GetTick>
 8009380:	4602      	mov	r2, r0
 8009382:	693b      	ldr	r3, [r7, #16]
 8009384:	1ad3      	subs	r3, r2, r3
 8009386:	2b02      	cmp	r3, #2
 8009388:	d901      	bls.n	800938e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800938a:	2303      	movs	r3, #3
 800938c:	e067      	b.n	800945e <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800938e:	4b31      	ldr	r3, [pc, #196]	; (8009454 <HAL_RCC_OscConfig+0x82c>)
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009396:	2b00      	cmp	r3, #0
 8009398:	d0f0      	beq.n	800937c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800939a:	e05f      	b.n	800945c <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800939c:	2301      	movs	r3, #1
 800939e:	e05e      	b.n	800945e <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80093a0:	4b2c      	ldr	r3, [pc, #176]	; (8009454 <HAL_RCC_OscConfig+0x82c>)
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d157      	bne.n	800945c <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80093ac:	4b29      	ldr	r3, [pc, #164]	; (8009454 <HAL_RCC_OscConfig+0x82c>)
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	4a28      	ldr	r2, [pc, #160]	; (8009454 <HAL_RCC_OscConfig+0x82c>)
 80093b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80093b6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80093b8:	4b26      	ldr	r3, [pc, #152]	; (8009454 <HAL_RCC_OscConfig+0x82c>)
 80093ba:	68db      	ldr	r3, [r3, #12]
 80093bc:	4a25      	ldr	r2, [pc, #148]	; (8009454 <HAL_RCC_OscConfig+0x82c>)
 80093be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80093c2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80093c4:	f7fe fd52 	bl	8007e6c <HAL_GetTick>
 80093c8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80093ca:	e008      	b.n	80093de <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80093cc:	f7fe fd4e 	bl	8007e6c <HAL_GetTick>
 80093d0:	4602      	mov	r2, r0
 80093d2:	693b      	ldr	r3, [r7, #16]
 80093d4:	1ad3      	subs	r3, r2, r3
 80093d6:	2b02      	cmp	r3, #2
 80093d8:	d901      	bls.n	80093de <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 80093da:	2303      	movs	r3, #3
 80093dc:	e03f      	b.n	800945e <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80093de:	4b1d      	ldr	r3, [pc, #116]	; (8009454 <HAL_RCC_OscConfig+0x82c>)
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d0f0      	beq.n	80093cc <HAL_RCC_OscConfig+0x7a4>
 80093ea:	e037      	b.n	800945c <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80093ec:	69bb      	ldr	r3, [r7, #24]
 80093ee:	2b0c      	cmp	r3, #12
 80093f0:	d02d      	beq.n	800944e <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80093f2:	4b18      	ldr	r3, [pc, #96]	; (8009454 <HAL_RCC_OscConfig+0x82c>)
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	4a17      	ldr	r2, [pc, #92]	; (8009454 <HAL_RCC_OscConfig+0x82c>)
 80093f8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80093fc:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80093fe:	4b15      	ldr	r3, [pc, #84]	; (8009454 <HAL_RCC_OscConfig+0x82c>)
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009406:	2b00      	cmp	r3, #0
 8009408:	d105      	bne.n	8009416 <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800940a:	4b12      	ldr	r3, [pc, #72]	; (8009454 <HAL_RCC_OscConfig+0x82c>)
 800940c:	68db      	ldr	r3, [r3, #12]
 800940e:	4a11      	ldr	r2, [pc, #68]	; (8009454 <HAL_RCC_OscConfig+0x82c>)
 8009410:	f023 0303 	bic.w	r3, r3, #3
 8009414:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8009416:	4b0f      	ldr	r3, [pc, #60]	; (8009454 <HAL_RCC_OscConfig+0x82c>)
 8009418:	68db      	ldr	r3, [r3, #12]
 800941a:	4a0e      	ldr	r2, [pc, #56]	; (8009454 <HAL_RCC_OscConfig+0x82c>)
 800941c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8009420:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009424:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009426:	f7fe fd21 	bl	8007e6c <HAL_GetTick>
 800942a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800942c:	e008      	b.n	8009440 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800942e:	f7fe fd1d 	bl	8007e6c <HAL_GetTick>
 8009432:	4602      	mov	r2, r0
 8009434:	693b      	ldr	r3, [r7, #16]
 8009436:	1ad3      	subs	r3, r2, r3
 8009438:	2b02      	cmp	r3, #2
 800943a:	d901      	bls.n	8009440 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 800943c:	2303      	movs	r3, #3
 800943e:	e00e      	b.n	800945e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009440:	4b04      	ldr	r3, [pc, #16]	; (8009454 <HAL_RCC_OscConfig+0x82c>)
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009448:	2b00      	cmp	r3, #0
 800944a:	d1f0      	bne.n	800942e <HAL_RCC_OscConfig+0x806>
 800944c:	e006      	b.n	800945c <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800944e:	2301      	movs	r3, #1
 8009450:	e005      	b.n	800945e <HAL_RCC_OscConfig+0x836>
 8009452:	bf00      	nop
 8009454:	40021000 	.word	0x40021000
 8009458:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 800945c:	2300      	movs	r3, #0
}
 800945e:	4618      	mov	r0, r3
 8009460:	3720      	adds	r7, #32
 8009462:	46bd      	mov	sp, r7
 8009464:	bd80      	pop	{r7, pc}
 8009466:	bf00      	nop

08009468 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009468:	b580      	push	{r7, lr}
 800946a:	b084      	sub	sp, #16
 800946c:	af00      	add	r7, sp, #0
 800946e:	6078      	str	r0, [r7, #4]
 8009470:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	2b00      	cmp	r3, #0
 8009476:	d101      	bne.n	800947c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009478:	2301      	movs	r3, #1
 800947a:	e0c8      	b.n	800960e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800947c:	4b66      	ldr	r3, [pc, #408]	; (8009618 <HAL_RCC_ClockConfig+0x1b0>)
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	f003 0307 	and.w	r3, r3, #7
 8009484:	683a      	ldr	r2, [r7, #0]
 8009486:	429a      	cmp	r2, r3
 8009488:	d910      	bls.n	80094ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800948a:	4b63      	ldr	r3, [pc, #396]	; (8009618 <HAL_RCC_ClockConfig+0x1b0>)
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	f023 0207 	bic.w	r2, r3, #7
 8009492:	4961      	ldr	r1, [pc, #388]	; (8009618 <HAL_RCC_ClockConfig+0x1b0>)
 8009494:	683b      	ldr	r3, [r7, #0]
 8009496:	4313      	orrs	r3, r2
 8009498:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800949a:	4b5f      	ldr	r3, [pc, #380]	; (8009618 <HAL_RCC_ClockConfig+0x1b0>)
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	f003 0307 	and.w	r3, r3, #7
 80094a2:	683a      	ldr	r2, [r7, #0]
 80094a4:	429a      	cmp	r2, r3
 80094a6:	d001      	beq.n	80094ac <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80094a8:	2301      	movs	r3, #1
 80094aa:	e0b0      	b.n	800960e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	f003 0301 	and.w	r3, r3, #1
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d04c      	beq.n	8009552 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	685b      	ldr	r3, [r3, #4]
 80094bc:	2b03      	cmp	r3, #3
 80094be:	d107      	bne.n	80094d0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80094c0:	4b56      	ldr	r3, [pc, #344]	; (800961c <HAL_RCC_ClockConfig+0x1b4>)
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d121      	bne.n	8009510 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80094cc:	2301      	movs	r3, #1
 80094ce:	e09e      	b.n	800960e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	685b      	ldr	r3, [r3, #4]
 80094d4:	2b02      	cmp	r3, #2
 80094d6:	d107      	bne.n	80094e8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80094d8:	4b50      	ldr	r3, [pc, #320]	; (800961c <HAL_RCC_ClockConfig+0x1b4>)
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d115      	bne.n	8009510 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80094e4:	2301      	movs	r3, #1
 80094e6:	e092      	b.n	800960e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	685b      	ldr	r3, [r3, #4]
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d107      	bne.n	8009500 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80094f0:	4b4a      	ldr	r3, [pc, #296]	; (800961c <HAL_RCC_ClockConfig+0x1b4>)
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	f003 0302 	and.w	r3, r3, #2
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d109      	bne.n	8009510 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80094fc:	2301      	movs	r3, #1
 80094fe:	e086      	b.n	800960e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009500:	4b46      	ldr	r3, [pc, #280]	; (800961c <HAL_RCC_ClockConfig+0x1b4>)
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009508:	2b00      	cmp	r3, #0
 800950a:	d101      	bne.n	8009510 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800950c:	2301      	movs	r3, #1
 800950e:	e07e      	b.n	800960e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009510:	4b42      	ldr	r3, [pc, #264]	; (800961c <HAL_RCC_ClockConfig+0x1b4>)
 8009512:	689b      	ldr	r3, [r3, #8]
 8009514:	f023 0203 	bic.w	r2, r3, #3
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	685b      	ldr	r3, [r3, #4]
 800951c:	493f      	ldr	r1, [pc, #252]	; (800961c <HAL_RCC_ClockConfig+0x1b4>)
 800951e:	4313      	orrs	r3, r2
 8009520:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009522:	f7fe fca3 	bl	8007e6c <HAL_GetTick>
 8009526:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009528:	e00a      	b.n	8009540 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800952a:	f7fe fc9f 	bl	8007e6c <HAL_GetTick>
 800952e:	4602      	mov	r2, r0
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	1ad3      	subs	r3, r2, r3
 8009534:	f241 3288 	movw	r2, #5000	; 0x1388
 8009538:	4293      	cmp	r3, r2
 800953a:	d901      	bls.n	8009540 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800953c:	2303      	movs	r3, #3
 800953e:	e066      	b.n	800960e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009540:	4b36      	ldr	r3, [pc, #216]	; (800961c <HAL_RCC_ClockConfig+0x1b4>)
 8009542:	689b      	ldr	r3, [r3, #8]
 8009544:	f003 020c 	and.w	r2, r3, #12
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	685b      	ldr	r3, [r3, #4]
 800954c:	009b      	lsls	r3, r3, #2
 800954e:	429a      	cmp	r2, r3
 8009550:	d1eb      	bne.n	800952a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	f003 0302 	and.w	r3, r3, #2
 800955a:	2b00      	cmp	r3, #0
 800955c:	d008      	beq.n	8009570 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800955e:	4b2f      	ldr	r3, [pc, #188]	; (800961c <HAL_RCC_ClockConfig+0x1b4>)
 8009560:	689b      	ldr	r3, [r3, #8]
 8009562:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	689b      	ldr	r3, [r3, #8]
 800956a:	492c      	ldr	r1, [pc, #176]	; (800961c <HAL_RCC_ClockConfig+0x1b4>)
 800956c:	4313      	orrs	r3, r2
 800956e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009570:	4b29      	ldr	r3, [pc, #164]	; (8009618 <HAL_RCC_ClockConfig+0x1b0>)
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	f003 0307 	and.w	r3, r3, #7
 8009578:	683a      	ldr	r2, [r7, #0]
 800957a:	429a      	cmp	r2, r3
 800957c:	d210      	bcs.n	80095a0 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800957e:	4b26      	ldr	r3, [pc, #152]	; (8009618 <HAL_RCC_ClockConfig+0x1b0>)
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	f023 0207 	bic.w	r2, r3, #7
 8009586:	4924      	ldr	r1, [pc, #144]	; (8009618 <HAL_RCC_ClockConfig+0x1b0>)
 8009588:	683b      	ldr	r3, [r7, #0]
 800958a:	4313      	orrs	r3, r2
 800958c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800958e:	4b22      	ldr	r3, [pc, #136]	; (8009618 <HAL_RCC_ClockConfig+0x1b0>)
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	f003 0307 	and.w	r3, r3, #7
 8009596:	683a      	ldr	r2, [r7, #0]
 8009598:	429a      	cmp	r2, r3
 800959a:	d001      	beq.n	80095a0 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800959c:	2301      	movs	r3, #1
 800959e:	e036      	b.n	800960e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	f003 0304 	and.w	r3, r3, #4
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d008      	beq.n	80095be <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80095ac:	4b1b      	ldr	r3, [pc, #108]	; (800961c <HAL_RCC_ClockConfig+0x1b4>)
 80095ae:	689b      	ldr	r3, [r3, #8]
 80095b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	68db      	ldr	r3, [r3, #12]
 80095b8:	4918      	ldr	r1, [pc, #96]	; (800961c <HAL_RCC_ClockConfig+0x1b4>)
 80095ba:	4313      	orrs	r3, r2
 80095bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	f003 0308 	and.w	r3, r3, #8
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d009      	beq.n	80095de <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80095ca:	4b14      	ldr	r3, [pc, #80]	; (800961c <HAL_RCC_ClockConfig+0x1b4>)
 80095cc:	689b      	ldr	r3, [r3, #8]
 80095ce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	691b      	ldr	r3, [r3, #16]
 80095d6:	00db      	lsls	r3, r3, #3
 80095d8:	4910      	ldr	r1, [pc, #64]	; (800961c <HAL_RCC_ClockConfig+0x1b4>)
 80095da:	4313      	orrs	r3, r2
 80095dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80095de:	f000 f825 	bl	800962c <HAL_RCC_GetSysClockFreq>
 80095e2:	4601      	mov	r1, r0
 80095e4:	4b0d      	ldr	r3, [pc, #52]	; (800961c <HAL_RCC_ClockConfig+0x1b4>)
 80095e6:	689b      	ldr	r3, [r3, #8]
 80095e8:	091b      	lsrs	r3, r3, #4
 80095ea:	f003 030f 	and.w	r3, r3, #15
 80095ee:	4a0c      	ldr	r2, [pc, #48]	; (8009620 <HAL_RCC_ClockConfig+0x1b8>)
 80095f0:	5cd3      	ldrb	r3, [r2, r3]
 80095f2:	f003 031f 	and.w	r3, r3, #31
 80095f6:	fa21 f303 	lsr.w	r3, r1, r3
 80095fa:	4a0a      	ldr	r2, [pc, #40]	; (8009624 <HAL_RCC_ClockConfig+0x1bc>)
 80095fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80095fe:	4b0a      	ldr	r3, [pc, #40]	; (8009628 <HAL_RCC_ClockConfig+0x1c0>)
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	4618      	mov	r0, r3
 8009604:	f7fe fbe6 	bl	8007dd4 <HAL_InitTick>
 8009608:	4603      	mov	r3, r0
 800960a:	72fb      	strb	r3, [r7, #11]

  return status;
 800960c:	7afb      	ldrb	r3, [r7, #11]
}
 800960e:	4618      	mov	r0, r3
 8009610:	3710      	adds	r7, #16
 8009612:	46bd      	mov	sp, r7
 8009614:	bd80      	pop	{r7, pc}
 8009616:	bf00      	nop
 8009618:	40022000 	.word	0x40022000
 800961c:	40021000 	.word	0x40021000
 8009620:	080100a0 	.word	0x080100a0
 8009624:	20000000 	.word	0x20000000
 8009628:	200000ec 	.word	0x200000ec

0800962c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800962c:	b480      	push	{r7}
 800962e:	b089      	sub	sp, #36	; 0x24
 8009630:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8009632:	2300      	movs	r3, #0
 8009634:	61fb      	str	r3, [r7, #28]
 8009636:	2300      	movs	r3, #0
 8009638:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800963a:	4b3d      	ldr	r3, [pc, #244]	; (8009730 <HAL_RCC_GetSysClockFreq+0x104>)
 800963c:	689b      	ldr	r3, [r3, #8]
 800963e:	f003 030c 	and.w	r3, r3, #12
 8009642:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009644:	4b3a      	ldr	r3, [pc, #232]	; (8009730 <HAL_RCC_GetSysClockFreq+0x104>)
 8009646:	68db      	ldr	r3, [r3, #12]
 8009648:	f003 0303 	and.w	r3, r3, #3
 800964c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800964e:	693b      	ldr	r3, [r7, #16]
 8009650:	2b00      	cmp	r3, #0
 8009652:	d005      	beq.n	8009660 <HAL_RCC_GetSysClockFreq+0x34>
 8009654:	693b      	ldr	r3, [r7, #16]
 8009656:	2b0c      	cmp	r3, #12
 8009658:	d121      	bne.n	800969e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	2b01      	cmp	r3, #1
 800965e:	d11e      	bne.n	800969e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8009660:	4b33      	ldr	r3, [pc, #204]	; (8009730 <HAL_RCC_GetSysClockFreq+0x104>)
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	f003 0308 	and.w	r3, r3, #8
 8009668:	2b00      	cmp	r3, #0
 800966a:	d107      	bne.n	800967c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800966c:	4b30      	ldr	r3, [pc, #192]	; (8009730 <HAL_RCC_GetSysClockFreq+0x104>)
 800966e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009672:	0a1b      	lsrs	r3, r3, #8
 8009674:	f003 030f 	and.w	r3, r3, #15
 8009678:	61fb      	str	r3, [r7, #28]
 800967a:	e005      	b.n	8009688 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800967c:	4b2c      	ldr	r3, [pc, #176]	; (8009730 <HAL_RCC_GetSysClockFreq+0x104>)
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	091b      	lsrs	r3, r3, #4
 8009682:	f003 030f 	and.w	r3, r3, #15
 8009686:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8009688:	4a2a      	ldr	r2, [pc, #168]	; (8009734 <HAL_RCC_GetSysClockFreq+0x108>)
 800968a:	69fb      	ldr	r3, [r7, #28]
 800968c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009690:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8009692:	693b      	ldr	r3, [r7, #16]
 8009694:	2b00      	cmp	r3, #0
 8009696:	d10d      	bne.n	80096b4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8009698:	69fb      	ldr	r3, [r7, #28]
 800969a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800969c:	e00a      	b.n	80096b4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800969e:	693b      	ldr	r3, [r7, #16]
 80096a0:	2b04      	cmp	r3, #4
 80096a2:	d102      	bne.n	80096aa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80096a4:	4b24      	ldr	r3, [pc, #144]	; (8009738 <HAL_RCC_GetSysClockFreq+0x10c>)
 80096a6:	61bb      	str	r3, [r7, #24]
 80096a8:	e004      	b.n	80096b4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80096aa:	693b      	ldr	r3, [r7, #16]
 80096ac:	2b08      	cmp	r3, #8
 80096ae:	d101      	bne.n	80096b4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80096b0:	4b22      	ldr	r3, [pc, #136]	; (800973c <HAL_RCC_GetSysClockFreq+0x110>)
 80096b2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80096b4:	693b      	ldr	r3, [r7, #16]
 80096b6:	2b0c      	cmp	r3, #12
 80096b8:	d133      	bne.n	8009722 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80096ba:	4b1d      	ldr	r3, [pc, #116]	; (8009730 <HAL_RCC_GetSysClockFreq+0x104>)
 80096bc:	68db      	ldr	r3, [r3, #12]
 80096be:	f003 0303 	and.w	r3, r3, #3
 80096c2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80096c4:	68bb      	ldr	r3, [r7, #8]
 80096c6:	2b02      	cmp	r3, #2
 80096c8:	d002      	beq.n	80096d0 <HAL_RCC_GetSysClockFreq+0xa4>
 80096ca:	2b03      	cmp	r3, #3
 80096cc:	d003      	beq.n	80096d6 <HAL_RCC_GetSysClockFreq+0xaa>
 80096ce:	e005      	b.n	80096dc <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80096d0:	4b19      	ldr	r3, [pc, #100]	; (8009738 <HAL_RCC_GetSysClockFreq+0x10c>)
 80096d2:	617b      	str	r3, [r7, #20]
      break;
 80096d4:	e005      	b.n	80096e2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80096d6:	4b19      	ldr	r3, [pc, #100]	; (800973c <HAL_RCC_GetSysClockFreq+0x110>)
 80096d8:	617b      	str	r3, [r7, #20]
      break;
 80096da:	e002      	b.n	80096e2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80096dc:	69fb      	ldr	r3, [r7, #28]
 80096de:	617b      	str	r3, [r7, #20]
      break;
 80096e0:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80096e2:	4b13      	ldr	r3, [pc, #76]	; (8009730 <HAL_RCC_GetSysClockFreq+0x104>)
 80096e4:	68db      	ldr	r3, [r3, #12]
 80096e6:	091b      	lsrs	r3, r3, #4
 80096e8:	f003 0307 	and.w	r3, r3, #7
 80096ec:	3301      	adds	r3, #1
 80096ee:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80096f0:	4b0f      	ldr	r3, [pc, #60]	; (8009730 <HAL_RCC_GetSysClockFreq+0x104>)
 80096f2:	68db      	ldr	r3, [r3, #12]
 80096f4:	0a1b      	lsrs	r3, r3, #8
 80096f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80096fa:	697a      	ldr	r2, [r7, #20]
 80096fc:	fb02 f203 	mul.w	r2, r2, r3
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	fbb2 f3f3 	udiv	r3, r2, r3
 8009706:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009708:	4b09      	ldr	r3, [pc, #36]	; (8009730 <HAL_RCC_GetSysClockFreq+0x104>)
 800970a:	68db      	ldr	r3, [r3, #12]
 800970c:	0e5b      	lsrs	r3, r3, #25
 800970e:	f003 0303 	and.w	r3, r3, #3
 8009712:	3301      	adds	r3, #1
 8009714:	005b      	lsls	r3, r3, #1
 8009716:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8009718:	697a      	ldr	r2, [r7, #20]
 800971a:	683b      	ldr	r3, [r7, #0]
 800971c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009720:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8009722:	69bb      	ldr	r3, [r7, #24]
}
 8009724:	4618      	mov	r0, r3
 8009726:	3724      	adds	r7, #36	; 0x24
 8009728:	46bd      	mov	sp, r7
 800972a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972e:	4770      	bx	lr
 8009730:	40021000 	.word	0x40021000
 8009734:	080100b8 	.word	0x080100b8
 8009738:	00f42400 	.word	0x00f42400
 800973c:	007a1200 	.word	0x007a1200

08009740 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009740:	b480      	push	{r7}
 8009742:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009744:	4b03      	ldr	r3, [pc, #12]	; (8009754 <HAL_RCC_GetHCLKFreq+0x14>)
 8009746:	681b      	ldr	r3, [r3, #0]
}
 8009748:	4618      	mov	r0, r3
 800974a:	46bd      	mov	sp, r7
 800974c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009750:	4770      	bx	lr
 8009752:	bf00      	nop
 8009754:	20000000 	.word	0x20000000

08009758 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009758:	b580      	push	{r7, lr}
 800975a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800975c:	f7ff fff0 	bl	8009740 <HAL_RCC_GetHCLKFreq>
 8009760:	4601      	mov	r1, r0
 8009762:	4b06      	ldr	r3, [pc, #24]	; (800977c <HAL_RCC_GetPCLK1Freq+0x24>)
 8009764:	689b      	ldr	r3, [r3, #8]
 8009766:	0a1b      	lsrs	r3, r3, #8
 8009768:	f003 0307 	and.w	r3, r3, #7
 800976c:	4a04      	ldr	r2, [pc, #16]	; (8009780 <HAL_RCC_GetPCLK1Freq+0x28>)
 800976e:	5cd3      	ldrb	r3, [r2, r3]
 8009770:	f003 031f 	and.w	r3, r3, #31
 8009774:	fa21 f303 	lsr.w	r3, r1, r3
}
 8009778:	4618      	mov	r0, r3
 800977a:	bd80      	pop	{r7, pc}
 800977c:	40021000 	.word	0x40021000
 8009780:	080100b0 	.word	0x080100b0

08009784 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009784:	b580      	push	{r7, lr}
 8009786:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8009788:	f7ff ffda 	bl	8009740 <HAL_RCC_GetHCLKFreq>
 800978c:	4601      	mov	r1, r0
 800978e:	4b06      	ldr	r3, [pc, #24]	; (80097a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009790:	689b      	ldr	r3, [r3, #8]
 8009792:	0adb      	lsrs	r3, r3, #11
 8009794:	f003 0307 	and.w	r3, r3, #7
 8009798:	4a04      	ldr	r2, [pc, #16]	; (80097ac <HAL_RCC_GetPCLK2Freq+0x28>)
 800979a:	5cd3      	ldrb	r3, [r2, r3]
 800979c:	f003 031f 	and.w	r3, r3, #31
 80097a0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80097a4:	4618      	mov	r0, r3
 80097a6:	bd80      	pop	{r7, pc}
 80097a8:	40021000 	.word	0x40021000
 80097ac:	080100b0 	.word	0x080100b0

080097b0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80097b0:	b580      	push	{r7, lr}
 80097b2:	b086      	sub	sp, #24
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80097b8:	2300      	movs	r3, #0
 80097ba:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80097bc:	4b2a      	ldr	r3, [pc, #168]	; (8009868 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80097be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d003      	beq.n	80097d0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80097c8:	f7ff f9ca 	bl	8008b60 <HAL_PWREx_GetVoltageRange>
 80097cc:	6178      	str	r0, [r7, #20]
 80097ce:	e014      	b.n	80097fa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80097d0:	4b25      	ldr	r3, [pc, #148]	; (8009868 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80097d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097d4:	4a24      	ldr	r2, [pc, #144]	; (8009868 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80097d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80097da:	6593      	str	r3, [r2, #88]	; 0x58
 80097dc:	4b22      	ldr	r3, [pc, #136]	; (8009868 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80097de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80097e4:	60fb      	str	r3, [r7, #12]
 80097e6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80097e8:	f7ff f9ba 	bl	8008b60 <HAL_PWREx_GetVoltageRange>
 80097ec:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80097ee:	4b1e      	ldr	r3, [pc, #120]	; (8009868 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80097f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097f2:	4a1d      	ldr	r2, [pc, #116]	; (8009868 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80097f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80097f8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80097fa:	697b      	ldr	r3, [r7, #20]
 80097fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009800:	d10b      	bne.n	800981a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	2b80      	cmp	r3, #128	; 0x80
 8009806:	d919      	bls.n	800983c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	2ba0      	cmp	r3, #160	; 0xa0
 800980c:	d902      	bls.n	8009814 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800980e:	2302      	movs	r3, #2
 8009810:	613b      	str	r3, [r7, #16]
 8009812:	e013      	b.n	800983c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8009814:	2301      	movs	r3, #1
 8009816:	613b      	str	r3, [r7, #16]
 8009818:	e010      	b.n	800983c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	2b80      	cmp	r3, #128	; 0x80
 800981e:	d902      	bls.n	8009826 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8009820:	2303      	movs	r3, #3
 8009822:	613b      	str	r3, [r7, #16]
 8009824:	e00a      	b.n	800983c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	2b80      	cmp	r3, #128	; 0x80
 800982a:	d102      	bne.n	8009832 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800982c:	2302      	movs	r3, #2
 800982e:	613b      	str	r3, [r7, #16]
 8009830:	e004      	b.n	800983c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	2b70      	cmp	r3, #112	; 0x70
 8009836:	d101      	bne.n	800983c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8009838:	2301      	movs	r3, #1
 800983a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800983c:	4b0b      	ldr	r3, [pc, #44]	; (800986c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	f023 0207 	bic.w	r2, r3, #7
 8009844:	4909      	ldr	r1, [pc, #36]	; (800986c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8009846:	693b      	ldr	r3, [r7, #16]
 8009848:	4313      	orrs	r3, r2
 800984a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800984c:	4b07      	ldr	r3, [pc, #28]	; (800986c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	f003 0307 	and.w	r3, r3, #7
 8009854:	693a      	ldr	r2, [r7, #16]
 8009856:	429a      	cmp	r2, r3
 8009858:	d001      	beq.n	800985e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800985a:	2301      	movs	r3, #1
 800985c:	e000      	b.n	8009860 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800985e:	2300      	movs	r3, #0
}
 8009860:	4618      	mov	r0, r3
 8009862:	3718      	adds	r7, #24
 8009864:	46bd      	mov	sp, r7
 8009866:	bd80      	pop	{r7, pc}
 8009868:	40021000 	.word	0x40021000
 800986c:	40022000 	.word	0x40022000

08009870 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009870:	b580      	push	{r7, lr}
 8009872:	b086      	sub	sp, #24
 8009874:	af00      	add	r7, sp, #0
 8009876:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009878:	2300      	movs	r3, #0
 800987a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800987c:	2300      	movs	r3, #0
 800987e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009888:	2b00      	cmp	r3, #0
 800988a:	d02f      	beq.n	80098ec <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009890:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009894:	d005      	beq.n	80098a2 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8009896:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800989a:	d015      	beq.n	80098c8 <HAL_RCCEx_PeriphCLKConfig+0x58>
 800989c:	2b00      	cmp	r3, #0
 800989e:	d007      	beq.n	80098b0 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80098a0:	e00f      	b.n	80098c2 <HAL_RCCEx_PeriphCLKConfig+0x52>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80098a2:	4b5d      	ldr	r3, [pc, #372]	; (8009a18 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80098a4:	68db      	ldr	r3, [r3, #12]
 80098a6:	4a5c      	ldr	r2, [pc, #368]	; (8009a18 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80098a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80098ac:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80098ae:	e00c      	b.n	80098ca <HAL_RCCEx_PeriphCLKConfig+0x5a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	3304      	adds	r3, #4
 80098b4:	2100      	movs	r1, #0
 80098b6:	4618      	mov	r0, r3
 80098b8:	f000 fa1e 	bl	8009cf8 <RCCEx_PLLSAI1_Config>
 80098bc:	4603      	mov	r3, r0
 80098be:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80098c0:	e003      	b.n	80098ca <HAL_RCCEx_PeriphCLKConfig+0x5a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80098c2:	2301      	movs	r3, #1
 80098c4:	74fb      	strb	r3, [r7, #19]
      break;
 80098c6:	e000      	b.n	80098ca <HAL_RCCEx_PeriphCLKConfig+0x5a>
      break;
 80098c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80098ca:	7cfb      	ldrb	r3, [r7, #19]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d10b      	bne.n	80098e8 <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80098d0:	4b51      	ldr	r3, [pc, #324]	; (8009a18 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80098d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80098d6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098de:	494e      	ldr	r1, [pc, #312]	; (8009a18 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80098e0:	4313      	orrs	r3, r2
 80098e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80098e6:	e001      	b.n	80098ec <HAL_RCCEx_PeriphCLKConfig+0x7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098e8:	7cfb      	ldrb	r3, [r7, #19]
 80098ea:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	f000 809e 	beq.w	8009a36 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    FlagStatus       pwrclkchanged = RESET;
 80098fa:	2300      	movs	r3, #0
 80098fc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80098fe:	4b46      	ldr	r3, [pc, #280]	; (8009a18 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8009900:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009902:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009906:	2b00      	cmp	r3, #0
 8009908:	d101      	bne.n	800990e <HAL_RCCEx_PeriphCLKConfig+0x9e>
 800990a:	2301      	movs	r3, #1
 800990c:	e000      	b.n	8009910 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 800990e:	2300      	movs	r3, #0
 8009910:	2b00      	cmp	r3, #0
 8009912:	d00d      	beq.n	8009930 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009914:	4b40      	ldr	r3, [pc, #256]	; (8009a18 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8009916:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009918:	4a3f      	ldr	r2, [pc, #252]	; (8009a18 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800991a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800991e:	6593      	str	r3, [r2, #88]	; 0x58
 8009920:	4b3d      	ldr	r3, [pc, #244]	; (8009a18 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8009922:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009924:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009928:	60bb      	str	r3, [r7, #8]
 800992a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800992c:	2301      	movs	r3, #1
 800992e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009930:	4b3a      	ldr	r3, [pc, #232]	; (8009a1c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	4a39      	ldr	r2, [pc, #228]	; (8009a1c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8009936:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800993a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800993c:	f7fe fa96 	bl	8007e6c <HAL_GetTick>
 8009940:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8009942:	e009      	b.n	8009958 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009944:	f7fe fa92 	bl	8007e6c <HAL_GetTick>
 8009948:	4602      	mov	r2, r0
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	1ad3      	subs	r3, r2, r3
 800994e:	2b02      	cmp	r3, #2
 8009950:	d902      	bls.n	8009958 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        ret = HAL_TIMEOUT;
 8009952:	2303      	movs	r3, #3
 8009954:	74fb      	strb	r3, [r7, #19]
        break;
 8009956:	e005      	b.n	8009964 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8009958:	4b30      	ldr	r3, [pc, #192]	; (8009a1c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009960:	2b00      	cmp	r3, #0
 8009962:	d0ef      	beq.n	8009944 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      }
    }

    if(ret == HAL_OK)
 8009964:	7cfb      	ldrb	r3, [r7, #19]
 8009966:	2b00      	cmp	r3, #0
 8009968:	d15a      	bne.n	8009a20 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800996a:	4b2b      	ldr	r3, [pc, #172]	; (8009a18 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800996c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009970:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009974:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8009976:	697b      	ldr	r3, [r7, #20]
 8009978:	2b00      	cmp	r3, #0
 800997a:	d01e      	beq.n	80099ba <HAL_RCCEx_PeriphCLKConfig+0x14a>
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009980:	697a      	ldr	r2, [r7, #20]
 8009982:	429a      	cmp	r2, r3
 8009984:	d019      	beq.n	80099ba <HAL_RCCEx_PeriphCLKConfig+0x14a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8009986:	4b24      	ldr	r3, [pc, #144]	; (8009a18 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8009988:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800998c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009990:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009992:	4b21      	ldr	r3, [pc, #132]	; (8009a18 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8009994:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009998:	4a1f      	ldr	r2, [pc, #124]	; (8009a18 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800999a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800999e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80099a2:	4b1d      	ldr	r3, [pc, #116]	; (8009a18 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80099a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80099a8:	4a1b      	ldr	r2, [pc, #108]	; (8009a18 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80099aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80099ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80099b2:	4a19      	ldr	r2, [pc, #100]	; (8009a18 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80099b4:	697b      	ldr	r3, [r7, #20]
 80099b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80099ba:	697b      	ldr	r3, [r7, #20]
 80099bc:	f003 0301 	and.w	r3, r3, #1
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d016      	beq.n	80099f2 <HAL_RCCEx_PeriphCLKConfig+0x182>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80099c4:	f7fe fa52 	bl	8007e6c <HAL_GetTick>
 80099c8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80099ca:	e00b      	b.n	80099e4 <HAL_RCCEx_PeriphCLKConfig+0x174>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80099cc:	f7fe fa4e 	bl	8007e6c <HAL_GetTick>
 80099d0:	4602      	mov	r2, r0
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	1ad3      	subs	r3, r2, r3
 80099d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80099da:	4293      	cmp	r3, r2
 80099dc:	d902      	bls.n	80099e4 <HAL_RCCEx_PeriphCLKConfig+0x174>
          {
            ret = HAL_TIMEOUT;
 80099de:	2303      	movs	r3, #3
 80099e0:	74fb      	strb	r3, [r7, #19]
            break;
 80099e2:	e006      	b.n	80099f2 <HAL_RCCEx_PeriphCLKConfig+0x182>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80099e4:	4b0c      	ldr	r3, [pc, #48]	; (8009a18 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80099e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80099ea:	f003 0302 	and.w	r3, r3, #2
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d0ec      	beq.n	80099cc <HAL_RCCEx_PeriphCLKConfig+0x15c>
          }
        }
      }

      if(ret == HAL_OK)
 80099f2:	7cfb      	ldrb	r3, [r7, #19]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d10b      	bne.n	8009a10 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80099f8:	4b07      	ldr	r3, [pc, #28]	; (8009a18 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80099fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80099fe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a06:	4904      	ldr	r1, [pc, #16]	; (8009a18 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8009a08:	4313      	orrs	r3, r2
 8009a0a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8009a0e:	e009      	b.n	8009a24 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009a10:	7cfb      	ldrb	r3, [r7, #19]
 8009a12:	74bb      	strb	r3, [r7, #18]
 8009a14:	e006      	b.n	8009a24 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8009a16:	bf00      	nop
 8009a18:	40021000 	.word	0x40021000
 8009a1c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a20:	7cfb      	ldrb	r3, [r7, #19]
 8009a22:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009a24:	7c7b      	ldrb	r3, [r7, #17]
 8009a26:	2b01      	cmp	r3, #1
 8009a28:	d105      	bne.n	8009a36 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009a2a:	4bb2      	ldr	r3, [pc, #712]	; (8009cf4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8009a2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a2e:	4ab1      	ldr	r2, [pc, #708]	; (8009cf4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8009a30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009a34:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	f003 0301 	and.w	r3, r3, #1
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d00a      	beq.n	8009a58 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009a42:	4bac      	ldr	r3, [pc, #688]	; (8009cf4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8009a44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a48:	f023 0203 	bic.w	r2, r3, #3
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	6a1b      	ldr	r3, [r3, #32]
 8009a50:	49a8      	ldr	r1, [pc, #672]	; (8009cf4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8009a52:	4313      	orrs	r3, r2
 8009a54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	f003 0302 	and.w	r3, r3, #2
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d00a      	beq.n	8009a7a <HAL_RCCEx_PeriphCLKConfig+0x20a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009a64:	4ba3      	ldr	r3, [pc, #652]	; (8009cf4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8009a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a6a:	f023 020c 	bic.w	r2, r3, #12
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a72:	49a0      	ldr	r1, [pc, #640]	; (8009cf4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8009a74:	4313      	orrs	r3, r2
 8009a76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	f003 0304 	and.w	r3, r3, #4
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d00a      	beq.n	8009a9c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009a86:	4b9b      	ldr	r3, [pc, #620]	; (8009cf4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8009a88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a8c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a94:	4997      	ldr	r1, [pc, #604]	; (8009cf4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8009a96:	4313      	orrs	r3, r2
 8009a98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	f003 0320 	and.w	r3, r3, #32
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d00a      	beq.n	8009abe <HAL_RCCEx_PeriphCLKConfig+0x24e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009aa8:	4b92      	ldr	r3, [pc, #584]	; (8009cf4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8009aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009aae:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ab6:	498f      	ldr	r1, [pc, #572]	; (8009cf4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8009ab8:	4313      	orrs	r3, r2
 8009aba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d00a      	beq.n	8009ae0 <HAL_RCCEx_PeriphCLKConfig+0x270>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009aca:	4b8a      	ldr	r3, [pc, #552]	; (8009cf4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8009acc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ad0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ad8:	4986      	ldr	r1, [pc, #536]	; (8009cf4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8009ada:	4313      	orrs	r3, r2
 8009adc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d00a      	beq.n	8009b02 <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009aec:	4b81      	ldr	r3, [pc, #516]	; (8009cf4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8009aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009af2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009afa:	497e      	ldr	r1, [pc, #504]	; (8009cf4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8009afc:	4313      	orrs	r3, r2
 8009afe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d00a      	beq.n	8009b24 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009b0e:	4b79      	ldr	r3, [pc, #484]	; (8009cf4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8009b10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b14:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b1c:	4975      	ldr	r1, [pc, #468]	; (8009cf4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8009b1e:	4313      	orrs	r3, r2
 8009b20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d00a      	beq.n	8009b46 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009b30:	4b70      	ldr	r3, [pc, #448]	; (8009cf4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8009b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b36:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b3e:	496d      	ldr	r1, [pc, #436]	; (8009cf4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8009b40:	4313      	orrs	r3, r2
 8009b42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d00a      	beq.n	8009b68 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009b52:	4b68      	ldr	r3, [pc, #416]	; (8009cf4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8009b54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b58:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b60:	4964      	ldr	r1, [pc, #400]	; (8009cf4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8009b62:	4313      	orrs	r3, r2
 8009b64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d028      	beq.n	8009bc6 <HAL_RCCEx_PeriphCLKConfig+0x356>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009b74:	4b5f      	ldr	r3, [pc, #380]	; (8009cf4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8009b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b7a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009b82:	495c      	ldr	r1, [pc, #368]	; (8009cf4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8009b84:	4313      	orrs	r3, r2
 8009b86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009b8e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009b92:	d106      	bne.n	8009ba2 <HAL_RCCEx_PeriphCLKConfig+0x332>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009b94:	4b57      	ldr	r3, [pc, #348]	; (8009cf4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8009b96:	68db      	ldr	r3, [r3, #12]
 8009b98:	4a56      	ldr	r2, [pc, #344]	; (8009cf4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8009b9a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009b9e:	60d3      	str	r3, [r2, #12]
 8009ba0:	e011      	b.n	8009bc6 <HAL_RCCEx_PeriphCLKConfig+0x356>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009ba6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009baa:	d10c      	bne.n	8009bc6 <HAL_RCCEx_PeriphCLKConfig+0x356>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	3304      	adds	r3, #4
 8009bb0:	2101      	movs	r1, #1
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	f000 f8a0 	bl	8009cf8 <RCCEx_PLLSAI1_Config>
 8009bb8:	4603      	mov	r3, r0
 8009bba:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8009bbc:	7cfb      	ldrb	r3, [r7, #19]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d001      	beq.n	8009bc6 <HAL_RCCEx_PeriphCLKConfig+0x356>
        {
          /* set overall return value */
          status = ret;
 8009bc2:	7cfb      	ldrb	r3, [r7, #19]
 8009bc4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d028      	beq.n	8009c24 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8009bd2:	4b48      	ldr	r3, [pc, #288]	; (8009cf4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8009bd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009bd8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009be0:	4944      	ldr	r1, [pc, #272]	; (8009cf4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8009be2:	4313      	orrs	r3, r2
 8009be4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009bec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009bf0:	d106      	bne.n	8009c00 <HAL_RCCEx_PeriphCLKConfig+0x390>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009bf2:	4b40      	ldr	r3, [pc, #256]	; (8009cf4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8009bf4:	68db      	ldr	r3, [r3, #12]
 8009bf6:	4a3f      	ldr	r2, [pc, #252]	; (8009cf4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8009bf8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009bfc:	60d3      	str	r3, [r2, #12]
 8009bfe:	e011      	b.n	8009c24 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c04:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009c08:	d10c      	bne.n	8009c24 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	3304      	adds	r3, #4
 8009c0e:	2101      	movs	r1, #1
 8009c10:	4618      	mov	r0, r3
 8009c12:	f000 f871 	bl	8009cf8 <RCCEx_PLLSAI1_Config>
 8009c16:	4603      	mov	r3, r0
 8009c18:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009c1a:	7cfb      	ldrb	r3, [r7, #19]
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d001      	beq.n	8009c24 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
      {
        /* set overall return value */
        status = ret;
 8009c20:	7cfb      	ldrb	r3, [r7, #19]
 8009c22:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d028      	beq.n	8009c82 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009c30:	4b30      	ldr	r3, [pc, #192]	; (8009cf4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8009c32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c36:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c3e:	492d      	ldr	r1, [pc, #180]	; (8009cf4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8009c40:	4313      	orrs	r3, r2
 8009c42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c4a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009c4e:	d106      	bne.n	8009c5e <HAL_RCCEx_PeriphCLKConfig+0x3ee>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009c50:	4b28      	ldr	r3, [pc, #160]	; (8009cf4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8009c52:	68db      	ldr	r3, [r3, #12]
 8009c54:	4a27      	ldr	r2, [pc, #156]	; (8009cf4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8009c56:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009c5a:	60d3      	str	r3, [r2, #12]
 8009c5c:	e011      	b.n	8009c82 <HAL_RCCEx_PeriphCLKConfig+0x412>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c62:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009c66:	d10c      	bne.n	8009c82 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	3304      	adds	r3, #4
 8009c6c:	2101      	movs	r1, #1
 8009c6e:	4618      	mov	r0, r3
 8009c70:	f000 f842 	bl	8009cf8 <RCCEx_PLLSAI1_Config>
 8009c74:	4603      	mov	r3, r0
 8009c76:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009c78:	7cfb      	ldrb	r3, [r7, #19]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d001      	beq.n	8009c82 <HAL_RCCEx_PeriphCLKConfig+0x412>
      {
        /* set overall return value */
        status = ret;
 8009c7e:	7cfb      	ldrb	r3, [r7, #19]
 8009c80:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d01c      	beq.n	8009cc8 <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009c8e:	4b19      	ldr	r3, [pc, #100]	; (8009cf4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8009c90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c94:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c9c:	4915      	ldr	r1, [pc, #84]	; (8009cf4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8009c9e:	4313      	orrs	r3, r2
 8009ca0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ca8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009cac:	d10c      	bne.n	8009cc8 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	3304      	adds	r3, #4
 8009cb2:	2102      	movs	r1, #2
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	f000 f81f 	bl	8009cf8 <RCCEx_PLLSAI1_Config>
 8009cba:	4603      	mov	r3, r0
 8009cbc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009cbe:	7cfb      	ldrb	r3, [r7, #19]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d001      	beq.n	8009cc8 <HAL_RCCEx_PeriphCLKConfig+0x458>
      {
        /* set overall return value */
        status = ret;
 8009cc4:	7cfb      	ldrb	r3, [r7, #19]
 8009cc6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d00a      	beq.n	8009cea <HAL_RCCEx_PeriphCLKConfig+0x47a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009cd4:	4b07      	ldr	r3, [pc, #28]	; (8009cf4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8009cd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009cda:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ce2:	4904      	ldr	r1, [pc, #16]	; (8009cf4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8009ce4:	4313      	orrs	r3, r2
 8009ce6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8009cea:	7cbb      	ldrb	r3, [r7, #18]
}
 8009cec:	4618      	mov	r0, r3
 8009cee:	3718      	adds	r7, #24
 8009cf0:	46bd      	mov	sp, r7
 8009cf2:	bd80      	pop	{r7, pc}
 8009cf4:	40021000 	.word	0x40021000

08009cf8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	b084      	sub	sp, #16
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	6078      	str	r0, [r7, #4]
 8009d00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009d02:	2300      	movs	r3, #0
 8009d04:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8009d06:	4b73      	ldr	r3, [pc, #460]	; (8009ed4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8009d08:	68db      	ldr	r3, [r3, #12]
 8009d0a:	f003 0303 	and.w	r3, r3, #3
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d018      	beq.n	8009d44 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8009d12:	4b70      	ldr	r3, [pc, #448]	; (8009ed4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8009d14:	68db      	ldr	r3, [r3, #12]
 8009d16:	f003 0203 	and.w	r2, r3, #3
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	429a      	cmp	r2, r3
 8009d20:	d10d      	bne.n	8009d3e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
       ||
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d009      	beq.n	8009d3e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8009d2a:	4b6a      	ldr	r3, [pc, #424]	; (8009ed4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8009d2c:	68db      	ldr	r3, [r3, #12]
 8009d2e:	091b      	lsrs	r3, r3, #4
 8009d30:	f003 0307 	and.w	r3, r3, #7
 8009d34:	1c5a      	adds	r2, r3, #1
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	685b      	ldr	r3, [r3, #4]
       ||
 8009d3a:	429a      	cmp	r2, r3
 8009d3c:	d044      	beq.n	8009dc8 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8009d3e:	2301      	movs	r3, #1
 8009d40:	73fb      	strb	r3, [r7, #15]
 8009d42:	e041      	b.n	8009dc8 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	2b02      	cmp	r3, #2
 8009d4a:	d00c      	beq.n	8009d66 <RCCEx_PLLSAI1_Config+0x6e>
 8009d4c:	2b03      	cmp	r3, #3
 8009d4e:	d013      	beq.n	8009d78 <RCCEx_PLLSAI1_Config+0x80>
 8009d50:	2b01      	cmp	r3, #1
 8009d52:	d120      	bne.n	8009d96 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8009d54:	4b5f      	ldr	r3, [pc, #380]	; (8009ed4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	f003 0302 	and.w	r3, r3, #2
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d11d      	bne.n	8009d9c <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8009d60:	2301      	movs	r3, #1
 8009d62:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009d64:	e01a      	b.n	8009d9c <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8009d66:	4b5b      	ldr	r3, [pc, #364]	; (8009ed4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d116      	bne.n	8009da0 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8009d72:	2301      	movs	r3, #1
 8009d74:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009d76:	e013      	b.n	8009da0 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8009d78:	4b56      	ldr	r3, [pc, #344]	; (8009ed4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d10f      	bne.n	8009da4 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8009d84:	4b53      	ldr	r3, [pc, #332]	; (8009ed4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d109      	bne.n	8009da4 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8009d90:	2301      	movs	r3, #1
 8009d92:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009d94:	e006      	b.n	8009da4 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8009d96:	2301      	movs	r3, #1
 8009d98:	73fb      	strb	r3, [r7, #15]
      break;
 8009d9a:	e004      	b.n	8009da6 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8009d9c:	bf00      	nop
 8009d9e:	e002      	b.n	8009da6 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8009da0:	bf00      	nop
 8009da2:	e000      	b.n	8009da6 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8009da4:	bf00      	nop
    }

    if(status == HAL_OK)
 8009da6:	7bfb      	ldrb	r3, [r7, #15]
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d10d      	bne.n	8009dc8 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8009dac:	4b49      	ldr	r3, [pc, #292]	; (8009ed4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8009dae:	68db      	ldr	r3, [r3, #12]
 8009db0:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	6819      	ldr	r1, [r3, #0]
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	685b      	ldr	r3, [r3, #4]
 8009dbc:	3b01      	subs	r3, #1
 8009dbe:	011b      	lsls	r3, r3, #4
 8009dc0:	430b      	orrs	r3, r1
 8009dc2:	4944      	ldr	r1, [pc, #272]	; (8009ed4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8009dc4:	4313      	orrs	r3, r2
 8009dc6:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8009dc8:	7bfb      	ldrb	r3, [r7, #15]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d17c      	bne.n	8009ec8 <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8009dce:	4b41      	ldr	r3, [pc, #260]	; (8009ed4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	4a40      	ldr	r2, [pc, #256]	; (8009ed4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8009dd4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009dd8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009dda:	f7fe f847 	bl	8007e6c <HAL_GetTick>
 8009dde:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8009de0:	e009      	b.n	8009df6 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009de2:	f7fe f843 	bl	8007e6c <HAL_GetTick>
 8009de6:	4602      	mov	r2, r0
 8009de8:	68bb      	ldr	r3, [r7, #8]
 8009dea:	1ad3      	subs	r3, r2, r3
 8009dec:	2b02      	cmp	r3, #2
 8009dee:	d902      	bls.n	8009df6 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8009df0:	2303      	movs	r3, #3
 8009df2:	73fb      	strb	r3, [r7, #15]
        break;
 8009df4:	e005      	b.n	8009e02 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8009df6:	4b37      	ldr	r3, [pc, #220]	; (8009ed4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d1ef      	bne.n	8009de2 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8009e02:	7bfb      	ldrb	r3, [r7, #15]
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d15f      	bne.n	8009ec8 <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8009e08:	683b      	ldr	r3, [r7, #0]
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d110      	bne.n	8009e30 <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8009e0e:	4b31      	ldr	r3, [pc, #196]	; (8009ed4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8009e10:	691b      	ldr	r3, [r3, #16]
 8009e12:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8009e16:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8009e1a:	687a      	ldr	r2, [r7, #4]
 8009e1c:	6892      	ldr	r2, [r2, #8]
 8009e1e:	0211      	lsls	r1, r2, #8
 8009e20:	687a      	ldr	r2, [r7, #4]
 8009e22:	68d2      	ldr	r2, [r2, #12]
 8009e24:	06d2      	lsls	r2, r2, #27
 8009e26:	430a      	orrs	r2, r1
 8009e28:	492a      	ldr	r1, [pc, #168]	; (8009ed4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8009e2a:	4313      	orrs	r3, r2
 8009e2c:	610b      	str	r3, [r1, #16]
 8009e2e:	e027      	b.n	8009e80 <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8009e30:	683b      	ldr	r3, [r7, #0]
 8009e32:	2b01      	cmp	r3, #1
 8009e34:	d112      	bne.n	8009e5c <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8009e36:	4b27      	ldr	r3, [pc, #156]	; (8009ed4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8009e38:	691b      	ldr	r3, [r3, #16]
 8009e3a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8009e3e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8009e42:	687a      	ldr	r2, [r7, #4]
 8009e44:	6892      	ldr	r2, [r2, #8]
 8009e46:	0211      	lsls	r1, r2, #8
 8009e48:	687a      	ldr	r2, [r7, #4]
 8009e4a:	6912      	ldr	r2, [r2, #16]
 8009e4c:	0852      	lsrs	r2, r2, #1
 8009e4e:	3a01      	subs	r2, #1
 8009e50:	0552      	lsls	r2, r2, #21
 8009e52:	430a      	orrs	r2, r1
 8009e54:	491f      	ldr	r1, [pc, #124]	; (8009ed4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8009e56:	4313      	orrs	r3, r2
 8009e58:	610b      	str	r3, [r1, #16]
 8009e5a:	e011      	b.n	8009e80 <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8009e5c:	4b1d      	ldr	r3, [pc, #116]	; (8009ed4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8009e5e:	691b      	ldr	r3, [r3, #16]
 8009e60:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8009e64:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8009e68:	687a      	ldr	r2, [r7, #4]
 8009e6a:	6892      	ldr	r2, [r2, #8]
 8009e6c:	0211      	lsls	r1, r2, #8
 8009e6e:	687a      	ldr	r2, [r7, #4]
 8009e70:	6952      	ldr	r2, [r2, #20]
 8009e72:	0852      	lsrs	r2, r2, #1
 8009e74:	3a01      	subs	r2, #1
 8009e76:	0652      	lsls	r2, r2, #25
 8009e78:	430a      	orrs	r2, r1
 8009e7a:	4916      	ldr	r1, [pc, #88]	; (8009ed4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8009e7c:	4313      	orrs	r3, r2
 8009e7e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8009e80:	4b14      	ldr	r3, [pc, #80]	; (8009ed4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	4a13      	ldr	r2, [pc, #76]	; (8009ed4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8009e86:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009e8a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009e8c:	f7fd ffee 	bl	8007e6c <HAL_GetTick>
 8009e90:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8009e92:	e009      	b.n	8009ea8 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009e94:	f7fd ffea 	bl	8007e6c <HAL_GetTick>
 8009e98:	4602      	mov	r2, r0
 8009e9a:	68bb      	ldr	r3, [r7, #8]
 8009e9c:	1ad3      	subs	r3, r2, r3
 8009e9e:	2b02      	cmp	r3, #2
 8009ea0:	d902      	bls.n	8009ea8 <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 8009ea2:	2303      	movs	r3, #3
 8009ea4:	73fb      	strb	r3, [r7, #15]
          break;
 8009ea6:	e005      	b.n	8009eb4 <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8009ea8:	4b0a      	ldr	r3, [pc, #40]	; (8009ed4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d0ef      	beq.n	8009e94 <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 8009eb4:	7bfb      	ldrb	r3, [r7, #15]
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d106      	bne.n	8009ec8 <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8009eba:	4b06      	ldr	r3, [pc, #24]	; (8009ed4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8009ebc:	691a      	ldr	r2, [r3, #16]
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	699b      	ldr	r3, [r3, #24]
 8009ec2:	4904      	ldr	r1, [pc, #16]	; (8009ed4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8009ec4:	4313      	orrs	r3, r2
 8009ec6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8009ec8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009eca:	4618      	mov	r0, r3
 8009ecc:	3710      	adds	r7, #16
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	bd80      	pop	{r7, pc}
 8009ed2:	bf00      	nop
 8009ed4:	40021000 	.word	0x40021000

08009ed8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009ed8:	b580      	push	{r7, lr}
 8009eda:	b082      	sub	sp, #8
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d101      	bne.n	8009eea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009ee6:	2301      	movs	r3, #1
 8009ee8:	e01d      	b.n	8009f26 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009ef0:	b2db      	uxtb	r3, r3
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d106      	bne.n	8009f04 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	2200      	movs	r2, #0
 8009efa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009efe:	6878      	ldr	r0, [r7, #4]
 8009f00:	f7f8 f864 	bl	8001fcc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	2202      	movs	r2, #2
 8009f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681a      	ldr	r2, [r3, #0]
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	3304      	adds	r3, #4
 8009f14:	4619      	mov	r1, r3
 8009f16:	4610      	mov	r0, r2
 8009f18:	f000 f80a 	bl	8009f30 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	2201      	movs	r2, #1
 8009f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009f24:	2300      	movs	r3, #0
}
 8009f26:	4618      	mov	r0, r3
 8009f28:	3708      	adds	r7, #8
 8009f2a:	46bd      	mov	sp, r7
 8009f2c:	bd80      	pop	{r7, pc}
	...

08009f30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009f30:	b480      	push	{r7}
 8009f32:	b085      	sub	sp, #20
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	6078      	str	r0, [r7, #4]
 8009f38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	4a2a      	ldr	r2, [pc, #168]	; (8009fec <TIM_Base_SetConfig+0xbc>)
 8009f44:	4293      	cmp	r3, r2
 8009f46:	d003      	beq.n	8009f50 <TIM_Base_SetConfig+0x20>
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f4e:	d108      	bne.n	8009f62 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009f58:	683b      	ldr	r3, [r7, #0]
 8009f5a:	685b      	ldr	r3, [r3, #4]
 8009f5c:	68fa      	ldr	r2, [r7, #12]
 8009f5e:	4313      	orrs	r3, r2
 8009f60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	4a21      	ldr	r2, [pc, #132]	; (8009fec <TIM_Base_SetConfig+0xbc>)
 8009f66:	4293      	cmp	r3, r2
 8009f68:	d00b      	beq.n	8009f82 <TIM_Base_SetConfig+0x52>
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f70:	d007      	beq.n	8009f82 <TIM_Base_SetConfig+0x52>
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	4a1e      	ldr	r2, [pc, #120]	; (8009ff0 <TIM_Base_SetConfig+0xc0>)
 8009f76:	4293      	cmp	r3, r2
 8009f78:	d003      	beq.n	8009f82 <TIM_Base_SetConfig+0x52>
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	4a1d      	ldr	r2, [pc, #116]	; (8009ff4 <TIM_Base_SetConfig+0xc4>)
 8009f7e:	4293      	cmp	r3, r2
 8009f80:	d108      	bne.n	8009f94 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009f88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009f8a:	683b      	ldr	r3, [r7, #0]
 8009f8c:	68db      	ldr	r3, [r3, #12]
 8009f8e:	68fa      	ldr	r2, [r7, #12]
 8009f90:	4313      	orrs	r3, r2
 8009f92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009f9a:	683b      	ldr	r3, [r7, #0]
 8009f9c:	695b      	ldr	r3, [r3, #20]
 8009f9e:	4313      	orrs	r3, r2
 8009fa0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	68fa      	ldr	r2, [r7, #12]
 8009fa6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009fa8:	683b      	ldr	r3, [r7, #0]
 8009faa:	689a      	ldr	r2, [r3, #8]
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009fb0:	683b      	ldr	r3, [r7, #0]
 8009fb2:	681a      	ldr	r2, [r3, #0]
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	4a0c      	ldr	r2, [pc, #48]	; (8009fec <TIM_Base_SetConfig+0xbc>)
 8009fbc:	4293      	cmp	r3, r2
 8009fbe:	d007      	beq.n	8009fd0 <TIM_Base_SetConfig+0xa0>
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	4a0b      	ldr	r2, [pc, #44]	; (8009ff0 <TIM_Base_SetConfig+0xc0>)
 8009fc4:	4293      	cmp	r3, r2
 8009fc6:	d003      	beq.n	8009fd0 <TIM_Base_SetConfig+0xa0>
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	4a0a      	ldr	r2, [pc, #40]	; (8009ff4 <TIM_Base_SetConfig+0xc4>)
 8009fcc:	4293      	cmp	r3, r2
 8009fce:	d103      	bne.n	8009fd8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009fd0:	683b      	ldr	r3, [r7, #0]
 8009fd2:	691a      	ldr	r2, [r3, #16]
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	2201      	movs	r2, #1
 8009fdc:	615a      	str	r2, [r3, #20]
}
 8009fde:	bf00      	nop
 8009fe0:	3714      	adds	r7, #20
 8009fe2:	46bd      	mov	sp, r7
 8009fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe8:	4770      	bx	lr
 8009fea:	bf00      	nop
 8009fec:	40012c00 	.word	0x40012c00
 8009ff0:	40014000 	.word	0x40014000
 8009ff4:	40014400 	.word	0x40014400

08009ff8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009ff8:	b480      	push	{r7}
 8009ffa:	b085      	sub	sp, #20
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	6078      	str	r0, [r7, #4]
 800a000:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a008:	2b01      	cmp	r3, #1
 800a00a:	d101      	bne.n	800a010 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a00c:	2302      	movs	r3, #2
 800a00e:	e04f      	b.n	800a0b0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	2201      	movs	r2, #1
 800a014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	2202      	movs	r2, #2
 800a01c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	685b      	ldr	r3, [r3, #4]
 800a026:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	689b      	ldr	r3, [r3, #8]
 800a02e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	4a21      	ldr	r2, [pc, #132]	; (800a0bc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800a036:	4293      	cmp	r3, r2
 800a038:	d108      	bne.n	800a04c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a040:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a042:	683b      	ldr	r3, [r7, #0]
 800a044:	685b      	ldr	r3, [r3, #4]
 800a046:	68fa      	ldr	r2, [r7, #12]
 800a048:	4313      	orrs	r3, r2
 800a04a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a052:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a054:	683b      	ldr	r3, [r7, #0]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	68fa      	ldr	r2, [r7, #12]
 800a05a:	4313      	orrs	r3, r2
 800a05c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	68fa      	ldr	r2, [r7, #12]
 800a064:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	4a14      	ldr	r2, [pc, #80]	; (800a0bc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800a06c:	4293      	cmp	r3, r2
 800a06e:	d009      	beq.n	800a084 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a078:	d004      	beq.n	800a084 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	4a10      	ldr	r2, [pc, #64]	; (800a0c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800a080:	4293      	cmp	r3, r2
 800a082:	d10c      	bne.n	800a09e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a084:	68bb      	ldr	r3, [r7, #8]
 800a086:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a08a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a08c:	683b      	ldr	r3, [r7, #0]
 800a08e:	689b      	ldr	r3, [r3, #8]
 800a090:	68ba      	ldr	r2, [r7, #8]
 800a092:	4313      	orrs	r3, r2
 800a094:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	68ba      	ldr	r2, [r7, #8]
 800a09c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	2201      	movs	r2, #1
 800a0a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	2200      	movs	r2, #0
 800a0aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a0ae:	2300      	movs	r3, #0
}
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	3714      	adds	r7, #20
 800a0b4:	46bd      	mov	sp, r7
 800a0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ba:	4770      	bx	lr
 800a0bc:	40012c00 	.word	0x40012c00
 800a0c0:	40014000 	.word	0x40014000

0800a0c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a0c4:	b580      	push	{r7, lr}
 800a0c6:	b082      	sub	sp, #8
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d101      	bne.n	800a0d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a0d2:	2301      	movs	r3, #1
 800a0d4:	e040      	b.n	800a158 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d106      	bne.n	800a0ec <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	2200      	movs	r2, #0
 800a0e2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a0e6:	6878      	ldr	r0, [r7, #4]
 800a0e8:	f7f7 ff90 	bl	800200c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	2224      	movs	r2, #36	; 0x24
 800a0f0:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	681a      	ldr	r2, [r3, #0]
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	f022 0201 	bic.w	r2, r2, #1
 800a100:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a102:	6878      	ldr	r0, [r7, #4]
 800a104:	f000 f82c 	bl	800a160 <UART_SetConfig>
 800a108:	4603      	mov	r3, r0
 800a10a:	2b01      	cmp	r3, #1
 800a10c:	d101      	bne.n	800a112 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800a10e:	2301      	movs	r3, #1
 800a110:	e022      	b.n	800a158 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a116:	2b00      	cmp	r3, #0
 800a118:	d002      	beq.n	800a120 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800a11a:	6878      	ldr	r0, [r7, #4]
 800a11c:	f000 fb34 	bl	800a788 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	685a      	ldr	r2, [r3, #4]
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a12e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	689a      	ldr	r2, [r3, #8]
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a13e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	681a      	ldr	r2, [r3, #0]
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	f042 0201 	orr.w	r2, r2, #1
 800a14e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a150:	6878      	ldr	r0, [r7, #4]
 800a152:	f000 fbbb 	bl	800a8cc <UART_CheckIdleState>
 800a156:	4603      	mov	r3, r0
}
 800a158:	4618      	mov	r0, r3
 800a15a:	3708      	adds	r7, #8
 800a15c:	46bd      	mov	sp, r7
 800a15e:	bd80      	pop	{r7, pc}

0800a160 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a160:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800a164:	b08a      	sub	sp, #40	; 0x28
 800a166:	af00      	add	r7, sp, #0
 800a168:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800a16a:	2300      	movs	r3, #0
 800a16c:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 800a16e:	2300      	movs	r3, #0
 800a170:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 800a172:	2300      	movs	r3, #0
 800a174:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	689a      	ldr	r2, [r3, #8]
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	691b      	ldr	r3, [r3, #16]
 800a17e:	431a      	orrs	r2, r3
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	695b      	ldr	r3, [r3, #20]
 800a184:	431a      	orrs	r2, r3
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	69db      	ldr	r3, [r3, #28]
 800a18a:	4313      	orrs	r3, r2
 800a18c:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	681a      	ldr	r2, [r3, #0]
 800a194:	4bbc      	ldr	r3, [pc, #752]	; (800a488 <UART_SetConfig+0x328>)
 800a196:	4013      	ands	r3, r2
 800a198:	687a      	ldr	r2, [r7, #4]
 800a19a:	6812      	ldr	r2, [r2, #0]
 800a19c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a19e:	430b      	orrs	r3, r1
 800a1a0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	685b      	ldr	r3, [r3, #4]
 800a1a8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	68da      	ldr	r2, [r3, #12]
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	430a      	orrs	r2, r1
 800a1b6:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	699b      	ldr	r3, [r3, #24]
 800a1bc:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	4ab2      	ldr	r2, [pc, #712]	; (800a48c <UART_SetConfig+0x32c>)
 800a1c4:	4293      	cmp	r3, r2
 800a1c6:	d004      	beq.n	800a1d2 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	6a1b      	ldr	r3, [r3, #32]
 800a1cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1ce:	4313      	orrs	r3, r2
 800a1d0:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	689b      	ldr	r3, [r3, #8]
 800a1d8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1e2:	430a      	orrs	r2, r1
 800a1e4:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	4aa9      	ldr	r2, [pc, #676]	; (800a490 <UART_SetConfig+0x330>)
 800a1ec:	4293      	cmp	r3, r2
 800a1ee:	d126      	bne.n	800a23e <UART_SetConfig+0xde>
 800a1f0:	4ba8      	ldr	r3, [pc, #672]	; (800a494 <UART_SetConfig+0x334>)
 800a1f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1f6:	f003 0303 	and.w	r3, r3, #3
 800a1fa:	2b03      	cmp	r3, #3
 800a1fc:	d81a      	bhi.n	800a234 <UART_SetConfig+0xd4>
 800a1fe:	a201      	add	r2, pc, #4	; (adr r2, 800a204 <UART_SetConfig+0xa4>)
 800a200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a204:	0800a215 	.word	0x0800a215
 800a208:	0800a225 	.word	0x0800a225
 800a20c:	0800a21d 	.word	0x0800a21d
 800a210:	0800a22d 	.word	0x0800a22d
 800a214:	2301      	movs	r3, #1
 800a216:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a21a:	e0ab      	b.n	800a374 <UART_SetConfig+0x214>
 800a21c:	2302      	movs	r3, #2
 800a21e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a222:	e0a7      	b.n	800a374 <UART_SetConfig+0x214>
 800a224:	2304      	movs	r3, #4
 800a226:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a22a:	e0a3      	b.n	800a374 <UART_SetConfig+0x214>
 800a22c:	2308      	movs	r3, #8
 800a22e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a232:	e09f      	b.n	800a374 <UART_SetConfig+0x214>
 800a234:	2310      	movs	r3, #16
 800a236:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a23a:	bf00      	nop
 800a23c:	e09a      	b.n	800a374 <UART_SetConfig+0x214>
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	4a95      	ldr	r2, [pc, #596]	; (800a498 <UART_SetConfig+0x338>)
 800a244:	4293      	cmp	r3, r2
 800a246:	d138      	bne.n	800a2ba <UART_SetConfig+0x15a>
 800a248:	4b92      	ldr	r3, [pc, #584]	; (800a494 <UART_SetConfig+0x334>)
 800a24a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a24e:	f003 030c 	and.w	r3, r3, #12
 800a252:	2b0c      	cmp	r3, #12
 800a254:	d82c      	bhi.n	800a2b0 <UART_SetConfig+0x150>
 800a256:	a201      	add	r2, pc, #4	; (adr r2, 800a25c <UART_SetConfig+0xfc>)
 800a258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a25c:	0800a291 	.word	0x0800a291
 800a260:	0800a2b1 	.word	0x0800a2b1
 800a264:	0800a2b1 	.word	0x0800a2b1
 800a268:	0800a2b1 	.word	0x0800a2b1
 800a26c:	0800a2a1 	.word	0x0800a2a1
 800a270:	0800a2b1 	.word	0x0800a2b1
 800a274:	0800a2b1 	.word	0x0800a2b1
 800a278:	0800a2b1 	.word	0x0800a2b1
 800a27c:	0800a299 	.word	0x0800a299
 800a280:	0800a2b1 	.word	0x0800a2b1
 800a284:	0800a2b1 	.word	0x0800a2b1
 800a288:	0800a2b1 	.word	0x0800a2b1
 800a28c:	0800a2a9 	.word	0x0800a2a9
 800a290:	2300      	movs	r3, #0
 800a292:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a296:	e06d      	b.n	800a374 <UART_SetConfig+0x214>
 800a298:	2302      	movs	r3, #2
 800a29a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a29e:	e069      	b.n	800a374 <UART_SetConfig+0x214>
 800a2a0:	2304      	movs	r3, #4
 800a2a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a2a6:	e065      	b.n	800a374 <UART_SetConfig+0x214>
 800a2a8:	2308      	movs	r3, #8
 800a2aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a2ae:	e061      	b.n	800a374 <UART_SetConfig+0x214>
 800a2b0:	2310      	movs	r3, #16
 800a2b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a2b6:	bf00      	nop
 800a2b8:	e05c      	b.n	800a374 <UART_SetConfig+0x214>
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	4a77      	ldr	r2, [pc, #476]	; (800a49c <UART_SetConfig+0x33c>)
 800a2c0:	4293      	cmp	r3, r2
 800a2c2:	d125      	bne.n	800a310 <UART_SetConfig+0x1b0>
 800a2c4:	4b73      	ldr	r3, [pc, #460]	; (800a494 <UART_SetConfig+0x334>)
 800a2c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2ca:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a2ce:	2b10      	cmp	r3, #16
 800a2d0:	d011      	beq.n	800a2f6 <UART_SetConfig+0x196>
 800a2d2:	2b10      	cmp	r3, #16
 800a2d4:	d802      	bhi.n	800a2dc <UART_SetConfig+0x17c>
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d005      	beq.n	800a2e6 <UART_SetConfig+0x186>
 800a2da:	e014      	b.n	800a306 <UART_SetConfig+0x1a6>
 800a2dc:	2b20      	cmp	r3, #32
 800a2de:	d006      	beq.n	800a2ee <UART_SetConfig+0x18e>
 800a2e0:	2b30      	cmp	r3, #48	; 0x30
 800a2e2:	d00c      	beq.n	800a2fe <UART_SetConfig+0x19e>
 800a2e4:	e00f      	b.n	800a306 <UART_SetConfig+0x1a6>
 800a2e6:	2300      	movs	r3, #0
 800a2e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a2ec:	e042      	b.n	800a374 <UART_SetConfig+0x214>
 800a2ee:	2302      	movs	r3, #2
 800a2f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a2f4:	e03e      	b.n	800a374 <UART_SetConfig+0x214>
 800a2f6:	2304      	movs	r3, #4
 800a2f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a2fc:	e03a      	b.n	800a374 <UART_SetConfig+0x214>
 800a2fe:	2308      	movs	r3, #8
 800a300:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a304:	e036      	b.n	800a374 <UART_SetConfig+0x214>
 800a306:	2310      	movs	r3, #16
 800a308:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a30c:	bf00      	nop
 800a30e:	e031      	b.n	800a374 <UART_SetConfig+0x214>
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	4a5d      	ldr	r2, [pc, #372]	; (800a48c <UART_SetConfig+0x32c>)
 800a316:	4293      	cmp	r3, r2
 800a318:	d129      	bne.n	800a36e <UART_SetConfig+0x20e>
 800a31a:	4b5e      	ldr	r3, [pc, #376]	; (800a494 <UART_SetConfig+0x334>)
 800a31c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a320:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a324:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a328:	d014      	beq.n	800a354 <UART_SetConfig+0x1f4>
 800a32a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a32e:	d802      	bhi.n	800a336 <UART_SetConfig+0x1d6>
 800a330:	2b00      	cmp	r3, #0
 800a332:	d007      	beq.n	800a344 <UART_SetConfig+0x1e4>
 800a334:	e016      	b.n	800a364 <UART_SetConfig+0x204>
 800a336:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a33a:	d007      	beq.n	800a34c <UART_SetConfig+0x1ec>
 800a33c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a340:	d00c      	beq.n	800a35c <UART_SetConfig+0x1fc>
 800a342:	e00f      	b.n	800a364 <UART_SetConfig+0x204>
 800a344:	2300      	movs	r3, #0
 800a346:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a34a:	e013      	b.n	800a374 <UART_SetConfig+0x214>
 800a34c:	2302      	movs	r3, #2
 800a34e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a352:	e00f      	b.n	800a374 <UART_SetConfig+0x214>
 800a354:	2304      	movs	r3, #4
 800a356:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a35a:	e00b      	b.n	800a374 <UART_SetConfig+0x214>
 800a35c:	2308      	movs	r3, #8
 800a35e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a362:	e007      	b.n	800a374 <UART_SetConfig+0x214>
 800a364:	2310      	movs	r3, #16
 800a366:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a36a:	bf00      	nop
 800a36c:	e002      	b.n	800a374 <UART_SetConfig+0x214>
 800a36e:	2310      	movs	r3, #16
 800a370:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	4a44      	ldr	r2, [pc, #272]	; (800a48c <UART_SetConfig+0x32c>)
 800a37a:	4293      	cmp	r3, r2
 800a37c:	f040 80fb 	bne.w	800a576 <UART_SetConfig+0x416>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a380:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a384:	2b08      	cmp	r3, #8
 800a386:	d824      	bhi.n	800a3d2 <UART_SetConfig+0x272>
 800a388:	a201      	add	r2, pc, #4	; (adr r2, 800a390 <UART_SetConfig+0x230>)
 800a38a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a38e:	bf00      	nop
 800a390:	0800a3b5 	.word	0x0800a3b5
 800a394:	0800a3d3 	.word	0x0800a3d3
 800a398:	0800a3bd 	.word	0x0800a3bd
 800a39c:	0800a3d3 	.word	0x0800a3d3
 800a3a0:	0800a3c3 	.word	0x0800a3c3
 800a3a4:	0800a3d3 	.word	0x0800a3d3
 800a3a8:	0800a3d3 	.word	0x0800a3d3
 800a3ac:	0800a3d3 	.word	0x0800a3d3
 800a3b0:	0800a3cb 	.word	0x0800a3cb
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 800a3b4:	f7ff f9d0 	bl	8009758 <HAL_RCC_GetPCLK1Freq>
 800a3b8:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800a3ba:	e00d      	b.n	800a3d8 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 800a3bc:	4b38      	ldr	r3, [pc, #224]	; (800a4a0 <UART_SetConfig+0x340>)
 800a3be:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800a3c0:	e00a      	b.n	800a3d8 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 800a3c2:	f7ff f933 	bl	800962c <HAL_RCC_GetSysClockFreq>
 800a3c6:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800a3c8:	e006      	b.n	800a3d8 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 800a3ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a3ce:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800a3d0:	e002      	b.n	800a3d8 <UART_SetConfig+0x278>
      default:
        ret = HAL_ERROR;
 800a3d2:	2301      	movs	r3, #1
 800a3d4:	76fb      	strb	r3, [r7, #27]
        break;
 800a3d6:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800a3d8:	697b      	ldr	r3, [r7, #20]
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	f000 81c8 	beq.w	800a770 <UART_SetConfig+0x610>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	685a      	ldr	r2, [r3, #4]
 800a3e4:	4613      	mov	r3, r2
 800a3e6:	005b      	lsls	r3, r3, #1
 800a3e8:	4413      	add	r3, r2
 800a3ea:	697a      	ldr	r2, [r7, #20]
 800a3ec:	429a      	cmp	r2, r3
 800a3ee:	d305      	bcc.n	800a3fc <UART_SetConfig+0x29c>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	685b      	ldr	r3, [r3, #4]
 800a3f4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a3f6:	697a      	ldr	r2, [r7, #20]
 800a3f8:	429a      	cmp	r2, r3
 800a3fa:	d902      	bls.n	800a402 <UART_SetConfig+0x2a2>
      {
        ret = HAL_ERROR;
 800a3fc:	2301      	movs	r3, #1
 800a3fe:	76fb      	strb	r3, [r7, #27]
 800a400:	e1b6      	b.n	800a770 <UART_SetConfig+0x610>
      }
      else
      {
        switch (clocksource)
 800a402:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a406:	2b08      	cmp	r3, #8
 800a408:	f200 80a2 	bhi.w	800a550 <UART_SetConfig+0x3f0>
 800a40c:	a201      	add	r2, pc, #4	; (adr r2, 800a414 <UART_SetConfig+0x2b4>)
 800a40e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a412:	bf00      	nop
 800a414:	0800a439 	.word	0x0800a439
 800a418:	0800a551 	.word	0x0800a551
 800a41c:	0800a4a5 	.word	0x0800a4a5
 800a420:	0800a551 	.word	0x0800a551
 800a424:	0800a4d9 	.word	0x0800a4d9
 800a428:	0800a551 	.word	0x0800a551
 800a42c:	0800a551 	.word	0x0800a551
 800a430:	0800a551 	.word	0x0800a551
 800a434:	0800a527 	.word	0x0800a527
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 800a438:	f7ff f98e 	bl	8009758 <HAL_RCC_GetPCLK1Freq>
 800a43c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800a43e:	693b      	ldr	r3, [r7, #16]
 800a440:	4619      	mov	r1, r3
 800a442:	f04f 0200 	mov.w	r2, #0
 800a446:	f04f 0300 	mov.w	r3, #0
 800a44a:	f04f 0400 	mov.w	r4, #0
 800a44e:	0214      	lsls	r4, r2, #8
 800a450:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800a454:	020b      	lsls	r3, r1, #8
 800a456:	687a      	ldr	r2, [r7, #4]
 800a458:	6852      	ldr	r2, [r2, #4]
 800a45a:	0852      	lsrs	r2, r2, #1
 800a45c:	4611      	mov	r1, r2
 800a45e:	f04f 0200 	mov.w	r2, #0
 800a462:	eb13 0b01 	adds.w	fp, r3, r1
 800a466:	eb44 0c02 	adc.w	ip, r4, r2
 800a46a:	4658      	mov	r0, fp
 800a46c:	4661      	mov	r1, ip
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	685b      	ldr	r3, [r3, #4]
 800a472:	f04f 0400 	mov.w	r4, #0
 800a476:	461a      	mov	r2, r3
 800a478:	4623      	mov	r3, r4
 800a47a:	f7f6 fc15 	bl	8000ca8 <__aeabi_uldivmod>
 800a47e:	4603      	mov	r3, r0
 800a480:	460c      	mov	r4, r1
 800a482:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 800a484:	e067      	b.n	800a556 <UART_SetConfig+0x3f6>
 800a486:	bf00      	nop
 800a488:	efff69f3 	.word	0xefff69f3
 800a48c:	40008000 	.word	0x40008000
 800a490:	40013800 	.word	0x40013800
 800a494:	40021000 	.word	0x40021000
 800a498:	40004400 	.word	0x40004400
 800a49c:	40004800 	.word	0x40004800
 800a4a0:	00f42400 	.word	0x00f42400
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	685b      	ldr	r3, [r3, #4]
 800a4a8:	085b      	lsrs	r3, r3, #1
 800a4aa:	f04f 0400 	mov.w	r4, #0
 800a4ae:	49ae      	ldr	r1, [pc, #696]	; (800a768 <UART_SetConfig+0x608>)
 800a4b0:	f04f 0200 	mov.w	r2, #0
 800a4b4:	eb13 0b01 	adds.w	fp, r3, r1
 800a4b8:	eb44 0c02 	adc.w	ip, r4, r2
 800a4bc:	4658      	mov	r0, fp
 800a4be:	4661      	mov	r1, ip
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	685b      	ldr	r3, [r3, #4]
 800a4c4:	f04f 0400 	mov.w	r4, #0
 800a4c8:	461a      	mov	r2, r3
 800a4ca:	4623      	mov	r3, r4
 800a4cc:	f7f6 fbec 	bl	8000ca8 <__aeabi_uldivmod>
 800a4d0:	4603      	mov	r3, r0
 800a4d2:	460c      	mov	r4, r1
 800a4d4:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 800a4d6:	e03e      	b.n	800a556 <UART_SetConfig+0x3f6>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 800a4d8:	f7ff f8a8 	bl	800962c <HAL_RCC_GetSysClockFreq>
 800a4dc:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800a4de:	693b      	ldr	r3, [r7, #16]
 800a4e0:	4619      	mov	r1, r3
 800a4e2:	f04f 0200 	mov.w	r2, #0
 800a4e6:	f04f 0300 	mov.w	r3, #0
 800a4ea:	f04f 0400 	mov.w	r4, #0
 800a4ee:	0214      	lsls	r4, r2, #8
 800a4f0:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800a4f4:	020b      	lsls	r3, r1, #8
 800a4f6:	687a      	ldr	r2, [r7, #4]
 800a4f8:	6852      	ldr	r2, [r2, #4]
 800a4fa:	0852      	lsrs	r2, r2, #1
 800a4fc:	4611      	mov	r1, r2
 800a4fe:	f04f 0200 	mov.w	r2, #0
 800a502:	eb13 0b01 	adds.w	fp, r3, r1
 800a506:	eb44 0c02 	adc.w	ip, r4, r2
 800a50a:	4658      	mov	r0, fp
 800a50c:	4661      	mov	r1, ip
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	685b      	ldr	r3, [r3, #4]
 800a512:	f04f 0400 	mov.w	r4, #0
 800a516:	461a      	mov	r2, r3
 800a518:	4623      	mov	r3, r4
 800a51a:	f7f6 fbc5 	bl	8000ca8 <__aeabi_uldivmod>
 800a51e:	4603      	mov	r3, r0
 800a520:	460c      	mov	r4, r1
 800a522:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 800a524:	e017      	b.n	800a556 <UART_SetConfig+0x3f6>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	685b      	ldr	r3, [r3, #4]
 800a52a:	085b      	lsrs	r3, r3, #1
 800a52c:	f04f 0400 	mov.w	r4, #0
 800a530:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 800a534:	f144 0100 	adc.w	r1, r4, #0
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	685b      	ldr	r3, [r3, #4]
 800a53c:	f04f 0400 	mov.w	r4, #0
 800a540:	461a      	mov	r2, r3
 800a542:	4623      	mov	r3, r4
 800a544:	f7f6 fbb0 	bl	8000ca8 <__aeabi_uldivmod>
 800a548:	4603      	mov	r3, r0
 800a54a:	460c      	mov	r4, r1
 800a54c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 800a54e:	e002      	b.n	800a556 <UART_SetConfig+0x3f6>
          default:
            ret = HAL_ERROR;
 800a550:	2301      	movs	r3, #1
 800a552:	76fb      	strb	r3, [r7, #27]
            break;
 800a554:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a556:	69fb      	ldr	r3, [r7, #28]
 800a558:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a55c:	d308      	bcc.n	800a570 <UART_SetConfig+0x410>
 800a55e:	69fb      	ldr	r3, [r7, #28]
 800a560:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a564:	d204      	bcs.n	800a570 <UART_SetConfig+0x410>
        {
          huart->Instance->BRR = usartdiv;
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	69fa      	ldr	r2, [r7, #28]
 800a56c:	60da      	str	r2, [r3, #12]
 800a56e:	e0ff      	b.n	800a770 <UART_SetConfig+0x610>
        }
        else
        {
          ret = HAL_ERROR;
 800a570:	2301      	movs	r3, #1
 800a572:	76fb      	strb	r3, [r7, #27]
 800a574:	e0fc      	b.n	800a770 <UART_SetConfig+0x610>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	69db      	ldr	r3, [r3, #28]
 800a57a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a57e:	f040 8083 	bne.w	800a688 <UART_SetConfig+0x528>
  {
    switch (clocksource)
 800a582:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a586:	2b08      	cmp	r3, #8
 800a588:	d85e      	bhi.n	800a648 <UART_SetConfig+0x4e8>
 800a58a:	a201      	add	r2, pc, #4	; (adr r2, 800a590 <UART_SetConfig+0x430>)
 800a58c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a590:	0800a5b5 	.word	0x0800a5b5
 800a594:	0800a5d5 	.word	0x0800a5d5
 800a598:	0800a5f5 	.word	0x0800a5f5
 800a59c:	0800a649 	.word	0x0800a649
 800a5a0:	0800a611 	.word	0x0800a611
 800a5a4:	0800a649 	.word	0x0800a649
 800a5a8:	0800a649 	.word	0x0800a649
 800a5ac:	0800a649 	.word	0x0800a649
 800a5b0:	0800a631 	.word	0x0800a631
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a5b4:	f7ff f8d0 	bl	8009758 <HAL_RCC_GetPCLK1Freq>
 800a5b8:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a5ba:	693b      	ldr	r3, [r7, #16]
 800a5bc:	005a      	lsls	r2, r3, #1
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	685b      	ldr	r3, [r3, #4]
 800a5c2:	085b      	lsrs	r3, r3, #1
 800a5c4:	441a      	add	r2, r3
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	685b      	ldr	r3, [r3, #4]
 800a5ca:	fbb2 f3f3 	udiv	r3, r2, r3
 800a5ce:	b29b      	uxth	r3, r3
 800a5d0:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800a5d2:	e03c      	b.n	800a64e <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a5d4:	f7ff f8d6 	bl	8009784 <HAL_RCC_GetPCLK2Freq>
 800a5d8:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a5da:	693b      	ldr	r3, [r7, #16]
 800a5dc:	005a      	lsls	r2, r3, #1
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	685b      	ldr	r3, [r3, #4]
 800a5e2:	085b      	lsrs	r3, r3, #1
 800a5e4:	441a      	add	r2, r3
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	685b      	ldr	r3, [r3, #4]
 800a5ea:	fbb2 f3f3 	udiv	r3, r2, r3
 800a5ee:	b29b      	uxth	r3, r3
 800a5f0:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800a5f2:	e02c      	b.n	800a64e <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	685b      	ldr	r3, [r3, #4]
 800a5f8:	085b      	lsrs	r3, r3, #1
 800a5fa:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 800a5fe:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 800a602:	687a      	ldr	r2, [r7, #4]
 800a604:	6852      	ldr	r2, [r2, #4]
 800a606:	fbb3 f3f2 	udiv	r3, r3, r2
 800a60a:	b29b      	uxth	r3, r3
 800a60c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800a60e:	e01e      	b.n	800a64e <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a610:	f7ff f80c 	bl	800962c <HAL_RCC_GetSysClockFreq>
 800a614:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a616:	693b      	ldr	r3, [r7, #16]
 800a618:	005a      	lsls	r2, r3, #1
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	685b      	ldr	r3, [r3, #4]
 800a61e:	085b      	lsrs	r3, r3, #1
 800a620:	441a      	add	r2, r3
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	685b      	ldr	r3, [r3, #4]
 800a626:	fbb2 f3f3 	udiv	r3, r2, r3
 800a62a:	b29b      	uxth	r3, r3
 800a62c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800a62e:	e00e      	b.n	800a64e <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	685b      	ldr	r3, [r3, #4]
 800a634:	085b      	lsrs	r3, r3, #1
 800a636:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	685b      	ldr	r3, [r3, #4]
 800a63e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a642:	b29b      	uxth	r3, r3
 800a644:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800a646:	e002      	b.n	800a64e <UART_SetConfig+0x4ee>
      default:
        ret = HAL_ERROR;
 800a648:	2301      	movs	r3, #1
 800a64a:	76fb      	strb	r3, [r7, #27]
        break;
 800a64c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a64e:	69fb      	ldr	r3, [r7, #28]
 800a650:	2b0f      	cmp	r3, #15
 800a652:	d916      	bls.n	800a682 <UART_SetConfig+0x522>
 800a654:	69fb      	ldr	r3, [r7, #28]
 800a656:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a65a:	d212      	bcs.n	800a682 <UART_SetConfig+0x522>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a65c:	69fb      	ldr	r3, [r7, #28]
 800a65e:	b29b      	uxth	r3, r3
 800a660:	f023 030f 	bic.w	r3, r3, #15
 800a664:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a666:	69fb      	ldr	r3, [r7, #28]
 800a668:	085b      	lsrs	r3, r3, #1
 800a66a:	b29b      	uxth	r3, r3
 800a66c:	f003 0307 	and.w	r3, r3, #7
 800a670:	b29a      	uxth	r2, r3
 800a672:	89fb      	ldrh	r3, [r7, #14]
 800a674:	4313      	orrs	r3, r2
 800a676:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	89fa      	ldrh	r2, [r7, #14]
 800a67e:	60da      	str	r2, [r3, #12]
 800a680:	e076      	b.n	800a770 <UART_SetConfig+0x610>
    }
    else
    {
      ret = HAL_ERROR;
 800a682:	2301      	movs	r3, #1
 800a684:	76fb      	strb	r3, [r7, #27]
 800a686:	e073      	b.n	800a770 <UART_SetConfig+0x610>
    }
  }
  else
  {
    switch (clocksource)
 800a688:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a68c:	2b08      	cmp	r3, #8
 800a68e:	d85c      	bhi.n	800a74a <UART_SetConfig+0x5ea>
 800a690:	a201      	add	r2, pc, #4	; (adr r2, 800a698 <UART_SetConfig+0x538>)
 800a692:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a696:	bf00      	nop
 800a698:	0800a6bd 	.word	0x0800a6bd
 800a69c:	0800a6db 	.word	0x0800a6db
 800a6a0:	0800a6f9 	.word	0x0800a6f9
 800a6a4:	0800a74b 	.word	0x0800a74b
 800a6a8:	0800a715 	.word	0x0800a715
 800a6ac:	0800a74b 	.word	0x0800a74b
 800a6b0:	0800a74b 	.word	0x0800a74b
 800a6b4:	0800a74b 	.word	0x0800a74b
 800a6b8:	0800a733 	.word	0x0800a733
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a6bc:	f7ff f84c 	bl	8009758 <HAL_RCC_GetPCLK1Freq>
 800a6c0:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	685b      	ldr	r3, [r3, #4]
 800a6c6:	085a      	lsrs	r2, r3, #1
 800a6c8:	693b      	ldr	r3, [r7, #16]
 800a6ca:	441a      	add	r2, r3
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	685b      	ldr	r3, [r3, #4]
 800a6d0:	fbb2 f3f3 	udiv	r3, r2, r3
 800a6d4:	b29b      	uxth	r3, r3
 800a6d6:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800a6d8:	e03a      	b.n	800a750 <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a6da:	f7ff f853 	bl	8009784 <HAL_RCC_GetPCLK2Freq>
 800a6de:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	685b      	ldr	r3, [r3, #4]
 800a6e4:	085a      	lsrs	r2, r3, #1
 800a6e6:	693b      	ldr	r3, [r7, #16]
 800a6e8:	441a      	add	r2, r3
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	685b      	ldr	r3, [r3, #4]
 800a6ee:	fbb2 f3f3 	udiv	r3, r2, r3
 800a6f2:	b29b      	uxth	r3, r3
 800a6f4:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800a6f6:	e02b      	b.n	800a750 <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	685b      	ldr	r3, [r3, #4]
 800a6fc:	085b      	lsrs	r3, r3, #1
 800a6fe:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800a702:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800a706:	687a      	ldr	r2, [r7, #4]
 800a708:	6852      	ldr	r2, [r2, #4]
 800a70a:	fbb3 f3f2 	udiv	r3, r3, r2
 800a70e:	b29b      	uxth	r3, r3
 800a710:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800a712:	e01d      	b.n	800a750 <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a714:	f7fe ff8a 	bl	800962c <HAL_RCC_GetSysClockFreq>
 800a718:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	685b      	ldr	r3, [r3, #4]
 800a71e:	085a      	lsrs	r2, r3, #1
 800a720:	693b      	ldr	r3, [r7, #16]
 800a722:	441a      	add	r2, r3
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	685b      	ldr	r3, [r3, #4]
 800a728:	fbb2 f3f3 	udiv	r3, r2, r3
 800a72c:	b29b      	uxth	r3, r3
 800a72e:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800a730:	e00e      	b.n	800a750 <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	685b      	ldr	r3, [r3, #4]
 800a736:	085b      	lsrs	r3, r3, #1
 800a738:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	685b      	ldr	r3, [r3, #4]
 800a740:	fbb2 f3f3 	udiv	r3, r2, r3
 800a744:	b29b      	uxth	r3, r3
 800a746:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800a748:	e002      	b.n	800a750 <UART_SetConfig+0x5f0>
      default:
        ret = HAL_ERROR;
 800a74a:	2301      	movs	r3, #1
 800a74c:	76fb      	strb	r3, [r7, #27]
        break;
 800a74e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a750:	69fb      	ldr	r3, [r7, #28]
 800a752:	2b0f      	cmp	r3, #15
 800a754:	d90a      	bls.n	800a76c <UART_SetConfig+0x60c>
 800a756:	69fb      	ldr	r3, [r7, #28]
 800a758:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a75c:	d206      	bcs.n	800a76c <UART_SetConfig+0x60c>
    {
      huart->Instance->BRR = usartdiv;
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	69fa      	ldr	r2, [r7, #28]
 800a764:	60da      	str	r2, [r3, #12]
 800a766:	e003      	b.n	800a770 <UART_SetConfig+0x610>
 800a768:	f4240000 	.word	0xf4240000
    }
    else
    {
      ret = HAL_ERROR;
 800a76c:	2301      	movs	r3, #1
 800a76e:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	2200      	movs	r2, #0
 800a774:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	2200      	movs	r2, #0
 800a77a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800a77c:	7efb      	ldrb	r3, [r7, #27]
}
 800a77e:	4618      	mov	r0, r3
 800a780:	3728      	adds	r7, #40	; 0x28
 800a782:	46bd      	mov	sp, r7
 800a784:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0800a788 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a788:	b480      	push	{r7}
 800a78a:	b083      	sub	sp, #12
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a794:	f003 0301 	and.w	r3, r3, #1
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d00a      	beq.n	800a7b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	685b      	ldr	r3, [r3, #4]
 800a7a2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	430a      	orrs	r2, r1
 800a7b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7b6:	f003 0302 	and.w	r3, r3, #2
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d00a      	beq.n	800a7d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	685b      	ldr	r3, [r3, #4]
 800a7c4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	430a      	orrs	r2, r1
 800a7d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7d8:	f003 0304 	and.w	r3, r3, #4
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d00a      	beq.n	800a7f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	685b      	ldr	r3, [r3, #4]
 800a7e6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	430a      	orrs	r2, r1
 800a7f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7fa:	f003 0308 	and.w	r3, r3, #8
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d00a      	beq.n	800a818 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	685b      	ldr	r3, [r3, #4]
 800a808:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	430a      	orrs	r2, r1
 800a816:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a81c:	f003 0310 	and.w	r3, r3, #16
 800a820:	2b00      	cmp	r3, #0
 800a822:	d00a      	beq.n	800a83a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	689b      	ldr	r3, [r3, #8]
 800a82a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	430a      	orrs	r2, r1
 800a838:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a83e:	f003 0320 	and.w	r3, r3, #32
 800a842:	2b00      	cmp	r3, #0
 800a844:	d00a      	beq.n	800a85c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	689b      	ldr	r3, [r3, #8]
 800a84c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	430a      	orrs	r2, r1
 800a85a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a860:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a864:	2b00      	cmp	r3, #0
 800a866:	d01a      	beq.n	800a89e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	685b      	ldr	r3, [r3, #4]
 800a86e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	430a      	orrs	r2, r1
 800a87c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a882:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a886:	d10a      	bne.n	800a89e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	685b      	ldr	r3, [r3, #4]
 800a88e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	430a      	orrs	r2, r1
 800a89c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d00a      	beq.n	800a8c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	685b      	ldr	r3, [r3, #4]
 800a8b0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	430a      	orrs	r2, r1
 800a8be:	605a      	str	r2, [r3, #4]
  }
}
 800a8c0:	bf00      	nop
 800a8c2:	370c      	adds	r7, #12
 800a8c4:	46bd      	mov	sp, r7
 800a8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ca:	4770      	bx	lr

0800a8cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a8cc:	b580      	push	{r7, lr}
 800a8ce:	b086      	sub	sp, #24
 800a8d0:	af02      	add	r7, sp, #8
 800a8d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	2200      	movs	r2, #0
 800a8d8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800a8da:	f7fd fac7 	bl	8007e6c <HAL_GetTick>
 800a8de:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	f003 0308 	and.w	r3, r3, #8
 800a8ea:	2b08      	cmp	r3, #8
 800a8ec:	d10e      	bne.n	800a90c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a8ee:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a8f2:	9300      	str	r3, [sp, #0]
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	2200      	movs	r2, #0
 800a8f8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a8fc:	6878      	ldr	r0, [r7, #4]
 800a8fe:	f000 f82a 	bl	800a956 <UART_WaitOnFlagUntilTimeout>
 800a902:	4603      	mov	r3, r0
 800a904:	2b00      	cmp	r3, #0
 800a906:	d001      	beq.n	800a90c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a908:	2303      	movs	r3, #3
 800a90a:	e020      	b.n	800a94e <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	f003 0304 	and.w	r3, r3, #4
 800a916:	2b04      	cmp	r3, #4
 800a918:	d10e      	bne.n	800a938 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a91a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a91e:	9300      	str	r3, [sp, #0]
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	2200      	movs	r2, #0
 800a924:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a928:	6878      	ldr	r0, [r7, #4]
 800a92a:	f000 f814 	bl	800a956 <UART_WaitOnFlagUntilTimeout>
 800a92e:	4603      	mov	r3, r0
 800a930:	2b00      	cmp	r3, #0
 800a932:	d001      	beq.n	800a938 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a934:	2303      	movs	r3, #3
 800a936:	e00a      	b.n	800a94e <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	2220      	movs	r2, #32
 800a93c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	2220      	movs	r2, #32
 800a942:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	2200      	movs	r2, #0
 800a948:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800a94c:	2300      	movs	r3, #0
}
 800a94e:	4618      	mov	r0, r3
 800a950:	3710      	adds	r7, #16
 800a952:	46bd      	mov	sp, r7
 800a954:	bd80      	pop	{r7, pc}

0800a956 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a956:	b580      	push	{r7, lr}
 800a958:	b084      	sub	sp, #16
 800a95a:	af00      	add	r7, sp, #0
 800a95c:	60f8      	str	r0, [r7, #12]
 800a95e:	60b9      	str	r1, [r7, #8]
 800a960:	603b      	str	r3, [r7, #0]
 800a962:	4613      	mov	r3, r2
 800a964:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a966:	e05d      	b.n	800aa24 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a968:	69bb      	ldr	r3, [r7, #24]
 800a96a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a96e:	d059      	beq.n	800aa24 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a970:	f7fd fa7c 	bl	8007e6c <HAL_GetTick>
 800a974:	4602      	mov	r2, r0
 800a976:	683b      	ldr	r3, [r7, #0]
 800a978:	1ad3      	subs	r3, r2, r3
 800a97a:	69ba      	ldr	r2, [r7, #24]
 800a97c:	429a      	cmp	r2, r3
 800a97e:	d302      	bcc.n	800a986 <UART_WaitOnFlagUntilTimeout+0x30>
 800a980:	69bb      	ldr	r3, [r7, #24]
 800a982:	2b00      	cmp	r3, #0
 800a984:	d11b      	bne.n	800a9be <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	681a      	ldr	r2, [r3, #0]
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a994:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	689a      	ldr	r2, [r3, #8]
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	f022 0201 	bic.w	r2, r2, #1
 800a9a4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	2220      	movs	r2, #32
 800a9aa:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	2220      	movs	r2, #32
 800a9b0:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	2200      	movs	r2, #0
 800a9b6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800a9ba:	2303      	movs	r3, #3
 800a9bc:	e042      	b.n	800aa44 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	f003 0304 	and.w	r3, r3, #4
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d02b      	beq.n	800aa24 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	69db      	ldr	r3, [r3, #28]
 800a9d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a9d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a9da:	d123      	bne.n	800aa24 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a9e4:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	681a      	ldr	r2, [r3, #0]
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a9f4:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	689a      	ldr	r2, [r3, #8]
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	f022 0201 	bic.w	r2, r2, #1
 800aa04:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	2220      	movs	r2, #32
 800aa0a:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	2220      	movs	r2, #32
 800aa10:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	2220      	movs	r2, #32
 800aa16:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	2200      	movs	r2, #0
 800aa1c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800aa20:	2303      	movs	r3, #3
 800aa22:	e00f      	b.n	800aa44 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	69da      	ldr	r2, [r3, #28]
 800aa2a:	68bb      	ldr	r3, [r7, #8]
 800aa2c:	4013      	ands	r3, r2
 800aa2e:	68ba      	ldr	r2, [r7, #8]
 800aa30:	429a      	cmp	r2, r3
 800aa32:	bf0c      	ite	eq
 800aa34:	2301      	moveq	r3, #1
 800aa36:	2300      	movne	r3, #0
 800aa38:	b2db      	uxtb	r3, r3
 800aa3a:	461a      	mov	r2, r3
 800aa3c:	79fb      	ldrb	r3, [r7, #7]
 800aa3e:	429a      	cmp	r2, r3
 800aa40:	d092      	beq.n	800a968 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800aa42:	2300      	movs	r3, #0
}
 800aa44:	4618      	mov	r0, r3
 800aa46:	3710      	adds	r7, #16
 800aa48:	46bd      	mov	sp, r7
 800aa4a:	bd80      	pop	{r7, pc}

0800aa4c <LL_ADC_SetCommonClock>:
{
 800aa4c:	b480      	push	{r7}
 800aa4e:	b083      	sub	sp, #12
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	6078      	str	r0, [r7, #4]
 800aa54:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	689b      	ldr	r3, [r3, #8]
 800aa5a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800aa5e:	683b      	ldr	r3, [r7, #0]
 800aa60:	431a      	orrs	r2, r3
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	609a      	str	r2, [r3, #8]
}
 800aa66:	bf00      	nop
 800aa68:	370c      	adds	r7, #12
 800aa6a:	46bd      	mov	sp, r7
 800aa6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa70:	4770      	bx	lr

0800aa72 <LL_ADC_REG_SetSequencerLength>:
{
 800aa72:	b480      	push	{r7}
 800aa74:	b083      	sub	sp, #12
 800aa76:	af00      	add	r7, sp, #0
 800aa78:	6078      	str	r0, [r7, #4]
 800aa7a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa80:	f023 020f 	bic.w	r2, r3, #15
 800aa84:	683b      	ldr	r3, [r7, #0]
 800aa86:	431a      	orrs	r2, r3
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800aa8c:	bf00      	nop
 800aa8e:	370c      	adds	r7, #12
 800aa90:	46bd      	mov	sp, r7
 800aa92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa96:	4770      	bx	lr

0800aa98 <LL_ADC_IsEnabled>:
{
 800aa98:	b480      	push	{r7}
 800aa9a:	b083      	sub	sp, #12
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	689b      	ldr	r3, [r3, #8]
 800aaa4:	f003 0301 	and.w	r3, r3, #1
 800aaa8:	2b01      	cmp	r3, #1
 800aaaa:	d101      	bne.n	800aab0 <LL_ADC_IsEnabled+0x18>
 800aaac:	2301      	movs	r3, #1
 800aaae:	e000      	b.n	800aab2 <LL_ADC_IsEnabled+0x1a>
 800aab0:	2300      	movs	r3, #0
}
 800aab2:	4618      	mov	r0, r3
 800aab4:	370c      	adds	r7, #12
 800aab6:	46bd      	mov	sp, r7
 800aab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aabc:	4770      	bx	lr
	...

0800aac0 <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 800aac0:	b580      	push	{r7, lr}
 800aac2:	b084      	sub	sp, #16
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	6078      	str	r0, [r7, #4]
 800aac8:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800aaca:	2300      	movs	r3, #0
 800aacc:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 serie, setting of these features is conditioned to   */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0UL)
 800aace:	480a      	ldr	r0, [pc, #40]	; (800aaf8 <LL_ADC_CommonInit+0x38>)
 800aad0:	f7ff ffe2 	bl	800aa98 <LL_ADC_IsEnabled>
 800aad4:	4603      	mov	r3, r0
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d106      	bne.n	800aae8 <LL_ADC_CommonInit+0x28>
                 ADC_CommonInitStruct->CommonClock
                 | LL_ADC_MULTI_INDEPENDENT
                );
    }
#else
    LL_ADC_SetCommonClock(ADCxy_COMMON, ADC_CommonInitStruct->CommonClock);
 800aada:	683b      	ldr	r3, [r7, #0]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	4619      	mov	r1, r3
 800aae0:	6878      	ldr	r0, [r7, #4]
 800aae2:	f7ff ffb3 	bl	800aa4c <LL_ADC_SetCommonClock>
 800aae6:	e001      	b.n	800aaec <LL_ADC_CommonInit+0x2c>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 800aae8:	2301      	movs	r3, #1
 800aaea:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800aaec:	7bfb      	ldrb	r3, [r7, #15]
}
 800aaee:	4618      	mov	r0, r3
 800aaf0:	3710      	adds	r7, #16
 800aaf2:	46bd      	mov	sp, r7
 800aaf4:	bd80      	pop	{r7, pc}
 800aaf6:	bf00      	nop
 800aaf8:	50040000 	.word	0x50040000

0800aafc <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 800aafc:	b580      	push	{r7, lr}
 800aafe:	b084      	sub	sp, #16
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	6078      	str	r0, [r7, #4]
 800ab04:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800ab06:	2300      	movs	r3, #0
 800ab08:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_LOW_POWER(ADC_InitStruct->LowPowerMode));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 800ab0a:	6878      	ldr	r0, [r7, #4]
 800ab0c:	f7ff ffc4 	bl	800aa98 <LL_ADC_IsEnabled>
 800ab10:	4603      	mov	r3, r0
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d111      	bne.n	800ab3a <LL_ADC_Init+0x3e>
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    /*    - Set ADC low power mode                                            */
    MODIFY_REG(ADCx->CFGR,
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	68db      	ldr	r3, [r3, #12]
 800ab1a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ab1e:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 800ab22:	683a      	ldr	r2, [r7, #0]
 800ab24:	6811      	ldr	r1, [r2, #0]
 800ab26:	683a      	ldr	r2, [r7, #0]
 800ab28:	6852      	ldr	r2, [r2, #4]
 800ab2a:	4311      	orrs	r1, r2
 800ab2c:	683a      	ldr	r2, [r7, #0]
 800ab2e:	6892      	ldr	r2, [r2, #8]
 800ab30:	430a      	orrs	r2, r1
 800ab32:	431a      	orrs	r2, r3
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	60da      	str	r2, [r3, #12]
 800ab38:	e001      	b.n	800ab3e <LL_ADC_Init+0x42>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 800ab3a:	2301      	movs	r3, #1
 800ab3c:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 800ab3e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab40:	4618      	mov	r0, r3
 800ab42:	3710      	adds	r7, #16
 800ab44:	46bd      	mov	sp, r7
 800ab46:	bd80      	pop	{r7, pc}

0800ab48 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 800ab48:	b580      	push	{r7, lr}
 800ab4a:	b084      	sub	sp, #16
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	6078      	str	r0, [r7, #4]
 800ab50:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800ab52:	2300      	movs	r3, #0
 800ab54:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_REG_DMA_TRANSFER(ADC_REG_InitStruct->DMATransfer));
  assert_param(IS_LL_ADC_REG_OVR_DATA_BEHAVIOR(ADC_REG_InitStruct->Overrun));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 800ab56:	6878      	ldr	r0, [r7, #4]
 800ab58:	f7ff ff9e 	bl	800aa98 <LL_ADC_IsEnabled>
 800ab5c:	4603      	mov	r3, r0
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d132      	bne.n	800abc8 <LL_ADC_REG_Init+0x80>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /*    - Set ADC group regular overrun behavior                            */
    /* Note: On this STM32 serie, ADC trigger edge is set to value 0x0 by     */
    /*       setting of trigger source to SW start.                           */
    if (ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 800ab62:	683b      	ldr	r3, [r7, #0]
 800ab64:	685b      	ldr	r3, [r3, #4]
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d015      	beq.n	800ab96 <LL_ADC_REG_Init+0x4e>
    {
      MODIFY_REG(ADCx->CFGR,
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	68da      	ldr	r2, [r3, #12]
 800ab6e:	4b1a      	ldr	r3, [pc, #104]	; (800abd8 <LL_ADC_REG_Init+0x90>)
 800ab70:	4013      	ands	r3, r2
 800ab72:	683a      	ldr	r2, [r7, #0]
 800ab74:	6811      	ldr	r1, [r2, #0]
 800ab76:	683a      	ldr	r2, [r7, #0]
 800ab78:	6892      	ldr	r2, [r2, #8]
 800ab7a:	4311      	orrs	r1, r2
 800ab7c:	683a      	ldr	r2, [r7, #0]
 800ab7e:	68d2      	ldr	r2, [r2, #12]
 800ab80:	4311      	orrs	r1, r2
 800ab82:	683a      	ldr	r2, [r7, #0]
 800ab84:	6912      	ldr	r2, [r2, #16]
 800ab86:	4311      	orrs	r1, r2
 800ab88:	683a      	ldr	r2, [r7, #0]
 800ab8a:	6952      	ldr	r2, [r2, #20]
 800ab8c:	430a      	orrs	r2, r1
 800ab8e:	431a      	orrs	r2, r3
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	60da      	str	r2, [r3, #12]
 800ab94:	e011      	b.n	800abba <LL_ADC_REG_Init+0x72>
                 | ADC_REG_InitStruct->Overrun
                );
    }
    else
    {
      MODIFY_REG(ADCx->CFGR,
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	68da      	ldr	r2, [r3, #12]
 800ab9a:	4b0f      	ldr	r3, [pc, #60]	; (800abd8 <LL_ADC_REG_Init+0x90>)
 800ab9c:	4013      	ands	r3, r2
 800ab9e:	683a      	ldr	r2, [r7, #0]
 800aba0:	6811      	ldr	r1, [r2, #0]
 800aba2:	683a      	ldr	r2, [r7, #0]
 800aba4:	68d2      	ldr	r2, [r2, #12]
 800aba6:	4311      	orrs	r1, r2
 800aba8:	683a      	ldr	r2, [r7, #0]
 800abaa:	6912      	ldr	r2, [r2, #16]
 800abac:	4311      	orrs	r1, r2
 800abae:	683a      	ldr	r2, [r7, #0]
 800abb0:	6952      	ldr	r2, [r2, #20]
 800abb2:	430a      	orrs	r2, r1
 800abb4:	431a      	orrs	r2, r3
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	60da      	str	r2, [r3, #12]
                 | ADC_REG_InitStruct->Overrun
                );
    }

    /* Set ADC group regular sequencer length and scan direction */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 800abba:	683b      	ldr	r3, [r7, #0]
 800abbc:	685b      	ldr	r3, [r3, #4]
 800abbe:	4619      	mov	r1, r3
 800abc0:	6878      	ldr	r0, [r7, #4]
 800abc2:	f7ff ff56 	bl	800aa72 <LL_ADC_REG_SetSequencerLength>
 800abc6:	e001      	b.n	800abcc <LL_ADC_REG_Init+0x84>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 800abc8:	2301      	movs	r3, #1
 800abca:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 800abcc:	7bfb      	ldrb	r3, [r7, #15]
}
 800abce:	4618      	mov	r0, r3
 800abd0:	3710      	adds	r7, #16
 800abd2:	46bd      	mov	sp, r7
 800abd4:	bd80      	pop	{r7, pc}
 800abd6:	bf00      	nop
 800abd8:	fff0c03c 	.word	0xfff0c03c

0800abdc <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800abdc:	b480      	push	{r7}
 800abde:	b089      	sub	sp, #36	; 0x24
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	60f8      	str	r0, [r7, #12]
 800abe4:	60b9      	str	r1, [r7, #8]
 800abe6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	681a      	ldr	r2, [r3, #0]
 800abec:	68bb      	ldr	r3, [r7, #8]
 800abee:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800abf0:	697b      	ldr	r3, [r7, #20]
 800abf2:	fa93 f3a3 	rbit	r3, r3
 800abf6:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800abf8:	693b      	ldr	r3, [r7, #16]
 800abfa:	fab3 f383 	clz	r3, r3
 800abfe:	b2db      	uxtb	r3, r3
 800ac00:	005b      	lsls	r3, r3, #1
 800ac02:	2103      	movs	r1, #3
 800ac04:	fa01 f303 	lsl.w	r3, r1, r3
 800ac08:	43db      	mvns	r3, r3
 800ac0a:	401a      	ands	r2, r3
 800ac0c:	68bb      	ldr	r3, [r7, #8]
 800ac0e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ac10:	69fb      	ldr	r3, [r7, #28]
 800ac12:	fa93 f3a3 	rbit	r3, r3
 800ac16:	61bb      	str	r3, [r7, #24]
  return result;
 800ac18:	69bb      	ldr	r3, [r7, #24]
 800ac1a:	fab3 f383 	clz	r3, r3
 800ac1e:	b2db      	uxtb	r3, r3
 800ac20:	005b      	lsls	r3, r3, #1
 800ac22:	6879      	ldr	r1, [r7, #4]
 800ac24:	fa01 f303 	lsl.w	r3, r1, r3
 800ac28:	431a      	orrs	r2, r3
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	601a      	str	r2, [r3, #0]
}
 800ac2e:	bf00      	nop
 800ac30:	3724      	adds	r7, #36	; 0x24
 800ac32:	46bd      	mov	sp, r7
 800ac34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac38:	4770      	bx	lr

0800ac3a <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 800ac3a:	b480      	push	{r7}
 800ac3c:	b085      	sub	sp, #20
 800ac3e:	af00      	add	r7, sp, #0
 800ac40:	60f8      	str	r0, [r7, #12]
 800ac42:	60b9      	str	r1, [r7, #8]
 800ac44:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	685a      	ldr	r2, [r3, #4]
 800ac4a:	68bb      	ldr	r3, [r7, #8]
 800ac4c:	43db      	mvns	r3, r3
 800ac4e:	401a      	ands	r2, r3
 800ac50:	68bb      	ldr	r3, [r7, #8]
 800ac52:	6879      	ldr	r1, [r7, #4]
 800ac54:	fb01 f303 	mul.w	r3, r1, r3
 800ac58:	431a      	orrs	r2, r3
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	605a      	str	r2, [r3, #4]
}
 800ac5e:	bf00      	nop
 800ac60:	3714      	adds	r7, #20
 800ac62:	46bd      	mov	sp, r7
 800ac64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac68:	4770      	bx	lr

0800ac6a <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 800ac6a:	b480      	push	{r7}
 800ac6c:	b089      	sub	sp, #36	; 0x24
 800ac6e:	af00      	add	r7, sp, #0
 800ac70:	60f8      	str	r0, [r7, #12]
 800ac72:	60b9      	str	r1, [r7, #8]
 800ac74:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	689a      	ldr	r2, [r3, #8]
 800ac7a:	68bb      	ldr	r3, [r7, #8]
 800ac7c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ac7e:	697b      	ldr	r3, [r7, #20]
 800ac80:	fa93 f3a3 	rbit	r3, r3
 800ac84:	613b      	str	r3, [r7, #16]
  return result;
 800ac86:	693b      	ldr	r3, [r7, #16]
 800ac88:	fab3 f383 	clz	r3, r3
 800ac8c:	b2db      	uxtb	r3, r3
 800ac8e:	005b      	lsls	r3, r3, #1
 800ac90:	2103      	movs	r1, #3
 800ac92:	fa01 f303 	lsl.w	r3, r1, r3
 800ac96:	43db      	mvns	r3, r3
 800ac98:	401a      	ands	r2, r3
 800ac9a:	68bb      	ldr	r3, [r7, #8]
 800ac9c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ac9e:	69fb      	ldr	r3, [r7, #28]
 800aca0:	fa93 f3a3 	rbit	r3, r3
 800aca4:	61bb      	str	r3, [r7, #24]
  return result;
 800aca6:	69bb      	ldr	r3, [r7, #24]
 800aca8:	fab3 f383 	clz	r3, r3
 800acac:	b2db      	uxtb	r3, r3
 800acae:	005b      	lsls	r3, r3, #1
 800acb0:	6879      	ldr	r1, [r7, #4]
 800acb2:	fa01 f303 	lsl.w	r3, r1, r3
 800acb6:	431a      	orrs	r2, r3
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 800acbc:	bf00      	nop
 800acbe:	3724      	adds	r7, #36	; 0x24
 800acc0:	46bd      	mov	sp, r7
 800acc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc6:	4770      	bx	lr

0800acc8 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800acc8:	b480      	push	{r7}
 800acca:	b089      	sub	sp, #36	; 0x24
 800accc:	af00      	add	r7, sp, #0
 800acce:	60f8      	str	r0, [r7, #12]
 800acd0:	60b9      	str	r1, [r7, #8]
 800acd2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	68da      	ldr	r2, [r3, #12]
 800acd8:	68bb      	ldr	r3, [r7, #8]
 800acda:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800acdc:	697b      	ldr	r3, [r7, #20]
 800acde:	fa93 f3a3 	rbit	r3, r3
 800ace2:	613b      	str	r3, [r7, #16]
  return result;
 800ace4:	693b      	ldr	r3, [r7, #16]
 800ace6:	fab3 f383 	clz	r3, r3
 800acea:	b2db      	uxtb	r3, r3
 800acec:	005b      	lsls	r3, r3, #1
 800acee:	2103      	movs	r1, #3
 800acf0:	fa01 f303 	lsl.w	r3, r1, r3
 800acf4:	43db      	mvns	r3, r3
 800acf6:	401a      	ands	r2, r3
 800acf8:	68bb      	ldr	r3, [r7, #8]
 800acfa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800acfc:	69fb      	ldr	r3, [r7, #28]
 800acfe:	fa93 f3a3 	rbit	r3, r3
 800ad02:	61bb      	str	r3, [r7, #24]
  return result;
 800ad04:	69bb      	ldr	r3, [r7, #24]
 800ad06:	fab3 f383 	clz	r3, r3
 800ad0a:	b2db      	uxtb	r3, r3
 800ad0c:	005b      	lsls	r3, r3, #1
 800ad0e:	6879      	ldr	r1, [r7, #4]
 800ad10:	fa01 f303 	lsl.w	r3, r1, r3
 800ad14:	431a      	orrs	r2, r3
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	60da      	str	r2, [r3, #12]
}
 800ad1a:	bf00      	nop
 800ad1c:	3724      	adds	r7, #36	; 0x24
 800ad1e:	46bd      	mov	sp, r7
 800ad20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad24:	4770      	bx	lr

0800ad26 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800ad26:	b480      	push	{r7}
 800ad28:	b089      	sub	sp, #36	; 0x24
 800ad2a:	af00      	add	r7, sp, #0
 800ad2c:	60f8      	str	r0, [r7, #12]
 800ad2e:	60b9      	str	r1, [r7, #8]
 800ad30:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	6a1a      	ldr	r2, [r3, #32]
 800ad36:	68bb      	ldr	r3, [r7, #8]
 800ad38:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ad3a:	697b      	ldr	r3, [r7, #20]
 800ad3c:	fa93 f3a3 	rbit	r3, r3
 800ad40:	613b      	str	r3, [r7, #16]
  return result;
 800ad42:	693b      	ldr	r3, [r7, #16]
 800ad44:	fab3 f383 	clz	r3, r3
 800ad48:	b2db      	uxtb	r3, r3
 800ad4a:	009b      	lsls	r3, r3, #2
 800ad4c:	210f      	movs	r1, #15
 800ad4e:	fa01 f303 	lsl.w	r3, r1, r3
 800ad52:	43db      	mvns	r3, r3
 800ad54:	401a      	ands	r2, r3
 800ad56:	68bb      	ldr	r3, [r7, #8]
 800ad58:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ad5a:	69fb      	ldr	r3, [r7, #28]
 800ad5c:	fa93 f3a3 	rbit	r3, r3
 800ad60:	61bb      	str	r3, [r7, #24]
  return result;
 800ad62:	69bb      	ldr	r3, [r7, #24]
 800ad64:	fab3 f383 	clz	r3, r3
 800ad68:	b2db      	uxtb	r3, r3
 800ad6a:	009b      	lsls	r3, r3, #2
 800ad6c:	6879      	ldr	r1, [r7, #4]
 800ad6e:	fa01 f303 	lsl.w	r3, r1, r3
 800ad72:	431a      	orrs	r2, r3
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 800ad78:	bf00      	nop
 800ad7a:	3724      	adds	r7, #36	; 0x24
 800ad7c:	46bd      	mov	sp, r7
 800ad7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad82:	4770      	bx	lr

0800ad84 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800ad84:	b480      	push	{r7}
 800ad86:	b089      	sub	sp, #36	; 0x24
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	60f8      	str	r0, [r7, #12]
 800ad8c:	60b9      	str	r1, [r7, #8]
 800ad8e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ad94:	68bb      	ldr	r3, [r7, #8]
 800ad96:	0a1b      	lsrs	r3, r3, #8
 800ad98:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ad9a:	697b      	ldr	r3, [r7, #20]
 800ad9c:	fa93 f3a3 	rbit	r3, r3
 800ada0:	613b      	str	r3, [r7, #16]
  return result;
 800ada2:	693b      	ldr	r3, [r7, #16]
 800ada4:	fab3 f383 	clz	r3, r3
 800ada8:	b2db      	uxtb	r3, r3
 800adaa:	009b      	lsls	r3, r3, #2
 800adac:	210f      	movs	r1, #15
 800adae:	fa01 f303 	lsl.w	r3, r1, r3
 800adb2:	43db      	mvns	r3, r3
 800adb4:	401a      	ands	r2, r3
 800adb6:	68bb      	ldr	r3, [r7, #8]
 800adb8:	0a1b      	lsrs	r3, r3, #8
 800adba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800adbc:	69fb      	ldr	r3, [r7, #28]
 800adbe:	fa93 f3a3 	rbit	r3, r3
 800adc2:	61bb      	str	r3, [r7, #24]
  return result;
 800adc4:	69bb      	ldr	r3, [r7, #24]
 800adc6:	fab3 f383 	clz	r3, r3
 800adca:	b2db      	uxtb	r3, r3
 800adcc:	009b      	lsls	r3, r3, #2
 800adce:	6879      	ldr	r1, [r7, #4]
 800add0:	fa01 f303 	lsl.w	r3, r1, r3
 800add4:	431a      	orrs	r2, r3
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 800adda:	bf00      	nop
 800addc:	3724      	adds	r7, #36	; 0x24
 800adde:	46bd      	mov	sp, r7
 800ade0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade4:	4770      	bx	lr

0800ade6 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800ade6:	b580      	push	{r7, lr}
 800ade8:	b086      	sub	sp, #24
 800adea:	af00      	add	r7, sp, #0
 800adec:	6078      	str	r0, [r7, #4]
 800adee:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800adf0:	683b      	ldr	r3, [r7, #0]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	fa93 f3a3 	rbit	r3, r3
 800adfc:	60bb      	str	r3, [r7, #8]
  return result;
 800adfe:	68bb      	ldr	r3, [r7, #8]
 800ae00:	fab3 f383 	clz	r3, r3
 800ae04:	b2db      	uxtb	r3, r3
 800ae06:	617b      	str	r3, [r7, #20]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800ae08:	e040      	b.n	800ae8c <LL_GPIO_Init+0xa6>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 800ae0a:	683b      	ldr	r3, [r7, #0]
 800ae0c:	681a      	ldr	r2, [r3, #0]
 800ae0e:	2101      	movs	r1, #1
 800ae10:	697b      	ldr	r3, [r7, #20]
 800ae12:	fa01 f303 	lsl.w	r3, r1, r3
 800ae16:	4013      	ands	r3, r2
 800ae18:	613b      	str	r3, [r7, #16]

    if (currentpin != 0x00u)
 800ae1a:	693b      	ldr	r3, [r7, #16]
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d032      	beq.n	800ae86 <LL_GPIO_Init+0xa0>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800ae20:	683b      	ldr	r3, [r7, #0]
 800ae22:	685b      	ldr	r3, [r3, #4]
 800ae24:	461a      	mov	r2, r3
 800ae26:	6939      	ldr	r1, [r7, #16]
 800ae28:	6878      	ldr	r0, [r7, #4]
 800ae2a:	f7ff fed7 	bl	800abdc <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800ae2e:	683b      	ldr	r3, [r7, #0]
 800ae30:	685b      	ldr	r3, [r3, #4]
 800ae32:	2b01      	cmp	r3, #1
 800ae34:	d003      	beq.n	800ae3e <LL_GPIO_Init+0x58>
 800ae36:	683b      	ldr	r3, [r7, #0]
 800ae38:	685b      	ldr	r3, [r3, #4]
 800ae3a:	2b02      	cmp	r3, #2
 800ae3c:	d106      	bne.n	800ae4c <LL_GPIO_Init+0x66>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800ae3e:	683b      	ldr	r3, [r7, #0]
 800ae40:	689b      	ldr	r3, [r3, #8]
 800ae42:	461a      	mov	r2, r3
 800ae44:	6939      	ldr	r1, [r7, #16]
 800ae46:	6878      	ldr	r0, [r7, #4]
 800ae48:	f7ff ff0f 	bl	800ac6a <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800ae4c:	683b      	ldr	r3, [r7, #0]
 800ae4e:	691b      	ldr	r3, [r3, #16]
 800ae50:	461a      	mov	r2, r3
 800ae52:	6939      	ldr	r1, [r7, #16]
 800ae54:	6878      	ldr	r0, [r7, #4]
 800ae56:	f7ff ff37 	bl	800acc8 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800ae5a:	683b      	ldr	r3, [r7, #0]
 800ae5c:	685b      	ldr	r3, [r3, #4]
 800ae5e:	2b02      	cmp	r3, #2
 800ae60:	d111      	bne.n	800ae86 <LL_GPIO_Init+0xa0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800ae62:	693b      	ldr	r3, [r7, #16]
 800ae64:	2bff      	cmp	r3, #255	; 0xff
 800ae66:	d807      	bhi.n	800ae78 <LL_GPIO_Init+0x92>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800ae68:	683b      	ldr	r3, [r7, #0]
 800ae6a:	695b      	ldr	r3, [r3, #20]
 800ae6c:	461a      	mov	r2, r3
 800ae6e:	6939      	ldr	r1, [r7, #16]
 800ae70:	6878      	ldr	r0, [r7, #4]
 800ae72:	f7ff ff58 	bl	800ad26 <LL_GPIO_SetAFPin_0_7>
 800ae76:	e006      	b.n	800ae86 <LL_GPIO_Init+0xa0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800ae78:	683b      	ldr	r3, [r7, #0]
 800ae7a:	695b      	ldr	r3, [r3, #20]
 800ae7c:	461a      	mov	r2, r3
 800ae7e:	6939      	ldr	r1, [r7, #16]
 800ae80:	6878      	ldr	r0, [r7, #4]
 800ae82:	f7ff ff7f 	bl	800ad84 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 800ae86:	697b      	ldr	r3, [r7, #20]
 800ae88:	3301      	adds	r3, #1
 800ae8a:	617b      	str	r3, [r7, #20]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800ae8c:	683b      	ldr	r3, [r7, #0]
 800ae8e:	681a      	ldr	r2, [r3, #0]
 800ae90:	697b      	ldr	r3, [r7, #20]
 800ae92:	fa22 f303 	lsr.w	r3, r2, r3
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d1b7      	bne.n	800ae0a <LL_GPIO_Init+0x24>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800ae9a:	683b      	ldr	r3, [r7, #0]
 800ae9c:	685b      	ldr	r3, [r3, #4]
 800ae9e:	2b01      	cmp	r3, #1
 800aea0:	d003      	beq.n	800aeaa <LL_GPIO_Init+0xc4>
 800aea2:	683b      	ldr	r3, [r7, #0]
 800aea4:	685b      	ldr	r3, [r3, #4]
 800aea6:	2b02      	cmp	r3, #2
 800aea8:	d107      	bne.n	800aeba <LL_GPIO_Init+0xd4>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800aeaa:	683b      	ldr	r3, [r7, #0]
 800aeac:	6819      	ldr	r1, [r3, #0]
 800aeae:	683b      	ldr	r3, [r7, #0]
 800aeb0:	68db      	ldr	r3, [r3, #12]
 800aeb2:	461a      	mov	r2, r3
 800aeb4:	6878      	ldr	r0, [r7, #4]
 800aeb6:	f7ff fec0 	bl	800ac3a <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 800aeba:	2300      	movs	r3, #0
}
 800aebc:	4618      	mov	r0, r3
 800aebe:	3718      	adds	r7, #24
 800aec0:	46bd      	mov	sp, r7
 800aec2:	bd80      	pop	{r7, pc}

0800aec4 <atof>:
 800aec4:	2100      	movs	r1, #0
 800aec6:	f001 b933 	b.w	800c130 <strtod>
	...

0800aecc <clock>:
 800aecc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800aece:	4b08      	ldr	r3, [pc, #32]	; (800aef0 <clock+0x24>)
 800aed0:	4669      	mov	r1, sp
 800aed2:	6818      	ldr	r0, [r3, #0]
 800aed4:	f002 fb6b 	bl	800d5ae <_times_r>
 800aed8:	1c43      	adds	r3, r0, #1
 800aeda:	d006      	beq.n	800aeea <clock+0x1e>
 800aedc:	e9dd 0300 	ldrd	r0, r3, [sp]
 800aee0:	4418      	add	r0, r3
 800aee2:	9b02      	ldr	r3, [sp, #8]
 800aee4:	4418      	add	r0, r3
 800aee6:	9b03      	ldr	r3, [sp, #12]
 800aee8:	4418      	add	r0, r3
 800aeea:	b005      	add	sp, #20
 800aeec:	f85d fb04 	ldr.w	pc, [sp], #4
 800aef0:	200000f4 	.word	0x200000f4

0800aef4 <gcvt>:
 800aef4:	b530      	push	{r4, r5, lr}
 800aef6:	ed2d 8b02 	vpush	{d8}
 800aefa:	eeb0 8a40 	vmov.f32	s16, s0
 800aefe:	eef0 8a60 	vmov.f32	s17, s1
 800af02:	460c      	mov	r4, r1
 800af04:	2200      	movs	r2, #0
 800af06:	b083      	sub	sp, #12
 800af08:	4605      	mov	r5, r0
 800af0a:	2300      	movs	r3, #0
 800af0c:	ec51 0b10 	vmov	r0, r1, d0
 800af10:	f7f5 fdf4 	bl	8000afc <__aeabi_dcmplt>
 800af14:	4622      	mov	r2, r4
 800af16:	b118      	cbz	r0, 800af20 <gcvt+0x2c>
 800af18:	232d      	movs	r3, #45	; 0x2d
 800af1a:	f802 3b01 	strb.w	r3, [r2], #1
 800af1e:	3d01      	subs	r5, #1
 800af20:	2300      	movs	r3, #0
 800af22:	4809      	ldr	r0, [pc, #36]	; (800af48 <gcvt+0x54>)
 800af24:	9300      	str	r3, [sp, #0]
 800af26:	4629      	mov	r1, r5
 800af28:	2367      	movs	r3, #103	; 0x67
 800af2a:	eeb0 0a48 	vmov.f32	s0, s16
 800af2e:	eef0 0a68 	vmov.f32	s1, s17
 800af32:	6800      	ldr	r0, [r0, #0]
 800af34:	f003 f9f8 	bl	800e328 <_gcvt>
 800af38:	2800      	cmp	r0, #0
 800af3a:	bf14      	ite	ne
 800af3c:	4620      	movne	r0, r4
 800af3e:	2000      	moveq	r0, #0
 800af40:	b003      	add	sp, #12
 800af42:	ecbd 8b02 	vpop	{d8}
 800af46:	bd30      	pop	{r4, r5, pc}
 800af48:	200000f4 	.word	0x200000f4

0800af4c <__errno>:
 800af4c:	4b01      	ldr	r3, [pc, #4]	; (800af54 <__errno+0x8>)
 800af4e:	6818      	ldr	r0, [r3, #0]
 800af50:	4770      	bx	lr
 800af52:	bf00      	nop
 800af54:	200000f4 	.word	0x200000f4

0800af58 <__libc_init_array>:
 800af58:	b570      	push	{r4, r5, r6, lr}
 800af5a:	4e0d      	ldr	r6, [pc, #52]	; (800af90 <__libc_init_array+0x38>)
 800af5c:	4c0d      	ldr	r4, [pc, #52]	; (800af94 <__libc_init_array+0x3c>)
 800af5e:	1ba4      	subs	r4, r4, r6
 800af60:	10a4      	asrs	r4, r4, #2
 800af62:	2500      	movs	r5, #0
 800af64:	42a5      	cmp	r5, r4
 800af66:	d109      	bne.n	800af7c <__libc_init_array+0x24>
 800af68:	4e0b      	ldr	r6, [pc, #44]	; (800af98 <__libc_init_array+0x40>)
 800af6a:	4c0c      	ldr	r4, [pc, #48]	; (800af9c <__libc_init_array+0x44>)
 800af6c:	f004 fea4 	bl	800fcb8 <_init>
 800af70:	1ba4      	subs	r4, r4, r6
 800af72:	10a4      	asrs	r4, r4, #2
 800af74:	2500      	movs	r5, #0
 800af76:	42a5      	cmp	r5, r4
 800af78:	d105      	bne.n	800af86 <__libc_init_array+0x2e>
 800af7a:	bd70      	pop	{r4, r5, r6, pc}
 800af7c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800af80:	4798      	blx	r3
 800af82:	3501      	adds	r5, #1
 800af84:	e7ee      	b.n	800af64 <__libc_init_array+0xc>
 800af86:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800af8a:	4798      	blx	r3
 800af8c:	3501      	adds	r5, #1
 800af8e:	e7f2      	b.n	800af76 <__libc_init_array+0x1e>
 800af90:	080105a8 	.word	0x080105a8
 800af94:	080105a8 	.word	0x080105a8
 800af98:	080105a8 	.word	0x080105a8
 800af9c:	080105b0 	.word	0x080105b0

0800afa0 <malloc>:
 800afa0:	4b02      	ldr	r3, [pc, #8]	; (800afac <malloc+0xc>)
 800afa2:	4601      	mov	r1, r0
 800afa4:	6818      	ldr	r0, [r3, #0]
 800afa6:	f000 b80b 	b.w	800afc0 <_malloc_r>
 800afaa:	bf00      	nop
 800afac:	200000f4 	.word	0x200000f4

0800afb0 <free>:
 800afb0:	4b02      	ldr	r3, [pc, #8]	; (800afbc <free+0xc>)
 800afb2:	4601      	mov	r1, r0
 800afb4:	6818      	ldr	r0, [r3, #0]
 800afb6:	f003 bae9 	b.w	800e58c <_free_r>
 800afba:	bf00      	nop
 800afbc:	200000f4 	.word	0x200000f4

0800afc0 <_malloc_r>:
 800afc0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afc4:	f101 050b 	add.w	r5, r1, #11
 800afc8:	2d16      	cmp	r5, #22
 800afca:	4606      	mov	r6, r0
 800afcc:	d906      	bls.n	800afdc <_malloc_r+0x1c>
 800afce:	f035 0507 	bics.w	r5, r5, #7
 800afd2:	d504      	bpl.n	800afde <_malloc_r+0x1e>
 800afd4:	230c      	movs	r3, #12
 800afd6:	6033      	str	r3, [r6, #0]
 800afd8:	2400      	movs	r4, #0
 800afda:	e1a8      	b.n	800b32e <_malloc_r+0x36e>
 800afdc:	2510      	movs	r5, #16
 800afde:	428d      	cmp	r5, r1
 800afe0:	d3f8      	bcc.n	800afd4 <_malloc_r+0x14>
 800afe2:	4630      	mov	r0, r6
 800afe4:	f000 fa2a 	bl	800b43c <__malloc_lock>
 800afe8:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
 800afec:	4fc0      	ldr	r7, [pc, #768]	; (800b2f0 <_malloc_r+0x330>)
 800afee:	d238      	bcs.n	800b062 <_malloc_r+0xa2>
 800aff0:	f105 0208 	add.w	r2, r5, #8
 800aff4:	443a      	add	r2, r7
 800aff6:	f1a2 0108 	sub.w	r1, r2, #8
 800affa:	6854      	ldr	r4, [r2, #4]
 800affc:	428c      	cmp	r4, r1
 800affe:	ea4f 03d5 	mov.w	r3, r5, lsr #3
 800b002:	d102      	bne.n	800b00a <_malloc_r+0x4a>
 800b004:	68d4      	ldr	r4, [r2, #12]
 800b006:	42a2      	cmp	r2, r4
 800b008:	d010      	beq.n	800b02c <_malloc_r+0x6c>
 800b00a:	6863      	ldr	r3, [r4, #4]
 800b00c:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 800b010:	f023 0303 	bic.w	r3, r3, #3
 800b014:	60ca      	str	r2, [r1, #12]
 800b016:	4423      	add	r3, r4
 800b018:	6091      	str	r1, [r2, #8]
 800b01a:	685a      	ldr	r2, [r3, #4]
 800b01c:	f042 0201 	orr.w	r2, r2, #1
 800b020:	605a      	str	r2, [r3, #4]
 800b022:	4630      	mov	r0, r6
 800b024:	f000 fa10 	bl	800b448 <__malloc_unlock>
 800b028:	3408      	adds	r4, #8
 800b02a:	e180      	b.n	800b32e <_malloc_r+0x36e>
 800b02c:	3302      	adds	r3, #2
 800b02e:	4ab1      	ldr	r2, [pc, #708]	; (800b2f4 <_malloc_r+0x334>)
 800b030:	693c      	ldr	r4, [r7, #16]
 800b032:	4294      	cmp	r4, r2
 800b034:	4611      	mov	r1, r2
 800b036:	d075      	beq.n	800b124 <_malloc_r+0x164>
 800b038:	6860      	ldr	r0, [r4, #4]
 800b03a:	f020 0c03 	bic.w	ip, r0, #3
 800b03e:	ebac 0005 	sub.w	r0, ip, r5
 800b042:	280f      	cmp	r0, #15
 800b044:	dd48      	ble.n	800b0d8 <_malloc_r+0x118>
 800b046:	1963      	adds	r3, r4, r5
 800b048:	f045 0501 	orr.w	r5, r5, #1
 800b04c:	6065      	str	r5, [r4, #4]
 800b04e:	e9c7 3304 	strd	r3, r3, [r7, #16]
 800b052:	e9c3 2202 	strd	r2, r2, [r3, #8]
 800b056:	f040 0201 	orr.w	r2, r0, #1
 800b05a:	605a      	str	r2, [r3, #4]
 800b05c:	f844 000c 	str.w	r0, [r4, ip]
 800b060:	e7df      	b.n	800b022 <_malloc_r+0x62>
 800b062:	0a6b      	lsrs	r3, r5, #9
 800b064:	d02a      	beq.n	800b0bc <_malloc_r+0xfc>
 800b066:	2b04      	cmp	r3, #4
 800b068:	d812      	bhi.n	800b090 <_malloc_r+0xd0>
 800b06a:	09ab      	lsrs	r3, r5, #6
 800b06c:	3338      	adds	r3, #56	; 0x38
 800b06e:	1c5a      	adds	r2, r3, #1
 800b070:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
 800b074:	f1a2 0c08 	sub.w	ip, r2, #8
 800b078:	6854      	ldr	r4, [r2, #4]
 800b07a:	4564      	cmp	r4, ip
 800b07c:	d006      	beq.n	800b08c <_malloc_r+0xcc>
 800b07e:	6862      	ldr	r2, [r4, #4]
 800b080:	f022 0203 	bic.w	r2, r2, #3
 800b084:	1b50      	subs	r0, r2, r5
 800b086:	280f      	cmp	r0, #15
 800b088:	dd1c      	ble.n	800b0c4 <_malloc_r+0x104>
 800b08a:	3b01      	subs	r3, #1
 800b08c:	3301      	adds	r3, #1
 800b08e:	e7ce      	b.n	800b02e <_malloc_r+0x6e>
 800b090:	2b14      	cmp	r3, #20
 800b092:	d801      	bhi.n	800b098 <_malloc_r+0xd8>
 800b094:	335b      	adds	r3, #91	; 0x5b
 800b096:	e7ea      	b.n	800b06e <_malloc_r+0xae>
 800b098:	2b54      	cmp	r3, #84	; 0x54
 800b09a:	d802      	bhi.n	800b0a2 <_malloc_r+0xe2>
 800b09c:	0b2b      	lsrs	r3, r5, #12
 800b09e:	336e      	adds	r3, #110	; 0x6e
 800b0a0:	e7e5      	b.n	800b06e <_malloc_r+0xae>
 800b0a2:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 800b0a6:	d802      	bhi.n	800b0ae <_malloc_r+0xee>
 800b0a8:	0beb      	lsrs	r3, r5, #15
 800b0aa:	3377      	adds	r3, #119	; 0x77
 800b0ac:	e7df      	b.n	800b06e <_malloc_r+0xae>
 800b0ae:	f240 5254 	movw	r2, #1364	; 0x554
 800b0b2:	4293      	cmp	r3, r2
 800b0b4:	d804      	bhi.n	800b0c0 <_malloc_r+0x100>
 800b0b6:	0cab      	lsrs	r3, r5, #18
 800b0b8:	337c      	adds	r3, #124	; 0x7c
 800b0ba:	e7d8      	b.n	800b06e <_malloc_r+0xae>
 800b0bc:	233f      	movs	r3, #63	; 0x3f
 800b0be:	e7d6      	b.n	800b06e <_malloc_r+0xae>
 800b0c0:	237e      	movs	r3, #126	; 0x7e
 800b0c2:	e7d4      	b.n	800b06e <_malloc_r+0xae>
 800b0c4:	2800      	cmp	r0, #0
 800b0c6:	68e1      	ldr	r1, [r4, #12]
 800b0c8:	db04      	blt.n	800b0d4 <_malloc_r+0x114>
 800b0ca:	68a3      	ldr	r3, [r4, #8]
 800b0cc:	60d9      	str	r1, [r3, #12]
 800b0ce:	608b      	str	r3, [r1, #8]
 800b0d0:	18a3      	adds	r3, r4, r2
 800b0d2:	e7a2      	b.n	800b01a <_malloc_r+0x5a>
 800b0d4:	460c      	mov	r4, r1
 800b0d6:	e7d0      	b.n	800b07a <_malloc_r+0xba>
 800b0d8:	2800      	cmp	r0, #0
 800b0da:	e9c7 2204 	strd	r2, r2, [r7, #16]
 800b0de:	db07      	blt.n	800b0f0 <_malloc_r+0x130>
 800b0e0:	44a4      	add	ip, r4
 800b0e2:	f8dc 3004 	ldr.w	r3, [ip, #4]
 800b0e6:	f043 0301 	orr.w	r3, r3, #1
 800b0ea:	f8cc 3004 	str.w	r3, [ip, #4]
 800b0ee:	e798      	b.n	800b022 <_malloc_r+0x62>
 800b0f0:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 800b0f4:	6878      	ldr	r0, [r7, #4]
 800b0f6:	f080 8099 	bcs.w	800b22c <_malloc_r+0x26c>
 800b0fa:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 800b0fe:	ea4f 0eac 	mov.w	lr, ip, asr #2
 800b102:	2201      	movs	r2, #1
 800b104:	f10c 0c01 	add.w	ip, ip, #1
 800b108:	fa02 f20e 	lsl.w	r2, r2, lr
 800b10c:	4310      	orrs	r0, r2
 800b10e:	6078      	str	r0, [r7, #4]
 800b110:	eb07 02cc 	add.w	r2, r7, ip, lsl #3
 800b114:	f857 003c 	ldr.w	r0, [r7, ip, lsl #3]
 800b118:	3a08      	subs	r2, #8
 800b11a:	e9c4 0202 	strd	r0, r2, [r4, #8]
 800b11e:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
 800b122:	60c4      	str	r4, [r0, #12]
 800b124:	2001      	movs	r0, #1
 800b126:	109a      	asrs	r2, r3, #2
 800b128:	fa00 f202 	lsl.w	r2, r0, r2
 800b12c:	6878      	ldr	r0, [r7, #4]
 800b12e:	4290      	cmp	r0, r2
 800b130:	d326      	bcc.n	800b180 <_malloc_r+0x1c0>
 800b132:	4210      	tst	r0, r2
 800b134:	d106      	bne.n	800b144 <_malloc_r+0x184>
 800b136:	f023 0303 	bic.w	r3, r3, #3
 800b13a:	0052      	lsls	r2, r2, #1
 800b13c:	4210      	tst	r0, r2
 800b13e:	f103 0304 	add.w	r3, r3, #4
 800b142:	d0fa      	beq.n	800b13a <_malloc_r+0x17a>
 800b144:	eb07 0cc3 	add.w	ip, r7, r3, lsl #3
 800b148:	46e1      	mov	r9, ip
 800b14a:	4698      	mov	r8, r3
 800b14c:	f8d9 400c 	ldr.w	r4, [r9, #12]
 800b150:	454c      	cmp	r4, r9
 800b152:	f040 80af 	bne.w	800b2b4 <_malloc_r+0x2f4>
 800b156:	f108 0801 	add.w	r8, r8, #1
 800b15a:	f018 0f03 	tst.w	r8, #3
 800b15e:	f109 0908 	add.w	r9, r9, #8
 800b162:	d1f3      	bne.n	800b14c <_malloc_r+0x18c>
 800b164:	0798      	lsls	r0, r3, #30
 800b166:	f040 80e8 	bne.w	800b33a <_malloc_r+0x37a>
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	ea23 0302 	bic.w	r3, r3, r2
 800b170:	607b      	str	r3, [r7, #4]
 800b172:	6878      	ldr	r0, [r7, #4]
 800b174:	0052      	lsls	r2, r2, #1
 800b176:	4290      	cmp	r0, r2
 800b178:	d302      	bcc.n	800b180 <_malloc_r+0x1c0>
 800b17a:	2a00      	cmp	r2, #0
 800b17c:	f040 80ec 	bne.w	800b358 <_malloc_r+0x398>
 800b180:	f8d7 a008 	ldr.w	sl, [r7, #8]
 800b184:	f8da 4004 	ldr.w	r4, [sl, #4]
 800b188:	f024 0203 	bic.w	r2, r4, #3
 800b18c:	42aa      	cmp	r2, r5
 800b18e:	d303      	bcc.n	800b198 <_malloc_r+0x1d8>
 800b190:	1b53      	subs	r3, r2, r5
 800b192:	2b0f      	cmp	r3, #15
 800b194:	f300 8140 	bgt.w	800b418 <_malloc_r+0x458>
 800b198:	4b57      	ldr	r3, [pc, #348]	; (800b2f8 <_malloc_r+0x338>)
 800b19a:	9200      	str	r2, [sp, #0]
 800b19c:	2008      	movs	r0, #8
 800b19e:	681c      	ldr	r4, [r3, #0]
 800b1a0:	f002 f9f8 	bl	800d594 <sysconf>
 800b1a4:	4b55      	ldr	r3, [pc, #340]	; (800b2fc <_malloc_r+0x33c>)
 800b1a6:	9a00      	ldr	r2, [sp, #0]
 800b1a8:	6819      	ldr	r1, [r3, #0]
 800b1aa:	3410      	adds	r4, #16
 800b1ac:	3101      	adds	r1, #1
 800b1ae:	442c      	add	r4, r5
 800b1b0:	bf1f      	itttt	ne
 800b1b2:	f104 34ff 	addne.w	r4, r4, #4294967295
 800b1b6:	1824      	addne	r4, r4, r0
 800b1b8:	4241      	negne	r1, r0
 800b1ba:	400c      	andne	r4, r1
 800b1bc:	4680      	mov	r8, r0
 800b1be:	4621      	mov	r1, r4
 800b1c0:	4630      	mov	r0, r6
 800b1c2:	e9cd 2300 	strd	r2, r3, [sp]
 800b1c6:	f000 f945 	bl	800b454 <_sbrk_r>
 800b1ca:	f1b0 3fff 	cmp.w	r0, #4294967295
 800b1ce:	4683      	mov	fp, r0
 800b1d0:	f000 80fb 	beq.w	800b3ca <_malloc_r+0x40a>
 800b1d4:	9a00      	ldr	r2, [sp, #0]
 800b1d6:	9b01      	ldr	r3, [sp, #4]
 800b1d8:	eb0a 0102 	add.w	r1, sl, r2
 800b1dc:	4281      	cmp	r1, r0
 800b1de:	d902      	bls.n	800b1e6 <_malloc_r+0x226>
 800b1e0:	45ba      	cmp	sl, r7
 800b1e2:	f040 80f2 	bne.w	800b3ca <_malloc_r+0x40a>
 800b1e6:	f8df 9120 	ldr.w	r9, [pc, #288]	; 800b308 <_malloc_r+0x348>
 800b1ea:	f8d9 0000 	ldr.w	r0, [r9]
 800b1ee:	4559      	cmp	r1, fp
 800b1f0:	eb00 0e04 	add.w	lr, r0, r4
 800b1f4:	f8c9 e000 	str.w	lr, [r9]
 800b1f8:	f108 3cff 	add.w	ip, r8, #4294967295
 800b1fc:	f040 80ae 	bne.w	800b35c <_malloc_r+0x39c>
 800b200:	ea11 0f0c 	tst.w	r1, ip
 800b204:	f040 80aa 	bne.w	800b35c <_malloc_r+0x39c>
 800b208:	68bb      	ldr	r3, [r7, #8]
 800b20a:	4414      	add	r4, r2
 800b20c:	f044 0401 	orr.w	r4, r4, #1
 800b210:	605c      	str	r4, [r3, #4]
 800b212:	4a3b      	ldr	r2, [pc, #236]	; (800b300 <_malloc_r+0x340>)
 800b214:	f8d9 3000 	ldr.w	r3, [r9]
 800b218:	6811      	ldr	r1, [r2, #0]
 800b21a:	428b      	cmp	r3, r1
 800b21c:	bf88      	it	hi
 800b21e:	6013      	strhi	r3, [r2, #0]
 800b220:	4a38      	ldr	r2, [pc, #224]	; (800b304 <_malloc_r+0x344>)
 800b222:	6811      	ldr	r1, [r2, #0]
 800b224:	428b      	cmp	r3, r1
 800b226:	bf88      	it	hi
 800b228:	6013      	strhi	r3, [r2, #0]
 800b22a:	e0ce      	b.n	800b3ca <_malloc_r+0x40a>
 800b22c:	ea4f 225c 	mov.w	r2, ip, lsr #9
 800b230:	2a04      	cmp	r2, #4
 800b232:	d818      	bhi.n	800b266 <_malloc_r+0x2a6>
 800b234:	ea4f 129c 	mov.w	r2, ip, lsr #6
 800b238:	3238      	adds	r2, #56	; 0x38
 800b23a:	f102 0e01 	add.w	lr, r2, #1
 800b23e:	eb07 08c2 	add.w	r8, r7, r2, lsl #3
 800b242:	f857 e03e 	ldr.w	lr, [r7, lr, lsl #3]
 800b246:	45f0      	cmp	r8, lr
 800b248:	d12b      	bne.n	800b2a2 <_malloc_r+0x2e2>
 800b24a:	1092      	asrs	r2, r2, #2
 800b24c:	f04f 0c01 	mov.w	ip, #1
 800b250:	fa0c f202 	lsl.w	r2, ip, r2
 800b254:	4310      	orrs	r0, r2
 800b256:	6078      	str	r0, [r7, #4]
 800b258:	e9c4 e802 	strd	lr, r8, [r4, #8]
 800b25c:	f8c8 4008 	str.w	r4, [r8, #8]
 800b260:	f8ce 400c 	str.w	r4, [lr, #12]
 800b264:	e75e      	b.n	800b124 <_malloc_r+0x164>
 800b266:	2a14      	cmp	r2, #20
 800b268:	d801      	bhi.n	800b26e <_malloc_r+0x2ae>
 800b26a:	325b      	adds	r2, #91	; 0x5b
 800b26c:	e7e5      	b.n	800b23a <_malloc_r+0x27a>
 800b26e:	2a54      	cmp	r2, #84	; 0x54
 800b270:	d803      	bhi.n	800b27a <_malloc_r+0x2ba>
 800b272:	ea4f 321c 	mov.w	r2, ip, lsr #12
 800b276:	326e      	adds	r2, #110	; 0x6e
 800b278:	e7df      	b.n	800b23a <_malloc_r+0x27a>
 800b27a:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800b27e:	d803      	bhi.n	800b288 <_malloc_r+0x2c8>
 800b280:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 800b284:	3277      	adds	r2, #119	; 0x77
 800b286:	e7d8      	b.n	800b23a <_malloc_r+0x27a>
 800b288:	f240 5e54 	movw	lr, #1364	; 0x554
 800b28c:	4572      	cmp	r2, lr
 800b28e:	bf9a      	itte	ls
 800b290:	ea4f 429c 	movls.w	r2, ip, lsr #18
 800b294:	327c      	addls	r2, #124	; 0x7c
 800b296:	227e      	movhi	r2, #126	; 0x7e
 800b298:	e7cf      	b.n	800b23a <_malloc_r+0x27a>
 800b29a:	f8de e008 	ldr.w	lr, [lr, #8]
 800b29e:	45f0      	cmp	r8, lr
 800b2a0:	d005      	beq.n	800b2ae <_malloc_r+0x2ee>
 800b2a2:	f8de 2004 	ldr.w	r2, [lr, #4]
 800b2a6:	f022 0203 	bic.w	r2, r2, #3
 800b2aa:	4562      	cmp	r2, ip
 800b2ac:	d8f5      	bhi.n	800b29a <_malloc_r+0x2da>
 800b2ae:	f8de 800c 	ldr.w	r8, [lr, #12]
 800b2b2:	e7d1      	b.n	800b258 <_malloc_r+0x298>
 800b2b4:	6860      	ldr	r0, [r4, #4]
 800b2b6:	f8d4 e00c 	ldr.w	lr, [r4, #12]
 800b2ba:	f020 0003 	bic.w	r0, r0, #3
 800b2be:	eba0 0a05 	sub.w	sl, r0, r5
 800b2c2:	f1ba 0f0f 	cmp.w	sl, #15
 800b2c6:	dd21      	ble.n	800b30c <_malloc_r+0x34c>
 800b2c8:	68a2      	ldr	r2, [r4, #8]
 800b2ca:	1963      	adds	r3, r4, r5
 800b2cc:	f045 0501 	orr.w	r5, r5, #1
 800b2d0:	6065      	str	r5, [r4, #4]
 800b2d2:	f8c2 e00c 	str.w	lr, [r2, #12]
 800b2d6:	f8ce 2008 	str.w	r2, [lr, #8]
 800b2da:	f04a 0201 	orr.w	r2, sl, #1
 800b2de:	e9c7 3304 	strd	r3, r3, [r7, #16]
 800b2e2:	e9c3 1102 	strd	r1, r1, [r3, #8]
 800b2e6:	605a      	str	r2, [r3, #4]
 800b2e8:	f844 a000 	str.w	sl, [r4, r0]
 800b2ec:	e699      	b.n	800b022 <_malloc_r+0x62>
 800b2ee:	bf00      	nop
 800b2f0:	20000520 	.word	0x20000520
 800b2f4:	20000528 	.word	0x20000528
 800b2f8:	20000b40 	.word	0x20000b40
 800b2fc:	20000928 	.word	0x20000928
 800b300:	20000b38 	.word	0x20000b38
 800b304:	20000b3c 	.word	0x20000b3c
 800b308:	20000b10 	.word	0x20000b10
 800b30c:	f1ba 0f00 	cmp.w	sl, #0
 800b310:	db11      	blt.n	800b336 <_malloc_r+0x376>
 800b312:	4420      	add	r0, r4
 800b314:	6843      	ldr	r3, [r0, #4]
 800b316:	f043 0301 	orr.w	r3, r3, #1
 800b31a:	6043      	str	r3, [r0, #4]
 800b31c:	f854 3f08 	ldr.w	r3, [r4, #8]!
 800b320:	4630      	mov	r0, r6
 800b322:	f8c3 e00c 	str.w	lr, [r3, #12]
 800b326:	f8ce 3008 	str.w	r3, [lr, #8]
 800b32a:	f000 f88d 	bl	800b448 <__malloc_unlock>
 800b32e:	4620      	mov	r0, r4
 800b330:	b003      	add	sp, #12
 800b332:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b336:	4674      	mov	r4, lr
 800b338:	e70a      	b.n	800b150 <_malloc_r+0x190>
 800b33a:	f1ac 0008 	sub.w	r0, ip, #8
 800b33e:	f8dc c000 	ldr.w	ip, [ip]
 800b342:	4584      	cmp	ip, r0
 800b344:	f103 33ff 	add.w	r3, r3, #4294967295
 800b348:	f43f af0c 	beq.w	800b164 <_malloc_r+0x1a4>
 800b34c:	e711      	b.n	800b172 <_malloc_r+0x1b2>
 800b34e:	3304      	adds	r3, #4
 800b350:	0052      	lsls	r2, r2, #1
 800b352:	4210      	tst	r0, r2
 800b354:	d0fb      	beq.n	800b34e <_malloc_r+0x38e>
 800b356:	e6f5      	b.n	800b144 <_malloc_r+0x184>
 800b358:	4643      	mov	r3, r8
 800b35a:	e7fa      	b.n	800b352 <_malloc_r+0x392>
 800b35c:	6818      	ldr	r0, [r3, #0]
 800b35e:	9200      	str	r2, [sp, #0]
 800b360:	3001      	adds	r0, #1
 800b362:	bf1b      	ittet	ne
 800b364:	ebab 0101 	subne.w	r1, fp, r1
 800b368:	4471      	addne	r1, lr
 800b36a:	f8c3 b000 	streq.w	fp, [r3]
 800b36e:	f8c9 1000 	strne.w	r1, [r9]
 800b372:	f01b 0307 	ands.w	r3, fp, #7
 800b376:	bf1c      	itt	ne
 800b378:	f1c3 0308 	rsbne	r3, r3, #8
 800b37c:	449b      	addne	fp, r3
 800b37e:	445c      	add	r4, fp
 800b380:	4498      	add	r8, r3
 800b382:	ea04 030c 	and.w	r3, r4, ip
 800b386:	eba8 0803 	sub.w	r8, r8, r3
 800b38a:	4641      	mov	r1, r8
 800b38c:	4630      	mov	r0, r6
 800b38e:	f000 f861 	bl	800b454 <_sbrk_r>
 800b392:	1c43      	adds	r3, r0, #1
 800b394:	bf04      	itt	eq
 800b396:	4658      	moveq	r0, fp
 800b398:	f04f 0800 	moveq.w	r8, #0
 800b39c:	f8d9 3000 	ldr.w	r3, [r9]
 800b3a0:	f8c7 b008 	str.w	fp, [r7, #8]
 800b3a4:	eba0 000b 	sub.w	r0, r0, fp
 800b3a8:	4440      	add	r0, r8
 800b3aa:	4443      	add	r3, r8
 800b3ac:	f040 0001 	orr.w	r0, r0, #1
 800b3b0:	45ba      	cmp	sl, r7
 800b3b2:	9a00      	ldr	r2, [sp, #0]
 800b3b4:	f8c9 3000 	str.w	r3, [r9]
 800b3b8:	f8cb 0004 	str.w	r0, [fp, #4]
 800b3bc:	f43f af29 	beq.w	800b212 <_malloc_r+0x252>
 800b3c0:	2a0f      	cmp	r2, #15
 800b3c2:	d810      	bhi.n	800b3e6 <_malloc_r+0x426>
 800b3c4:	2301      	movs	r3, #1
 800b3c6:	f8cb 3004 	str.w	r3, [fp, #4]
 800b3ca:	68bb      	ldr	r3, [r7, #8]
 800b3cc:	685a      	ldr	r2, [r3, #4]
 800b3ce:	f022 0203 	bic.w	r2, r2, #3
 800b3d2:	42aa      	cmp	r2, r5
 800b3d4:	eba2 0305 	sub.w	r3, r2, r5
 800b3d8:	d301      	bcc.n	800b3de <_malloc_r+0x41e>
 800b3da:	2b0f      	cmp	r3, #15
 800b3dc:	dc1c      	bgt.n	800b418 <_malloc_r+0x458>
 800b3de:	4630      	mov	r0, r6
 800b3e0:	f000 f832 	bl	800b448 <__malloc_unlock>
 800b3e4:	e5f8      	b.n	800afd8 <_malloc_r+0x18>
 800b3e6:	f8da 3004 	ldr.w	r3, [sl, #4]
 800b3ea:	f1a2 040c 	sub.w	r4, r2, #12
 800b3ee:	f024 0407 	bic.w	r4, r4, #7
 800b3f2:	f003 0301 	and.w	r3, r3, #1
 800b3f6:	4323      	orrs	r3, r4
 800b3f8:	f8ca 3004 	str.w	r3, [sl, #4]
 800b3fc:	2205      	movs	r2, #5
 800b3fe:	eb0a 0304 	add.w	r3, sl, r4
 800b402:	2c0f      	cmp	r4, #15
 800b404:	e9c3 2201 	strd	r2, r2, [r3, #4]
 800b408:	f67f af03 	bls.w	800b212 <_malloc_r+0x252>
 800b40c:	f10a 0108 	add.w	r1, sl, #8
 800b410:	4630      	mov	r0, r6
 800b412:	f003 f8bb 	bl	800e58c <_free_r>
 800b416:	e6fc      	b.n	800b212 <_malloc_r+0x252>
 800b418:	68bc      	ldr	r4, [r7, #8]
 800b41a:	f045 0201 	orr.w	r2, r5, #1
 800b41e:	4425      	add	r5, r4
 800b420:	f043 0301 	orr.w	r3, r3, #1
 800b424:	6062      	str	r2, [r4, #4]
 800b426:	60bd      	str	r5, [r7, #8]
 800b428:	606b      	str	r3, [r5, #4]
 800b42a:	e5fa      	b.n	800b022 <_malloc_r+0x62>

0800b42c <memset>:
 800b42c:	4402      	add	r2, r0
 800b42e:	4603      	mov	r3, r0
 800b430:	4293      	cmp	r3, r2
 800b432:	d100      	bne.n	800b436 <memset+0xa>
 800b434:	4770      	bx	lr
 800b436:	f803 1b01 	strb.w	r1, [r3], #1
 800b43a:	e7f9      	b.n	800b430 <memset+0x4>

0800b43c <__malloc_lock>:
 800b43c:	4801      	ldr	r0, [pc, #4]	; (800b444 <__malloc_lock+0x8>)
 800b43e:	f003 bc97 	b.w	800ed70 <__retarget_lock_acquire_recursive>
 800b442:	bf00      	nop
 800b444:	20001074 	.word	0x20001074

0800b448 <__malloc_unlock>:
 800b448:	4801      	ldr	r0, [pc, #4]	; (800b450 <__malloc_unlock+0x8>)
 800b44a:	f003 bc92 	b.w	800ed72 <__retarget_lock_release_recursive>
 800b44e:	bf00      	nop
 800b450:	20001074 	.word	0x20001074

0800b454 <_sbrk_r>:
 800b454:	b538      	push	{r3, r4, r5, lr}
 800b456:	4c06      	ldr	r4, [pc, #24]	; (800b470 <_sbrk_r+0x1c>)
 800b458:	2300      	movs	r3, #0
 800b45a:	4605      	mov	r5, r0
 800b45c:	4608      	mov	r0, r1
 800b45e:	6023      	str	r3, [r4, #0]
 800b460:	f7f7 ffbc 	bl	80033dc <_sbrk>
 800b464:	1c43      	adds	r3, r0, #1
 800b466:	d102      	bne.n	800b46e <_sbrk_r+0x1a>
 800b468:	6823      	ldr	r3, [r4, #0]
 800b46a:	b103      	cbz	r3, 800b46e <_sbrk_r+0x1a>
 800b46c:	602b      	str	r3, [r5, #0]
 800b46e:	bd38      	pop	{r3, r4, r5, pc}
 800b470:	2000107c 	.word	0x2000107c

0800b474 <sprintf>:
 800b474:	b40e      	push	{r1, r2, r3}
 800b476:	b500      	push	{lr}
 800b478:	b09c      	sub	sp, #112	; 0x70
 800b47a:	ab1d      	add	r3, sp, #116	; 0x74
 800b47c:	9002      	str	r0, [sp, #8]
 800b47e:	9006      	str	r0, [sp, #24]
 800b480:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b484:	4809      	ldr	r0, [pc, #36]	; (800b4ac <sprintf+0x38>)
 800b486:	9107      	str	r1, [sp, #28]
 800b488:	9104      	str	r1, [sp, #16]
 800b48a:	4909      	ldr	r1, [pc, #36]	; (800b4b0 <sprintf+0x3c>)
 800b48c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b490:	9105      	str	r1, [sp, #20]
 800b492:	6800      	ldr	r0, [r0, #0]
 800b494:	9301      	str	r3, [sp, #4]
 800b496:	a902      	add	r1, sp, #8
 800b498:	f000 fe5e 	bl	800c158 <_svfprintf_r>
 800b49c:	9b02      	ldr	r3, [sp, #8]
 800b49e:	2200      	movs	r2, #0
 800b4a0:	701a      	strb	r2, [r3, #0]
 800b4a2:	b01c      	add	sp, #112	; 0x70
 800b4a4:	f85d eb04 	ldr.w	lr, [sp], #4
 800b4a8:	b003      	add	sp, #12
 800b4aa:	4770      	bx	lr
 800b4ac:	200000f4 	.word	0x200000f4
 800b4b0:	ffff0208 	.word	0xffff0208

0800b4b4 <strcat>:
 800b4b4:	b510      	push	{r4, lr}
 800b4b6:	4603      	mov	r3, r0
 800b4b8:	781a      	ldrb	r2, [r3, #0]
 800b4ba:	1c5c      	adds	r4, r3, #1
 800b4bc:	b93a      	cbnz	r2, 800b4ce <strcat+0x1a>
 800b4be:	3b01      	subs	r3, #1
 800b4c0:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b4c4:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b4c8:	2a00      	cmp	r2, #0
 800b4ca:	d1f9      	bne.n	800b4c0 <strcat+0xc>
 800b4cc:	bd10      	pop	{r4, pc}
 800b4ce:	4623      	mov	r3, r4
 800b4d0:	e7f2      	b.n	800b4b8 <strcat+0x4>

0800b4d2 <strcpy>:
 800b4d2:	4603      	mov	r3, r0
 800b4d4:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b4d8:	f803 2b01 	strb.w	r2, [r3], #1
 800b4dc:	2a00      	cmp	r2, #0
 800b4de:	d1f9      	bne.n	800b4d4 <strcpy+0x2>
 800b4e0:	4770      	bx	lr

0800b4e2 <strncpy>:
 800b4e2:	b570      	push	{r4, r5, r6, lr}
 800b4e4:	3901      	subs	r1, #1
 800b4e6:	4604      	mov	r4, r0
 800b4e8:	b902      	cbnz	r2, 800b4ec <strncpy+0xa>
 800b4ea:	bd70      	pop	{r4, r5, r6, pc}
 800b4ec:	4623      	mov	r3, r4
 800b4ee:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 800b4f2:	f803 5b01 	strb.w	r5, [r3], #1
 800b4f6:	1e56      	subs	r6, r2, #1
 800b4f8:	b92d      	cbnz	r5, 800b506 <strncpy+0x24>
 800b4fa:	4414      	add	r4, r2
 800b4fc:	42a3      	cmp	r3, r4
 800b4fe:	d0f4      	beq.n	800b4ea <strncpy+0x8>
 800b500:	f803 5b01 	strb.w	r5, [r3], #1
 800b504:	e7fa      	b.n	800b4fc <strncpy+0x1a>
 800b506:	461c      	mov	r4, r3
 800b508:	4632      	mov	r2, r6
 800b50a:	e7ed      	b.n	800b4e8 <strncpy+0x6>

0800b50c <sulp>:
 800b50c:	b570      	push	{r4, r5, r6, lr}
 800b50e:	4604      	mov	r4, r0
 800b510:	460d      	mov	r5, r1
 800b512:	ec45 4b10 	vmov	d0, r4, r5
 800b516:	4616      	mov	r6, r2
 800b518:	f003 feea 	bl	800f2f0 <__ulp>
 800b51c:	ec51 0b10 	vmov	r0, r1, d0
 800b520:	b17e      	cbz	r6, 800b542 <sulp+0x36>
 800b522:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b526:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	dd09      	ble.n	800b542 <sulp+0x36>
 800b52e:	051b      	lsls	r3, r3, #20
 800b530:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800b534:	2400      	movs	r4, #0
 800b536:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800b53a:	4622      	mov	r2, r4
 800b53c:	462b      	mov	r3, r5
 800b53e:	f7f5 f86b 	bl	8000618 <__aeabi_dmul>
 800b542:	bd70      	pop	{r4, r5, r6, pc}
 800b544:	0000      	movs	r0, r0
	...

0800b548 <_strtod_l>:
 800b548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b54c:	461f      	mov	r7, r3
 800b54e:	b0a1      	sub	sp, #132	; 0x84
 800b550:	2300      	movs	r3, #0
 800b552:	4681      	mov	r9, r0
 800b554:	4638      	mov	r0, r7
 800b556:	460e      	mov	r6, r1
 800b558:	9217      	str	r2, [sp, #92]	; 0x5c
 800b55a:	931c      	str	r3, [sp, #112]	; 0x70
 800b55c:	f003 fbf8 	bl	800ed50 <__localeconv_l>
 800b560:	4680      	mov	r8, r0
 800b562:	6800      	ldr	r0, [r0, #0]
 800b564:	f7f4 fe3e 	bl	80001e4 <strlen>
 800b568:	f04f 0a00 	mov.w	sl, #0
 800b56c:	4604      	mov	r4, r0
 800b56e:	f04f 0b00 	mov.w	fp, #0
 800b572:	961b      	str	r6, [sp, #108]	; 0x6c
 800b574:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b576:	781a      	ldrb	r2, [r3, #0]
 800b578:	2a0d      	cmp	r2, #13
 800b57a:	d832      	bhi.n	800b5e2 <_strtod_l+0x9a>
 800b57c:	2a09      	cmp	r2, #9
 800b57e:	d236      	bcs.n	800b5ee <_strtod_l+0xa6>
 800b580:	2a00      	cmp	r2, #0
 800b582:	d03e      	beq.n	800b602 <_strtod_l+0xba>
 800b584:	2300      	movs	r3, #0
 800b586:	930d      	str	r3, [sp, #52]	; 0x34
 800b588:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800b58a:	782b      	ldrb	r3, [r5, #0]
 800b58c:	2b30      	cmp	r3, #48	; 0x30
 800b58e:	f040 80ac 	bne.w	800b6ea <_strtod_l+0x1a2>
 800b592:	786b      	ldrb	r3, [r5, #1]
 800b594:	2b58      	cmp	r3, #88	; 0x58
 800b596:	d001      	beq.n	800b59c <_strtod_l+0x54>
 800b598:	2b78      	cmp	r3, #120	; 0x78
 800b59a:	d167      	bne.n	800b66c <_strtod_l+0x124>
 800b59c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b59e:	9301      	str	r3, [sp, #4]
 800b5a0:	ab1c      	add	r3, sp, #112	; 0x70
 800b5a2:	9300      	str	r3, [sp, #0]
 800b5a4:	9702      	str	r7, [sp, #8]
 800b5a6:	ab1d      	add	r3, sp, #116	; 0x74
 800b5a8:	4a88      	ldr	r2, [pc, #544]	; (800b7cc <_strtod_l+0x284>)
 800b5aa:	a91b      	add	r1, sp, #108	; 0x6c
 800b5ac:	4648      	mov	r0, r9
 800b5ae:	f003 f8f8 	bl	800e7a2 <__gethex>
 800b5b2:	f010 0407 	ands.w	r4, r0, #7
 800b5b6:	4606      	mov	r6, r0
 800b5b8:	d005      	beq.n	800b5c6 <_strtod_l+0x7e>
 800b5ba:	2c06      	cmp	r4, #6
 800b5bc:	d12b      	bne.n	800b616 <_strtod_l+0xce>
 800b5be:	3501      	adds	r5, #1
 800b5c0:	2300      	movs	r3, #0
 800b5c2:	951b      	str	r5, [sp, #108]	; 0x6c
 800b5c4:	930d      	str	r3, [sp, #52]	; 0x34
 800b5c6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	f040 859a 	bne.w	800c102 <_strtod_l+0xbba>
 800b5ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b5d0:	b1e3      	cbz	r3, 800b60c <_strtod_l+0xc4>
 800b5d2:	4652      	mov	r2, sl
 800b5d4:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b5d8:	ec43 2b10 	vmov	d0, r2, r3
 800b5dc:	b021      	add	sp, #132	; 0x84
 800b5de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5e2:	2a2b      	cmp	r2, #43	; 0x2b
 800b5e4:	d015      	beq.n	800b612 <_strtod_l+0xca>
 800b5e6:	2a2d      	cmp	r2, #45	; 0x2d
 800b5e8:	d004      	beq.n	800b5f4 <_strtod_l+0xac>
 800b5ea:	2a20      	cmp	r2, #32
 800b5ec:	d1ca      	bne.n	800b584 <_strtod_l+0x3c>
 800b5ee:	3301      	adds	r3, #1
 800b5f0:	931b      	str	r3, [sp, #108]	; 0x6c
 800b5f2:	e7bf      	b.n	800b574 <_strtod_l+0x2c>
 800b5f4:	2201      	movs	r2, #1
 800b5f6:	920d      	str	r2, [sp, #52]	; 0x34
 800b5f8:	1c5a      	adds	r2, r3, #1
 800b5fa:	921b      	str	r2, [sp, #108]	; 0x6c
 800b5fc:	785b      	ldrb	r3, [r3, #1]
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d1c2      	bne.n	800b588 <_strtod_l+0x40>
 800b602:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b604:	961b      	str	r6, [sp, #108]	; 0x6c
 800b606:	2b00      	cmp	r3, #0
 800b608:	f040 8579 	bne.w	800c0fe <_strtod_l+0xbb6>
 800b60c:	4652      	mov	r2, sl
 800b60e:	465b      	mov	r3, fp
 800b610:	e7e2      	b.n	800b5d8 <_strtod_l+0x90>
 800b612:	2200      	movs	r2, #0
 800b614:	e7ef      	b.n	800b5f6 <_strtod_l+0xae>
 800b616:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800b618:	b13a      	cbz	r2, 800b62a <_strtod_l+0xe2>
 800b61a:	2135      	movs	r1, #53	; 0x35
 800b61c:	a81e      	add	r0, sp, #120	; 0x78
 800b61e:	f003 ff7d 	bl	800f51c <__copybits>
 800b622:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b624:	4648      	mov	r0, r9
 800b626:	f003 fbe7 	bl	800edf8 <_Bfree>
 800b62a:	3c01      	subs	r4, #1
 800b62c:	2c04      	cmp	r4, #4
 800b62e:	d806      	bhi.n	800b63e <_strtod_l+0xf6>
 800b630:	e8df f004 	tbb	[pc, r4]
 800b634:	1714030a 	.word	0x1714030a
 800b638:	0a          	.byte	0x0a
 800b639:	00          	.byte	0x00
 800b63a:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 800b63e:	0730      	lsls	r0, r6, #28
 800b640:	d5c1      	bpl.n	800b5c6 <_strtod_l+0x7e>
 800b642:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800b646:	e7be      	b.n	800b5c6 <_strtod_l+0x7e>
 800b648:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 800b64c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800b64e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800b652:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800b656:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800b65a:	e7f0      	b.n	800b63e <_strtod_l+0xf6>
 800b65c:	f8df b170 	ldr.w	fp, [pc, #368]	; 800b7d0 <_strtod_l+0x288>
 800b660:	e7ed      	b.n	800b63e <_strtod_l+0xf6>
 800b662:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800b666:	f04f 3aff 	mov.w	sl, #4294967295
 800b66a:	e7e8      	b.n	800b63e <_strtod_l+0xf6>
 800b66c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b66e:	1c5a      	adds	r2, r3, #1
 800b670:	921b      	str	r2, [sp, #108]	; 0x6c
 800b672:	785b      	ldrb	r3, [r3, #1]
 800b674:	2b30      	cmp	r3, #48	; 0x30
 800b676:	d0f9      	beq.n	800b66c <_strtod_l+0x124>
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d0a4      	beq.n	800b5c6 <_strtod_l+0x7e>
 800b67c:	2301      	movs	r3, #1
 800b67e:	2500      	movs	r5, #0
 800b680:	9306      	str	r3, [sp, #24]
 800b682:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b684:	9308      	str	r3, [sp, #32]
 800b686:	9507      	str	r5, [sp, #28]
 800b688:	9505      	str	r5, [sp, #20]
 800b68a:	220a      	movs	r2, #10
 800b68c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800b68e:	7807      	ldrb	r7, [r0, #0]
 800b690:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800b694:	b2d9      	uxtb	r1, r3
 800b696:	2909      	cmp	r1, #9
 800b698:	d929      	bls.n	800b6ee <_strtod_l+0x1a6>
 800b69a:	4622      	mov	r2, r4
 800b69c:	f8d8 1000 	ldr.w	r1, [r8]
 800b6a0:	f004 f956 	bl	800f950 <strncmp>
 800b6a4:	2800      	cmp	r0, #0
 800b6a6:	d031      	beq.n	800b70c <_strtod_l+0x1c4>
 800b6a8:	2000      	movs	r0, #0
 800b6aa:	9c05      	ldr	r4, [sp, #20]
 800b6ac:	9004      	str	r0, [sp, #16]
 800b6ae:	463b      	mov	r3, r7
 800b6b0:	4602      	mov	r2, r0
 800b6b2:	2b65      	cmp	r3, #101	; 0x65
 800b6b4:	d001      	beq.n	800b6ba <_strtod_l+0x172>
 800b6b6:	2b45      	cmp	r3, #69	; 0x45
 800b6b8:	d114      	bne.n	800b6e4 <_strtod_l+0x19c>
 800b6ba:	b924      	cbnz	r4, 800b6c6 <_strtod_l+0x17e>
 800b6bc:	b910      	cbnz	r0, 800b6c4 <_strtod_l+0x17c>
 800b6be:	9b06      	ldr	r3, [sp, #24]
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d09e      	beq.n	800b602 <_strtod_l+0xba>
 800b6c4:	2400      	movs	r4, #0
 800b6c6:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800b6c8:	1c73      	adds	r3, r6, #1
 800b6ca:	931b      	str	r3, [sp, #108]	; 0x6c
 800b6cc:	7873      	ldrb	r3, [r6, #1]
 800b6ce:	2b2b      	cmp	r3, #43	; 0x2b
 800b6d0:	d078      	beq.n	800b7c4 <_strtod_l+0x27c>
 800b6d2:	2b2d      	cmp	r3, #45	; 0x2d
 800b6d4:	d070      	beq.n	800b7b8 <_strtod_l+0x270>
 800b6d6:	f04f 0c00 	mov.w	ip, #0
 800b6da:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800b6de:	2f09      	cmp	r7, #9
 800b6e0:	d97c      	bls.n	800b7dc <_strtod_l+0x294>
 800b6e2:	961b      	str	r6, [sp, #108]	; 0x6c
 800b6e4:	f04f 0e00 	mov.w	lr, #0
 800b6e8:	e09a      	b.n	800b820 <_strtod_l+0x2d8>
 800b6ea:	2300      	movs	r3, #0
 800b6ec:	e7c7      	b.n	800b67e <_strtod_l+0x136>
 800b6ee:	9905      	ldr	r1, [sp, #20]
 800b6f0:	2908      	cmp	r1, #8
 800b6f2:	bfdd      	ittte	le
 800b6f4:	9907      	ldrle	r1, [sp, #28]
 800b6f6:	fb02 3301 	mlale	r3, r2, r1, r3
 800b6fa:	9307      	strle	r3, [sp, #28]
 800b6fc:	fb02 3505 	mlagt	r5, r2, r5, r3
 800b700:	9b05      	ldr	r3, [sp, #20]
 800b702:	3001      	adds	r0, #1
 800b704:	3301      	adds	r3, #1
 800b706:	9305      	str	r3, [sp, #20]
 800b708:	901b      	str	r0, [sp, #108]	; 0x6c
 800b70a:	e7bf      	b.n	800b68c <_strtod_l+0x144>
 800b70c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b70e:	191a      	adds	r2, r3, r4
 800b710:	921b      	str	r2, [sp, #108]	; 0x6c
 800b712:	9a05      	ldr	r2, [sp, #20]
 800b714:	5d1b      	ldrb	r3, [r3, r4]
 800b716:	2a00      	cmp	r2, #0
 800b718:	d037      	beq.n	800b78a <_strtod_l+0x242>
 800b71a:	9c05      	ldr	r4, [sp, #20]
 800b71c:	4602      	mov	r2, r0
 800b71e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800b722:	2909      	cmp	r1, #9
 800b724:	d913      	bls.n	800b74e <_strtod_l+0x206>
 800b726:	2101      	movs	r1, #1
 800b728:	9104      	str	r1, [sp, #16]
 800b72a:	e7c2      	b.n	800b6b2 <_strtod_l+0x16a>
 800b72c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b72e:	1c5a      	adds	r2, r3, #1
 800b730:	921b      	str	r2, [sp, #108]	; 0x6c
 800b732:	785b      	ldrb	r3, [r3, #1]
 800b734:	3001      	adds	r0, #1
 800b736:	2b30      	cmp	r3, #48	; 0x30
 800b738:	d0f8      	beq.n	800b72c <_strtod_l+0x1e4>
 800b73a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800b73e:	2a08      	cmp	r2, #8
 800b740:	f200 84e4 	bhi.w	800c10c <_strtod_l+0xbc4>
 800b744:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800b746:	9208      	str	r2, [sp, #32]
 800b748:	4602      	mov	r2, r0
 800b74a:	2000      	movs	r0, #0
 800b74c:	4604      	mov	r4, r0
 800b74e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800b752:	f100 0101 	add.w	r1, r0, #1
 800b756:	d012      	beq.n	800b77e <_strtod_l+0x236>
 800b758:	440a      	add	r2, r1
 800b75a:	eb00 0c04 	add.w	ip, r0, r4
 800b75e:	4621      	mov	r1, r4
 800b760:	270a      	movs	r7, #10
 800b762:	458c      	cmp	ip, r1
 800b764:	d113      	bne.n	800b78e <_strtod_l+0x246>
 800b766:	1821      	adds	r1, r4, r0
 800b768:	2908      	cmp	r1, #8
 800b76a:	f104 0401 	add.w	r4, r4, #1
 800b76e:	4404      	add	r4, r0
 800b770:	dc19      	bgt.n	800b7a6 <_strtod_l+0x25e>
 800b772:	9b07      	ldr	r3, [sp, #28]
 800b774:	210a      	movs	r1, #10
 800b776:	fb01 e303 	mla	r3, r1, r3, lr
 800b77a:	9307      	str	r3, [sp, #28]
 800b77c:	2100      	movs	r1, #0
 800b77e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b780:	1c58      	adds	r0, r3, #1
 800b782:	901b      	str	r0, [sp, #108]	; 0x6c
 800b784:	785b      	ldrb	r3, [r3, #1]
 800b786:	4608      	mov	r0, r1
 800b788:	e7c9      	b.n	800b71e <_strtod_l+0x1d6>
 800b78a:	9805      	ldr	r0, [sp, #20]
 800b78c:	e7d3      	b.n	800b736 <_strtod_l+0x1ee>
 800b78e:	2908      	cmp	r1, #8
 800b790:	f101 0101 	add.w	r1, r1, #1
 800b794:	dc03      	bgt.n	800b79e <_strtod_l+0x256>
 800b796:	9b07      	ldr	r3, [sp, #28]
 800b798:	437b      	muls	r3, r7
 800b79a:	9307      	str	r3, [sp, #28]
 800b79c:	e7e1      	b.n	800b762 <_strtod_l+0x21a>
 800b79e:	2910      	cmp	r1, #16
 800b7a0:	bfd8      	it	le
 800b7a2:	437d      	mulle	r5, r7
 800b7a4:	e7dd      	b.n	800b762 <_strtod_l+0x21a>
 800b7a6:	2c10      	cmp	r4, #16
 800b7a8:	bfdc      	itt	le
 800b7aa:	210a      	movle	r1, #10
 800b7ac:	fb01 e505 	mlale	r5, r1, r5, lr
 800b7b0:	e7e4      	b.n	800b77c <_strtod_l+0x234>
 800b7b2:	2301      	movs	r3, #1
 800b7b4:	9304      	str	r3, [sp, #16]
 800b7b6:	e781      	b.n	800b6bc <_strtod_l+0x174>
 800b7b8:	f04f 0c01 	mov.w	ip, #1
 800b7bc:	1cb3      	adds	r3, r6, #2
 800b7be:	931b      	str	r3, [sp, #108]	; 0x6c
 800b7c0:	78b3      	ldrb	r3, [r6, #2]
 800b7c2:	e78a      	b.n	800b6da <_strtod_l+0x192>
 800b7c4:	f04f 0c00 	mov.w	ip, #0
 800b7c8:	e7f8      	b.n	800b7bc <_strtod_l+0x274>
 800b7ca:	bf00      	nop
 800b7cc:	080102e0 	.word	0x080102e0
 800b7d0:	7ff00000 	.word	0x7ff00000
 800b7d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b7d6:	1c5f      	adds	r7, r3, #1
 800b7d8:	971b      	str	r7, [sp, #108]	; 0x6c
 800b7da:	785b      	ldrb	r3, [r3, #1]
 800b7dc:	2b30      	cmp	r3, #48	; 0x30
 800b7de:	d0f9      	beq.n	800b7d4 <_strtod_l+0x28c>
 800b7e0:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800b7e4:	2f08      	cmp	r7, #8
 800b7e6:	f63f af7d 	bhi.w	800b6e4 <_strtod_l+0x19c>
 800b7ea:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800b7ee:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b7f0:	930a      	str	r3, [sp, #40]	; 0x28
 800b7f2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b7f4:	1c5f      	adds	r7, r3, #1
 800b7f6:	971b      	str	r7, [sp, #108]	; 0x6c
 800b7f8:	785b      	ldrb	r3, [r3, #1]
 800b7fa:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800b7fe:	f1b8 0f09 	cmp.w	r8, #9
 800b802:	d937      	bls.n	800b874 <_strtod_l+0x32c>
 800b804:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b806:	1a7f      	subs	r7, r7, r1
 800b808:	2f08      	cmp	r7, #8
 800b80a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800b80e:	dc37      	bgt.n	800b880 <_strtod_l+0x338>
 800b810:	45be      	cmp	lr, r7
 800b812:	bfa8      	it	ge
 800b814:	46be      	movge	lr, r7
 800b816:	f1bc 0f00 	cmp.w	ip, #0
 800b81a:	d001      	beq.n	800b820 <_strtod_l+0x2d8>
 800b81c:	f1ce 0e00 	rsb	lr, lr, #0
 800b820:	2c00      	cmp	r4, #0
 800b822:	d151      	bne.n	800b8c8 <_strtod_l+0x380>
 800b824:	2800      	cmp	r0, #0
 800b826:	f47f aece 	bne.w	800b5c6 <_strtod_l+0x7e>
 800b82a:	9a06      	ldr	r2, [sp, #24]
 800b82c:	2a00      	cmp	r2, #0
 800b82e:	f47f aeca 	bne.w	800b5c6 <_strtod_l+0x7e>
 800b832:	9a04      	ldr	r2, [sp, #16]
 800b834:	2a00      	cmp	r2, #0
 800b836:	f47f aee4 	bne.w	800b602 <_strtod_l+0xba>
 800b83a:	2b4e      	cmp	r3, #78	; 0x4e
 800b83c:	d027      	beq.n	800b88e <_strtod_l+0x346>
 800b83e:	dc21      	bgt.n	800b884 <_strtod_l+0x33c>
 800b840:	2b49      	cmp	r3, #73	; 0x49
 800b842:	f47f aede 	bne.w	800b602 <_strtod_l+0xba>
 800b846:	49a0      	ldr	r1, [pc, #640]	; (800bac8 <_strtod_l+0x580>)
 800b848:	a81b      	add	r0, sp, #108	; 0x6c
 800b84a:	f003 f9dd 	bl	800ec08 <__match>
 800b84e:	2800      	cmp	r0, #0
 800b850:	f43f aed7 	beq.w	800b602 <_strtod_l+0xba>
 800b854:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b856:	499d      	ldr	r1, [pc, #628]	; (800bacc <_strtod_l+0x584>)
 800b858:	3b01      	subs	r3, #1
 800b85a:	a81b      	add	r0, sp, #108	; 0x6c
 800b85c:	931b      	str	r3, [sp, #108]	; 0x6c
 800b85e:	f003 f9d3 	bl	800ec08 <__match>
 800b862:	b910      	cbnz	r0, 800b86a <_strtod_l+0x322>
 800b864:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b866:	3301      	adds	r3, #1
 800b868:	931b      	str	r3, [sp, #108]	; 0x6c
 800b86a:	f8df b274 	ldr.w	fp, [pc, #628]	; 800bae0 <_strtod_l+0x598>
 800b86e:	f04f 0a00 	mov.w	sl, #0
 800b872:	e6a8      	b.n	800b5c6 <_strtod_l+0x7e>
 800b874:	210a      	movs	r1, #10
 800b876:	fb01 3e0e 	mla	lr, r1, lr, r3
 800b87a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800b87e:	e7b8      	b.n	800b7f2 <_strtod_l+0x2aa>
 800b880:	46be      	mov	lr, r7
 800b882:	e7c8      	b.n	800b816 <_strtod_l+0x2ce>
 800b884:	2b69      	cmp	r3, #105	; 0x69
 800b886:	d0de      	beq.n	800b846 <_strtod_l+0x2fe>
 800b888:	2b6e      	cmp	r3, #110	; 0x6e
 800b88a:	f47f aeba 	bne.w	800b602 <_strtod_l+0xba>
 800b88e:	4990      	ldr	r1, [pc, #576]	; (800bad0 <_strtod_l+0x588>)
 800b890:	a81b      	add	r0, sp, #108	; 0x6c
 800b892:	f003 f9b9 	bl	800ec08 <__match>
 800b896:	2800      	cmp	r0, #0
 800b898:	f43f aeb3 	beq.w	800b602 <_strtod_l+0xba>
 800b89c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b89e:	781b      	ldrb	r3, [r3, #0]
 800b8a0:	2b28      	cmp	r3, #40	; 0x28
 800b8a2:	d10e      	bne.n	800b8c2 <_strtod_l+0x37a>
 800b8a4:	aa1e      	add	r2, sp, #120	; 0x78
 800b8a6:	498b      	ldr	r1, [pc, #556]	; (800bad4 <_strtod_l+0x58c>)
 800b8a8:	a81b      	add	r0, sp, #108	; 0x6c
 800b8aa:	f003 f9c1 	bl	800ec30 <__hexnan>
 800b8ae:	2805      	cmp	r0, #5
 800b8b0:	d107      	bne.n	800b8c2 <_strtod_l+0x37a>
 800b8b2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b8b4:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 800b8b8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800b8bc:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800b8c0:	e681      	b.n	800b5c6 <_strtod_l+0x7e>
 800b8c2:	f8df b224 	ldr.w	fp, [pc, #548]	; 800bae8 <_strtod_l+0x5a0>
 800b8c6:	e7d2      	b.n	800b86e <_strtod_l+0x326>
 800b8c8:	ebae 0302 	sub.w	r3, lr, r2
 800b8cc:	9306      	str	r3, [sp, #24]
 800b8ce:	9b05      	ldr	r3, [sp, #20]
 800b8d0:	9807      	ldr	r0, [sp, #28]
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	bf08      	it	eq
 800b8d6:	4623      	moveq	r3, r4
 800b8d8:	2c10      	cmp	r4, #16
 800b8da:	9305      	str	r3, [sp, #20]
 800b8dc:	46a0      	mov	r8, r4
 800b8de:	bfa8      	it	ge
 800b8e0:	f04f 0810 	movge.w	r8, #16
 800b8e4:	f7f4 fe1e 	bl	8000524 <__aeabi_ui2d>
 800b8e8:	2c09      	cmp	r4, #9
 800b8ea:	4682      	mov	sl, r0
 800b8ec:	468b      	mov	fp, r1
 800b8ee:	dc13      	bgt.n	800b918 <_strtod_l+0x3d0>
 800b8f0:	9b06      	ldr	r3, [sp, #24]
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	f43f ae67 	beq.w	800b5c6 <_strtod_l+0x7e>
 800b8f8:	9b06      	ldr	r3, [sp, #24]
 800b8fa:	dd7a      	ble.n	800b9f2 <_strtod_l+0x4aa>
 800b8fc:	2b16      	cmp	r3, #22
 800b8fe:	dc61      	bgt.n	800b9c4 <_strtod_l+0x47c>
 800b900:	4a75      	ldr	r2, [pc, #468]	; (800bad8 <_strtod_l+0x590>)
 800b902:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800b906:	e9de 0100 	ldrd	r0, r1, [lr]
 800b90a:	4652      	mov	r2, sl
 800b90c:	465b      	mov	r3, fp
 800b90e:	f7f4 fe83 	bl	8000618 <__aeabi_dmul>
 800b912:	4682      	mov	sl, r0
 800b914:	468b      	mov	fp, r1
 800b916:	e656      	b.n	800b5c6 <_strtod_l+0x7e>
 800b918:	4b6f      	ldr	r3, [pc, #444]	; (800bad8 <_strtod_l+0x590>)
 800b91a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800b91e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800b922:	f7f4 fe79 	bl	8000618 <__aeabi_dmul>
 800b926:	4606      	mov	r6, r0
 800b928:	4628      	mov	r0, r5
 800b92a:	460f      	mov	r7, r1
 800b92c:	f7f4 fdfa 	bl	8000524 <__aeabi_ui2d>
 800b930:	4602      	mov	r2, r0
 800b932:	460b      	mov	r3, r1
 800b934:	4630      	mov	r0, r6
 800b936:	4639      	mov	r1, r7
 800b938:	f7f4 fcb8 	bl	80002ac <__adddf3>
 800b93c:	2c0f      	cmp	r4, #15
 800b93e:	4682      	mov	sl, r0
 800b940:	468b      	mov	fp, r1
 800b942:	ddd5      	ble.n	800b8f0 <_strtod_l+0x3a8>
 800b944:	9b06      	ldr	r3, [sp, #24]
 800b946:	eba4 0808 	sub.w	r8, r4, r8
 800b94a:	4498      	add	r8, r3
 800b94c:	f1b8 0f00 	cmp.w	r8, #0
 800b950:	f340 8096 	ble.w	800ba80 <_strtod_l+0x538>
 800b954:	f018 030f 	ands.w	r3, r8, #15
 800b958:	d00a      	beq.n	800b970 <_strtod_l+0x428>
 800b95a:	495f      	ldr	r1, [pc, #380]	; (800bad8 <_strtod_l+0x590>)
 800b95c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b960:	4652      	mov	r2, sl
 800b962:	465b      	mov	r3, fp
 800b964:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b968:	f7f4 fe56 	bl	8000618 <__aeabi_dmul>
 800b96c:	4682      	mov	sl, r0
 800b96e:	468b      	mov	fp, r1
 800b970:	f038 080f 	bics.w	r8, r8, #15
 800b974:	d073      	beq.n	800ba5e <_strtod_l+0x516>
 800b976:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800b97a:	dd47      	ble.n	800ba0c <_strtod_l+0x4c4>
 800b97c:	2400      	movs	r4, #0
 800b97e:	46a0      	mov	r8, r4
 800b980:	9407      	str	r4, [sp, #28]
 800b982:	9405      	str	r4, [sp, #20]
 800b984:	2322      	movs	r3, #34	; 0x22
 800b986:	f8df b158 	ldr.w	fp, [pc, #344]	; 800bae0 <_strtod_l+0x598>
 800b98a:	f8c9 3000 	str.w	r3, [r9]
 800b98e:	f04f 0a00 	mov.w	sl, #0
 800b992:	9b07      	ldr	r3, [sp, #28]
 800b994:	2b00      	cmp	r3, #0
 800b996:	f43f ae16 	beq.w	800b5c6 <_strtod_l+0x7e>
 800b99a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b99c:	4648      	mov	r0, r9
 800b99e:	f003 fa2b 	bl	800edf8 <_Bfree>
 800b9a2:	9905      	ldr	r1, [sp, #20]
 800b9a4:	4648      	mov	r0, r9
 800b9a6:	f003 fa27 	bl	800edf8 <_Bfree>
 800b9aa:	4641      	mov	r1, r8
 800b9ac:	4648      	mov	r0, r9
 800b9ae:	f003 fa23 	bl	800edf8 <_Bfree>
 800b9b2:	9907      	ldr	r1, [sp, #28]
 800b9b4:	4648      	mov	r0, r9
 800b9b6:	f003 fa1f 	bl	800edf8 <_Bfree>
 800b9ba:	4621      	mov	r1, r4
 800b9bc:	4648      	mov	r0, r9
 800b9be:	f003 fa1b 	bl	800edf8 <_Bfree>
 800b9c2:	e600      	b.n	800b5c6 <_strtod_l+0x7e>
 800b9c4:	9a06      	ldr	r2, [sp, #24]
 800b9c6:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800b9ca:	4293      	cmp	r3, r2
 800b9cc:	dbba      	blt.n	800b944 <_strtod_l+0x3fc>
 800b9ce:	4d42      	ldr	r5, [pc, #264]	; (800bad8 <_strtod_l+0x590>)
 800b9d0:	f1c4 040f 	rsb	r4, r4, #15
 800b9d4:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800b9d8:	4652      	mov	r2, sl
 800b9da:	465b      	mov	r3, fp
 800b9dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b9e0:	f7f4 fe1a 	bl	8000618 <__aeabi_dmul>
 800b9e4:	9b06      	ldr	r3, [sp, #24]
 800b9e6:	1b1c      	subs	r4, r3, r4
 800b9e8:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800b9ec:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b9f0:	e78d      	b.n	800b90e <_strtod_l+0x3c6>
 800b9f2:	f113 0f16 	cmn.w	r3, #22
 800b9f6:	dba5      	blt.n	800b944 <_strtod_l+0x3fc>
 800b9f8:	4a37      	ldr	r2, [pc, #220]	; (800bad8 <_strtod_l+0x590>)
 800b9fa:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800b9fe:	e9d2 2300 	ldrd	r2, r3, [r2]
 800ba02:	4650      	mov	r0, sl
 800ba04:	4659      	mov	r1, fp
 800ba06:	f7f4 ff31 	bl	800086c <__aeabi_ddiv>
 800ba0a:	e782      	b.n	800b912 <_strtod_l+0x3ca>
 800ba0c:	2300      	movs	r3, #0
 800ba0e:	4e33      	ldr	r6, [pc, #204]	; (800badc <_strtod_l+0x594>)
 800ba10:	ea4f 1828 	mov.w	r8, r8, asr #4
 800ba14:	4650      	mov	r0, sl
 800ba16:	4659      	mov	r1, fp
 800ba18:	461d      	mov	r5, r3
 800ba1a:	f1b8 0f01 	cmp.w	r8, #1
 800ba1e:	dc21      	bgt.n	800ba64 <_strtod_l+0x51c>
 800ba20:	b10b      	cbz	r3, 800ba26 <_strtod_l+0x4de>
 800ba22:	4682      	mov	sl, r0
 800ba24:	468b      	mov	fp, r1
 800ba26:	4b2d      	ldr	r3, [pc, #180]	; (800badc <_strtod_l+0x594>)
 800ba28:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800ba2c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800ba30:	4652      	mov	r2, sl
 800ba32:	465b      	mov	r3, fp
 800ba34:	e9d5 0100 	ldrd	r0, r1, [r5]
 800ba38:	f7f4 fdee 	bl	8000618 <__aeabi_dmul>
 800ba3c:	4b28      	ldr	r3, [pc, #160]	; (800bae0 <_strtod_l+0x598>)
 800ba3e:	460a      	mov	r2, r1
 800ba40:	400b      	ands	r3, r1
 800ba42:	4928      	ldr	r1, [pc, #160]	; (800bae4 <_strtod_l+0x59c>)
 800ba44:	428b      	cmp	r3, r1
 800ba46:	4682      	mov	sl, r0
 800ba48:	d898      	bhi.n	800b97c <_strtod_l+0x434>
 800ba4a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800ba4e:	428b      	cmp	r3, r1
 800ba50:	bf86      	itte	hi
 800ba52:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800baec <_strtod_l+0x5a4>
 800ba56:	f04f 3aff 	movhi.w	sl, #4294967295
 800ba5a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800ba5e:	2300      	movs	r3, #0
 800ba60:	9304      	str	r3, [sp, #16]
 800ba62:	e077      	b.n	800bb54 <_strtod_l+0x60c>
 800ba64:	f018 0f01 	tst.w	r8, #1
 800ba68:	d006      	beq.n	800ba78 <_strtod_l+0x530>
 800ba6a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800ba6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba72:	f7f4 fdd1 	bl	8000618 <__aeabi_dmul>
 800ba76:	2301      	movs	r3, #1
 800ba78:	3501      	adds	r5, #1
 800ba7a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800ba7e:	e7cc      	b.n	800ba1a <_strtod_l+0x4d2>
 800ba80:	d0ed      	beq.n	800ba5e <_strtod_l+0x516>
 800ba82:	f1c8 0800 	rsb	r8, r8, #0
 800ba86:	f018 020f 	ands.w	r2, r8, #15
 800ba8a:	d00a      	beq.n	800baa2 <_strtod_l+0x55a>
 800ba8c:	4b12      	ldr	r3, [pc, #72]	; (800bad8 <_strtod_l+0x590>)
 800ba8e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ba92:	4650      	mov	r0, sl
 800ba94:	4659      	mov	r1, fp
 800ba96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba9a:	f7f4 fee7 	bl	800086c <__aeabi_ddiv>
 800ba9e:	4682      	mov	sl, r0
 800baa0:	468b      	mov	fp, r1
 800baa2:	ea5f 1828 	movs.w	r8, r8, asr #4
 800baa6:	d0da      	beq.n	800ba5e <_strtod_l+0x516>
 800baa8:	f1b8 0f1f 	cmp.w	r8, #31
 800baac:	dd20      	ble.n	800baf0 <_strtod_l+0x5a8>
 800baae:	2400      	movs	r4, #0
 800bab0:	46a0      	mov	r8, r4
 800bab2:	9407      	str	r4, [sp, #28]
 800bab4:	9405      	str	r4, [sp, #20]
 800bab6:	2322      	movs	r3, #34	; 0x22
 800bab8:	f04f 0a00 	mov.w	sl, #0
 800babc:	f04f 0b00 	mov.w	fp, #0
 800bac0:	f8c9 3000 	str.w	r3, [r9]
 800bac4:	e765      	b.n	800b992 <_strtod_l+0x44a>
 800bac6:	bf00      	nop
 800bac8:	08010335 	.word	0x08010335
 800bacc:	08010387 	.word	0x08010387
 800bad0:	0801033d 	.word	0x0801033d
 800bad4:	080102f4 	.word	0x080102f4
 800bad8:	080103c8 	.word	0x080103c8
 800badc:	080103a0 	.word	0x080103a0
 800bae0:	7ff00000 	.word	0x7ff00000
 800bae4:	7ca00000 	.word	0x7ca00000
 800bae8:	fff80000 	.word	0xfff80000
 800baec:	7fefffff 	.word	0x7fefffff
 800baf0:	f018 0310 	ands.w	r3, r8, #16
 800baf4:	bf18      	it	ne
 800baf6:	236a      	movne	r3, #106	; 0x6a
 800baf8:	4da0      	ldr	r5, [pc, #640]	; (800bd7c <_strtod_l+0x834>)
 800bafa:	9304      	str	r3, [sp, #16]
 800bafc:	4650      	mov	r0, sl
 800bafe:	4659      	mov	r1, fp
 800bb00:	2300      	movs	r3, #0
 800bb02:	f1b8 0f00 	cmp.w	r8, #0
 800bb06:	f300 810a 	bgt.w	800bd1e <_strtod_l+0x7d6>
 800bb0a:	b10b      	cbz	r3, 800bb10 <_strtod_l+0x5c8>
 800bb0c:	4682      	mov	sl, r0
 800bb0e:	468b      	mov	fp, r1
 800bb10:	9b04      	ldr	r3, [sp, #16]
 800bb12:	b1bb      	cbz	r3, 800bb44 <_strtod_l+0x5fc>
 800bb14:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800bb18:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	4659      	mov	r1, fp
 800bb20:	dd10      	ble.n	800bb44 <_strtod_l+0x5fc>
 800bb22:	2b1f      	cmp	r3, #31
 800bb24:	f340 8107 	ble.w	800bd36 <_strtod_l+0x7ee>
 800bb28:	2b34      	cmp	r3, #52	; 0x34
 800bb2a:	bfde      	ittt	le
 800bb2c:	3b20      	suble	r3, #32
 800bb2e:	f04f 32ff 	movle.w	r2, #4294967295
 800bb32:	fa02 f303 	lslle.w	r3, r2, r3
 800bb36:	f04f 0a00 	mov.w	sl, #0
 800bb3a:	bfcc      	ite	gt
 800bb3c:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800bb40:	ea03 0b01 	andle.w	fp, r3, r1
 800bb44:	2200      	movs	r2, #0
 800bb46:	2300      	movs	r3, #0
 800bb48:	4650      	mov	r0, sl
 800bb4a:	4659      	mov	r1, fp
 800bb4c:	f7f4 ffcc 	bl	8000ae8 <__aeabi_dcmpeq>
 800bb50:	2800      	cmp	r0, #0
 800bb52:	d1ac      	bne.n	800baae <_strtod_l+0x566>
 800bb54:	9b07      	ldr	r3, [sp, #28]
 800bb56:	9300      	str	r3, [sp, #0]
 800bb58:	9a05      	ldr	r2, [sp, #20]
 800bb5a:	9908      	ldr	r1, [sp, #32]
 800bb5c:	4623      	mov	r3, r4
 800bb5e:	4648      	mov	r0, r9
 800bb60:	f003 f98e 	bl	800ee80 <__s2b>
 800bb64:	9007      	str	r0, [sp, #28]
 800bb66:	2800      	cmp	r0, #0
 800bb68:	f43f af08 	beq.w	800b97c <_strtod_l+0x434>
 800bb6c:	9a06      	ldr	r2, [sp, #24]
 800bb6e:	9b06      	ldr	r3, [sp, #24]
 800bb70:	2a00      	cmp	r2, #0
 800bb72:	f1c3 0300 	rsb	r3, r3, #0
 800bb76:	bfa8      	it	ge
 800bb78:	2300      	movge	r3, #0
 800bb7a:	930e      	str	r3, [sp, #56]	; 0x38
 800bb7c:	2400      	movs	r4, #0
 800bb7e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800bb82:	9316      	str	r3, [sp, #88]	; 0x58
 800bb84:	46a0      	mov	r8, r4
 800bb86:	9b07      	ldr	r3, [sp, #28]
 800bb88:	4648      	mov	r0, r9
 800bb8a:	6859      	ldr	r1, [r3, #4]
 800bb8c:	f003 f90f 	bl	800edae <_Balloc>
 800bb90:	9005      	str	r0, [sp, #20]
 800bb92:	2800      	cmp	r0, #0
 800bb94:	f43f aef6 	beq.w	800b984 <_strtod_l+0x43c>
 800bb98:	9b07      	ldr	r3, [sp, #28]
 800bb9a:	691a      	ldr	r2, [r3, #16]
 800bb9c:	3202      	adds	r2, #2
 800bb9e:	f103 010c 	add.w	r1, r3, #12
 800bba2:	0092      	lsls	r2, r2, #2
 800bba4:	300c      	adds	r0, #12
 800bba6:	f003 f8f7 	bl	800ed98 <memcpy>
 800bbaa:	aa1e      	add	r2, sp, #120	; 0x78
 800bbac:	a91d      	add	r1, sp, #116	; 0x74
 800bbae:	ec4b ab10 	vmov	d0, sl, fp
 800bbb2:	4648      	mov	r0, r9
 800bbb4:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800bbb8:	f003 fc10 	bl	800f3dc <__d2b>
 800bbbc:	901c      	str	r0, [sp, #112]	; 0x70
 800bbbe:	2800      	cmp	r0, #0
 800bbc0:	f43f aee0 	beq.w	800b984 <_strtod_l+0x43c>
 800bbc4:	2101      	movs	r1, #1
 800bbc6:	4648      	mov	r0, r9
 800bbc8:	f003 f9e6 	bl	800ef98 <__i2b>
 800bbcc:	4680      	mov	r8, r0
 800bbce:	2800      	cmp	r0, #0
 800bbd0:	f43f aed8 	beq.w	800b984 <_strtod_l+0x43c>
 800bbd4:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800bbd6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800bbd8:	2e00      	cmp	r6, #0
 800bbda:	bfab      	itete	ge
 800bbdc:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800bbde:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800bbe0:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800bbe2:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 800bbe4:	bfac      	ite	ge
 800bbe6:	18f7      	addge	r7, r6, r3
 800bbe8:	1b9d      	sublt	r5, r3, r6
 800bbea:	9b04      	ldr	r3, [sp, #16]
 800bbec:	1af6      	subs	r6, r6, r3
 800bbee:	4416      	add	r6, r2
 800bbf0:	4b63      	ldr	r3, [pc, #396]	; (800bd80 <_strtod_l+0x838>)
 800bbf2:	3e01      	subs	r6, #1
 800bbf4:	429e      	cmp	r6, r3
 800bbf6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800bbfa:	f280 80af 	bge.w	800bd5c <_strtod_l+0x814>
 800bbfe:	1b9b      	subs	r3, r3, r6
 800bc00:	2b1f      	cmp	r3, #31
 800bc02:	eba2 0203 	sub.w	r2, r2, r3
 800bc06:	f04f 0101 	mov.w	r1, #1
 800bc0a:	f300 809b 	bgt.w	800bd44 <_strtod_l+0x7fc>
 800bc0e:	fa01 f303 	lsl.w	r3, r1, r3
 800bc12:	930f      	str	r3, [sp, #60]	; 0x3c
 800bc14:	2300      	movs	r3, #0
 800bc16:	930a      	str	r3, [sp, #40]	; 0x28
 800bc18:	18be      	adds	r6, r7, r2
 800bc1a:	9b04      	ldr	r3, [sp, #16]
 800bc1c:	42b7      	cmp	r7, r6
 800bc1e:	4415      	add	r5, r2
 800bc20:	441d      	add	r5, r3
 800bc22:	463b      	mov	r3, r7
 800bc24:	bfa8      	it	ge
 800bc26:	4633      	movge	r3, r6
 800bc28:	42ab      	cmp	r3, r5
 800bc2a:	bfa8      	it	ge
 800bc2c:	462b      	movge	r3, r5
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	bfc2      	ittt	gt
 800bc32:	1af6      	subgt	r6, r6, r3
 800bc34:	1aed      	subgt	r5, r5, r3
 800bc36:	1aff      	subgt	r7, r7, r3
 800bc38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bc3a:	b1bb      	cbz	r3, 800bc6c <_strtod_l+0x724>
 800bc3c:	4641      	mov	r1, r8
 800bc3e:	461a      	mov	r2, r3
 800bc40:	4648      	mov	r0, r9
 800bc42:	f003 fa49 	bl	800f0d8 <__pow5mult>
 800bc46:	4680      	mov	r8, r0
 800bc48:	2800      	cmp	r0, #0
 800bc4a:	f43f ae9b 	beq.w	800b984 <_strtod_l+0x43c>
 800bc4e:	4601      	mov	r1, r0
 800bc50:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800bc52:	4648      	mov	r0, r9
 800bc54:	f003 f9a9 	bl	800efaa <__multiply>
 800bc58:	900c      	str	r0, [sp, #48]	; 0x30
 800bc5a:	2800      	cmp	r0, #0
 800bc5c:	f43f ae92 	beq.w	800b984 <_strtod_l+0x43c>
 800bc60:	991c      	ldr	r1, [sp, #112]	; 0x70
 800bc62:	4648      	mov	r0, r9
 800bc64:	f003 f8c8 	bl	800edf8 <_Bfree>
 800bc68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bc6a:	931c      	str	r3, [sp, #112]	; 0x70
 800bc6c:	2e00      	cmp	r6, #0
 800bc6e:	dc7a      	bgt.n	800bd66 <_strtod_l+0x81e>
 800bc70:	9b06      	ldr	r3, [sp, #24]
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	dd08      	ble.n	800bc88 <_strtod_l+0x740>
 800bc76:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800bc78:	9905      	ldr	r1, [sp, #20]
 800bc7a:	4648      	mov	r0, r9
 800bc7c:	f003 fa2c 	bl	800f0d8 <__pow5mult>
 800bc80:	9005      	str	r0, [sp, #20]
 800bc82:	2800      	cmp	r0, #0
 800bc84:	f43f ae7e 	beq.w	800b984 <_strtod_l+0x43c>
 800bc88:	2d00      	cmp	r5, #0
 800bc8a:	dd08      	ble.n	800bc9e <_strtod_l+0x756>
 800bc8c:	462a      	mov	r2, r5
 800bc8e:	9905      	ldr	r1, [sp, #20]
 800bc90:	4648      	mov	r0, r9
 800bc92:	f003 fa61 	bl	800f158 <__lshift>
 800bc96:	9005      	str	r0, [sp, #20]
 800bc98:	2800      	cmp	r0, #0
 800bc9a:	f43f ae73 	beq.w	800b984 <_strtod_l+0x43c>
 800bc9e:	2f00      	cmp	r7, #0
 800bca0:	dd08      	ble.n	800bcb4 <_strtod_l+0x76c>
 800bca2:	4641      	mov	r1, r8
 800bca4:	463a      	mov	r2, r7
 800bca6:	4648      	mov	r0, r9
 800bca8:	f003 fa56 	bl	800f158 <__lshift>
 800bcac:	4680      	mov	r8, r0
 800bcae:	2800      	cmp	r0, #0
 800bcb0:	f43f ae68 	beq.w	800b984 <_strtod_l+0x43c>
 800bcb4:	9a05      	ldr	r2, [sp, #20]
 800bcb6:	991c      	ldr	r1, [sp, #112]	; 0x70
 800bcb8:	4648      	mov	r0, r9
 800bcba:	f003 fabb 	bl	800f234 <__mdiff>
 800bcbe:	4604      	mov	r4, r0
 800bcc0:	2800      	cmp	r0, #0
 800bcc2:	f43f ae5f 	beq.w	800b984 <_strtod_l+0x43c>
 800bcc6:	68c3      	ldr	r3, [r0, #12]
 800bcc8:	930c      	str	r3, [sp, #48]	; 0x30
 800bcca:	2300      	movs	r3, #0
 800bccc:	60c3      	str	r3, [r0, #12]
 800bcce:	4641      	mov	r1, r8
 800bcd0:	f003 fa96 	bl	800f200 <__mcmp>
 800bcd4:	2800      	cmp	r0, #0
 800bcd6:	da55      	bge.n	800bd84 <_strtod_l+0x83c>
 800bcd8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bcda:	b9e3      	cbnz	r3, 800bd16 <_strtod_l+0x7ce>
 800bcdc:	f1ba 0f00 	cmp.w	sl, #0
 800bce0:	d119      	bne.n	800bd16 <_strtod_l+0x7ce>
 800bce2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bce6:	b9b3      	cbnz	r3, 800bd16 <_strtod_l+0x7ce>
 800bce8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800bcec:	0d1b      	lsrs	r3, r3, #20
 800bcee:	051b      	lsls	r3, r3, #20
 800bcf0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800bcf4:	d90f      	bls.n	800bd16 <_strtod_l+0x7ce>
 800bcf6:	6963      	ldr	r3, [r4, #20]
 800bcf8:	b913      	cbnz	r3, 800bd00 <_strtod_l+0x7b8>
 800bcfa:	6923      	ldr	r3, [r4, #16]
 800bcfc:	2b01      	cmp	r3, #1
 800bcfe:	dd0a      	ble.n	800bd16 <_strtod_l+0x7ce>
 800bd00:	4621      	mov	r1, r4
 800bd02:	2201      	movs	r2, #1
 800bd04:	4648      	mov	r0, r9
 800bd06:	f003 fa27 	bl	800f158 <__lshift>
 800bd0a:	4641      	mov	r1, r8
 800bd0c:	4604      	mov	r4, r0
 800bd0e:	f003 fa77 	bl	800f200 <__mcmp>
 800bd12:	2800      	cmp	r0, #0
 800bd14:	dc67      	bgt.n	800bde6 <_strtod_l+0x89e>
 800bd16:	9b04      	ldr	r3, [sp, #16]
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d171      	bne.n	800be00 <_strtod_l+0x8b8>
 800bd1c:	e63d      	b.n	800b99a <_strtod_l+0x452>
 800bd1e:	f018 0f01 	tst.w	r8, #1
 800bd22:	d004      	beq.n	800bd2e <_strtod_l+0x7e6>
 800bd24:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bd28:	f7f4 fc76 	bl	8000618 <__aeabi_dmul>
 800bd2c:	2301      	movs	r3, #1
 800bd2e:	ea4f 0868 	mov.w	r8, r8, asr #1
 800bd32:	3508      	adds	r5, #8
 800bd34:	e6e5      	b.n	800bb02 <_strtod_l+0x5ba>
 800bd36:	f04f 32ff 	mov.w	r2, #4294967295
 800bd3a:	fa02 f303 	lsl.w	r3, r2, r3
 800bd3e:	ea03 0a0a 	and.w	sl, r3, sl
 800bd42:	e6ff      	b.n	800bb44 <_strtod_l+0x5fc>
 800bd44:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800bd48:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800bd4c:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800bd50:	36e2      	adds	r6, #226	; 0xe2
 800bd52:	fa01 f306 	lsl.w	r3, r1, r6
 800bd56:	930a      	str	r3, [sp, #40]	; 0x28
 800bd58:	910f      	str	r1, [sp, #60]	; 0x3c
 800bd5a:	e75d      	b.n	800bc18 <_strtod_l+0x6d0>
 800bd5c:	2300      	movs	r3, #0
 800bd5e:	930a      	str	r3, [sp, #40]	; 0x28
 800bd60:	2301      	movs	r3, #1
 800bd62:	930f      	str	r3, [sp, #60]	; 0x3c
 800bd64:	e758      	b.n	800bc18 <_strtod_l+0x6d0>
 800bd66:	4632      	mov	r2, r6
 800bd68:	991c      	ldr	r1, [sp, #112]	; 0x70
 800bd6a:	4648      	mov	r0, r9
 800bd6c:	f003 f9f4 	bl	800f158 <__lshift>
 800bd70:	901c      	str	r0, [sp, #112]	; 0x70
 800bd72:	2800      	cmp	r0, #0
 800bd74:	f47f af7c 	bne.w	800bc70 <_strtod_l+0x728>
 800bd78:	e604      	b.n	800b984 <_strtod_l+0x43c>
 800bd7a:	bf00      	nop
 800bd7c:	08010308 	.word	0x08010308
 800bd80:	fffffc02 	.word	0xfffffc02
 800bd84:	465d      	mov	r5, fp
 800bd86:	f040 8086 	bne.w	800be96 <_strtod_l+0x94e>
 800bd8a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bd8c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bd90:	b32a      	cbz	r2, 800bdde <_strtod_l+0x896>
 800bd92:	4aaf      	ldr	r2, [pc, #700]	; (800c050 <_strtod_l+0xb08>)
 800bd94:	4293      	cmp	r3, r2
 800bd96:	d153      	bne.n	800be40 <_strtod_l+0x8f8>
 800bd98:	9b04      	ldr	r3, [sp, #16]
 800bd9a:	4650      	mov	r0, sl
 800bd9c:	b1d3      	cbz	r3, 800bdd4 <_strtod_l+0x88c>
 800bd9e:	4aad      	ldr	r2, [pc, #692]	; (800c054 <_strtod_l+0xb0c>)
 800bda0:	402a      	ands	r2, r5
 800bda2:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800bda6:	f04f 31ff 	mov.w	r1, #4294967295
 800bdaa:	d816      	bhi.n	800bdda <_strtod_l+0x892>
 800bdac:	0d12      	lsrs	r2, r2, #20
 800bdae:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800bdb2:	fa01 f303 	lsl.w	r3, r1, r3
 800bdb6:	4298      	cmp	r0, r3
 800bdb8:	d142      	bne.n	800be40 <_strtod_l+0x8f8>
 800bdba:	4ba7      	ldr	r3, [pc, #668]	; (800c058 <_strtod_l+0xb10>)
 800bdbc:	429d      	cmp	r5, r3
 800bdbe:	d102      	bne.n	800bdc6 <_strtod_l+0x87e>
 800bdc0:	3001      	adds	r0, #1
 800bdc2:	f43f addf 	beq.w	800b984 <_strtod_l+0x43c>
 800bdc6:	4ba3      	ldr	r3, [pc, #652]	; (800c054 <_strtod_l+0xb0c>)
 800bdc8:	402b      	ands	r3, r5
 800bdca:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800bdce:	f04f 0a00 	mov.w	sl, #0
 800bdd2:	e7a0      	b.n	800bd16 <_strtod_l+0x7ce>
 800bdd4:	f04f 33ff 	mov.w	r3, #4294967295
 800bdd8:	e7ed      	b.n	800bdb6 <_strtod_l+0x86e>
 800bdda:	460b      	mov	r3, r1
 800bddc:	e7eb      	b.n	800bdb6 <_strtod_l+0x86e>
 800bdde:	bb7b      	cbnz	r3, 800be40 <_strtod_l+0x8f8>
 800bde0:	f1ba 0f00 	cmp.w	sl, #0
 800bde4:	d12c      	bne.n	800be40 <_strtod_l+0x8f8>
 800bde6:	9904      	ldr	r1, [sp, #16]
 800bde8:	4a9a      	ldr	r2, [pc, #616]	; (800c054 <_strtod_l+0xb0c>)
 800bdea:	465b      	mov	r3, fp
 800bdec:	b1f1      	cbz	r1, 800be2c <_strtod_l+0x8e4>
 800bdee:	ea02 010b 	and.w	r1, r2, fp
 800bdf2:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800bdf6:	dc19      	bgt.n	800be2c <_strtod_l+0x8e4>
 800bdf8:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800bdfc:	f77f ae5b 	ble.w	800bab6 <_strtod_l+0x56e>
 800be00:	4a96      	ldr	r2, [pc, #600]	; (800c05c <_strtod_l+0xb14>)
 800be02:	2300      	movs	r3, #0
 800be04:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800be08:	4650      	mov	r0, sl
 800be0a:	4659      	mov	r1, fp
 800be0c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800be10:	f7f4 fc02 	bl	8000618 <__aeabi_dmul>
 800be14:	4682      	mov	sl, r0
 800be16:	468b      	mov	fp, r1
 800be18:	2900      	cmp	r1, #0
 800be1a:	f47f adbe 	bne.w	800b99a <_strtod_l+0x452>
 800be1e:	2800      	cmp	r0, #0
 800be20:	f47f adbb 	bne.w	800b99a <_strtod_l+0x452>
 800be24:	2322      	movs	r3, #34	; 0x22
 800be26:	f8c9 3000 	str.w	r3, [r9]
 800be2a:	e5b6      	b.n	800b99a <_strtod_l+0x452>
 800be2c:	4013      	ands	r3, r2
 800be2e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800be32:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800be36:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800be3a:	f04f 3aff 	mov.w	sl, #4294967295
 800be3e:	e76a      	b.n	800bd16 <_strtod_l+0x7ce>
 800be40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800be42:	b193      	cbz	r3, 800be6a <_strtod_l+0x922>
 800be44:	422b      	tst	r3, r5
 800be46:	f43f af66 	beq.w	800bd16 <_strtod_l+0x7ce>
 800be4a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800be4c:	9a04      	ldr	r2, [sp, #16]
 800be4e:	4650      	mov	r0, sl
 800be50:	4659      	mov	r1, fp
 800be52:	b173      	cbz	r3, 800be72 <_strtod_l+0x92a>
 800be54:	f7ff fb5a 	bl	800b50c <sulp>
 800be58:	4602      	mov	r2, r0
 800be5a:	460b      	mov	r3, r1
 800be5c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800be60:	f7f4 fa24 	bl	80002ac <__adddf3>
 800be64:	4682      	mov	sl, r0
 800be66:	468b      	mov	fp, r1
 800be68:	e755      	b.n	800bd16 <_strtod_l+0x7ce>
 800be6a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800be6c:	ea13 0f0a 	tst.w	r3, sl
 800be70:	e7e9      	b.n	800be46 <_strtod_l+0x8fe>
 800be72:	f7ff fb4b 	bl	800b50c <sulp>
 800be76:	4602      	mov	r2, r0
 800be78:	460b      	mov	r3, r1
 800be7a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800be7e:	f7f4 fa13 	bl	80002a8 <__aeabi_dsub>
 800be82:	2200      	movs	r2, #0
 800be84:	2300      	movs	r3, #0
 800be86:	4682      	mov	sl, r0
 800be88:	468b      	mov	fp, r1
 800be8a:	f7f4 fe2d 	bl	8000ae8 <__aeabi_dcmpeq>
 800be8e:	2800      	cmp	r0, #0
 800be90:	f47f ae11 	bne.w	800bab6 <_strtod_l+0x56e>
 800be94:	e73f      	b.n	800bd16 <_strtod_l+0x7ce>
 800be96:	4641      	mov	r1, r8
 800be98:	4620      	mov	r0, r4
 800be9a:	f003 faee 	bl	800f47a <__ratio>
 800be9e:	ec57 6b10 	vmov	r6, r7, d0
 800bea2:	2200      	movs	r2, #0
 800bea4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bea8:	ee10 0a10 	vmov	r0, s0
 800beac:	4639      	mov	r1, r7
 800beae:	f7f4 fe2f 	bl	8000b10 <__aeabi_dcmple>
 800beb2:	2800      	cmp	r0, #0
 800beb4:	d077      	beq.n	800bfa6 <_strtod_l+0xa5e>
 800beb6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d04a      	beq.n	800bf52 <_strtod_l+0xa0a>
 800bebc:	4b68      	ldr	r3, [pc, #416]	; (800c060 <_strtod_l+0xb18>)
 800bebe:	2200      	movs	r2, #0
 800bec0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800bec4:	4f66      	ldr	r7, [pc, #408]	; (800c060 <_strtod_l+0xb18>)
 800bec6:	2600      	movs	r6, #0
 800bec8:	4b62      	ldr	r3, [pc, #392]	; (800c054 <_strtod_l+0xb0c>)
 800beca:	402b      	ands	r3, r5
 800becc:	930f      	str	r3, [sp, #60]	; 0x3c
 800bece:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800bed0:	4b64      	ldr	r3, [pc, #400]	; (800c064 <_strtod_l+0xb1c>)
 800bed2:	429a      	cmp	r2, r3
 800bed4:	f040 80ce 	bne.w	800c074 <_strtod_l+0xb2c>
 800bed8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800bedc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800bee0:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 800bee4:	ec4b ab10 	vmov	d0, sl, fp
 800bee8:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800beec:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800bef0:	f003 f9fe 	bl	800f2f0 <__ulp>
 800bef4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800bef8:	ec53 2b10 	vmov	r2, r3, d0
 800befc:	f7f4 fb8c 	bl	8000618 <__aeabi_dmul>
 800bf00:	4652      	mov	r2, sl
 800bf02:	465b      	mov	r3, fp
 800bf04:	f7f4 f9d2 	bl	80002ac <__adddf3>
 800bf08:	460b      	mov	r3, r1
 800bf0a:	4952      	ldr	r1, [pc, #328]	; (800c054 <_strtod_l+0xb0c>)
 800bf0c:	4a56      	ldr	r2, [pc, #344]	; (800c068 <_strtod_l+0xb20>)
 800bf0e:	4019      	ands	r1, r3
 800bf10:	4291      	cmp	r1, r2
 800bf12:	4682      	mov	sl, r0
 800bf14:	d95b      	bls.n	800bfce <_strtod_l+0xa86>
 800bf16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf18:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800bf1c:	4293      	cmp	r3, r2
 800bf1e:	d103      	bne.n	800bf28 <_strtod_l+0x9e0>
 800bf20:	9b08      	ldr	r3, [sp, #32]
 800bf22:	3301      	adds	r3, #1
 800bf24:	f43f ad2e 	beq.w	800b984 <_strtod_l+0x43c>
 800bf28:	f8df b12c 	ldr.w	fp, [pc, #300]	; 800c058 <_strtod_l+0xb10>
 800bf2c:	f04f 3aff 	mov.w	sl, #4294967295
 800bf30:	991c      	ldr	r1, [sp, #112]	; 0x70
 800bf32:	4648      	mov	r0, r9
 800bf34:	f002 ff60 	bl	800edf8 <_Bfree>
 800bf38:	9905      	ldr	r1, [sp, #20]
 800bf3a:	4648      	mov	r0, r9
 800bf3c:	f002 ff5c 	bl	800edf8 <_Bfree>
 800bf40:	4641      	mov	r1, r8
 800bf42:	4648      	mov	r0, r9
 800bf44:	f002 ff58 	bl	800edf8 <_Bfree>
 800bf48:	4621      	mov	r1, r4
 800bf4a:	4648      	mov	r0, r9
 800bf4c:	f002 ff54 	bl	800edf8 <_Bfree>
 800bf50:	e619      	b.n	800bb86 <_strtod_l+0x63e>
 800bf52:	f1ba 0f00 	cmp.w	sl, #0
 800bf56:	d11a      	bne.n	800bf8e <_strtod_l+0xa46>
 800bf58:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bf5c:	b9eb      	cbnz	r3, 800bf9a <_strtod_l+0xa52>
 800bf5e:	2200      	movs	r2, #0
 800bf60:	4b3f      	ldr	r3, [pc, #252]	; (800c060 <_strtod_l+0xb18>)
 800bf62:	4630      	mov	r0, r6
 800bf64:	4639      	mov	r1, r7
 800bf66:	f7f4 fdc9 	bl	8000afc <__aeabi_dcmplt>
 800bf6a:	b9c8      	cbnz	r0, 800bfa0 <_strtod_l+0xa58>
 800bf6c:	4630      	mov	r0, r6
 800bf6e:	4639      	mov	r1, r7
 800bf70:	2200      	movs	r2, #0
 800bf72:	4b3e      	ldr	r3, [pc, #248]	; (800c06c <_strtod_l+0xb24>)
 800bf74:	f7f4 fb50 	bl	8000618 <__aeabi_dmul>
 800bf78:	4606      	mov	r6, r0
 800bf7a:	460f      	mov	r7, r1
 800bf7c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800bf80:	9618      	str	r6, [sp, #96]	; 0x60
 800bf82:	9319      	str	r3, [sp, #100]	; 0x64
 800bf84:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800bf88:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800bf8c:	e79c      	b.n	800bec8 <_strtod_l+0x980>
 800bf8e:	f1ba 0f01 	cmp.w	sl, #1
 800bf92:	d102      	bne.n	800bf9a <_strtod_l+0xa52>
 800bf94:	2d00      	cmp	r5, #0
 800bf96:	f43f ad8e 	beq.w	800bab6 <_strtod_l+0x56e>
 800bf9a:	2200      	movs	r2, #0
 800bf9c:	4b34      	ldr	r3, [pc, #208]	; (800c070 <_strtod_l+0xb28>)
 800bf9e:	e78f      	b.n	800bec0 <_strtod_l+0x978>
 800bfa0:	2600      	movs	r6, #0
 800bfa2:	4f32      	ldr	r7, [pc, #200]	; (800c06c <_strtod_l+0xb24>)
 800bfa4:	e7ea      	b.n	800bf7c <_strtod_l+0xa34>
 800bfa6:	4b31      	ldr	r3, [pc, #196]	; (800c06c <_strtod_l+0xb24>)
 800bfa8:	4630      	mov	r0, r6
 800bfaa:	4639      	mov	r1, r7
 800bfac:	2200      	movs	r2, #0
 800bfae:	f7f4 fb33 	bl	8000618 <__aeabi_dmul>
 800bfb2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bfb4:	4606      	mov	r6, r0
 800bfb6:	460f      	mov	r7, r1
 800bfb8:	b933      	cbnz	r3, 800bfc8 <_strtod_l+0xa80>
 800bfba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bfbe:	9010      	str	r0, [sp, #64]	; 0x40
 800bfc0:	9311      	str	r3, [sp, #68]	; 0x44
 800bfc2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800bfc6:	e7df      	b.n	800bf88 <_strtod_l+0xa40>
 800bfc8:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800bfcc:	e7f9      	b.n	800bfc2 <_strtod_l+0xa7a>
 800bfce:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800bfd2:	9b04      	ldr	r3, [sp, #16]
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d1ab      	bne.n	800bf30 <_strtod_l+0x9e8>
 800bfd8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800bfdc:	0d1b      	lsrs	r3, r3, #20
 800bfde:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800bfe0:	051b      	lsls	r3, r3, #20
 800bfe2:	429a      	cmp	r2, r3
 800bfe4:	465d      	mov	r5, fp
 800bfe6:	d1a3      	bne.n	800bf30 <_strtod_l+0x9e8>
 800bfe8:	4639      	mov	r1, r7
 800bfea:	4630      	mov	r0, r6
 800bfec:	f7f4 fdc4 	bl	8000b78 <__aeabi_d2iz>
 800bff0:	f7f4 faa8 	bl	8000544 <__aeabi_i2d>
 800bff4:	460b      	mov	r3, r1
 800bff6:	4602      	mov	r2, r0
 800bff8:	4639      	mov	r1, r7
 800bffa:	4630      	mov	r0, r6
 800bffc:	f7f4 f954 	bl	80002a8 <__aeabi_dsub>
 800c000:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c002:	4606      	mov	r6, r0
 800c004:	460f      	mov	r7, r1
 800c006:	b933      	cbnz	r3, 800c016 <_strtod_l+0xace>
 800c008:	f1ba 0f00 	cmp.w	sl, #0
 800c00c:	d103      	bne.n	800c016 <_strtod_l+0xace>
 800c00e:	f3cb 0513 	ubfx	r5, fp, #0, #20
 800c012:	2d00      	cmp	r5, #0
 800c014:	d06d      	beq.n	800c0f2 <_strtod_l+0xbaa>
 800c016:	a30a      	add	r3, pc, #40	; (adr r3, 800c040 <_strtod_l+0xaf8>)
 800c018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c01c:	4630      	mov	r0, r6
 800c01e:	4639      	mov	r1, r7
 800c020:	f7f4 fd6c 	bl	8000afc <__aeabi_dcmplt>
 800c024:	2800      	cmp	r0, #0
 800c026:	f47f acb8 	bne.w	800b99a <_strtod_l+0x452>
 800c02a:	a307      	add	r3, pc, #28	; (adr r3, 800c048 <_strtod_l+0xb00>)
 800c02c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c030:	4630      	mov	r0, r6
 800c032:	4639      	mov	r1, r7
 800c034:	f7f4 fd80 	bl	8000b38 <__aeabi_dcmpgt>
 800c038:	2800      	cmp	r0, #0
 800c03a:	f43f af79 	beq.w	800bf30 <_strtod_l+0x9e8>
 800c03e:	e4ac      	b.n	800b99a <_strtod_l+0x452>
 800c040:	94a03595 	.word	0x94a03595
 800c044:	3fdfffff 	.word	0x3fdfffff
 800c048:	35afe535 	.word	0x35afe535
 800c04c:	3fe00000 	.word	0x3fe00000
 800c050:	000fffff 	.word	0x000fffff
 800c054:	7ff00000 	.word	0x7ff00000
 800c058:	7fefffff 	.word	0x7fefffff
 800c05c:	39500000 	.word	0x39500000
 800c060:	3ff00000 	.word	0x3ff00000
 800c064:	7fe00000 	.word	0x7fe00000
 800c068:	7c9fffff 	.word	0x7c9fffff
 800c06c:	3fe00000 	.word	0x3fe00000
 800c070:	bff00000 	.word	0xbff00000
 800c074:	9b04      	ldr	r3, [sp, #16]
 800c076:	b333      	cbz	r3, 800c0c6 <_strtod_l+0xb7e>
 800c078:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c07a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c07e:	d822      	bhi.n	800c0c6 <_strtod_l+0xb7e>
 800c080:	a327      	add	r3, pc, #156	; (adr r3, 800c120 <_strtod_l+0xbd8>)
 800c082:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c086:	4630      	mov	r0, r6
 800c088:	4639      	mov	r1, r7
 800c08a:	f7f4 fd41 	bl	8000b10 <__aeabi_dcmple>
 800c08e:	b1a0      	cbz	r0, 800c0ba <_strtod_l+0xb72>
 800c090:	4639      	mov	r1, r7
 800c092:	4630      	mov	r0, r6
 800c094:	f7f4 fd98 	bl	8000bc8 <__aeabi_d2uiz>
 800c098:	2800      	cmp	r0, #0
 800c09a:	bf08      	it	eq
 800c09c:	2001      	moveq	r0, #1
 800c09e:	f7f4 fa41 	bl	8000524 <__aeabi_ui2d>
 800c0a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c0a4:	4606      	mov	r6, r0
 800c0a6:	460f      	mov	r7, r1
 800c0a8:	bb03      	cbnz	r3, 800c0ec <_strtod_l+0xba4>
 800c0aa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c0ae:	9012      	str	r0, [sp, #72]	; 0x48
 800c0b0:	9313      	str	r3, [sp, #76]	; 0x4c
 800c0b2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800c0b6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800c0ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c0bc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c0be:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800c0c2:	1a9b      	subs	r3, r3, r2
 800c0c4:	930b      	str	r3, [sp, #44]	; 0x2c
 800c0c6:	ed9d 0b08 	vldr	d0, [sp, #32]
 800c0ca:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 800c0ce:	f003 f90f 	bl	800f2f0 <__ulp>
 800c0d2:	4650      	mov	r0, sl
 800c0d4:	ec53 2b10 	vmov	r2, r3, d0
 800c0d8:	4659      	mov	r1, fp
 800c0da:	f7f4 fa9d 	bl	8000618 <__aeabi_dmul>
 800c0de:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c0e2:	f7f4 f8e3 	bl	80002ac <__adddf3>
 800c0e6:	4682      	mov	sl, r0
 800c0e8:	468b      	mov	fp, r1
 800c0ea:	e772      	b.n	800bfd2 <_strtod_l+0xa8a>
 800c0ec:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 800c0f0:	e7df      	b.n	800c0b2 <_strtod_l+0xb6a>
 800c0f2:	a30d      	add	r3, pc, #52	; (adr r3, 800c128 <_strtod_l+0xbe0>)
 800c0f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0f8:	f7f4 fd00 	bl	8000afc <__aeabi_dcmplt>
 800c0fc:	e79c      	b.n	800c038 <_strtod_l+0xaf0>
 800c0fe:	2300      	movs	r3, #0
 800c100:	930d      	str	r3, [sp, #52]	; 0x34
 800c102:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c104:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c106:	6013      	str	r3, [r2, #0]
 800c108:	f7ff ba61 	b.w	800b5ce <_strtod_l+0x86>
 800c10c:	2b65      	cmp	r3, #101	; 0x65
 800c10e:	f04f 0200 	mov.w	r2, #0
 800c112:	f43f ab4e 	beq.w	800b7b2 <_strtod_l+0x26a>
 800c116:	2101      	movs	r1, #1
 800c118:	4614      	mov	r4, r2
 800c11a:	9104      	str	r1, [sp, #16]
 800c11c:	f7ff bacb 	b.w	800b6b6 <_strtod_l+0x16e>
 800c120:	ffc00000 	.word	0xffc00000
 800c124:	41dfffff 	.word	0x41dfffff
 800c128:	94a03595 	.word	0x94a03595
 800c12c:	3fcfffff 	.word	0x3fcfffff

0800c130 <strtod>:
 800c130:	4b07      	ldr	r3, [pc, #28]	; (800c150 <strtod+0x20>)
 800c132:	4a08      	ldr	r2, [pc, #32]	; (800c154 <strtod+0x24>)
 800c134:	b410      	push	{r4}
 800c136:	681c      	ldr	r4, [r3, #0]
 800c138:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	bf08      	it	eq
 800c13e:	4613      	moveq	r3, r2
 800c140:	460a      	mov	r2, r1
 800c142:	4601      	mov	r1, r0
 800c144:	4620      	mov	r0, r4
 800c146:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c14a:	f7ff b9fd 	b.w	800b548 <_strtod_l>
 800c14e:	bf00      	nop
 800c150:	200000f4 	.word	0x200000f4
 800c154:	20000934 	.word	0x20000934

0800c158 <_svfprintf_r>:
 800c158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c15c:	b0d3      	sub	sp, #332	; 0x14c
 800c15e:	4688      	mov	r8, r1
 800c160:	4693      	mov	fp, r2
 800c162:	461e      	mov	r6, r3
 800c164:	9003      	str	r0, [sp, #12]
 800c166:	f002 fdf5 	bl	800ed54 <_localeconv_r>
 800c16a:	6803      	ldr	r3, [r0, #0]
 800c16c:	9316      	str	r3, [sp, #88]	; 0x58
 800c16e:	4618      	mov	r0, r3
 800c170:	f7f4 f838 	bl	80001e4 <strlen>
 800c174:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 800c178:	900d      	str	r0, [sp, #52]	; 0x34
 800c17a:	0618      	lsls	r0, r3, #24
 800c17c:	d518      	bpl.n	800c1b0 <_svfprintf_r+0x58>
 800c17e:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800c182:	b9ab      	cbnz	r3, 800c1b0 <_svfprintf_r+0x58>
 800c184:	2140      	movs	r1, #64	; 0x40
 800c186:	9803      	ldr	r0, [sp, #12]
 800c188:	f7fe ff1a 	bl	800afc0 <_malloc_r>
 800c18c:	f8c8 0000 	str.w	r0, [r8]
 800c190:	f8c8 0010 	str.w	r0, [r8, #16]
 800c194:	b948      	cbnz	r0, 800c1aa <_svfprintf_r+0x52>
 800c196:	9a03      	ldr	r2, [sp, #12]
 800c198:	230c      	movs	r3, #12
 800c19a:	6013      	str	r3, [r2, #0]
 800c19c:	f04f 33ff 	mov.w	r3, #4294967295
 800c1a0:	930e      	str	r3, [sp, #56]	; 0x38
 800c1a2:	980e      	ldr	r0, [sp, #56]	; 0x38
 800c1a4:	b053      	add	sp, #332	; 0x14c
 800c1a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1aa:	2340      	movs	r3, #64	; 0x40
 800c1ac:	f8c8 3014 	str.w	r3, [r8, #20]
 800c1b0:	ed9f 7bc9 	vldr	d7, [pc, #804]	; 800c4d8 <_svfprintf_r+0x380>
 800c1b4:	2300      	movs	r3, #0
 800c1b6:	e9cd 3327 	strd	r3, r3, [sp, #156]	; 0x9c
 800c1ba:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800c1be:	e9cd 3317 	strd	r3, r3, [sp, #92]	; 0x5c
 800c1c2:	ac29      	add	r4, sp, #164	; 0xa4
 800c1c4:	9426      	str	r4, [sp, #152]	; 0x98
 800c1c6:	9304      	str	r3, [sp, #16]
 800c1c8:	9309      	str	r3, [sp, #36]	; 0x24
 800c1ca:	9312      	str	r3, [sp, #72]	; 0x48
 800c1cc:	9319      	str	r3, [sp, #100]	; 0x64
 800c1ce:	930e      	str	r3, [sp, #56]	; 0x38
 800c1d0:	465d      	mov	r5, fp
 800c1d2:	462b      	mov	r3, r5
 800c1d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c1d8:	b112      	cbz	r2, 800c1e0 <_svfprintf_r+0x88>
 800c1da:	2a25      	cmp	r2, #37	; 0x25
 800c1dc:	f040 80e4 	bne.w	800c3a8 <_svfprintf_r+0x250>
 800c1e0:	ebb5 070b 	subs.w	r7, r5, fp
 800c1e4:	d00e      	beq.n	800c204 <_svfprintf_r+0xac>
 800c1e6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800c1e8:	443b      	add	r3, r7
 800c1ea:	9328      	str	r3, [sp, #160]	; 0xa0
 800c1ec:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800c1ee:	3301      	adds	r3, #1
 800c1f0:	2b07      	cmp	r3, #7
 800c1f2:	e9c4 b700 	strd	fp, r7, [r4]
 800c1f6:	9327      	str	r3, [sp, #156]	; 0x9c
 800c1f8:	f300 80d8 	bgt.w	800c3ac <_svfprintf_r+0x254>
 800c1fc:	3408      	adds	r4, #8
 800c1fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c200:	443b      	add	r3, r7
 800c202:	930e      	str	r3, [sp, #56]	; 0x38
 800c204:	782b      	ldrb	r3, [r5, #0]
 800c206:	2b00      	cmp	r3, #0
 800c208:	f001 81b4 	beq.w	800d574 <_svfprintf_r+0x141c>
 800c20c:	1c6b      	adds	r3, r5, #1
 800c20e:	930c      	str	r3, [sp, #48]	; 0x30
 800c210:	2300      	movs	r3, #0
 800c212:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 800c216:	f04f 35ff 	mov.w	r5, #4294967295
 800c21a:	930f      	str	r3, [sp, #60]	; 0x3c
 800c21c:	469a      	mov	sl, r3
 800c21e:	270a      	movs	r7, #10
 800c220:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c222:	781b      	ldrb	r3, [r3, #0]
 800c224:	9306      	str	r3, [sp, #24]
 800c226:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c228:	3301      	adds	r3, #1
 800c22a:	930c      	str	r3, [sp, #48]	; 0x30
 800c22c:	9b06      	ldr	r3, [sp, #24]
 800c22e:	3b20      	subs	r3, #32
 800c230:	2b5a      	cmp	r3, #90	; 0x5a
 800c232:	f200 8624 	bhi.w	800ce7e <_svfprintf_r+0xd26>
 800c236:	a201      	add	r2, pc, #4	; (adr r2, 800c23c <_svfprintf_r+0xe4>)
 800c238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c23c:	0800c43f 	.word	0x0800c43f
 800c240:	0800ce7f 	.word	0x0800ce7f
 800c244:	0800ce7f 	.word	0x0800ce7f
 800c248:	0800c451 	.word	0x0800c451
 800c24c:	0800ce7f 	.word	0x0800ce7f
 800c250:	0800ce7f 	.word	0x0800ce7f
 800c254:	0800ce7f 	.word	0x0800ce7f
 800c258:	0800c405 	.word	0x0800c405
 800c25c:	0800ce7f 	.word	0x0800ce7f
 800c260:	0800ce7f 	.word	0x0800ce7f
 800c264:	0800c457 	.word	0x0800c457
 800c268:	0800c46f 	.word	0x0800c46f
 800c26c:	0800ce7f 	.word	0x0800ce7f
 800c270:	0800c469 	.word	0x0800c469
 800c274:	0800c473 	.word	0x0800c473
 800c278:	0800ce7f 	.word	0x0800ce7f
 800c27c:	0800c4a7 	.word	0x0800c4a7
 800c280:	0800c4ad 	.word	0x0800c4ad
 800c284:	0800c4ad 	.word	0x0800c4ad
 800c288:	0800c4ad 	.word	0x0800c4ad
 800c28c:	0800c4ad 	.word	0x0800c4ad
 800c290:	0800c4ad 	.word	0x0800c4ad
 800c294:	0800c4ad 	.word	0x0800c4ad
 800c298:	0800c4ad 	.word	0x0800c4ad
 800c29c:	0800c4ad 	.word	0x0800c4ad
 800c2a0:	0800c4ad 	.word	0x0800c4ad
 800c2a4:	0800ce7f 	.word	0x0800ce7f
 800c2a8:	0800ce7f 	.word	0x0800ce7f
 800c2ac:	0800ce7f 	.word	0x0800ce7f
 800c2b0:	0800ce7f 	.word	0x0800ce7f
 800c2b4:	0800ce7f 	.word	0x0800ce7f
 800c2b8:	0800ce7f 	.word	0x0800ce7f
 800c2bc:	0800ce7f 	.word	0x0800ce7f
 800c2c0:	0800c5af 	.word	0x0800c5af
 800c2c4:	0800ce7f 	.word	0x0800ce7f
 800c2c8:	0800c519 	.word	0x0800c519
 800c2cc:	0800c53b 	.word	0x0800c53b
 800c2d0:	0800c5af 	.word	0x0800c5af
 800c2d4:	0800c5af 	.word	0x0800c5af
 800c2d8:	0800c5af 	.word	0x0800c5af
 800c2dc:	0800ce7f 	.word	0x0800ce7f
 800c2e0:	0800ce7f 	.word	0x0800ce7f
 800c2e4:	0800ce7f 	.word	0x0800ce7f
 800c2e8:	0800ce7f 	.word	0x0800ce7f
 800c2ec:	0800c4cd 	.word	0x0800c4cd
 800c2f0:	0800ce7f 	.word	0x0800ce7f
 800c2f4:	0800ce7f 	.word	0x0800ce7f
 800c2f8:	0800ca81 	.word	0x0800ca81
 800c2fc:	0800ce7f 	.word	0x0800ce7f
 800c300:	0800ce7f 	.word	0x0800ce7f
 800c304:	0800ce7f 	.word	0x0800ce7f
 800c308:	0800cb0d 	.word	0x0800cb0d
 800c30c:	0800ce7f 	.word	0x0800ce7f
 800c310:	0800ccef 	.word	0x0800ccef
 800c314:	0800ce7f 	.word	0x0800ce7f
 800c318:	0800ce7f 	.word	0x0800ce7f
 800c31c:	0800c3c5 	.word	0x0800c3c5
 800c320:	0800ce7f 	.word	0x0800ce7f
 800c324:	0800ce7f 	.word	0x0800ce7f
 800c328:	0800ce7f 	.word	0x0800ce7f
 800c32c:	0800ce7f 	.word	0x0800ce7f
 800c330:	0800ce7f 	.word	0x0800ce7f
 800c334:	0800ce7f 	.word	0x0800ce7f
 800c338:	0800ce7f 	.word	0x0800ce7f
 800c33c:	0800ce7f 	.word	0x0800ce7f
 800c340:	0800c5af 	.word	0x0800c5af
 800c344:	0800ce7f 	.word	0x0800ce7f
 800c348:	0800c519 	.word	0x0800c519
 800c34c:	0800c53f 	.word	0x0800c53f
 800c350:	0800c5af 	.word	0x0800c5af
 800c354:	0800c5af 	.word	0x0800c5af
 800c358:	0800c5af 	.word	0x0800c5af
 800c35c:	0800c4e5 	.word	0x0800c4e5
 800c360:	0800c53f 	.word	0x0800c53f
 800c364:	0800c50d 	.word	0x0800c50d
 800c368:	0800ce7f 	.word	0x0800ce7f
 800c36c:	0800c4ff 	.word	0x0800c4ff
 800c370:	0800ce7f 	.word	0x0800ce7f
 800c374:	0800ca3b 	.word	0x0800ca3b
 800c378:	0800ca85 	.word	0x0800ca85
 800c37c:	0800caed 	.word	0x0800caed
 800c380:	0800c50d 	.word	0x0800c50d
 800c384:	0800ce7f 	.word	0x0800ce7f
 800c388:	0800cb0d 	.word	0x0800cb0d
 800c38c:	0800c221 	.word	0x0800c221
 800c390:	0800ccf3 	.word	0x0800ccf3
 800c394:	0800ce7f 	.word	0x0800ce7f
 800c398:	0800ce7f 	.word	0x0800ce7f
 800c39c:	0800cd31 	.word	0x0800cd31
 800c3a0:	0800ce7f 	.word	0x0800ce7f
 800c3a4:	0800c221 	.word	0x0800c221
 800c3a8:	461d      	mov	r5, r3
 800c3aa:	e712      	b.n	800c1d2 <_svfprintf_r+0x7a>
 800c3ac:	aa26      	add	r2, sp, #152	; 0x98
 800c3ae:	4641      	mov	r1, r8
 800c3b0:	9803      	ldr	r0, [sp, #12]
 800c3b2:	f003 fadf 	bl	800f974 <__ssprint_r>
 800c3b6:	2800      	cmp	r0, #0
 800c3b8:	f040 8166 	bne.w	800c688 <_svfprintf_r+0x530>
 800c3bc:	ac29      	add	r4, sp, #164	; 0xa4
 800c3be:	e71e      	b.n	800c1fe <_svfprintf_r+0xa6>
 800c3c0:	461e      	mov	r6, r3
 800c3c2:	e72d      	b.n	800c220 <_svfprintf_r+0xc8>
 800c3c4:	4b46      	ldr	r3, [pc, #280]	; (800c4e0 <_svfprintf_r+0x388>)
 800c3c6:	9318      	str	r3, [sp, #96]	; 0x60
 800c3c8:	f01a 0f20 	tst.w	sl, #32
 800c3cc:	f000 84b3 	beq.w	800cd36 <_svfprintf_r+0xbde>
 800c3d0:	3607      	adds	r6, #7
 800c3d2:	f026 0607 	bic.w	r6, r6, #7
 800c3d6:	f106 0308 	add.w	r3, r6, #8
 800c3da:	e9d6 6700 	ldrd	r6, r7, [r6]
 800c3de:	9308      	str	r3, [sp, #32]
 800c3e0:	f01a 0f01 	tst.w	sl, #1
 800c3e4:	d00a      	beq.n	800c3fc <_svfprintf_r+0x2a4>
 800c3e6:	ea56 0307 	orrs.w	r3, r6, r7
 800c3ea:	d007      	beq.n	800c3fc <_svfprintf_r+0x2a4>
 800c3ec:	2330      	movs	r3, #48	; 0x30
 800c3ee:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 800c3f2:	9b06      	ldr	r3, [sp, #24]
 800c3f4:	f88d 307d 	strb.w	r3, [sp, #125]	; 0x7d
 800c3f8:	f04a 0a02 	orr.w	sl, sl, #2
 800c3fc:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 800c400:	2302      	movs	r3, #2
 800c402:	e34d      	b.n	800caa0 <_svfprintf_r+0x948>
 800c404:	9803      	ldr	r0, [sp, #12]
 800c406:	f002 fca5 	bl	800ed54 <_localeconv_r>
 800c40a:	6843      	ldr	r3, [r0, #4]
 800c40c:	9319      	str	r3, [sp, #100]	; 0x64
 800c40e:	4618      	mov	r0, r3
 800c410:	f7f3 fee8 	bl	80001e4 <strlen>
 800c414:	9012      	str	r0, [sp, #72]	; 0x48
 800c416:	9803      	ldr	r0, [sp, #12]
 800c418:	f002 fc9c 	bl	800ed54 <_localeconv_r>
 800c41c:	6883      	ldr	r3, [r0, #8]
 800c41e:	9309      	str	r3, [sp, #36]	; 0x24
 800c420:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c422:	2b00      	cmp	r3, #0
 800c424:	f43f aefc 	beq.w	800c220 <_svfprintf_r+0xc8>
 800c428:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	f43f aef8 	beq.w	800c220 <_svfprintf_r+0xc8>
 800c430:	781b      	ldrb	r3, [r3, #0]
 800c432:	2b00      	cmp	r3, #0
 800c434:	f43f aef4 	beq.w	800c220 <_svfprintf_r+0xc8>
 800c438:	f44a 6a80 	orr.w	sl, sl, #1024	; 0x400
 800c43c:	e6f0      	b.n	800c220 <_svfprintf_r+0xc8>
 800c43e:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 800c442:	2b00      	cmp	r3, #0
 800c444:	f47f aeec 	bne.w	800c220 <_svfprintf_r+0xc8>
 800c448:	2320      	movs	r3, #32
 800c44a:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 800c44e:	e6e7      	b.n	800c220 <_svfprintf_r+0xc8>
 800c450:	f04a 0a01 	orr.w	sl, sl, #1
 800c454:	e6e4      	b.n	800c220 <_svfprintf_r+0xc8>
 800c456:	6832      	ldr	r2, [r6, #0]
 800c458:	920f      	str	r2, [sp, #60]	; 0x3c
 800c45a:	2a00      	cmp	r2, #0
 800c45c:	f106 0304 	add.w	r3, r6, #4
 800c460:	daae      	bge.n	800c3c0 <_svfprintf_r+0x268>
 800c462:	4252      	negs	r2, r2
 800c464:	920f      	str	r2, [sp, #60]	; 0x3c
 800c466:	461e      	mov	r6, r3
 800c468:	f04a 0a04 	orr.w	sl, sl, #4
 800c46c:	e6d8      	b.n	800c220 <_svfprintf_r+0xc8>
 800c46e:	232b      	movs	r3, #43	; 0x2b
 800c470:	e7eb      	b.n	800c44a <_svfprintf_r+0x2f2>
 800c472:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c474:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c476:	7812      	ldrb	r2, [r2, #0]
 800c478:	9206      	str	r2, [sp, #24]
 800c47a:	2a2a      	cmp	r2, #42	; 0x2a
 800c47c:	f103 0301 	add.w	r3, r3, #1
 800c480:	d10f      	bne.n	800c4a2 <_svfprintf_r+0x34a>
 800c482:	6835      	ldr	r5, [r6, #0]
 800c484:	930c      	str	r3, [sp, #48]	; 0x30
 800c486:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
 800c48a:	3604      	adds	r6, #4
 800c48c:	e6c8      	b.n	800c220 <_svfprintf_r+0xc8>
 800c48e:	fb07 2505 	mla	r5, r7, r5, r2
 800c492:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c496:	9206      	str	r2, [sp, #24]
 800c498:	9a06      	ldr	r2, [sp, #24]
 800c49a:	3a30      	subs	r2, #48	; 0x30
 800c49c:	2a09      	cmp	r2, #9
 800c49e:	d9f6      	bls.n	800c48e <_svfprintf_r+0x336>
 800c4a0:	e6c3      	b.n	800c22a <_svfprintf_r+0xd2>
 800c4a2:	2500      	movs	r5, #0
 800c4a4:	e7f8      	b.n	800c498 <_svfprintf_r+0x340>
 800c4a6:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
 800c4aa:	e6b9      	b.n	800c220 <_svfprintf_r+0xc8>
 800c4ac:	2200      	movs	r2, #0
 800c4ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c4b0:	920f      	str	r2, [sp, #60]	; 0x3c
 800c4b2:	9a06      	ldr	r2, [sp, #24]
 800c4b4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800c4b6:	3a30      	subs	r2, #48	; 0x30
 800c4b8:	fb07 2201 	mla	r2, r7, r1, r2
 800c4bc:	920f      	str	r2, [sp, #60]	; 0x3c
 800c4be:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c4c2:	9206      	str	r2, [sp, #24]
 800c4c4:	3a30      	subs	r2, #48	; 0x30
 800c4c6:	2a09      	cmp	r2, #9
 800c4c8:	d9f3      	bls.n	800c4b2 <_svfprintf_r+0x35a>
 800c4ca:	e6ae      	b.n	800c22a <_svfprintf_r+0xd2>
 800c4cc:	f04a 0a08 	orr.w	sl, sl, #8
 800c4d0:	e6a6      	b.n	800c220 <_svfprintf_r+0xc8>
 800c4d2:	bf00      	nop
 800c4d4:	f3af 8000 	nop.w
	...
 800c4e0:	08010351 	.word	0x08010351
 800c4e4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c4e6:	781b      	ldrb	r3, [r3, #0]
 800c4e8:	2b68      	cmp	r3, #104	; 0x68
 800c4ea:	bf01      	itttt	eq
 800c4ec:	9b0c      	ldreq	r3, [sp, #48]	; 0x30
 800c4ee:	3301      	addeq	r3, #1
 800c4f0:	930c      	streq	r3, [sp, #48]	; 0x30
 800c4f2:	f44a 7a00 	orreq.w	sl, sl, #512	; 0x200
 800c4f6:	bf18      	it	ne
 800c4f8:	f04a 0a40 	orrne.w	sl, sl, #64	; 0x40
 800c4fc:	e690      	b.n	800c220 <_svfprintf_r+0xc8>
 800c4fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c500:	781b      	ldrb	r3, [r3, #0]
 800c502:	2b6c      	cmp	r3, #108	; 0x6c
 800c504:	d105      	bne.n	800c512 <_svfprintf_r+0x3ba>
 800c506:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c508:	3301      	adds	r3, #1
 800c50a:	930c      	str	r3, [sp, #48]	; 0x30
 800c50c:	f04a 0a20 	orr.w	sl, sl, #32
 800c510:	e686      	b.n	800c220 <_svfprintf_r+0xc8>
 800c512:	f04a 0a10 	orr.w	sl, sl, #16
 800c516:	e683      	b.n	800c220 <_svfprintf_r+0xc8>
 800c518:	1d33      	adds	r3, r6, #4
 800c51a:	9308      	str	r3, [sp, #32]
 800c51c:	2000      	movs	r0, #0
 800c51e:	6833      	ldr	r3, [r6, #0]
 800c520:	f88d 30e4 	strb.w	r3, [sp, #228]	; 0xe4
 800c524:	f88d 007b 	strb.w	r0, [sp, #123]	; 0x7b
 800c528:	4681      	mov	r9, r0
 800c52a:	2501      	movs	r5, #1
 800c52c:	9010      	str	r0, [sp, #64]	; 0x40
 800c52e:	4607      	mov	r7, r0
 800c530:	9007      	str	r0, [sp, #28]
 800c532:	4606      	mov	r6, r0
 800c534:	f10d 0be4 	add.w	fp, sp, #228	; 0xe4
 800c538:	e301      	b.n	800cb3e <_svfprintf_r+0x9e6>
 800c53a:	f04a 0a10 	orr.w	sl, sl, #16
 800c53e:	f01a 0f20 	tst.w	sl, #32
 800c542:	d021      	beq.n	800c588 <_svfprintf_r+0x430>
 800c544:	3607      	adds	r6, #7
 800c546:	f026 0607 	bic.w	r6, r6, #7
 800c54a:	f106 0308 	add.w	r3, r6, #8
 800c54e:	e9d6 6700 	ldrd	r6, r7, [r6]
 800c552:	9308      	str	r3, [sp, #32]
 800c554:	2e00      	cmp	r6, #0
 800c556:	f177 0300 	sbcs.w	r3, r7, #0
 800c55a:	da06      	bge.n	800c56a <_svfprintf_r+0x412>
 800c55c:	4276      	negs	r6, r6
 800c55e:	f04f 032d 	mov.w	r3, #45	; 0x2d
 800c562:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 800c566:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 800c56a:	1c6b      	adds	r3, r5, #1
 800c56c:	f040 83f6 	bne.w	800cd5c <_svfprintf_r+0xc04>
 800c570:	2f00      	cmp	r7, #0
 800c572:	bf08      	it	eq
 800c574:	2e0a      	cmpeq	r6, #10
 800c576:	f080 8427 	bcs.w	800cdc8 <_svfprintf_r+0xc70>
 800c57a:	f50d 7ba4 	add.w	fp, sp, #328	; 0x148
 800c57e:	3630      	adds	r6, #48	; 0x30
 800c580:	f80b 6d01 	strb.w	r6, [fp, #-1]!
 800c584:	f000 bc0d 	b.w	800cda2 <_svfprintf_r+0xc4a>
 800c588:	1d33      	adds	r3, r6, #4
 800c58a:	f01a 0f10 	tst.w	sl, #16
 800c58e:	9308      	str	r3, [sp, #32]
 800c590:	d002      	beq.n	800c598 <_svfprintf_r+0x440>
 800c592:	6836      	ldr	r6, [r6, #0]
 800c594:	17f7      	asrs	r7, r6, #31
 800c596:	e7dd      	b.n	800c554 <_svfprintf_r+0x3fc>
 800c598:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800c59c:	6836      	ldr	r6, [r6, #0]
 800c59e:	d001      	beq.n	800c5a4 <_svfprintf_r+0x44c>
 800c5a0:	b236      	sxth	r6, r6
 800c5a2:	e7f7      	b.n	800c594 <_svfprintf_r+0x43c>
 800c5a4:	f41a 7f00 	tst.w	sl, #512	; 0x200
 800c5a8:	bf18      	it	ne
 800c5aa:	b276      	sxtbne	r6, r6
 800c5ac:	e7f2      	b.n	800c594 <_svfprintf_r+0x43c>
 800c5ae:	3607      	adds	r6, #7
 800c5b0:	f026 0607 	bic.w	r6, r6, #7
 800c5b4:	ed96 7b00 	vldr	d7, [r6]
 800c5b8:	f106 0308 	add.w	r3, r6, #8
 800c5bc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800c5c0:	9308      	str	r3, [sp, #32]
 800c5c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c5c4:	931a      	str	r3, [sp, #104]	; 0x68
 800c5c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c5c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c5cc:	931b      	str	r3, [sp, #108]	; 0x6c
 800c5ce:	f04f 32ff 	mov.w	r2, #4294967295
 800c5d2:	4bb2      	ldr	r3, [pc, #712]	; (800c89c <_svfprintf_r+0x744>)
 800c5d4:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 800c5d8:	f7f4 fab8 	bl	8000b4c <__aeabi_dcmpun>
 800c5dc:	bb00      	cbnz	r0, 800c620 <_svfprintf_r+0x4c8>
 800c5de:	f04f 32ff 	mov.w	r2, #4294967295
 800c5e2:	4bae      	ldr	r3, [pc, #696]	; (800c89c <_svfprintf_r+0x744>)
 800c5e4:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 800c5e8:	f7f4 fa92 	bl	8000b10 <__aeabi_dcmple>
 800c5ec:	b9c0      	cbnz	r0, 800c620 <_svfprintf_r+0x4c8>
 800c5ee:	2200      	movs	r2, #0
 800c5f0:	2300      	movs	r3, #0
 800c5f2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c5f6:	f7f4 fa81 	bl	8000afc <__aeabi_dcmplt>
 800c5fa:	b110      	cbz	r0, 800c602 <_svfprintf_r+0x4aa>
 800c5fc:	232d      	movs	r3, #45	; 0x2d
 800c5fe:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 800c602:	4aa7      	ldr	r2, [pc, #668]	; (800c8a0 <_svfprintf_r+0x748>)
 800c604:	4ba7      	ldr	r3, [pc, #668]	; (800c8a4 <_svfprintf_r+0x74c>)
 800c606:	9906      	ldr	r1, [sp, #24]
 800c608:	f02a 0a80 	bic.w	sl, sl, #128	; 0x80
 800c60c:	2947      	cmp	r1, #71	; 0x47
 800c60e:	bfcc      	ite	gt
 800c610:	4693      	movgt	fp, r2
 800c612:	469b      	movle	fp, r3
 800c614:	f04f 0900 	mov.w	r9, #0
 800c618:	2503      	movs	r5, #3
 800c61a:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
 800c61e:	e3c6      	b.n	800cdae <_svfprintf_r+0xc56>
 800c620:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800c624:	4610      	mov	r0, r2
 800c626:	4619      	mov	r1, r3
 800c628:	f7f4 fa90 	bl	8000b4c <__aeabi_dcmpun>
 800c62c:	4681      	mov	r9, r0
 800c62e:	b140      	cbz	r0, 800c642 <_svfprintf_r+0x4ea>
 800c630:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c632:	4a9d      	ldr	r2, [pc, #628]	; (800c8a8 <_svfprintf_r+0x750>)
 800c634:	2b00      	cmp	r3, #0
 800c636:	bfbc      	itt	lt
 800c638:	232d      	movlt	r3, #45	; 0x2d
 800c63a:	f88d 307b 	strblt.w	r3, [sp, #123]	; 0x7b
 800c63e:	4b9b      	ldr	r3, [pc, #620]	; (800c8ac <_svfprintf_r+0x754>)
 800c640:	e7e1      	b.n	800c606 <_svfprintf_r+0x4ae>
 800c642:	9b06      	ldr	r3, [sp, #24]
 800c644:	f023 0320 	bic.w	r3, r3, #32
 800c648:	2b41      	cmp	r3, #65	; 0x41
 800c64a:	9307      	str	r3, [sp, #28]
 800c64c:	d125      	bne.n	800c69a <_svfprintf_r+0x542>
 800c64e:	2330      	movs	r3, #48	; 0x30
 800c650:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 800c654:	9b06      	ldr	r3, [sp, #24]
 800c656:	2b61      	cmp	r3, #97	; 0x61
 800c658:	bf14      	ite	ne
 800c65a:	2358      	movne	r3, #88	; 0x58
 800c65c:	2378      	moveq	r3, #120	; 0x78
 800c65e:	2d63      	cmp	r5, #99	; 0x63
 800c660:	f88d 307d 	strb.w	r3, [sp, #125]	; 0x7d
 800c664:	f04a 0a02 	orr.w	sl, sl, #2
 800c668:	f340 8108 	ble.w	800c87c <_svfprintf_r+0x724>
 800c66c:	1c69      	adds	r1, r5, #1
 800c66e:	9803      	ldr	r0, [sp, #12]
 800c670:	f7fe fca6 	bl	800afc0 <_malloc_r>
 800c674:	4683      	mov	fp, r0
 800c676:	2800      	cmp	r0, #0
 800c678:	f040 8103 	bne.w	800c882 <_svfprintf_r+0x72a>
 800c67c:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 800c680:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c684:	f8a8 300c 	strh.w	r3, [r8, #12]
 800c688:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 800c68c:	f013 0f40 	tst.w	r3, #64	; 0x40
 800c690:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c692:	bf18      	it	ne
 800c694:	f04f 33ff 	movne.w	r3, #4294967295
 800c698:	e582      	b.n	800c1a0 <_svfprintf_r+0x48>
 800c69a:	1c69      	adds	r1, r5, #1
 800c69c:	f000 80f3 	beq.w	800c886 <_svfprintf_r+0x72e>
 800c6a0:	9b07      	ldr	r3, [sp, #28]
 800c6a2:	2b47      	cmp	r3, #71	; 0x47
 800c6a4:	d102      	bne.n	800c6ac <_svfprintf_r+0x554>
 800c6a6:	2d00      	cmp	r5, #0
 800c6a8:	f000 80ef 	beq.w	800c88a <_svfprintf_r+0x732>
 800c6ac:	f44a 7380 	orr.w	r3, sl, #256	; 0x100
 800c6b0:	9310      	str	r3, [sp, #64]	; 0x40
 800c6b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	f280 80eb 	bge.w	800c890 <_svfprintf_r+0x738>
 800c6ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c6bc:	9314      	str	r3, [sp, #80]	; 0x50
 800c6be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c6c0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c6c4:	9315      	str	r3, [sp, #84]	; 0x54
 800c6c6:	232d      	movs	r3, #45	; 0x2d
 800c6c8:	9313      	str	r3, [sp, #76]	; 0x4c
 800c6ca:	9b07      	ldr	r3, [sp, #28]
 800c6cc:	2b41      	cmp	r3, #65	; 0x41
 800c6ce:	f040 8105 	bne.w	800c8dc <_svfprintf_r+0x784>
 800c6d2:	a820      	add	r0, sp, #128	; 0x80
 800c6d4:	ed9d 0b14 	vldr	d0, [sp, #80]	; 0x50
 800c6d8:	f003 f904 	bl	800f8e4 <frexp>
 800c6dc:	2200      	movs	r2, #0
 800c6de:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800c6e2:	ec51 0b10 	vmov	r0, r1, d0
 800c6e6:	f7f3 ff97 	bl	8000618 <__aeabi_dmul>
 800c6ea:	2200      	movs	r2, #0
 800c6ec:	2300      	movs	r3, #0
 800c6ee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c6f2:	f7f4 f9f9 	bl	8000ae8 <__aeabi_dcmpeq>
 800c6f6:	b108      	cbz	r0, 800c6fc <_svfprintf_r+0x5a4>
 800c6f8:	2301      	movs	r3, #1
 800c6fa:	9320      	str	r3, [sp, #128]	; 0x80
 800c6fc:	4f6c      	ldr	r7, [pc, #432]	; (800c8b0 <_svfprintf_r+0x758>)
 800c6fe:	4b6d      	ldr	r3, [pc, #436]	; (800c8b4 <_svfprintf_r+0x75c>)
 800c700:	9a06      	ldr	r2, [sp, #24]
 800c702:	2a61      	cmp	r2, #97	; 0x61
 800c704:	bf08      	it	eq
 800c706:	461f      	moveq	r7, r3
 800c708:	9711      	str	r7, [sp, #68]	; 0x44
 800c70a:	465e      	mov	r6, fp
 800c70c:	1e6f      	subs	r7, r5, #1
 800c70e:	2200      	movs	r2, #0
 800c710:	4b69      	ldr	r3, [pc, #420]	; (800c8b8 <_svfprintf_r+0x760>)
 800c712:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c716:	f7f3 ff7f 	bl	8000618 <__aeabi_dmul>
 800c71a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c71e:	f7f4 fa2b 	bl	8000b78 <__aeabi_d2iz>
 800c722:	901c      	str	r0, [sp, #112]	; 0x70
 800c724:	f7f3 ff0e 	bl	8000544 <__aeabi_i2d>
 800c728:	4602      	mov	r2, r0
 800c72a:	460b      	mov	r3, r1
 800c72c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c730:	f7f3 fdba 	bl	80002a8 <__aeabi_dsub>
 800c734:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800c736:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c738:	971d      	str	r7, [sp, #116]	; 0x74
 800c73a:	5c9b      	ldrb	r3, [r3, r2]
 800c73c:	f806 3b01 	strb.w	r3, [r6], #1
 800c740:	1c7a      	adds	r2, r7, #1
 800c742:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c746:	d006      	beq.n	800c756 <_svfprintf_r+0x5fe>
 800c748:	2200      	movs	r2, #0
 800c74a:	2300      	movs	r3, #0
 800c74c:	3f01      	subs	r7, #1
 800c74e:	f7f4 f9cb 	bl	8000ae8 <__aeabi_dcmpeq>
 800c752:	2800      	cmp	r0, #0
 800c754:	d0db      	beq.n	800c70e <_svfprintf_r+0x5b6>
 800c756:	2200      	movs	r2, #0
 800c758:	4b58      	ldr	r3, [pc, #352]	; (800c8bc <_svfprintf_r+0x764>)
 800c75a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c75e:	f7f4 f9eb 	bl	8000b38 <__aeabi_dcmpgt>
 800c762:	b960      	cbnz	r0, 800c77e <_svfprintf_r+0x626>
 800c764:	2200      	movs	r2, #0
 800c766:	4b55      	ldr	r3, [pc, #340]	; (800c8bc <_svfprintf_r+0x764>)
 800c768:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c76c:	f7f4 f9bc 	bl	8000ae8 <__aeabi_dcmpeq>
 800c770:	2800      	cmp	r0, #0
 800c772:	f000 80ae 	beq.w	800c8d2 <_svfprintf_r+0x77a>
 800c776:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800c778:	07db      	lsls	r3, r3, #31
 800c77a:	f140 80aa 	bpl.w	800c8d2 <_svfprintf_r+0x77a>
 800c77e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c780:	9624      	str	r6, [sp, #144]	; 0x90
 800c782:	7bd9      	ldrb	r1, [r3, #15]
 800c784:	2030      	movs	r0, #48	; 0x30
 800c786:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800c788:	1e53      	subs	r3, r2, #1
 800c78a:	9324      	str	r3, [sp, #144]	; 0x90
 800c78c:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 800c790:	428b      	cmp	r3, r1
 800c792:	f000 8095 	beq.w	800c8c0 <_svfprintf_r+0x768>
 800c796:	2b39      	cmp	r3, #57	; 0x39
 800c798:	bf0b      	itete	eq
 800c79a:	9b11      	ldreq	r3, [sp, #68]	; 0x44
 800c79c:	3301      	addne	r3, #1
 800c79e:	7a9b      	ldrbeq	r3, [r3, #10]
 800c7a0:	b2db      	uxtbne	r3, r3
 800c7a2:	f802 3c01 	strb.w	r3, [r2, #-1]
 800c7a6:	4633      	mov	r3, r6
 800c7a8:	eba3 030b 	sub.w	r3, r3, fp
 800c7ac:	9304      	str	r3, [sp, #16]
 800c7ae:	9b07      	ldr	r3, [sp, #28]
 800c7b0:	9e20      	ldr	r6, [sp, #128]	; 0x80
 800c7b2:	2b47      	cmp	r3, #71	; 0x47
 800c7b4:	f040 80d7 	bne.w	800c966 <_svfprintf_r+0x80e>
 800c7b8:	1cf7      	adds	r7, r6, #3
 800c7ba:	db02      	blt.n	800c7c2 <_svfprintf_r+0x66a>
 800c7bc:	42b5      	cmp	r5, r6
 800c7be:	f280 80fd 	bge.w	800c9bc <_svfprintf_r+0x864>
 800c7c2:	9b06      	ldr	r3, [sp, #24]
 800c7c4:	3b02      	subs	r3, #2
 800c7c6:	9306      	str	r3, [sp, #24]
 800c7c8:	9906      	ldr	r1, [sp, #24]
 800c7ca:	f89d 2018 	ldrb.w	r2, [sp, #24]
 800c7ce:	f021 0120 	bic.w	r1, r1, #32
 800c7d2:	2941      	cmp	r1, #65	; 0x41
 800c7d4:	bf08      	it	eq
 800c7d6:	320f      	addeq	r2, #15
 800c7d8:	f106 33ff 	add.w	r3, r6, #4294967295
 800c7dc:	bf06      	itte	eq
 800c7de:	b2d2      	uxtbeq	r2, r2
 800c7e0:	2101      	moveq	r1, #1
 800c7e2:	2100      	movne	r1, #0
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	9320      	str	r3, [sp, #128]	; 0x80
 800c7e8:	bfb8      	it	lt
 800c7ea:	f1c6 0301 	rsblt	r3, r6, #1
 800c7ee:	f88d 2088 	strb.w	r2, [sp, #136]	; 0x88
 800c7f2:	bfb4      	ite	lt
 800c7f4:	222d      	movlt	r2, #45	; 0x2d
 800c7f6:	222b      	movge	r2, #43	; 0x2b
 800c7f8:	2b09      	cmp	r3, #9
 800c7fa:	f88d 2089 	strb.w	r2, [sp, #137]	; 0x89
 800c7fe:	f340 80c9 	ble.w	800c994 <_svfprintf_r+0x83c>
 800c802:	f10d 0297 	add.w	r2, sp, #151	; 0x97
 800c806:	250a      	movs	r5, #10
 800c808:	fb93 f0f5 	sdiv	r0, r3, r5
 800c80c:	fb05 3310 	mls	r3, r5, r0, r3
 800c810:	3330      	adds	r3, #48	; 0x30
 800c812:	2809      	cmp	r0, #9
 800c814:	f802 3c01 	strb.w	r3, [r2, #-1]
 800c818:	f102 31ff 	add.w	r1, r2, #4294967295
 800c81c:	4603      	mov	r3, r0
 800c81e:	f300 80b2 	bgt.w	800c986 <_svfprintf_r+0x82e>
 800c822:	3330      	adds	r3, #48	; 0x30
 800c824:	f801 3c01 	strb.w	r3, [r1, #-1]
 800c828:	3a02      	subs	r2, #2
 800c82a:	f10d 038a 	add.w	r3, sp, #138	; 0x8a
 800c82e:	f10d 0097 	add.w	r0, sp, #151	; 0x97
 800c832:	4282      	cmp	r2, r0
 800c834:	4619      	mov	r1, r3
 800c836:	f0c0 80a8 	bcc.w	800c98a <_svfprintf_r+0x832>
 800c83a:	9a04      	ldr	r2, [sp, #16]
 800c83c:	ab22      	add	r3, sp, #136	; 0x88
 800c83e:	1acb      	subs	r3, r1, r3
 800c840:	2a01      	cmp	r2, #1
 800c842:	9317      	str	r3, [sp, #92]	; 0x5c
 800c844:	eb03 0502 	add.w	r5, r3, r2
 800c848:	dc02      	bgt.n	800c850 <_svfprintf_r+0x6f8>
 800c84a:	f01a 0f01 	tst.w	sl, #1
 800c84e:	d001      	beq.n	800c854 <_svfprintf_r+0x6fc>
 800c850:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c852:	441d      	add	r5, r3
 800c854:	f42a 6380 	bic.w	r3, sl, #1024	; 0x400
 800c858:	2700      	movs	r7, #0
 800c85a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c85e:	9310      	str	r3, [sp, #64]	; 0x40
 800c860:	9707      	str	r7, [sp, #28]
 800c862:	463e      	mov	r6, r7
 800c864:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c866:	2b00      	cmp	r3, #0
 800c868:	f000 8315 	beq.w	800ce96 <_svfprintf_r+0xd3e>
 800c86c:	232d      	movs	r3, #45	; 0x2d
 800c86e:	f8dd a040 	ldr.w	sl, [sp, #64]	; 0x40
 800c872:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 800c876:	2300      	movs	r3, #0
 800c878:	9310      	str	r3, [sp, #64]	; 0x40
 800c87a:	e160      	b.n	800cb3e <_svfprintf_r+0x9e6>
 800c87c:	f10d 0be4 	add.w	fp, sp, #228	; 0xe4
 800c880:	e714      	b.n	800c6ac <_svfprintf_r+0x554>
 800c882:	4681      	mov	r9, r0
 800c884:	e712      	b.n	800c6ac <_svfprintf_r+0x554>
 800c886:	2506      	movs	r5, #6
 800c888:	e710      	b.n	800c6ac <_svfprintf_r+0x554>
 800c88a:	46a9      	mov	r9, r5
 800c88c:	2501      	movs	r5, #1
 800c88e:	e70d      	b.n	800c6ac <_svfprintf_r+0x554>
 800c890:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 800c894:	2300      	movs	r3, #0
 800c896:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 800c89a:	e715      	b.n	800c6c8 <_svfprintf_r+0x570>
 800c89c:	7fefffff 	.word	0x7fefffff
 800c8a0:	08010334 	.word	0x08010334
 800c8a4:	08010330 	.word	0x08010330
 800c8a8:	0801033c 	.word	0x0801033c
 800c8ac:	08010338 	.word	0x08010338
 800c8b0:	08010351 	.word	0x08010351
 800c8b4:	08010340 	.word	0x08010340
 800c8b8:	40300000 	.word	0x40300000
 800c8bc:	3fe00000 	.word	0x3fe00000
 800c8c0:	f802 0c01 	strb.w	r0, [r2, #-1]
 800c8c4:	e75f      	b.n	800c786 <_svfprintf_r+0x62e>
 800c8c6:	f803 1b01 	strb.w	r1, [r3], #1
 800c8ca:	1af2      	subs	r2, r6, r3
 800c8cc:	2a00      	cmp	r2, #0
 800c8ce:	dafa      	bge.n	800c8c6 <_svfprintf_r+0x76e>
 800c8d0:	e76a      	b.n	800c7a8 <_svfprintf_r+0x650>
 800c8d2:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800c8d4:	4633      	mov	r3, r6
 800c8d6:	2130      	movs	r1, #48	; 0x30
 800c8d8:	4416      	add	r6, r2
 800c8da:	e7f6      	b.n	800c8ca <_svfprintf_r+0x772>
 800c8dc:	9b07      	ldr	r3, [sp, #28]
 800c8de:	2b46      	cmp	r3, #70	; 0x46
 800c8e0:	d004      	beq.n	800c8ec <_svfprintf_r+0x794>
 800c8e2:	2b45      	cmp	r3, #69	; 0x45
 800c8e4:	d13a      	bne.n	800c95c <_svfprintf_r+0x804>
 800c8e6:	1c6e      	adds	r6, r5, #1
 800c8e8:	2102      	movs	r1, #2
 800c8ea:	e001      	b.n	800c8f0 <_svfprintf_r+0x798>
 800c8ec:	462e      	mov	r6, r5
 800c8ee:	2103      	movs	r1, #3
 800c8f0:	ab24      	add	r3, sp, #144	; 0x90
 800c8f2:	9301      	str	r3, [sp, #4]
 800c8f4:	ab21      	add	r3, sp, #132	; 0x84
 800c8f6:	9300      	str	r3, [sp, #0]
 800c8f8:	4632      	mov	r2, r6
 800c8fa:	ab20      	add	r3, sp, #128	; 0x80
 800c8fc:	ed9d 0b14 	vldr	d0, [sp, #80]	; 0x50
 800c900:	9803      	ldr	r0, [sp, #12]
 800c902:	f000 fef5 	bl	800d6f0 <_dtoa_r>
 800c906:	9b07      	ldr	r3, [sp, #28]
 800c908:	2b47      	cmp	r3, #71	; 0x47
 800c90a:	4683      	mov	fp, r0
 800c90c:	d102      	bne.n	800c914 <_svfprintf_r+0x7bc>
 800c90e:	f01a 0f01 	tst.w	sl, #1
 800c912:	d026      	beq.n	800c962 <_svfprintf_r+0x80a>
 800c914:	9b07      	ldr	r3, [sp, #28]
 800c916:	2b46      	cmp	r3, #70	; 0x46
 800c918:	eb0b 0706 	add.w	r7, fp, r6
 800c91c:	d10f      	bne.n	800c93e <_svfprintf_r+0x7e6>
 800c91e:	f89b 3000 	ldrb.w	r3, [fp]
 800c922:	2b30      	cmp	r3, #48	; 0x30
 800c924:	d109      	bne.n	800c93a <_svfprintf_r+0x7e2>
 800c926:	2200      	movs	r2, #0
 800c928:	2300      	movs	r3, #0
 800c92a:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 800c92e:	f7f4 f8db 	bl	8000ae8 <__aeabi_dcmpeq>
 800c932:	b910      	cbnz	r0, 800c93a <_svfprintf_r+0x7e2>
 800c934:	f1c6 0601 	rsb	r6, r6, #1
 800c938:	9620      	str	r6, [sp, #128]	; 0x80
 800c93a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800c93c:	441f      	add	r7, r3
 800c93e:	2200      	movs	r2, #0
 800c940:	2300      	movs	r3, #0
 800c942:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 800c946:	f7f4 f8cf 	bl	8000ae8 <__aeabi_dcmpeq>
 800c94a:	b948      	cbnz	r0, 800c960 <_svfprintf_r+0x808>
 800c94c:	2230      	movs	r2, #48	; 0x30
 800c94e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800c950:	429f      	cmp	r7, r3
 800c952:	d906      	bls.n	800c962 <_svfprintf_r+0x80a>
 800c954:	1c59      	adds	r1, r3, #1
 800c956:	9124      	str	r1, [sp, #144]	; 0x90
 800c958:	701a      	strb	r2, [r3, #0]
 800c95a:	e7f8      	b.n	800c94e <_svfprintf_r+0x7f6>
 800c95c:	462e      	mov	r6, r5
 800c95e:	e7c3      	b.n	800c8e8 <_svfprintf_r+0x790>
 800c960:	9724      	str	r7, [sp, #144]	; 0x90
 800c962:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800c964:	e720      	b.n	800c7a8 <_svfprintf_r+0x650>
 800c966:	9b07      	ldr	r3, [sp, #28]
 800c968:	2b46      	cmp	r3, #70	; 0x46
 800c96a:	f47f af2d 	bne.w	800c7c8 <_svfprintf_r+0x670>
 800c96e:	2e00      	cmp	r6, #0
 800c970:	dd1d      	ble.n	800c9ae <_svfprintf_r+0x856>
 800c972:	b915      	cbnz	r5, 800c97a <_svfprintf_r+0x822>
 800c974:	f01a 0f01 	tst.w	sl, #1
 800c978:	d034      	beq.n	800c9e4 <_svfprintf_r+0x88c>
 800c97a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c97c:	18f3      	adds	r3, r6, r3
 800c97e:	441d      	add	r5, r3
 800c980:	2366      	movs	r3, #102	; 0x66
 800c982:	9306      	str	r3, [sp, #24]
 800c984:	e033      	b.n	800c9ee <_svfprintf_r+0x896>
 800c986:	460a      	mov	r2, r1
 800c988:	e73e      	b.n	800c808 <_svfprintf_r+0x6b0>
 800c98a:	f812 1b01 	ldrb.w	r1, [r2], #1
 800c98e:	f803 1b01 	strb.w	r1, [r3], #1
 800c992:	e74e      	b.n	800c832 <_svfprintf_r+0x6da>
 800c994:	b941      	cbnz	r1, 800c9a8 <_svfprintf_r+0x850>
 800c996:	2230      	movs	r2, #48	; 0x30
 800c998:	f88d 208a 	strb.w	r2, [sp, #138]	; 0x8a
 800c99c:	f10d 028b 	add.w	r2, sp, #139	; 0x8b
 800c9a0:	3330      	adds	r3, #48	; 0x30
 800c9a2:	1c51      	adds	r1, r2, #1
 800c9a4:	7013      	strb	r3, [r2, #0]
 800c9a6:	e748      	b.n	800c83a <_svfprintf_r+0x6e2>
 800c9a8:	f10d 028a 	add.w	r2, sp, #138	; 0x8a
 800c9ac:	e7f8      	b.n	800c9a0 <_svfprintf_r+0x848>
 800c9ae:	b915      	cbnz	r5, 800c9b6 <_svfprintf_r+0x85e>
 800c9b0:	f01a 0f01 	tst.w	sl, #1
 800c9b4:	d018      	beq.n	800c9e8 <_svfprintf_r+0x890>
 800c9b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c9b8:	3301      	adds	r3, #1
 800c9ba:	e7e0      	b.n	800c97e <_svfprintf_r+0x826>
 800c9bc:	9b04      	ldr	r3, [sp, #16]
 800c9be:	42b3      	cmp	r3, r6
 800c9c0:	dc06      	bgt.n	800c9d0 <_svfprintf_r+0x878>
 800c9c2:	f01a 0f01 	tst.w	sl, #1
 800c9c6:	d025      	beq.n	800ca14 <_svfprintf_r+0x8bc>
 800c9c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c9ca:	18f5      	adds	r5, r6, r3
 800c9cc:	2367      	movs	r3, #103	; 0x67
 800c9ce:	e7d8      	b.n	800c982 <_svfprintf_r+0x82a>
 800c9d0:	9b04      	ldr	r3, [sp, #16]
 800c9d2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c9d4:	2e00      	cmp	r6, #0
 800c9d6:	eb03 0502 	add.w	r5, r3, r2
 800c9da:	dcf7      	bgt.n	800c9cc <_svfprintf_r+0x874>
 800c9dc:	f1c6 0301 	rsb	r3, r6, #1
 800c9e0:	441d      	add	r5, r3
 800c9e2:	e7f3      	b.n	800c9cc <_svfprintf_r+0x874>
 800c9e4:	4635      	mov	r5, r6
 800c9e6:	e7cb      	b.n	800c980 <_svfprintf_r+0x828>
 800c9e8:	2366      	movs	r3, #102	; 0x66
 800c9ea:	9306      	str	r3, [sp, #24]
 800c9ec:	2501      	movs	r5, #1
 800c9ee:	f41a 6380 	ands.w	r3, sl, #1024	; 0x400
 800c9f2:	9307      	str	r3, [sp, #28]
 800c9f4:	d01f      	beq.n	800ca36 <_svfprintf_r+0x8de>
 800c9f6:	2700      	movs	r7, #0
 800c9f8:	2e00      	cmp	r6, #0
 800c9fa:	9707      	str	r7, [sp, #28]
 800c9fc:	f77f af32 	ble.w	800c864 <_svfprintf_r+0x70c>
 800ca00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca02:	781b      	ldrb	r3, [r3, #0]
 800ca04:	2bff      	cmp	r3, #255	; 0xff
 800ca06:	d107      	bne.n	800ca18 <_svfprintf_r+0x8c0>
 800ca08:	9b07      	ldr	r3, [sp, #28]
 800ca0a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ca0c:	443b      	add	r3, r7
 800ca0e:	fb02 5503 	mla	r5, r2, r3, r5
 800ca12:	e727      	b.n	800c864 <_svfprintf_r+0x70c>
 800ca14:	4635      	mov	r5, r6
 800ca16:	e7d9      	b.n	800c9cc <_svfprintf_r+0x874>
 800ca18:	42b3      	cmp	r3, r6
 800ca1a:	daf5      	bge.n	800ca08 <_svfprintf_r+0x8b0>
 800ca1c:	1af6      	subs	r6, r6, r3
 800ca1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca20:	785b      	ldrb	r3, [r3, #1]
 800ca22:	b133      	cbz	r3, 800ca32 <_svfprintf_r+0x8da>
 800ca24:	9b07      	ldr	r3, [sp, #28]
 800ca26:	3301      	adds	r3, #1
 800ca28:	9307      	str	r3, [sp, #28]
 800ca2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca2c:	3301      	adds	r3, #1
 800ca2e:	9309      	str	r3, [sp, #36]	; 0x24
 800ca30:	e7e6      	b.n	800ca00 <_svfprintf_r+0x8a8>
 800ca32:	3701      	adds	r7, #1
 800ca34:	e7e4      	b.n	800ca00 <_svfprintf_r+0x8a8>
 800ca36:	9f07      	ldr	r7, [sp, #28]
 800ca38:	e714      	b.n	800c864 <_svfprintf_r+0x70c>
 800ca3a:	4632      	mov	r2, r6
 800ca3c:	f01a 0f20 	tst.w	sl, #32
 800ca40:	f852 3b04 	ldr.w	r3, [r2], #4
 800ca44:	9208      	str	r2, [sp, #32]
 800ca46:	d009      	beq.n	800ca5c <_svfprintf_r+0x904>
 800ca48:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ca4a:	4610      	mov	r0, r2
 800ca4c:	17d1      	asrs	r1, r2, #31
 800ca4e:	e9c3 0100 	strd	r0, r1, [r3]
 800ca52:	9e08      	ldr	r6, [sp, #32]
 800ca54:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
 800ca58:	f7ff bbba 	b.w	800c1d0 <_svfprintf_r+0x78>
 800ca5c:	f01a 0f10 	tst.w	sl, #16
 800ca60:	d002      	beq.n	800ca68 <_svfprintf_r+0x910>
 800ca62:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ca64:	601a      	str	r2, [r3, #0]
 800ca66:	e7f4      	b.n	800ca52 <_svfprintf_r+0x8fa>
 800ca68:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800ca6c:	d002      	beq.n	800ca74 <_svfprintf_r+0x91c>
 800ca6e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ca70:	801a      	strh	r2, [r3, #0]
 800ca72:	e7ee      	b.n	800ca52 <_svfprintf_r+0x8fa>
 800ca74:	f41a 7f00 	tst.w	sl, #512	; 0x200
 800ca78:	d0f3      	beq.n	800ca62 <_svfprintf_r+0x90a>
 800ca7a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ca7c:	701a      	strb	r2, [r3, #0]
 800ca7e:	e7e8      	b.n	800ca52 <_svfprintf_r+0x8fa>
 800ca80:	f04a 0a10 	orr.w	sl, sl, #16
 800ca84:	f01a 0f20 	tst.w	sl, #32
 800ca88:	d01e      	beq.n	800cac8 <_svfprintf_r+0x970>
 800ca8a:	3607      	adds	r6, #7
 800ca8c:	f026 0607 	bic.w	r6, r6, #7
 800ca90:	f106 0308 	add.w	r3, r6, #8
 800ca94:	e9d6 6700 	ldrd	r6, r7, [r6]
 800ca98:	9308      	str	r3, [sp, #32]
 800ca9a:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 800ca9e:	2300      	movs	r3, #0
 800caa0:	2200      	movs	r2, #0
 800caa2:	1c69      	adds	r1, r5, #1
 800caa4:	f88d 207b 	strb.w	r2, [sp, #123]	; 0x7b
 800caa8:	f000 815b 	beq.w	800cd62 <_svfprintf_r+0xc0a>
 800caac:	4652      	mov	r2, sl
 800caae:	ea56 0107 	orrs.w	r1, r6, r7
 800cab2:	f02a 0a80 	bic.w	sl, sl, #128	; 0x80
 800cab6:	f040 8154 	bne.w	800cd62 <_svfprintf_r+0xc0a>
 800caba:	2d00      	cmp	r5, #0
 800cabc:	f000 81d5 	beq.w	800ce6a <_svfprintf_r+0xd12>
 800cac0:	2b01      	cmp	r3, #1
 800cac2:	f040 8151 	bne.w	800cd68 <_svfprintf_r+0xc10>
 800cac6:	e558      	b.n	800c57a <_svfprintf_r+0x422>
 800cac8:	1d33      	adds	r3, r6, #4
 800caca:	f01a 0f10 	tst.w	sl, #16
 800cace:	9308      	str	r3, [sp, #32]
 800cad0:	d001      	beq.n	800cad6 <_svfprintf_r+0x97e>
 800cad2:	6836      	ldr	r6, [r6, #0]
 800cad4:	e003      	b.n	800cade <_svfprintf_r+0x986>
 800cad6:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800cada:	d002      	beq.n	800cae2 <_svfprintf_r+0x98a>
 800cadc:	8836      	ldrh	r6, [r6, #0]
 800cade:	2700      	movs	r7, #0
 800cae0:	e7db      	b.n	800ca9a <_svfprintf_r+0x942>
 800cae2:	f41a 7f00 	tst.w	sl, #512	; 0x200
 800cae6:	d0f4      	beq.n	800cad2 <_svfprintf_r+0x97a>
 800cae8:	7836      	ldrb	r6, [r6, #0]
 800caea:	e7f8      	b.n	800cade <_svfprintf_r+0x986>
 800caec:	1d33      	adds	r3, r6, #4
 800caee:	9308      	str	r3, [sp, #32]
 800caf0:	f647 0330 	movw	r3, #30768	; 0x7830
 800caf4:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
 800caf8:	2278      	movs	r2, #120	; 0x78
 800cafa:	4bb0      	ldr	r3, [pc, #704]	; (800cdbc <_svfprintf_r+0xc64>)
 800cafc:	9318      	str	r3, [sp, #96]	; 0x60
 800cafe:	6836      	ldr	r6, [r6, #0]
 800cb00:	9206      	str	r2, [sp, #24]
 800cb02:	2700      	movs	r7, #0
 800cb04:	f04a 0a02 	orr.w	sl, sl, #2
 800cb08:	2302      	movs	r3, #2
 800cb0a:	e7c9      	b.n	800caa0 <_svfprintf_r+0x948>
 800cb0c:	1d33      	adds	r3, r6, #4
 800cb0e:	f8d6 b000 	ldr.w	fp, [r6]
 800cb12:	9308      	str	r3, [sp, #32]
 800cb14:	2600      	movs	r6, #0
 800cb16:	1c68      	adds	r0, r5, #1
 800cb18:	f88d 607b 	strb.w	r6, [sp, #123]	; 0x7b
 800cb1c:	f000 80e1 	beq.w	800cce2 <_svfprintf_r+0xb8a>
 800cb20:	462a      	mov	r2, r5
 800cb22:	4631      	mov	r1, r6
 800cb24:	4658      	mov	r0, fp
 800cb26:	f7f3 fb6b 	bl	8000200 <memchr>
 800cb2a:	4681      	mov	r9, r0
 800cb2c:	2800      	cmp	r0, #0
 800cb2e:	f43f ad74 	beq.w	800c61a <_svfprintf_r+0x4c2>
 800cb32:	eba0 050b 	sub.w	r5, r0, fp
 800cb36:	46b1      	mov	r9, r6
 800cb38:	9610      	str	r6, [sp, #64]	; 0x40
 800cb3a:	4637      	mov	r7, r6
 800cb3c:	9607      	str	r6, [sp, #28]
 800cb3e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cb40:	42ab      	cmp	r3, r5
 800cb42:	bfb8      	it	lt
 800cb44:	462b      	movlt	r3, r5
 800cb46:	9311      	str	r3, [sp, #68]	; 0x44
 800cb48:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 800cb4c:	b113      	cbz	r3, 800cb54 <_svfprintf_r+0x9fc>
 800cb4e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cb50:	3301      	adds	r3, #1
 800cb52:	9311      	str	r3, [sp, #68]	; 0x44
 800cb54:	f01a 0302 	ands.w	r3, sl, #2
 800cb58:	931c      	str	r3, [sp, #112]	; 0x70
 800cb5a:	bf1e      	ittt	ne
 800cb5c:	9b11      	ldrne	r3, [sp, #68]	; 0x44
 800cb5e:	3302      	addne	r3, #2
 800cb60:	9311      	strne	r3, [sp, #68]	; 0x44
 800cb62:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
 800cb66:	931d      	str	r3, [sp, #116]	; 0x74
 800cb68:	d122      	bne.n	800cbb0 <_svfprintf_r+0xa58>
 800cb6a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cb6c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800cb6e:	1a9b      	subs	r3, r3, r2
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	9313      	str	r3, [sp, #76]	; 0x4c
 800cb74:	dd1c      	ble.n	800cbb0 <_svfprintf_r+0xa58>
 800cb76:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800cb78:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	; 0x9c
 800cb7c:	2810      	cmp	r0, #16
 800cb7e:	4890      	ldr	r0, [pc, #576]	; (800cdc0 <_svfprintf_r+0xc68>)
 800cb80:	6020      	str	r0, [r4, #0]
 800cb82:	f102 0201 	add.w	r2, r2, #1
 800cb86:	f104 0108 	add.w	r1, r4, #8
 800cb8a:	f300 8188 	bgt.w	800ce9e <_svfprintf_r+0xd46>
 800cb8e:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800cb90:	6060      	str	r0, [r4, #4]
 800cb92:	4403      	add	r3, r0
 800cb94:	2a07      	cmp	r2, #7
 800cb96:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 800cb9a:	f340 8195 	ble.w	800cec8 <_svfprintf_r+0xd70>
 800cb9e:	aa26      	add	r2, sp, #152	; 0x98
 800cba0:	4641      	mov	r1, r8
 800cba2:	9803      	ldr	r0, [sp, #12]
 800cba4:	f002 fee6 	bl	800f974 <__ssprint_r>
 800cba8:	2800      	cmp	r0, #0
 800cbaa:	f040 84c1 	bne.w	800d530 <_svfprintf_r+0x13d8>
 800cbae:	ac29      	add	r4, sp, #164	; 0xa4
 800cbb0:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 800cbb4:	b173      	cbz	r3, 800cbd4 <_svfprintf_r+0xa7c>
 800cbb6:	f10d 037b 	add.w	r3, sp, #123	; 0x7b
 800cbba:	6023      	str	r3, [r4, #0]
 800cbbc:	2301      	movs	r3, #1
 800cbbe:	6063      	str	r3, [r4, #4]
 800cbc0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800cbc2:	3301      	adds	r3, #1
 800cbc4:	9328      	str	r3, [sp, #160]	; 0xa0
 800cbc6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800cbc8:	3301      	adds	r3, #1
 800cbca:	2b07      	cmp	r3, #7
 800cbcc:	9327      	str	r3, [sp, #156]	; 0x9c
 800cbce:	f300 817d 	bgt.w	800cecc <_svfprintf_r+0xd74>
 800cbd2:	3408      	adds	r4, #8
 800cbd4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800cbd6:	b16b      	cbz	r3, 800cbf4 <_svfprintf_r+0xa9c>
 800cbd8:	ab1f      	add	r3, sp, #124	; 0x7c
 800cbda:	6023      	str	r3, [r4, #0]
 800cbdc:	2302      	movs	r3, #2
 800cbde:	6063      	str	r3, [r4, #4]
 800cbe0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800cbe2:	3302      	adds	r3, #2
 800cbe4:	9328      	str	r3, [sp, #160]	; 0xa0
 800cbe6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800cbe8:	3301      	adds	r3, #1
 800cbea:	2b07      	cmp	r3, #7
 800cbec:	9327      	str	r3, [sp, #156]	; 0x9c
 800cbee:	f300 8177 	bgt.w	800cee0 <_svfprintf_r+0xd88>
 800cbf2:	3408      	adds	r4, #8
 800cbf4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800cbf6:	2b80      	cmp	r3, #128	; 0x80
 800cbf8:	d122      	bne.n	800cc40 <_svfprintf_r+0xae8>
 800cbfa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cbfc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800cbfe:	1a9b      	subs	r3, r3, r2
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	9313      	str	r3, [sp, #76]	; 0x4c
 800cc04:	dd1c      	ble.n	800cc40 <_svfprintf_r+0xae8>
 800cc06:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800cc08:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	; 0x9c
 800cc0c:	2810      	cmp	r0, #16
 800cc0e:	486d      	ldr	r0, [pc, #436]	; (800cdc4 <_svfprintf_r+0xc6c>)
 800cc10:	6020      	str	r0, [r4, #0]
 800cc12:	f102 0201 	add.w	r2, r2, #1
 800cc16:	f104 0108 	add.w	r1, r4, #8
 800cc1a:	f300 816b 	bgt.w	800cef4 <_svfprintf_r+0xd9c>
 800cc1e:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800cc20:	6060      	str	r0, [r4, #4]
 800cc22:	4403      	add	r3, r0
 800cc24:	2a07      	cmp	r2, #7
 800cc26:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 800cc2a:	f340 8178 	ble.w	800cf1e <_svfprintf_r+0xdc6>
 800cc2e:	aa26      	add	r2, sp, #152	; 0x98
 800cc30:	4641      	mov	r1, r8
 800cc32:	9803      	ldr	r0, [sp, #12]
 800cc34:	f002 fe9e 	bl	800f974 <__ssprint_r>
 800cc38:	2800      	cmp	r0, #0
 800cc3a:	f040 8479 	bne.w	800d530 <_svfprintf_r+0x13d8>
 800cc3e:	ac29      	add	r4, sp, #164	; 0xa4
 800cc40:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cc42:	1b5b      	subs	r3, r3, r5
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	9310      	str	r3, [sp, #64]	; 0x40
 800cc48:	dd1c      	ble.n	800cc84 <_svfprintf_r+0xb2c>
 800cc4a:	9810      	ldr	r0, [sp, #64]	; 0x40
 800cc4c:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	; 0x9c
 800cc50:	2810      	cmp	r0, #16
 800cc52:	485c      	ldr	r0, [pc, #368]	; (800cdc4 <_svfprintf_r+0xc6c>)
 800cc54:	6020      	str	r0, [r4, #0]
 800cc56:	f102 0201 	add.w	r2, r2, #1
 800cc5a:	f104 0108 	add.w	r1, r4, #8
 800cc5e:	f300 8160 	bgt.w	800cf22 <_svfprintf_r+0xdca>
 800cc62:	9810      	ldr	r0, [sp, #64]	; 0x40
 800cc64:	6060      	str	r0, [r4, #4]
 800cc66:	4403      	add	r3, r0
 800cc68:	2a07      	cmp	r2, #7
 800cc6a:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 800cc6e:	f340 816d 	ble.w	800cf4c <_svfprintf_r+0xdf4>
 800cc72:	aa26      	add	r2, sp, #152	; 0x98
 800cc74:	4641      	mov	r1, r8
 800cc76:	9803      	ldr	r0, [sp, #12]
 800cc78:	f002 fe7c 	bl	800f974 <__ssprint_r>
 800cc7c:	2800      	cmp	r0, #0
 800cc7e:	f040 8457 	bne.w	800d530 <_svfprintf_r+0x13d8>
 800cc82:	ac29      	add	r4, sp, #164	; 0xa4
 800cc84:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800cc86:	9310      	str	r3, [sp, #64]	; 0x40
 800cc88:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800cc8c:	f040 8160 	bne.w	800cf50 <_svfprintf_r+0xdf8>
 800cc90:	e9c4 b500 	strd	fp, r5, [r4]
 800cc94:	441d      	add	r5, r3
 800cc96:	9528      	str	r5, [sp, #160]	; 0xa0
 800cc98:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800cc9a:	3301      	adds	r3, #1
 800cc9c:	2b07      	cmp	r3, #7
 800cc9e:	9327      	str	r3, [sp, #156]	; 0x9c
 800cca0:	f300 819c 	bgt.w	800cfdc <_svfprintf_r+0xe84>
 800cca4:	3408      	adds	r4, #8
 800cca6:	f01a 0f04 	tst.w	sl, #4
 800ccaa:	f040 8423 	bne.w	800d4f4 <_svfprintf_r+0x139c>
 800ccae:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 800ccb2:	9911      	ldr	r1, [sp, #68]	; 0x44
 800ccb4:	428a      	cmp	r2, r1
 800ccb6:	bfac      	ite	ge
 800ccb8:	189b      	addge	r3, r3, r2
 800ccba:	185b      	addlt	r3, r3, r1
 800ccbc:	930e      	str	r3, [sp, #56]	; 0x38
 800ccbe:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800ccc0:	b13b      	cbz	r3, 800ccd2 <_svfprintf_r+0xb7a>
 800ccc2:	aa26      	add	r2, sp, #152	; 0x98
 800ccc4:	4641      	mov	r1, r8
 800ccc6:	9803      	ldr	r0, [sp, #12]
 800ccc8:	f002 fe54 	bl	800f974 <__ssprint_r>
 800cccc:	2800      	cmp	r0, #0
 800ccce:	f040 842f 	bne.w	800d530 <_svfprintf_r+0x13d8>
 800ccd2:	2300      	movs	r3, #0
 800ccd4:	9327      	str	r3, [sp, #156]	; 0x9c
 800ccd6:	f1b9 0f00 	cmp.w	r9, #0
 800ccda:	f040 8445 	bne.w	800d568 <_svfprintf_r+0x1410>
 800ccde:	ac29      	add	r4, sp, #164	; 0xa4
 800cce0:	e6b7      	b.n	800ca52 <_svfprintf_r+0x8fa>
 800cce2:	4658      	mov	r0, fp
 800cce4:	f7f3 fa7e 	bl	80001e4 <strlen>
 800cce8:	46b1      	mov	r9, r6
 800ccea:	4605      	mov	r5, r0
 800ccec:	e495      	b.n	800c61a <_svfprintf_r+0x4c2>
 800ccee:	f04a 0a10 	orr.w	sl, sl, #16
 800ccf2:	f01a 0f20 	tst.w	sl, #32
 800ccf6:	d009      	beq.n	800cd0c <_svfprintf_r+0xbb4>
 800ccf8:	3607      	adds	r6, #7
 800ccfa:	f026 0607 	bic.w	r6, r6, #7
 800ccfe:	f106 0308 	add.w	r3, r6, #8
 800cd02:	e9d6 6700 	ldrd	r6, r7, [r6]
 800cd06:	9308      	str	r3, [sp, #32]
 800cd08:	2301      	movs	r3, #1
 800cd0a:	e6c9      	b.n	800caa0 <_svfprintf_r+0x948>
 800cd0c:	1d33      	adds	r3, r6, #4
 800cd0e:	f01a 0f10 	tst.w	sl, #16
 800cd12:	9308      	str	r3, [sp, #32]
 800cd14:	d001      	beq.n	800cd1a <_svfprintf_r+0xbc2>
 800cd16:	6836      	ldr	r6, [r6, #0]
 800cd18:	e003      	b.n	800cd22 <_svfprintf_r+0xbca>
 800cd1a:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800cd1e:	d002      	beq.n	800cd26 <_svfprintf_r+0xbce>
 800cd20:	8836      	ldrh	r6, [r6, #0]
 800cd22:	2700      	movs	r7, #0
 800cd24:	e7f0      	b.n	800cd08 <_svfprintf_r+0xbb0>
 800cd26:	f41a 7f00 	tst.w	sl, #512	; 0x200
 800cd2a:	d0f4      	beq.n	800cd16 <_svfprintf_r+0xbbe>
 800cd2c:	7836      	ldrb	r6, [r6, #0]
 800cd2e:	e7f8      	b.n	800cd22 <_svfprintf_r+0xbca>
 800cd30:	4b22      	ldr	r3, [pc, #136]	; (800cdbc <_svfprintf_r+0xc64>)
 800cd32:	f7ff bb48 	b.w	800c3c6 <_svfprintf_r+0x26e>
 800cd36:	1d33      	adds	r3, r6, #4
 800cd38:	f01a 0f10 	tst.w	sl, #16
 800cd3c:	9308      	str	r3, [sp, #32]
 800cd3e:	d001      	beq.n	800cd44 <_svfprintf_r+0xbec>
 800cd40:	6836      	ldr	r6, [r6, #0]
 800cd42:	e003      	b.n	800cd4c <_svfprintf_r+0xbf4>
 800cd44:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800cd48:	d003      	beq.n	800cd52 <_svfprintf_r+0xbfa>
 800cd4a:	8836      	ldrh	r6, [r6, #0]
 800cd4c:	2700      	movs	r7, #0
 800cd4e:	f7ff bb47 	b.w	800c3e0 <_svfprintf_r+0x288>
 800cd52:	f41a 7f00 	tst.w	sl, #512	; 0x200
 800cd56:	d0f3      	beq.n	800cd40 <_svfprintf_r+0xbe8>
 800cd58:	7836      	ldrb	r6, [r6, #0]
 800cd5a:	e7f7      	b.n	800cd4c <_svfprintf_r+0xbf4>
 800cd5c:	4652      	mov	r2, sl
 800cd5e:	2301      	movs	r3, #1
 800cd60:	e6a5      	b.n	800caae <_svfprintf_r+0x956>
 800cd62:	2b01      	cmp	r3, #1
 800cd64:	f43f ac04 	beq.w	800c570 <_svfprintf_r+0x418>
 800cd68:	2b02      	cmp	r3, #2
 800cd6a:	d06c      	beq.n	800ce46 <_svfprintf_r+0xcee>
 800cd6c:	ab52      	add	r3, sp, #328	; 0x148
 800cd6e:	08f1      	lsrs	r1, r6, #3
 800cd70:	ea41 7147 	orr.w	r1, r1, r7, lsl #29
 800cd74:	08f8      	lsrs	r0, r7, #3
 800cd76:	f006 0207 	and.w	r2, r6, #7
 800cd7a:	4607      	mov	r7, r0
 800cd7c:	460e      	mov	r6, r1
 800cd7e:	3230      	adds	r2, #48	; 0x30
 800cd80:	ea56 0107 	orrs.w	r1, r6, r7
 800cd84:	f103 3bff 	add.w	fp, r3, #4294967295
 800cd88:	f803 2c01 	strb.w	r2, [r3, #-1]
 800cd8c:	d114      	bne.n	800cdb8 <_svfprintf_r+0xc60>
 800cd8e:	f01a 0f01 	tst.w	sl, #1
 800cd92:	d006      	beq.n	800cda2 <_svfprintf_r+0xc4a>
 800cd94:	2a30      	cmp	r2, #48	; 0x30
 800cd96:	d004      	beq.n	800cda2 <_svfprintf_r+0xc4a>
 800cd98:	2230      	movs	r2, #48	; 0x30
 800cd9a:	f80b 2c01 	strb.w	r2, [fp, #-1]
 800cd9e:	f1a3 0b02 	sub.w	fp, r3, #2
 800cda2:	ab52      	add	r3, sp, #328	; 0x148
 800cda4:	9510      	str	r5, [sp, #64]	; 0x40
 800cda6:	f04f 0900 	mov.w	r9, #0
 800cdaa:	eba3 050b 	sub.w	r5, r3, fp
 800cdae:	464f      	mov	r7, r9
 800cdb0:	f8cd 901c 	str.w	r9, [sp, #28]
 800cdb4:	464e      	mov	r6, r9
 800cdb6:	e6c2      	b.n	800cb3e <_svfprintf_r+0x9e6>
 800cdb8:	465b      	mov	r3, fp
 800cdba:	e7d8      	b.n	800cd6e <_svfprintf_r+0xc16>
 800cdbc:	08010340 	.word	0x08010340
 800cdc0:	08010364 	.word	0x08010364
 800cdc4:	08010374 	.word	0x08010374
 800cdc8:	2300      	movs	r3, #0
 800cdca:	9304      	str	r3, [sp, #16]
 800cdcc:	f40a 6380 	and.w	r3, sl, #1024	; 0x400
 800cdd0:	f50d 79a4 	add.w	r9, sp, #328	; 0x148
 800cdd4:	9307      	str	r3, [sp, #28]
 800cdd6:	220a      	movs	r2, #10
 800cdd8:	2300      	movs	r3, #0
 800cdda:	4630      	mov	r0, r6
 800cddc:	4639      	mov	r1, r7
 800cdde:	f7f3 ff63 	bl	8000ca8 <__aeabi_uldivmod>
 800cde2:	9b04      	ldr	r3, [sp, #16]
 800cde4:	3301      	adds	r3, #1
 800cde6:	9304      	str	r3, [sp, #16]
 800cde8:	9b07      	ldr	r3, [sp, #28]
 800cdea:	3230      	adds	r2, #48	; 0x30
 800cdec:	f109 3bff 	add.w	fp, r9, #4294967295
 800cdf0:	f809 2c01 	strb.w	r2, [r9, #-1]
 800cdf4:	b1d3      	cbz	r3, 800ce2c <_svfprintf_r+0xcd4>
 800cdf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cdf8:	9a04      	ldr	r2, [sp, #16]
 800cdfa:	781b      	ldrb	r3, [r3, #0]
 800cdfc:	429a      	cmp	r2, r3
 800cdfe:	d115      	bne.n	800ce2c <_svfprintf_r+0xcd4>
 800ce00:	2aff      	cmp	r2, #255	; 0xff
 800ce02:	d013      	beq.n	800ce2c <_svfprintf_r+0xcd4>
 800ce04:	2f00      	cmp	r7, #0
 800ce06:	bf08      	it	eq
 800ce08:	2e0a      	cmpeq	r6, #10
 800ce0a:	d30f      	bcc.n	800ce2c <_svfprintf_r+0xcd4>
 800ce0c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ce0e:	9919      	ldr	r1, [sp, #100]	; 0x64
 800ce10:	ebab 0b03 	sub.w	fp, fp, r3
 800ce14:	461a      	mov	r2, r3
 800ce16:	4658      	mov	r0, fp
 800ce18:	f7fe fb63 	bl	800b4e2 <strncpy>
 800ce1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce1e:	785b      	ldrb	r3, [r3, #1]
 800ce20:	b11b      	cbz	r3, 800ce2a <_svfprintf_r+0xcd2>
 800ce22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce24:	3301      	adds	r3, #1
 800ce26:	9309      	str	r3, [sp, #36]	; 0x24
 800ce28:	2300      	movs	r3, #0
 800ce2a:	9304      	str	r3, [sp, #16]
 800ce2c:	2300      	movs	r3, #0
 800ce2e:	4630      	mov	r0, r6
 800ce30:	4639      	mov	r1, r7
 800ce32:	220a      	movs	r2, #10
 800ce34:	f7f3 ff38 	bl	8000ca8 <__aeabi_uldivmod>
 800ce38:	4606      	mov	r6, r0
 800ce3a:	460f      	mov	r7, r1
 800ce3c:	ea56 0307 	orrs.w	r3, r6, r7
 800ce40:	d0af      	beq.n	800cda2 <_svfprintf_r+0xc4a>
 800ce42:	46d9      	mov	r9, fp
 800ce44:	e7c7      	b.n	800cdd6 <_svfprintf_r+0xc7e>
 800ce46:	f50d 7ba4 	add.w	fp, sp, #328	; 0x148
 800ce4a:	f006 030f 	and.w	r3, r6, #15
 800ce4e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800ce50:	5cd3      	ldrb	r3, [r2, r3]
 800ce52:	f80b 3d01 	strb.w	r3, [fp, #-1]!
 800ce56:	0933      	lsrs	r3, r6, #4
 800ce58:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 800ce5c:	093a      	lsrs	r2, r7, #4
 800ce5e:	461e      	mov	r6, r3
 800ce60:	4617      	mov	r7, r2
 800ce62:	ea56 0307 	orrs.w	r3, r6, r7
 800ce66:	d1f0      	bne.n	800ce4a <_svfprintf_r+0xcf2>
 800ce68:	e79b      	b.n	800cda2 <_svfprintf_r+0xc4a>
 800ce6a:	f50d 7ba4 	add.w	fp, sp, #328	; 0x148
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	d197      	bne.n	800cda2 <_svfprintf_r+0xc4a>
 800ce72:	07d2      	lsls	r2, r2, #31
 800ce74:	bf44      	itt	mi
 800ce76:	2330      	movmi	r3, #48	; 0x30
 800ce78:	f80b 3d01 	strbmi.w	r3, [fp, #-1]!
 800ce7c:	e791      	b.n	800cda2 <_svfprintf_r+0xc4a>
 800ce7e:	9b06      	ldr	r3, [sp, #24]
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	f000 8377 	beq.w	800d574 <_svfprintf_r+0x141c>
 800ce86:	2000      	movs	r0, #0
 800ce88:	f88d 30e4 	strb.w	r3, [sp, #228]	; 0xe4
 800ce8c:	f88d 007b 	strb.w	r0, [sp, #123]	; 0x7b
 800ce90:	9608      	str	r6, [sp, #32]
 800ce92:	f7ff bb49 	b.w	800c528 <_svfprintf_r+0x3d0>
 800ce96:	f8dd a040 	ldr.w	sl, [sp, #64]	; 0x40
 800ce9a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ce9c:	e4ec      	b.n	800c878 <_svfprintf_r+0x720>
 800ce9e:	2010      	movs	r0, #16
 800cea0:	4403      	add	r3, r0
 800cea2:	2a07      	cmp	r2, #7
 800cea4:	6060      	str	r0, [r4, #4]
 800cea6:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 800ceaa:	dd08      	ble.n	800cebe <_svfprintf_r+0xd66>
 800ceac:	aa26      	add	r2, sp, #152	; 0x98
 800ceae:	4641      	mov	r1, r8
 800ceb0:	9803      	ldr	r0, [sp, #12]
 800ceb2:	f002 fd5f 	bl	800f974 <__ssprint_r>
 800ceb6:	2800      	cmp	r0, #0
 800ceb8:	f040 833a 	bne.w	800d530 <_svfprintf_r+0x13d8>
 800cebc:	a929      	add	r1, sp, #164	; 0xa4
 800cebe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800cec0:	3b10      	subs	r3, #16
 800cec2:	9313      	str	r3, [sp, #76]	; 0x4c
 800cec4:	460c      	mov	r4, r1
 800cec6:	e656      	b.n	800cb76 <_svfprintf_r+0xa1e>
 800cec8:	460c      	mov	r4, r1
 800ceca:	e671      	b.n	800cbb0 <_svfprintf_r+0xa58>
 800cecc:	aa26      	add	r2, sp, #152	; 0x98
 800cece:	4641      	mov	r1, r8
 800ced0:	9803      	ldr	r0, [sp, #12]
 800ced2:	f002 fd4f 	bl	800f974 <__ssprint_r>
 800ced6:	2800      	cmp	r0, #0
 800ced8:	f040 832a 	bne.w	800d530 <_svfprintf_r+0x13d8>
 800cedc:	ac29      	add	r4, sp, #164	; 0xa4
 800cede:	e679      	b.n	800cbd4 <_svfprintf_r+0xa7c>
 800cee0:	aa26      	add	r2, sp, #152	; 0x98
 800cee2:	4641      	mov	r1, r8
 800cee4:	9803      	ldr	r0, [sp, #12]
 800cee6:	f002 fd45 	bl	800f974 <__ssprint_r>
 800ceea:	2800      	cmp	r0, #0
 800ceec:	f040 8320 	bne.w	800d530 <_svfprintf_r+0x13d8>
 800cef0:	ac29      	add	r4, sp, #164	; 0xa4
 800cef2:	e67f      	b.n	800cbf4 <_svfprintf_r+0xa9c>
 800cef4:	2010      	movs	r0, #16
 800cef6:	4403      	add	r3, r0
 800cef8:	2a07      	cmp	r2, #7
 800cefa:	6060      	str	r0, [r4, #4]
 800cefc:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 800cf00:	dd08      	ble.n	800cf14 <_svfprintf_r+0xdbc>
 800cf02:	aa26      	add	r2, sp, #152	; 0x98
 800cf04:	4641      	mov	r1, r8
 800cf06:	9803      	ldr	r0, [sp, #12]
 800cf08:	f002 fd34 	bl	800f974 <__ssprint_r>
 800cf0c:	2800      	cmp	r0, #0
 800cf0e:	f040 830f 	bne.w	800d530 <_svfprintf_r+0x13d8>
 800cf12:	a929      	add	r1, sp, #164	; 0xa4
 800cf14:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800cf16:	3b10      	subs	r3, #16
 800cf18:	9313      	str	r3, [sp, #76]	; 0x4c
 800cf1a:	460c      	mov	r4, r1
 800cf1c:	e673      	b.n	800cc06 <_svfprintf_r+0xaae>
 800cf1e:	460c      	mov	r4, r1
 800cf20:	e68e      	b.n	800cc40 <_svfprintf_r+0xae8>
 800cf22:	2010      	movs	r0, #16
 800cf24:	4403      	add	r3, r0
 800cf26:	2a07      	cmp	r2, #7
 800cf28:	6060      	str	r0, [r4, #4]
 800cf2a:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 800cf2e:	dd08      	ble.n	800cf42 <_svfprintf_r+0xdea>
 800cf30:	aa26      	add	r2, sp, #152	; 0x98
 800cf32:	4641      	mov	r1, r8
 800cf34:	9803      	ldr	r0, [sp, #12]
 800cf36:	f002 fd1d 	bl	800f974 <__ssprint_r>
 800cf3a:	2800      	cmp	r0, #0
 800cf3c:	f040 82f8 	bne.w	800d530 <_svfprintf_r+0x13d8>
 800cf40:	a929      	add	r1, sp, #164	; 0xa4
 800cf42:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cf44:	3b10      	subs	r3, #16
 800cf46:	9310      	str	r3, [sp, #64]	; 0x40
 800cf48:	460c      	mov	r4, r1
 800cf4a:	e67e      	b.n	800cc4a <_svfprintf_r+0xaf2>
 800cf4c:	460c      	mov	r4, r1
 800cf4e:	e699      	b.n	800cc84 <_svfprintf_r+0xb2c>
 800cf50:	9b06      	ldr	r3, [sp, #24]
 800cf52:	2b65      	cmp	r3, #101	; 0x65
 800cf54:	f340 8234 	ble.w	800d3c0 <_svfprintf_r+0x1268>
 800cf58:	2200      	movs	r2, #0
 800cf5a:	2300      	movs	r3, #0
 800cf5c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800cf60:	f7f3 fdc2 	bl	8000ae8 <__aeabi_dcmpeq>
 800cf64:	2800      	cmp	r0, #0
 800cf66:	d069      	beq.n	800d03c <_svfprintf_r+0xee4>
 800cf68:	4b6e      	ldr	r3, [pc, #440]	; (800d124 <_svfprintf_r+0xfcc>)
 800cf6a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800cf6c:	6023      	str	r3, [r4, #0]
 800cf6e:	2301      	movs	r3, #1
 800cf70:	441d      	add	r5, r3
 800cf72:	6063      	str	r3, [r4, #4]
 800cf74:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800cf76:	9528      	str	r5, [sp, #160]	; 0xa0
 800cf78:	3301      	adds	r3, #1
 800cf7a:	2b07      	cmp	r3, #7
 800cf7c:	9327      	str	r3, [sp, #156]	; 0x9c
 800cf7e:	dc37      	bgt.n	800cff0 <_svfprintf_r+0xe98>
 800cf80:	3408      	adds	r4, #8
 800cf82:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800cf84:	9a04      	ldr	r2, [sp, #16]
 800cf86:	4293      	cmp	r3, r2
 800cf88:	db03      	blt.n	800cf92 <_svfprintf_r+0xe3a>
 800cf8a:	f01a 0f01 	tst.w	sl, #1
 800cf8e:	f43f ae8a 	beq.w	800cca6 <_svfprintf_r+0xb4e>
 800cf92:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800cf94:	6023      	str	r3, [r4, #0]
 800cf96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cf98:	6063      	str	r3, [r4, #4]
 800cf9a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800cf9c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800cf9e:	4413      	add	r3, r2
 800cfa0:	9328      	str	r3, [sp, #160]	; 0xa0
 800cfa2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800cfa4:	3301      	adds	r3, #1
 800cfa6:	2b07      	cmp	r3, #7
 800cfa8:	9327      	str	r3, [sp, #156]	; 0x9c
 800cfaa:	dc2b      	bgt.n	800d004 <_svfprintf_r+0xeac>
 800cfac:	3408      	adds	r4, #8
 800cfae:	9b04      	ldr	r3, [sp, #16]
 800cfb0:	1e5d      	subs	r5, r3, #1
 800cfb2:	2d00      	cmp	r5, #0
 800cfb4:	f77f ae77 	ble.w	800cca6 <_svfprintf_r+0xb4e>
 800cfb8:	4e5b      	ldr	r6, [pc, #364]	; (800d128 <_svfprintf_r+0xfd0>)
 800cfba:	2710      	movs	r7, #16
 800cfbc:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 800cfc0:	2d10      	cmp	r5, #16
 800cfc2:	f103 0301 	add.w	r3, r3, #1
 800cfc6:	f104 0108 	add.w	r1, r4, #8
 800cfca:	6026      	str	r6, [r4, #0]
 800cfcc:	dc24      	bgt.n	800d018 <_svfprintf_r+0xec0>
 800cfce:	6065      	str	r5, [r4, #4]
 800cfd0:	2b07      	cmp	r3, #7
 800cfd2:	4415      	add	r5, r2
 800cfd4:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 800cfd8:	f340 8289 	ble.w	800d4ee <_svfprintf_r+0x1396>
 800cfdc:	aa26      	add	r2, sp, #152	; 0x98
 800cfde:	4641      	mov	r1, r8
 800cfe0:	9803      	ldr	r0, [sp, #12]
 800cfe2:	f002 fcc7 	bl	800f974 <__ssprint_r>
 800cfe6:	2800      	cmp	r0, #0
 800cfe8:	f040 82a2 	bne.w	800d530 <_svfprintf_r+0x13d8>
 800cfec:	ac29      	add	r4, sp, #164	; 0xa4
 800cfee:	e65a      	b.n	800cca6 <_svfprintf_r+0xb4e>
 800cff0:	aa26      	add	r2, sp, #152	; 0x98
 800cff2:	4641      	mov	r1, r8
 800cff4:	9803      	ldr	r0, [sp, #12]
 800cff6:	f002 fcbd 	bl	800f974 <__ssprint_r>
 800cffa:	2800      	cmp	r0, #0
 800cffc:	f040 8298 	bne.w	800d530 <_svfprintf_r+0x13d8>
 800d000:	ac29      	add	r4, sp, #164	; 0xa4
 800d002:	e7be      	b.n	800cf82 <_svfprintf_r+0xe2a>
 800d004:	aa26      	add	r2, sp, #152	; 0x98
 800d006:	4641      	mov	r1, r8
 800d008:	9803      	ldr	r0, [sp, #12]
 800d00a:	f002 fcb3 	bl	800f974 <__ssprint_r>
 800d00e:	2800      	cmp	r0, #0
 800d010:	f040 828e 	bne.w	800d530 <_svfprintf_r+0x13d8>
 800d014:	ac29      	add	r4, sp, #164	; 0xa4
 800d016:	e7ca      	b.n	800cfae <_svfprintf_r+0xe56>
 800d018:	3210      	adds	r2, #16
 800d01a:	2b07      	cmp	r3, #7
 800d01c:	6067      	str	r7, [r4, #4]
 800d01e:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 800d022:	dd08      	ble.n	800d036 <_svfprintf_r+0xede>
 800d024:	aa26      	add	r2, sp, #152	; 0x98
 800d026:	4641      	mov	r1, r8
 800d028:	9803      	ldr	r0, [sp, #12]
 800d02a:	f002 fca3 	bl	800f974 <__ssprint_r>
 800d02e:	2800      	cmp	r0, #0
 800d030:	f040 827e 	bne.w	800d530 <_svfprintf_r+0x13d8>
 800d034:	a929      	add	r1, sp, #164	; 0xa4
 800d036:	3d10      	subs	r5, #16
 800d038:	460c      	mov	r4, r1
 800d03a:	e7bf      	b.n	800cfbc <_svfprintf_r+0xe64>
 800d03c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800d03e:	2b00      	cmp	r3, #0
 800d040:	dc74      	bgt.n	800d12c <_svfprintf_r+0xfd4>
 800d042:	4b38      	ldr	r3, [pc, #224]	; (800d124 <_svfprintf_r+0xfcc>)
 800d044:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800d046:	6023      	str	r3, [r4, #0]
 800d048:	2301      	movs	r3, #1
 800d04a:	441d      	add	r5, r3
 800d04c:	6063      	str	r3, [r4, #4]
 800d04e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800d050:	9528      	str	r5, [sp, #160]	; 0xa0
 800d052:	3301      	adds	r3, #1
 800d054:	2b07      	cmp	r3, #7
 800d056:	9327      	str	r3, [sp, #156]	; 0x9c
 800d058:	dc3e      	bgt.n	800d0d8 <_svfprintf_r+0xf80>
 800d05a:	3408      	adds	r4, #8
 800d05c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800d05e:	b92b      	cbnz	r3, 800d06c <_svfprintf_r+0xf14>
 800d060:	9b04      	ldr	r3, [sp, #16]
 800d062:	b91b      	cbnz	r3, 800d06c <_svfprintf_r+0xf14>
 800d064:	f01a 0f01 	tst.w	sl, #1
 800d068:	f43f ae1d 	beq.w	800cca6 <_svfprintf_r+0xb4e>
 800d06c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800d06e:	6023      	str	r3, [r4, #0]
 800d070:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d072:	6063      	str	r3, [r4, #4]
 800d074:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d076:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800d078:	4413      	add	r3, r2
 800d07a:	9328      	str	r3, [sp, #160]	; 0xa0
 800d07c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800d07e:	3301      	adds	r3, #1
 800d080:	2b07      	cmp	r3, #7
 800d082:	9327      	str	r3, [sp, #156]	; 0x9c
 800d084:	dc32      	bgt.n	800d0ec <_svfprintf_r+0xf94>
 800d086:	3408      	adds	r4, #8
 800d088:	9d20      	ldr	r5, [sp, #128]	; 0x80
 800d08a:	2d00      	cmp	r5, #0
 800d08c:	da1b      	bge.n	800d0c6 <_svfprintf_r+0xf6e>
 800d08e:	4e26      	ldr	r6, [pc, #152]	; (800d128 <_svfprintf_r+0xfd0>)
 800d090:	426d      	negs	r5, r5
 800d092:	4623      	mov	r3, r4
 800d094:	2710      	movs	r7, #16
 800d096:	e9dd 2127 	ldrd	r2, r1, [sp, #156]	; 0x9c
 800d09a:	2d10      	cmp	r5, #16
 800d09c:	f102 0201 	add.w	r2, r2, #1
 800d0a0:	f104 0408 	add.w	r4, r4, #8
 800d0a4:	601e      	str	r6, [r3, #0]
 800d0a6:	dc2b      	bgt.n	800d100 <_svfprintf_r+0xfa8>
 800d0a8:	605d      	str	r5, [r3, #4]
 800d0aa:	2a07      	cmp	r2, #7
 800d0ac:	440d      	add	r5, r1
 800d0ae:	e9cd 2527 	strd	r2, r5, [sp, #156]	; 0x9c
 800d0b2:	dd08      	ble.n	800d0c6 <_svfprintf_r+0xf6e>
 800d0b4:	aa26      	add	r2, sp, #152	; 0x98
 800d0b6:	4641      	mov	r1, r8
 800d0b8:	9803      	ldr	r0, [sp, #12]
 800d0ba:	f002 fc5b 	bl	800f974 <__ssprint_r>
 800d0be:	2800      	cmp	r0, #0
 800d0c0:	f040 8236 	bne.w	800d530 <_svfprintf_r+0x13d8>
 800d0c4:	ac29      	add	r4, sp, #164	; 0xa4
 800d0c6:	9b04      	ldr	r3, [sp, #16]
 800d0c8:	6063      	str	r3, [r4, #4]
 800d0ca:	9a04      	ldr	r2, [sp, #16]
 800d0cc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800d0ce:	f8c4 b000 	str.w	fp, [r4]
 800d0d2:	4413      	add	r3, r2
 800d0d4:	9328      	str	r3, [sp, #160]	; 0xa0
 800d0d6:	e5df      	b.n	800cc98 <_svfprintf_r+0xb40>
 800d0d8:	aa26      	add	r2, sp, #152	; 0x98
 800d0da:	4641      	mov	r1, r8
 800d0dc:	9803      	ldr	r0, [sp, #12]
 800d0de:	f002 fc49 	bl	800f974 <__ssprint_r>
 800d0e2:	2800      	cmp	r0, #0
 800d0e4:	f040 8224 	bne.w	800d530 <_svfprintf_r+0x13d8>
 800d0e8:	ac29      	add	r4, sp, #164	; 0xa4
 800d0ea:	e7b7      	b.n	800d05c <_svfprintf_r+0xf04>
 800d0ec:	aa26      	add	r2, sp, #152	; 0x98
 800d0ee:	4641      	mov	r1, r8
 800d0f0:	9803      	ldr	r0, [sp, #12]
 800d0f2:	f002 fc3f 	bl	800f974 <__ssprint_r>
 800d0f6:	2800      	cmp	r0, #0
 800d0f8:	f040 821a 	bne.w	800d530 <_svfprintf_r+0x13d8>
 800d0fc:	ac29      	add	r4, sp, #164	; 0xa4
 800d0fe:	e7c3      	b.n	800d088 <_svfprintf_r+0xf30>
 800d100:	3110      	adds	r1, #16
 800d102:	2a07      	cmp	r2, #7
 800d104:	605f      	str	r7, [r3, #4]
 800d106:	e9cd 2127 	strd	r2, r1, [sp, #156]	; 0x9c
 800d10a:	dd08      	ble.n	800d11e <_svfprintf_r+0xfc6>
 800d10c:	aa26      	add	r2, sp, #152	; 0x98
 800d10e:	4641      	mov	r1, r8
 800d110:	9803      	ldr	r0, [sp, #12]
 800d112:	f002 fc2f 	bl	800f974 <__ssprint_r>
 800d116:	2800      	cmp	r0, #0
 800d118:	f040 820a 	bne.w	800d530 <_svfprintf_r+0x13d8>
 800d11c:	ac29      	add	r4, sp, #164	; 0xa4
 800d11e:	3d10      	subs	r5, #16
 800d120:	4623      	mov	r3, r4
 800d122:	e7b8      	b.n	800d096 <_svfprintf_r+0xf3e>
 800d124:	08010362 	.word	0x08010362
 800d128:	08010374 	.word	0x08010374
 800d12c:	9b04      	ldr	r3, [sp, #16]
 800d12e:	42b3      	cmp	r3, r6
 800d130:	bfa8      	it	ge
 800d132:	4633      	movge	r3, r6
 800d134:	2b00      	cmp	r3, #0
 800d136:	461d      	mov	r5, r3
 800d138:	dd0b      	ble.n	800d152 <_svfprintf_r+0xffa>
 800d13a:	e9c4 b300 	strd	fp, r3, [r4]
 800d13e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d140:	442b      	add	r3, r5
 800d142:	9328      	str	r3, [sp, #160]	; 0xa0
 800d144:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800d146:	3301      	adds	r3, #1
 800d148:	2b07      	cmp	r3, #7
 800d14a:	9327      	str	r3, [sp, #156]	; 0x9c
 800d14c:	f300 8086 	bgt.w	800d25c <_svfprintf_r+0x1104>
 800d150:	3408      	adds	r4, #8
 800d152:	2d00      	cmp	r5, #0
 800d154:	bfac      	ite	ge
 800d156:	1b75      	subge	r5, r6, r5
 800d158:	4635      	movlt	r5, r6
 800d15a:	2d00      	cmp	r5, #0
 800d15c:	dd19      	ble.n	800d192 <_svfprintf_r+0x103a>
 800d15e:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 800d162:	4896      	ldr	r0, [pc, #600]	; (800d3bc <_svfprintf_r+0x1264>)
 800d164:	6020      	str	r0, [r4, #0]
 800d166:	2d10      	cmp	r5, #16
 800d168:	f103 0301 	add.w	r3, r3, #1
 800d16c:	f104 0108 	add.w	r1, r4, #8
 800d170:	dc7e      	bgt.n	800d270 <_svfprintf_r+0x1118>
 800d172:	6065      	str	r5, [r4, #4]
 800d174:	2b07      	cmp	r3, #7
 800d176:	4415      	add	r5, r2
 800d178:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 800d17c:	f340 808b 	ble.w	800d296 <_svfprintf_r+0x113e>
 800d180:	aa26      	add	r2, sp, #152	; 0x98
 800d182:	4641      	mov	r1, r8
 800d184:	9803      	ldr	r0, [sp, #12]
 800d186:	f002 fbf5 	bl	800f974 <__ssprint_r>
 800d18a:	2800      	cmp	r0, #0
 800d18c:	f040 81d0 	bne.w	800d530 <_svfprintf_r+0x13d8>
 800d190:	ac29      	add	r4, sp, #164	; 0xa4
 800d192:	f41a 6f80 	tst.w	sl, #1024	; 0x400
 800d196:	445e      	add	r6, fp
 800d198:	d009      	beq.n	800d1ae <_svfprintf_r+0x1056>
 800d19a:	9b07      	ldr	r3, [sp, #28]
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d17c      	bne.n	800d29a <_svfprintf_r+0x1142>
 800d1a0:	2f00      	cmp	r7, #0
 800d1a2:	d17c      	bne.n	800d29e <_svfprintf_r+0x1146>
 800d1a4:	9b04      	ldr	r3, [sp, #16]
 800d1a6:	445b      	add	r3, fp
 800d1a8:	429e      	cmp	r6, r3
 800d1aa:	bf28      	it	cs
 800d1ac:	461e      	movcs	r6, r3
 800d1ae:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800d1b0:	9a04      	ldr	r2, [sp, #16]
 800d1b2:	4293      	cmp	r3, r2
 800d1b4:	db02      	blt.n	800d1bc <_svfprintf_r+0x1064>
 800d1b6:	f01a 0f01 	tst.w	sl, #1
 800d1ba:	d00e      	beq.n	800d1da <_svfprintf_r+0x1082>
 800d1bc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800d1be:	6023      	str	r3, [r4, #0]
 800d1c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d1c2:	6063      	str	r3, [r4, #4]
 800d1c4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d1c6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800d1c8:	4413      	add	r3, r2
 800d1ca:	9328      	str	r3, [sp, #160]	; 0xa0
 800d1cc:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800d1ce:	3301      	adds	r3, #1
 800d1d0:	2b07      	cmp	r3, #7
 800d1d2:	9327      	str	r3, [sp, #156]	; 0x9c
 800d1d4:	f300 80dd 	bgt.w	800d392 <_svfprintf_r+0x123a>
 800d1d8:	3408      	adds	r4, #8
 800d1da:	9b04      	ldr	r3, [sp, #16]
 800d1dc:	9a04      	ldr	r2, [sp, #16]
 800d1de:	eb0b 0503 	add.w	r5, fp, r3
 800d1e2:	1bab      	subs	r3, r5, r6
 800d1e4:	9d20      	ldr	r5, [sp, #128]	; 0x80
 800d1e6:	1b55      	subs	r5, r2, r5
 800d1e8:	429d      	cmp	r5, r3
 800d1ea:	bfa8      	it	ge
 800d1ec:	461d      	movge	r5, r3
 800d1ee:	2d00      	cmp	r5, #0
 800d1f0:	dd0b      	ble.n	800d20a <_svfprintf_r+0x10b2>
 800d1f2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800d1f4:	442b      	add	r3, r5
 800d1f6:	9328      	str	r3, [sp, #160]	; 0xa0
 800d1f8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800d1fa:	3301      	adds	r3, #1
 800d1fc:	2b07      	cmp	r3, #7
 800d1fe:	e9c4 6500 	strd	r6, r5, [r4]
 800d202:	9327      	str	r3, [sp, #156]	; 0x9c
 800d204:	f300 80cf 	bgt.w	800d3a6 <_svfprintf_r+0x124e>
 800d208:	3408      	adds	r4, #8
 800d20a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800d20c:	9a04      	ldr	r2, [sp, #16]
 800d20e:	2d00      	cmp	r5, #0
 800d210:	eba2 0303 	sub.w	r3, r2, r3
 800d214:	bfac      	ite	ge
 800d216:	1b5d      	subge	r5, r3, r5
 800d218:	461d      	movlt	r5, r3
 800d21a:	2d00      	cmp	r5, #0
 800d21c:	f77f ad43 	ble.w	800cca6 <_svfprintf_r+0xb4e>
 800d220:	4e66      	ldr	r6, [pc, #408]	; (800d3bc <_svfprintf_r+0x1264>)
 800d222:	2710      	movs	r7, #16
 800d224:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 800d228:	2d10      	cmp	r5, #16
 800d22a:	f103 0301 	add.w	r3, r3, #1
 800d22e:	f104 0108 	add.w	r1, r4, #8
 800d232:	6026      	str	r6, [r4, #0]
 800d234:	f77f aecb 	ble.w	800cfce <_svfprintf_r+0xe76>
 800d238:	3210      	adds	r2, #16
 800d23a:	2b07      	cmp	r3, #7
 800d23c:	6067      	str	r7, [r4, #4]
 800d23e:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 800d242:	dd08      	ble.n	800d256 <_svfprintf_r+0x10fe>
 800d244:	aa26      	add	r2, sp, #152	; 0x98
 800d246:	4641      	mov	r1, r8
 800d248:	9803      	ldr	r0, [sp, #12]
 800d24a:	f002 fb93 	bl	800f974 <__ssprint_r>
 800d24e:	2800      	cmp	r0, #0
 800d250:	f040 816e 	bne.w	800d530 <_svfprintf_r+0x13d8>
 800d254:	a929      	add	r1, sp, #164	; 0xa4
 800d256:	3d10      	subs	r5, #16
 800d258:	460c      	mov	r4, r1
 800d25a:	e7e3      	b.n	800d224 <_svfprintf_r+0x10cc>
 800d25c:	aa26      	add	r2, sp, #152	; 0x98
 800d25e:	4641      	mov	r1, r8
 800d260:	9803      	ldr	r0, [sp, #12]
 800d262:	f002 fb87 	bl	800f974 <__ssprint_r>
 800d266:	2800      	cmp	r0, #0
 800d268:	f040 8162 	bne.w	800d530 <_svfprintf_r+0x13d8>
 800d26c:	ac29      	add	r4, sp, #164	; 0xa4
 800d26e:	e770      	b.n	800d152 <_svfprintf_r+0xffa>
 800d270:	2010      	movs	r0, #16
 800d272:	4402      	add	r2, r0
 800d274:	2b07      	cmp	r3, #7
 800d276:	6060      	str	r0, [r4, #4]
 800d278:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 800d27c:	dd08      	ble.n	800d290 <_svfprintf_r+0x1138>
 800d27e:	aa26      	add	r2, sp, #152	; 0x98
 800d280:	4641      	mov	r1, r8
 800d282:	9803      	ldr	r0, [sp, #12]
 800d284:	f002 fb76 	bl	800f974 <__ssprint_r>
 800d288:	2800      	cmp	r0, #0
 800d28a:	f040 8151 	bne.w	800d530 <_svfprintf_r+0x13d8>
 800d28e:	a929      	add	r1, sp, #164	; 0xa4
 800d290:	3d10      	subs	r5, #16
 800d292:	460c      	mov	r4, r1
 800d294:	e763      	b.n	800d15e <_svfprintf_r+0x1006>
 800d296:	460c      	mov	r4, r1
 800d298:	e77b      	b.n	800d192 <_svfprintf_r+0x103a>
 800d29a:	2f00      	cmp	r7, #0
 800d29c:	d049      	beq.n	800d332 <_svfprintf_r+0x11da>
 800d29e:	3f01      	subs	r7, #1
 800d2a0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d2a2:	6023      	str	r3, [r4, #0]
 800d2a4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d2a6:	6063      	str	r3, [r4, #4]
 800d2a8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d2aa:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800d2ac:	4413      	add	r3, r2
 800d2ae:	9328      	str	r3, [sp, #160]	; 0xa0
 800d2b0:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800d2b2:	3301      	adds	r3, #1
 800d2b4:	2b07      	cmp	r3, #7
 800d2b6:	9327      	str	r3, [sp, #156]	; 0x9c
 800d2b8:	dc42      	bgt.n	800d340 <_svfprintf_r+0x11e8>
 800d2ba:	3408      	adds	r4, #8
 800d2bc:	9b04      	ldr	r3, [sp, #16]
 800d2be:	445b      	add	r3, fp
 800d2c0:	1b9a      	subs	r2, r3, r6
 800d2c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d2c4:	781b      	ldrb	r3, [r3, #0]
 800d2c6:	4293      	cmp	r3, r2
 800d2c8:	bfa8      	it	ge
 800d2ca:	4613      	movge	r3, r2
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	461d      	mov	r5, r3
 800d2d0:	dd0a      	ble.n	800d2e8 <_svfprintf_r+0x1190>
 800d2d2:	e9c4 6300 	strd	r6, r3, [r4]
 800d2d6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800d2d8:	442b      	add	r3, r5
 800d2da:	9328      	str	r3, [sp, #160]	; 0xa0
 800d2dc:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800d2de:	3301      	adds	r3, #1
 800d2e0:	2b07      	cmp	r3, #7
 800d2e2:	9327      	str	r3, [sp, #156]	; 0x9c
 800d2e4:	dc36      	bgt.n	800d354 <_svfprintf_r+0x11fc>
 800d2e6:	3408      	adds	r4, #8
 800d2e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d2ea:	781b      	ldrb	r3, [r3, #0]
 800d2ec:	2d00      	cmp	r5, #0
 800d2ee:	bfac      	ite	ge
 800d2f0:	1b5d      	subge	r5, r3, r5
 800d2f2:	461d      	movlt	r5, r3
 800d2f4:	2d00      	cmp	r5, #0
 800d2f6:	dd18      	ble.n	800d32a <_svfprintf_r+0x11d2>
 800d2f8:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	; 0x9c
 800d2fc:	482f      	ldr	r0, [pc, #188]	; (800d3bc <_svfprintf_r+0x1264>)
 800d2fe:	6020      	str	r0, [r4, #0]
 800d300:	2d10      	cmp	r5, #16
 800d302:	f102 0201 	add.w	r2, r2, #1
 800d306:	f104 0108 	add.w	r1, r4, #8
 800d30a:	dc2d      	bgt.n	800d368 <_svfprintf_r+0x1210>
 800d30c:	442b      	add	r3, r5
 800d30e:	2a07      	cmp	r2, #7
 800d310:	6065      	str	r5, [r4, #4]
 800d312:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 800d316:	dd3a      	ble.n	800d38e <_svfprintf_r+0x1236>
 800d318:	aa26      	add	r2, sp, #152	; 0x98
 800d31a:	4641      	mov	r1, r8
 800d31c:	9803      	ldr	r0, [sp, #12]
 800d31e:	f002 fb29 	bl	800f974 <__ssprint_r>
 800d322:	2800      	cmp	r0, #0
 800d324:	f040 8104 	bne.w	800d530 <_svfprintf_r+0x13d8>
 800d328:	ac29      	add	r4, sp, #164	; 0xa4
 800d32a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d32c:	781b      	ldrb	r3, [r3, #0]
 800d32e:	441e      	add	r6, r3
 800d330:	e733      	b.n	800d19a <_svfprintf_r+0x1042>
 800d332:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d334:	3b01      	subs	r3, #1
 800d336:	9309      	str	r3, [sp, #36]	; 0x24
 800d338:	9b07      	ldr	r3, [sp, #28]
 800d33a:	3b01      	subs	r3, #1
 800d33c:	9307      	str	r3, [sp, #28]
 800d33e:	e7af      	b.n	800d2a0 <_svfprintf_r+0x1148>
 800d340:	aa26      	add	r2, sp, #152	; 0x98
 800d342:	4641      	mov	r1, r8
 800d344:	9803      	ldr	r0, [sp, #12]
 800d346:	f002 fb15 	bl	800f974 <__ssprint_r>
 800d34a:	2800      	cmp	r0, #0
 800d34c:	f040 80f0 	bne.w	800d530 <_svfprintf_r+0x13d8>
 800d350:	ac29      	add	r4, sp, #164	; 0xa4
 800d352:	e7b3      	b.n	800d2bc <_svfprintf_r+0x1164>
 800d354:	aa26      	add	r2, sp, #152	; 0x98
 800d356:	4641      	mov	r1, r8
 800d358:	9803      	ldr	r0, [sp, #12]
 800d35a:	f002 fb0b 	bl	800f974 <__ssprint_r>
 800d35e:	2800      	cmp	r0, #0
 800d360:	f040 80e6 	bne.w	800d530 <_svfprintf_r+0x13d8>
 800d364:	ac29      	add	r4, sp, #164	; 0xa4
 800d366:	e7bf      	b.n	800d2e8 <_svfprintf_r+0x1190>
 800d368:	2010      	movs	r0, #16
 800d36a:	4403      	add	r3, r0
 800d36c:	2a07      	cmp	r2, #7
 800d36e:	6060      	str	r0, [r4, #4]
 800d370:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 800d374:	dd08      	ble.n	800d388 <_svfprintf_r+0x1230>
 800d376:	aa26      	add	r2, sp, #152	; 0x98
 800d378:	4641      	mov	r1, r8
 800d37a:	9803      	ldr	r0, [sp, #12]
 800d37c:	f002 fafa 	bl	800f974 <__ssprint_r>
 800d380:	2800      	cmp	r0, #0
 800d382:	f040 80d5 	bne.w	800d530 <_svfprintf_r+0x13d8>
 800d386:	a929      	add	r1, sp, #164	; 0xa4
 800d388:	3d10      	subs	r5, #16
 800d38a:	460c      	mov	r4, r1
 800d38c:	e7b4      	b.n	800d2f8 <_svfprintf_r+0x11a0>
 800d38e:	460c      	mov	r4, r1
 800d390:	e7cb      	b.n	800d32a <_svfprintf_r+0x11d2>
 800d392:	aa26      	add	r2, sp, #152	; 0x98
 800d394:	4641      	mov	r1, r8
 800d396:	9803      	ldr	r0, [sp, #12]
 800d398:	f002 faec 	bl	800f974 <__ssprint_r>
 800d39c:	2800      	cmp	r0, #0
 800d39e:	f040 80c7 	bne.w	800d530 <_svfprintf_r+0x13d8>
 800d3a2:	ac29      	add	r4, sp, #164	; 0xa4
 800d3a4:	e719      	b.n	800d1da <_svfprintf_r+0x1082>
 800d3a6:	aa26      	add	r2, sp, #152	; 0x98
 800d3a8:	4641      	mov	r1, r8
 800d3aa:	9803      	ldr	r0, [sp, #12]
 800d3ac:	f002 fae2 	bl	800f974 <__ssprint_r>
 800d3b0:	2800      	cmp	r0, #0
 800d3b2:	f040 80bd 	bne.w	800d530 <_svfprintf_r+0x13d8>
 800d3b6:	ac29      	add	r4, sp, #164	; 0xa4
 800d3b8:	e727      	b.n	800d20a <_svfprintf_r+0x10b2>
 800d3ba:	bf00      	nop
 800d3bc:	08010374 	.word	0x08010374
 800d3c0:	9a04      	ldr	r2, [sp, #16]
 800d3c2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800d3c4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800d3c6:	2a01      	cmp	r2, #1
 800d3c8:	f105 0501 	add.w	r5, r5, #1
 800d3cc:	f103 0301 	add.w	r3, r3, #1
 800d3d0:	f104 0608 	add.w	r6, r4, #8
 800d3d4:	dc02      	bgt.n	800d3dc <_svfprintf_r+0x1284>
 800d3d6:	f01a 0f01 	tst.w	sl, #1
 800d3da:	d07d      	beq.n	800d4d8 <_svfprintf_r+0x1380>
 800d3dc:	2201      	movs	r2, #1
 800d3de:	2b07      	cmp	r3, #7
 800d3e0:	f8c4 b000 	str.w	fp, [r4]
 800d3e4:	6062      	str	r2, [r4, #4]
 800d3e6:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 800d3ea:	dd08      	ble.n	800d3fe <_svfprintf_r+0x12a6>
 800d3ec:	aa26      	add	r2, sp, #152	; 0x98
 800d3ee:	4641      	mov	r1, r8
 800d3f0:	9803      	ldr	r0, [sp, #12]
 800d3f2:	f002 fabf 	bl	800f974 <__ssprint_r>
 800d3f6:	2800      	cmp	r0, #0
 800d3f8:	f040 809a 	bne.w	800d530 <_svfprintf_r+0x13d8>
 800d3fc:	ae29      	add	r6, sp, #164	; 0xa4
 800d3fe:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800d400:	6033      	str	r3, [r6, #0]
 800d402:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d404:	6073      	str	r3, [r6, #4]
 800d406:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d408:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800d40a:	4413      	add	r3, r2
 800d40c:	9328      	str	r3, [sp, #160]	; 0xa0
 800d40e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800d410:	3301      	adds	r3, #1
 800d412:	2b07      	cmp	r3, #7
 800d414:	9327      	str	r3, [sp, #156]	; 0x9c
 800d416:	dc31      	bgt.n	800d47c <_svfprintf_r+0x1324>
 800d418:	3608      	adds	r6, #8
 800d41a:	9b04      	ldr	r3, [sp, #16]
 800d41c:	2200      	movs	r2, #0
 800d41e:	1e5c      	subs	r4, r3, #1
 800d420:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800d424:	2300      	movs	r3, #0
 800d426:	f7f3 fb5f 	bl	8000ae8 <__aeabi_dcmpeq>
 800d42a:	2800      	cmp	r0, #0
 800d42c:	d12f      	bne.n	800d48e <_svfprintf_r+0x1336>
 800d42e:	f10b 0301 	add.w	r3, fp, #1
 800d432:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 800d434:	9904      	ldr	r1, [sp, #16]
 800d436:	e9c6 3400 	strd	r3, r4, [r6]
 800d43a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800d43c:	3201      	adds	r2, #1
 800d43e:	3b01      	subs	r3, #1
 800d440:	440b      	add	r3, r1
 800d442:	2a07      	cmp	r2, #7
 800d444:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 800d448:	dd4f      	ble.n	800d4ea <_svfprintf_r+0x1392>
 800d44a:	aa26      	add	r2, sp, #152	; 0x98
 800d44c:	4641      	mov	r1, r8
 800d44e:	9803      	ldr	r0, [sp, #12]
 800d450:	f002 fa90 	bl	800f974 <__ssprint_r>
 800d454:	2800      	cmp	r0, #0
 800d456:	d16b      	bne.n	800d530 <_svfprintf_r+0x13d8>
 800d458:	ae29      	add	r6, sp, #164	; 0xa4
 800d45a:	ab22      	add	r3, sp, #136	; 0x88
 800d45c:	6033      	str	r3, [r6, #0]
 800d45e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d460:	6073      	str	r3, [r6, #4]
 800d462:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d464:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800d466:	4413      	add	r3, r2
 800d468:	9328      	str	r3, [sp, #160]	; 0xa0
 800d46a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800d46c:	3301      	adds	r3, #1
 800d46e:	2b07      	cmp	r3, #7
 800d470:	9327      	str	r3, [sp, #156]	; 0x9c
 800d472:	f73f adb3 	bgt.w	800cfdc <_svfprintf_r+0xe84>
 800d476:	f106 0408 	add.w	r4, r6, #8
 800d47a:	e414      	b.n	800cca6 <_svfprintf_r+0xb4e>
 800d47c:	aa26      	add	r2, sp, #152	; 0x98
 800d47e:	4641      	mov	r1, r8
 800d480:	9803      	ldr	r0, [sp, #12]
 800d482:	f002 fa77 	bl	800f974 <__ssprint_r>
 800d486:	2800      	cmp	r0, #0
 800d488:	d152      	bne.n	800d530 <_svfprintf_r+0x13d8>
 800d48a:	ae29      	add	r6, sp, #164	; 0xa4
 800d48c:	e7c5      	b.n	800d41a <_svfprintf_r+0x12c2>
 800d48e:	2c00      	cmp	r4, #0
 800d490:	dde3      	ble.n	800d45a <_svfprintf_r+0x1302>
 800d492:	4d3e      	ldr	r5, [pc, #248]	; (800d58c <_svfprintf_r+0x1434>)
 800d494:	2710      	movs	r7, #16
 800d496:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 800d49a:	2c10      	cmp	r4, #16
 800d49c:	f103 0301 	add.w	r3, r3, #1
 800d4a0:	f106 0108 	add.w	r1, r6, #8
 800d4a4:	6035      	str	r5, [r6, #0]
 800d4a6:	dc07      	bgt.n	800d4b8 <_svfprintf_r+0x1360>
 800d4a8:	6074      	str	r4, [r6, #4]
 800d4aa:	2b07      	cmp	r3, #7
 800d4ac:	4414      	add	r4, r2
 800d4ae:	e9cd 3427 	strd	r3, r4, [sp, #156]	; 0x9c
 800d4b2:	dcca      	bgt.n	800d44a <_svfprintf_r+0x12f2>
 800d4b4:	460e      	mov	r6, r1
 800d4b6:	e7d0      	b.n	800d45a <_svfprintf_r+0x1302>
 800d4b8:	3210      	adds	r2, #16
 800d4ba:	2b07      	cmp	r3, #7
 800d4bc:	6077      	str	r7, [r6, #4]
 800d4be:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 800d4c2:	dd06      	ble.n	800d4d2 <_svfprintf_r+0x137a>
 800d4c4:	aa26      	add	r2, sp, #152	; 0x98
 800d4c6:	4641      	mov	r1, r8
 800d4c8:	9803      	ldr	r0, [sp, #12]
 800d4ca:	f002 fa53 	bl	800f974 <__ssprint_r>
 800d4ce:	bb78      	cbnz	r0, 800d530 <_svfprintf_r+0x13d8>
 800d4d0:	a929      	add	r1, sp, #164	; 0xa4
 800d4d2:	3c10      	subs	r4, #16
 800d4d4:	460e      	mov	r6, r1
 800d4d6:	e7de      	b.n	800d496 <_svfprintf_r+0x133e>
 800d4d8:	2201      	movs	r2, #1
 800d4da:	2b07      	cmp	r3, #7
 800d4dc:	f8c4 b000 	str.w	fp, [r4]
 800d4e0:	6062      	str	r2, [r4, #4]
 800d4e2:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 800d4e6:	ddb8      	ble.n	800d45a <_svfprintf_r+0x1302>
 800d4e8:	e7af      	b.n	800d44a <_svfprintf_r+0x12f2>
 800d4ea:	3608      	adds	r6, #8
 800d4ec:	e7b5      	b.n	800d45a <_svfprintf_r+0x1302>
 800d4ee:	460c      	mov	r4, r1
 800d4f0:	f7ff bbd9 	b.w	800cca6 <_svfprintf_r+0xb4e>
 800d4f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d4f6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800d4f8:	1a9d      	subs	r5, r3, r2
 800d4fa:	2d00      	cmp	r5, #0
 800d4fc:	f77f abd7 	ble.w	800ccae <_svfprintf_r+0xb56>
 800d500:	4e23      	ldr	r6, [pc, #140]	; (800d590 <_svfprintf_r+0x1438>)
 800d502:	2710      	movs	r7, #16
 800d504:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 800d508:	2d10      	cmp	r5, #16
 800d50a:	f103 0301 	add.w	r3, r3, #1
 800d50e:	6026      	str	r6, [r4, #0]
 800d510:	dc18      	bgt.n	800d544 <_svfprintf_r+0x13ec>
 800d512:	6065      	str	r5, [r4, #4]
 800d514:	2b07      	cmp	r3, #7
 800d516:	4415      	add	r5, r2
 800d518:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 800d51c:	f77f abc7 	ble.w	800ccae <_svfprintf_r+0xb56>
 800d520:	aa26      	add	r2, sp, #152	; 0x98
 800d522:	4641      	mov	r1, r8
 800d524:	9803      	ldr	r0, [sp, #12]
 800d526:	f002 fa25 	bl	800f974 <__ssprint_r>
 800d52a:	2800      	cmp	r0, #0
 800d52c:	f43f abbf 	beq.w	800ccae <_svfprintf_r+0xb56>
 800d530:	f1b9 0f00 	cmp.w	r9, #0
 800d534:	f43f a8a8 	beq.w	800c688 <_svfprintf_r+0x530>
 800d538:	4649      	mov	r1, r9
 800d53a:	9803      	ldr	r0, [sp, #12]
 800d53c:	f001 f826 	bl	800e58c <_free_r>
 800d540:	f7ff b8a2 	b.w	800c688 <_svfprintf_r+0x530>
 800d544:	3210      	adds	r2, #16
 800d546:	2b07      	cmp	r3, #7
 800d548:	6067      	str	r7, [r4, #4]
 800d54a:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 800d54e:	dc02      	bgt.n	800d556 <_svfprintf_r+0x13fe>
 800d550:	3408      	adds	r4, #8
 800d552:	3d10      	subs	r5, #16
 800d554:	e7d6      	b.n	800d504 <_svfprintf_r+0x13ac>
 800d556:	aa26      	add	r2, sp, #152	; 0x98
 800d558:	4641      	mov	r1, r8
 800d55a:	9803      	ldr	r0, [sp, #12]
 800d55c:	f002 fa0a 	bl	800f974 <__ssprint_r>
 800d560:	2800      	cmp	r0, #0
 800d562:	d1e5      	bne.n	800d530 <_svfprintf_r+0x13d8>
 800d564:	ac29      	add	r4, sp, #164	; 0xa4
 800d566:	e7f4      	b.n	800d552 <_svfprintf_r+0x13fa>
 800d568:	4649      	mov	r1, r9
 800d56a:	9803      	ldr	r0, [sp, #12]
 800d56c:	f001 f80e 	bl	800e58c <_free_r>
 800d570:	f7ff bbb5 	b.w	800ccde <_svfprintf_r+0xb86>
 800d574:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800d576:	2b00      	cmp	r3, #0
 800d578:	f43f a886 	beq.w	800c688 <_svfprintf_r+0x530>
 800d57c:	aa26      	add	r2, sp, #152	; 0x98
 800d57e:	4641      	mov	r1, r8
 800d580:	9803      	ldr	r0, [sp, #12]
 800d582:	f002 f9f7 	bl	800f974 <__ssprint_r>
 800d586:	f7ff b87f 	b.w	800c688 <_svfprintf_r+0x530>
 800d58a:	bf00      	nop
 800d58c:	08010374 	.word	0x08010374
 800d590:	08010364 	.word	0x08010364

0800d594 <sysconf>:
 800d594:	2808      	cmp	r0, #8
 800d596:	b508      	push	{r3, lr}
 800d598:	d006      	beq.n	800d5a8 <sysconf+0x14>
 800d59a:	f7fd fcd7 	bl	800af4c <__errno>
 800d59e:	2316      	movs	r3, #22
 800d5a0:	6003      	str	r3, [r0, #0]
 800d5a2:	f04f 30ff 	mov.w	r0, #4294967295
 800d5a6:	bd08      	pop	{r3, pc}
 800d5a8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800d5ac:	e7fb      	b.n	800d5a6 <sysconf+0x12>

0800d5ae <_times_r>:
 800d5ae:	4608      	mov	r0, r1
 800d5b0:	f7f5 bf08 	b.w	80033c4 <_times>

0800d5b4 <register_fini>:
 800d5b4:	4b02      	ldr	r3, [pc, #8]	; (800d5c0 <register_fini+0xc>)
 800d5b6:	b113      	cbz	r3, 800d5be <register_fini+0xa>
 800d5b8:	4802      	ldr	r0, [pc, #8]	; (800d5c4 <register_fini+0x10>)
 800d5ba:	f000 b805 	b.w	800d5c8 <atexit>
 800d5be:	4770      	bx	lr
 800d5c0:	00000000 	.word	0x00000000
 800d5c4:	0800e4bd 	.word	0x0800e4bd

0800d5c8 <atexit>:
 800d5c8:	2300      	movs	r3, #0
 800d5ca:	4601      	mov	r1, r0
 800d5cc:	461a      	mov	r2, r3
 800d5ce:	4618      	mov	r0, r3
 800d5d0:	f002 ba56 	b.w	800fa80 <__register_exitproc>

0800d5d4 <quorem>:
 800d5d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5d8:	6903      	ldr	r3, [r0, #16]
 800d5da:	690c      	ldr	r4, [r1, #16]
 800d5dc:	42a3      	cmp	r3, r4
 800d5de:	4680      	mov	r8, r0
 800d5e0:	f2c0 8082 	blt.w	800d6e8 <quorem+0x114>
 800d5e4:	3c01      	subs	r4, #1
 800d5e6:	f101 0714 	add.w	r7, r1, #20
 800d5ea:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800d5ee:	f100 0614 	add.w	r6, r0, #20
 800d5f2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800d5f6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800d5fa:	eb06 030c 	add.w	r3, r6, ip
 800d5fe:	3501      	adds	r5, #1
 800d600:	eb07 090c 	add.w	r9, r7, ip
 800d604:	9301      	str	r3, [sp, #4]
 800d606:	fbb0 f5f5 	udiv	r5, r0, r5
 800d60a:	b395      	cbz	r5, 800d672 <quorem+0x9e>
 800d60c:	f04f 0a00 	mov.w	sl, #0
 800d610:	4638      	mov	r0, r7
 800d612:	46b6      	mov	lr, r6
 800d614:	46d3      	mov	fp, sl
 800d616:	f850 2b04 	ldr.w	r2, [r0], #4
 800d61a:	b293      	uxth	r3, r2
 800d61c:	fb05 a303 	mla	r3, r5, r3, sl
 800d620:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d624:	b29b      	uxth	r3, r3
 800d626:	ebab 0303 	sub.w	r3, fp, r3
 800d62a:	0c12      	lsrs	r2, r2, #16
 800d62c:	f8de b000 	ldr.w	fp, [lr]
 800d630:	fb05 a202 	mla	r2, r5, r2, sl
 800d634:	fa13 f38b 	uxtah	r3, r3, fp
 800d638:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800d63c:	fa1f fb82 	uxth.w	fp, r2
 800d640:	f8de 2000 	ldr.w	r2, [lr]
 800d644:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800d648:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d64c:	b29b      	uxth	r3, r3
 800d64e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d652:	4581      	cmp	r9, r0
 800d654:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800d658:	f84e 3b04 	str.w	r3, [lr], #4
 800d65c:	d2db      	bcs.n	800d616 <quorem+0x42>
 800d65e:	f856 300c 	ldr.w	r3, [r6, ip]
 800d662:	b933      	cbnz	r3, 800d672 <quorem+0x9e>
 800d664:	9b01      	ldr	r3, [sp, #4]
 800d666:	3b04      	subs	r3, #4
 800d668:	429e      	cmp	r6, r3
 800d66a:	461a      	mov	r2, r3
 800d66c:	d330      	bcc.n	800d6d0 <quorem+0xfc>
 800d66e:	f8c8 4010 	str.w	r4, [r8, #16]
 800d672:	4640      	mov	r0, r8
 800d674:	f001 fdc4 	bl	800f200 <__mcmp>
 800d678:	2800      	cmp	r0, #0
 800d67a:	db25      	blt.n	800d6c8 <quorem+0xf4>
 800d67c:	3501      	adds	r5, #1
 800d67e:	4630      	mov	r0, r6
 800d680:	f04f 0c00 	mov.w	ip, #0
 800d684:	f857 2b04 	ldr.w	r2, [r7], #4
 800d688:	f8d0 e000 	ldr.w	lr, [r0]
 800d68c:	b293      	uxth	r3, r2
 800d68e:	ebac 0303 	sub.w	r3, ip, r3
 800d692:	0c12      	lsrs	r2, r2, #16
 800d694:	fa13 f38e 	uxtah	r3, r3, lr
 800d698:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800d69c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d6a0:	b29b      	uxth	r3, r3
 800d6a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d6a6:	45b9      	cmp	r9, r7
 800d6a8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800d6ac:	f840 3b04 	str.w	r3, [r0], #4
 800d6b0:	d2e8      	bcs.n	800d684 <quorem+0xb0>
 800d6b2:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800d6b6:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800d6ba:	b92a      	cbnz	r2, 800d6c8 <quorem+0xf4>
 800d6bc:	3b04      	subs	r3, #4
 800d6be:	429e      	cmp	r6, r3
 800d6c0:	461a      	mov	r2, r3
 800d6c2:	d30b      	bcc.n	800d6dc <quorem+0x108>
 800d6c4:	f8c8 4010 	str.w	r4, [r8, #16]
 800d6c8:	4628      	mov	r0, r5
 800d6ca:	b003      	add	sp, #12
 800d6cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6d0:	6812      	ldr	r2, [r2, #0]
 800d6d2:	3b04      	subs	r3, #4
 800d6d4:	2a00      	cmp	r2, #0
 800d6d6:	d1ca      	bne.n	800d66e <quorem+0x9a>
 800d6d8:	3c01      	subs	r4, #1
 800d6da:	e7c5      	b.n	800d668 <quorem+0x94>
 800d6dc:	6812      	ldr	r2, [r2, #0]
 800d6de:	3b04      	subs	r3, #4
 800d6e0:	2a00      	cmp	r2, #0
 800d6e2:	d1ef      	bne.n	800d6c4 <quorem+0xf0>
 800d6e4:	3c01      	subs	r4, #1
 800d6e6:	e7ea      	b.n	800d6be <quorem+0xea>
 800d6e8:	2000      	movs	r0, #0
 800d6ea:	e7ee      	b.n	800d6ca <quorem+0xf6>
 800d6ec:	0000      	movs	r0, r0
	...

0800d6f0 <_dtoa_r>:
 800d6f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6f4:	b097      	sub	sp, #92	; 0x5c
 800d6f6:	ec57 6b10 	vmov	r6, r7, d0
 800d6fa:	9106      	str	r1, [sp, #24]
 800d6fc:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800d6fe:	920b      	str	r2, [sp, #44]	; 0x2c
 800d700:	4604      	mov	r4, r0
 800d702:	9312      	str	r3, [sp, #72]	; 0x48
 800d704:	9d20      	ldr	r5, [sp, #128]	; 0x80
 800d706:	e9cd 6700 	strd	r6, r7, [sp]
 800d70a:	b141      	cbz	r1, 800d71e <_dtoa_r+0x2e>
 800d70c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d70e:	604a      	str	r2, [r1, #4]
 800d710:	2301      	movs	r3, #1
 800d712:	4093      	lsls	r3, r2
 800d714:	608b      	str	r3, [r1, #8]
 800d716:	f001 fb6f 	bl	800edf8 <_Bfree>
 800d71a:	2300      	movs	r3, #0
 800d71c:	6423      	str	r3, [r4, #64]	; 0x40
 800d71e:	1e3b      	subs	r3, r7, #0
 800d720:	bfb9      	ittee	lt
 800d722:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800d726:	9301      	strlt	r3, [sp, #4]
 800d728:	2300      	movge	r3, #0
 800d72a:	602b      	strge	r3, [r5, #0]
 800d72c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800d730:	4baf      	ldr	r3, [pc, #700]	; (800d9f0 <_dtoa_r+0x300>)
 800d732:	bfbc      	itt	lt
 800d734:	2201      	movlt	r2, #1
 800d736:	602a      	strlt	r2, [r5, #0]
 800d738:	ea33 0308 	bics.w	r3, r3, r8
 800d73c:	d116      	bne.n	800d76c <_dtoa_r+0x7c>
 800d73e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d740:	f242 730f 	movw	r3, #9999	; 0x270f
 800d744:	6013      	str	r3, [r2, #0]
 800d746:	9b00      	ldr	r3, [sp, #0]
 800d748:	b923      	cbnz	r3, 800d754 <_dtoa_r+0x64>
 800d74a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800d74e:	2800      	cmp	r0, #0
 800d750:	f000 8543 	beq.w	800e1da <_dtoa_r+0xaea>
 800d754:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d756:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800da04 <_dtoa_r+0x314>
 800d75a:	b11b      	cbz	r3, 800d764 <_dtoa_r+0x74>
 800d75c:	f10b 0303 	add.w	r3, fp, #3
 800d760:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d762:	6013      	str	r3, [r2, #0]
 800d764:	4658      	mov	r0, fp
 800d766:	b017      	add	sp, #92	; 0x5c
 800d768:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d76c:	e9dd 6700 	ldrd	r6, r7, [sp]
 800d770:	2200      	movs	r2, #0
 800d772:	2300      	movs	r3, #0
 800d774:	4630      	mov	r0, r6
 800d776:	4639      	mov	r1, r7
 800d778:	f7f3 f9b6 	bl	8000ae8 <__aeabi_dcmpeq>
 800d77c:	4681      	mov	r9, r0
 800d77e:	b160      	cbz	r0, 800d79a <_dtoa_r+0xaa>
 800d780:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d782:	2301      	movs	r3, #1
 800d784:	6013      	str	r3, [r2, #0]
 800d786:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d788:	2b00      	cmp	r3, #0
 800d78a:	f000 8522 	beq.w	800e1d2 <_dtoa_r+0xae2>
 800d78e:	4b99      	ldr	r3, [pc, #612]	; (800d9f4 <_dtoa_r+0x304>)
 800d790:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d792:	f103 3bff 	add.w	fp, r3, #4294967295
 800d796:	6013      	str	r3, [r2, #0]
 800d798:	e7e4      	b.n	800d764 <_dtoa_r+0x74>
 800d79a:	aa14      	add	r2, sp, #80	; 0x50
 800d79c:	a915      	add	r1, sp, #84	; 0x54
 800d79e:	ec47 6b10 	vmov	d0, r6, r7
 800d7a2:	4620      	mov	r0, r4
 800d7a4:	f001 fe1a 	bl	800f3dc <__d2b>
 800d7a8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800d7ac:	9004      	str	r0, [sp, #16]
 800d7ae:	2d00      	cmp	r5, #0
 800d7b0:	d07c      	beq.n	800d8ac <_dtoa_r+0x1bc>
 800d7b2:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d7b6:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800d7ba:	46b2      	mov	sl, r6
 800d7bc:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800d7c0:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800d7c4:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800d7c8:	2200      	movs	r2, #0
 800d7ca:	4b8b      	ldr	r3, [pc, #556]	; (800d9f8 <_dtoa_r+0x308>)
 800d7cc:	4650      	mov	r0, sl
 800d7ce:	4659      	mov	r1, fp
 800d7d0:	f7f2 fd6a 	bl	80002a8 <__aeabi_dsub>
 800d7d4:	a380      	add	r3, pc, #512	; (adr r3, 800d9d8 <_dtoa_r+0x2e8>)
 800d7d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7da:	f7f2 ff1d 	bl	8000618 <__aeabi_dmul>
 800d7de:	a380      	add	r3, pc, #512	; (adr r3, 800d9e0 <_dtoa_r+0x2f0>)
 800d7e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7e4:	f7f2 fd62 	bl	80002ac <__adddf3>
 800d7e8:	4606      	mov	r6, r0
 800d7ea:	4628      	mov	r0, r5
 800d7ec:	460f      	mov	r7, r1
 800d7ee:	f7f2 fea9 	bl	8000544 <__aeabi_i2d>
 800d7f2:	a37d      	add	r3, pc, #500	; (adr r3, 800d9e8 <_dtoa_r+0x2f8>)
 800d7f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7f8:	f7f2 ff0e 	bl	8000618 <__aeabi_dmul>
 800d7fc:	4602      	mov	r2, r0
 800d7fe:	460b      	mov	r3, r1
 800d800:	4630      	mov	r0, r6
 800d802:	4639      	mov	r1, r7
 800d804:	f7f2 fd52 	bl	80002ac <__adddf3>
 800d808:	4606      	mov	r6, r0
 800d80a:	460f      	mov	r7, r1
 800d80c:	f7f3 f9b4 	bl	8000b78 <__aeabi_d2iz>
 800d810:	2200      	movs	r2, #0
 800d812:	4682      	mov	sl, r0
 800d814:	2300      	movs	r3, #0
 800d816:	4630      	mov	r0, r6
 800d818:	4639      	mov	r1, r7
 800d81a:	f7f3 f96f 	bl	8000afc <__aeabi_dcmplt>
 800d81e:	b148      	cbz	r0, 800d834 <_dtoa_r+0x144>
 800d820:	4650      	mov	r0, sl
 800d822:	f7f2 fe8f 	bl	8000544 <__aeabi_i2d>
 800d826:	4632      	mov	r2, r6
 800d828:	463b      	mov	r3, r7
 800d82a:	f7f3 f95d 	bl	8000ae8 <__aeabi_dcmpeq>
 800d82e:	b908      	cbnz	r0, 800d834 <_dtoa_r+0x144>
 800d830:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d834:	f1ba 0f16 	cmp.w	sl, #22
 800d838:	d859      	bhi.n	800d8ee <_dtoa_r+0x1fe>
 800d83a:	4970      	ldr	r1, [pc, #448]	; (800d9fc <_dtoa_r+0x30c>)
 800d83c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800d840:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d844:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d848:	f7f3 f976 	bl	8000b38 <__aeabi_dcmpgt>
 800d84c:	2800      	cmp	r0, #0
 800d84e:	d050      	beq.n	800d8f2 <_dtoa_r+0x202>
 800d850:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d854:	2300      	movs	r3, #0
 800d856:	930f      	str	r3, [sp, #60]	; 0x3c
 800d858:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d85a:	1b5d      	subs	r5, r3, r5
 800d85c:	f1b5 0801 	subs.w	r8, r5, #1
 800d860:	bf49      	itett	mi
 800d862:	f1c5 0301 	rsbmi	r3, r5, #1
 800d866:	2300      	movpl	r3, #0
 800d868:	9305      	strmi	r3, [sp, #20]
 800d86a:	f04f 0800 	movmi.w	r8, #0
 800d86e:	bf58      	it	pl
 800d870:	9305      	strpl	r3, [sp, #20]
 800d872:	f1ba 0f00 	cmp.w	sl, #0
 800d876:	db3e      	blt.n	800d8f6 <_dtoa_r+0x206>
 800d878:	2300      	movs	r3, #0
 800d87a:	44d0      	add	r8, sl
 800d87c:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800d880:	9307      	str	r3, [sp, #28]
 800d882:	9b06      	ldr	r3, [sp, #24]
 800d884:	2b09      	cmp	r3, #9
 800d886:	f200 808d 	bhi.w	800d9a4 <_dtoa_r+0x2b4>
 800d88a:	2b05      	cmp	r3, #5
 800d88c:	bfc4      	itt	gt
 800d88e:	3b04      	subgt	r3, #4
 800d890:	9306      	strgt	r3, [sp, #24]
 800d892:	9b06      	ldr	r3, [sp, #24]
 800d894:	f1a3 0302 	sub.w	r3, r3, #2
 800d898:	bfcc      	ite	gt
 800d89a:	2500      	movgt	r5, #0
 800d89c:	2501      	movle	r5, #1
 800d89e:	2b03      	cmp	r3, #3
 800d8a0:	f200 808c 	bhi.w	800d9bc <_dtoa_r+0x2cc>
 800d8a4:	e8df f003 	tbb	[pc, r3]
 800d8a8:	6e317c7a 	.word	0x6e317c7a
 800d8ac:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800d8b0:	441d      	add	r5, r3
 800d8b2:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800d8b6:	2820      	cmp	r0, #32
 800d8b8:	dd13      	ble.n	800d8e2 <_dtoa_r+0x1f2>
 800d8ba:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800d8be:	9b00      	ldr	r3, [sp, #0]
 800d8c0:	fa08 f800 	lsl.w	r8, r8, r0
 800d8c4:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800d8c8:	fa23 f000 	lsr.w	r0, r3, r0
 800d8cc:	ea48 0000 	orr.w	r0, r8, r0
 800d8d0:	f7f2 fe28 	bl	8000524 <__aeabi_ui2d>
 800d8d4:	2301      	movs	r3, #1
 800d8d6:	4682      	mov	sl, r0
 800d8d8:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800d8dc:	3d01      	subs	r5, #1
 800d8de:	9313      	str	r3, [sp, #76]	; 0x4c
 800d8e0:	e772      	b.n	800d7c8 <_dtoa_r+0xd8>
 800d8e2:	9b00      	ldr	r3, [sp, #0]
 800d8e4:	f1c0 0020 	rsb	r0, r0, #32
 800d8e8:	fa03 f000 	lsl.w	r0, r3, r0
 800d8ec:	e7f0      	b.n	800d8d0 <_dtoa_r+0x1e0>
 800d8ee:	2301      	movs	r3, #1
 800d8f0:	e7b1      	b.n	800d856 <_dtoa_r+0x166>
 800d8f2:	900f      	str	r0, [sp, #60]	; 0x3c
 800d8f4:	e7b0      	b.n	800d858 <_dtoa_r+0x168>
 800d8f6:	9b05      	ldr	r3, [sp, #20]
 800d8f8:	eba3 030a 	sub.w	r3, r3, sl
 800d8fc:	9305      	str	r3, [sp, #20]
 800d8fe:	f1ca 0300 	rsb	r3, sl, #0
 800d902:	9307      	str	r3, [sp, #28]
 800d904:	2300      	movs	r3, #0
 800d906:	930e      	str	r3, [sp, #56]	; 0x38
 800d908:	e7bb      	b.n	800d882 <_dtoa_r+0x192>
 800d90a:	2301      	movs	r3, #1
 800d90c:	930a      	str	r3, [sp, #40]	; 0x28
 800d90e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d910:	2b00      	cmp	r3, #0
 800d912:	dd56      	ble.n	800d9c2 <_dtoa_r+0x2d2>
 800d914:	9302      	str	r3, [sp, #8]
 800d916:	4699      	mov	r9, r3
 800d918:	2200      	movs	r2, #0
 800d91a:	6462      	str	r2, [r4, #68]	; 0x44
 800d91c:	2204      	movs	r2, #4
 800d91e:	f102 0014 	add.w	r0, r2, #20
 800d922:	4298      	cmp	r0, r3
 800d924:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800d926:	d951      	bls.n	800d9cc <_dtoa_r+0x2dc>
 800d928:	4620      	mov	r0, r4
 800d92a:	f001 fa40 	bl	800edae <_Balloc>
 800d92e:	f1b9 0f0e 	cmp.w	r9, #14
 800d932:	4683      	mov	fp, r0
 800d934:	6420      	str	r0, [r4, #64]	; 0x40
 800d936:	f200 80e8 	bhi.w	800db0a <_dtoa_r+0x41a>
 800d93a:	2d00      	cmp	r5, #0
 800d93c:	f000 80e5 	beq.w	800db0a <_dtoa_r+0x41a>
 800d940:	ed9d 7b00 	vldr	d7, [sp]
 800d944:	f1ba 0f00 	cmp.w	sl, #0
 800d948:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800d94c:	dd76      	ble.n	800da3c <_dtoa_r+0x34c>
 800d94e:	4a2b      	ldr	r2, [pc, #172]	; (800d9fc <_dtoa_r+0x30c>)
 800d950:	f00a 030f 	and.w	r3, sl, #15
 800d954:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d958:	ed93 7b00 	vldr	d7, [r3]
 800d95c:	ea4f 162a 	mov.w	r6, sl, asr #4
 800d960:	06f0      	lsls	r0, r6, #27
 800d962:	ed8d 7b08 	vstr	d7, [sp, #32]
 800d966:	d567      	bpl.n	800da38 <_dtoa_r+0x348>
 800d968:	4b25      	ldr	r3, [pc, #148]	; (800da00 <_dtoa_r+0x310>)
 800d96a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800d96e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d972:	f7f2 ff7b 	bl	800086c <__aeabi_ddiv>
 800d976:	e9cd 0100 	strd	r0, r1, [sp]
 800d97a:	f006 060f 	and.w	r6, r6, #15
 800d97e:	2503      	movs	r5, #3
 800d980:	4f1f      	ldr	r7, [pc, #124]	; (800da00 <_dtoa_r+0x310>)
 800d982:	e04e      	b.n	800da22 <_dtoa_r+0x332>
 800d984:	2301      	movs	r3, #1
 800d986:	930a      	str	r3, [sp, #40]	; 0x28
 800d988:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d98a:	4453      	add	r3, sl
 800d98c:	f103 0901 	add.w	r9, r3, #1
 800d990:	9302      	str	r3, [sp, #8]
 800d992:	464b      	mov	r3, r9
 800d994:	2b01      	cmp	r3, #1
 800d996:	bfb8      	it	lt
 800d998:	2301      	movlt	r3, #1
 800d99a:	e7bd      	b.n	800d918 <_dtoa_r+0x228>
 800d99c:	2300      	movs	r3, #0
 800d99e:	e7b5      	b.n	800d90c <_dtoa_r+0x21c>
 800d9a0:	2300      	movs	r3, #0
 800d9a2:	e7f0      	b.n	800d986 <_dtoa_r+0x296>
 800d9a4:	2501      	movs	r5, #1
 800d9a6:	2300      	movs	r3, #0
 800d9a8:	9306      	str	r3, [sp, #24]
 800d9aa:	950a      	str	r5, [sp, #40]	; 0x28
 800d9ac:	f04f 33ff 	mov.w	r3, #4294967295
 800d9b0:	9302      	str	r3, [sp, #8]
 800d9b2:	4699      	mov	r9, r3
 800d9b4:	2200      	movs	r2, #0
 800d9b6:	2312      	movs	r3, #18
 800d9b8:	920b      	str	r2, [sp, #44]	; 0x2c
 800d9ba:	e7ad      	b.n	800d918 <_dtoa_r+0x228>
 800d9bc:	2301      	movs	r3, #1
 800d9be:	930a      	str	r3, [sp, #40]	; 0x28
 800d9c0:	e7f4      	b.n	800d9ac <_dtoa_r+0x2bc>
 800d9c2:	2301      	movs	r3, #1
 800d9c4:	9302      	str	r3, [sp, #8]
 800d9c6:	4699      	mov	r9, r3
 800d9c8:	461a      	mov	r2, r3
 800d9ca:	e7f5      	b.n	800d9b8 <_dtoa_r+0x2c8>
 800d9cc:	3101      	adds	r1, #1
 800d9ce:	6461      	str	r1, [r4, #68]	; 0x44
 800d9d0:	0052      	lsls	r2, r2, #1
 800d9d2:	e7a4      	b.n	800d91e <_dtoa_r+0x22e>
 800d9d4:	f3af 8000 	nop.w
 800d9d8:	636f4361 	.word	0x636f4361
 800d9dc:	3fd287a7 	.word	0x3fd287a7
 800d9e0:	8b60c8b3 	.word	0x8b60c8b3
 800d9e4:	3fc68a28 	.word	0x3fc68a28
 800d9e8:	509f79fb 	.word	0x509f79fb
 800d9ec:	3fd34413 	.word	0x3fd34413
 800d9f0:	7ff00000 	.word	0x7ff00000
 800d9f4:	08010363 	.word	0x08010363
 800d9f8:	3ff80000 	.word	0x3ff80000
 800d9fc:	080103c8 	.word	0x080103c8
 800da00:	080103a0 	.word	0x080103a0
 800da04:	0801038d 	.word	0x0801038d
 800da08:	07f1      	lsls	r1, r6, #31
 800da0a:	d508      	bpl.n	800da1e <_dtoa_r+0x32e>
 800da0c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800da10:	e9d7 2300 	ldrd	r2, r3, [r7]
 800da14:	f7f2 fe00 	bl	8000618 <__aeabi_dmul>
 800da18:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800da1c:	3501      	adds	r5, #1
 800da1e:	1076      	asrs	r6, r6, #1
 800da20:	3708      	adds	r7, #8
 800da22:	2e00      	cmp	r6, #0
 800da24:	d1f0      	bne.n	800da08 <_dtoa_r+0x318>
 800da26:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800da2a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800da2e:	f7f2 ff1d 	bl	800086c <__aeabi_ddiv>
 800da32:	e9cd 0100 	strd	r0, r1, [sp]
 800da36:	e01a      	b.n	800da6e <_dtoa_r+0x37e>
 800da38:	2502      	movs	r5, #2
 800da3a:	e7a1      	b.n	800d980 <_dtoa_r+0x290>
 800da3c:	f000 80a0 	beq.w	800db80 <_dtoa_r+0x490>
 800da40:	f1ca 0600 	rsb	r6, sl, #0
 800da44:	4b9f      	ldr	r3, [pc, #636]	; (800dcc4 <_dtoa_r+0x5d4>)
 800da46:	4fa0      	ldr	r7, [pc, #640]	; (800dcc8 <_dtoa_r+0x5d8>)
 800da48:	f006 020f 	and.w	r2, r6, #15
 800da4c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800da50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da54:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800da58:	f7f2 fdde 	bl	8000618 <__aeabi_dmul>
 800da5c:	e9cd 0100 	strd	r0, r1, [sp]
 800da60:	1136      	asrs	r6, r6, #4
 800da62:	2300      	movs	r3, #0
 800da64:	2502      	movs	r5, #2
 800da66:	2e00      	cmp	r6, #0
 800da68:	d17f      	bne.n	800db6a <_dtoa_r+0x47a>
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d1e1      	bne.n	800da32 <_dtoa_r+0x342>
 800da6e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800da70:	2b00      	cmp	r3, #0
 800da72:	f000 8087 	beq.w	800db84 <_dtoa_r+0x494>
 800da76:	e9dd 6700 	ldrd	r6, r7, [sp]
 800da7a:	2200      	movs	r2, #0
 800da7c:	4b93      	ldr	r3, [pc, #588]	; (800dccc <_dtoa_r+0x5dc>)
 800da7e:	4630      	mov	r0, r6
 800da80:	4639      	mov	r1, r7
 800da82:	f7f3 f83b 	bl	8000afc <__aeabi_dcmplt>
 800da86:	2800      	cmp	r0, #0
 800da88:	d07c      	beq.n	800db84 <_dtoa_r+0x494>
 800da8a:	f1b9 0f00 	cmp.w	r9, #0
 800da8e:	d079      	beq.n	800db84 <_dtoa_r+0x494>
 800da90:	9b02      	ldr	r3, [sp, #8]
 800da92:	2b00      	cmp	r3, #0
 800da94:	dd35      	ble.n	800db02 <_dtoa_r+0x412>
 800da96:	f10a 33ff 	add.w	r3, sl, #4294967295
 800da9a:	9308      	str	r3, [sp, #32]
 800da9c:	4639      	mov	r1, r7
 800da9e:	2200      	movs	r2, #0
 800daa0:	4b8b      	ldr	r3, [pc, #556]	; (800dcd0 <_dtoa_r+0x5e0>)
 800daa2:	4630      	mov	r0, r6
 800daa4:	f7f2 fdb8 	bl	8000618 <__aeabi_dmul>
 800daa8:	e9cd 0100 	strd	r0, r1, [sp]
 800daac:	9f02      	ldr	r7, [sp, #8]
 800daae:	3501      	adds	r5, #1
 800dab0:	4628      	mov	r0, r5
 800dab2:	f7f2 fd47 	bl	8000544 <__aeabi_i2d>
 800dab6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800daba:	f7f2 fdad 	bl	8000618 <__aeabi_dmul>
 800dabe:	2200      	movs	r2, #0
 800dac0:	4b84      	ldr	r3, [pc, #528]	; (800dcd4 <_dtoa_r+0x5e4>)
 800dac2:	f7f2 fbf3 	bl	80002ac <__adddf3>
 800dac6:	4605      	mov	r5, r0
 800dac8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800dacc:	2f00      	cmp	r7, #0
 800dace:	d15d      	bne.n	800db8c <_dtoa_r+0x49c>
 800dad0:	2200      	movs	r2, #0
 800dad2:	4b81      	ldr	r3, [pc, #516]	; (800dcd8 <_dtoa_r+0x5e8>)
 800dad4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dad8:	f7f2 fbe6 	bl	80002a8 <__aeabi_dsub>
 800dadc:	462a      	mov	r2, r5
 800dade:	4633      	mov	r3, r6
 800dae0:	e9cd 0100 	strd	r0, r1, [sp]
 800dae4:	f7f3 f828 	bl	8000b38 <__aeabi_dcmpgt>
 800dae8:	2800      	cmp	r0, #0
 800daea:	f040 8288 	bne.w	800dffe <_dtoa_r+0x90e>
 800daee:	462a      	mov	r2, r5
 800daf0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800daf4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800daf8:	f7f3 f800 	bl	8000afc <__aeabi_dcmplt>
 800dafc:	2800      	cmp	r0, #0
 800dafe:	f040 827c 	bne.w	800dffa <_dtoa_r+0x90a>
 800db02:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800db06:	e9cd 2300 	strd	r2, r3, [sp]
 800db0a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	f2c0 8150 	blt.w	800ddb2 <_dtoa_r+0x6c2>
 800db12:	f1ba 0f0e 	cmp.w	sl, #14
 800db16:	f300 814c 	bgt.w	800ddb2 <_dtoa_r+0x6c2>
 800db1a:	4b6a      	ldr	r3, [pc, #424]	; (800dcc4 <_dtoa_r+0x5d4>)
 800db1c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800db20:	ed93 7b00 	vldr	d7, [r3]
 800db24:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800db26:	2b00      	cmp	r3, #0
 800db28:	ed8d 7b02 	vstr	d7, [sp, #8]
 800db2c:	f280 80d8 	bge.w	800dce0 <_dtoa_r+0x5f0>
 800db30:	f1b9 0f00 	cmp.w	r9, #0
 800db34:	f300 80d4 	bgt.w	800dce0 <_dtoa_r+0x5f0>
 800db38:	f040 825e 	bne.w	800dff8 <_dtoa_r+0x908>
 800db3c:	2200      	movs	r2, #0
 800db3e:	4b66      	ldr	r3, [pc, #408]	; (800dcd8 <_dtoa_r+0x5e8>)
 800db40:	ec51 0b17 	vmov	r0, r1, d7
 800db44:	f7f2 fd68 	bl	8000618 <__aeabi_dmul>
 800db48:	e9dd 2300 	ldrd	r2, r3, [sp]
 800db4c:	f7f2 ffea 	bl	8000b24 <__aeabi_dcmpge>
 800db50:	464f      	mov	r7, r9
 800db52:	464e      	mov	r6, r9
 800db54:	2800      	cmp	r0, #0
 800db56:	f040 8234 	bne.w	800dfc2 <_dtoa_r+0x8d2>
 800db5a:	2331      	movs	r3, #49	; 0x31
 800db5c:	f10b 0501 	add.w	r5, fp, #1
 800db60:	f88b 3000 	strb.w	r3, [fp]
 800db64:	f10a 0a01 	add.w	sl, sl, #1
 800db68:	e22f      	b.n	800dfca <_dtoa_r+0x8da>
 800db6a:	07f2      	lsls	r2, r6, #31
 800db6c:	d505      	bpl.n	800db7a <_dtoa_r+0x48a>
 800db6e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800db72:	f7f2 fd51 	bl	8000618 <__aeabi_dmul>
 800db76:	3501      	adds	r5, #1
 800db78:	2301      	movs	r3, #1
 800db7a:	1076      	asrs	r6, r6, #1
 800db7c:	3708      	adds	r7, #8
 800db7e:	e772      	b.n	800da66 <_dtoa_r+0x376>
 800db80:	2502      	movs	r5, #2
 800db82:	e774      	b.n	800da6e <_dtoa_r+0x37e>
 800db84:	f8cd a020 	str.w	sl, [sp, #32]
 800db88:	464f      	mov	r7, r9
 800db8a:	e791      	b.n	800dab0 <_dtoa_r+0x3c0>
 800db8c:	4b4d      	ldr	r3, [pc, #308]	; (800dcc4 <_dtoa_r+0x5d4>)
 800db8e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800db92:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800db96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d047      	beq.n	800dc2c <_dtoa_r+0x53c>
 800db9c:	4602      	mov	r2, r0
 800db9e:	460b      	mov	r3, r1
 800dba0:	2000      	movs	r0, #0
 800dba2:	494e      	ldr	r1, [pc, #312]	; (800dcdc <_dtoa_r+0x5ec>)
 800dba4:	f7f2 fe62 	bl	800086c <__aeabi_ddiv>
 800dba8:	462a      	mov	r2, r5
 800dbaa:	4633      	mov	r3, r6
 800dbac:	f7f2 fb7c 	bl	80002a8 <__aeabi_dsub>
 800dbb0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800dbb4:	465d      	mov	r5, fp
 800dbb6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dbba:	f7f2 ffdd 	bl	8000b78 <__aeabi_d2iz>
 800dbbe:	4606      	mov	r6, r0
 800dbc0:	f7f2 fcc0 	bl	8000544 <__aeabi_i2d>
 800dbc4:	4602      	mov	r2, r0
 800dbc6:	460b      	mov	r3, r1
 800dbc8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dbcc:	f7f2 fb6c 	bl	80002a8 <__aeabi_dsub>
 800dbd0:	3630      	adds	r6, #48	; 0x30
 800dbd2:	f805 6b01 	strb.w	r6, [r5], #1
 800dbd6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800dbda:	e9cd 0100 	strd	r0, r1, [sp]
 800dbde:	f7f2 ff8d 	bl	8000afc <__aeabi_dcmplt>
 800dbe2:	2800      	cmp	r0, #0
 800dbe4:	d163      	bne.n	800dcae <_dtoa_r+0x5be>
 800dbe6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dbea:	2000      	movs	r0, #0
 800dbec:	4937      	ldr	r1, [pc, #220]	; (800dccc <_dtoa_r+0x5dc>)
 800dbee:	f7f2 fb5b 	bl	80002a8 <__aeabi_dsub>
 800dbf2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800dbf6:	f7f2 ff81 	bl	8000afc <__aeabi_dcmplt>
 800dbfa:	2800      	cmp	r0, #0
 800dbfc:	f040 80b7 	bne.w	800dd6e <_dtoa_r+0x67e>
 800dc00:	eba5 030b 	sub.w	r3, r5, fp
 800dc04:	429f      	cmp	r7, r3
 800dc06:	f77f af7c 	ble.w	800db02 <_dtoa_r+0x412>
 800dc0a:	2200      	movs	r2, #0
 800dc0c:	4b30      	ldr	r3, [pc, #192]	; (800dcd0 <_dtoa_r+0x5e0>)
 800dc0e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800dc12:	f7f2 fd01 	bl	8000618 <__aeabi_dmul>
 800dc16:	2200      	movs	r2, #0
 800dc18:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800dc1c:	4b2c      	ldr	r3, [pc, #176]	; (800dcd0 <_dtoa_r+0x5e0>)
 800dc1e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dc22:	f7f2 fcf9 	bl	8000618 <__aeabi_dmul>
 800dc26:	e9cd 0100 	strd	r0, r1, [sp]
 800dc2a:	e7c4      	b.n	800dbb6 <_dtoa_r+0x4c6>
 800dc2c:	462a      	mov	r2, r5
 800dc2e:	4633      	mov	r3, r6
 800dc30:	f7f2 fcf2 	bl	8000618 <__aeabi_dmul>
 800dc34:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800dc38:	eb0b 0507 	add.w	r5, fp, r7
 800dc3c:	465e      	mov	r6, fp
 800dc3e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dc42:	f7f2 ff99 	bl	8000b78 <__aeabi_d2iz>
 800dc46:	4607      	mov	r7, r0
 800dc48:	f7f2 fc7c 	bl	8000544 <__aeabi_i2d>
 800dc4c:	3730      	adds	r7, #48	; 0x30
 800dc4e:	4602      	mov	r2, r0
 800dc50:	460b      	mov	r3, r1
 800dc52:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dc56:	f7f2 fb27 	bl	80002a8 <__aeabi_dsub>
 800dc5a:	f806 7b01 	strb.w	r7, [r6], #1
 800dc5e:	42ae      	cmp	r6, r5
 800dc60:	e9cd 0100 	strd	r0, r1, [sp]
 800dc64:	f04f 0200 	mov.w	r2, #0
 800dc68:	d126      	bne.n	800dcb8 <_dtoa_r+0x5c8>
 800dc6a:	4b1c      	ldr	r3, [pc, #112]	; (800dcdc <_dtoa_r+0x5ec>)
 800dc6c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800dc70:	f7f2 fb1c 	bl	80002ac <__adddf3>
 800dc74:	4602      	mov	r2, r0
 800dc76:	460b      	mov	r3, r1
 800dc78:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dc7c:	f7f2 ff5c 	bl	8000b38 <__aeabi_dcmpgt>
 800dc80:	2800      	cmp	r0, #0
 800dc82:	d174      	bne.n	800dd6e <_dtoa_r+0x67e>
 800dc84:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800dc88:	2000      	movs	r0, #0
 800dc8a:	4914      	ldr	r1, [pc, #80]	; (800dcdc <_dtoa_r+0x5ec>)
 800dc8c:	f7f2 fb0c 	bl	80002a8 <__aeabi_dsub>
 800dc90:	4602      	mov	r2, r0
 800dc92:	460b      	mov	r3, r1
 800dc94:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dc98:	f7f2 ff30 	bl	8000afc <__aeabi_dcmplt>
 800dc9c:	2800      	cmp	r0, #0
 800dc9e:	f43f af30 	beq.w	800db02 <_dtoa_r+0x412>
 800dca2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800dca6:	2b30      	cmp	r3, #48	; 0x30
 800dca8:	f105 32ff 	add.w	r2, r5, #4294967295
 800dcac:	d002      	beq.n	800dcb4 <_dtoa_r+0x5c4>
 800dcae:	f8dd a020 	ldr.w	sl, [sp, #32]
 800dcb2:	e04a      	b.n	800dd4a <_dtoa_r+0x65a>
 800dcb4:	4615      	mov	r5, r2
 800dcb6:	e7f4      	b.n	800dca2 <_dtoa_r+0x5b2>
 800dcb8:	4b05      	ldr	r3, [pc, #20]	; (800dcd0 <_dtoa_r+0x5e0>)
 800dcba:	f7f2 fcad 	bl	8000618 <__aeabi_dmul>
 800dcbe:	e9cd 0100 	strd	r0, r1, [sp]
 800dcc2:	e7bc      	b.n	800dc3e <_dtoa_r+0x54e>
 800dcc4:	080103c8 	.word	0x080103c8
 800dcc8:	080103a0 	.word	0x080103a0
 800dccc:	3ff00000 	.word	0x3ff00000
 800dcd0:	40240000 	.word	0x40240000
 800dcd4:	401c0000 	.word	0x401c0000
 800dcd8:	40140000 	.word	0x40140000
 800dcdc:	3fe00000 	.word	0x3fe00000
 800dce0:	e9dd 6700 	ldrd	r6, r7, [sp]
 800dce4:	465d      	mov	r5, fp
 800dce6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800dcea:	4630      	mov	r0, r6
 800dcec:	4639      	mov	r1, r7
 800dcee:	f7f2 fdbd 	bl	800086c <__aeabi_ddiv>
 800dcf2:	f7f2 ff41 	bl	8000b78 <__aeabi_d2iz>
 800dcf6:	4680      	mov	r8, r0
 800dcf8:	f7f2 fc24 	bl	8000544 <__aeabi_i2d>
 800dcfc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800dd00:	f7f2 fc8a 	bl	8000618 <__aeabi_dmul>
 800dd04:	4602      	mov	r2, r0
 800dd06:	460b      	mov	r3, r1
 800dd08:	4630      	mov	r0, r6
 800dd0a:	4639      	mov	r1, r7
 800dd0c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800dd10:	f7f2 faca 	bl	80002a8 <__aeabi_dsub>
 800dd14:	f805 6b01 	strb.w	r6, [r5], #1
 800dd18:	eba5 060b 	sub.w	r6, r5, fp
 800dd1c:	45b1      	cmp	r9, r6
 800dd1e:	4602      	mov	r2, r0
 800dd20:	460b      	mov	r3, r1
 800dd22:	d139      	bne.n	800dd98 <_dtoa_r+0x6a8>
 800dd24:	f7f2 fac2 	bl	80002ac <__adddf3>
 800dd28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800dd2c:	4606      	mov	r6, r0
 800dd2e:	460f      	mov	r7, r1
 800dd30:	f7f2 ff02 	bl	8000b38 <__aeabi_dcmpgt>
 800dd34:	b9c8      	cbnz	r0, 800dd6a <_dtoa_r+0x67a>
 800dd36:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800dd3a:	4630      	mov	r0, r6
 800dd3c:	4639      	mov	r1, r7
 800dd3e:	f7f2 fed3 	bl	8000ae8 <__aeabi_dcmpeq>
 800dd42:	b110      	cbz	r0, 800dd4a <_dtoa_r+0x65a>
 800dd44:	f018 0f01 	tst.w	r8, #1
 800dd48:	d10f      	bne.n	800dd6a <_dtoa_r+0x67a>
 800dd4a:	9904      	ldr	r1, [sp, #16]
 800dd4c:	4620      	mov	r0, r4
 800dd4e:	f001 f853 	bl	800edf8 <_Bfree>
 800dd52:	2300      	movs	r3, #0
 800dd54:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800dd56:	702b      	strb	r3, [r5, #0]
 800dd58:	f10a 0301 	add.w	r3, sl, #1
 800dd5c:	6013      	str	r3, [r2, #0]
 800dd5e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	f43f acff 	beq.w	800d764 <_dtoa_r+0x74>
 800dd66:	601d      	str	r5, [r3, #0]
 800dd68:	e4fc      	b.n	800d764 <_dtoa_r+0x74>
 800dd6a:	f8cd a020 	str.w	sl, [sp, #32]
 800dd6e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800dd72:	2a39      	cmp	r2, #57	; 0x39
 800dd74:	f105 33ff 	add.w	r3, r5, #4294967295
 800dd78:	d108      	bne.n	800dd8c <_dtoa_r+0x69c>
 800dd7a:	459b      	cmp	fp, r3
 800dd7c:	d10a      	bne.n	800dd94 <_dtoa_r+0x6a4>
 800dd7e:	9b08      	ldr	r3, [sp, #32]
 800dd80:	3301      	adds	r3, #1
 800dd82:	9308      	str	r3, [sp, #32]
 800dd84:	2330      	movs	r3, #48	; 0x30
 800dd86:	f88b 3000 	strb.w	r3, [fp]
 800dd8a:	465b      	mov	r3, fp
 800dd8c:	781a      	ldrb	r2, [r3, #0]
 800dd8e:	3201      	adds	r2, #1
 800dd90:	701a      	strb	r2, [r3, #0]
 800dd92:	e78c      	b.n	800dcae <_dtoa_r+0x5be>
 800dd94:	461d      	mov	r5, r3
 800dd96:	e7ea      	b.n	800dd6e <_dtoa_r+0x67e>
 800dd98:	2200      	movs	r2, #0
 800dd9a:	4b9b      	ldr	r3, [pc, #620]	; (800e008 <_dtoa_r+0x918>)
 800dd9c:	f7f2 fc3c 	bl	8000618 <__aeabi_dmul>
 800dda0:	2200      	movs	r2, #0
 800dda2:	2300      	movs	r3, #0
 800dda4:	4606      	mov	r6, r0
 800dda6:	460f      	mov	r7, r1
 800dda8:	f7f2 fe9e 	bl	8000ae8 <__aeabi_dcmpeq>
 800ddac:	2800      	cmp	r0, #0
 800ddae:	d09a      	beq.n	800dce6 <_dtoa_r+0x5f6>
 800ddb0:	e7cb      	b.n	800dd4a <_dtoa_r+0x65a>
 800ddb2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ddb4:	2a00      	cmp	r2, #0
 800ddb6:	f000 808b 	beq.w	800ded0 <_dtoa_r+0x7e0>
 800ddba:	9a06      	ldr	r2, [sp, #24]
 800ddbc:	2a01      	cmp	r2, #1
 800ddbe:	dc6e      	bgt.n	800de9e <_dtoa_r+0x7ae>
 800ddc0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ddc2:	2a00      	cmp	r2, #0
 800ddc4:	d067      	beq.n	800de96 <_dtoa_r+0x7a6>
 800ddc6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ddca:	9f07      	ldr	r7, [sp, #28]
 800ddcc:	9d05      	ldr	r5, [sp, #20]
 800ddce:	9a05      	ldr	r2, [sp, #20]
 800ddd0:	2101      	movs	r1, #1
 800ddd2:	441a      	add	r2, r3
 800ddd4:	4620      	mov	r0, r4
 800ddd6:	9205      	str	r2, [sp, #20]
 800ddd8:	4498      	add	r8, r3
 800ddda:	f001 f8dd 	bl	800ef98 <__i2b>
 800ddde:	4606      	mov	r6, r0
 800dde0:	2d00      	cmp	r5, #0
 800dde2:	dd0c      	ble.n	800ddfe <_dtoa_r+0x70e>
 800dde4:	f1b8 0f00 	cmp.w	r8, #0
 800dde8:	dd09      	ble.n	800ddfe <_dtoa_r+0x70e>
 800ddea:	4545      	cmp	r5, r8
 800ddec:	9a05      	ldr	r2, [sp, #20]
 800ddee:	462b      	mov	r3, r5
 800ddf0:	bfa8      	it	ge
 800ddf2:	4643      	movge	r3, r8
 800ddf4:	1ad2      	subs	r2, r2, r3
 800ddf6:	9205      	str	r2, [sp, #20]
 800ddf8:	1aed      	subs	r5, r5, r3
 800ddfa:	eba8 0803 	sub.w	r8, r8, r3
 800ddfe:	9b07      	ldr	r3, [sp, #28]
 800de00:	b1eb      	cbz	r3, 800de3e <_dtoa_r+0x74e>
 800de02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800de04:	2b00      	cmp	r3, #0
 800de06:	d067      	beq.n	800ded8 <_dtoa_r+0x7e8>
 800de08:	b18f      	cbz	r7, 800de2e <_dtoa_r+0x73e>
 800de0a:	4631      	mov	r1, r6
 800de0c:	463a      	mov	r2, r7
 800de0e:	4620      	mov	r0, r4
 800de10:	f001 f962 	bl	800f0d8 <__pow5mult>
 800de14:	9a04      	ldr	r2, [sp, #16]
 800de16:	4601      	mov	r1, r0
 800de18:	4606      	mov	r6, r0
 800de1a:	4620      	mov	r0, r4
 800de1c:	f001 f8c5 	bl	800efaa <__multiply>
 800de20:	9904      	ldr	r1, [sp, #16]
 800de22:	9008      	str	r0, [sp, #32]
 800de24:	4620      	mov	r0, r4
 800de26:	f000 ffe7 	bl	800edf8 <_Bfree>
 800de2a:	9b08      	ldr	r3, [sp, #32]
 800de2c:	9304      	str	r3, [sp, #16]
 800de2e:	9b07      	ldr	r3, [sp, #28]
 800de30:	1bda      	subs	r2, r3, r7
 800de32:	d004      	beq.n	800de3e <_dtoa_r+0x74e>
 800de34:	9904      	ldr	r1, [sp, #16]
 800de36:	4620      	mov	r0, r4
 800de38:	f001 f94e 	bl	800f0d8 <__pow5mult>
 800de3c:	9004      	str	r0, [sp, #16]
 800de3e:	2101      	movs	r1, #1
 800de40:	4620      	mov	r0, r4
 800de42:	f001 f8a9 	bl	800ef98 <__i2b>
 800de46:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800de48:	4607      	mov	r7, r0
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	f000 81cf 	beq.w	800e1ee <_dtoa_r+0xafe>
 800de50:	461a      	mov	r2, r3
 800de52:	4601      	mov	r1, r0
 800de54:	4620      	mov	r0, r4
 800de56:	f001 f93f 	bl	800f0d8 <__pow5mult>
 800de5a:	9b06      	ldr	r3, [sp, #24]
 800de5c:	2b01      	cmp	r3, #1
 800de5e:	4607      	mov	r7, r0
 800de60:	dc40      	bgt.n	800dee4 <_dtoa_r+0x7f4>
 800de62:	9b00      	ldr	r3, [sp, #0]
 800de64:	2b00      	cmp	r3, #0
 800de66:	d139      	bne.n	800dedc <_dtoa_r+0x7ec>
 800de68:	9b01      	ldr	r3, [sp, #4]
 800de6a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800de6e:	2b00      	cmp	r3, #0
 800de70:	d136      	bne.n	800dee0 <_dtoa_r+0x7f0>
 800de72:	9b01      	ldr	r3, [sp, #4]
 800de74:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800de78:	0d1b      	lsrs	r3, r3, #20
 800de7a:	051b      	lsls	r3, r3, #20
 800de7c:	b12b      	cbz	r3, 800de8a <_dtoa_r+0x79a>
 800de7e:	9b05      	ldr	r3, [sp, #20]
 800de80:	3301      	adds	r3, #1
 800de82:	9305      	str	r3, [sp, #20]
 800de84:	f108 0801 	add.w	r8, r8, #1
 800de88:	2301      	movs	r3, #1
 800de8a:	9307      	str	r3, [sp, #28]
 800de8c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d12a      	bne.n	800dee8 <_dtoa_r+0x7f8>
 800de92:	2001      	movs	r0, #1
 800de94:	e030      	b.n	800def8 <_dtoa_r+0x808>
 800de96:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800de98:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800de9c:	e795      	b.n	800ddca <_dtoa_r+0x6da>
 800de9e:	9b07      	ldr	r3, [sp, #28]
 800dea0:	f109 37ff 	add.w	r7, r9, #4294967295
 800dea4:	42bb      	cmp	r3, r7
 800dea6:	bfbf      	itttt	lt
 800dea8:	9b07      	ldrlt	r3, [sp, #28]
 800deaa:	9707      	strlt	r7, [sp, #28]
 800deac:	1afa      	sublt	r2, r7, r3
 800deae:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800deb0:	bfbb      	ittet	lt
 800deb2:	189b      	addlt	r3, r3, r2
 800deb4:	930e      	strlt	r3, [sp, #56]	; 0x38
 800deb6:	1bdf      	subge	r7, r3, r7
 800deb8:	2700      	movlt	r7, #0
 800deba:	f1b9 0f00 	cmp.w	r9, #0
 800debe:	bfb5      	itete	lt
 800dec0:	9b05      	ldrlt	r3, [sp, #20]
 800dec2:	9d05      	ldrge	r5, [sp, #20]
 800dec4:	eba3 0509 	sublt.w	r5, r3, r9
 800dec8:	464b      	movge	r3, r9
 800deca:	bfb8      	it	lt
 800decc:	2300      	movlt	r3, #0
 800dece:	e77e      	b.n	800ddce <_dtoa_r+0x6de>
 800ded0:	9f07      	ldr	r7, [sp, #28]
 800ded2:	9d05      	ldr	r5, [sp, #20]
 800ded4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800ded6:	e783      	b.n	800dde0 <_dtoa_r+0x6f0>
 800ded8:	9a07      	ldr	r2, [sp, #28]
 800deda:	e7ab      	b.n	800de34 <_dtoa_r+0x744>
 800dedc:	2300      	movs	r3, #0
 800dede:	e7d4      	b.n	800de8a <_dtoa_r+0x79a>
 800dee0:	9b00      	ldr	r3, [sp, #0]
 800dee2:	e7d2      	b.n	800de8a <_dtoa_r+0x79a>
 800dee4:	2300      	movs	r3, #0
 800dee6:	9307      	str	r3, [sp, #28]
 800dee8:	693b      	ldr	r3, [r7, #16]
 800deea:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800deee:	6918      	ldr	r0, [r3, #16]
 800def0:	f001 f804 	bl	800eefc <__hi0bits>
 800def4:	f1c0 0020 	rsb	r0, r0, #32
 800def8:	4440      	add	r0, r8
 800defa:	f010 001f 	ands.w	r0, r0, #31
 800defe:	d047      	beq.n	800df90 <_dtoa_r+0x8a0>
 800df00:	f1c0 0320 	rsb	r3, r0, #32
 800df04:	2b04      	cmp	r3, #4
 800df06:	dd3b      	ble.n	800df80 <_dtoa_r+0x890>
 800df08:	9b05      	ldr	r3, [sp, #20]
 800df0a:	f1c0 001c 	rsb	r0, r0, #28
 800df0e:	4403      	add	r3, r0
 800df10:	9305      	str	r3, [sp, #20]
 800df12:	4405      	add	r5, r0
 800df14:	4480      	add	r8, r0
 800df16:	9b05      	ldr	r3, [sp, #20]
 800df18:	2b00      	cmp	r3, #0
 800df1a:	dd05      	ble.n	800df28 <_dtoa_r+0x838>
 800df1c:	461a      	mov	r2, r3
 800df1e:	9904      	ldr	r1, [sp, #16]
 800df20:	4620      	mov	r0, r4
 800df22:	f001 f919 	bl	800f158 <__lshift>
 800df26:	9004      	str	r0, [sp, #16]
 800df28:	f1b8 0f00 	cmp.w	r8, #0
 800df2c:	dd05      	ble.n	800df3a <_dtoa_r+0x84a>
 800df2e:	4639      	mov	r1, r7
 800df30:	4642      	mov	r2, r8
 800df32:	4620      	mov	r0, r4
 800df34:	f001 f910 	bl	800f158 <__lshift>
 800df38:	4607      	mov	r7, r0
 800df3a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800df3c:	b353      	cbz	r3, 800df94 <_dtoa_r+0x8a4>
 800df3e:	4639      	mov	r1, r7
 800df40:	9804      	ldr	r0, [sp, #16]
 800df42:	f001 f95d 	bl	800f200 <__mcmp>
 800df46:	2800      	cmp	r0, #0
 800df48:	da24      	bge.n	800df94 <_dtoa_r+0x8a4>
 800df4a:	2300      	movs	r3, #0
 800df4c:	220a      	movs	r2, #10
 800df4e:	9904      	ldr	r1, [sp, #16]
 800df50:	4620      	mov	r0, r4
 800df52:	f000 ff5a 	bl	800ee0a <__multadd>
 800df56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800df58:	9004      	str	r0, [sp, #16]
 800df5a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800df5e:	2b00      	cmp	r3, #0
 800df60:	f000 814c 	beq.w	800e1fc <_dtoa_r+0xb0c>
 800df64:	2300      	movs	r3, #0
 800df66:	4631      	mov	r1, r6
 800df68:	220a      	movs	r2, #10
 800df6a:	4620      	mov	r0, r4
 800df6c:	f000 ff4d 	bl	800ee0a <__multadd>
 800df70:	9b02      	ldr	r3, [sp, #8]
 800df72:	2b00      	cmp	r3, #0
 800df74:	4606      	mov	r6, r0
 800df76:	dc4f      	bgt.n	800e018 <_dtoa_r+0x928>
 800df78:	9b06      	ldr	r3, [sp, #24]
 800df7a:	2b02      	cmp	r3, #2
 800df7c:	dd4c      	ble.n	800e018 <_dtoa_r+0x928>
 800df7e:	e011      	b.n	800dfa4 <_dtoa_r+0x8b4>
 800df80:	d0c9      	beq.n	800df16 <_dtoa_r+0x826>
 800df82:	9a05      	ldr	r2, [sp, #20]
 800df84:	331c      	adds	r3, #28
 800df86:	441a      	add	r2, r3
 800df88:	9205      	str	r2, [sp, #20]
 800df8a:	441d      	add	r5, r3
 800df8c:	4498      	add	r8, r3
 800df8e:	e7c2      	b.n	800df16 <_dtoa_r+0x826>
 800df90:	4603      	mov	r3, r0
 800df92:	e7f6      	b.n	800df82 <_dtoa_r+0x892>
 800df94:	f1b9 0f00 	cmp.w	r9, #0
 800df98:	dc38      	bgt.n	800e00c <_dtoa_r+0x91c>
 800df9a:	9b06      	ldr	r3, [sp, #24]
 800df9c:	2b02      	cmp	r3, #2
 800df9e:	dd35      	ble.n	800e00c <_dtoa_r+0x91c>
 800dfa0:	f8cd 9008 	str.w	r9, [sp, #8]
 800dfa4:	9b02      	ldr	r3, [sp, #8]
 800dfa6:	b963      	cbnz	r3, 800dfc2 <_dtoa_r+0x8d2>
 800dfa8:	4639      	mov	r1, r7
 800dfaa:	2205      	movs	r2, #5
 800dfac:	4620      	mov	r0, r4
 800dfae:	f000 ff2c 	bl	800ee0a <__multadd>
 800dfb2:	4601      	mov	r1, r0
 800dfb4:	4607      	mov	r7, r0
 800dfb6:	9804      	ldr	r0, [sp, #16]
 800dfb8:	f001 f922 	bl	800f200 <__mcmp>
 800dfbc:	2800      	cmp	r0, #0
 800dfbe:	f73f adcc 	bgt.w	800db5a <_dtoa_r+0x46a>
 800dfc2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dfc4:	465d      	mov	r5, fp
 800dfc6:	ea6f 0a03 	mvn.w	sl, r3
 800dfca:	f04f 0900 	mov.w	r9, #0
 800dfce:	4639      	mov	r1, r7
 800dfd0:	4620      	mov	r0, r4
 800dfd2:	f000 ff11 	bl	800edf8 <_Bfree>
 800dfd6:	2e00      	cmp	r6, #0
 800dfd8:	f43f aeb7 	beq.w	800dd4a <_dtoa_r+0x65a>
 800dfdc:	f1b9 0f00 	cmp.w	r9, #0
 800dfe0:	d005      	beq.n	800dfee <_dtoa_r+0x8fe>
 800dfe2:	45b1      	cmp	r9, r6
 800dfe4:	d003      	beq.n	800dfee <_dtoa_r+0x8fe>
 800dfe6:	4649      	mov	r1, r9
 800dfe8:	4620      	mov	r0, r4
 800dfea:	f000 ff05 	bl	800edf8 <_Bfree>
 800dfee:	4631      	mov	r1, r6
 800dff0:	4620      	mov	r0, r4
 800dff2:	f000 ff01 	bl	800edf8 <_Bfree>
 800dff6:	e6a8      	b.n	800dd4a <_dtoa_r+0x65a>
 800dff8:	2700      	movs	r7, #0
 800dffa:	463e      	mov	r6, r7
 800dffc:	e7e1      	b.n	800dfc2 <_dtoa_r+0x8d2>
 800dffe:	f8dd a020 	ldr.w	sl, [sp, #32]
 800e002:	463e      	mov	r6, r7
 800e004:	e5a9      	b.n	800db5a <_dtoa_r+0x46a>
 800e006:	bf00      	nop
 800e008:	40240000 	.word	0x40240000
 800e00c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e00e:	f8cd 9008 	str.w	r9, [sp, #8]
 800e012:	2b00      	cmp	r3, #0
 800e014:	f000 80f9 	beq.w	800e20a <_dtoa_r+0xb1a>
 800e018:	2d00      	cmp	r5, #0
 800e01a:	dd05      	ble.n	800e028 <_dtoa_r+0x938>
 800e01c:	4631      	mov	r1, r6
 800e01e:	462a      	mov	r2, r5
 800e020:	4620      	mov	r0, r4
 800e022:	f001 f899 	bl	800f158 <__lshift>
 800e026:	4606      	mov	r6, r0
 800e028:	9b07      	ldr	r3, [sp, #28]
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	d04c      	beq.n	800e0c8 <_dtoa_r+0x9d8>
 800e02e:	6871      	ldr	r1, [r6, #4]
 800e030:	4620      	mov	r0, r4
 800e032:	f000 febc 	bl	800edae <_Balloc>
 800e036:	6932      	ldr	r2, [r6, #16]
 800e038:	3202      	adds	r2, #2
 800e03a:	4605      	mov	r5, r0
 800e03c:	0092      	lsls	r2, r2, #2
 800e03e:	f106 010c 	add.w	r1, r6, #12
 800e042:	300c      	adds	r0, #12
 800e044:	f000 fea8 	bl	800ed98 <memcpy>
 800e048:	2201      	movs	r2, #1
 800e04a:	4629      	mov	r1, r5
 800e04c:	4620      	mov	r0, r4
 800e04e:	f001 f883 	bl	800f158 <__lshift>
 800e052:	9b00      	ldr	r3, [sp, #0]
 800e054:	f8cd b014 	str.w	fp, [sp, #20]
 800e058:	f003 0301 	and.w	r3, r3, #1
 800e05c:	46b1      	mov	r9, r6
 800e05e:	9307      	str	r3, [sp, #28]
 800e060:	4606      	mov	r6, r0
 800e062:	4639      	mov	r1, r7
 800e064:	9804      	ldr	r0, [sp, #16]
 800e066:	f7ff fab5 	bl	800d5d4 <quorem>
 800e06a:	4649      	mov	r1, r9
 800e06c:	4605      	mov	r5, r0
 800e06e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800e072:	9804      	ldr	r0, [sp, #16]
 800e074:	f001 f8c4 	bl	800f200 <__mcmp>
 800e078:	4632      	mov	r2, r6
 800e07a:	9000      	str	r0, [sp, #0]
 800e07c:	4639      	mov	r1, r7
 800e07e:	4620      	mov	r0, r4
 800e080:	f001 f8d8 	bl	800f234 <__mdiff>
 800e084:	68c3      	ldr	r3, [r0, #12]
 800e086:	4602      	mov	r2, r0
 800e088:	bb03      	cbnz	r3, 800e0cc <_dtoa_r+0x9dc>
 800e08a:	4601      	mov	r1, r0
 800e08c:	9008      	str	r0, [sp, #32]
 800e08e:	9804      	ldr	r0, [sp, #16]
 800e090:	f001 f8b6 	bl	800f200 <__mcmp>
 800e094:	9a08      	ldr	r2, [sp, #32]
 800e096:	4603      	mov	r3, r0
 800e098:	4611      	mov	r1, r2
 800e09a:	4620      	mov	r0, r4
 800e09c:	9308      	str	r3, [sp, #32]
 800e09e:	f000 feab 	bl	800edf8 <_Bfree>
 800e0a2:	9b08      	ldr	r3, [sp, #32]
 800e0a4:	b9a3      	cbnz	r3, 800e0d0 <_dtoa_r+0x9e0>
 800e0a6:	9a06      	ldr	r2, [sp, #24]
 800e0a8:	b992      	cbnz	r2, 800e0d0 <_dtoa_r+0x9e0>
 800e0aa:	9a07      	ldr	r2, [sp, #28]
 800e0ac:	b982      	cbnz	r2, 800e0d0 <_dtoa_r+0x9e0>
 800e0ae:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800e0b2:	d029      	beq.n	800e108 <_dtoa_r+0xa18>
 800e0b4:	9b00      	ldr	r3, [sp, #0]
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	dd01      	ble.n	800e0be <_dtoa_r+0x9ce>
 800e0ba:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800e0be:	9b05      	ldr	r3, [sp, #20]
 800e0c0:	1c5d      	adds	r5, r3, #1
 800e0c2:	f883 8000 	strb.w	r8, [r3]
 800e0c6:	e782      	b.n	800dfce <_dtoa_r+0x8de>
 800e0c8:	4630      	mov	r0, r6
 800e0ca:	e7c2      	b.n	800e052 <_dtoa_r+0x962>
 800e0cc:	2301      	movs	r3, #1
 800e0ce:	e7e3      	b.n	800e098 <_dtoa_r+0x9a8>
 800e0d0:	9a00      	ldr	r2, [sp, #0]
 800e0d2:	2a00      	cmp	r2, #0
 800e0d4:	db04      	blt.n	800e0e0 <_dtoa_r+0x9f0>
 800e0d6:	d125      	bne.n	800e124 <_dtoa_r+0xa34>
 800e0d8:	9a06      	ldr	r2, [sp, #24]
 800e0da:	bb1a      	cbnz	r2, 800e124 <_dtoa_r+0xa34>
 800e0dc:	9a07      	ldr	r2, [sp, #28]
 800e0de:	bb0a      	cbnz	r2, 800e124 <_dtoa_r+0xa34>
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	ddec      	ble.n	800e0be <_dtoa_r+0x9ce>
 800e0e4:	2201      	movs	r2, #1
 800e0e6:	9904      	ldr	r1, [sp, #16]
 800e0e8:	4620      	mov	r0, r4
 800e0ea:	f001 f835 	bl	800f158 <__lshift>
 800e0ee:	4639      	mov	r1, r7
 800e0f0:	9004      	str	r0, [sp, #16]
 800e0f2:	f001 f885 	bl	800f200 <__mcmp>
 800e0f6:	2800      	cmp	r0, #0
 800e0f8:	dc03      	bgt.n	800e102 <_dtoa_r+0xa12>
 800e0fa:	d1e0      	bne.n	800e0be <_dtoa_r+0x9ce>
 800e0fc:	f018 0f01 	tst.w	r8, #1
 800e100:	d0dd      	beq.n	800e0be <_dtoa_r+0x9ce>
 800e102:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800e106:	d1d8      	bne.n	800e0ba <_dtoa_r+0x9ca>
 800e108:	9b05      	ldr	r3, [sp, #20]
 800e10a:	9a05      	ldr	r2, [sp, #20]
 800e10c:	1c5d      	adds	r5, r3, #1
 800e10e:	2339      	movs	r3, #57	; 0x39
 800e110:	7013      	strb	r3, [r2, #0]
 800e112:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e116:	2b39      	cmp	r3, #57	; 0x39
 800e118:	f105 32ff 	add.w	r2, r5, #4294967295
 800e11c:	d04f      	beq.n	800e1be <_dtoa_r+0xace>
 800e11e:	3301      	adds	r3, #1
 800e120:	7013      	strb	r3, [r2, #0]
 800e122:	e754      	b.n	800dfce <_dtoa_r+0x8de>
 800e124:	9a05      	ldr	r2, [sp, #20]
 800e126:	2b00      	cmp	r3, #0
 800e128:	f102 0501 	add.w	r5, r2, #1
 800e12c:	dd06      	ble.n	800e13c <_dtoa_r+0xa4c>
 800e12e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800e132:	d0e9      	beq.n	800e108 <_dtoa_r+0xa18>
 800e134:	f108 0801 	add.w	r8, r8, #1
 800e138:	9b05      	ldr	r3, [sp, #20]
 800e13a:	e7c2      	b.n	800e0c2 <_dtoa_r+0x9d2>
 800e13c:	9a02      	ldr	r2, [sp, #8]
 800e13e:	f805 8c01 	strb.w	r8, [r5, #-1]
 800e142:	eba5 030b 	sub.w	r3, r5, fp
 800e146:	4293      	cmp	r3, r2
 800e148:	d021      	beq.n	800e18e <_dtoa_r+0xa9e>
 800e14a:	2300      	movs	r3, #0
 800e14c:	220a      	movs	r2, #10
 800e14e:	9904      	ldr	r1, [sp, #16]
 800e150:	4620      	mov	r0, r4
 800e152:	f000 fe5a 	bl	800ee0a <__multadd>
 800e156:	45b1      	cmp	r9, r6
 800e158:	9004      	str	r0, [sp, #16]
 800e15a:	f04f 0300 	mov.w	r3, #0
 800e15e:	f04f 020a 	mov.w	r2, #10
 800e162:	4649      	mov	r1, r9
 800e164:	4620      	mov	r0, r4
 800e166:	d105      	bne.n	800e174 <_dtoa_r+0xa84>
 800e168:	f000 fe4f 	bl	800ee0a <__multadd>
 800e16c:	4681      	mov	r9, r0
 800e16e:	4606      	mov	r6, r0
 800e170:	9505      	str	r5, [sp, #20]
 800e172:	e776      	b.n	800e062 <_dtoa_r+0x972>
 800e174:	f000 fe49 	bl	800ee0a <__multadd>
 800e178:	4631      	mov	r1, r6
 800e17a:	4681      	mov	r9, r0
 800e17c:	2300      	movs	r3, #0
 800e17e:	220a      	movs	r2, #10
 800e180:	4620      	mov	r0, r4
 800e182:	f000 fe42 	bl	800ee0a <__multadd>
 800e186:	4606      	mov	r6, r0
 800e188:	e7f2      	b.n	800e170 <_dtoa_r+0xa80>
 800e18a:	f04f 0900 	mov.w	r9, #0
 800e18e:	2201      	movs	r2, #1
 800e190:	9904      	ldr	r1, [sp, #16]
 800e192:	4620      	mov	r0, r4
 800e194:	f000 ffe0 	bl	800f158 <__lshift>
 800e198:	4639      	mov	r1, r7
 800e19a:	9004      	str	r0, [sp, #16]
 800e19c:	f001 f830 	bl	800f200 <__mcmp>
 800e1a0:	2800      	cmp	r0, #0
 800e1a2:	dcb6      	bgt.n	800e112 <_dtoa_r+0xa22>
 800e1a4:	d102      	bne.n	800e1ac <_dtoa_r+0xabc>
 800e1a6:	f018 0f01 	tst.w	r8, #1
 800e1aa:	d1b2      	bne.n	800e112 <_dtoa_r+0xa22>
 800e1ac:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e1b0:	2b30      	cmp	r3, #48	; 0x30
 800e1b2:	f105 32ff 	add.w	r2, r5, #4294967295
 800e1b6:	f47f af0a 	bne.w	800dfce <_dtoa_r+0x8de>
 800e1ba:	4615      	mov	r5, r2
 800e1bc:	e7f6      	b.n	800e1ac <_dtoa_r+0xabc>
 800e1be:	4593      	cmp	fp, r2
 800e1c0:	d105      	bne.n	800e1ce <_dtoa_r+0xade>
 800e1c2:	2331      	movs	r3, #49	; 0x31
 800e1c4:	f10a 0a01 	add.w	sl, sl, #1
 800e1c8:	f88b 3000 	strb.w	r3, [fp]
 800e1cc:	e6ff      	b.n	800dfce <_dtoa_r+0x8de>
 800e1ce:	4615      	mov	r5, r2
 800e1d0:	e79f      	b.n	800e112 <_dtoa_r+0xa22>
 800e1d2:	f8df b064 	ldr.w	fp, [pc, #100]	; 800e238 <_dtoa_r+0xb48>
 800e1d6:	f7ff bac5 	b.w	800d764 <_dtoa_r+0x74>
 800e1da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e1dc:	f8df b05c 	ldr.w	fp, [pc, #92]	; 800e23c <_dtoa_r+0xb4c>
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	f43f aabf 	beq.w	800d764 <_dtoa_r+0x74>
 800e1e6:	f10b 0308 	add.w	r3, fp, #8
 800e1ea:	f7ff bab9 	b.w	800d760 <_dtoa_r+0x70>
 800e1ee:	9b06      	ldr	r3, [sp, #24]
 800e1f0:	2b01      	cmp	r3, #1
 800e1f2:	f77f ae36 	ble.w	800de62 <_dtoa_r+0x772>
 800e1f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e1f8:	9307      	str	r3, [sp, #28]
 800e1fa:	e64a      	b.n	800de92 <_dtoa_r+0x7a2>
 800e1fc:	9b02      	ldr	r3, [sp, #8]
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	dc03      	bgt.n	800e20a <_dtoa_r+0xb1a>
 800e202:	9b06      	ldr	r3, [sp, #24]
 800e204:	2b02      	cmp	r3, #2
 800e206:	f73f aecd 	bgt.w	800dfa4 <_dtoa_r+0x8b4>
 800e20a:	465d      	mov	r5, fp
 800e20c:	4639      	mov	r1, r7
 800e20e:	9804      	ldr	r0, [sp, #16]
 800e210:	f7ff f9e0 	bl	800d5d4 <quorem>
 800e214:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800e218:	f805 8b01 	strb.w	r8, [r5], #1
 800e21c:	9a02      	ldr	r2, [sp, #8]
 800e21e:	eba5 030b 	sub.w	r3, r5, fp
 800e222:	429a      	cmp	r2, r3
 800e224:	ddb1      	ble.n	800e18a <_dtoa_r+0xa9a>
 800e226:	2300      	movs	r3, #0
 800e228:	220a      	movs	r2, #10
 800e22a:	9904      	ldr	r1, [sp, #16]
 800e22c:	4620      	mov	r0, r4
 800e22e:	f000 fdec 	bl	800ee0a <__multadd>
 800e232:	9004      	str	r0, [sp, #16]
 800e234:	e7ea      	b.n	800e20c <_dtoa_r+0xb1c>
 800e236:	bf00      	nop
 800e238:	08010362 	.word	0x08010362
 800e23c:	08010384 	.word	0x08010384

0800e240 <print_e>:
 800e240:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e242:	b087      	sub	sp, #28
 800e244:	ec43 2b10 	vmov	d0, r2, r3
 800e248:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800e24a:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 800e24e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800e250:	ab04      	add	r3, sp, #16
 800e252:	9301      	str	r3, [sp, #4]
 800e254:	ab03      	add	r3, sp, #12
 800e256:	9300      	str	r3, [sp, #0]
 800e258:	460f      	mov	r7, r1
 800e25a:	ab05      	add	r3, sp, #20
 800e25c:	2102      	movs	r1, #2
 800e25e:	1c62      	adds	r2, r4, #1
 800e260:	f7ff fa46 	bl	800d6f0 <_dtoa_r>
 800e264:	4601      	mov	r1, r0
 800e266:	9805      	ldr	r0, [sp, #20]
 800e268:	f242 730f 	movw	r3, #9999	; 0x270f
 800e26c:	4298      	cmp	r0, r3
 800e26e:	d104      	bne.n	800e27a <print_e+0x3a>
 800e270:	4638      	mov	r0, r7
 800e272:	f7fd f92e 	bl	800b4d2 <strcpy>
 800e276:	b007      	add	sp, #28
 800e278:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e27a:	780b      	ldrb	r3, [r1, #0]
 800e27c:	703b      	strb	r3, [r7, #0]
 800e27e:	2d00      	cmp	r5, #0
 800e280:	d143      	bne.n	800e30a <print_e+0xca>
 800e282:	2c00      	cmp	r4, #0
 800e284:	d141      	bne.n	800e30a <print_e+0xca>
 800e286:	1c7b      	adds	r3, r7, #1
 800e288:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800e28c:	b10a      	cbz	r2, 800e292 <print_e+0x52>
 800e28e:	2c00      	cmp	r4, #0
 800e290:	dc3f      	bgt.n	800e312 <print_e+0xd2>
 800e292:	2e67      	cmp	r6, #103	; 0x67
 800e294:	d044      	beq.n	800e320 <print_e+0xe0>
 800e296:	2e47      	cmp	r6, #71	; 0x47
 800e298:	d044      	beq.n	800e324 <print_e+0xe4>
 800e29a:	461a      	mov	r2, r3
 800e29c:	191d      	adds	r5, r3, r4
 800e29e:	2730      	movs	r7, #48	; 0x30
 800e2a0:	1aa9      	subs	r1, r5, r2
 800e2a2:	2900      	cmp	r1, #0
 800e2a4:	dc39      	bgt.n	800e31a <print_e+0xda>
 800e2a6:	2c00      	cmp	r4, #0
 800e2a8:	bfa8      	it	ge
 800e2aa:	191b      	addge	r3, r3, r4
 800e2ac:	1e41      	subs	r1, r0, #1
 800e2ae:	2900      	cmp	r1, #0
 800e2b0:	bfb8      	it	lt
 800e2b2:	f1c0 0001 	rsblt	r0, r0, #1
 800e2b6:	9105      	str	r1, [sp, #20]
 800e2b8:	bfb8      	it	lt
 800e2ba:	9005      	strlt	r0, [sp, #20]
 800e2bc:	461a      	mov	r2, r3
 800e2be:	9805      	ldr	r0, [sp, #20]
 800e2c0:	f802 6b02 	strb.w	r6, [r2], #2
 800e2c4:	bfb5      	itete	lt
 800e2c6:	212d      	movlt	r1, #45	; 0x2d
 800e2c8:	212b      	movge	r1, #43	; 0x2b
 800e2ca:	7059      	strblt	r1, [r3, #1]
 800e2cc:	7059      	strbge	r1, [r3, #1]
 800e2ce:	2863      	cmp	r0, #99	; 0x63
 800e2d0:	dd0b      	ble.n	800e2ea <print_e+0xaa>
 800e2d2:	2164      	movs	r1, #100	; 0x64
 800e2d4:	fb90 f1f1 	sdiv	r1, r0, r1
 800e2d8:	f101 0430 	add.w	r4, r1, #48	; 0x30
 800e2dc:	1cda      	adds	r2, r3, #3
 800e2de:	709c      	strb	r4, [r3, #2]
 800e2e0:	f06f 0363 	mvn.w	r3, #99	; 0x63
 800e2e4:	fb03 0101 	mla	r1, r3, r1, r0
 800e2e8:	9105      	str	r1, [sp, #20]
 800e2ea:	9905      	ldr	r1, [sp, #20]
 800e2ec:	230a      	movs	r3, #10
 800e2ee:	fb91 f3f3 	sdiv	r3, r1, r3
 800e2f2:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800e2f6:	7010      	strb	r0, [r2, #0]
 800e2f8:	f06f 0009 	mvn.w	r0, #9
 800e2fc:	fb00 1303 	mla	r3, r0, r3, r1
 800e300:	3330      	adds	r3, #48	; 0x30
 800e302:	7053      	strb	r3, [r2, #1]
 800e304:	2300      	movs	r3, #0
 800e306:	7093      	strb	r3, [r2, #2]
 800e308:	e7b5      	b.n	800e276 <print_e+0x36>
 800e30a:	222e      	movs	r2, #46	; 0x2e
 800e30c:	1cbb      	adds	r3, r7, #2
 800e30e:	707a      	strb	r2, [r7, #1]
 800e310:	e7ba      	b.n	800e288 <print_e+0x48>
 800e312:	f803 2b01 	strb.w	r2, [r3], #1
 800e316:	3c01      	subs	r4, #1
 800e318:	e7b6      	b.n	800e288 <print_e+0x48>
 800e31a:	f802 7b01 	strb.w	r7, [r2], #1
 800e31e:	e7bf      	b.n	800e2a0 <print_e+0x60>
 800e320:	2665      	movs	r6, #101	; 0x65
 800e322:	e7c3      	b.n	800e2ac <print_e+0x6c>
 800e324:	2645      	movs	r6, #69	; 0x45
 800e326:	e7c1      	b.n	800e2ac <print_e+0x6c>

0800e328 <_gcvt>:
 800e328:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e32c:	ec55 4b10 	vmov	r4, r5, d0
 800e330:	b088      	sub	sp, #32
 800e332:	4681      	mov	r9, r0
 800e334:	460f      	mov	r7, r1
 800e336:	4616      	mov	r6, r2
 800e338:	469a      	mov	sl, r3
 800e33a:	2200      	movs	r2, #0
 800e33c:	2300      	movs	r3, #0
 800e33e:	ee10 0a10 	vmov	r0, s0
 800e342:	4629      	mov	r1, r5
 800e344:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 800e348:	f7f2 fbd8 	bl	8000afc <__aeabi_dcmplt>
 800e34c:	b110      	cbz	r0, 800e354 <_gcvt+0x2c>
 800e34e:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800e352:	461d      	mov	r5, r3
 800e354:	2200      	movs	r2, #0
 800e356:	2300      	movs	r3, #0
 800e358:	4620      	mov	r0, r4
 800e35a:	4629      	mov	r1, r5
 800e35c:	f7f2 fbc4 	bl	8000ae8 <__aeabi_dcmpeq>
 800e360:	b138      	cbz	r0, 800e372 <_gcvt+0x4a>
 800e362:	2330      	movs	r3, #48	; 0x30
 800e364:	7033      	strb	r3, [r6, #0]
 800e366:	2300      	movs	r3, #0
 800e368:	7073      	strb	r3, [r6, #1]
 800e36a:	4630      	mov	r0, r6
 800e36c:	b008      	add	sp, #32
 800e36e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e372:	a350      	add	r3, pc, #320	; (adr r3, 800e4b4 <_gcvt+0x18c>)
 800e374:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e378:	4620      	mov	r0, r4
 800e37a:	4629      	mov	r1, r5
 800e37c:	f7f2 fbc8 	bl	8000b10 <__aeabi_dcmple>
 800e380:	b150      	cbz	r0, 800e398 <_gcvt+0x70>
 800e382:	3f01      	subs	r7, #1
 800e384:	e9cd a801 	strd	sl, r8, [sp, #4]
 800e388:	9700      	str	r7, [sp, #0]
 800e38a:	4622      	mov	r2, r4
 800e38c:	462b      	mov	r3, r5
 800e38e:	4631      	mov	r1, r6
 800e390:	4648      	mov	r0, r9
 800e392:	f7ff ff55 	bl	800e240 <print_e>
 800e396:	e7e8      	b.n	800e36a <_gcvt+0x42>
 800e398:	4638      	mov	r0, r7
 800e39a:	f001 f8a1 	bl	800f4e0 <_mprec_log10>
 800e39e:	4622      	mov	r2, r4
 800e3a0:	462b      	mov	r3, r5
 800e3a2:	ec51 0b10 	vmov	r0, r1, d0
 800e3a6:	f7f2 fbb3 	bl	8000b10 <__aeabi_dcmple>
 800e3aa:	2800      	cmp	r0, #0
 800e3ac:	d1e9      	bne.n	800e382 <_gcvt+0x5a>
 800e3ae:	2200      	movs	r2, #0
 800e3b0:	4b3f      	ldr	r3, [pc, #252]	; (800e4b0 <_gcvt+0x188>)
 800e3b2:	4620      	mov	r0, r4
 800e3b4:	4629      	mov	r1, r5
 800e3b6:	f7f2 fba1 	bl	8000afc <__aeabi_dcmplt>
 800e3ba:	aa07      	add	r2, sp, #28
 800e3bc:	ab06      	add	r3, sp, #24
 800e3be:	e9cd 3200 	strd	r3, r2, [sp]
 800e3c2:	ab05      	add	r3, sp, #20
 800e3c4:	463a      	mov	r2, r7
 800e3c6:	b360      	cbz	r0, 800e422 <_gcvt+0xfa>
 800e3c8:	2103      	movs	r1, #3
 800e3ca:	ec45 4b10 	vmov	d0, r4, r5
 800e3ce:	4648      	mov	r0, r9
 800e3d0:	f7ff f98e 	bl	800d6f0 <_dtoa_r>
 800e3d4:	9a05      	ldr	r2, [sp, #20]
 800e3d6:	f242 730f 	movw	r3, #9999	; 0x270f
 800e3da:	429a      	cmp	r2, r3
 800e3dc:	d023      	beq.n	800e426 <_gcvt+0xfe>
 800e3de:	4633      	mov	r3, r6
 800e3e0:	4437      	add	r7, r6
 800e3e2:	4601      	mov	r1, r0
 800e3e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e3e8:	9d05      	ldr	r5, [sp, #20]
 800e3ea:	1afc      	subs	r4, r7, r3
 800e3ec:	b32a      	cbz	r2, 800e43a <_gcvt+0x112>
 800e3ee:	2d00      	cmp	r5, #0
 800e3f0:	dc1e      	bgt.n	800e430 <_gcvt+0x108>
 800e3f2:	f1b8 0f00 	cmp.w	r8, #0
 800e3f6:	d102      	bne.n	800e3fe <_gcvt+0xd6>
 800e3f8:	780a      	ldrb	r2, [r1, #0]
 800e3fa:	2a00      	cmp	r2, #0
 800e3fc:	d045      	beq.n	800e48a <_gcvt+0x162>
 800e3fe:	429e      	cmp	r6, r3
 800e400:	bf02      	ittt	eq
 800e402:	1c73      	addeq	r3, r6, #1
 800e404:	2230      	moveq	r2, #48	; 0x30
 800e406:	7032      	strbeq	r2, [r6, #0]
 800e408:	222e      	movs	r2, #46	; 0x2e
 800e40a:	701a      	strb	r2, [r3, #0]
 800e40c:	9a05      	ldr	r2, [sp, #20]
 800e40e:	3301      	adds	r3, #1
 800e410:	2000      	movs	r0, #0
 800e412:	2730      	movs	r7, #48	; 0x30
 800e414:	2a00      	cmp	r2, #0
 800e416:	4615      	mov	r5, r2
 800e418:	db24      	blt.n	800e464 <_gcvt+0x13c>
 800e41a:	b100      	cbz	r0, 800e41e <_gcvt+0xf6>
 800e41c:	9205      	str	r2, [sp, #20]
 800e41e:	1e4a      	subs	r2, r1, #1
 800e420:	e02b      	b.n	800e47a <_gcvt+0x152>
 800e422:	2102      	movs	r1, #2
 800e424:	e7d1      	b.n	800e3ca <_gcvt+0xa2>
 800e426:	4601      	mov	r1, r0
 800e428:	4630      	mov	r0, r6
 800e42a:	f7fd f852 	bl	800b4d2 <strcpy>
 800e42e:	e79c      	b.n	800e36a <_gcvt+0x42>
 800e430:	3d01      	subs	r5, #1
 800e432:	f803 2b01 	strb.w	r2, [r3], #1
 800e436:	9505      	str	r5, [sp, #20]
 800e438:	e7d3      	b.n	800e3e2 <_gcvt+0xba>
 800e43a:	1b2d      	subs	r5, r5, r4
 800e43c:	2730      	movs	r7, #48	; 0x30
 800e43e:	e005      	b.n	800e44c <_gcvt+0x124>
 800e440:	2c00      	cmp	r4, #0
 800e442:	dd06      	ble.n	800e452 <_gcvt+0x12a>
 800e444:	f803 7b01 	strb.w	r7, [r3], #1
 800e448:	3c01      	subs	r4, #1
 800e44a:	2201      	movs	r2, #1
 800e44c:	1928      	adds	r0, r5, r4
 800e44e:	2800      	cmp	r0, #0
 800e450:	dcf6      	bgt.n	800e440 <_gcvt+0x118>
 800e452:	2a00      	cmp	r2, #0
 800e454:	d0cd      	beq.n	800e3f2 <_gcvt+0xca>
 800e456:	9005      	str	r0, [sp, #20]
 800e458:	e7cb      	b.n	800e3f2 <_gcvt+0xca>
 800e45a:	f803 7b01 	strb.w	r7, [r3], #1
 800e45e:	3c01      	subs	r4, #1
 800e460:	2001      	movs	r0, #1
 800e462:	e7d7      	b.n	800e414 <_gcvt+0xec>
 800e464:	2c00      	cmp	r4, #0
 800e466:	f102 0201 	add.w	r2, r2, #1
 800e46a:	dcf6      	bgt.n	800e45a <_gcvt+0x132>
 800e46c:	2800      	cmp	r0, #0
 800e46e:	d0d6      	beq.n	800e41e <_gcvt+0xf6>
 800e470:	9505      	str	r5, [sp, #20]
 800e472:	e7d4      	b.n	800e41e <_gcvt+0xf6>
 800e474:	f803 1b01 	strb.w	r1, [r3], #1
 800e478:	3c01      	subs	r4, #1
 800e47a:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 800e47e:	b109      	cbz	r1, 800e484 <_gcvt+0x15c>
 800e480:	2c00      	cmp	r4, #0
 800e482:	dcf7      	bgt.n	800e474 <_gcvt+0x14c>
 800e484:	f1b8 0f00 	cmp.w	r8, #0
 800e488:	d10b      	bne.n	800e4a2 <_gcvt+0x17a>
 800e48a:	2200      	movs	r2, #0
 800e48c:	701a      	strb	r2, [r3, #0]
 800e48e:	e76c      	b.n	800e36a <_gcvt+0x42>
 800e490:	f802 5b01 	strb.w	r5, [r2], #1
 800e494:	1a81      	subs	r1, r0, r2
 800e496:	2900      	cmp	r1, #0
 800e498:	dcfa      	bgt.n	800e490 <_gcvt+0x168>
 800e49a:	2c00      	cmp	r4, #0
 800e49c:	bfa8      	it	ge
 800e49e:	191b      	addge	r3, r3, r4
 800e4a0:	e7f3      	b.n	800e48a <_gcvt+0x162>
 800e4a2:	461a      	mov	r2, r3
 800e4a4:	1918      	adds	r0, r3, r4
 800e4a6:	2530      	movs	r5, #48	; 0x30
 800e4a8:	e7f4      	b.n	800e494 <_gcvt+0x16c>
 800e4aa:	bf00      	nop
 800e4ac:	f3af 8000 	nop.w
 800e4b0:	3ff00000 	.word	0x3ff00000
 800e4b4:	eb1c432d 	.word	0xeb1c432d
 800e4b8:	3f1a36e2 	.word	0x3f1a36e2

0800e4bc <__libc_fini_array>:
 800e4bc:	b538      	push	{r3, r4, r5, lr}
 800e4be:	4d07      	ldr	r5, [pc, #28]	; (800e4dc <__libc_fini_array+0x20>)
 800e4c0:	4c07      	ldr	r4, [pc, #28]	; (800e4e0 <__libc_fini_array+0x24>)
 800e4c2:	1b64      	subs	r4, r4, r5
 800e4c4:	10a4      	asrs	r4, r4, #2
 800e4c6:	b91c      	cbnz	r4, 800e4d0 <__libc_fini_array+0x14>
 800e4c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e4cc:	f001 bbfa 	b.w	800fcc4 <_fini>
 800e4d0:	3c01      	subs	r4, #1
 800e4d2:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800e4d6:	4798      	blx	r3
 800e4d8:	e7f5      	b.n	800e4c6 <__libc_fini_array+0xa>
 800e4da:	bf00      	nop
 800e4dc:	080105b0 	.word	0x080105b0
 800e4e0:	080105b4 	.word	0x080105b4

0800e4e4 <_malloc_trim_r>:
 800e4e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e4e8:	4605      	mov	r5, r0
 800e4ea:	2008      	movs	r0, #8
 800e4ec:	460c      	mov	r4, r1
 800e4ee:	f7ff f851 	bl	800d594 <sysconf>
 800e4f2:	4f23      	ldr	r7, [pc, #140]	; (800e580 <_malloc_trim_r+0x9c>)
 800e4f4:	4680      	mov	r8, r0
 800e4f6:	4628      	mov	r0, r5
 800e4f8:	f7fc ffa0 	bl	800b43c <__malloc_lock>
 800e4fc:	68bb      	ldr	r3, [r7, #8]
 800e4fe:	685e      	ldr	r6, [r3, #4]
 800e500:	f026 0603 	bic.w	r6, r6, #3
 800e504:	1b34      	subs	r4, r6, r4
 800e506:	3c11      	subs	r4, #17
 800e508:	4444      	add	r4, r8
 800e50a:	fbb4 f4f8 	udiv	r4, r4, r8
 800e50e:	3c01      	subs	r4, #1
 800e510:	fb08 f404 	mul.w	r4, r8, r4
 800e514:	45a0      	cmp	r8, r4
 800e516:	dd05      	ble.n	800e524 <_malloc_trim_r+0x40>
 800e518:	4628      	mov	r0, r5
 800e51a:	f7fc ff95 	bl	800b448 <__malloc_unlock>
 800e51e:	2000      	movs	r0, #0
 800e520:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e524:	2100      	movs	r1, #0
 800e526:	4628      	mov	r0, r5
 800e528:	f7fc ff94 	bl	800b454 <_sbrk_r>
 800e52c:	68bb      	ldr	r3, [r7, #8]
 800e52e:	4433      	add	r3, r6
 800e530:	4298      	cmp	r0, r3
 800e532:	d1f1      	bne.n	800e518 <_malloc_trim_r+0x34>
 800e534:	4261      	negs	r1, r4
 800e536:	4628      	mov	r0, r5
 800e538:	f7fc ff8c 	bl	800b454 <_sbrk_r>
 800e53c:	3001      	adds	r0, #1
 800e53e:	d110      	bne.n	800e562 <_malloc_trim_r+0x7e>
 800e540:	2100      	movs	r1, #0
 800e542:	4628      	mov	r0, r5
 800e544:	f7fc ff86 	bl	800b454 <_sbrk_r>
 800e548:	68ba      	ldr	r2, [r7, #8]
 800e54a:	1a83      	subs	r3, r0, r2
 800e54c:	2b0f      	cmp	r3, #15
 800e54e:	dde3      	ble.n	800e518 <_malloc_trim_r+0x34>
 800e550:	490c      	ldr	r1, [pc, #48]	; (800e584 <_malloc_trim_r+0xa0>)
 800e552:	6809      	ldr	r1, [r1, #0]
 800e554:	1a40      	subs	r0, r0, r1
 800e556:	490c      	ldr	r1, [pc, #48]	; (800e588 <_malloc_trim_r+0xa4>)
 800e558:	f043 0301 	orr.w	r3, r3, #1
 800e55c:	6008      	str	r0, [r1, #0]
 800e55e:	6053      	str	r3, [r2, #4]
 800e560:	e7da      	b.n	800e518 <_malloc_trim_r+0x34>
 800e562:	68bb      	ldr	r3, [r7, #8]
 800e564:	4a08      	ldr	r2, [pc, #32]	; (800e588 <_malloc_trim_r+0xa4>)
 800e566:	1b36      	subs	r6, r6, r4
 800e568:	f046 0601 	orr.w	r6, r6, #1
 800e56c:	605e      	str	r6, [r3, #4]
 800e56e:	6813      	ldr	r3, [r2, #0]
 800e570:	4628      	mov	r0, r5
 800e572:	1b1c      	subs	r4, r3, r4
 800e574:	6014      	str	r4, [r2, #0]
 800e576:	f7fc ff67 	bl	800b448 <__malloc_unlock>
 800e57a:	2001      	movs	r0, #1
 800e57c:	e7d0      	b.n	800e520 <_malloc_trim_r+0x3c>
 800e57e:	bf00      	nop
 800e580:	20000520 	.word	0x20000520
 800e584:	20000928 	.word	0x20000928
 800e588:	20000b10 	.word	0x20000b10

0800e58c <_free_r>:
 800e58c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e590:	4604      	mov	r4, r0
 800e592:	4688      	mov	r8, r1
 800e594:	2900      	cmp	r1, #0
 800e596:	f000 80ab 	beq.w	800e6f0 <_free_r+0x164>
 800e59a:	f7fc ff4f 	bl	800b43c <__malloc_lock>
 800e59e:	f858 2c04 	ldr.w	r2, [r8, #-4]
 800e5a2:	4d54      	ldr	r5, [pc, #336]	; (800e6f4 <_free_r+0x168>)
 800e5a4:	f022 0001 	bic.w	r0, r2, #1
 800e5a8:	f1a8 0308 	sub.w	r3, r8, #8
 800e5ac:	181f      	adds	r7, r3, r0
 800e5ae:	68a9      	ldr	r1, [r5, #8]
 800e5b0:	687e      	ldr	r6, [r7, #4]
 800e5b2:	42b9      	cmp	r1, r7
 800e5b4:	f026 0603 	bic.w	r6, r6, #3
 800e5b8:	f002 0201 	and.w	r2, r2, #1
 800e5bc:	d11b      	bne.n	800e5f6 <_free_r+0x6a>
 800e5be:	4430      	add	r0, r6
 800e5c0:	b93a      	cbnz	r2, 800e5d2 <_free_r+0x46>
 800e5c2:	f858 2c08 	ldr.w	r2, [r8, #-8]
 800e5c6:	1a9b      	subs	r3, r3, r2
 800e5c8:	4410      	add	r0, r2
 800e5ca:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 800e5ce:	60ca      	str	r2, [r1, #12]
 800e5d0:	6091      	str	r1, [r2, #8]
 800e5d2:	f040 0201 	orr.w	r2, r0, #1
 800e5d6:	605a      	str	r2, [r3, #4]
 800e5d8:	60ab      	str	r3, [r5, #8]
 800e5da:	4b47      	ldr	r3, [pc, #284]	; (800e6f8 <_free_r+0x16c>)
 800e5dc:	681b      	ldr	r3, [r3, #0]
 800e5de:	4283      	cmp	r3, r0
 800e5e0:	d804      	bhi.n	800e5ec <_free_r+0x60>
 800e5e2:	4b46      	ldr	r3, [pc, #280]	; (800e6fc <_free_r+0x170>)
 800e5e4:	4620      	mov	r0, r4
 800e5e6:	6819      	ldr	r1, [r3, #0]
 800e5e8:	f7ff ff7c 	bl	800e4e4 <_malloc_trim_r>
 800e5ec:	4620      	mov	r0, r4
 800e5ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e5f2:	f7fc bf29 	b.w	800b448 <__malloc_unlock>
 800e5f6:	607e      	str	r6, [r7, #4]
 800e5f8:	2a00      	cmp	r2, #0
 800e5fa:	d139      	bne.n	800e670 <_free_r+0xe4>
 800e5fc:	f858 1c08 	ldr.w	r1, [r8, #-8]
 800e600:	1a5b      	subs	r3, r3, r1
 800e602:	4408      	add	r0, r1
 800e604:	6899      	ldr	r1, [r3, #8]
 800e606:	f105 0c08 	add.w	ip, r5, #8
 800e60a:	4561      	cmp	r1, ip
 800e60c:	d032      	beq.n	800e674 <_free_r+0xe8>
 800e60e:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 800e612:	f8c1 c00c 	str.w	ip, [r1, #12]
 800e616:	f8cc 1008 	str.w	r1, [ip, #8]
 800e61a:	19b9      	adds	r1, r7, r6
 800e61c:	6849      	ldr	r1, [r1, #4]
 800e61e:	07c9      	lsls	r1, r1, #31
 800e620:	d40a      	bmi.n	800e638 <_free_r+0xac>
 800e622:	4430      	add	r0, r6
 800e624:	68b9      	ldr	r1, [r7, #8]
 800e626:	bb3a      	cbnz	r2, 800e678 <_free_r+0xec>
 800e628:	4e35      	ldr	r6, [pc, #212]	; (800e700 <_free_r+0x174>)
 800e62a:	42b1      	cmp	r1, r6
 800e62c:	d124      	bne.n	800e678 <_free_r+0xec>
 800e62e:	e9c5 3304 	strd	r3, r3, [r5, #16]
 800e632:	e9c3 1102 	strd	r1, r1, [r3, #8]
 800e636:	2201      	movs	r2, #1
 800e638:	f040 0101 	orr.w	r1, r0, #1
 800e63c:	6059      	str	r1, [r3, #4]
 800e63e:	5018      	str	r0, [r3, r0]
 800e640:	2a00      	cmp	r2, #0
 800e642:	d1d3      	bne.n	800e5ec <_free_r+0x60>
 800e644:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800e648:	d21a      	bcs.n	800e680 <_free_r+0xf4>
 800e64a:	08c0      	lsrs	r0, r0, #3
 800e64c:	1081      	asrs	r1, r0, #2
 800e64e:	2201      	movs	r2, #1
 800e650:	408a      	lsls	r2, r1
 800e652:	6869      	ldr	r1, [r5, #4]
 800e654:	3001      	adds	r0, #1
 800e656:	430a      	orrs	r2, r1
 800e658:	606a      	str	r2, [r5, #4]
 800e65a:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 800e65e:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 800e662:	3a08      	subs	r2, #8
 800e664:	e9c3 1202 	strd	r1, r2, [r3, #8]
 800e668:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 800e66c:	60cb      	str	r3, [r1, #12]
 800e66e:	e7bd      	b.n	800e5ec <_free_r+0x60>
 800e670:	2200      	movs	r2, #0
 800e672:	e7d2      	b.n	800e61a <_free_r+0x8e>
 800e674:	2201      	movs	r2, #1
 800e676:	e7d0      	b.n	800e61a <_free_r+0x8e>
 800e678:	68fe      	ldr	r6, [r7, #12]
 800e67a:	60ce      	str	r6, [r1, #12]
 800e67c:	60b1      	str	r1, [r6, #8]
 800e67e:	e7db      	b.n	800e638 <_free_r+0xac>
 800e680:	0a42      	lsrs	r2, r0, #9
 800e682:	2a04      	cmp	r2, #4
 800e684:	d813      	bhi.n	800e6ae <_free_r+0x122>
 800e686:	0982      	lsrs	r2, r0, #6
 800e688:	3238      	adds	r2, #56	; 0x38
 800e68a:	1c51      	adds	r1, r2, #1
 800e68c:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 800e690:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 800e694:	428e      	cmp	r6, r1
 800e696:	d124      	bne.n	800e6e2 <_free_r+0x156>
 800e698:	2001      	movs	r0, #1
 800e69a:	1092      	asrs	r2, r2, #2
 800e69c:	fa00 f202 	lsl.w	r2, r0, r2
 800e6a0:	6868      	ldr	r0, [r5, #4]
 800e6a2:	4302      	orrs	r2, r0
 800e6a4:	606a      	str	r2, [r5, #4]
 800e6a6:	e9c3 1602 	strd	r1, r6, [r3, #8]
 800e6aa:	60b3      	str	r3, [r6, #8]
 800e6ac:	e7de      	b.n	800e66c <_free_r+0xe0>
 800e6ae:	2a14      	cmp	r2, #20
 800e6b0:	d801      	bhi.n	800e6b6 <_free_r+0x12a>
 800e6b2:	325b      	adds	r2, #91	; 0x5b
 800e6b4:	e7e9      	b.n	800e68a <_free_r+0xfe>
 800e6b6:	2a54      	cmp	r2, #84	; 0x54
 800e6b8:	d802      	bhi.n	800e6c0 <_free_r+0x134>
 800e6ba:	0b02      	lsrs	r2, r0, #12
 800e6bc:	326e      	adds	r2, #110	; 0x6e
 800e6be:	e7e4      	b.n	800e68a <_free_r+0xfe>
 800e6c0:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800e6c4:	d802      	bhi.n	800e6cc <_free_r+0x140>
 800e6c6:	0bc2      	lsrs	r2, r0, #15
 800e6c8:	3277      	adds	r2, #119	; 0x77
 800e6ca:	e7de      	b.n	800e68a <_free_r+0xfe>
 800e6cc:	f240 5154 	movw	r1, #1364	; 0x554
 800e6d0:	428a      	cmp	r2, r1
 800e6d2:	bf9a      	itte	ls
 800e6d4:	0c82      	lsrls	r2, r0, #18
 800e6d6:	327c      	addls	r2, #124	; 0x7c
 800e6d8:	227e      	movhi	r2, #126	; 0x7e
 800e6da:	e7d6      	b.n	800e68a <_free_r+0xfe>
 800e6dc:	6889      	ldr	r1, [r1, #8]
 800e6de:	428e      	cmp	r6, r1
 800e6e0:	d004      	beq.n	800e6ec <_free_r+0x160>
 800e6e2:	684a      	ldr	r2, [r1, #4]
 800e6e4:	f022 0203 	bic.w	r2, r2, #3
 800e6e8:	4282      	cmp	r2, r0
 800e6ea:	d8f7      	bhi.n	800e6dc <_free_r+0x150>
 800e6ec:	68ce      	ldr	r6, [r1, #12]
 800e6ee:	e7da      	b.n	800e6a6 <_free_r+0x11a>
 800e6f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e6f4:	20000520 	.word	0x20000520
 800e6f8:	2000092c 	.word	0x2000092c
 800e6fc:	20000b40 	.word	0x20000b40
 800e700:	20000528 	.word	0x20000528

0800e704 <rshift>:
 800e704:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e706:	6906      	ldr	r6, [r0, #16]
 800e708:	114b      	asrs	r3, r1, #5
 800e70a:	429e      	cmp	r6, r3
 800e70c:	f100 0414 	add.w	r4, r0, #20
 800e710:	dd30      	ble.n	800e774 <rshift+0x70>
 800e712:	f011 011f 	ands.w	r1, r1, #31
 800e716:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800e71a:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800e71e:	d108      	bne.n	800e732 <rshift+0x2e>
 800e720:	4621      	mov	r1, r4
 800e722:	42b2      	cmp	r2, r6
 800e724:	460b      	mov	r3, r1
 800e726:	d211      	bcs.n	800e74c <rshift+0x48>
 800e728:	f852 3b04 	ldr.w	r3, [r2], #4
 800e72c:	f841 3b04 	str.w	r3, [r1], #4
 800e730:	e7f7      	b.n	800e722 <rshift+0x1e>
 800e732:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800e736:	f1c1 0c20 	rsb	ip, r1, #32
 800e73a:	40cd      	lsrs	r5, r1
 800e73c:	3204      	adds	r2, #4
 800e73e:	4623      	mov	r3, r4
 800e740:	42b2      	cmp	r2, r6
 800e742:	4617      	mov	r7, r2
 800e744:	d30c      	bcc.n	800e760 <rshift+0x5c>
 800e746:	601d      	str	r5, [r3, #0]
 800e748:	b105      	cbz	r5, 800e74c <rshift+0x48>
 800e74a:	3304      	adds	r3, #4
 800e74c:	1b1a      	subs	r2, r3, r4
 800e74e:	42a3      	cmp	r3, r4
 800e750:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800e754:	bf08      	it	eq
 800e756:	2300      	moveq	r3, #0
 800e758:	6102      	str	r2, [r0, #16]
 800e75a:	bf08      	it	eq
 800e75c:	6143      	streq	r3, [r0, #20]
 800e75e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e760:	683f      	ldr	r7, [r7, #0]
 800e762:	fa07 f70c 	lsl.w	r7, r7, ip
 800e766:	433d      	orrs	r5, r7
 800e768:	f843 5b04 	str.w	r5, [r3], #4
 800e76c:	f852 5b04 	ldr.w	r5, [r2], #4
 800e770:	40cd      	lsrs	r5, r1
 800e772:	e7e5      	b.n	800e740 <rshift+0x3c>
 800e774:	4623      	mov	r3, r4
 800e776:	e7e9      	b.n	800e74c <rshift+0x48>

0800e778 <__hexdig_fun>:
 800e778:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800e77c:	2b09      	cmp	r3, #9
 800e77e:	d802      	bhi.n	800e786 <__hexdig_fun+0xe>
 800e780:	3820      	subs	r0, #32
 800e782:	b2c0      	uxtb	r0, r0
 800e784:	4770      	bx	lr
 800e786:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800e78a:	2b05      	cmp	r3, #5
 800e78c:	d801      	bhi.n	800e792 <__hexdig_fun+0x1a>
 800e78e:	3847      	subs	r0, #71	; 0x47
 800e790:	e7f7      	b.n	800e782 <__hexdig_fun+0xa>
 800e792:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800e796:	2b05      	cmp	r3, #5
 800e798:	d801      	bhi.n	800e79e <__hexdig_fun+0x26>
 800e79a:	3827      	subs	r0, #39	; 0x27
 800e79c:	e7f1      	b.n	800e782 <__hexdig_fun+0xa>
 800e79e:	2000      	movs	r0, #0
 800e7a0:	4770      	bx	lr

0800e7a2 <__gethex>:
 800e7a2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7a6:	b08b      	sub	sp, #44	; 0x2c
 800e7a8:	468a      	mov	sl, r1
 800e7aa:	9002      	str	r0, [sp, #8]
 800e7ac:	9816      	ldr	r0, [sp, #88]	; 0x58
 800e7ae:	9306      	str	r3, [sp, #24]
 800e7b0:	4690      	mov	r8, r2
 800e7b2:	f000 facd 	bl	800ed50 <__localeconv_l>
 800e7b6:	6803      	ldr	r3, [r0, #0]
 800e7b8:	9303      	str	r3, [sp, #12]
 800e7ba:	4618      	mov	r0, r3
 800e7bc:	f7f1 fd12 	bl	80001e4 <strlen>
 800e7c0:	9b03      	ldr	r3, [sp, #12]
 800e7c2:	9001      	str	r0, [sp, #4]
 800e7c4:	4403      	add	r3, r0
 800e7c6:	f04f 0b00 	mov.w	fp, #0
 800e7ca:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800e7ce:	9307      	str	r3, [sp, #28]
 800e7d0:	f8da 3000 	ldr.w	r3, [sl]
 800e7d4:	3302      	adds	r3, #2
 800e7d6:	461f      	mov	r7, r3
 800e7d8:	f813 0b01 	ldrb.w	r0, [r3], #1
 800e7dc:	2830      	cmp	r0, #48	; 0x30
 800e7de:	d06c      	beq.n	800e8ba <__gethex+0x118>
 800e7e0:	f7ff ffca 	bl	800e778 <__hexdig_fun>
 800e7e4:	4604      	mov	r4, r0
 800e7e6:	2800      	cmp	r0, #0
 800e7e8:	d16a      	bne.n	800e8c0 <__gethex+0x11e>
 800e7ea:	9a01      	ldr	r2, [sp, #4]
 800e7ec:	9903      	ldr	r1, [sp, #12]
 800e7ee:	4638      	mov	r0, r7
 800e7f0:	f001 f8ae 	bl	800f950 <strncmp>
 800e7f4:	2800      	cmp	r0, #0
 800e7f6:	d166      	bne.n	800e8c6 <__gethex+0x124>
 800e7f8:	9b01      	ldr	r3, [sp, #4]
 800e7fa:	5cf8      	ldrb	r0, [r7, r3]
 800e7fc:	18fe      	adds	r6, r7, r3
 800e7fe:	f7ff ffbb 	bl	800e778 <__hexdig_fun>
 800e802:	2800      	cmp	r0, #0
 800e804:	d062      	beq.n	800e8cc <__gethex+0x12a>
 800e806:	4633      	mov	r3, r6
 800e808:	7818      	ldrb	r0, [r3, #0]
 800e80a:	2830      	cmp	r0, #48	; 0x30
 800e80c:	461f      	mov	r7, r3
 800e80e:	f103 0301 	add.w	r3, r3, #1
 800e812:	d0f9      	beq.n	800e808 <__gethex+0x66>
 800e814:	f7ff ffb0 	bl	800e778 <__hexdig_fun>
 800e818:	fab0 f580 	clz	r5, r0
 800e81c:	096d      	lsrs	r5, r5, #5
 800e81e:	4634      	mov	r4, r6
 800e820:	f04f 0b01 	mov.w	fp, #1
 800e824:	463a      	mov	r2, r7
 800e826:	4616      	mov	r6, r2
 800e828:	3201      	adds	r2, #1
 800e82a:	7830      	ldrb	r0, [r6, #0]
 800e82c:	f7ff ffa4 	bl	800e778 <__hexdig_fun>
 800e830:	2800      	cmp	r0, #0
 800e832:	d1f8      	bne.n	800e826 <__gethex+0x84>
 800e834:	9a01      	ldr	r2, [sp, #4]
 800e836:	9903      	ldr	r1, [sp, #12]
 800e838:	4630      	mov	r0, r6
 800e83a:	f001 f889 	bl	800f950 <strncmp>
 800e83e:	b950      	cbnz	r0, 800e856 <__gethex+0xb4>
 800e840:	b954      	cbnz	r4, 800e858 <__gethex+0xb6>
 800e842:	9b01      	ldr	r3, [sp, #4]
 800e844:	18f4      	adds	r4, r6, r3
 800e846:	4622      	mov	r2, r4
 800e848:	4616      	mov	r6, r2
 800e84a:	3201      	adds	r2, #1
 800e84c:	7830      	ldrb	r0, [r6, #0]
 800e84e:	f7ff ff93 	bl	800e778 <__hexdig_fun>
 800e852:	2800      	cmp	r0, #0
 800e854:	d1f8      	bne.n	800e848 <__gethex+0xa6>
 800e856:	b10c      	cbz	r4, 800e85c <__gethex+0xba>
 800e858:	1ba4      	subs	r4, r4, r6
 800e85a:	00a4      	lsls	r4, r4, #2
 800e85c:	7833      	ldrb	r3, [r6, #0]
 800e85e:	2b50      	cmp	r3, #80	; 0x50
 800e860:	d001      	beq.n	800e866 <__gethex+0xc4>
 800e862:	2b70      	cmp	r3, #112	; 0x70
 800e864:	d140      	bne.n	800e8e8 <__gethex+0x146>
 800e866:	7873      	ldrb	r3, [r6, #1]
 800e868:	2b2b      	cmp	r3, #43	; 0x2b
 800e86a:	d031      	beq.n	800e8d0 <__gethex+0x12e>
 800e86c:	2b2d      	cmp	r3, #45	; 0x2d
 800e86e:	d033      	beq.n	800e8d8 <__gethex+0x136>
 800e870:	1c71      	adds	r1, r6, #1
 800e872:	f04f 0900 	mov.w	r9, #0
 800e876:	7808      	ldrb	r0, [r1, #0]
 800e878:	f7ff ff7e 	bl	800e778 <__hexdig_fun>
 800e87c:	1e43      	subs	r3, r0, #1
 800e87e:	b2db      	uxtb	r3, r3
 800e880:	2b18      	cmp	r3, #24
 800e882:	d831      	bhi.n	800e8e8 <__gethex+0x146>
 800e884:	f1a0 0210 	sub.w	r2, r0, #16
 800e888:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800e88c:	f7ff ff74 	bl	800e778 <__hexdig_fun>
 800e890:	1e43      	subs	r3, r0, #1
 800e892:	b2db      	uxtb	r3, r3
 800e894:	2b18      	cmp	r3, #24
 800e896:	d922      	bls.n	800e8de <__gethex+0x13c>
 800e898:	f1b9 0f00 	cmp.w	r9, #0
 800e89c:	d000      	beq.n	800e8a0 <__gethex+0xfe>
 800e89e:	4252      	negs	r2, r2
 800e8a0:	4414      	add	r4, r2
 800e8a2:	f8ca 1000 	str.w	r1, [sl]
 800e8a6:	b30d      	cbz	r5, 800e8ec <__gethex+0x14a>
 800e8a8:	f1bb 0f00 	cmp.w	fp, #0
 800e8ac:	bf0c      	ite	eq
 800e8ae:	2706      	moveq	r7, #6
 800e8b0:	2700      	movne	r7, #0
 800e8b2:	4638      	mov	r0, r7
 800e8b4:	b00b      	add	sp, #44	; 0x2c
 800e8b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e8ba:	f10b 0b01 	add.w	fp, fp, #1
 800e8be:	e78a      	b.n	800e7d6 <__gethex+0x34>
 800e8c0:	2500      	movs	r5, #0
 800e8c2:	462c      	mov	r4, r5
 800e8c4:	e7ae      	b.n	800e824 <__gethex+0x82>
 800e8c6:	463e      	mov	r6, r7
 800e8c8:	2501      	movs	r5, #1
 800e8ca:	e7c7      	b.n	800e85c <__gethex+0xba>
 800e8cc:	4604      	mov	r4, r0
 800e8ce:	e7fb      	b.n	800e8c8 <__gethex+0x126>
 800e8d0:	f04f 0900 	mov.w	r9, #0
 800e8d4:	1cb1      	adds	r1, r6, #2
 800e8d6:	e7ce      	b.n	800e876 <__gethex+0xd4>
 800e8d8:	f04f 0901 	mov.w	r9, #1
 800e8dc:	e7fa      	b.n	800e8d4 <__gethex+0x132>
 800e8de:	230a      	movs	r3, #10
 800e8e0:	fb03 0202 	mla	r2, r3, r2, r0
 800e8e4:	3a10      	subs	r2, #16
 800e8e6:	e7cf      	b.n	800e888 <__gethex+0xe6>
 800e8e8:	4631      	mov	r1, r6
 800e8ea:	e7da      	b.n	800e8a2 <__gethex+0x100>
 800e8ec:	1bf3      	subs	r3, r6, r7
 800e8ee:	3b01      	subs	r3, #1
 800e8f0:	4629      	mov	r1, r5
 800e8f2:	2b07      	cmp	r3, #7
 800e8f4:	dc49      	bgt.n	800e98a <__gethex+0x1e8>
 800e8f6:	9802      	ldr	r0, [sp, #8]
 800e8f8:	f000 fa59 	bl	800edae <_Balloc>
 800e8fc:	9b01      	ldr	r3, [sp, #4]
 800e8fe:	f100 0914 	add.w	r9, r0, #20
 800e902:	f04f 0b00 	mov.w	fp, #0
 800e906:	f1c3 0301 	rsb	r3, r3, #1
 800e90a:	4605      	mov	r5, r0
 800e90c:	f8cd 9010 	str.w	r9, [sp, #16]
 800e910:	46da      	mov	sl, fp
 800e912:	9308      	str	r3, [sp, #32]
 800e914:	42b7      	cmp	r7, r6
 800e916:	d33b      	bcc.n	800e990 <__gethex+0x1ee>
 800e918:	9804      	ldr	r0, [sp, #16]
 800e91a:	f840 ab04 	str.w	sl, [r0], #4
 800e91e:	eba0 0009 	sub.w	r0, r0, r9
 800e922:	1080      	asrs	r0, r0, #2
 800e924:	6128      	str	r0, [r5, #16]
 800e926:	0147      	lsls	r7, r0, #5
 800e928:	4650      	mov	r0, sl
 800e92a:	f000 fae7 	bl	800eefc <__hi0bits>
 800e92e:	f8d8 6000 	ldr.w	r6, [r8]
 800e932:	1a3f      	subs	r7, r7, r0
 800e934:	42b7      	cmp	r7, r6
 800e936:	dd64      	ble.n	800ea02 <__gethex+0x260>
 800e938:	1bbf      	subs	r7, r7, r6
 800e93a:	4639      	mov	r1, r7
 800e93c:	4628      	mov	r0, r5
 800e93e:	f000 fe07 	bl	800f550 <__any_on>
 800e942:	4682      	mov	sl, r0
 800e944:	b178      	cbz	r0, 800e966 <__gethex+0x1c4>
 800e946:	1e7b      	subs	r3, r7, #1
 800e948:	1159      	asrs	r1, r3, #5
 800e94a:	f003 021f 	and.w	r2, r3, #31
 800e94e:	f04f 0a01 	mov.w	sl, #1
 800e952:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800e956:	fa0a f202 	lsl.w	r2, sl, r2
 800e95a:	420a      	tst	r2, r1
 800e95c:	d003      	beq.n	800e966 <__gethex+0x1c4>
 800e95e:	4553      	cmp	r3, sl
 800e960:	dc46      	bgt.n	800e9f0 <__gethex+0x24e>
 800e962:	f04f 0a02 	mov.w	sl, #2
 800e966:	4639      	mov	r1, r7
 800e968:	4628      	mov	r0, r5
 800e96a:	f7ff fecb 	bl	800e704 <rshift>
 800e96e:	443c      	add	r4, r7
 800e970:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e974:	42a3      	cmp	r3, r4
 800e976:	da52      	bge.n	800ea1e <__gethex+0x27c>
 800e978:	4629      	mov	r1, r5
 800e97a:	9802      	ldr	r0, [sp, #8]
 800e97c:	f000 fa3c 	bl	800edf8 <_Bfree>
 800e980:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e982:	2300      	movs	r3, #0
 800e984:	6013      	str	r3, [r2, #0]
 800e986:	27a3      	movs	r7, #163	; 0xa3
 800e988:	e793      	b.n	800e8b2 <__gethex+0x110>
 800e98a:	3101      	adds	r1, #1
 800e98c:	105b      	asrs	r3, r3, #1
 800e98e:	e7b0      	b.n	800e8f2 <__gethex+0x150>
 800e990:	1e73      	subs	r3, r6, #1
 800e992:	9305      	str	r3, [sp, #20]
 800e994:	9a07      	ldr	r2, [sp, #28]
 800e996:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e99a:	4293      	cmp	r3, r2
 800e99c:	d018      	beq.n	800e9d0 <__gethex+0x22e>
 800e99e:	f1bb 0f20 	cmp.w	fp, #32
 800e9a2:	d107      	bne.n	800e9b4 <__gethex+0x212>
 800e9a4:	9b04      	ldr	r3, [sp, #16]
 800e9a6:	f8c3 a000 	str.w	sl, [r3]
 800e9aa:	3304      	adds	r3, #4
 800e9ac:	f04f 0a00 	mov.w	sl, #0
 800e9b0:	9304      	str	r3, [sp, #16]
 800e9b2:	46d3      	mov	fp, sl
 800e9b4:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800e9b8:	f7ff fede 	bl	800e778 <__hexdig_fun>
 800e9bc:	f000 000f 	and.w	r0, r0, #15
 800e9c0:	fa00 f00b 	lsl.w	r0, r0, fp
 800e9c4:	ea4a 0a00 	orr.w	sl, sl, r0
 800e9c8:	f10b 0b04 	add.w	fp, fp, #4
 800e9cc:	9b05      	ldr	r3, [sp, #20]
 800e9ce:	e00d      	b.n	800e9ec <__gethex+0x24a>
 800e9d0:	9b05      	ldr	r3, [sp, #20]
 800e9d2:	9a08      	ldr	r2, [sp, #32]
 800e9d4:	4413      	add	r3, r2
 800e9d6:	42bb      	cmp	r3, r7
 800e9d8:	d3e1      	bcc.n	800e99e <__gethex+0x1fc>
 800e9da:	4618      	mov	r0, r3
 800e9dc:	9a01      	ldr	r2, [sp, #4]
 800e9de:	9903      	ldr	r1, [sp, #12]
 800e9e0:	9309      	str	r3, [sp, #36]	; 0x24
 800e9e2:	f000 ffb5 	bl	800f950 <strncmp>
 800e9e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e9e8:	2800      	cmp	r0, #0
 800e9ea:	d1d8      	bne.n	800e99e <__gethex+0x1fc>
 800e9ec:	461e      	mov	r6, r3
 800e9ee:	e791      	b.n	800e914 <__gethex+0x172>
 800e9f0:	1eb9      	subs	r1, r7, #2
 800e9f2:	4628      	mov	r0, r5
 800e9f4:	f000 fdac 	bl	800f550 <__any_on>
 800e9f8:	2800      	cmp	r0, #0
 800e9fa:	d0b2      	beq.n	800e962 <__gethex+0x1c0>
 800e9fc:	f04f 0a03 	mov.w	sl, #3
 800ea00:	e7b1      	b.n	800e966 <__gethex+0x1c4>
 800ea02:	da09      	bge.n	800ea18 <__gethex+0x276>
 800ea04:	1bf7      	subs	r7, r6, r7
 800ea06:	4629      	mov	r1, r5
 800ea08:	463a      	mov	r2, r7
 800ea0a:	9802      	ldr	r0, [sp, #8]
 800ea0c:	f000 fba4 	bl	800f158 <__lshift>
 800ea10:	1be4      	subs	r4, r4, r7
 800ea12:	4605      	mov	r5, r0
 800ea14:	f100 0914 	add.w	r9, r0, #20
 800ea18:	f04f 0a00 	mov.w	sl, #0
 800ea1c:	e7a8      	b.n	800e970 <__gethex+0x1ce>
 800ea1e:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800ea22:	42a0      	cmp	r0, r4
 800ea24:	dd6a      	ble.n	800eafc <__gethex+0x35a>
 800ea26:	1b04      	subs	r4, r0, r4
 800ea28:	42a6      	cmp	r6, r4
 800ea2a:	dc2e      	bgt.n	800ea8a <__gethex+0x2e8>
 800ea2c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ea30:	2b02      	cmp	r3, #2
 800ea32:	d022      	beq.n	800ea7a <__gethex+0x2d8>
 800ea34:	2b03      	cmp	r3, #3
 800ea36:	d024      	beq.n	800ea82 <__gethex+0x2e0>
 800ea38:	2b01      	cmp	r3, #1
 800ea3a:	d115      	bne.n	800ea68 <__gethex+0x2c6>
 800ea3c:	42a6      	cmp	r6, r4
 800ea3e:	d113      	bne.n	800ea68 <__gethex+0x2c6>
 800ea40:	2e01      	cmp	r6, #1
 800ea42:	dc0b      	bgt.n	800ea5c <__gethex+0x2ba>
 800ea44:	9a06      	ldr	r2, [sp, #24]
 800ea46:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ea4a:	6013      	str	r3, [r2, #0]
 800ea4c:	2301      	movs	r3, #1
 800ea4e:	612b      	str	r3, [r5, #16]
 800ea50:	f8c9 3000 	str.w	r3, [r9]
 800ea54:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ea56:	2762      	movs	r7, #98	; 0x62
 800ea58:	601d      	str	r5, [r3, #0]
 800ea5a:	e72a      	b.n	800e8b2 <__gethex+0x110>
 800ea5c:	1e71      	subs	r1, r6, #1
 800ea5e:	4628      	mov	r0, r5
 800ea60:	f000 fd76 	bl	800f550 <__any_on>
 800ea64:	2800      	cmp	r0, #0
 800ea66:	d1ed      	bne.n	800ea44 <__gethex+0x2a2>
 800ea68:	4629      	mov	r1, r5
 800ea6a:	9802      	ldr	r0, [sp, #8]
 800ea6c:	f000 f9c4 	bl	800edf8 <_Bfree>
 800ea70:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ea72:	2300      	movs	r3, #0
 800ea74:	6013      	str	r3, [r2, #0]
 800ea76:	2750      	movs	r7, #80	; 0x50
 800ea78:	e71b      	b.n	800e8b2 <__gethex+0x110>
 800ea7a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	d0e1      	beq.n	800ea44 <__gethex+0x2a2>
 800ea80:	e7f2      	b.n	800ea68 <__gethex+0x2c6>
 800ea82:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	d1dd      	bne.n	800ea44 <__gethex+0x2a2>
 800ea88:	e7ee      	b.n	800ea68 <__gethex+0x2c6>
 800ea8a:	1e67      	subs	r7, r4, #1
 800ea8c:	f1ba 0f00 	cmp.w	sl, #0
 800ea90:	d131      	bne.n	800eaf6 <__gethex+0x354>
 800ea92:	b127      	cbz	r7, 800ea9e <__gethex+0x2fc>
 800ea94:	4639      	mov	r1, r7
 800ea96:	4628      	mov	r0, r5
 800ea98:	f000 fd5a 	bl	800f550 <__any_on>
 800ea9c:	4682      	mov	sl, r0
 800ea9e:	117a      	asrs	r2, r7, #5
 800eaa0:	2301      	movs	r3, #1
 800eaa2:	f007 071f 	and.w	r7, r7, #31
 800eaa6:	fa03 f707 	lsl.w	r7, r3, r7
 800eaaa:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800eaae:	4621      	mov	r1, r4
 800eab0:	421f      	tst	r7, r3
 800eab2:	4628      	mov	r0, r5
 800eab4:	bf18      	it	ne
 800eab6:	f04a 0a02 	orrne.w	sl, sl, #2
 800eaba:	1b36      	subs	r6, r6, r4
 800eabc:	f7ff fe22 	bl	800e704 <rshift>
 800eac0:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800eac4:	2702      	movs	r7, #2
 800eac6:	f1ba 0f00 	cmp.w	sl, #0
 800eaca:	d048      	beq.n	800eb5e <__gethex+0x3bc>
 800eacc:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ead0:	2b02      	cmp	r3, #2
 800ead2:	d015      	beq.n	800eb00 <__gethex+0x35e>
 800ead4:	2b03      	cmp	r3, #3
 800ead6:	d017      	beq.n	800eb08 <__gethex+0x366>
 800ead8:	2b01      	cmp	r3, #1
 800eada:	d109      	bne.n	800eaf0 <__gethex+0x34e>
 800eadc:	f01a 0f02 	tst.w	sl, #2
 800eae0:	d006      	beq.n	800eaf0 <__gethex+0x34e>
 800eae2:	f8d9 3000 	ldr.w	r3, [r9]
 800eae6:	ea4a 0a03 	orr.w	sl, sl, r3
 800eaea:	f01a 0f01 	tst.w	sl, #1
 800eaee:	d10e      	bne.n	800eb0e <__gethex+0x36c>
 800eaf0:	f047 0710 	orr.w	r7, r7, #16
 800eaf4:	e033      	b.n	800eb5e <__gethex+0x3bc>
 800eaf6:	f04f 0a01 	mov.w	sl, #1
 800eafa:	e7d0      	b.n	800ea9e <__gethex+0x2fc>
 800eafc:	2701      	movs	r7, #1
 800eafe:	e7e2      	b.n	800eac6 <__gethex+0x324>
 800eb00:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800eb02:	f1c3 0301 	rsb	r3, r3, #1
 800eb06:	9315      	str	r3, [sp, #84]	; 0x54
 800eb08:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	d0f0      	beq.n	800eaf0 <__gethex+0x34e>
 800eb0e:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800eb12:	f105 0314 	add.w	r3, r5, #20
 800eb16:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800eb1a:	eb03 010a 	add.w	r1, r3, sl
 800eb1e:	f04f 0c00 	mov.w	ip, #0
 800eb22:	4618      	mov	r0, r3
 800eb24:	f853 2b04 	ldr.w	r2, [r3], #4
 800eb28:	f1b2 3fff 	cmp.w	r2, #4294967295
 800eb2c:	d01c      	beq.n	800eb68 <__gethex+0x3c6>
 800eb2e:	3201      	adds	r2, #1
 800eb30:	6002      	str	r2, [r0, #0]
 800eb32:	2f02      	cmp	r7, #2
 800eb34:	f105 0314 	add.w	r3, r5, #20
 800eb38:	d138      	bne.n	800ebac <__gethex+0x40a>
 800eb3a:	f8d8 2000 	ldr.w	r2, [r8]
 800eb3e:	3a01      	subs	r2, #1
 800eb40:	42b2      	cmp	r2, r6
 800eb42:	d10a      	bne.n	800eb5a <__gethex+0x3b8>
 800eb44:	1171      	asrs	r1, r6, #5
 800eb46:	2201      	movs	r2, #1
 800eb48:	f006 061f 	and.w	r6, r6, #31
 800eb4c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800eb50:	fa02 f606 	lsl.w	r6, r2, r6
 800eb54:	421e      	tst	r6, r3
 800eb56:	bf18      	it	ne
 800eb58:	4617      	movne	r7, r2
 800eb5a:	f047 0720 	orr.w	r7, r7, #32
 800eb5e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800eb60:	601d      	str	r5, [r3, #0]
 800eb62:	9b06      	ldr	r3, [sp, #24]
 800eb64:	601c      	str	r4, [r3, #0]
 800eb66:	e6a4      	b.n	800e8b2 <__gethex+0x110>
 800eb68:	4299      	cmp	r1, r3
 800eb6a:	f843 cc04 	str.w	ip, [r3, #-4]
 800eb6e:	d8d8      	bhi.n	800eb22 <__gethex+0x380>
 800eb70:	68ab      	ldr	r3, [r5, #8]
 800eb72:	4599      	cmp	r9, r3
 800eb74:	db12      	blt.n	800eb9c <__gethex+0x3fa>
 800eb76:	6869      	ldr	r1, [r5, #4]
 800eb78:	9802      	ldr	r0, [sp, #8]
 800eb7a:	3101      	adds	r1, #1
 800eb7c:	f000 f917 	bl	800edae <_Balloc>
 800eb80:	692a      	ldr	r2, [r5, #16]
 800eb82:	3202      	adds	r2, #2
 800eb84:	f105 010c 	add.w	r1, r5, #12
 800eb88:	4683      	mov	fp, r0
 800eb8a:	0092      	lsls	r2, r2, #2
 800eb8c:	300c      	adds	r0, #12
 800eb8e:	f000 f903 	bl	800ed98 <memcpy>
 800eb92:	4629      	mov	r1, r5
 800eb94:	9802      	ldr	r0, [sp, #8]
 800eb96:	f000 f92f 	bl	800edf8 <_Bfree>
 800eb9a:	465d      	mov	r5, fp
 800eb9c:	692b      	ldr	r3, [r5, #16]
 800eb9e:	1c5a      	adds	r2, r3, #1
 800eba0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800eba4:	612a      	str	r2, [r5, #16]
 800eba6:	2201      	movs	r2, #1
 800eba8:	615a      	str	r2, [r3, #20]
 800ebaa:	e7c2      	b.n	800eb32 <__gethex+0x390>
 800ebac:	692a      	ldr	r2, [r5, #16]
 800ebae:	454a      	cmp	r2, r9
 800ebb0:	dd0b      	ble.n	800ebca <__gethex+0x428>
 800ebb2:	2101      	movs	r1, #1
 800ebb4:	4628      	mov	r0, r5
 800ebb6:	f7ff fda5 	bl	800e704 <rshift>
 800ebba:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ebbe:	3401      	adds	r4, #1
 800ebc0:	42a3      	cmp	r3, r4
 800ebc2:	f6ff aed9 	blt.w	800e978 <__gethex+0x1d6>
 800ebc6:	2701      	movs	r7, #1
 800ebc8:	e7c7      	b.n	800eb5a <__gethex+0x3b8>
 800ebca:	f016 061f 	ands.w	r6, r6, #31
 800ebce:	d0fa      	beq.n	800ebc6 <__gethex+0x424>
 800ebd0:	449a      	add	sl, r3
 800ebd2:	f1c6 0620 	rsb	r6, r6, #32
 800ebd6:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800ebda:	f000 f98f 	bl	800eefc <__hi0bits>
 800ebde:	42b0      	cmp	r0, r6
 800ebe0:	dbe7      	blt.n	800ebb2 <__gethex+0x410>
 800ebe2:	e7f0      	b.n	800ebc6 <__gethex+0x424>

0800ebe4 <L_shift>:
 800ebe4:	f1c2 0208 	rsb	r2, r2, #8
 800ebe8:	0092      	lsls	r2, r2, #2
 800ebea:	b570      	push	{r4, r5, r6, lr}
 800ebec:	f1c2 0620 	rsb	r6, r2, #32
 800ebf0:	6843      	ldr	r3, [r0, #4]
 800ebf2:	6804      	ldr	r4, [r0, #0]
 800ebf4:	fa03 f506 	lsl.w	r5, r3, r6
 800ebf8:	432c      	orrs	r4, r5
 800ebfa:	40d3      	lsrs	r3, r2
 800ebfc:	6004      	str	r4, [r0, #0]
 800ebfe:	f840 3f04 	str.w	r3, [r0, #4]!
 800ec02:	4288      	cmp	r0, r1
 800ec04:	d3f4      	bcc.n	800ebf0 <L_shift+0xc>
 800ec06:	bd70      	pop	{r4, r5, r6, pc}

0800ec08 <__match>:
 800ec08:	b530      	push	{r4, r5, lr}
 800ec0a:	6803      	ldr	r3, [r0, #0]
 800ec0c:	3301      	adds	r3, #1
 800ec0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ec12:	b914      	cbnz	r4, 800ec1a <__match+0x12>
 800ec14:	6003      	str	r3, [r0, #0]
 800ec16:	2001      	movs	r0, #1
 800ec18:	bd30      	pop	{r4, r5, pc}
 800ec1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ec1e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800ec22:	2d19      	cmp	r5, #25
 800ec24:	bf98      	it	ls
 800ec26:	3220      	addls	r2, #32
 800ec28:	42a2      	cmp	r2, r4
 800ec2a:	d0f0      	beq.n	800ec0e <__match+0x6>
 800ec2c:	2000      	movs	r0, #0
 800ec2e:	e7f3      	b.n	800ec18 <__match+0x10>

0800ec30 <__hexnan>:
 800ec30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec34:	680b      	ldr	r3, [r1, #0]
 800ec36:	6801      	ldr	r1, [r0, #0]
 800ec38:	115f      	asrs	r7, r3, #5
 800ec3a:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800ec3e:	f013 031f 	ands.w	r3, r3, #31
 800ec42:	b087      	sub	sp, #28
 800ec44:	bf18      	it	ne
 800ec46:	3704      	addne	r7, #4
 800ec48:	2500      	movs	r5, #0
 800ec4a:	1f3e      	subs	r6, r7, #4
 800ec4c:	4682      	mov	sl, r0
 800ec4e:	4690      	mov	r8, r2
 800ec50:	9301      	str	r3, [sp, #4]
 800ec52:	f847 5c04 	str.w	r5, [r7, #-4]
 800ec56:	46b1      	mov	r9, r6
 800ec58:	4634      	mov	r4, r6
 800ec5a:	9502      	str	r5, [sp, #8]
 800ec5c:	46ab      	mov	fp, r5
 800ec5e:	784a      	ldrb	r2, [r1, #1]
 800ec60:	1c4b      	adds	r3, r1, #1
 800ec62:	9303      	str	r3, [sp, #12]
 800ec64:	b342      	cbz	r2, 800ecb8 <__hexnan+0x88>
 800ec66:	4610      	mov	r0, r2
 800ec68:	9105      	str	r1, [sp, #20]
 800ec6a:	9204      	str	r2, [sp, #16]
 800ec6c:	f7ff fd84 	bl	800e778 <__hexdig_fun>
 800ec70:	2800      	cmp	r0, #0
 800ec72:	d143      	bne.n	800ecfc <__hexnan+0xcc>
 800ec74:	9a04      	ldr	r2, [sp, #16]
 800ec76:	9905      	ldr	r1, [sp, #20]
 800ec78:	2a20      	cmp	r2, #32
 800ec7a:	d818      	bhi.n	800ecae <__hexnan+0x7e>
 800ec7c:	9b02      	ldr	r3, [sp, #8]
 800ec7e:	459b      	cmp	fp, r3
 800ec80:	dd13      	ble.n	800ecaa <__hexnan+0x7a>
 800ec82:	454c      	cmp	r4, r9
 800ec84:	d206      	bcs.n	800ec94 <__hexnan+0x64>
 800ec86:	2d07      	cmp	r5, #7
 800ec88:	dc04      	bgt.n	800ec94 <__hexnan+0x64>
 800ec8a:	462a      	mov	r2, r5
 800ec8c:	4649      	mov	r1, r9
 800ec8e:	4620      	mov	r0, r4
 800ec90:	f7ff ffa8 	bl	800ebe4 <L_shift>
 800ec94:	4544      	cmp	r4, r8
 800ec96:	d944      	bls.n	800ed22 <__hexnan+0xf2>
 800ec98:	2300      	movs	r3, #0
 800ec9a:	f1a4 0904 	sub.w	r9, r4, #4
 800ec9e:	f844 3c04 	str.w	r3, [r4, #-4]
 800eca2:	f8cd b008 	str.w	fp, [sp, #8]
 800eca6:	464c      	mov	r4, r9
 800eca8:	461d      	mov	r5, r3
 800ecaa:	9903      	ldr	r1, [sp, #12]
 800ecac:	e7d7      	b.n	800ec5e <__hexnan+0x2e>
 800ecae:	2a29      	cmp	r2, #41	; 0x29
 800ecb0:	d14a      	bne.n	800ed48 <__hexnan+0x118>
 800ecb2:	3102      	adds	r1, #2
 800ecb4:	f8ca 1000 	str.w	r1, [sl]
 800ecb8:	f1bb 0f00 	cmp.w	fp, #0
 800ecbc:	d044      	beq.n	800ed48 <__hexnan+0x118>
 800ecbe:	454c      	cmp	r4, r9
 800ecc0:	d206      	bcs.n	800ecd0 <__hexnan+0xa0>
 800ecc2:	2d07      	cmp	r5, #7
 800ecc4:	dc04      	bgt.n	800ecd0 <__hexnan+0xa0>
 800ecc6:	462a      	mov	r2, r5
 800ecc8:	4649      	mov	r1, r9
 800ecca:	4620      	mov	r0, r4
 800eccc:	f7ff ff8a 	bl	800ebe4 <L_shift>
 800ecd0:	4544      	cmp	r4, r8
 800ecd2:	d928      	bls.n	800ed26 <__hexnan+0xf6>
 800ecd4:	4643      	mov	r3, r8
 800ecd6:	f854 2b04 	ldr.w	r2, [r4], #4
 800ecda:	f843 2b04 	str.w	r2, [r3], #4
 800ecde:	42a6      	cmp	r6, r4
 800ece0:	d2f9      	bcs.n	800ecd6 <__hexnan+0xa6>
 800ece2:	2200      	movs	r2, #0
 800ece4:	f843 2b04 	str.w	r2, [r3], #4
 800ece8:	429e      	cmp	r6, r3
 800ecea:	d2fb      	bcs.n	800ece4 <__hexnan+0xb4>
 800ecec:	6833      	ldr	r3, [r6, #0]
 800ecee:	b91b      	cbnz	r3, 800ecf8 <__hexnan+0xc8>
 800ecf0:	4546      	cmp	r6, r8
 800ecf2:	d127      	bne.n	800ed44 <__hexnan+0x114>
 800ecf4:	2301      	movs	r3, #1
 800ecf6:	6033      	str	r3, [r6, #0]
 800ecf8:	2005      	movs	r0, #5
 800ecfa:	e026      	b.n	800ed4a <__hexnan+0x11a>
 800ecfc:	3501      	adds	r5, #1
 800ecfe:	2d08      	cmp	r5, #8
 800ed00:	f10b 0b01 	add.w	fp, fp, #1
 800ed04:	dd06      	ble.n	800ed14 <__hexnan+0xe4>
 800ed06:	4544      	cmp	r4, r8
 800ed08:	d9cf      	bls.n	800ecaa <__hexnan+0x7a>
 800ed0a:	2300      	movs	r3, #0
 800ed0c:	f844 3c04 	str.w	r3, [r4, #-4]
 800ed10:	2501      	movs	r5, #1
 800ed12:	3c04      	subs	r4, #4
 800ed14:	6822      	ldr	r2, [r4, #0]
 800ed16:	f000 000f 	and.w	r0, r0, #15
 800ed1a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800ed1e:	6020      	str	r0, [r4, #0]
 800ed20:	e7c3      	b.n	800ecaa <__hexnan+0x7a>
 800ed22:	2508      	movs	r5, #8
 800ed24:	e7c1      	b.n	800ecaa <__hexnan+0x7a>
 800ed26:	9b01      	ldr	r3, [sp, #4]
 800ed28:	2b00      	cmp	r3, #0
 800ed2a:	d0df      	beq.n	800ecec <__hexnan+0xbc>
 800ed2c:	f04f 32ff 	mov.w	r2, #4294967295
 800ed30:	f1c3 0320 	rsb	r3, r3, #32
 800ed34:	fa22 f303 	lsr.w	r3, r2, r3
 800ed38:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800ed3c:	401a      	ands	r2, r3
 800ed3e:	f847 2c04 	str.w	r2, [r7, #-4]
 800ed42:	e7d3      	b.n	800ecec <__hexnan+0xbc>
 800ed44:	3e04      	subs	r6, #4
 800ed46:	e7d1      	b.n	800ecec <__hexnan+0xbc>
 800ed48:	2004      	movs	r0, #4
 800ed4a:	b007      	add	sp, #28
 800ed4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ed50 <__localeconv_l>:
 800ed50:	30f0      	adds	r0, #240	; 0xf0
 800ed52:	4770      	bx	lr

0800ed54 <_localeconv_r>:
 800ed54:	4b04      	ldr	r3, [pc, #16]	; (800ed68 <_localeconv_r+0x14>)
 800ed56:	681b      	ldr	r3, [r3, #0]
 800ed58:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800ed5a:	4b04      	ldr	r3, [pc, #16]	; (800ed6c <_localeconv_r+0x18>)
 800ed5c:	2800      	cmp	r0, #0
 800ed5e:	bf08      	it	eq
 800ed60:	4618      	moveq	r0, r3
 800ed62:	30f0      	adds	r0, #240	; 0xf0
 800ed64:	4770      	bx	lr
 800ed66:	bf00      	nop
 800ed68:	200000f4 	.word	0x200000f4
 800ed6c:	20000934 	.word	0x20000934

0800ed70 <__retarget_lock_acquire_recursive>:
 800ed70:	4770      	bx	lr

0800ed72 <__retarget_lock_release_recursive>:
 800ed72:	4770      	bx	lr

0800ed74 <__ascii_mbtowc>:
 800ed74:	b082      	sub	sp, #8
 800ed76:	b901      	cbnz	r1, 800ed7a <__ascii_mbtowc+0x6>
 800ed78:	a901      	add	r1, sp, #4
 800ed7a:	b142      	cbz	r2, 800ed8e <__ascii_mbtowc+0x1a>
 800ed7c:	b14b      	cbz	r3, 800ed92 <__ascii_mbtowc+0x1e>
 800ed7e:	7813      	ldrb	r3, [r2, #0]
 800ed80:	600b      	str	r3, [r1, #0]
 800ed82:	7812      	ldrb	r2, [r2, #0]
 800ed84:	1c10      	adds	r0, r2, #0
 800ed86:	bf18      	it	ne
 800ed88:	2001      	movne	r0, #1
 800ed8a:	b002      	add	sp, #8
 800ed8c:	4770      	bx	lr
 800ed8e:	4610      	mov	r0, r2
 800ed90:	e7fb      	b.n	800ed8a <__ascii_mbtowc+0x16>
 800ed92:	f06f 0001 	mvn.w	r0, #1
 800ed96:	e7f8      	b.n	800ed8a <__ascii_mbtowc+0x16>

0800ed98 <memcpy>:
 800ed98:	b510      	push	{r4, lr}
 800ed9a:	1e43      	subs	r3, r0, #1
 800ed9c:	440a      	add	r2, r1
 800ed9e:	4291      	cmp	r1, r2
 800eda0:	d100      	bne.n	800eda4 <memcpy+0xc>
 800eda2:	bd10      	pop	{r4, pc}
 800eda4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800eda8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800edac:	e7f7      	b.n	800ed9e <memcpy+0x6>

0800edae <_Balloc>:
 800edae:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800edb0:	b570      	push	{r4, r5, r6, lr}
 800edb2:	4605      	mov	r5, r0
 800edb4:	460c      	mov	r4, r1
 800edb6:	b17b      	cbz	r3, 800edd8 <_Balloc+0x2a>
 800edb8:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800edba:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800edbe:	b9a0      	cbnz	r0, 800edea <_Balloc+0x3c>
 800edc0:	2101      	movs	r1, #1
 800edc2:	fa01 f604 	lsl.w	r6, r1, r4
 800edc6:	1d72      	adds	r2, r6, #5
 800edc8:	0092      	lsls	r2, r2, #2
 800edca:	4628      	mov	r0, r5
 800edcc:	f000 feae 	bl	800fb2c <_calloc_r>
 800edd0:	b148      	cbz	r0, 800ede6 <_Balloc+0x38>
 800edd2:	e9c0 4601 	strd	r4, r6, [r0, #4]
 800edd6:	e00b      	b.n	800edf0 <_Balloc+0x42>
 800edd8:	2221      	movs	r2, #33	; 0x21
 800edda:	2104      	movs	r1, #4
 800eddc:	f000 fea6 	bl	800fb2c <_calloc_r>
 800ede0:	64e8      	str	r0, [r5, #76]	; 0x4c
 800ede2:	2800      	cmp	r0, #0
 800ede4:	d1e8      	bne.n	800edb8 <_Balloc+0xa>
 800ede6:	2000      	movs	r0, #0
 800ede8:	bd70      	pop	{r4, r5, r6, pc}
 800edea:	6802      	ldr	r2, [r0, #0]
 800edec:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 800edf0:	2300      	movs	r3, #0
 800edf2:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800edf6:	e7f7      	b.n	800ede8 <_Balloc+0x3a>

0800edf8 <_Bfree>:
 800edf8:	b131      	cbz	r1, 800ee08 <_Bfree+0x10>
 800edfa:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800edfc:	684a      	ldr	r2, [r1, #4]
 800edfe:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800ee02:	6008      	str	r0, [r1, #0]
 800ee04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800ee08:	4770      	bx	lr

0800ee0a <__multadd>:
 800ee0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee0e:	690d      	ldr	r5, [r1, #16]
 800ee10:	461f      	mov	r7, r3
 800ee12:	4606      	mov	r6, r0
 800ee14:	460c      	mov	r4, r1
 800ee16:	f101 0c14 	add.w	ip, r1, #20
 800ee1a:	2300      	movs	r3, #0
 800ee1c:	f8dc 0000 	ldr.w	r0, [ip]
 800ee20:	b281      	uxth	r1, r0
 800ee22:	fb02 7101 	mla	r1, r2, r1, r7
 800ee26:	0c0f      	lsrs	r7, r1, #16
 800ee28:	0c00      	lsrs	r0, r0, #16
 800ee2a:	fb02 7000 	mla	r0, r2, r0, r7
 800ee2e:	b289      	uxth	r1, r1
 800ee30:	3301      	adds	r3, #1
 800ee32:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800ee36:	429d      	cmp	r5, r3
 800ee38:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800ee3c:	f84c 1b04 	str.w	r1, [ip], #4
 800ee40:	dcec      	bgt.n	800ee1c <__multadd+0x12>
 800ee42:	b1d7      	cbz	r7, 800ee7a <__multadd+0x70>
 800ee44:	68a3      	ldr	r3, [r4, #8]
 800ee46:	42ab      	cmp	r3, r5
 800ee48:	dc12      	bgt.n	800ee70 <__multadd+0x66>
 800ee4a:	6861      	ldr	r1, [r4, #4]
 800ee4c:	4630      	mov	r0, r6
 800ee4e:	3101      	adds	r1, #1
 800ee50:	f7ff ffad 	bl	800edae <_Balloc>
 800ee54:	6922      	ldr	r2, [r4, #16]
 800ee56:	3202      	adds	r2, #2
 800ee58:	f104 010c 	add.w	r1, r4, #12
 800ee5c:	4680      	mov	r8, r0
 800ee5e:	0092      	lsls	r2, r2, #2
 800ee60:	300c      	adds	r0, #12
 800ee62:	f7ff ff99 	bl	800ed98 <memcpy>
 800ee66:	4621      	mov	r1, r4
 800ee68:	4630      	mov	r0, r6
 800ee6a:	f7ff ffc5 	bl	800edf8 <_Bfree>
 800ee6e:	4644      	mov	r4, r8
 800ee70:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ee74:	3501      	adds	r5, #1
 800ee76:	615f      	str	r7, [r3, #20]
 800ee78:	6125      	str	r5, [r4, #16]
 800ee7a:	4620      	mov	r0, r4
 800ee7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ee80 <__s2b>:
 800ee80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ee84:	460c      	mov	r4, r1
 800ee86:	4615      	mov	r5, r2
 800ee88:	461f      	mov	r7, r3
 800ee8a:	2209      	movs	r2, #9
 800ee8c:	3308      	adds	r3, #8
 800ee8e:	4606      	mov	r6, r0
 800ee90:	fb93 f3f2 	sdiv	r3, r3, r2
 800ee94:	2100      	movs	r1, #0
 800ee96:	2201      	movs	r2, #1
 800ee98:	429a      	cmp	r2, r3
 800ee9a:	db20      	blt.n	800eede <__s2b+0x5e>
 800ee9c:	4630      	mov	r0, r6
 800ee9e:	f7ff ff86 	bl	800edae <_Balloc>
 800eea2:	9b08      	ldr	r3, [sp, #32]
 800eea4:	6143      	str	r3, [r0, #20]
 800eea6:	2d09      	cmp	r5, #9
 800eea8:	f04f 0301 	mov.w	r3, #1
 800eeac:	6103      	str	r3, [r0, #16]
 800eeae:	dd19      	ble.n	800eee4 <__s2b+0x64>
 800eeb0:	f104 0809 	add.w	r8, r4, #9
 800eeb4:	46c1      	mov	r9, r8
 800eeb6:	442c      	add	r4, r5
 800eeb8:	f819 3b01 	ldrb.w	r3, [r9], #1
 800eebc:	4601      	mov	r1, r0
 800eebe:	3b30      	subs	r3, #48	; 0x30
 800eec0:	220a      	movs	r2, #10
 800eec2:	4630      	mov	r0, r6
 800eec4:	f7ff ffa1 	bl	800ee0a <__multadd>
 800eec8:	45a1      	cmp	r9, r4
 800eeca:	d1f5      	bne.n	800eeb8 <__s2b+0x38>
 800eecc:	eb08 0405 	add.w	r4, r8, r5
 800eed0:	3c08      	subs	r4, #8
 800eed2:	1b2d      	subs	r5, r5, r4
 800eed4:	1963      	adds	r3, r4, r5
 800eed6:	42bb      	cmp	r3, r7
 800eed8:	db07      	blt.n	800eeea <__s2b+0x6a>
 800eeda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eede:	0052      	lsls	r2, r2, #1
 800eee0:	3101      	adds	r1, #1
 800eee2:	e7d9      	b.n	800ee98 <__s2b+0x18>
 800eee4:	340a      	adds	r4, #10
 800eee6:	2509      	movs	r5, #9
 800eee8:	e7f3      	b.n	800eed2 <__s2b+0x52>
 800eeea:	f814 3b01 	ldrb.w	r3, [r4], #1
 800eeee:	4601      	mov	r1, r0
 800eef0:	3b30      	subs	r3, #48	; 0x30
 800eef2:	220a      	movs	r2, #10
 800eef4:	4630      	mov	r0, r6
 800eef6:	f7ff ff88 	bl	800ee0a <__multadd>
 800eefa:	e7eb      	b.n	800eed4 <__s2b+0x54>

0800eefc <__hi0bits>:
 800eefc:	0c02      	lsrs	r2, r0, #16
 800eefe:	0412      	lsls	r2, r2, #16
 800ef00:	4603      	mov	r3, r0
 800ef02:	b9b2      	cbnz	r2, 800ef32 <__hi0bits+0x36>
 800ef04:	0403      	lsls	r3, r0, #16
 800ef06:	2010      	movs	r0, #16
 800ef08:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800ef0c:	bf04      	itt	eq
 800ef0e:	021b      	lsleq	r3, r3, #8
 800ef10:	3008      	addeq	r0, #8
 800ef12:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800ef16:	bf04      	itt	eq
 800ef18:	011b      	lsleq	r3, r3, #4
 800ef1a:	3004      	addeq	r0, #4
 800ef1c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800ef20:	bf04      	itt	eq
 800ef22:	009b      	lsleq	r3, r3, #2
 800ef24:	3002      	addeq	r0, #2
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	db06      	blt.n	800ef38 <__hi0bits+0x3c>
 800ef2a:	005b      	lsls	r3, r3, #1
 800ef2c:	d503      	bpl.n	800ef36 <__hi0bits+0x3a>
 800ef2e:	3001      	adds	r0, #1
 800ef30:	4770      	bx	lr
 800ef32:	2000      	movs	r0, #0
 800ef34:	e7e8      	b.n	800ef08 <__hi0bits+0xc>
 800ef36:	2020      	movs	r0, #32
 800ef38:	4770      	bx	lr

0800ef3a <__lo0bits>:
 800ef3a:	6803      	ldr	r3, [r0, #0]
 800ef3c:	f013 0207 	ands.w	r2, r3, #7
 800ef40:	4601      	mov	r1, r0
 800ef42:	d00b      	beq.n	800ef5c <__lo0bits+0x22>
 800ef44:	07da      	lsls	r2, r3, #31
 800ef46:	d423      	bmi.n	800ef90 <__lo0bits+0x56>
 800ef48:	0798      	lsls	r0, r3, #30
 800ef4a:	bf49      	itett	mi
 800ef4c:	085b      	lsrmi	r3, r3, #1
 800ef4e:	089b      	lsrpl	r3, r3, #2
 800ef50:	2001      	movmi	r0, #1
 800ef52:	600b      	strmi	r3, [r1, #0]
 800ef54:	bf5c      	itt	pl
 800ef56:	600b      	strpl	r3, [r1, #0]
 800ef58:	2002      	movpl	r0, #2
 800ef5a:	4770      	bx	lr
 800ef5c:	b298      	uxth	r0, r3
 800ef5e:	b9a8      	cbnz	r0, 800ef8c <__lo0bits+0x52>
 800ef60:	0c1b      	lsrs	r3, r3, #16
 800ef62:	2010      	movs	r0, #16
 800ef64:	f013 0fff 	tst.w	r3, #255	; 0xff
 800ef68:	bf04      	itt	eq
 800ef6a:	0a1b      	lsreq	r3, r3, #8
 800ef6c:	3008      	addeq	r0, #8
 800ef6e:	071a      	lsls	r2, r3, #28
 800ef70:	bf04      	itt	eq
 800ef72:	091b      	lsreq	r3, r3, #4
 800ef74:	3004      	addeq	r0, #4
 800ef76:	079a      	lsls	r2, r3, #30
 800ef78:	bf04      	itt	eq
 800ef7a:	089b      	lsreq	r3, r3, #2
 800ef7c:	3002      	addeq	r0, #2
 800ef7e:	07da      	lsls	r2, r3, #31
 800ef80:	d402      	bmi.n	800ef88 <__lo0bits+0x4e>
 800ef82:	085b      	lsrs	r3, r3, #1
 800ef84:	d006      	beq.n	800ef94 <__lo0bits+0x5a>
 800ef86:	3001      	adds	r0, #1
 800ef88:	600b      	str	r3, [r1, #0]
 800ef8a:	4770      	bx	lr
 800ef8c:	4610      	mov	r0, r2
 800ef8e:	e7e9      	b.n	800ef64 <__lo0bits+0x2a>
 800ef90:	2000      	movs	r0, #0
 800ef92:	4770      	bx	lr
 800ef94:	2020      	movs	r0, #32
 800ef96:	4770      	bx	lr

0800ef98 <__i2b>:
 800ef98:	b510      	push	{r4, lr}
 800ef9a:	460c      	mov	r4, r1
 800ef9c:	2101      	movs	r1, #1
 800ef9e:	f7ff ff06 	bl	800edae <_Balloc>
 800efa2:	2201      	movs	r2, #1
 800efa4:	6144      	str	r4, [r0, #20]
 800efa6:	6102      	str	r2, [r0, #16]
 800efa8:	bd10      	pop	{r4, pc}

0800efaa <__multiply>:
 800efaa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800efae:	4614      	mov	r4, r2
 800efb0:	690a      	ldr	r2, [r1, #16]
 800efb2:	6923      	ldr	r3, [r4, #16]
 800efb4:	429a      	cmp	r2, r3
 800efb6:	bfb8      	it	lt
 800efb8:	460b      	movlt	r3, r1
 800efba:	4688      	mov	r8, r1
 800efbc:	bfbc      	itt	lt
 800efbe:	46a0      	movlt	r8, r4
 800efc0:	461c      	movlt	r4, r3
 800efc2:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800efc6:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800efca:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800efce:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800efd2:	eb07 0609 	add.w	r6, r7, r9
 800efd6:	42b3      	cmp	r3, r6
 800efd8:	bfb8      	it	lt
 800efda:	3101      	addlt	r1, #1
 800efdc:	f7ff fee7 	bl	800edae <_Balloc>
 800efe0:	f100 0514 	add.w	r5, r0, #20
 800efe4:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800efe8:	462b      	mov	r3, r5
 800efea:	2200      	movs	r2, #0
 800efec:	4573      	cmp	r3, lr
 800efee:	d316      	bcc.n	800f01e <__multiply+0x74>
 800eff0:	f104 0214 	add.w	r2, r4, #20
 800eff4:	f108 0114 	add.w	r1, r8, #20
 800eff8:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800effc:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800f000:	9300      	str	r3, [sp, #0]
 800f002:	9b00      	ldr	r3, [sp, #0]
 800f004:	9201      	str	r2, [sp, #4]
 800f006:	4293      	cmp	r3, r2
 800f008:	d80c      	bhi.n	800f024 <__multiply+0x7a>
 800f00a:	2e00      	cmp	r6, #0
 800f00c:	dd03      	ble.n	800f016 <__multiply+0x6c>
 800f00e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800f012:	2b00      	cmp	r3, #0
 800f014:	d05d      	beq.n	800f0d2 <__multiply+0x128>
 800f016:	6106      	str	r6, [r0, #16]
 800f018:	b003      	add	sp, #12
 800f01a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f01e:	f843 2b04 	str.w	r2, [r3], #4
 800f022:	e7e3      	b.n	800efec <__multiply+0x42>
 800f024:	f8b2 b000 	ldrh.w	fp, [r2]
 800f028:	f1bb 0f00 	cmp.w	fp, #0
 800f02c:	d023      	beq.n	800f076 <__multiply+0xcc>
 800f02e:	4689      	mov	r9, r1
 800f030:	46ac      	mov	ip, r5
 800f032:	f04f 0800 	mov.w	r8, #0
 800f036:	f859 4b04 	ldr.w	r4, [r9], #4
 800f03a:	f8dc a000 	ldr.w	sl, [ip]
 800f03e:	b2a3      	uxth	r3, r4
 800f040:	fa1f fa8a 	uxth.w	sl, sl
 800f044:	fb0b a303 	mla	r3, fp, r3, sl
 800f048:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800f04c:	f8dc 4000 	ldr.w	r4, [ip]
 800f050:	4443      	add	r3, r8
 800f052:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800f056:	fb0b 840a 	mla	r4, fp, sl, r8
 800f05a:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800f05e:	46e2      	mov	sl, ip
 800f060:	b29b      	uxth	r3, r3
 800f062:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800f066:	454f      	cmp	r7, r9
 800f068:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800f06c:	f84a 3b04 	str.w	r3, [sl], #4
 800f070:	d82b      	bhi.n	800f0ca <__multiply+0x120>
 800f072:	f8cc 8004 	str.w	r8, [ip, #4]
 800f076:	9b01      	ldr	r3, [sp, #4]
 800f078:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800f07c:	3204      	adds	r2, #4
 800f07e:	f1ba 0f00 	cmp.w	sl, #0
 800f082:	d020      	beq.n	800f0c6 <__multiply+0x11c>
 800f084:	682b      	ldr	r3, [r5, #0]
 800f086:	4689      	mov	r9, r1
 800f088:	46a8      	mov	r8, r5
 800f08a:	f04f 0b00 	mov.w	fp, #0
 800f08e:	f8b9 c000 	ldrh.w	ip, [r9]
 800f092:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800f096:	fb0a 440c 	mla	r4, sl, ip, r4
 800f09a:	445c      	add	r4, fp
 800f09c:	46c4      	mov	ip, r8
 800f09e:	b29b      	uxth	r3, r3
 800f0a0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800f0a4:	f84c 3b04 	str.w	r3, [ip], #4
 800f0a8:	f859 3b04 	ldr.w	r3, [r9], #4
 800f0ac:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800f0b0:	0c1b      	lsrs	r3, r3, #16
 800f0b2:	fb0a b303 	mla	r3, sl, r3, fp
 800f0b6:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800f0ba:	454f      	cmp	r7, r9
 800f0bc:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800f0c0:	d805      	bhi.n	800f0ce <__multiply+0x124>
 800f0c2:	f8c8 3004 	str.w	r3, [r8, #4]
 800f0c6:	3504      	adds	r5, #4
 800f0c8:	e79b      	b.n	800f002 <__multiply+0x58>
 800f0ca:	46d4      	mov	ip, sl
 800f0cc:	e7b3      	b.n	800f036 <__multiply+0x8c>
 800f0ce:	46e0      	mov	r8, ip
 800f0d0:	e7dd      	b.n	800f08e <__multiply+0xe4>
 800f0d2:	3e01      	subs	r6, #1
 800f0d4:	e799      	b.n	800f00a <__multiply+0x60>
	...

0800f0d8 <__pow5mult>:
 800f0d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f0dc:	4615      	mov	r5, r2
 800f0de:	f012 0203 	ands.w	r2, r2, #3
 800f0e2:	4606      	mov	r6, r0
 800f0e4:	460f      	mov	r7, r1
 800f0e6:	d007      	beq.n	800f0f8 <__pow5mult+0x20>
 800f0e8:	3a01      	subs	r2, #1
 800f0ea:	4c1a      	ldr	r4, [pc, #104]	; (800f154 <__pow5mult+0x7c>)
 800f0ec:	2300      	movs	r3, #0
 800f0ee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f0f2:	f7ff fe8a 	bl	800ee0a <__multadd>
 800f0f6:	4607      	mov	r7, r0
 800f0f8:	10ad      	asrs	r5, r5, #2
 800f0fa:	d027      	beq.n	800f14c <__pow5mult+0x74>
 800f0fc:	6cb4      	ldr	r4, [r6, #72]	; 0x48
 800f0fe:	b944      	cbnz	r4, 800f112 <__pow5mult+0x3a>
 800f100:	f240 2171 	movw	r1, #625	; 0x271
 800f104:	4630      	mov	r0, r6
 800f106:	f7ff ff47 	bl	800ef98 <__i2b>
 800f10a:	2300      	movs	r3, #0
 800f10c:	64b0      	str	r0, [r6, #72]	; 0x48
 800f10e:	4604      	mov	r4, r0
 800f110:	6003      	str	r3, [r0, #0]
 800f112:	f04f 0800 	mov.w	r8, #0
 800f116:	07eb      	lsls	r3, r5, #31
 800f118:	d50a      	bpl.n	800f130 <__pow5mult+0x58>
 800f11a:	4639      	mov	r1, r7
 800f11c:	4622      	mov	r2, r4
 800f11e:	4630      	mov	r0, r6
 800f120:	f7ff ff43 	bl	800efaa <__multiply>
 800f124:	4639      	mov	r1, r7
 800f126:	4681      	mov	r9, r0
 800f128:	4630      	mov	r0, r6
 800f12a:	f7ff fe65 	bl	800edf8 <_Bfree>
 800f12e:	464f      	mov	r7, r9
 800f130:	106d      	asrs	r5, r5, #1
 800f132:	d00b      	beq.n	800f14c <__pow5mult+0x74>
 800f134:	6820      	ldr	r0, [r4, #0]
 800f136:	b938      	cbnz	r0, 800f148 <__pow5mult+0x70>
 800f138:	4622      	mov	r2, r4
 800f13a:	4621      	mov	r1, r4
 800f13c:	4630      	mov	r0, r6
 800f13e:	f7ff ff34 	bl	800efaa <__multiply>
 800f142:	6020      	str	r0, [r4, #0]
 800f144:	f8c0 8000 	str.w	r8, [r0]
 800f148:	4604      	mov	r4, r0
 800f14a:	e7e4      	b.n	800f116 <__pow5mult+0x3e>
 800f14c:	4638      	mov	r0, r7
 800f14e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f152:	bf00      	nop
 800f154:	08010490 	.word	0x08010490

0800f158 <__lshift>:
 800f158:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f15c:	460c      	mov	r4, r1
 800f15e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f162:	6923      	ldr	r3, [r4, #16]
 800f164:	6849      	ldr	r1, [r1, #4]
 800f166:	eb0a 0903 	add.w	r9, sl, r3
 800f16a:	68a3      	ldr	r3, [r4, #8]
 800f16c:	4607      	mov	r7, r0
 800f16e:	4616      	mov	r6, r2
 800f170:	f109 0501 	add.w	r5, r9, #1
 800f174:	42ab      	cmp	r3, r5
 800f176:	db32      	blt.n	800f1de <__lshift+0x86>
 800f178:	4638      	mov	r0, r7
 800f17a:	f7ff fe18 	bl	800edae <_Balloc>
 800f17e:	2300      	movs	r3, #0
 800f180:	4680      	mov	r8, r0
 800f182:	f100 0114 	add.w	r1, r0, #20
 800f186:	461a      	mov	r2, r3
 800f188:	4553      	cmp	r3, sl
 800f18a:	db2b      	blt.n	800f1e4 <__lshift+0x8c>
 800f18c:	6920      	ldr	r0, [r4, #16]
 800f18e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f192:	f104 0314 	add.w	r3, r4, #20
 800f196:	f016 021f 	ands.w	r2, r6, #31
 800f19a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f19e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f1a2:	d025      	beq.n	800f1f0 <__lshift+0x98>
 800f1a4:	f1c2 0e20 	rsb	lr, r2, #32
 800f1a8:	2000      	movs	r0, #0
 800f1aa:	681e      	ldr	r6, [r3, #0]
 800f1ac:	468a      	mov	sl, r1
 800f1ae:	4096      	lsls	r6, r2
 800f1b0:	4330      	orrs	r0, r6
 800f1b2:	f84a 0b04 	str.w	r0, [sl], #4
 800f1b6:	f853 0b04 	ldr.w	r0, [r3], #4
 800f1ba:	459c      	cmp	ip, r3
 800f1bc:	fa20 f00e 	lsr.w	r0, r0, lr
 800f1c0:	d814      	bhi.n	800f1ec <__lshift+0x94>
 800f1c2:	6048      	str	r0, [r1, #4]
 800f1c4:	b108      	cbz	r0, 800f1ca <__lshift+0x72>
 800f1c6:	f109 0502 	add.w	r5, r9, #2
 800f1ca:	3d01      	subs	r5, #1
 800f1cc:	4638      	mov	r0, r7
 800f1ce:	f8c8 5010 	str.w	r5, [r8, #16]
 800f1d2:	4621      	mov	r1, r4
 800f1d4:	f7ff fe10 	bl	800edf8 <_Bfree>
 800f1d8:	4640      	mov	r0, r8
 800f1da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f1de:	3101      	adds	r1, #1
 800f1e0:	005b      	lsls	r3, r3, #1
 800f1e2:	e7c7      	b.n	800f174 <__lshift+0x1c>
 800f1e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800f1e8:	3301      	adds	r3, #1
 800f1ea:	e7cd      	b.n	800f188 <__lshift+0x30>
 800f1ec:	4651      	mov	r1, sl
 800f1ee:	e7dc      	b.n	800f1aa <__lshift+0x52>
 800f1f0:	3904      	subs	r1, #4
 800f1f2:	f853 2b04 	ldr.w	r2, [r3], #4
 800f1f6:	f841 2f04 	str.w	r2, [r1, #4]!
 800f1fa:	459c      	cmp	ip, r3
 800f1fc:	d8f9      	bhi.n	800f1f2 <__lshift+0x9a>
 800f1fe:	e7e4      	b.n	800f1ca <__lshift+0x72>

0800f200 <__mcmp>:
 800f200:	6903      	ldr	r3, [r0, #16]
 800f202:	690a      	ldr	r2, [r1, #16]
 800f204:	1a9b      	subs	r3, r3, r2
 800f206:	b530      	push	{r4, r5, lr}
 800f208:	d10c      	bne.n	800f224 <__mcmp+0x24>
 800f20a:	0092      	lsls	r2, r2, #2
 800f20c:	3014      	adds	r0, #20
 800f20e:	3114      	adds	r1, #20
 800f210:	1884      	adds	r4, r0, r2
 800f212:	4411      	add	r1, r2
 800f214:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800f218:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800f21c:	4295      	cmp	r5, r2
 800f21e:	d003      	beq.n	800f228 <__mcmp+0x28>
 800f220:	d305      	bcc.n	800f22e <__mcmp+0x2e>
 800f222:	2301      	movs	r3, #1
 800f224:	4618      	mov	r0, r3
 800f226:	bd30      	pop	{r4, r5, pc}
 800f228:	42a0      	cmp	r0, r4
 800f22a:	d3f3      	bcc.n	800f214 <__mcmp+0x14>
 800f22c:	e7fa      	b.n	800f224 <__mcmp+0x24>
 800f22e:	f04f 33ff 	mov.w	r3, #4294967295
 800f232:	e7f7      	b.n	800f224 <__mcmp+0x24>

0800f234 <__mdiff>:
 800f234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f238:	460d      	mov	r5, r1
 800f23a:	4607      	mov	r7, r0
 800f23c:	4611      	mov	r1, r2
 800f23e:	4628      	mov	r0, r5
 800f240:	4614      	mov	r4, r2
 800f242:	f7ff ffdd 	bl	800f200 <__mcmp>
 800f246:	1e06      	subs	r6, r0, #0
 800f248:	d108      	bne.n	800f25c <__mdiff+0x28>
 800f24a:	4631      	mov	r1, r6
 800f24c:	4638      	mov	r0, r7
 800f24e:	f7ff fdae 	bl	800edae <_Balloc>
 800f252:	2301      	movs	r3, #1
 800f254:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800f258:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f25c:	bfa4      	itt	ge
 800f25e:	4623      	movge	r3, r4
 800f260:	462c      	movge	r4, r5
 800f262:	4638      	mov	r0, r7
 800f264:	6861      	ldr	r1, [r4, #4]
 800f266:	bfa6      	itte	ge
 800f268:	461d      	movge	r5, r3
 800f26a:	2600      	movge	r6, #0
 800f26c:	2601      	movlt	r6, #1
 800f26e:	f7ff fd9e 	bl	800edae <_Balloc>
 800f272:	692b      	ldr	r3, [r5, #16]
 800f274:	60c6      	str	r6, [r0, #12]
 800f276:	6926      	ldr	r6, [r4, #16]
 800f278:	f105 0914 	add.w	r9, r5, #20
 800f27c:	f104 0214 	add.w	r2, r4, #20
 800f280:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800f284:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800f288:	f100 0514 	add.w	r5, r0, #20
 800f28c:	f04f 0e00 	mov.w	lr, #0
 800f290:	f852 ab04 	ldr.w	sl, [r2], #4
 800f294:	f859 4b04 	ldr.w	r4, [r9], #4
 800f298:	fa1e f18a 	uxtah	r1, lr, sl
 800f29c:	b2a3      	uxth	r3, r4
 800f29e:	1ac9      	subs	r1, r1, r3
 800f2a0:	0c23      	lsrs	r3, r4, #16
 800f2a2:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800f2a6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800f2aa:	b289      	uxth	r1, r1
 800f2ac:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800f2b0:	45c8      	cmp	r8, r9
 800f2b2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800f2b6:	4694      	mov	ip, r2
 800f2b8:	f845 3b04 	str.w	r3, [r5], #4
 800f2bc:	d8e8      	bhi.n	800f290 <__mdiff+0x5c>
 800f2be:	45bc      	cmp	ip, r7
 800f2c0:	d304      	bcc.n	800f2cc <__mdiff+0x98>
 800f2c2:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800f2c6:	b183      	cbz	r3, 800f2ea <__mdiff+0xb6>
 800f2c8:	6106      	str	r6, [r0, #16]
 800f2ca:	e7c5      	b.n	800f258 <__mdiff+0x24>
 800f2cc:	f85c 1b04 	ldr.w	r1, [ip], #4
 800f2d0:	fa1e f381 	uxtah	r3, lr, r1
 800f2d4:	141a      	asrs	r2, r3, #16
 800f2d6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800f2da:	b29b      	uxth	r3, r3
 800f2dc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f2e0:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800f2e4:	f845 3b04 	str.w	r3, [r5], #4
 800f2e8:	e7e9      	b.n	800f2be <__mdiff+0x8a>
 800f2ea:	3e01      	subs	r6, #1
 800f2ec:	e7e9      	b.n	800f2c2 <__mdiff+0x8e>
	...

0800f2f0 <__ulp>:
 800f2f0:	4b12      	ldr	r3, [pc, #72]	; (800f33c <__ulp+0x4c>)
 800f2f2:	ee10 2a90 	vmov	r2, s1
 800f2f6:	401a      	ands	r2, r3
 800f2f8:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	dd04      	ble.n	800f30a <__ulp+0x1a>
 800f300:	2000      	movs	r0, #0
 800f302:	4619      	mov	r1, r3
 800f304:	ec41 0b10 	vmov	d0, r0, r1
 800f308:	4770      	bx	lr
 800f30a:	425b      	negs	r3, r3
 800f30c:	151b      	asrs	r3, r3, #20
 800f30e:	2b13      	cmp	r3, #19
 800f310:	f04f 0000 	mov.w	r0, #0
 800f314:	f04f 0100 	mov.w	r1, #0
 800f318:	dc04      	bgt.n	800f324 <__ulp+0x34>
 800f31a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800f31e:	fa42 f103 	asr.w	r1, r2, r3
 800f322:	e7ef      	b.n	800f304 <__ulp+0x14>
 800f324:	3b14      	subs	r3, #20
 800f326:	2b1e      	cmp	r3, #30
 800f328:	f04f 0201 	mov.w	r2, #1
 800f32c:	bfda      	itte	le
 800f32e:	f1c3 031f 	rsble	r3, r3, #31
 800f332:	fa02 f303 	lslle.w	r3, r2, r3
 800f336:	4613      	movgt	r3, r2
 800f338:	4618      	mov	r0, r3
 800f33a:	e7e3      	b.n	800f304 <__ulp+0x14>
 800f33c:	7ff00000 	.word	0x7ff00000

0800f340 <__b2d>:
 800f340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f342:	6905      	ldr	r5, [r0, #16]
 800f344:	f100 0714 	add.w	r7, r0, #20
 800f348:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800f34c:	1f2e      	subs	r6, r5, #4
 800f34e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800f352:	4620      	mov	r0, r4
 800f354:	f7ff fdd2 	bl	800eefc <__hi0bits>
 800f358:	f1c0 0320 	rsb	r3, r0, #32
 800f35c:	280a      	cmp	r0, #10
 800f35e:	600b      	str	r3, [r1, #0]
 800f360:	f8df c074 	ldr.w	ip, [pc, #116]	; 800f3d8 <__b2d+0x98>
 800f364:	dc14      	bgt.n	800f390 <__b2d+0x50>
 800f366:	f1c0 0e0b 	rsb	lr, r0, #11
 800f36a:	fa24 f10e 	lsr.w	r1, r4, lr
 800f36e:	42b7      	cmp	r7, r6
 800f370:	ea41 030c 	orr.w	r3, r1, ip
 800f374:	bf34      	ite	cc
 800f376:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800f37a:	2100      	movcs	r1, #0
 800f37c:	3015      	adds	r0, #21
 800f37e:	fa04 f000 	lsl.w	r0, r4, r0
 800f382:	fa21 f10e 	lsr.w	r1, r1, lr
 800f386:	ea40 0201 	orr.w	r2, r0, r1
 800f38a:	ec43 2b10 	vmov	d0, r2, r3
 800f38e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f390:	42b7      	cmp	r7, r6
 800f392:	bf3a      	itte	cc
 800f394:	f1a5 0608 	subcc.w	r6, r5, #8
 800f398:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800f39c:	2100      	movcs	r1, #0
 800f39e:	380b      	subs	r0, #11
 800f3a0:	d015      	beq.n	800f3ce <__b2d+0x8e>
 800f3a2:	4084      	lsls	r4, r0
 800f3a4:	f1c0 0520 	rsb	r5, r0, #32
 800f3a8:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800f3ac:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800f3b0:	42be      	cmp	r6, r7
 800f3b2:	fa21 fc05 	lsr.w	ip, r1, r5
 800f3b6:	ea44 030c 	orr.w	r3, r4, ip
 800f3ba:	bf8c      	ite	hi
 800f3bc:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800f3c0:	2400      	movls	r4, #0
 800f3c2:	fa01 f000 	lsl.w	r0, r1, r0
 800f3c6:	40ec      	lsrs	r4, r5
 800f3c8:	ea40 0204 	orr.w	r2, r0, r4
 800f3cc:	e7dd      	b.n	800f38a <__b2d+0x4a>
 800f3ce:	ea44 030c 	orr.w	r3, r4, ip
 800f3d2:	460a      	mov	r2, r1
 800f3d4:	e7d9      	b.n	800f38a <__b2d+0x4a>
 800f3d6:	bf00      	nop
 800f3d8:	3ff00000 	.word	0x3ff00000

0800f3dc <__d2b>:
 800f3dc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f3e0:	460e      	mov	r6, r1
 800f3e2:	2101      	movs	r1, #1
 800f3e4:	ec59 8b10 	vmov	r8, r9, d0
 800f3e8:	4615      	mov	r5, r2
 800f3ea:	f7ff fce0 	bl	800edae <_Balloc>
 800f3ee:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800f3f2:	4607      	mov	r7, r0
 800f3f4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f3f8:	bb34      	cbnz	r4, 800f448 <__d2b+0x6c>
 800f3fa:	9301      	str	r3, [sp, #4]
 800f3fc:	f1b8 0300 	subs.w	r3, r8, #0
 800f400:	d027      	beq.n	800f452 <__d2b+0x76>
 800f402:	a802      	add	r0, sp, #8
 800f404:	f840 3d08 	str.w	r3, [r0, #-8]!
 800f408:	f7ff fd97 	bl	800ef3a <__lo0bits>
 800f40c:	9900      	ldr	r1, [sp, #0]
 800f40e:	b1f0      	cbz	r0, 800f44e <__d2b+0x72>
 800f410:	9a01      	ldr	r2, [sp, #4]
 800f412:	f1c0 0320 	rsb	r3, r0, #32
 800f416:	fa02 f303 	lsl.w	r3, r2, r3
 800f41a:	430b      	orrs	r3, r1
 800f41c:	40c2      	lsrs	r2, r0
 800f41e:	617b      	str	r3, [r7, #20]
 800f420:	9201      	str	r2, [sp, #4]
 800f422:	9b01      	ldr	r3, [sp, #4]
 800f424:	61bb      	str	r3, [r7, #24]
 800f426:	2b00      	cmp	r3, #0
 800f428:	bf14      	ite	ne
 800f42a:	2102      	movne	r1, #2
 800f42c:	2101      	moveq	r1, #1
 800f42e:	6139      	str	r1, [r7, #16]
 800f430:	b1c4      	cbz	r4, 800f464 <__d2b+0x88>
 800f432:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800f436:	4404      	add	r4, r0
 800f438:	6034      	str	r4, [r6, #0]
 800f43a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f43e:	6028      	str	r0, [r5, #0]
 800f440:	4638      	mov	r0, r7
 800f442:	b003      	add	sp, #12
 800f444:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f448:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f44c:	e7d5      	b.n	800f3fa <__d2b+0x1e>
 800f44e:	6179      	str	r1, [r7, #20]
 800f450:	e7e7      	b.n	800f422 <__d2b+0x46>
 800f452:	a801      	add	r0, sp, #4
 800f454:	f7ff fd71 	bl	800ef3a <__lo0bits>
 800f458:	9b01      	ldr	r3, [sp, #4]
 800f45a:	617b      	str	r3, [r7, #20]
 800f45c:	2101      	movs	r1, #1
 800f45e:	6139      	str	r1, [r7, #16]
 800f460:	3020      	adds	r0, #32
 800f462:	e7e5      	b.n	800f430 <__d2b+0x54>
 800f464:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800f468:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f46c:	6030      	str	r0, [r6, #0]
 800f46e:	6918      	ldr	r0, [r3, #16]
 800f470:	f7ff fd44 	bl	800eefc <__hi0bits>
 800f474:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800f478:	e7e1      	b.n	800f43e <__d2b+0x62>

0800f47a <__ratio>:
 800f47a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f47e:	4688      	mov	r8, r1
 800f480:	4669      	mov	r1, sp
 800f482:	4681      	mov	r9, r0
 800f484:	f7ff ff5c 	bl	800f340 <__b2d>
 800f488:	a901      	add	r1, sp, #4
 800f48a:	4640      	mov	r0, r8
 800f48c:	ec57 6b10 	vmov	r6, r7, d0
 800f490:	f7ff ff56 	bl	800f340 <__b2d>
 800f494:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f498:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800f49c:	eba3 0c02 	sub.w	ip, r3, r2
 800f4a0:	e9dd 3200 	ldrd	r3, r2, [sp]
 800f4a4:	1a9b      	subs	r3, r3, r2
 800f4a6:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800f4aa:	ec5b ab10 	vmov	sl, fp, d0
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	bfce      	itee	gt
 800f4b2:	463a      	movgt	r2, r7
 800f4b4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800f4b8:	465a      	movle	r2, fp
 800f4ba:	4659      	mov	r1, fp
 800f4bc:	463d      	mov	r5, r7
 800f4be:	bfd4      	ite	le
 800f4c0:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800f4c4:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 800f4c8:	4630      	mov	r0, r6
 800f4ca:	ee10 2a10 	vmov	r2, s0
 800f4ce:	460b      	mov	r3, r1
 800f4d0:	4629      	mov	r1, r5
 800f4d2:	f7f1 f9cb 	bl	800086c <__aeabi_ddiv>
 800f4d6:	ec41 0b10 	vmov	d0, r0, r1
 800f4da:	b003      	add	sp, #12
 800f4dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f4e0 <_mprec_log10>:
 800f4e0:	2817      	cmp	r0, #23
 800f4e2:	b5d0      	push	{r4, r6, r7, lr}
 800f4e4:	4604      	mov	r4, r0
 800f4e6:	dc07      	bgt.n	800f4f8 <_mprec_log10+0x18>
 800f4e8:	4b09      	ldr	r3, [pc, #36]	; (800f510 <_mprec_log10+0x30>)
 800f4ea:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
 800f4ee:	e9d4 0100 	ldrd	r0, r1, [r4]
 800f4f2:	ec41 0b10 	vmov	d0, r0, r1
 800f4f6:	bdd0      	pop	{r4, r6, r7, pc}
 800f4f8:	4906      	ldr	r1, [pc, #24]	; (800f514 <_mprec_log10+0x34>)
 800f4fa:	4f07      	ldr	r7, [pc, #28]	; (800f518 <_mprec_log10+0x38>)
 800f4fc:	2000      	movs	r0, #0
 800f4fe:	2600      	movs	r6, #0
 800f500:	4632      	mov	r2, r6
 800f502:	463b      	mov	r3, r7
 800f504:	f7f1 f888 	bl	8000618 <__aeabi_dmul>
 800f508:	3c01      	subs	r4, #1
 800f50a:	d1f9      	bne.n	800f500 <_mprec_log10+0x20>
 800f50c:	e7f1      	b.n	800f4f2 <_mprec_log10+0x12>
 800f50e:	bf00      	nop
 800f510:	080103c8 	.word	0x080103c8
 800f514:	3ff00000 	.word	0x3ff00000
 800f518:	40240000 	.word	0x40240000

0800f51c <__copybits>:
 800f51c:	3901      	subs	r1, #1
 800f51e:	b510      	push	{r4, lr}
 800f520:	1149      	asrs	r1, r1, #5
 800f522:	6914      	ldr	r4, [r2, #16]
 800f524:	3101      	adds	r1, #1
 800f526:	f102 0314 	add.w	r3, r2, #20
 800f52a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800f52e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800f532:	42a3      	cmp	r3, r4
 800f534:	4602      	mov	r2, r0
 800f536:	d303      	bcc.n	800f540 <__copybits+0x24>
 800f538:	2300      	movs	r3, #0
 800f53a:	428a      	cmp	r2, r1
 800f53c:	d305      	bcc.n	800f54a <__copybits+0x2e>
 800f53e:	bd10      	pop	{r4, pc}
 800f540:	f853 2b04 	ldr.w	r2, [r3], #4
 800f544:	f840 2b04 	str.w	r2, [r0], #4
 800f548:	e7f3      	b.n	800f532 <__copybits+0x16>
 800f54a:	f842 3b04 	str.w	r3, [r2], #4
 800f54e:	e7f4      	b.n	800f53a <__copybits+0x1e>

0800f550 <__any_on>:
 800f550:	f100 0214 	add.w	r2, r0, #20
 800f554:	6900      	ldr	r0, [r0, #16]
 800f556:	114b      	asrs	r3, r1, #5
 800f558:	4298      	cmp	r0, r3
 800f55a:	b510      	push	{r4, lr}
 800f55c:	db11      	blt.n	800f582 <__any_on+0x32>
 800f55e:	dd0a      	ble.n	800f576 <__any_on+0x26>
 800f560:	f011 011f 	ands.w	r1, r1, #31
 800f564:	d007      	beq.n	800f576 <__any_on+0x26>
 800f566:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800f56a:	fa24 f001 	lsr.w	r0, r4, r1
 800f56e:	fa00 f101 	lsl.w	r1, r0, r1
 800f572:	428c      	cmp	r4, r1
 800f574:	d10b      	bne.n	800f58e <__any_on+0x3e>
 800f576:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f57a:	4293      	cmp	r3, r2
 800f57c:	d803      	bhi.n	800f586 <__any_on+0x36>
 800f57e:	2000      	movs	r0, #0
 800f580:	bd10      	pop	{r4, pc}
 800f582:	4603      	mov	r3, r0
 800f584:	e7f7      	b.n	800f576 <__any_on+0x26>
 800f586:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f58a:	2900      	cmp	r1, #0
 800f58c:	d0f5      	beq.n	800f57a <__any_on+0x2a>
 800f58e:	2001      	movs	r0, #1
 800f590:	e7f6      	b.n	800f580 <__any_on+0x30>
	...

0800f594 <_realloc_r>:
 800f594:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f598:	4682      	mov	sl, r0
 800f59a:	460c      	mov	r4, r1
 800f59c:	b929      	cbnz	r1, 800f5aa <_realloc_r+0x16>
 800f59e:	4611      	mov	r1, r2
 800f5a0:	b003      	add	sp, #12
 800f5a2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5a6:	f7fb bd0b 	b.w	800afc0 <_malloc_r>
 800f5aa:	9201      	str	r2, [sp, #4]
 800f5ac:	f7fb ff46 	bl	800b43c <__malloc_lock>
 800f5b0:	9a01      	ldr	r2, [sp, #4]
 800f5b2:	f854 5c04 	ldr.w	r5, [r4, #-4]
 800f5b6:	f102 080b 	add.w	r8, r2, #11
 800f5ba:	f1b8 0f16 	cmp.w	r8, #22
 800f5be:	f1a4 0908 	sub.w	r9, r4, #8
 800f5c2:	f025 0603 	bic.w	r6, r5, #3
 800f5c6:	d90b      	bls.n	800f5e0 <_realloc_r+0x4c>
 800f5c8:	f038 0807 	bics.w	r8, r8, #7
 800f5cc:	d50a      	bpl.n	800f5e4 <_realloc_r+0x50>
 800f5ce:	230c      	movs	r3, #12
 800f5d0:	f8ca 3000 	str.w	r3, [sl]
 800f5d4:	f04f 0b00 	mov.w	fp, #0
 800f5d8:	4658      	mov	r0, fp
 800f5da:	b003      	add	sp, #12
 800f5dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5e0:	f04f 0810 	mov.w	r8, #16
 800f5e4:	4590      	cmp	r8, r2
 800f5e6:	d3f2      	bcc.n	800f5ce <_realloc_r+0x3a>
 800f5e8:	45b0      	cmp	r8, r6
 800f5ea:	f340 8170 	ble.w	800f8ce <_realloc_r+0x33a>
 800f5ee:	49a9      	ldr	r1, [pc, #676]	; (800f894 <_realloc_r+0x300>)
 800f5f0:	9101      	str	r1, [sp, #4]
 800f5f2:	f8d1 c008 	ldr.w	ip, [r1, #8]
 800f5f6:	eb09 0306 	add.w	r3, r9, r6
 800f5fa:	459c      	cmp	ip, r3
 800f5fc:	6858      	ldr	r0, [r3, #4]
 800f5fe:	d005      	beq.n	800f60c <_realloc_r+0x78>
 800f600:	f020 0101 	bic.w	r1, r0, #1
 800f604:	4419      	add	r1, r3
 800f606:	6849      	ldr	r1, [r1, #4]
 800f608:	07cf      	lsls	r7, r1, #31
 800f60a:	d447      	bmi.n	800f69c <_realloc_r+0x108>
 800f60c:	f020 0003 	bic.w	r0, r0, #3
 800f610:	459c      	cmp	ip, r3
 800f612:	eb06 0700 	add.w	r7, r6, r0
 800f616:	d119      	bne.n	800f64c <_realloc_r+0xb8>
 800f618:	f108 0110 	add.w	r1, r8, #16
 800f61c:	42b9      	cmp	r1, r7
 800f61e:	dc3f      	bgt.n	800f6a0 <_realloc_r+0x10c>
 800f620:	eb09 0308 	add.w	r3, r9, r8
 800f624:	9a01      	ldr	r2, [sp, #4]
 800f626:	eba7 0708 	sub.w	r7, r7, r8
 800f62a:	f047 0701 	orr.w	r7, r7, #1
 800f62e:	6093      	str	r3, [r2, #8]
 800f630:	605f      	str	r7, [r3, #4]
 800f632:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800f636:	f003 0301 	and.w	r3, r3, #1
 800f63a:	ea43 0308 	orr.w	r3, r3, r8
 800f63e:	f844 3c04 	str.w	r3, [r4, #-4]
 800f642:	4650      	mov	r0, sl
 800f644:	f7fb ff00 	bl	800b448 <__malloc_unlock>
 800f648:	46a3      	mov	fp, r4
 800f64a:	e7c5      	b.n	800f5d8 <_realloc_r+0x44>
 800f64c:	45b8      	cmp	r8, r7
 800f64e:	dc27      	bgt.n	800f6a0 <_realloc_r+0x10c>
 800f650:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 800f654:	60da      	str	r2, [r3, #12]
 800f656:	6093      	str	r3, [r2, #8]
 800f658:	eba7 0008 	sub.w	r0, r7, r8
 800f65c:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800f660:	280f      	cmp	r0, #15
 800f662:	f002 0201 	and.w	r2, r2, #1
 800f666:	eb09 0307 	add.w	r3, r9, r7
 800f66a:	f240 8132 	bls.w	800f8d2 <_realloc_r+0x33e>
 800f66e:	eb09 0108 	add.w	r1, r9, r8
 800f672:	ea48 0202 	orr.w	r2, r8, r2
 800f676:	f040 0001 	orr.w	r0, r0, #1
 800f67a:	f8c9 2004 	str.w	r2, [r9, #4]
 800f67e:	6048      	str	r0, [r1, #4]
 800f680:	685a      	ldr	r2, [r3, #4]
 800f682:	f042 0201 	orr.w	r2, r2, #1
 800f686:	605a      	str	r2, [r3, #4]
 800f688:	3108      	adds	r1, #8
 800f68a:	4650      	mov	r0, sl
 800f68c:	f7fe ff7e 	bl	800e58c <_free_r>
 800f690:	4650      	mov	r0, sl
 800f692:	f7fb fed9 	bl	800b448 <__malloc_unlock>
 800f696:	f109 0b08 	add.w	fp, r9, #8
 800f69a:	e79d      	b.n	800f5d8 <_realloc_r+0x44>
 800f69c:	2000      	movs	r0, #0
 800f69e:	4603      	mov	r3, r0
 800f6a0:	07e9      	lsls	r1, r5, #31
 800f6a2:	f100 80c6 	bmi.w	800f832 <_realloc_r+0x29e>
 800f6a6:	f854 5c08 	ldr.w	r5, [r4, #-8]
 800f6aa:	eba9 0505 	sub.w	r5, r9, r5
 800f6ae:	6869      	ldr	r1, [r5, #4]
 800f6b0:	f021 0103 	bic.w	r1, r1, #3
 800f6b4:	eb01 0b06 	add.w	fp, r1, r6
 800f6b8:	2b00      	cmp	r3, #0
 800f6ba:	f000 8086 	beq.w	800f7ca <_realloc_r+0x236>
 800f6be:	459c      	cmp	ip, r3
 800f6c0:	eb00 070b 	add.w	r7, r0, fp
 800f6c4:	d149      	bne.n	800f75a <_realloc_r+0x1c6>
 800f6c6:	f108 0310 	add.w	r3, r8, #16
 800f6ca:	42bb      	cmp	r3, r7
 800f6cc:	dc7d      	bgt.n	800f7ca <_realloc_r+0x236>
 800f6ce:	46ab      	mov	fp, r5
 800f6d0:	68eb      	ldr	r3, [r5, #12]
 800f6d2:	f85b 2f08 	ldr.w	r2, [fp, #8]!
 800f6d6:	60d3      	str	r3, [r2, #12]
 800f6d8:	609a      	str	r2, [r3, #8]
 800f6da:	1f32      	subs	r2, r6, #4
 800f6dc:	2a24      	cmp	r2, #36	; 0x24
 800f6de:	d837      	bhi.n	800f750 <_realloc_r+0x1bc>
 800f6e0:	2a13      	cmp	r2, #19
 800f6e2:	d933      	bls.n	800f74c <_realloc_r+0x1b8>
 800f6e4:	6823      	ldr	r3, [r4, #0]
 800f6e6:	60ab      	str	r3, [r5, #8]
 800f6e8:	6863      	ldr	r3, [r4, #4]
 800f6ea:	60eb      	str	r3, [r5, #12]
 800f6ec:	2a1b      	cmp	r2, #27
 800f6ee:	d81b      	bhi.n	800f728 <_realloc_r+0x194>
 800f6f0:	3408      	adds	r4, #8
 800f6f2:	f105 0310 	add.w	r3, r5, #16
 800f6f6:	6822      	ldr	r2, [r4, #0]
 800f6f8:	601a      	str	r2, [r3, #0]
 800f6fa:	6862      	ldr	r2, [r4, #4]
 800f6fc:	605a      	str	r2, [r3, #4]
 800f6fe:	68a2      	ldr	r2, [r4, #8]
 800f700:	609a      	str	r2, [r3, #8]
 800f702:	eb05 0308 	add.w	r3, r5, r8
 800f706:	9a01      	ldr	r2, [sp, #4]
 800f708:	eba7 0708 	sub.w	r7, r7, r8
 800f70c:	f047 0701 	orr.w	r7, r7, #1
 800f710:	6093      	str	r3, [r2, #8]
 800f712:	605f      	str	r7, [r3, #4]
 800f714:	686b      	ldr	r3, [r5, #4]
 800f716:	f003 0301 	and.w	r3, r3, #1
 800f71a:	ea43 0308 	orr.w	r3, r3, r8
 800f71e:	606b      	str	r3, [r5, #4]
 800f720:	4650      	mov	r0, sl
 800f722:	f7fb fe91 	bl	800b448 <__malloc_unlock>
 800f726:	e757      	b.n	800f5d8 <_realloc_r+0x44>
 800f728:	68a3      	ldr	r3, [r4, #8]
 800f72a:	612b      	str	r3, [r5, #16]
 800f72c:	68e3      	ldr	r3, [r4, #12]
 800f72e:	616b      	str	r3, [r5, #20]
 800f730:	2a24      	cmp	r2, #36	; 0x24
 800f732:	bf01      	itttt	eq
 800f734:	6923      	ldreq	r3, [r4, #16]
 800f736:	61ab      	streq	r3, [r5, #24]
 800f738:	6962      	ldreq	r2, [r4, #20]
 800f73a:	61ea      	streq	r2, [r5, #28]
 800f73c:	bf19      	ittee	ne
 800f73e:	3410      	addne	r4, #16
 800f740:	f105 0318 	addne.w	r3, r5, #24
 800f744:	f105 0320 	addeq.w	r3, r5, #32
 800f748:	3418      	addeq	r4, #24
 800f74a:	e7d4      	b.n	800f6f6 <_realloc_r+0x162>
 800f74c:	465b      	mov	r3, fp
 800f74e:	e7d2      	b.n	800f6f6 <_realloc_r+0x162>
 800f750:	4621      	mov	r1, r4
 800f752:	4658      	mov	r0, fp
 800f754:	f000 fa17 	bl	800fb86 <memmove>
 800f758:	e7d3      	b.n	800f702 <_realloc_r+0x16e>
 800f75a:	45b8      	cmp	r8, r7
 800f75c:	dc35      	bgt.n	800f7ca <_realloc_r+0x236>
 800f75e:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 800f762:	4628      	mov	r0, r5
 800f764:	60da      	str	r2, [r3, #12]
 800f766:	6093      	str	r3, [r2, #8]
 800f768:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800f76c:	68eb      	ldr	r3, [r5, #12]
 800f76e:	60d3      	str	r3, [r2, #12]
 800f770:	609a      	str	r2, [r3, #8]
 800f772:	1f32      	subs	r2, r6, #4
 800f774:	2a24      	cmp	r2, #36	; 0x24
 800f776:	d824      	bhi.n	800f7c2 <_realloc_r+0x22e>
 800f778:	2a13      	cmp	r2, #19
 800f77a:	d908      	bls.n	800f78e <_realloc_r+0x1fa>
 800f77c:	6823      	ldr	r3, [r4, #0]
 800f77e:	60ab      	str	r3, [r5, #8]
 800f780:	6863      	ldr	r3, [r4, #4]
 800f782:	60eb      	str	r3, [r5, #12]
 800f784:	2a1b      	cmp	r2, #27
 800f786:	d80a      	bhi.n	800f79e <_realloc_r+0x20a>
 800f788:	3408      	adds	r4, #8
 800f78a:	f105 0010 	add.w	r0, r5, #16
 800f78e:	6823      	ldr	r3, [r4, #0]
 800f790:	6003      	str	r3, [r0, #0]
 800f792:	6863      	ldr	r3, [r4, #4]
 800f794:	6043      	str	r3, [r0, #4]
 800f796:	68a3      	ldr	r3, [r4, #8]
 800f798:	6083      	str	r3, [r0, #8]
 800f79a:	46a9      	mov	r9, r5
 800f79c:	e75c      	b.n	800f658 <_realloc_r+0xc4>
 800f79e:	68a3      	ldr	r3, [r4, #8]
 800f7a0:	612b      	str	r3, [r5, #16]
 800f7a2:	68e3      	ldr	r3, [r4, #12]
 800f7a4:	616b      	str	r3, [r5, #20]
 800f7a6:	2a24      	cmp	r2, #36	; 0x24
 800f7a8:	bf01      	itttt	eq
 800f7aa:	6923      	ldreq	r3, [r4, #16]
 800f7ac:	61ab      	streq	r3, [r5, #24]
 800f7ae:	6963      	ldreq	r3, [r4, #20]
 800f7b0:	61eb      	streq	r3, [r5, #28]
 800f7b2:	bf19      	ittee	ne
 800f7b4:	3410      	addne	r4, #16
 800f7b6:	f105 0018 	addne.w	r0, r5, #24
 800f7ba:	f105 0020 	addeq.w	r0, r5, #32
 800f7be:	3418      	addeq	r4, #24
 800f7c0:	e7e5      	b.n	800f78e <_realloc_r+0x1fa>
 800f7c2:	4621      	mov	r1, r4
 800f7c4:	f000 f9df 	bl	800fb86 <memmove>
 800f7c8:	e7e7      	b.n	800f79a <_realloc_r+0x206>
 800f7ca:	45d8      	cmp	r8, fp
 800f7cc:	dc31      	bgt.n	800f832 <_realloc_r+0x29e>
 800f7ce:	4628      	mov	r0, r5
 800f7d0:	68eb      	ldr	r3, [r5, #12]
 800f7d2:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800f7d6:	60d3      	str	r3, [r2, #12]
 800f7d8:	609a      	str	r2, [r3, #8]
 800f7da:	1f32      	subs	r2, r6, #4
 800f7dc:	2a24      	cmp	r2, #36	; 0x24
 800f7de:	d824      	bhi.n	800f82a <_realloc_r+0x296>
 800f7e0:	2a13      	cmp	r2, #19
 800f7e2:	d908      	bls.n	800f7f6 <_realloc_r+0x262>
 800f7e4:	6823      	ldr	r3, [r4, #0]
 800f7e6:	60ab      	str	r3, [r5, #8]
 800f7e8:	6863      	ldr	r3, [r4, #4]
 800f7ea:	60eb      	str	r3, [r5, #12]
 800f7ec:	2a1b      	cmp	r2, #27
 800f7ee:	d80a      	bhi.n	800f806 <_realloc_r+0x272>
 800f7f0:	3408      	adds	r4, #8
 800f7f2:	f105 0010 	add.w	r0, r5, #16
 800f7f6:	6823      	ldr	r3, [r4, #0]
 800f7f8:	6003      	str	r3, [r0, #0]
 800f7fa:	6863      	ldr	r3, [r4, #4]
 800f7fc:	6043      	str	r3, [r0, #4]
 800f7fe:	68a3      	ldr	r3, [r4, #8]
 800f800:	6083      	str	r3, [r0, #8]
 800f802:	465f      	mov	r7, fp
 800f804:	e7c9      	b.n	800f79a <_realloc_r+0x206>
 800f806:	68a3      	ldr	r3, [r4, #8]
 800f808:	612b      	str	r3, [r5, #16]
 800f80a:	68e3      	ldr	r3, [r4, #12]
 800f80c:	616b      	str	r3, [r5, #20]
 800f80e:	2a24      	cmp	r2, #36	; 0x24
 800f810:	bf01      	itttt	eq
 800f812:	6923      	ldreq	r3, [r4, #16]
 800f814:	61ab      	streq	r3, [r5, #24]
 800f816:	6963      	ldreq	r3, [r4, #20]
 800f818:	61eb      	streq	r3, [r5, #28]
 800f81a:	bf19      	ittee	ne
 800f81c:	3410      	addne	r4, #16
 800f81e:	f105 0018 	addne.w	r0, r5, #24
 800f822:	f105 0020 	addeq.w	r0, r5, #32
 800f826:	3418      	addeq	r4, #24
 800f828:	e7e5      	b.n	800f7f6 <_realloc_r+0x262>
 800f82a:	4621      	mov	r1, r4
 800f82c:	f000 f9ab 	bl	800fb86 <memmove>
 800f830:	e7e7      	b.n	800f802 <_realloc_r+0x26e>
 800f832:	4611      	mov	r1, r2
 800f834:	4650      	mov	r0, sl
 800f836:	f7fb fbc3 	bl	800afc0 <_malloc_r>
 800f83a:	4683      	mov	fp, r0
 800f83c:	2800      	cmp	r0, #0
 800f83e:	f43f af6f 	beq.w	800f720 <_realloc_r+0x18c>
 800f842:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800f846:	f023 0301 	bic.w	r3, r3, #1
 800f84a:	444b      	add	r3, r9
 800f84c:	f1a0 0208 	sub.w	r2, r0, #8
 800f850:	4293      	cmp	r3, r2
 800f852:	d105      	bne.n	800f860 <_realloc_r+0x2cc>
 800f854:	f850 7c04 	ldr.w	r7, [r0, #-4]
 800f858:	f027 0703 	bic.w	r7, r7, #3
 800f85c:	4437      	add	r7, r6
 800f85e:	e6fb      	b.n	800f658 <_realloc_r+0xc4>
 800f860:	1f32      	subs	r2, r6, #4
 800f862:	2a24      	cmp	r2, #36	; 0x24
 800f864:	d82f      	bhi.n	800f8c6 <_realloc_r+0x332>
 800f866:	2a13      	cmp	r2, #19
 800f868:	d92a      	bls.n	800f8c0 <_realloc_r+0x32c>
 800f86a:	6823      	ldr	r3, [r4, #0]
 800f86c:	6003      	str	r3, [r0, #0]
 800f86e:	6863      	ldr	r3, [r4, #4]
 800f870:	6043      	str	r3, [r0, #4]
 800f872:	2a1b      	cmp	r2, #27
 800f874:	d810      	bhi.n	800f898 <_realloc_r+0x304>
 800f876:	f104 0208 	add.w	r2, r4, #8
 800f87a:	f100 0308 	add.w	r3, r0, #8
 800f87e:	6811      	ldr	r1, [r2, #0]
 800f880:	6019      	str	r1, [r3, #0]
 800f882:	6851      	ldr	r1, [r2, #4]
 800f884:	6059      	str	r1, [r3, #4]
 800f886:	6892      	ldr	r2, [r2, #8]
 800f888:	609a      	str	r2, [r3, #8]
 800f88a:	4621      	mov	r1, r4
 800f88c:	4650      	mov	r0, sl
 800f88e:	f7fe fe7d 	bl	800e58c <_free_r>
 800f892:	e745      	b.n	800f720 <_realloc_r+0x18c>
 800f894:	20000520 	.word	0x20000520
 800f898:	68a3      	ldr	r3, [r4, #8]
 800f89a:	6083      	str	r3, [r0, #8]
 800f89c:	68e3      	ldr	r3, [r4, #12]
 800f89e:	60c3      	str	r3, [r0, #12]
 800f8a0:	2a24      	cmp	r2, #36	; 0x24
 800f8a2:	bf01      	itttt	eq
 800f8a4:	6923      	ldreq	r3, [r4, #16]
 800f8a6:	6103      	streq	r3, [r0, #16]
 800f8a8:	6961      	ldreq	r1, [r4, #20]
 800f8aa:	6141      	streq	r1, [r0, #20]
 800f8ac:	bf19      	ittee	ne
 800f8ae:	f104 0210 	addne.w	r2, r4, #16
 800f8b2:	f100 0310 	addne.w	r3, r0, #16
 800f8b6:	f104 0218 	addeq.w	r2, r4, #24
 800f8ba:	f100 0318 	addeq.w	r3, r0, #24
 800f8be:	e7de      	b.n	800f87e <_realloc_r+0x2ea>
 800f8c0:	4603      	mov	r3, r0
 800f8c2:	4622      	mov	r2, r4
 800f8c4:	e7db      	b.n	800f87e <_realloc_r+0x2ea>
 800f8c6:	4621      	mov	r1, r4
 800f8c8:	f000 f95d 	bl	800fb86 <memmove>
 800f8cc:	e7dd      	b.n	800f88a <_realloc_r+0x2f6>
 800f8ce:	4637      	mov	r7, r6
 800f8d0:	e6c2      	b.n	800f658 <_realloc_r+0xc4>
 800f8d2:	4317      	orrs	r7, r2
 800f8d4:	f8c9 7004 	str.w	r7, [r9, #4]
 800f8d8:	685a      	ldr	r2, [r3, #4]
 800f8da:	f042 0201 	orr.w	r2, r2, #1
 800f8de:	605a      	str	r2, [r3, #4]
 800f8e0:	e6d6      	b.n	800f690 <_realloc_r+0xfc>
 800f8e2:	bf00      	nop

0800f8e4 <frexp>:
 800f8e4:	b570      	push	{r4, r5, r6, lr}
 800f8e6:	2100      	movs	r1, #0
 800f8e8:	ec55 4b10 	vmov	r4, r5, d0
 800f8ec:	6001      	str	r1, [r0, #0]
 800f8ee:	4916      	ldr	r1, [pc, #88]	; (800f948 <frexp+0x64>)
 800f8f0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800f8f4:	428b      	cmp	r3, r1
 800f8f6:	4606      	mov	r6, r0
 800f8f8:	462a      	mov	r2, r5
 800f8fa:	dc22      	bgt.n	800f942 <frexp+0x5e>
 800f8fc:	ee10 1a10 	vmov	r1, s0
 800f900:	4319      	orrs	r1, r3
 800f902:	d01e      	beq.n	800f942 <frexp+0x5e>
 800f904:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f908:	da0d      	bge.n	800f926 <frexp+0x42>
 800f90a:	2200      	movs	r2, #0
 800f90c:	4b0f      	ldr	r3, [pc, #60]	; (800f94c <frexp+0x68>)
 800f90e:	ee10 0a10 	vmov	r0, s0
 800f912:	4629      	mov	r1, r5
 800f914:	f7f0 fe80 	bl	8000618 <__aeabi_dmul>
 800f918:	460a      	mov	r2, r1
 800f91a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f91e:	f06f 0135 	mvn.w	r1, #53	; 0x35
 800f922:	4604      	mov	r4, r0
 800f924:	6031      	str	r1, [r6, #0]
 800f926:	6831      	ldr	r1, [r6, #0]
 800f928:	151b      	asrs	r3, r3, #20
 800f92a:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800f92e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800f932:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 800f936:	440b      	add	r3, r1
 800f938:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800f93c:	6033      	str	r3, [r6, #0]
 800f93e:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 800f942:	ec45 4b10 	vmov	d0, r4, r5
 800f946:	bd70      	pop	{r4, r5, r6, pc}
 800f948:	7fefffff 	.word	0x7fefffff
 800f94c:	43500000 	.word	0x43500000

0800f950 <strncmp>:
 800f950:	b510      	push	{r4, lr}
 800f952:	b16a      	cbz	r2, 800f970 <strncmp+0x20>
 800f954:	3901      	subs	r1, #1
 800f956:	1884      	adds	r4, r0, r2
 800f958:	f810 3b01 	ldrb.w	r3, [r0], #1
 800f95c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800f960:	4293      	cmp	r3, r2
 800f962:	d103      	bne.n	800f96c <strncmp+0x1c>
 800f964:	42a0      	cmp	r0, r4
 800f966:	d001      	beq.n	800f96c <strncmp+0x1c>
 800f968:	2b00      	cmp	r3, #0
 800f96a:	d1f5      	bne.n	800f958 <strncmp+0x8>
 800f96c:	1a98      	subs	r0, r3, r2
 800f96e:	bd10      	pop	{r4, pc}
 800f970:	4610      	mov	r0, r2
 800f972:	e7fc      	b.n	800f96e <strncmp+0x1e>

0800f974 <__ssprint_r>:
 800f974:	6893      	ldr	r3, [r2, #8]
 800f976:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f97a:	4681      	mov	r9, r0
 800f97c:	460c      	mov	r4, r1
 800f97e:	4616      	mov	r6, r2
 800f980:	2b00      	cmp	r3, #0
 800f982:	d05e      	beq.n	800fa42 <__ssprint_r+0xce>
 800f984:	f04f 0b00 	mov.w	fp, #0
 800f988:	f8d2 a000 	ldr.w	sl, [r2]
 800f98c:	465f      	mov	r7, fp
 800f98e:	b357      	cbz	r7, 800f9e6 <__ssprint_r+0x72>
 800f990:	68a3      	ldr	r3, [r4, #8]
 800f992:	429f      	cmp	r7, r3
 800f994:	d340      	bcc.n	800fa18 <__ssprint_r+0xa4>
 800f996:	89a2      	ldrh	r2, [r4, #12]
 800f998:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f99c:	d03c      	beq.n	800fa18 <__ssprint_r+0xa4>
 800f99e:	6825      	ldr	r5, [r4, #0]
 800f9a0:	6921      	ldr	r1, [r4, #16]
 800f9a2:	eba5 0801 	sub.w	r8, r5, r1
 800f9a6:	6965      	ldr	r5, [r4, #20]
 800f9a8:	2302      	movs	r3, #2
 800f9aa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f9ae:	fb95 f5f3 	sdiv	r5, r5, r3
 800f9b2:	f108 0301 	add.w	r3, r8, #1
 800f9b6:	443b      	add	r3, r7
 800f9b8:	429d      	cmp	r5, r3
 800f9ba:	bf38      	it	cc
 800f9bc:	461d      	movcc	r5, r3
 800f9be:	0553      	lsls	r3, r2, #21
 800f9c0:	d544      	bpl.n	800fa4c <__ssprint_r+0xd8>
 800f9c2:	4629      	mov	r1, r5
 800f9c4:	4648      	mov	r0, r9
 800f9c6:	f7fb fafb 	bl	800afc0 <_malloc_r>
 800f9ca:	b988      	cbnz	r0, 800f9f0 <__ssprint_r+0x7c>
 800f9cc:	230c      	movs	r3, #12
 800f9ce:	f8c9 3000 	str.w	r3, [r9]
 800f9d2:	89a3      	ldrh	r3, [r4, #12]
 800f9d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f9d8:	81a3      	strh	r3, [r4, #12]
 800f9da:	2300      	movs	r3, #0
 800f9dc:	e9c6 3301 	strd	r3, r3, [r6, #4]
 800f9e0:	f04f 30ff 	mov.w	r0, #4294967295
 800f9e4:	e02f      	b.n	800fa46 <__ssprint_r+0xd2>
 800f9e6:	e9da b700 	ldrd	fp, r7, [sl]
 800f9ea:	f10a 0a08 	add.w	sl, sl, #8
 800f9ee:	e7ce      	b.n	800f98e <__ssprint_r+0x1a>
 800f9f0:	4642      	mov	r2, r8
 800f9f2:	6921      	ldr	r1, [r4, #16]
 800f9f4:	9001      	str	r0, [sp, #4]
 800f9f6:	f7ff f9cf 	bl	800ed98 <memcpy>
 800f9fa:	89a2      	ldrh	r2, [r4, #12]
 800f9fc:	9b01      	ldr	r3, [sp, #4]
 800f9fe:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800fa02:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800fa06:	81a2      	strh	r2, [r4, #12]
 800fa08:	6123      	str	r3, [r4, #16]
 800fa0a:	6165      	str	r5, [r4, #20]
 800fa0c:	4443      	add	r3, r8
 800fa0e:	eba5 0508 	sub.w	r5, r5, r8
 800fa12:	6023      	str	r3, [r4, #0]
 800fa14:	60a5      	str	r5, [r4, #8]
 800fa16:	463b      	mov	r3, r7
 800fa18:	42bb      	cmp	r3, r7
 800fa1a:	bf28      	it	cs
 800fa1c:	463b      	movcs	r3, r7
 800fa1e:	461a      	mov	r2, r3
 800fa20:	4659      	mov	r1, fp
 800fa22:	6820      	ldr	r0, [r4, #0]
 800fa24:	9301      	str	r3, [sp, #4]
 800fa26:	f000 f8ae 	bl	800fb86 <memmove>
 800fa2a:	68a2      	ldr	r2, [r4, #8]
 800fa2c:	9b01      	ldr	r3, [sp, #4]
 800fa2e:	1ad2      	subs	r2, r2, r3
 800fa30:	60a2      	str	r2, [r4, #8]
 800fa32:	6822      	ldr	r2, [r4, #0]
 800fa34:	4413      	add	r3, r2
 800fa36:	6023      	str	r3, [r4, #0]
 800fa38:	68b3      	ldr	r3, [r6, #8]
 800fa3a:	1bdf      	subs	r7, r3, r7
 800fa3c:	60b7      	str	r7, [r6, #8]
 800fa3e:	2f00      	cmp	r7, #0
 800fa40:	d1d1      	bne.n	800f9e6 <__ssprint_r+0x72>
 800fa42:	2000      	movs	r0, #0
 800fa44:	6070      	str	r0, [r6, #4]
 800fa46:	b003      	add	sp, #12
 800fa48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa4c:	462a      	mov	r2, r5
 800fa4e:	4648      	mov	r0, r9
 800fa50:	f7ff fda0 	bl	800f594 <_realloc_r>
 800fa54:	4603      	mov	r3, r0
 800fa56:	2800      	cmp	r0, #0
 800fa58:	d1d6      	bne.n	800fa08 <__ssprint_r+0x94>
 800fa5a:	6921      	ldr	r1, [r4, #16]
 800fa5c:	4648      	mov	r0, r9
 800fa5e:	f7fe fd95 	bl	800e58c <_free_r>
 800fa62:	e7b3      	b.n	800f9cc <__ssprint_r+0x58>

0800fa64 <__ascii_wctomb>:
 800fa64:	b149      	cbz	r1, 800fa7a <__ascii_wctomb+0x16>
 800fa66:	2aff      	cmp	r2, #255	; 0xff
 800fa68:	bf85      	ittet	hi
 800fa6a:	238a      	movhi	r3, #138	; 0x8a
 800fa6c:	6003      	strhi	r3, [r0, #0]
 800fa6e:	700a      	strbls	r2, [r1, #0]
 800fa70:	f04f 30ff 	movhi.w	r0, #4294967295
 800fa74:	bf98      	it	ls
 800fa76:	2001      	movls	r0, #1
 800fa78:	4770      	bx	lr
 800fa7a:	4608      	mov	r0, r1
 800fa7c:	4770      	bx	lr
	...

0800fa80 <__register_exitproc>:
 800fa80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fa84:	4c26      	ldr	r4, [pc, #152]	; (800fb20 <__register_exitproc+0xa0>)
 800fa86:	4606      	mov	r6, r0
 800fa88:	6820      	ldr	r0, [r4, #0]
 800fa8a:	4698      	mov	r8, r3
 800fa8c:	460f      	mov	r7, r1
 800fa8e:	4691      	mov	r9, r2
 800fa90:	f7ff f96e 	bl	800ed70 <__retarget_lock_acquire_recursive>
 800fa94:	4b23      	ldr	r3, [pc, #140]	; (800fb24 <__register_exitproc+0xa4>)
 800fa96:	681d      	ldr	r5, [r3, #0]
 800fa98:	f8d5 0148 	ldr.w	r0, [r5, #328]	; 0x148
 800fa9c:	b918      	cbnz	r0, 800faa6 <__register_exitproc+0x26>
 800fa9e:	f505 70a6 	add.w	r0, r5, #332	; 0x14c
 800faa2:	f8c5 0148 	str.w	r0, [r5, #328]	; 0x148
 800faa6:	6843      	ldr	r3, [r0, #4]
 800faa8:	2b1f      	cmp	r3, #31
 800faaa:	dd19      	ble.n	800fae0 <__register_exitproc+0x60>
 800faac:	4b1e      	ldr	r3, [pc, #120]	; (800fb28 <__register_exitproc+0xa8>)
 800faae:	b933      	cbnz	r3, 800fabe <__register_exitproc+0x3e>
 800fab0:	6820      	ldr	r0, [r4, #0]
 800fab2:	f7ff f95e 	bl	800ed72 <__retarget_lock_release_recursive>
 800fab6:	f04f 30ff 	mov.w	r0, #4294967295
 800faba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fabe:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800fac2:	f7fb fa6d 	bl	800afa0 <malloc>
 800fac6:	2800      	cmp	r0, #0
 800fac8:	d0f2      	beq.n	800fab0 <__register_exitproc+0x30>
 800faca:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
 800face:	6003      	str	r3, [r0, #0]
 800fad0:	2200      	movs	r2, #0
 800fad2:	6042      	str	r2, [r0, #4]
 800fad4:	f8c5 0148 	str.w	r0, [r5, #328]	; 0x148
 800fad8:	f8c0 2188 	str.w	r2, [r0, #392]	; 0x188
 800fadc:	f8c0 218c 	str.w	r2, [r0, #396]	; 0x18c
 800fae0:	6843      	ldr	r3, [r0, #4]
 800fae2:	b19e      	cbz	r6, 800fb0c <__register_exitproc+0x8c>
 800fae4:	eb00 0583 	add.w	r5, r0, r3, lsl #2
 800fae8:	2201      	movs	r2, #1
 800faea:	f8c5 9088 	str.w	r9, [r5, #136]	; 0x88
 800faee:	f8d0 1188 	ldr.w	r1, [r0, #392]	; 0x188
 800faf2:	409a      	lsls	r2, r3
 800faf4:	4311      	orrs	r1, r2
 800faf6:	2e02      	cmp	r6, #2
 800faf8:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
 800fafc:	f8c5 8108 	str.w	r8, [r5, #264]	; 0x108
 800fb00:	bf02      	ittt	eq
 800fb02:	f8d0 118c 	ldreq.w	r1, [r0, #396]	; 0x18c
 800fb06:	430a      	orreq	r2, r1
 800fb08:	f8c0 218c 	streq.w	r2, [r0, #396]	; 0x18c
 800fb0c:	1c5a      	adds	r2, r3, #1
 800fb0e:	3302      	adds	r3, #2
 800fb10:	6042      	str	r2, [r0, #4]
 800fb12:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
 800fb16:	6820      	ldr	r0, [r4, #0]
 800fb18:	f7ff f92b 	bl	800ed72 <__retarget_lock_release_recursive>
 800fb1c:	2000      	movs	r0, #0
 800fb1e:	e7cc      	b.n	800faba <__register_exitproc+0x3a>
 800fb20:	20000930 	.word	0x20000930
 800fb24:	080102dc 	.word	0x080102dc
 800fb28:	0800afa1 	.word	0x0800afa1

0800fb2c <_calloc_r>:
 800fb2c:	b510      	push	{r4, lr}
 800fb2e:	4351      	muls	r1, r2
 800fb30:	f7fb fa46 	bl	800afc0 <_malloc_r>
 800fb34:	4604      	mov	r4, r0
 800fb36:	b198      	cbz	r0, 800fb60 <_calloc_r+0x34>
 800fb38:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800fb3c:	f022 0203 	bic.w	r2, r2, #3
 800fb40:	3a04      	subs	r2, #4
 800fb42:	2a24      	cmp	r2, #36	; 0x24
 800fb44:	d81b      	bhi.n	800fb7e <_calloc_r+0x52>
 800fb46:	2a13      	cmp	r2, #19
 800fb48:	d917      	bls.n	800fb7a <_calloc_r+0x4e>
 800fb4a:	2100      	movs	r1, #0
 800fb4c:	2a1b      	cmp	r2, #27
 800fb4e:	e9c0 1100 	strd	r1, r1, [r0]
 800fb52:	d807      	bhi.n	800fb64 <_calloc_r+0x38>
 800fb54:	f100 0308 	add.w	r3, r0, #8
 800fb58:	2200      	movs	r2, #0
 800fb5a:	e9c3 2200 	strd	r2, r2, [r3]
 800fb5e:	609a      	str	r2, [r3, #8]
 800fb60:	4620      	mov	r0, r4
 800fb62:	bd10      	pop	{r4, pc}
 800fb64:	2a24      	cmp	r2, #36	; 0x24
 800fb66:	e9c0 1102 	strd	r1, r1, [r0, #8]
 800fb6a:	bf11      	iteee	ne
 800fb6c:	f100 0310 	addne.w	r3, r0, #16
 800fb70:	6101      	streq	r1, [r0, #16]
 800fb72:	f100 0318 	addeq.w	r3, r0, #24
 800fb76:	6141      	streq	r1, [r0, #20]
 800fb78:	e7ee      	b.n	800fb58 <_calloc_r+0x2c>
 800fb7a:	4603      	mov	r3, r0
 800fb7c:	e7ec      	b.n	800fb58 <_calloc_r+0x2c>
 800fb7e:	2100      	movs	r1, #0
 800fb80:	f7fb fc54 	bl	800b42c <memset>
 800fb84:	e7ec      	b.n	800fb60 <_calloc_r+0x34>

0800fb86 <memmove>:
 800fb86:	4288      	cmp	r0, r1
 800fb88:	b510      	push	{r4, lr}
 800fb8a:	eb01 0302 	add.w	r3, r1, r2
 800fb8e:	d807      	bhi.n	800fba0 <memmove+0x1a>
 800fb90:	1e42      	subs	r2, r0, #1
 800fb92:	4299      	cmp	r1, r3
 800fb94:	d00a      	beq.n	800fbac <memmove+0x26>
 800fb96:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fb9a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800fb9e:	e7f8      	b.n	800fb92 <memmove+0xc>
 800fba0:	4283      	cmp	r3, r0
 800fba2:	d9f5      	bls.n	800fb90 <memmove+0xa>
 800fba4:	1881      	adds	r1, r0, r2
 800fba6:	1ad2      	subs	r2, r2, r3
 800fba8:	42d3      	cmn	r3, r2
 800fbaa:	d100      	bne.n	800fbae <memmove+0x28>
 800fbac:	bd10      	pop	{r4, pc}
 800fbae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fbb2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800fbb6:	e7f7      	b.n	800fba8 <memmove+0x22>

0800fbb8 <ceil>:
 800fbb8:	ec51 0b10 	vmov	r0, r1, d0
 800fbbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fbc0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800fbc4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800fbc8:	2e13      	cmp	r6, #19
 800fbca:	460c      	mov	r4, r1
 800fbcc:	ee10 5a10 	vmov	r5, s0
 800fbd0:	4680      	mov	r8, r0
 800fbd2:	dc30      	bgt.n	800fc36 <ceil+0x7e>
 800fbd4:	2e00      	cmp	r6, #0
 800fbd6:	da12      	bge.n	800fbfe <ceil+0x46>
 800fbd8:	a333      	add	r3, pc, #204	; (adr r3, 800fca8 <ceil+0xf0>)
 800fbda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbde:	f7f0 fb65 	bl	80002ac <__adddf3>
 800fbe2:	2200      	movs	r2, #0
 800fbe4:	2300      	movs	r3, #0
 800fbe6:	f7f0 ffa7 	bl	8000b38 <__aeabi_dcmpgt>
 800fbea:	b128      	cbz	r0, 800fbf8 <ceil+0x40>
 800fbec:	2c00      	cmp	r4, #0
 800fbee:	db55      	blt.n	800fc9c <ceil+0xe4>
 800fbf0:	432c      	orrs	r4, r5
 800fbf2:	d057      	beq.n	800fca4 <ceil+0xec>
 800fbf4:	4c2e      	ldr	r4, [pc, #184]	; (800fcb0 <ceil+0xf8>)
 800fbf6:	2500      	movs	r5, #0
 800fbf8:	4621      	mov	r1, r4
 800fbfa:	4628      	mov	r0, r5
 800fbfc:	e025      	b.n	800fc4a <ceil+0x92>
 800fbfe:	4f2d      	ldr	r7, [pc, #180]	; (800fcb4 <ceil+0xfc>)
 800fc00:	4137      	asrs	r7, r6
 800fc02:	ea01 0307 	and.w	r3, r1, r7
 800fc06:	4303      	orrs	r3, r0
 800fc08:	d01f      	beq.n	800fc4a <ceil+0x92>
 800fc0a:	a327      	add	r3, pc, #156	; (adr r3, 800fca8 <ceil+0xf0>)
 800fc0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc10:	f7f0 fb4c 	bl	80002ac <__adddf3>
 800fc14:	2200      	movs	r2, #0
 800fc16:	2300      	movs	r3, #0
 800fc18:	f7f0 ff8e 	bl	8000b38 <__aeabi_dcmpgt>
 800fc1c:	2800      	cmp	r0, #0
 800fc1e:	d0eb      	beq.n	800fbf8 <ceil+0x40>
 800fc20:	2c00      	cmp	r4, #0
 800fc22:	bfc2      	ittt	gt
 800fc24:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 800fc28:	fa43 f606 	asrgt.w	r6, r3, r6
 800fc2c:	19a4      	addgt	r4, r4, r6
 800fc2e:	ea24 0407 	bic.w	r4, r4, r7
 800fc32:	2500      	movs	r5, #0
 800fc34:	e7e0      	b.n	800fbf8 <ceil+0x40>
 800fc36:	2e33      	cmp	r6, #51	; 0x33
 800fc38:	dd0b      	ble.n	800fc52 <ceil+0x9a>
 800fc3a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800fc3e:	d104      	bne.n	800fc4a <ceil+0x92>
 800fc40:	ee10 2a10 	vmov	r2, s0
 800fc44:	460b      	mov	r3, r1
 800fc46:	f7f0 fb31 	bl	80002ac <__adddf3>
 800fc4a:	ec41 0b10 	vmov	d0, r0, r1
 800fc4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc52:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800fc56:	f04f 33ff 	mov.w	r3, #4294967295
 800fc5a:	fa23 f707 	lsr.w	r7, r3, r7
 800fc5e:	4207      	tst	r7, r0
 800fc60:	d0f3      	beq.n	800fc4a <ceil+0x92>
 800fc62:	a311      	add	r3, pc, #68	; (adr r3, 800fca8 <ceil+0xf0>)
 800fc64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc68:	f7f0 fb20 	bl	80002ac <__adddf3>
 800fc6c:	2200      	movs	r2, #0
 800fc6e:	2300      	movs	r3, #0
 800fc70:	f7f0 ff62 	bl	8000b38 <__aeabi_dcmpgt>
 800fc74:	2800      	cmp	r0, #0
 800fc76:	d0bf      	beq.n	800fbf8 <ceil+0x40>
 800fc78:	2c00      	cmp	r4, #0
 800fc7a:	dd02      	ble.n	800fc82 <ceil+0xca>
 800fc7c:	2e14      	cmp	r6, #20
 800fc7e:	d103      	bne.n	800fc88 <ceil+0xd0>
 800fc80:	3401      	adds	r4, #1
 800fc82:	ea25 0507 	bic.w	r5, r5, r7
 800fc86:	e7b7      	b.n	800fbf8 <ceil+0x40>
 800fc88:	2301      	movs	r3, #1
 800fc8a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800fc8e:	fa03 f606 	lsl.w	r6, r3, r6
 800fc92:	4435      	add	r5, r6
 800fc94:	4545      	cmp	r5, r8
 800fc96:	bf38      	it	cc
 800fc98:	18e4      	addcc	r4, r4, r3
 800fc9a:	e7f2      	b.n	800fc82 <ceil+0xca>
 800fc9c:	2500      	movs	r5, #0
 800fc9e:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800fca2:	e7a9      	b.n	800fbf8 <ceil+0x40>
 800fca4:	4625      	mov	r5, r4
 800fca6:	e7a7      	b.n	800fbf8 <ceil+0x40>
 800fca8:	8800759c 	.word	0x8800759c
 800fcac:	7e37e43c 	.word	0x7e37e43c
 800fcb0:	3ff00000 	.word	0x3ff00000
 800fcb4:	000fffff 	.word	0x000fffff

0800fcb8 <_init>:
 800fcb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fcba:	bf00      	nop
 800fcbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fcbe:	bc08      	pop	{r3}
 800fcc0:	469e      	mov	lr, r3
 800fcc2:	4770      	bx	lr

0800fcc4 <_fini>:
 800fcc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fcc6:	bf00      	nop
 800fcc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fcca:	bc08      	pop	{r3}
 800fccc:	469e      	mov	lr, r3
 800fcce:	4770      	bx	lr
