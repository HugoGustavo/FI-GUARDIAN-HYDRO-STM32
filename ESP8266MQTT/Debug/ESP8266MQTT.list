
ESP8266MQTT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011334  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008ec  080114c8  080114c8  000214c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011db4  08011db4  00030a94  2**0
                  CONTENTS
  4 .ARM          00000008  08011db4  08011db4  00021db4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011dbc  08011dbc  00030a94  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08011dbc  08011dbc  00021dbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011dc4  08011dc4  00021dc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000a94  20000000  08011dc8  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006f0  20000a94  0801285c  00030a94  2**2
                  ALLOC
 10 ._user_heap_stack 00001fe4  20001184  0801285c  00031184  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030a94  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004c9f6  00000000  00000000  00030ac4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00009986  00000000  00000000  0007d4ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002408  00000000  00000000  00086e40  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001fd0  00000000  00000000  00089248  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002e6f7  00000000  00000000  0008b218  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000267b6  00000000  00000000  000b990f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ec062  00000000  00000000  000e00c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001cc127  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009ed0  00000000  00000000  001cc1a4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000a94 	.word	0x20000a94
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080114ac 	.word	0x080114ac

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000a98 	.word	0x20000a98
 80001cc:	080114ac 	.word	0x080114ac

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b972 	b.w	8000fa4 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f806 	bl	8000cd8 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__udivmoddi4>:
 8000cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cdc:	9e08      	ldr	r6, [sp, #32]
 8000cde:	4604      	mov	r4, r0
 8000ce0:	4688      	mov	r8, r1
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d14b      	bne.n	8000d7e <__udivmoddi4+0xa6>
 8000ce6:	428a      	cmp	r2, r1
 8000ce8:	4615      	mov	r5, r2
 8000cea:	d967      	bls.n	8000dbc <__udivmoddi4+0xe4>
 8000cec:	fab2 f282 	clz	r2, r2
 8000cf0:	b14a      	cbz	r2, 8000d06 <__udivmoddi4+0x2e>
 8000cf2:	f1c2 0720 	rsb	r7, r2, #32
 8000cf6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cfa:	fa20 f707 	lsr.w	r7, r0, r7
 8000cfe:	4095      	lsls	r5, r2
 8000d00:	ea47 0803 	orr.w	r8, r7, r3
 8000d04:	4094      	lsls	r4, r2
 8000d06:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d0a:	0c23      	lsrs	r3, r4, #16
 8000d0c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d10:	fa1f fc85 	uxth.w	ip, r5
 8000d14:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d18:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d1c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d20:	4299      	cmp	r1, r3
 8000d22:	d909      	bls.n	8000d38 <__udivmoddi4+0x60>
 8000d24:	18eb      	adds	r3, r5, r3
 8000d26:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d2a:	f080 811b 	bcs.w	8000f64 <__udivmoddi4+0x28c>
 8000d2e:	4299      	cmp	r1, r3
 8000d30:	f240 8118 	bls.w	8000f64 <__udivmoddi4+0x28c>
 8000d34:	3f02      	subs	r7, #2
 8000d36:	442b      	add	r3, r5
 8000d38:	1a5b      	subs	r3, r3, r1
 8000d3a:	b2a4      	uxth	r4, r4
 8000d3c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d40:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d48:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d4c:	45a4      	cmp	ip, r4
 8000d4e:	d909      	bls.n	8000d64 <__udivmoddi4+0x8c>
 8000d50:	192c      	adds	r4, r5, r4
 8000d52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d56:	f080 8107 	bcs.w	8000f68 <__udivmoddi4+0x290>
 8000d5a:	45a4      	cmp	ip, r4
 8000d5c:	f240 8104 	bls.w	8000f68 <__udivmoddi4+0x290>
 8000d60:	3802      	subs	r0, #2
 8000d62:	442c      	add	r4, r5
 8000d64:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d68:	eba4 040c 	sub.w	r4, r4, ip
 8000d6c:	2700      	movs	r7, #0
 8000d6e:	b11e      	cbz	r6, 8000d78 <__udivmoddi4+0xa0>
 8000d70:	40d4      	lsrs	r4, r2
 8000d72:	2300      	movs	r3, #0
 8000d74:	e9c6 4300 	strd	r4, r3, [r6]
 8000d78:	4639      	mov	r1, r7
 8000d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d909      	bls.n	8000d96 <__udivmoddi4+0xbe>
 8000d82:	2e00      	cmp	r6, #0
 8000d84:	f000 80eb 	beq.w	8000f5e <__udivmoddi4+0x286>
 8000d88:	2700      	movs	r7, #0
 8000d8a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d8e:	4638      	mov	r0, r7
 8000d90:	4639      	mov	r1, r7
 8000d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d96:	fab3 f783 	clz	r7, r3
 8000d9a:	2f00      	cmp	r7, #0
 8000d9c:	d147      	bne.n	8000e2e <__udivmoddi4+0x156>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d302      	bcc.n	8000da8 <__udivmoddi4+0xd0>
 8000da2:	4282      	cmp	r2, r0
 8000da4:	f200 80fa 	bhi.w	8000f9c <__udivmoddi4+0x2c4>
 8000da8:	1a84      	subs	r4, r0, r2
 8000daa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dae:	2001      	movs	r0, #1
 8000db0:	4698      	mov	r8, r3
 8000db2:	2e00      	cmp	r6, #0
 8000db4:	d0e0      	beq.n	8000d78 <__udivmoddi4+0xa0>
 8000db6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dba:	e7dd      	b.n	8000d78 <__udivmoddi4+0xa0>
 8000dbc:	b902      	cbnz	r2, 8000dc0 <__udivmoddi4+0xe8>
 8000dbe:	deff      	udf	#255	; 0xff
 8000dc0:	fab2 f282 	clz	r2, r2
 8000dc4:	2a00      	cmp	r2, #0
 8000dc6:	f040 808f 	bne.w	8000ee8 <__udivmoddi4+0x210>
 8000dca:	1b49      	subs	r1, r1, r5
 8000dcc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dd0:	fa1f f885 	uxth.w	r8, r5
 8000dd4:	2701      	movs	r7, #1
 8000dd6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dda:	0c23      	lsrs	r3, r4, #16
 8000ddc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000de0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000de4:	fb08 f10c 	mul.w	r1, r8, ip
 8000de8:	4299      	cmp	r1, r3
 8000dea:	d907      	bls.n	8000dfc <__udivmoddi4+0x124>
 8000dec:	18eb      	adds	r3, r5, r3
 8000dee:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000df2:	d202      	bcs.n	8000dfa <__udivmoddi4+0x122>
 8000df4:	4299      	cmp	r1, r3
 8000df6:	f200 80cd 	bhi.w	8000f94 <__udivmoddi4+0x2bc>
 8000dfa:	4684      	mov	ip, r0
 8000dfc:	1a59      	subs	r1, r3, r1
 8000dfe:	b2a3      	uxth	r3, r4
 8000e00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e04:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e08:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e0c:	fb08 f800 	mul.w	r8, r8, r0
 8000e10:	45a0      	cmp	r8, r4
 8000e12:	d907      	bls.n	8000e24 <__udivmoddi4+0x14c>
 8000e14:	192c      	adds	r4, r5, r4
 8000e16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e1a:	d202      	bcs.n	8000e22 <__udivmoddi4+0x14a>
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	f200 80b6 	bhi.w	8000f8e <__udivmoddi4+0x2b6>
 8000e22:	4618      	mov	r0, r3
 8000e24:	eba4 0408 	sub.w	r4, r4, r8
 8000e28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e2c:	e79f      	b.n	8000d6e <__udivmoddi4+0x96>
 8000e2e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e32:	40bb      	lsls	r3, r7
 8000e34:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e38:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e3c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e40:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e44:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e48:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e4c:	4325      	orrs	r5, r4
 8000e4e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e52:	0c2c      	lsrs	r4, r5, #16
 8000e54:	fb08 3319 	mls	r3, r8, r9, r3
 8000e58:	fa1f fa8e 	uxth.w	sl, lr
 8000e5c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e60:	fb09 f40a 	mul.w	r4, r9, sl
 8000e64:	429c      	cmp	r4, r3
 8000e66:	fa02 f207 	lsl.w	r2, r2, r7
 8000e6a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e6e:	d90b      	bls.n	8000e88 <__udivmoddi4+0x1b0>
 8000e70:	eb1e 0303 	adds.w	r3, lr, r3
 8000e74:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e78:	f080 8087 	bcs.w	8000f8a <__udivmoddi4+0x2b2>
 8000e7c:	429c      	cmp	r4, r3
 8000e7e:	f240 8084 	bls.w	8000f8a <__udivmoddi4+0x2b2>
 8000e82:	f1a9 0902 	sub.w	r9, r9, #2
 8000e86:	4473      	add	r3, lr
 8000e88:	1b1b      	subs	r3, r3, r4
 8000e8a:	b2ad      	uxth	r5, r5
 8000e8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e90:	fb08 3310 	mls	r3, r8, r0, r3
 8000e94:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e98:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e9c:	45a2      	cmp	sl, r4
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x1da>
 8000ea0:	eb1e 0404 	adds.w	r4, lr, r4
 8000ea4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ea8:	d26b      	bcs.n	8000f82 <__udivmoddi4+0x2aa>
 8000eaa:	45a2      	cmp	sl, r4
 8000eac:	d969      	bls.n	8000f82 <__udivmoddi4+0x2aa>
 8000eae:	3802      	subs	r0, #2
 8000eb0:	4474      	add	r4, lr
 8000eb2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000eb6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eba:	eba4 040a 	sub.w	r4, r4, sl
 8000ebe:	454c      	cmp	r4, r9
 8000ec0:	46c2      	mov	sl, r8
 8000ec2:	464b      	mov	r3, r9
 8000ec4:	d354      	bcc.n	8000f70 <__udivmoddi4+0x298>
 8000ec6:	d051      	beq.n	8000f6c <__udivmoddi4+0x294>
 8000ec8:	2e00      	cmp	r6, #0
 8000eca:	d069      	beq.n	8000fa0 <__udivmoddi4+0x2c8>
 8000ecc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ed0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ed4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ed8:	40fd      	lsrs	r5, r7
 8000eda:	40fc      	lsrs	r4, r7
 8000edc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ee0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ee4:	2700      	movs	r7, #0
 8000ee6:	e747      	b.n	8000d78 <__udivmoddi4+0xa0>
 8000ee8:	f1c2 0320 	rsb	r3, r2, #32
 8000eec:	fa20 f703 	lsr.w	r7, r0, r3
 8000ef0:	4095      	lsls	r5, r2
 8000ef2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ef6:	fa21 f303 	lsr.w	r3, r1, r3
 8000efa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000efe:	4338      	orrs	r0, r7
 8000f00:	0c01      	lsrs	r1, r0, #16
 8000f02:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f06:	fa1f f885 	uxth.w	r8, r5
 8000f0a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f12:	fb07 f308 	mul.w	r3, r7, r8
 8000f16:	428b      	cmp	r3, r1
 8000f18:	fa04 f402 	lsl.w	r4, r4, r2
 8000f1c:	d907      	bls.n	8000f2e <__udivmoddi4+0x256>
 8000f1e:	1869      	adds	r1, r5, r1
 8000f20:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f24:	d22f      	bcs.n	8000f86 <__udivmoddi4+0x2ae>
 8000f26:	428b      	cmp	r3, r1
 8000f28:	d92d      	bls.n	8000f86 <__udivmoddi4+0x2ae>
 8000f2a:	3f02      	subs	r7, #2
 8000f2c:	4429      	add	r1, r5
 8000f2e:	1acb      	subs	r3, r1, r3
 8000f30:	b281      	uxth	r1, r0
 8000f32:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f36:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f3a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f3e:	fb00 f308 	mul.w	r3, r0, r8
 8000f42:	428b      	cmp	r3, r1
 8000f44:	d907      	bls.n	8000f56 <__udivmoddi4+0x27e>
 8000f46:	1869      	adds	r1, r5, r1
 8000f48:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f4c:	d217      	bcs.n	8000f7e <__udivmoddi4+0x2a6>
 8000f4e:	428b      	cmp	r3, r1
 8000f50:	d915      	bls.n	8000f7e <__udivmoddi4+0x2a6>
 8000f52:	3802      	subs	r0, #2
 8000f54:	4429      	add	r1, r5
 8000f56:	1ac9      	subs	r1, r1, r3
 8000f58:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f5c:	e73b      	b.n	8000dd6 <__udivmoddi4+0xfe>
 8000f5e:	4637      	mov	r7, r6
 8000f60:	4630      	mov	r0, r6
 8000f62:	e709      	b.n	8000d78 <__udivmoddi4+0xa0>
 8000f64:	4607      	mov	r7, r0
 8000f66:	e6e7      	b.n	8000d38 <__udivmoddi4+0x60>
 8000f68:	4618      	mov	r0, r3
 8000f6a:	e6fb      	b.n	8000d64 <__udivmoddi4+0x8c>
 8000f6c:	4541      	cmp	r1, r8
 8000f6e:	d2ab      	bcs.n	8000ec8 <__udivmoddi4+0x1f0>
 8000f70:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f74:	eb69 020e 	sbc.w	r2, r9, lr
 8000f78:	3801      	subs	r0, #1
 8000f7a:	4613      	mov	r3, r2
 8000f7c:	e7a4      	b.n	8000ec8 <__udivmoddi4+0x1f0>
 8000f7e:	4660      	mov	r0, ip
 8000f80:	e7e9      	b.n	8000f56 <__udivmoddi4+0x27e>
 8000f82:	4618      	mov	r0, r3
 8000f84:	e795      	b.n	8000eb2 <__udivmoddi4+0x1da>
 8000f86:	4667      	mov	r7, ip
 8000f88:	e7d1      	b.n	8000f2e <__udivmoddi4+0x256>
 8000f8a:	4681      	mov	r9, r0
 8000f8c:	e77c      	b.n	8000e88 <__udivmoddi4+0x1b0>
 8000f8e:	3802      	subs	r0, #2
 8000f90:	442c      	add	r4, r5
 8000f92:	e747      	b.n	8000e24 <__udivmoddi4+0x14c>
 8000f94:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f98:	442b      	add	r3, r5
 8000f9a:	e72f      	b.n	8000dfc <__udivmoddi4+0x124>
 8000f9c:	4638      	mov	r0, r7
 8000f9e:	e708      	b.n	8000db2 <__udivmoddi4+0xda>
 8000fa0:	4637      	mov	r7, r6
 8000fa2:	e6e9      	b.n	8000d78 <__udivmoddi4+0xa0>

08000fa4 <__aeabi_idiv0>:
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop

08000fa8 <app_init>:
sen0169*				sensor_sen0169		= NULL;
sen0189*				sensor_sen0189		= NULL;
sen0237a*				sensor_sen0237a		= NULL;
char*					message				= NULL;

void app_init(ADC_HandleTypeDef* hadc){
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
	configure_delay();
 8000fb0:	f000 f81b 	bl	8000fea <configure_delay>
	configure_ssd1306();
 8000fb4:	f000 f81f 	bl	8000ff6 <configure_ssd1306>
	configure_init_screen();
 8000fb8:	f000 f826 	bl	8001008 <configure_init_screen>
	configure_esp();
 8000fbc:	f000 f840 	bl	8001040 <configure_esp>
	configure_dma(hadc);
 8000fc0:	6878      	ldr	r0, [r7, #4]
 8000fc2:	f000 f875 	bl	80010b0 <configure_dma>

	configure_ds18b20();
 8000fc6:	f000 f895 	bl	80010f4 <configure_ds18b20>
	configure_sen0161();
 8000fca:	f000 f8b5 	bl	8001138 <configure_sen0161>
	configure_sen0165();
 8000fce:	f000 f8db 	bl	8001188 <configure_sen0165>
	configure_sen0169();
 8000fd2:	f000 f901 	bl	80011d8 <configure_sen0169>
	configure_sen0189();
 8000fd6:	f000 f927 	bl	8001228 <configure_sen0189>
	configure_sen0237a();
 8000fda:	f000 f947 	bl	800126c <configure_sen0237a>

	configure_mqtt_client();
 8000fde:	f000 f98f 	bl	8001300 <configure_mqtt_client>
}
 8000fe2:	bf00      	nop
 8000fe4:	3708      	adds	r7, #8
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}

08000fea <configure_delay>:

void configure_delay(void){
 8000fea:	b580      	push	{r7, lr}
 8000fec:	af00      	add	r7, sp, #0
	DWT_Init();
 8000fee:	f006 f983 	bl	80072f8 <DWT_Init>
}
 8000ff2:	bf00      	nop
 8000ff4:	bd80      	pop	{r7, pc}

08000ff6 <configure_ssd1306>:

void configure_ssd1306(void){
 8000ff6:	b580      	push	{r7, lr}
 8000ff8:	af00      	add	r7, sp, #0
	SSD1306_Init();
 8000ffa:	f006 f91f 	bl	800723c <SSD1306_Init>
	SDD1306_Clear_Screen();
 8000ffe:	f006 f8ed 	bl	80071dc <SDD1306_Clear_Screen>
}
 8001002:	bf00      	nop
 8001004:	bd80      	pop	{r7, pc}
	...

08001008 <configure_init_screen>:

void configure_init_screen(void){
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
	SSD1306_Write_Centered_String((uint8_t*) "FI-GUARDIAN", (uint8_t) 2);
 800100c:	2102      	movs	r1, #2
 800100e:	4809      	ldr	r0, [pc, #36]	; (8001034 <configure_init_screen+0x2c>)
 8001010:	f006 f8be 	bl	8007190 <SSD1306_Write_Centered_String>
	SSD1306_Write_Centered_String((uint8_t*) "SMART WATER", (uint8_t) 3);
 8001014:	2103      	movs	r1, #3
 8001016:	4808      	ldr	r0, [pc, #32]	; (8001038 <configure_init_screen+0x30>)
 8001018:	f006 f8ba 	bl	8007190 <SSD1306_Write_Centered_String>
	SSD1306_Write_Centered_String((uint8_t*) "powered by UFU & VM9", (uint8_t) 5);
 800101c:	2105      	movs	r1, #5
 800101e:	4807      	ldr	r0, [pc, #28]	; (800103c <configure_init_screen+0x34>)
 8001020:	f006 f8b6 	bl	8007190 <SSD1306_Write_Centered_String>
	stm32_util_delay_in_seconds(8);
 8001024:	2008      	movs	r0, #8
 8001026:	f006 fee1 	bl	8007dec <stm32_util_delay_in_seconds>
	SDD1306_Clear_Screen();
 800102a:	f006 f8d7 	bl	80071dc <SDD1306_Clear_Screen>
}
 800102e:	bf00      	nop
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	080114c8 	.word	0x080114c8
 8001038:	080114d4 	.word	0x080114d4
 800103c:	080114e0 	.word	0x080114e0

08001040 <configure_esp>:

void configure_esp(void){
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
	logger_info(logger_get_instance(), (char*) "Configurando ESP8266");
 8001044:	f006 f99e 	bl	8007384 <logger_get_instance>
 8001048:	4603      	mov	r3, r0
 800104a:	4913      	ldr	r1, [pc, #76]	; (8001098 <configure_esp+0x58>)
 800104c:	4618      	mov	r0, r3
 800104e:	f006 f9b7 	bl	80073c0 <logger_info>
	esp = esp8266_init();
 8001052:	f001 ff20 	bl	8002e96 <esp8266_init>
 8001056:	4602      	mov	r2, r0
 8001058:	4b10      	ldr	r3, [pc, #64]	; (800109c <configure_esp+0x5c>)
 800105a:	601a      	str	r2, [r3, #0]
	esp8266_setOprToStationSoftAP(esp);
 800105c:	4b0f      	ldr	r3, [pc, #60]	; (800109c <configure_esp+0x5c>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4618      	mov	r0, r3
 8001062:	f001 ff95 	bl	8002f90 <esp8266_setOprToStationSoftAP>
	esp8266_enableMUX(esp);
 8001066:	4b0d      	ldr	r3, [pc, #52]	; (800109c <configure_esp+0x5c>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4618      	mov	r0, r3
 800106c:	f001 fff0 	bl	8003050 <esp8266_enableMUX>
	esp8266_joinAP(esp, SMART_WATER_PROPERTIES_SSID, SMART_WATER_PROPERTIES_PASSWORD_SSID);
 8001070:	4b0a      	ldr	r3, [pc, #40]	; (800109c <configure_esp+0x5c>)
 8001072:	6818      	ldr	r0, [r3, #0]
 8001074:	4b0a      	ldr	r3, [pc, #40]	; (80010a0 <configure_esp+0x60>)
 8001076:	6819      	ldr	r1, [r3, #0]
 8001078:	4b0a      	ldr	r3, [pc, #40]	; (80010a4 <configure_esp+0x64>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	461a      	mov	r2, r3
 800107e:	f001 ffaf 	bl	8002fe0 <esp8266_joinAP>
	esp8266_createTCP(esp, (uint8_t*) SMART_WATER_PROPERTIES_API_GATEWAY_HOST, SMART_WATER_PROPERTIES_API_GATEWAY_PORT);
 8001082:	4b06      	ldr	r3, [pc, #24]	; (800109c <configure_esp+0x5c>)
 8001084:	6818      	ldr	r0, [r3, #0]
 8001086:	4b08      	ldr	r3, [pc, #32]	; (80010a8 <configure_esp+0x68>)
 8001088:	6819      	ldr	r1, [r3, #0]
 800108a:	4b08      	ldr	r3, [pc, #32]	; (80010ac <configure_esp+0x6c>)
 800108c:	881b      	ldrh	r3, [r3, #0]
 800108e:	461a      	mov	r2, r3
 8001090:	f001 fffa 	bl	8003088 <esp8266_createTCP>
}
 8001094:	bf00      	nop
 8001096:	bd80      	pop	{r7, pc}
 8001098:	080114f8 	.word	0x080114f8
 800109c:	20000ab0 	.word	0x20000ab0
 80010a0:	20000008 	.word	0x20000008
 80010a4:	2000000c 	.word	0x2000000c
 80010a8:	20000010 	.word	0x20000010
 80010ac:	20000014 	.word	0x20000014

080010b0 <configure_dma>:

void configure_dma(ADC_HandleTypeDef* hadc){
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
	if( hadc != NULL ){
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d012      	beq.n	80010e4 <configure_dma+0x34>
		logger_info(logger_get_instance(), (char*) "Configurando DMA");
 80010be:	f006 f961 	bl	8007384 <logger_get_instance>
 80010c2:	4603      	mov	r3, r0
 80010c4:	4909      	ldr	r1, [pc, #36]	; (80010ec <configure_dma+0x3c>)
 80010c6:	4618      	mov	r0, r3
 80010c8:	f006 f97a 	bl	80073c0 <logger_info>
		dma = direct_memory_access_init(hadc, 4);
 80010cc:	2104      	movs	r1, #4
 80010ce:	6878      	ldr	r0, [r7, #4]
 80010d0:	f000 ffe2 	bl	8002098 <direct_memory_access_init>
 80010d4:	4602      	mov	r2, r0
 80010d6:	4b06      	ldr	r3, [pc, #24]	; (80010f0 <configure_dma+0x40>)
 80010d8:	601a      	str	r2, [r3, #0]
		direct_memory_access_start(dma);
 80010da:	4b05      	ldr	r3, [pc, #20]	; (80010f0 <configure_dma+0x40>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4618      	mov	r0, r3
 80010e0:	f001 f818 	bl	8002114 <direct_memory_access_start>
	}
}
 80010e4:	bf00      	nop
 80010e6:	3708      	adds	r7, #8
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	08011510 	.word	0x08011510
 80010f0:	20000ab4 	.word	0x20000ab4

080010f4 <configure_ds18b20>:

void configure_ds18b20(void){
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
	if( DS18B20_PROPERTIES_PORT != NULL ){
 80010f8:	4b0b      	ldr	r3, [pc, #44]	; (8001128 <configure_ds18b20+0x34>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d011      	beq.n	8001124 <configure_ds18b20+0x30>
		logger_info(logger_get_instance(), (char*) "Configurando DS18B20");
 8001100:	f006 f940 	bl	8007384 <logger_get_instance>
 8001104:	4603      	mov	r3, r0
 8001106:	4909      	ldr	r1, [pc, #36]	; (800112c <configure_ds18b20+0x38>)
 8001108:	4618      	mov	r0, r3
 800110a:	f006 f959 	bl	80073c0 <logger_info>
		sensor_ds18b20 = ds18b20_init(DS18B20_PROPERTIES_PORT, DS18B20_PROPERTIES_PIN);
 800110e:	4b06      	ldr	r3, [pc, #24]	; (8001128 <configure_ds18b20+0x34>)
 8001110:	681a      	ldr	r2, [r3, #0]
 8001112:	4b07      	ldr	r3, [pc, #28]	; (8001130 <configure_ds18b20+0x3c>)
 8001114:	881b      	ldrh	r3, [r3, #0]
 8001116:	4619      	mov	r1, r3
 8001118:	4610      	mov	r0, r2
 800111a:	f001 f86e 	bl	80021fa <ds18b20_init>
 800111e:	4602      	mov	r2, r0
 8001120:	4b04      	ldr	r3, [pc, #16]	; (8001134 <configure_ds18b20+0x40>)
 8001122:	601a      	str	r2, [r3, #0]
	}
}
 8001124:	bf00      	nop
 8001126:	bd80      	pop	{r7, pc}
 8001128:	20000034 	.word	0x20000034
 800112c:	08011524 	.word	0x08011524
 8001130:	20000038 	.word	0x20000038
 8001134:	20000abc 	.word	0x20000abc

08001138 <configure_sen0161>:

void configure_sen0161(void){
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
	if( SEN0161_PROPERTIES_PIN != 0 ){
 800113c:	4b0d      	ldr	r3, [pc, #52]	; (8001174 <configure_sen0161+0x3c>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d015      	beq.n	8001170 <configure_sen0161+0x38>
		logger_info(logger_get_instance(), (char*) "Configurando SEN0161");
 8001144:	f006 f91e 	bl	8007384 <logger_get_instance>
 8001148:	4603      	mov	r3, r0
 800114a:	490b      	ldr	r1, [pc, #44]	; (8001178 <configure_sen0161+0x40>)
 800114c:	4618      	mov	r0, r3
 800114e:	f006 f937 	bl	80073c0 <logger_info>
		sensor_sen0161 = sen0161_init(dma, SEN0161_PROPERTIES_PIN, SEN0161_PROPERTIES_OFFSET);
 8001152:	4b0a      	ldr	r3, [pc, #40]	; (800117c <configure_sen0161+0x44>)
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	4b07      	ldr	r3, [pc, #28]	; (8001174 <configure_sen0161+0x3c>)
 8001158:	6819      	ldr	r1, [r3, #0]
 800115a:	4b09      	ldr	r3, [pc, #36]	; (8001180 <configure_sen0161+0x48>)
 800115c:	edd3 7a00 	vldr	s15, [r3]
 8001160:	eeb0 0a67 	vmov.f32	s0, s15
 8001164:	4610      	mov	r0, r2
 8001166:	f005 f863 	bl	8006230 <sen0161_init>
 800116a:	4602      	mov	r2, r0
 800116c:	4b05      	ldr	r3, [pc, #20]	; (8001184 <configure_sen0161+0x4c>)
 800116e:	601a      	str	r2, [r3, #0]
	}
}
 8001170:	bf00      	nop
 8001172:	bd80      	pop	{r7, pc}
 8001174:	20000040 	.word	0x20000040
 8001178:	0801153c 	.word	0x0801153c
 800117c:	20000ab4 	.word	0x20000ab4
 8001180:	20000adc 	.word	0x20000adc
 8001184:	20000ac0 	.word	0x20000ac0

08001188 <configure_sen0165>:

void configure_sen0165(void){
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
	if( SEN0165_PROPERTIES_PIN != 0 ){
 800118c:	4b0d      	ldr	r3, [pc, #52]	; (80011c4 <configure_sen0165+0x3c>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d015      	beq.n	80011c0 <configure_sen0165+0x38>
		logger_info(logger_get_instance(), (char*) "Configurando SEN0165");
 8001194:	f006 f8f6 	bl	8007384 <logger_get_instance>
 8001198:	4603      	mov	r3, r0
 800119a:	490b      	ldr	r1, [pc, #44]	; (80011c8 <configure_sen0165+0x40>)
 800119c:	4618      	mov	r0, r3
 800119e:	f006 f90f 	bl	80073c0 <logger_info>
		sensor_sen0165 = sen0165_init(dma, SEN0165_PROPERTIES_PIN, SEN0165_PROPERTIES_OFFSET);
 80011a2:	4b0a      	ldr	r3, [pc, #40]	; (80011cc <configure_sen0165+0x44>)
 80011a4:	681a      	ldr	r2, [r3, #0]
 80011a6:	4b07      	ldr	r3, [pc, #28]	; (80011c4 <configure_sen0165+0x3c>)
 80011a8:	6819      	ldr	r1, [r3, #0]
 80011aa:	4b09      	ldr	r3, [pc, #36]	; (80011d0 <configure_sen0165+0x48>)
 80011ac:	edd3 7a00 	vldr	s15, [r3]
 80011b0:	eeb0 0a67 	vmov.f32	s0, s15
 80011b4:	4610      	mov	r0, r2
 80011b6:	f005 f973 	bl	80064a0 <sen0165_init>
 80011ba:	4602      	mov	r2, r0
 80011bc:	4b05      	ldr	r3, [pc, #20]	; (80011d4 <configure_sen0165+0x4c>)
 80011be:	601a      	str	r2, [r3, #0]
	}
}
 80011c0:	bf00      	nop
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	20000048 	.word	0x20000048
 80011c8:	08011554 	.word	0x08011554
 80011cc:	20000ab4 	.word	0x20000ab4
 80011d0:	20000ae0 	.word	0x20000ae0
 80011d4:	20000ac4 	.word	0x20000ac4

080011d8 <configure_sen0169>:

void configure_sen0169(void){
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
	if( SEN0169_PROPERTIES_PIN != 0 ){
 80011dc:	4b0d      	ldr	r3, [pc, #52]	; (8001214 <configure_sen0169+0x3c>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d015      	beq.n	8001210 <configure_sen0169+0x38>
		logger_info(logger_get_instance(), (char*) "Configurando SEN0169");
 80011e4:	f006 f8ce 	bl	8007384 <logger_get_instance>
 80011e8:	4603      	mov	r3, r0
 80011ea:	490b      	ldr	r1, [pc, #44]	; (8001218 <configure_sen0169+0x40>)
 80011ec:	4618      	mov	r0, r3
 80011ee:	f006 f8e7 	bl	80073c0 <logger_info>
		sensor_sen0169 = sen0169_init(dma, SEN0169_PROPERTIES_PIN, SEN0169_PROPERTIES_OFFSET);
 80011f2:	4b0a      	ldr	r3, [pc, #40]	; (800121c <configure_sen0169+0x44>)
 80011f4:	681a      	ldr	r2, [r3, #0]
 80011f6:	4b07      	ldr	r3, [pc, #28]	; (8001214 <configure_sen0169+0x3c>)
 80011f8:	6819      	ldr	r1, [r3, #0]
 80011fa:	4b09      	ldr	r3, [pc, #36]	; (8001220 <configure_sen0169+0x48>)
 80011fc:	edd3 7a00 	vldr	s15, [r3]
 8001200:	eeb0 0a67 	vmov.f32	s0, s15
 8001204:	4610      	mov	r0, r2
 8001206:	f005 faa7 	bl	8006758 <sen0169_init>
 800120a:	4602      	mov	r2, r0
 800120c:	4b05      	ldr	r3, [pc, #20]	; (8001224 <configure_sen0169+0x4c>)
 800120e:	601a      	str	r2, [r3, #0]
	}

}
 8001210:	bf00      	nop
 8001212:	bd80      	pop	{r7, pc}
 8001214:	20000ae4 	.word	0x20000ae4
 8001218:	0801156c 	.word	0x0801156c
 800121c:	20000ab4 	.word	0x20000ab4
 8001220:	20000ae8 	.word	0x20000ae8
 8001224:	20000ac8 	.word	0x20000ac8

08001228 <configure_sen0189>:

void configure_sen0189(void){
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
	if( SEN0189_PROPERTIES_PIN != 0 ){
 800122c:	4b0b      	ldr	r3, [pc, #44]	; (800125c <configure_sen0189+0x34>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d011      	beq.n	8001258 <configure_sen0189+0x30>
		logger_info(logger_get_instance(), (char*) "Configurando SEN0189");
 8001234:	f006 f8a6 	bl	8007384 <logger_get_instance>
 8001238:	4603      	mov	r3, r0
 800123a:	4909      	ldr	r1, [pc, #36]	; (8001260 <configure_sen0189+0x38>)
 800123c:	4618      	mov	r0, r3
 800123e:	f006 f8bf 	bl	80073c0 <logger_info>
		sensor_sen0189 = sen0189_init(dma, SEN0189_PROPERTIES_PIN);
 8001242:	4b08      	ldr	r3, [pc, #32]	; (8001264 <configure_sen0189+0x3c>)
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	4b05      	ldr	r3, [pc, #20]	; (800125c <configure_sen0189+0x34>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4619      	mov	r1, r3
 800124c:	4610      	mov	r0, r2
 800124e:	f005 fbbb 	bl	80069c8 <sen0189_init>
 8001252:	4602      	mov	r2, r0
 8001254:	4b04      	ldr	r3, [pc, #16]	; (8001268 <configure_sen0189+0x40>)
 8001256:	601a      	str	r2, [r3, #0]
	}
}
 8001258:	bf00      	nop
 800125a:	bd80      	pop	{r7, pc}
 800125c:	20000054 	.word	0x20000054
 8001260:	08011584 	.word	0x08011584
 8001264:	20000ab4 	.word	0x20000ab4
 8001268:	20000acc 	.word	0x20000acc

0800126c <configure_sen0237a>:

void configure_sen0237a(void){
 800126c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800126e:	b087      	sub	sp, #28
 8001270:	af06      	add	r7, sp, #24
	if( SEN0237A_PROPERTIES_PIN != 0 ){
 8001272:	4b18      	ldr	r3, [pc, #96]	; (80012d4 <configure_sen0237a+0x68>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d028      	beq.n	80012cc <configure_sen0237a+0x60>
		logger_info(logger_get_instance(), (char*) "Configurando SEN0237A");
 800127a:	f006 f883 	bl	8007384 <logger_get_instance>
 800127e:	4603      	mov	r3, r0
 8001280:	4915      	ldr	r1, [pc, #84]	; (80012d8 <configure_sen0237a+0x6c>)
 8001282:	4618      	mov	r0, r3
 8001284:	f006 f89c 	bl	80073c0 <logger_info>
		sensor_sen0237a = sen0237a_init(dma,
 8001288:	4b14      	ldr	r3, [pc, #80]	; (80012dc <configure_sen0237a+0x70>)
 800128a:	681d      	ldr	r5, [r3, #0]
 800128c:	4b11      	ldr	r3, [pc, #68]	; (80012d4 <configure_sen0237a+0x68>)
 800128e:	681e      	ldr	r6, [r3, #0]
 8001290:	4b13      	ldr	r3, [pc, #76]	; (80012e0 <configure_sen0237a+0x74>)
 8001292:	f893 c000 	ldrb.w	ip, [r3]
 8001296:	4b13      	ldr	r3, [pc, #76]	; (80012e4 <configure_sen0237a+0x78>)
 8001298:	f893 e000 	ldrb.w	lr, [r3]
 800129c:	4b12      	ldr	r3, [pc, #72]	; (80012e8 <configure_sen0237a+0x7c>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a12      	ldr	r2, [pc, #72]	; (80012ec <configure_sen0237a+0x80>)
 80012a2:	7812      	ldrb	r2, [r2, #0]
 80012a4:	4912      	ldr	r1, [pc, #72]	; (80012f0 <configure_sen0237a+0x84>)
 80012a6:	6809      	ldr	r1, [r1, #0]
 80012a8:	4812      	ldr	r0, [pc, #72]	; (80012f4 <configure_sen0237a+0x88>)
 80012aa:	7800      	ldrb	r0, [r0, #0]
 80012ac:	4c12      	ldr	r4, [pc, #72]	; (80012f8 <configure_sen0237a+0x8c>)
 80012ae:	7824      	ldrb	r4, [r4, #0]
 80012b0:	9404      	str	r4, [sp, #16]
 80012b2:	9003      	str	r0, [sp, #12]
 80012b4:	9102      	str	r1, [sp, #8]
 80012b6:	9201      	str	r2, [sp, #4]
 80012b8:	9300      	str	r3, [sp, #0]
 80012ba:	4673      	mov	r3, lr
 80012bc:	4662      	mov	r2, ip
 80012be:	4631      	mov	r1, r6
 80012c0:	4628      	mov	r0, r5
 80012c2:	f005 fc13 	bl	8006aec <sen0237a_init>
 80012c6:	4602      	mov	r2, r0
 80012c8:	4b0c      	ldr	r3, [pc, #48]	; (80012fc <configure_sen0237a+0x90>)
 80012ca:	601a      	str	r2, [r3, #0]
				SEN0237A_PROPERTIES_TEMPERATURE_POINT_1,
				SEN0237A_PROPERTIES_VOLTAGE_POINT_2,
				SEN0237A_PROPERTIES_TEMPERATURE_POINT_2,
				SEN0237A_PROPERTIES_TEMPERATURE_CURRENT);
	}
}
 80012cc:	bf00      	nop
 80012ce:	3704      	adds	r7, #4
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012d4:	20000aec 	.word	0x20000aec
 80012d8:	0801159c 	.word	0x0801159c
 80012dc:	20000ab4 	.word	0x20000ab4
 80012e0:	20000af0 	.word	0x20000af0
 80012e4:	2000005c 	.word	0x2000005c
 80012e8:	20000af4 	.word	0x20000af4
 80012ec:	2000005d 	.word	0x2000005d
 80012f0:	20000af8 	.word	0x20000af8
 80012f4:	2000005e 	.word	0x2000005e
 80012f8:	20000afc 	.word	0x20000afc
 80012fc:	20000ad0 	.word	0x20000ad0

08001300 <configure_mqtt_client>:

void configure_mqtt_client(void){
 8001300:	b590      	push	{r4, r7, lr}
 8001302:	b083      	sub	sp, #12
 8001304:	af02      	add	r7, sp, #8
	logger_info(logger_get_instance(), (char*) "Conectando ao Gateway");
 8001306:	f006 f83d 	bl	8007384 <logger_get_instance>
 800130a:	4603      	mov	r3, r0
 800130c:	490f      	ldr	r1, [pc, #60]	; (800134c <configure_mqtt_client+0x4c>)
 800130e:	4618      	mov	r0, r3
 8001310:	f006 f856 	bl	80073c0 <logger_info>
	mqtt = mqtt_client_init(esp);
 8001314:	4b0e      	ldr	r3, [pc, #56]	; (8001350 <configure_mqtt_client+0x50>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4618      	mov	r0, r3
 800131a:	f003 f9bf 	bl	800469c <mqtt_client_init>
 800131e:	4602      	mov	r2, r0
 8001320:	4b0c      	ldr	r3, [pc, #48]	; (8001354 <configure_mqtt_client+0x54>)
 8001322:	601a      	str	r2, [r3, #0]
	mqtt_client_connect(mqtt, SMART_WATER_PROPERTIES_SMART_WATER_ID, SMART_WATER_PROPERTIES_API_GATEWAY_HOST, SMART_WATER_PROPERTIES_API_GATEWAY_PORT, 60, true);
 8001324:	4b0b      	ldr	r3, [pc, #44]	; (8001354 <configure_mqtt_client+0x54>)
 8001326:	6818      	ldr	r0, [r3, #0]
 8001328:	4b0b      	ldr	r3, [pc, #44]	; (8001358 <configure_mqtt_client+0x58>)
 800132a:	6819      	ldr	r1, [r3, #0]
 800132c:	4b0b      	ldr	r3, [pc, #44]	; (800135c <configure_mqtt_client+0x5c>)
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	4b0b      	ldr	r3, [pc, #44]	; (8001360 <configure_mqtt_client+0x60>)
 8001332:	881b      	ldrh	r3, [r3, #0]
 8001334:	461c      	mov	r4, r3
 8001336:	2301      	movs	r3, #1
 8001338:	9301      	str	r3, [sp, #4]
 800133a:	233c      	movs	r3, #60	; 0x3c
 800133c:	9300      	str	r3, [sp, #0]
 800133e:	4623      	mov	r3, r4
 8001340:	f003 facc 	bl	80048dc <mqtt_client_connect>
}
 8001344:	bf00      	nop
 8001346:	3704      	adds	r7, #4
 8001348:	46bd      	mov	sp, r7
 800134a:	bd90      	pop	{r4, r7, pc}
 800134c:	080115b4 	.word	0x080115b4
 8001350:	20000ab0 	.word	0x20000ab0
 8001354:	20000ab8 	.word	0x20000ab8
 8001358:	20000004 	.word	0x20000004
 800135c:	20000010 	.word	0x20000010
 8001360:	20000014 	.word	0x20000014

08001364 <app_measure>:

void app_measure(void){
 8001364:	b590      	push	{r4, r7, lr}
 8001366:	b095      	sub	sp, #84	; 0x54
 8001368:	af00      	add	r7, sp, #0
	logger_clean(logger_get_instance());
 800136a:	f006 f80b 	bl	8007384 <logger_get_instance>
 800136e:	4603      	mov	r3, r0
 8001370:	4618      	mov	r0, r3
 8001372:	f006 f859 	bl	8007428 <logger_clean>

	message_builder* builder = message_builder_get_instance();
 8001376:	f006 fa95 	bl	80078a4 <message_builder_get_instance>
 800137a:	6378      	str	r0, [r7, #52]	; 0x34
	message_builder_instance = message_builder_set_reply_host(builder, SMART_WATER_PROPERTIES_REPLY_HOST);
 800137c:	4bb6      	ldr	r3, [pc, #728]	; (8001658 <app_measure+0x2f4>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4619      	mov	r1, r3
 8001382:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001384:	f006 fae4 	bl	8007950 <message_builder_set_reply_host>
 8001388:	4602      	mov	r2, r0
 800138a:	4bb4      	ldr	r3, [pc, #720]	; (800165c <app_measure+0x2f8>)
 800138c:	601a      	str	r2, [r3, #0]
	message_builder_instance = message_builder_set_reply_port(builder, SMART_WATER_PROPERTIES_REPLY_PORT);
 800138e:	4bb4      	ldr	r3, [pc, #720]	; (8001660 <app_measure+0x2fc>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4619      	mov	r1, r3
 8001394:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001396:	f006 faef 	bl	8007978 <message_builder_set_reply_port>
 800139a:	4602      	mov	r2, r0
 800139c:	4baf      	ldr	r3, [pc, #700]	; (800165c <app_measure+0x2f8>)
 800139e:	601a      	str	r2, [r3, #0]
	message_builder_instance = message_builder_set_reply_channel(builder, SMART_WATER_PROPERTIES_REPLY_CHANNEL);
 80013a0:	4bb0      	ldr	r3, [pc, #704]	; (8001664 <app_measure+0x300>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4619      	mov	r1, r3
 80013a6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80013a8:	f006 fafa 	bl	80079a0 <message_builder_set_reply_channel>
 80013ac:	4602      	mov	r2, r0
 80013ae:	4bab      	ldr	r3, [pc, #684]	; (800165c <app_measure+0x2f8>)
 80013b0:	601a      	str	r2, [r3, #0]
	message_builder_instance = message_builder_set_method(builder, SMART_WATER_PROPERTIES_METHOD);
 80013b2:	4bad      	ldr	r3, [pc, #692]	; (8001668 <app_measure+0x304>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4619      	mov	r1, r3
 80013b8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80013ba:	f006 fb05 	bl	80079c8 <message_builder_set_method>
 80013be:	4602      	mov	r2, r0
 80013c0:	4ba6      	ldr	r3, [pc, #664]	; (800165c <app_measure+0x2f8>)
 80013c2:	601a      	str	r2, [r3, #0]
	message_builder_instance = message_builder_set_uri(builder, SMART_WATER_PROPERTIES_URI);
 80013c4:	4ba9      	ldr	r3, [pc, #676]	; (800166c <app_measure+0x308>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4619      	mov	r1, r3
 80013ca:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80013cc:	f006 fb10 	bl	80079f0 <message_builder_set_uri>
 80013d0:	4602      	mov	r2, r0
 80013d2:	4ba2      	ldr	r3, [pc, #648]	; (800165c <app_measure+0x2f8>)
 80013d4:	601a      	str	r2, [r3, #0]

	char* buffer_ds18b20 = NULL;
 80013d6:	2300      	movs	r3, #0
 80013d8:	64fb      	str	r3, [r7, #76]	; 0x4c
	char* buffer_sen0161 = NULL;
 80013da:	2300      	movs	r3, #0
 80013dc:	64bb      	str	r3, [r7, #72]	; 0x48
	char* buffer_sen0165 = NULL;
 80013de:	2300      	movs	r3, #0
 80013e0:	647b      	str	r3, [r7, #68]	; 0x44
	char* buffer_sen0169 = NULL;
 80013e2:	2300      	movs	r3, #0
 80013e4:	643b      	str	r3, [r7, #64]	; 0x40
	char* buffer_sen0189 = NULL;
 80013e6:	2300      	movs	r3, #0
 80013e8:	63fb      	str	r3, [r7, #60]	; 0x3c
	char* buffer_sen0237a = NULL;
 80013ea:	2300      	movs	r3, #0
 80013ec:	63bb      	str	r3, [r7, #56]	; 0x38


	if( sensor_ds18b20 != NULL ){
 80013ee:	4ba0      	ldr	r3, [pc, #640]	; (8001670 <app_measure+0x30c>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d033      	beq.n	800145e <app_measure+0xfa>
		float temperature = ds18b20_read(sensor_ds18b20);
 80013f6:	4b9e      	ldr	r3, [pc, #632]	; (8001670 <app_measure+0x30c>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4618      	mov	r0, r3
 80013fc:	f000 ffc0 	bl	8002380 <ds18b20_read>
 8001400:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30
		buffer_ds18b20 = (char*) malloc(10*sizeof(char));
 8001404:	200a      	movs	r0, #10
 8001406:	f00b f9ef 	bl	800c7e8 <malloc>
 800140a:	4603      	mov	r3, r0
 800140c:	64fb      	str	r3, [r7, #76]	; 0x4c
		gcvt(temperature, 6, buffer_ds18b20);
 800140e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001410:	f7ff f8aa 	bl	8000568 <__aeabi_f2d>
 8001414:	4603      	mov	r3, r0
 8001416:	460c      	mov	r4, r1
 8001418:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800141a:	2006      	movs	r0, #6
 800141c:	ec44 3b10 	vmov	d0, r3, r4
 8001420:	f00b f98c 	bl	800c73c <gcvt>
		message_builder_instance = message_builder_put_body(builder, DS18B20_PROPERTIES_LABEL, buffer_ds18b20);
 8001424:	4b93      	ldr	r3, [pc, #588]	; (8001674 <app_measure+0x310>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800142a:	4619      	mov	r1, r3
 800142c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800142e:	f006 faf3 	bl	8007a18 <message_builder_put_body>
 8001432:	4602      	mov	r2, r0
 8001434:	4b89      	ldr	r3, [pc, #548]	; (800165c <app_measure+0x2f8>)
 8001436:	601a      	str	r2, [r3, #0]

		char* property_value = string_util_property(DS18B20_PROPERTIES_LABEL, buffer_ds18b20);
 8001438:	4b8e      	ldr	r3, [pc, #568]	; (8001674 <app_measure+0x310>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800143e:	4618      	mov	r0, r3
 8001440:	f006 fd10 	bl	8007e64 <string_util_property>
 8001444:	62f8      	str	r0, [r7, #44]	; 0x2c
		logger_info(logger_get_instance(), property_value);
 8001446:	f005 ff9d 	bl	8007384 <logger_get_instance>
 800144a:	4603      	mov	r3, r0
 800144c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800144e:	4618      	mov	r0, r3
 8001450:	f005 ffb6 	bl	80073c0 <logger_info>
		free(property_value);
 8001454:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001456:	f00b f9cf 	bl	800c7f8 <free>
		property_value = NULL;
 800145a:	2300      	movs	r3, #0
 800145c:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	if( sensor_sen0161 != NULL ){
 800145e:	4b86      	ldr	r3, [pc, #536]	; (8001678 <app_measure+0x314>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d033      	beq.n	80014ce <app_measure+0x16a>
		float ph = sen0161_read(sensor_sen0161);
 8001466:	4b84      	ldr	r3, [pc, #528]	; (8001678 <app_measure+0x314>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4618      	mov	r0, r3
 800146c:	f004 ff1e 	bl	80062ac <sen0161_read>
 8001470:	ed87 0a0a 	vstr	s0, [r7, #40]	; 0x28
		buffer_sen0161 = (char*) malloc(10*sizeof(char));
 8001474:	200a      	movs	r0, #10
 8001476:	f00b f9b7 	bl	800c7e8 <malloc>
 800147a:	4603      	mov	r3, r0
 800147c:	64bb      	str	r3, [r7, #72]	; 0x48
		gcvt(ph, 6, buffer_sen0161);
 800147e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001480:	f7ff f872 	bl	8000568 <__aeabi_f2d>
 8001484:	4603      	mov	r3, r0
 8001486:	460c      	mov	r4, r1
 8001488:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800148a:	2006      	movs	r0, #6
 800148c:	ec44 3b10 	vmov	d0, r3, r4
 8001490:	f00b f954 	bl	800c73c <gcvt>
		message_builder_instance = message_builder_put_body(builder, SEN0161_PROPERTIES_LABEL, buffer_sen0161);
 8001494:	4b79      	ldr	r3, [pc, #484]	; (800167c <app_measure+0x318>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800149a:	4619      	mov	r1, r3
 800149c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800149e:	f006 fabb 	bl	8007a18 <message_builder_put_body>
 80014a2:	4602      	mov	r2, r0
 80014a4:	4b6d      	ldr	r3, [pc, #436]	; (800165c <app_measure+0x2f8>)
 80014a6:	601a      	str	r2, [r3, #0]

		char* property_value = string_util_property(SEN0161_PROPERTIES_LABEL, buffer_sen0161);
 80014a8:	4b74      	ldr	r3, [pc, #464]	; (800167c <app_measure+0x318>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80014ae:	4618      	mov	r0, r3
 80014b0:	f006 fcd8 	bl	8007e64 <string_util_property>
 80014b4:	6278      	str	r0, [r7, #36]	; 0x24
		logger_info(logger_get_instance(), property_value);
 80014b6:	f005 ff65 	bl	8007384 <logger_get_instance>
 80014ba:	4603      	mov	r3, r0
 80014bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80014be:	4618      	mov	r0, r3
 80014c0:	f005 ff7e 	bl	80073c0 <logger_info>
		free(property_value);
 80014c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80014c6:	f00b f997 	bl	800c7f8 <free>
		property_value = NULL;
 80014ca:	2300      	movs	r3, #0
 80014cc:	627b      	str	r3, [r7, #36]	; 0x24
	}

	if( sensor_sen0165 != NULL ){
 80014ce:	4b6c      	ldr	r3, [pc, #432]	; (8001680 <app_measure+0x31c>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d033      	beq.n	800153e <app_measure+0x1da>
		float orp = sen0165_read(sensor_sen0165);
 80014d6:	4b6a      	ldr	r3, [pc, #424]	; (8001680 <app_measure+0x31c>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4618      	mov	r0, r3
 80014dc:	f005 f820 	bl	8006520 <sen0165_read>
 80014e0:	ed87 0a08 	vstr	s0, [r7, #32]
		buffer_sen0165 = (char*) malloc(10*sizeof(char));
 80014e4:	200a      	movs	r0, #10
 80014e6:	f00b f97f 	bl	800c7e8 <malloc>
 80014ea:	4603      	mov	r3, r0
 80014ec:	647b      	str	r3, [r7, #68]	; 0x44
		gcvt(orp, 6, buffer_sen0165);
 80014ee:	6a38      	ldr	r0, [r7, #32]
 80014f0:	f7ff f83a 	bl	8000568 <__aeabi_f2d>
 80014f4:	4603      	mov	r3, r0
 80014f6:	460c      	mov	r4, r1
 80014f8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80014fa:	2006      	movs	r0, #6
 80014fc:	ec44 3b10 	vmov	d0, r3, r4
 8001500:	f00b f91c 	bl	800c73c <gcvt>
		message_builder_instance = message_builder_put_body(builder, SEN0165_PROPERTIES_LABEL, buffer_sen0165);
 8001504:	4b5f      	ldr	r3, [pc, #380]	; (8001684 <app_measure+0x320>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800150a:	4619      	mov	r1, r3
 800150c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800150e:	f006 fa83 	bl	8007a18 <message_builder_put_body>
 8001512:	4602      	mov	r2, r0
 8001514:	4b51      	ldr	r3, [pc, #324]	; (800165c <app_measure+0x2f8>)
 8001516:	601a      	str	r2, [r3, #0]

		char* property_value = string_util_property(SEN0165_PROPERTIES_LABEL, buffer_sen0165);
 8001518:	4b5a      	ldr	r3, [pc, #360]	; (8001684 <app_measure+0x320>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800151e:	4618      	mov	r0, r3
 8001520:	f006 fca0 	bl	8007e64 <string_util_property>
 8001524:	61f8      	str	r0, [r7, #28]
		logger_info(logger_get_instance(), property_value);
 8001526:	f005 ff2d 	bl	8007384 <logger_get_instance>
 800152a:	4603      	mov	r3, r0
 800152c:	69f9      	ldr	r1, [r7, #28]
 800152e:	4618      	mov	r0, r3
 8001530:	f005 ff46 	bl	80073c0 <logger_info>
		free(property_value);
 8001534:	69f8      	ldr	r0, [r7, #28]
 8001536:	f00b f95f 	bl	800c7f8 <free>
		property_value = NULL;
 800153a:	2300      	movs	r3, #0
 800153c:	61fb      	str	r3, [r7, #28]
	}

	if( sensor_sen0169 != NULL ){
 800153e:	4b52      	ldr	r3, [pc, #328]	; (8001688 <app_measure+0x324>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d033      	beq.n	80015ae <app_measure+0x24a>
		float ph = sen0169_read(sensor_sen0169);
 8001546:	4b50      	ldr	r3, [pc, #320]	; (8001688 <app_measure+0x324>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4618      	mov	r0, r3
 800154c:	f005 f942 	bl	80067d4 <sen0169_read>
 8001550:	ed87 0a06 	vstr	s0, [r7, #24]
		buffer_sen0169 = (char*) malloc(10*sizeof(char));
 8001554:	200a      	movs	r0, #10
 8001556:	f00b f947 	bl	800c7e8 <malloc>
 800155a:	4603      	mov	r3, r0
 800155c:	643b      	str	r3, [r7, #64]	; 0x40
		gcvt(ph, 6, buffer_sen0169);
 800155e:	69b8      	ldr	r0, [r7, #24]
 8001560:	f7ff f802 	bl	8000568 <__aeabi_f2d>
 8001564:	4603      	mov	r3, r0
 8001566:	460c      	mov	r4, r1
 8001568:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800156a:	2006      	movs	r0, #6
 800156c:	ec44 3b10 	vmov	d0, r3, r4
 8001570:	f00b f8e4 	bl	800c73c <gcvt>
		message_builder_instance = message_builder_put_body(builder, SEN0169_PROPERTIES_LABEL, buffer_sen0169);
 8001574:	4b45      	ldr	r3, [pc, #276]	; (800168c <app_measure+0x328>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800157a:	4619      	mov	r1, r3
 800157c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800157e:	f006 fa4b 	bl	8007a18 <message_builder_put_body>
 8001582:	4602      	mov	r2, r0
 8001584:	4b35      	ldr	r3, [pc, #212]	; (800165c <app_measure+0x2f8>)
 8001586:	601a      	str	r2, [r3, #0]

		char* property_value = string_util_property(SEN0169_PROPERTIES_LABEL, buffer_sen0169);
 8001588:	4b40      	ldr	r3, [pc, #256]	; (800168c <app_measure+0x328>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800158e:	4618      	mov	r0, r3
 8001590:	f006 fc68 	bl	8007e64 <string_util_property>
 8001594:	6178      	str	r0, [r7, #20]
		logger_info(logger_get_instance(), property_value);
 8001596:	f005 fef5 	bl	8007384 <logger_get_instance>
 800159a:	4603      	mov	r3, r0
 800159c:	6979      	ldr	r1, [r7, #20]
 800159e:	4618      	mov	r0, r3
 80015a0:	f005 ff0e 	bl	80073c0 <logger_info>
		free(property_value);
 80015a4:	6978      	ldr	r0, [r7, #20]
 80015a6:	f00b f927 	bl	800c7f8 <free>
		property_value = NULL;
 80015aa:	2300      	movs	r3, #0
 80015ac:	617b      	str	r3, [r7, #20]
	}

	if( sensor_sen0189 != NULL ){
 80015ae:	4b38      	ldr	r3, [pc, #224]	; (8001690 <app_measure+0x32c>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d033      	beq.n	800161e <app_measure+0x2ba>
		float turbidity = sen0189_read(sensor_sen0189);
 80015b6:	4b36      	ldr	r3, [pc, #216]	; (8001690 <app_measure+0x32c>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4618      	mov	r0, r3
 80015bc:	f005 fa1c 	bl	80069f8 <sen0189_read>
 80015c0:	ed87 0a04 	vstr	s0, [r7, #16]
		buffer_sen0189 = (char*) malloc(10*sizeof(char));
 80015c4:	200a      	movs	r0, #10
 80015c6:	f00b f90f 	bl	800c7e8 <malloc>
 80015ca:	4603      	mov	r3, r0
 80015cc:	63fb      	str	r3, [r7, #60]	; 0x3c
		gcvt(turbidity, 6, buffer_sen0189);
 80015ce:	6938      	ldr	r0, [r7, #16]
 80015d0:	f7fe ffca 	bl	8000568 <__aeabi_f2d>
 80015d4:	4603      	mov	r3, r0
 80015d6:	460c      	mov	r4, r1
 80015d8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80015da:	2006      	movs	r0, #6
 80015dc:	ec44 3b10 	vmov	d0, r3, r4
 80015e0:	f00b f8ac 	bl	800c73c <gcvt>
		message_builder_instance = message_builder_put_body(builder, SEN0189_PROPERTIES_LABEL, buffer_sen0189);
 80015e4:	4b2b      	ldr	r3, [pc, #172]	; (8001694 <app_measure+0x330>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80015ea:	4619      	mov	r1, r3
 80015ec:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80015ee:	f006 fa13 	bl	8007a18 <message_builder_put_body>
 80015f2:	4602      	mov	r2, r0
 80015f4:	4b19      	ldr	r3, [pc, #100]	; (800165c <app_measure+0x2f8>)
 80015f6:	601a      	str	r2, [r3, #0]

		char* property_value = string_util_property(SEN0189_PROPERTIES_LABEL, buffer_sen0189);
 80015f8:	4b26      	ldr	r3, [pc, #152]	; (8001694 <app_measure+0x330>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80015fe:	4618      	mov	r0, r3
 8001600:	f006 fc30 	bl	8007e64 <string_util_property>
 8001604:	60f8      	str	r0, [r7, #12]
		logger_info(logger_get_instance(), property_value);
 8001606:	f005 febd 	bl	8007384 <logger_get_instance>
 800160a:	4603      	mov	r3, r0
 800160c:	68f9      	ldr	r1, [r7, #12]
 800160e:	4618      	mov	r0, r3
 8001610:	f005 fed6 	bl	80073c0 <logger_info>
		free(property_value);
 8001614:	68f8      	ldr	r0, [r7, #12]
 8001616:	f00b f8ef 	bl	800c7f8 <free>
		property_value = NULL;
 800161a:	2300      	movs	r3, #0
 800161c:	60fb      	str	r3, [r7, #12]
	}

	if( sensor_sen0237a != NULL ){
 800161e:	4b1e      	ldr	r3, [pc, #120]	; (8001698 <app_measure+0x334>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d057      	beq.n	80016d6 <app_measure+0x372>
		float dissolved_oxygen = sen0237a_read(sensor_sen0237a);
 8001626:	4b1c      	ldr	r3, [pc, #112]	; (8001698 <app_measure+0x334>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4618      	mov	r0, r3
 800162c:	f005 fc4e 	bl	8006ecc <sen0237a_read>
 8001630:	ed87 0a02 	vstr	s0, [r7, #8]
		buffer_sen0237a = (char*) malloc(10*sizeof(char));
 8001634:	200a      	movs	r0, #10
 8001636:	f00b f8d7 	bl	800c7e8 <malloc>
 800163a:	4603      	mov	r3, r0
 800163c:	63bb      	str	r3, [r7, #56]	; 0x38
		gcvt(dissolved_oxygen, 6, buffer_sen0237a);
 800163e:	68b8      	ldr	r0, [r7, #8]
 8001640:	f7fe ff92 	bl	8000568 <__aeabi_f2d>
 8001644:	4603      	mov	r3, r0
 8001646:	460c      	mov	r4, r1
 8001648:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800164a:	2006      	movs	r0, #6
 800164c:	ec44 3b10 	vmov	d0, r3, r4
 8001650:	f00b f874 	bl	800c73c <gcvt>
 8001654:	e022      	b.n	800169c <app_measure+0x338>
 8001656:	bf00      	nop
 8001658:	2000001c 	.word	0x2000001c
 800165c:	20000b1c 	.word	0x20000b1c
 8001660:	20000020 	.word	0x20000020
 8001664:	20000024 	.word	0x20000024
 8001668:	20000028 	.word	0x20000028
 800166c:	2000002c 	.word	0x2000002c
 8001670:	20000abc 	.word	0x20000abc
 8001674:	2000003c 	.word	0x2000003c
 8001678:	20000ac0 	.word	0x20000ac0
 800167c:	20000044 	.word	0x20000044
 8001680:	20000ac4 	.word	0x20000ac4
 8001684:	2000004c 	.word	0x2000004c
 8001688:	20000ac8 	.word	0x20000ac8
 800168c:	20000050 	.word	0x20000050
 8001690:	20000acc 	.word	0x20000acc
 8001694:	20000058 	.word	0x20000058
 8001698:	20000ad0 	.word	0x20000ad0
		message_builder_instance = message_builder_put_body(builder, SEN0237A_PROPERTIES_LABEL, buffer_sen0237a);
 800169c:	4b2d      	ldr	r3, [pc, #180]	; (8001754 <app_measure+0x3f0>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80016a2:	4619      	mov	r1, r3
 80016a4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80016a6:	f006 f9b7 	bl	8007a18 <message_builder_put_body>
 80016aa:	4602      	mov	r2, r0
 80016ac:	4b2a      	ldr	r3, [pc, #168]	; (8001758 <app_measure+0x3f4>)
 80016ae:	601a      	str	r2, [r3, #0]

		char* property_value = string_util_property(SEN0237A_PROPERTIES_LABEL, buffer_sen0237a);
 80016b0:	4b28      	ldr	r3, [pc, #160]	; (8001754 <app_measure+0x3f0>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80016b6:	4618      	mov	r0, r3
 80016b8:	f006 fbd4 	bl	8007e64 <string_util_property>
 80016bc:	6078      	str	r0, [r7, #4]
		logger_info(logger_get_instance(), property_value);
 80016be:	f005 fe61 	bl	8007384 <logger_get_instance>
 80016c2:	4603      	mov	r3, r0
 80016c4:	6879      	ldr	r1, [r7, #4]
 80016c6:	4618      	mov	r0, r3
 80016c8:	f005 fe7a 	bl	80073c0 <logger_info>
		free(property_value);
 80016cc:	6878      	ldr	r0, [r7, #4]
 80016ce:	f00b f893 	bl	800c7f8 <free>
		property_value = NULL;
 80016d2:	2300      	movs	r3, #0
 80016d4:	607b      	str	r3, [r7, #4]
	}

	message = message_builder_build(message_builder_instance);
 80016d6:	4b20      	ldr	r3, [pc, #128]	; (8001758 <app_measure+0x3f4>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4618      	mov	r0, r3
 80016dc:	f006 f9b4 	bl	8007a48 <message_builder_build>
 80016e0:	4602      	mov	r2, r0
 80016e2:	4b1e      	ldr	r3, [pc, #120]	; (800175c <app_measure+0x3f8>)
 80016e4:	601a      	str	r2, [r3, #0]

	if( buffer_ds18b20 != NULL ) free(buffer_ds18b20);
 80016e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d002      	beq.n	80016f2 <app_measure+0x38e>
 80016ec:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80016ee:	f00b f883 	bl	800c7f8 <free>
	if( buffer_sen0161 != NULL ) free(buffer_sen0161);
 80016f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d002      	beq.n	80016fe <app_measure+0x39a>
 80016f8:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80016fa:	f00b f87d 	bl	800c7f8 <free>
	if( buffer_sen0165 != NULL ) free(buffer_sen0165);
 80016fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001700:	2b00      	cmp	r3, #0
 8001702:	d002      	beq.n	800170a <app_measure+0x3a6>
 8001704:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001706:	f00b f877 	bl	800c7f8 <free>
	if( buffer_sen0169 != NULL ) free(buffer_sen0169);
 800170a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800170c:	2b00      	cmp	r3, #0
 800170e:	d002      	beq.n	8001716 <app_measure+0x3b2>
 8001710:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001712:	f00b f871 	bl	800c7f8 <free>
	if( buffer_sen0189 != NULL ) free(buffer_sen0189);
 8001716:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001718:	2b00      	cmp	r3, #0
 800171a:	d002      	beq.n	8001722 <app_measure+0x3be>
 800171c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800171e:	f00b f86b 	bl	800c7f8 <free>
	if( buffer_sen0237a != NULL ) free(buffer_sen0237a);
 8001722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001724:	2b00      	cmp	r3, #0
 8001726:	d002      	beq.n	800172e <app_measure+0x3ca>
 8001728:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800172a:	f00b f865 	bl	800c7f8 <free>

	buffer_ds18b20 = NULL;
 800172e:	2300      	movs	r3, #0
 8001730:	64fb      	str	r3, [r7, #76]	; 0x4c
	buffer_sen0161 = NULL;
 8001732:	2300      	movs	r3, #0
 8001734:	64bb      	str	r3, [r7, #72]	; 0x48
	buffer_sen0165 = NULL;
 8001736:	2300      	movs	r3, #0
 8001738:	647b      	str	r3, [r7, #68]	; 0x44
	buffer_sen0169 = NULL;
 800173a:	2300      	movs	r3, #0
 800173c:	643b      	str	r3, [r7, #64]	; 0x40
	buffer_sen0189 = NULL;
 800173e:	2300      	movs	r3, #0
 8001740:	63fb      	str	r3, [r7, #60]	; 0x3c
	buffer_sen0237a = NULL;
 8001742:	2300      	movs	r3, #0
 8001744:	63bb      	str	r3, [r7, #56]	; 0x38

	message_builder_destroy();
 8001746:	f006 faaf 	bl	8007ca8 <message_builder_destroy>
}
 800174a:	bf00      	nop
 800174c:	3754      	adds	r7, #84	; 0x54
 800174e:	46bd      	mov	sp, r7
 8001750:	bd90      	pop	{r4, r7, pc}
 8001752:	bf00      	nop
 8001754:	20000060 	.word	0x20000060
 8001758:	20000b1c 	.word	0x20000b1c
 800175c:	20000ad4 	.word	0x20000ad4

08001760 <app_send>:

void app_send(void){
 8001760:	b590      	push	{r4, r7, lr}
 8001762:	b085      	sub	sp, #20
 8001764:	af02      	add	r7, sp, #8
	unsigned char MQTT_QOS_LEVEL = QOS_LEVEL == 0x00 || QOS_LEVEL == 0x01 || QOS_LEVEL == 0x02 ? QOS_LEVEL : 0x00;
 8001766:	4b16      	ldr	r3, [pc, #88]	; (80017c0 <app_send+0x60>)
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d007      	beq.n	800177e <app_send+0x1e>
 800176e:	4b14      	ldr	r3, [pc, #80]	; (80017c0 <app_send+0x60>)
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	2b01      	cmp	r3, #1
 8001774:	d003      	beq.n	800177e <app_send+0x1e>
 8001776:	4b12      	ldr	r3, [pc, #72]	; (80017c0 <app_send+0x60>)
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	2b02      	cmp	r3, #2
 800177c:	d102      	bne.n	8001784 <app_send+0x24>
 800177e:	4b10      	ldr	r3, [pc, #64]	; (80017c0 <app_send+0x60>)
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	e000      	b.n	8001786 <app_send+0x26>
 8001784:	2300      	movs	r3, #0
 8001786:	71fb      	strb	r3, [r7, #7]
	mqtt_client_publish(mqtt, (char*) SMART_WATER_PROPERTIES_API_GATEWAY_CHANNEL, (char*) message, MQTT_QOS_LEVEL, false);
 8001788:	4b0e      	ldr	r3, [pc, #56]	; (80017c4 <app_send+0x64>)
 800178a:	6818      	ldr	r0, [r3, #0]
 800178c:	4b0e      	ldr	r3, [pc, #56]	; (80017c8 <app_send+0x68>)
 800178e:	6819      	ldr	r1, [r3, #0]
 8001790:	4b0e      	ldr	r3, [pc, #56]	; (80017cc <app_send+0x6c>)
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	79fc      	ldrb	r4, [r7, #7]
 8001796:	2300      	movs	r3, #0
 8001798:	9300      	str	r3, [sp, #0]
 800179a:	4623      	mov	r3, r4
 800179c:	f003 f8c6 	bl	800492c <mqtt_client_publish>
	if( message != NULL ) free(message);
 80017a0:	4b0a      	ldr	r3, [pc, #40]	; (80017cc <app_send+0x6c>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d004      	beq.n	80017b2 <app_send+0x52>
 80017a8:	4b08      	ldr	r3, [pc, #32]	; (80017cc <app_send+0x6c>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4618      	mov	r0, r3
 80017ae:	f00b f823 	bl	800c7f8 <free>
	message = NULL;
 80017b2:	4b06      	ldr	r3, [pc, #24]	; (80017cc <app_send+0x6c>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	601a      	str	r2, [r3, #0]
}
 80017b8:	bf00      	nop
 80017ba:	370c      	adds	r7, #12
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd90      	pop	{r4, r7, pc}
 80017c0:	20000ad8 	.word	0x20000ad8
 80017c4:	20000ab8 	.word	0x20000ab8
 80017c8:	20000018 	.word	0x20000018
 80017cc:	20000ad4 	.word	0x20000ad4

080017d0 <app_wait>:

void app_wait(void){
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
	stm32_util_delay_in_seconds(SMART_WATER_PROPERTIES_MEASUREMENT_CYCLE_IN_SECONDS);
 80017d4:	4b05      	ldr	r3, [pc, #20]	; (80017ec <app_wait+0x1c>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4618      	mov	r0, r3
 80017da:	f006 fb07 	bl	8007dec <stm32_util_delay_in_seconds>
	direct_memory_access_restart(dma);
 80017de:	4b04      	ldr	r3, [pc, #16]	; (80017f0 <app_wait+0x20>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4618      	mov	r0, r3
 80017e4:	f000 fce4 	bl	80021b0 <direct_memory_access_restart>
}
 80017e8:	bf00      	nop
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	20000030 	.word	0x20000030
 80017f0:	20000ab4 	.word	0x20000ab4

080017f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017f8:	f006 fbf3 	bl	8007fe2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017fc:	f000 f818 	bl	8001830 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001800:	f000 fa0c 	bl	8001c1c <MX_GPIO_Init>
  MX_DMA_Init();
 8001804:	f000 f9e4 	bl	8001bd0 <MX_DMA_Init>
  MX_ADC1_Init();
 8001808:	f000 f892 	bl	8001930 <MX_ADC1_Init>
  MX_I2C2_Init();
 800180c:	f000 f940 	bl	8001a90 <MX_I2C2_Init>
  MX_USART2_UART_Init();
 8001810:	f000 f9ae 	bl	8001b70 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 8001814:	f000 f97c 	bl	8001b10 <MX_TIM6_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  app_init(&hadc1);
 8001818:	4804      	ldr	r0, [pc, #16]	; (800182c <main+0x38>)
 800181a:	f7ff fbc5 	bl	8000fa8 <app_init>
  while (1){
	  app_measure();
 800181e:	f7ff fda1 	bl	8001364 <app_measure>
	  app_send();
 8001822:	f7ff ff9d 	bl	8001760 <app_send>
	  app_wait();
 8001826:	f7ff ffd3 	bl	80017d0 <app_wait>
	  app_measure();
 800182a:	e7f8      	b.n	800181e <main+0x2a>
 800182c:	20000ba0 	.word	0x20000ba0

08001830 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b0ae      	sub	sp, #184	; 0xb8
 8001834:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001836:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800183a:	2244      	movs	r2, #68	; 0x44
 800183c:	2100      	movs	r1, #0
 800183e:	4618      	mov	r0, r3
 8001840:	f00b fa18 	bl	800cc74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001844:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001848:	2200      	movs	r2, #0
 800184a:	601a      	str	r2, [r3, #0]
 800184c:	605a      	str	r2, [r3, #4]
 800184e:	609a      	str	r2, [r3, #8]
 8001850:	60da      	str	r2, [r3, #12]
 8001852:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001854:	463b      	mov	r3, r7
 8001856:	2260      	movs	r2, #96	; 0x60
 8001858:	2100      	movs	r1, #0
 800185a:	4618      	mov	r0, r3
 800185c:	f00b fa0a 	bl	800cc74 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001860:	2301      	movs	r3, #1
 8001862:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001864:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001868:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800186a:	2302      	movs	r3, #2
 800186c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001870:	2303      	movs	r3, #3
 8001872:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001876:	2301      	movs	r3, #1
 8001878:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLN = 20;
 800187c:	2314      	movs	r3, #20
 800187e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001882:	2307      	movs	r3, #7
 8001884:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001888:	2302      	movs	r3, #2
 800188a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800188e:	2302      	movs	r3, #2
 8001890:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001894:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001898:	4618      	mov	r0, r3
 800189a:	f009 f8b5 	bl	800aa08 <HAL_RCC_OscConfig>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d001      	beq.n	80018a8 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80018a4:	f000 fa34 	bl	8001d10 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018a8:	230f      	movs	r3, #15
 80018aa:	663b      	str	r3, [r7, #96]	; 0x60
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018ac:	2303      	movs	r3, #3
 80018ae:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018b0:	2300      	movs	r3, #0
 80018b2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80018b4:	2300      	movs	r3, #0
 80018b6:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018b8:	2300      	movs	r3, #0
 80018ba:	673b      	str	r3, [r7, #112]	; 0x70

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80018bc:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80018c0:	2104      	movs	r1, #4
 80018c2:	4618      	mov	r0, r3
 80018c4:	f009 fcc0 	bl	800b248 <HAL_RCC_ClockConfig>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d001      	beq.n	80018d2 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80018ce:	f000 fa1f 	bl	8001d10 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C2
 80018d2:	f244 0382 	movw	r3, #16514	; 0x4082
 80018d6:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80018d8:	2300      	movs	r3, #0
 80018da:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80018dc:	2300      	movs	r3, #0
 80018de:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80018e0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80018e4:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 80018e6:	2303      	movs	r3, #3
 80018e8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80018ea:	2301      	movs	r3, #1
 80018ec:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80018ee:	2308      	movs	r3, #8
 80018f0:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80018f2:	2307      	movs	r3, #7
 80018f4:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80018f6:	2302      	movs	r3, #2
 80018f8:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80018fa:	2302      	movs	r3, #2
 80018fc:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80018fe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001902:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001904:	463b      	mov	r3, r7
 8001906:	4618      	mov	r0, r3
 8001908:	f009 fea2 	bl	800b650 <HAL_RCCEx_PeriphCLKConfig>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8001912:	f000 f9fd 	bl	8001d10 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001916:	f44f 7000 	mov.w	r0, #512	; 0x200
 800191a:	f009 f81f 	bl	800a95c <HAL_PWREx_ControlVoltageScaling>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d001      	beq.n	8001928 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 8001924:	f000 f9f4 	bl	8001d10 <Error_Handler>
  }
}
 8001928:	bf00      	nop
 800192a:	37b8      	adds	r7, #184	; 0xb8
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}

08001930 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b086      	sub	sp, #24
 8001934:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001936:	463b      	mov	r3, r7
 8001938:	2200      	movs	r2, #0
 800193a:	601a      	str	r2, [r3, #0]
 800193c:	605a      	str	r2, [r3, #4]
 800193e:	609a      	str	r2, [r3, #8]
 8001940:	60da      	str	r2, [r3, #12]
 8001942:	611a      	str	r2, [r3, #16]
 8001944:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 8001946:	4b4c      	ldr	r3, [pc, #304]	; (8001a78 <MX_ADC1_Init+0x148>)
 8001948:	4a4c      	ldr	r2, [pc, #304]	; (8001a7c <MX_ADC1_Init+0x14c>)
 800194a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800194c:	4b4a      	ldr	r3, [pc, #296]	; (8001a78 <MX_ADC1_Init+0x148>)
 800194e:	2200      	movs	r2, #0
 8001950:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001952:	4b49      	ldr	r3, [pc, #292]	; (8001a78 <MX_ADC1_Init+0x148>)
 8001954:	2200      	movs	r2, #0
 8001956:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001958:	4b47      	ldr	r3, [pc, #284]	; (8001a78 <MX_ADC1_Init+0x148>)
 800195a:	2200      	movs	r2, #0
 800195c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800195e:	4b46      	ldr	r3, [pc, #280]	; (8001a78 <MX_ADC1_Init+0x148>)
 8001960:	2200      	movs	r2, #0
 8001962:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001964:	4b44      	ldr	r3, [pc, #272]	; (8001a78 <MX_ADC1_Init+0x148>)
 8001966:	2204      	movs	r2, #4
 8001968:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800196a:	4b43      	ldr	r3, [pc, #268]	; (8001a78 <MX_ADC1_Init+0x148>)
 800196c:	2200      	movs	r2, #0
 800196e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001970:	4b41      	ldr	r3, [pc, #260]	; (8001a78 <MX_ADC1_Init+0x148>)
 8001972:	2201      	movs	r2, #1
 8001974:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001976:	4b40      	ldr	r3, [pc, #256]	; (8001a78 <MX_ADC1_Init+0x148>)
 8001978:	2201      	movs	r2, #1
 800197a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800197c:	4b3e      	ldr	r3, [pc, #248]	; (8001a78 <MX_ADC1_Init+0x148>)
 800197e:	2200      	movs	r2, #0
 8001980:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 8001984:	4b3c      	ldr	r3, [pc, #240]	; (8001a78 <MX_ADC1_Init+0x148>)
 8001986:	2201      	movs	r2, #1
 8001988:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800198a:	4b3b      	ldr	r3, [pc, #236]	; (8001a78 <MX_ADC1_Init+0x148>)
 800198c:	2200      	movs	r2, #0
 800198e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001990:	4b39      	ldr	r3, [pc, #228]	; (8001a78 <MX_ADC1_Init+0x148>)
 8001992:	2200      	movs	r2, #0
 8001994:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001996:	4b38      	ldr	r3, [pc, #224]	; (8001a78 <MX_ADC1_Init+0x148>)
 8001998:	2200      	movs	r2, #0
 800199a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800199e:	4b36      	ldr	r3, [pc, #216]	; (8001a78 <MX_ADC1_Init+0x148>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80019a4:	4b34      	ldr	r3, [pc, #208]	; (8001a78 <MX_ADC1_Init+0x148>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80019ac:	4832      	ldr	r0, [pc, #200]	; (8001a78 <MX_ADC1_Init+0x148>)
 80019ae:	f006 fdc7 	bl	8008540 <HAL_ADC_Init>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d001      	beq.n	80019bc <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 80019b8:	f000 f9aa 	bl	8001d10 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80019bc:	4b30      	ldr	r3, [pc, #192]	; (8001a80 <MX_ADC1_Init+0x150>)
 80019be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80019c0:	2306      	movs	r3, #6
 80019c2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80019c4:	2300      	movs	r3, #0
 80019c6:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80019c8:	237f      	movs	r3, #127	; 0x7f
 80019ca:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80019cc:	2304      	movs	r3, #4
 80019ce:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80019d0:	2300      	movs	r3, #0
 80019d2:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019d4:	463b      	mov	r3, r7
 80019d6:	4619      	mov	r1, r3
 80019d8:	4827      	ldr	r0, [pc, #156]	; (8001a78 <MX_ADC1_Init+0x148>)
 80019da:	f007 f9af 	bl	8008d3c <HAL_ADC_ConfigChannel>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d001      	beq.n	80019e8 <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 80019e4:	f000 f994 	bl	8001d10 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  sConfig.Channel = ADC_CHANNEL_2;
 80019e8:	4b26      	ldr	r3, [pc, #152]	; (8001a84 <MX_ADC1_Init+0x154>)
 80019ea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80019ec:	230c      	movs	r3, #12
 80019ee:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80019f0:	2300      	movs	r3, #0
 80019f2:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80019f4:	237f      	movs	r3, #127	; 0x7f
 80019f6:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80019f8:	2304      	movs	r3, #4
 80019fa:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80019fc:	2300      	movs	r3, #0
 80019fe:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a00:	463b      	mov	r3, r7
 8001a02:	4619      	mov	r1, r3
 8001a04:	481c      	ldr	r0, [pc, #112]	; (8001a78 <MX_ADC1_Init+0x148>)
 8001a06:	f007 f999 	bl	8008d3c <HAL_ADC_ConfigChannel>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d001      	beq.n	8001a14 <MX_ADC1_Init+0xe4>
  {
	Error_Handler();
 8001a10:	f000 f97e 	bl	8001d10 <Error_Handler>
  }

  sConfig.Channel = ADC_CHANNEL_3;
 8001a14:	4b1c      	ldr	r3, [pc, #112]	; (8001a88 <MX_ADC1_Init+0x158>)
 8001a16:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001a18:	2312      	movs	r3, #18
 8001a1a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001a20:	237f      	movs	r3, #127	; 0x7f
 8001a22:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001a24:	2304      	movs	r3, #4
 8001a26:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a2c:	463b      	mov	r3, r7
 8001a2e:	4619      	mov	r1, r3
 8001a30:	4811      	ldr	r0, [pc, #68]	; (8001a78 <MX_ADC1_Init+0x148>)
 8001a32:	f007 f983 	bl	8008d3c <HAL_ADC_ConfigChannel>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d001      	beq.n	8001a40 <MX_ADC1_Init+0x110>
  {
	Error_Handler();
 8001a3c:	f000 f968 	bl	8001d10 <Error_Handler>
  }

  sConfig.Channel = ADC_CHANNEL_12;
 8001a40:	4b12      	ldr	r3, [pc, #72]	; (8001a8c <MX_ADC1_Init+0x15c>)
 8001a42:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_12;
 8001a44:	f44f 7303 	mov.w	r3, #524	; 0x20c
 8001a48:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001a4e:	237f      	movs	r3, #127	; 0x7f
 8001a50:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001a52:	2304      	movs	r3, #4
 8001a54:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001a56:	2300      	movs	r3, #0
 8001a58:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a5a:	463b      	mov	r3, r7
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	4806      	ldr	r0, [pc, #24]	; (8001a78 <MX_ADC1_Init+0x148>)
 8001a60:	f007 f96c 	bl	8008d3c <HAL_ADC_ConfigChannel>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d001      	beq.n	8001a6e <MX_ADC1_Init+0x13e>
  {
	Error_Handler();
 8001a6a:	f000 f951 	bl	8001d10 <Error_Handler>
  }

  /* USER CODE END ADC1_Init 2 */
  /* USER CODE END ADC1_Init 2 */

}
 8001a6e:	bf00      	nop
 8001a70:	3718      	adds	r7, #24
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	20000ba0 	.word	0x20000ba0
 8001a7c:	50040000 	.word	0x50040000
 8001a80:	04300002 	.word	0x04300002
 8001a84:	08600004 	.word	0x08600004
 8001a88:	0c900008 	.word	0x0c900008
 8001a8c:	32601000 	.word	0x32601000

08001a90 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001a94:	4b1b      	ldr	r3, [pc, #108]	; (8001b04 <MX_I2C2_Init+0x74>)
 8001a96:	4a1c      	ldr	r2, [pc, #112]	; (8001b08 <MX_I2C2_Init+0x78>)
 8001a98:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 8001a9a:	4b1a      	ldr	r3, [pc, #104]	; (8001b04 <MX_I2C2_Init+0x74>)
 8001a9c:	4a1b      	ldr	r2, [pc, #108]	; (8001b0c <MX_I2C2_Init+0x7c>)
 8001a9e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001aa0:	4b18      	ldr	r3, [pc, #96]	; (8001b04 <MX_I2C2_Init+0x74>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001aa6:	4b17      	ldr	r3, [pc, #92]	; (8001b04 <MX_I2C2_Init+0x74>)
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001aac:	4b15      	ldr	r3, [pc, #84]	; (8001b04 <MX_I2C2_Init+0x74>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001ab2:	4b14      	ldr	r3, [pc, #80]	; (8001b04 <MX_I2C2_Init+0x74>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001ab8:	4b12      	ldr	r3, [pc, #72]	; (8001b04 <MX_I2C2_Init+0x74>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001abe:	4b11      	ldr	r3, [pc, #68]	; (8001b04 <MX_I2C2_Init+0x74>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ac4:	4b0f      	ldr	r3, [pc, #60]	; (8001b04 <MX_I2C2_Init+0x74>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001aca:	480e      	ldr	r0, [pc, #56]	; (8001b04 <MX_I2C2_Init+0x74>)
 8001acc:	f008 fba8 	bl	800a220 <HAL_I2C_Init>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d001      	beq.n	8001ada <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001ad6:	f000 f91b 	bl	8001d10 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001ada:	2100      	movs	r1, #0
 8001adc:	4809      	ldr	r0, [pc, #36]	; (8001b04 <MX_I2C2_Init+0x74>)
 8001ade:	f008 fe97 	bl	800a810 <HAL_I2CEx_ConfigAnalogFilter>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d001      	beq.n	8001aec <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001ae8:	f000 f912 	bl	8001d10 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001aec:	2100      	movs	r1, #0
 8001aee:	4805      	ldr	r0, [pc, #20]	; (8001b04 <MX_I2C2_Init+0x74>)
 8001af0:	f008 fed9 	bl	800a8a6 <HAL_I2CEx_ConfigDigitalFilter>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d001      	beq.n	8001afe <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001afa:	f000 f909 	bl	8001d10 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001afe:	bf00      	nop
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	20000b54 	.word	0x20000b54
 8001b08:	40005800 	.word	0x40005800
 8001b0c:	10909cec 	.word	0x10909cec

08001b10 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b084      	sub	sp, #16
 8001b14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b16:	1d3b      	adds	r3, r7, #4
 8001b18:	2200      	movs	r2, #0
 8001b1a:	601a      	str	r2, [r3, #0]
 8001b1c:	605a      	str	r2, [r3, #4]
 8001b1e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001b20:	4b11      	ldr	r3, [pc, #68]	; (8001b68 <MX_TIM6_Init+0x58>)
 8001b22:	4a12      	ldr	r2, [pc, #72]	; (8001b6c <MX_TIM6_Init+0x5c>)
 8001b24:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 83;
 8001b26:	4b10      	ldr	r3, [pc, #64]	; (8001b68 <MX_TIM6_Init+0x58>)
 8001b28:	2253      	movs	r2, #83	; 0x53
 8001b2a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b2c:	4b0e      	ldr	r3, [pc, #56]	; (8001b68 <MX_TIM6_Init+0x58>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 4200;
 8001b32:	4b0d      	ldr	r3, [pc, #52]	; (8001b68 <MX_TIM6_Init+0x58>)
 8001b34:	f241 0268 	movw	r2, #4200	; 0x1068
 8001b38:	60da      	str	r2, [r3, #12]
    htim6.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1; // Adicionada
 8001b3a:	4b0b      	ldr	r3, [pc, #44]	; (8001b68 <MX_TIM6_Init+0x58>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	611a      	str	r2, [r3, #16]
  //htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
  {
    Error_Handler();
 8001b40:	f000 f8e6 	bl	8001d10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b44:	2300      	movs	r3, #0
 8001b46:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001b4c:	1d3b      	adds	r3, r7, #4
 8001b4e:	4619      	mov	r1, r3
 8001b50:	4805      	ldr	r0, [pc, #20]	; (8001b68 <MX_TIM6_Init+0x58>)
 8001b52:	f00a f8b1 	bl	800bcb8 <HAL_TIMEx_MasterConfigSynchronization>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d001      	beq.n	8001b60 <MX_TIM6_Init+0x50>
  {
    Error_Handler();
 8001b5c:	f000 f8d8 	bl	8001d10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001b60:	bf00      	nop
 8001b62:	3710      	adds	r7, #16
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	20000c94 	.word	0x20000c94
 8001b6c:	40001000 	.word	0x40001000

08001b70 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b74:	4b14      	ldr	r3, [pc, #80]	; (8001bc8 <MX_USART2_UART_Init+0x58>)
 8001b76:	4a15      	ldr	r2, [pc, #84]	; (8001bcc <MX_USART2_UART_Init+0x5c>)
 8001b78:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001b7a:	4b13      	ldr	r3, [pc, #76]	; (8001bc8 <MX_USART2_UART_Init+0x58>)
 8001b7c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b80:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b82:	4b11      	ldr	r3, [pc, #68]	; (8001bc8 <MX_USART2_UART_Init+0x58>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b88:	4b0f      	ldr	r3, [pc, #60]	; (8001bc8 <MX_USART2_UART_Init+0x58>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b8e:	4b0e      	ldr	r3, [pc, #56]	; (8001bc8 <MX_USART2_UART_Init+0x58>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b94:	4b0c      	ldr	r3, [pc, #48]	; (8001bc8 <MX_USART2_UART_Init+0x58>)
 8001b96:	220c      	movs	r2, #12
 8001b98:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b9a:	4b0b      	ldr	r3, [pc, #44]	; (8001bc8 <MX_USART2_UART_Init+0x58>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ba0:	4b09      	ldr	r3, [pc, #36]	; (8001bc8 <MX_USART2_UART_Init+0x58>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ba6:	4b08      	ldr	r3, [pc, #32]	; (8001bc8 <MX_USART2_UART_Init+0x58>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001bac:	4b06      	ldr	r3, [pc, #24]	; (8001bc8 <MX_USART2_UART_Init+0x58>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001bb2:	4805      	ldr	r0, [pc, #20]	; (8001bc8 <MX_USART2_UART_Init+0x58>)
 8001bb4:	f00a f8e6 	bl	800bd84 <HAL_UART_Init>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d001      	beq.n	8001bc2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001bbe:	f000 f8a7 	bl	8001d10 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001bc2:	bf00      	nop
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	20000cd4 	.word	0x20000cd4
 8001bcc:	40004400 	.word	0x40004400

08001bd0 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001bd6:	4b10      	ldr	r3, [pc, #64]	; (8001c18 <MX_DMA_Init+0x48>)
 8001bd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bda:	4a0f      	ldr	r2, [pc, #60]	; (8001c18 <MX_DMA_Init+0x48>)
 8001bdc:	f043 0301 	orr.w	r3, r3, #1
 8001be0:	6493      	str	r3, [r2, #72]	; 0x48
 8001be2:	4b0d      	ldr	r3, [pc, #52]	; (8001c18 <MX_DMA_Init+0x48>)
 8001be4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001be6:	f003 0301 	and.w	r3, r3, #1
 8001bea:	607b      	str	r3, [r7, #4]
 8001bec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 8001bee:	2200      	movs	r2, #0
 8001bf0:	2101      	movs	r1, #1
 8001bf2:	200b      	movs	r0, #11
 8001bf4:	f007 fefd 	bl	80099f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001bf8:	200b      	movs	r0, #11
 8001bfa:	f007 ff16 	bl	8009a2a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001bfe:	2200      	movs	r2, #0
 8001c00:	2100      	movs	r1, #0
 8001c02:	200d      	movs	r0, #13
 8001c04:	f007 fef5 	bl	80099f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001c08:	200d      	movs	r0, #13
 8001c0a:	f007 ff0e 	bl	8009a2a <HAL_NVIC_EnableIRQ>

}
 8001c0e:	bf00      	nop
 8001c10:	3708      	adds	r7, #8
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	40021000 	.word	0x40021000

08001c1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b08a      	sub	sp, #40	; 0x28
 8001c20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c22:	f107 0314 	add.w	r3, r7, #20
 8001c26:	2200      	movs	r2, #0
 8001c28:	601a      	str	r2, [r3, #0]
 8001c2a:	605a      	str	r2, [r3, #4]
 8001c2c:	609a      	str	r2, [r3, #8]
 8001c2e:	60da      	str	r2, [r3, #12]
 8001c30:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c32:	4b35      	ldr	r3, [pc, #212]	; (8001d08 <MX_GPIO_Init+0xec>)
 8001c34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c36:	4a34      	ldr	r2, [pc, #208]	; (8001d08 <MX_GPIO_Init+0xec>)
 8001c38:	f043 0304 	orr.w	r3, r3, #4
 8001c3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c3e:	4b32      	ldr	r3, [pc, #200]	; (8001d08 <MX_GPIO_Init+0xec>)
 8001c40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c42:	f003 0304 	and.w	r3, r3, #4
 8001c46:	613b      	str	r3, [r7, #16]
 8001c48:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c4a:	4b2f      	ldr	r3, [pc, #188]	; (8001d08 <MX_GPIO_Init+0xec>)
 8001c4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c4e:	4a2e      	ldr	r2, [pc, #184]	; (8001d08 <MX_GPIO_Init+0xec>)
 8001c50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c56:	4b2c      	ldr	r3, [pc, #176]	; (8001d08 <MX_GPIO_Init+0xec>)
 8001c58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c5e:	60fb      	str	r3, [r7, #12]
 8001c60:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c62:	4b29      	ldr	r3, [pc, #164]	; (8001d08 <MX_GPIO_Init+0xec>)
 8001c64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c66:	4a28      	ldr	r2, [pc, #160]	; (8001d08 <MX_GPIO_Init+0xec>)
 8001c68:	f043 0301 	orr.w	r3, r3, #1
 8001c6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c6e:	4b26      	ldr	r3, [pc, #152]	; (8001d08 <MX_GPIO_Init+0xec>)
 8001c70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c72:	f003 0301 	and.w	r3, r3, #1
 8001c76:	60bb      	str	r3, [r7, #8]
 8001c78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c7a:	4b23      	ldr	r3, [pc, #140]	; (8001d08 <MX_GPIO_Init+0xec>)
 8001c7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c7e:	4a22      	ldr	r2, [pc, #136]	; (8001d08 <MX_GPIO_Init+0xec>)
 8001c80:	f043 0302 	orr.w	r3, r3, #2
 8001c84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c86:	4b20      	ldr	r3, [pc, #128]	; (8001d08 <MX_GPIO_Init+0xec>)
 8001c88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c8a:	f003 0302 	and.w	r3, r3, #2
 8001c8e:	607b      	str	r3, [r7, #4]
 8001c90:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP_EN_GPIO_Port, ESP_EN_Pin, GPIO_PIN_RESET);
 8001c92:	2200      	movs	r2, #0
 8001c94:	2120      	movs	r1, #32
 8001c96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c9a:	f008 faa9 	bl	800a1f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP_POWER_EN_GPIO_Port, ESP_POWER_EN_Pin, GPIO_PIN_SET);
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ca4:	4819      	ldr	r0, [pc, #100]	; (8001d0c <MX_GPIO_Init+0xf0>)
 8001ca6:	f008 faa3 	bl	800a1f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001caa:	2301      	movs	r3, #1
 8001cac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cb6:	f107 0314 	add.w	r3, r7, #20
 8001cba:	4619      	mov	r1, r3
 8001cbc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cc0:	f008 f904 	bl	8009ecc <HAL_GPIO_Init>

  /*Configure GPIO pin : ESP_EN_Pin */
  GPIO_InitStruct.Pin = ESP_EN_Pin;
 8001cc4:	2320      	movs	r3, #32
 8001cc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ESP_EN_GPIO_Port, &GPIO_InitStruct);
 8001cd4:	f107 0314 	add.w	r3, r7, #20
 8001cd8:	4619      	mov	r1, r3
 8001cda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cde:	f008 f8f5 	bl	8009ecc <HAL_GPIO_Init>

  /*Configure GPIO pin : ESP_POWER_EN_Pin */
  GPIO_InitStruct.Pin = ESP_POWER_EN_Pin;
 8001ce2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ce6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cec:	2300      	movs	r3, #0
 8001cee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ESP_POWER_EN_GPIO_Port, &GPIO_InitStruct);
 8001cf4:	f107 0314 	add.w	r3, r7, #20
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	4804      	ldr	r0, [pc, #16]	; (8001d0c <MX_GPIO_Init+0xf0>)
 8001cfc:	f008 f8e6 	bl	8009ecc <HAL_GPIO_Init>

}
 8001d00:	bf00      	nop
 8001d02:	3728      	adds	r7, #40	; 0x28
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	40021000 	.word	0x40021000
 8001d0c:	48000400 	.word	0x48000400

08001d10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001d14:	bf00      	nop
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr
	...

08001d20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d26:	4b0f      	ldr	r3, [pc, #60]	; (8001d64 <HAL_MspInit+0x44>)
 8001d28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d2a:	4a0e      	ldr	r2, [pc, #56]	; (8001d64 <HAL_MspInit+0x44>)
 8001d2c:	f043 0301 	orr.w	r3, r3, #1
 8001d30:	6613      	str	r3, [r2, #96]	; 0x60
 8001d32:	4b0c      	ldr	r3, [pc, #48]	; (8001d64 <HAL_MspInit+0x44>)
 8001d34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d36:	f003 0301 	and.w	r3, r3, #1
 8001d3a:	607b      	str	r3, [r7, #4]
 8001d3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d3e:	4b09      	ldr	r3, [pc, #36]	; (8001d64 <HAL_MspInit+0x44>)
 8001d40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d42:	4a08      	ldr	r2, [pc, #32]	; (8001d64 <HAL_MspInit+0x44>)
 8001d44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d48:	6593      	str	r3, [r2, #88]	; 0x58
 8001d4a:	4b06      	ldr	r3, [pc, #24]	; (8001d64 <HAL_MspInit+0x44>)
 8001d4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d52:	603b      	str	r3, [r7, #0]
 8001d54:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d56:	bf00      	nop
 8001d58:	370c      	adds	r7, #12
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr
 8001d62:	bf00      	nop
 8001d64:	40021000 	.word	0x40021000

08001d68 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b08a      	sub	sp, #40	; 0x28
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d70:	f107 0314 	add.w	r3, r7, #20
 8001d74:	2200      	movs	r2, #0
 8001d76:	601a      	str	r2, [r3, #0]
 8001d78:	605a      	str	r2, [r3, #4]
 8001d7a:	609a      	str	r2, [r3, #8]
 8001d7c:	60da      	str	r2, [r3, #12]
 8001d7e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a3b      	ldr	r2, [pc, #236]	; (8001e74 <HAL_ADC_MspInit+0x10c>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d16f      	bne.n	8001e6a <HAL_ADC_MspInit+0x102>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001d8a:	4b3b      	ldr	r3, [pc, #236]	; (8001e78 <HAL_ADC_MspInit+0x110>)
 8001d8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d8e:	4a3a      	ldr	r2, [pc, #232]	; (8001e78 <HAL_ADC_MspInit+0x110>)
 8001d90:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001d94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d96:	4b38      	ldr	r3, [pc, #224]	; (8001e78 <HAL_ADC_MspInit+0x110>)
 8001d98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d9a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d9e:	613b      	str	r3, [r7, #16]
 8001da0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001da2:	4b35      	ldr	r3, [pc, #212]	; (8001e78 <HAL_ADC_MspInit+0x110>)
 8001da4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001da6:	4a34      	ldr	r2, [pc, #208]	; (8001e78 <HAL_ADC_MspInit+0x110>)
 8001da8:	f043 0304 	orr.w	r3, r3, #4
 8001dac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dae:	4b32      	ldr	r3, [pc, #200]	; (8001e78 <HAL_ADC_MspInit+0x110>)
 8001db0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001db2:	f003 0304 	and.w	r3, r3, #4
 8001db6:	60fb      	str	r3, [r7, #12]
 8001db8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dba:	4b2f      	ldr	r3, [pc, #188]	; (8001e78 <HAL_ADC_MspInit+0x110>)
 8001dbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dbe:	4a2e      	ldr	r2, [pc, #184]	; (8001e78 <HAL_ADC_MspInit+0x110>)
 8001dc0:	f043 0301 	orr.w	r3, r3, #1
 8001dc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dc6:	4b2c      	ldr	r3, [pc, #176]	; (8001e78 <HAL_ADC_MspInit+0x110>)
 8001dc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dca:	f003 0301 	and.w	r3, r3, #1
 8001dce:	60bb      	str	r3, [r7, #8]
 8001dd0:	68bb      	ldr	r3, [r7, #8]
    PC0     ------> ADC1_IN1
    PC1     ------> ADC1_IN2
    PC2     ------> ADC1_IN3
    PA7     ------> ADC1_IN12 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001dd2:	2307      	movs	r3, #7
 8001dd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001dd6:	230b      	movs	r3, #11
 8001dd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dde:	f107 0314 	add.w	r3, r7, #20
 8001de2:	4619      	mov	r1, r3
 8001de4:	4825      	ldr	r0, [pc, #148]	; (8001e7c <HAL_ADC_MspInit+0x114>)
 8001de6:	f008 f871 	bl	8009ecc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001dea:	2380      	movs	r3, #128	; 0x80
 8001dec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001dee:	230b      	movs	r3, #11
 8001df0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df2:	2300      	movs	r3, #0
 8001df4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001df6:	f107 0314 	add.w	r3, r7, #20
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e00:	f008 f864 	bl	8009ecc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001e04:	4b1e      	ldr	r3, [pc, #120]	; (8001e80 <HAL_ADC_MspInit+0x118>)
 8001e06:	4a1f      	ldr	r2, [pc, #124]	; (8001e84 <HAL_ADC_MspInit+0x11c>)
 8001e08:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8001e0a:	4b1d      	ldr	r3, [pc, #116]	; (8001e80 <HAL_ADC_MspInit+0x118>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e10:	4b1b      	ldr	r3, [pc, #108]	; (8001e80 <HAL_ADC_MspInit+0x118>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e16:	4b1a      	ldr	r3, [pc, #104]	; (8001e80 <HAL_ADC_MspInit+0x118>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001e1c:	4b18      	ldr	r3, [pc, #96]	; (8001e80 <HAL_ADC_MspInit+0x118>)
 8001e1e:	2280      	movs	r2, #128	; 0x80
 8001e20:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001e22:	4b17      	ldr	r3, [pc, #92]	; (8001e80 <HAL_ADC_MspInit+0x118>)
 8001e24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e28:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001e2a:	4b15      	ldr	r3, [pc, #84]	; (8001e80 <HAL_ADC_MspInit+0x118>)
 8001e2c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001e30:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001e32:	4b13      	ldr	r3, [pc, #76]	; (8001e80 <HAL_ADC_MspInit+0x118>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001e38:	4b11      	ldr	r3, [pc, #68]	; (8001e80 <HAL_ADC_MspInit+0x118>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001e3e:	4810      	ldr	r0, [pc, #64]	; (8001e80 <HAL_ADC_MspInit+0x118>)
 8001e40:	f007 fe0e 	bl	8009a60 <HAL_DMA_Init>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d001      	beq.n	8001e4e <HAL_ADC_MspInit+0xe6>
    {
      Error_Handler();
 8001e4a:	f7ff ff61 	bl	8001d10 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	4a0b      	ldr	r2, [pc, #44]	; (8001e80 <HAL_ADC_MspInit+0x118>)
 8001e52:	64da      	str	r2, [r3, #76]	; 0x4c
 8001e54:	4a0a      	ldr	r2, [pc, #40]	; (8001e80 <HAL_ADC_MspInit+0x118>)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 1, 0);
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	2101      	movs	r1, #1
 8001e5e:	2012      	movs	r0, #18
 8001e60:	f007 fdc7 	bl	80099f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8001e64:	2012      	movs	r0, #18
 8001e66:	f007 fde0 	bl	8009a2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001e6a:	bf00      	nop
 8001e6c:	3728      	adds	r7, #40	; 0x28
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	50040000 	.word	0x50040000
 8001e78:	40021000 	.word	0x40021000
 8001e7c:	48000800 	.word	0x48000800
 8001e80:	20000c4c 	.word	0x20000c4c
 8001e84:	40020008 	.word	0x40020008

08001e88 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b08a      	sub	sp, #40	; 0x28
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e90:	f107 0314 	add.w	r3, r7, #20
 8001e94:	2200      	movs	r2, #0
 8001e96:	601a      	str	r2, [r3, #0]
 8001e98:	605a      	str	r2, [r3, #4]
 8001e9a:	609a      	str	r2, [r3, #8]
 8001e9c:	60da      	str	r2, [r3, #12]
 8001e9e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a17      	ldr	r2, [pc, #92]	; (8001f04 <HAL_I2C_MspInit+0x7c>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d128      	bne.n	8001efc <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eaa:	4b17      	ldr	r3, [pc, #92]	; (8001f08 <HAL_I2C_MspInit+0x80>)
 8001eac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eae:	4a16      	ldr	r2, [pc, #88]	; (8001f08 <HAL_I2C_MspInit+0x80>)
 8001eb0:	f043 0302 	orr.w	r3, r3, #2
 8001eb4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001eb6:	4b14      	ldr	r3, [pc, #80]	; (8001f08 <HAL_I2C_MspInit+0x80>)
 8001eb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eba:	f003 0302 	and.w	r3, r3, #2
 8001ebe:	613b      	str	r3, [r7, #16]
 8001ec0:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration    
    PB11     ------> I2C2_SDA
    PB13     ------> I2C2_SCL 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8001ec2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001ec6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ec8:	2312      	movs	r3, #18
 8001eca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ed0:	2303      	movs	r3, #3
 8001ed2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001ed4:	2304      	movs	r3, #4
 8001ed6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ed8:	f107 0314 	add.w	r3, r7, #20
 8001edc:	4619      	mov	r1, r3
 8001ede:	480b      	ldr	r0, [pc, #44]	; (8001f0c <HAL_I2C_MspInit+0x84>)
 8001ee0:	f007 fff4 	bl	8009ecc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001ee4:	4b08      	ldr	r3, [pc, #32]	; (8001f08 <HAL_I2C_MspInit+0x80>)
 8001ee6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ee8:	4a07      	ldr	r2, [pc, #28]	; (8001f08 <HAL_I2C_MspInit+0x80>)
 8001eea:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001eee:	6593      	str	r3, [r2, #88]	; 0x58
 8001ef0:	4b05      	ldr	r3, [pc, #20]	; (8001f08 <HAL_I2C_MspInit+0x80>)
 8001ef2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ef4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ef8:	60fb      	str	r3, [r7, #12]
 8001efa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001efc:	bf00      	nop
 8001efe:	3728      	adds	r7, #40	; 0x28
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	40005800 	.word	0x40005800
 8001f08:	40021000 	.word	0x40021000
 8001f0c:	48000400 	.word	0x48000400

08001f10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b08a      	sub	sp, #40	; 0x28
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f18:	f107 0314 	add.w	r3, r7, #20
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	601a      	str	r2, [r3, #0]
 8001f20:	605a      	str	r2, [r3, #4]
 8001f22:	609a      	str	r2, [r3, #8]
 8001f24:	60da      	str	r2, [r3, #12]
 8001f26:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a17      	ldr	r2, [pc, #92]	; (8001f8c <HAL_UART_MspInit+0x7c>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d128      	bne.n	8001f84 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f32:	4b17      	ldr	r3, [pc, #92]	; (8001f90 <HAL_UART_MspInit+0x80>)
 8001f34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f36:	4a16      	ldr	r2, [pc, #88]	; (8001f90 <HAL_UART_MspInit+0x80>)
 8001f38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f3c:	6593      	str	r3, [r2, #88]	; 0x58
 8001f3e:	4b14      	ldr	r3, [pc, #80]	; (8001f90 <HAL_UART_MspInit+0x80>)
 8001f40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f46:	613b      	str	r3, [r7, #16]
 8001f48:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f4a:	4b11      	ldr	r3, [pc, #68]	; (8001f90 <HAL_UART_MspInit+0x80>)
 8001f4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f4e:	4a10      	ldr	r2, [pc, #64]	; (8001f90 <HAL_UART_MspInit+0x80>)
 8001f50:	f043 0301 	orr.w	r3, r3, #1
 8001f54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f56:	4b0e      	ldr	r3, [pc, #56]	; (8001f90 <HAL_UART_MspInit+0x80>)
 8001f58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f5a:	f003 0301 	and.w	r3, r3, #1
 8001f5e:	60fb      	str	r3, [r7, #12]
 8001f60:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001f62:	230c      	movs	r3, #12
 8001f64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f66:	2302      	movs	r3, #2
 8001f68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f72:	2307      	movs	r3, #7
 8001f74:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f76:	f107 0314 	add.w	r3, r7, #20
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f80:	f007 ffa4 	bl	8009ecc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001f84:	bf00      	nop
 8001f86:	3728      	adds	r7, #40	; 0x28
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	40004400 	.word	0x40004400
 8001f90:	40021000 	.word	0x40021000

08001f94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001f98:	bf00      	nop
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr

08001fa2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fa2:	b480      	push	{r7}
 8001fa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fa6:	e7fe      	b.n	8001fa6 <HardFault_Handler+0x4>

08001fa8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fac:	e7fe      	b.n	8001fac <MemManage_Handler+0x4>

08001fae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fae:	b480      	push	{r7}
 8001fb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fb2:	e7fe      	b.n	8001fb2 <BusFault_Handler+0x4>

08001fb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fb8:	e7fe      	b.n	8001fb8 <UsageFault_Handler+0x4>

08001fba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fba:	b480      	push	{r7}
 8001fbc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fbe:	bf00      	nop
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr

08001fc8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fcc:	bf00      	nop
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr

08001fd6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fd6:	b480      	push	{r7}
 8001fd8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fda:	bf00      	nop
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr

08001fe4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fe8:	f006 f84e 	bl	8008088 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fec:	bf00      	nop
 8001fee:	bd80      	pop	{r7, pc}

08001ff0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001ff4:	4802      	ldr	r0, [pc, #8]	; (8002000 <DMA1_Channel1_IRQHandler+0x10>)
 8001ff6:	f007 fe89 	bl	8009d0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001ffa:	bf00      	nop
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	20000c4c 	.word	0x20000c4c

08002004 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim6_up);
 8002008:	4802      	ldr	r0, [pc, #8]	; (8002014 <DMA1_Channel3_IRQHandler+0x10>)
 800200a:	f007 fe7f 	bl	8009d0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800200e:	bf00      	nop
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	20000c04 	.word	0x20000c04

08002018 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800201c:	4802      	ldr	r0, [pc, #8]	; (8002028 <ADC1_IRQHandler+0x10>)
 800201e:	f006 fcba 	bl	8008996 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8002022:	bf00      	nop
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	20000ba0 	.word	0x20000ba0

0800202c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800202c:	b480      	push	{r7}
 800202e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002030:	4b17      	ldr	r3, [pc, #92]	; (8002090 <SystemInit+0x64>)
 8002032:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002036:	4a16      	ldr	r2, [pc, #88]	; (8002090 <SystemInit+0x64>)
 8002038:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800203c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002040:	4b14      	ldr	r3, [pc, #80]	; (8002094 <SystemInit+0x68>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a13      	ldr	r2, [pc, #76]	; (8002094 <SystemInit+0x68>)
 8002046:	f043 0301 	orr.w	r3, r3, #1
 800204a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800204c:	4b11      	ldr	r3, [pc, #68]	; (8002094 <SystemInit+0x68>)
 800204e:	2200      	movs	r2, #0
 8002050:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8002052:	4b10      	ldr	r3, [pc, #64]	; (8002094 <SystemInit+0x68>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a0f      	ldr	r2, [pc, #60]	; (8002094 <SystemInit+0x68>)
 8002058:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800205c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8002060:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8002062:	4b0c      	ldr	r3, [pc, #48]	; (8002094 <SystemInit+0x68>)
 8002064:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002068:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800206a:	4b0a      	ldr	r3, [pc, #40]	; (8002094 <SystemInit+0x68>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a09      	ldr	r2, [pc, #36]	; (8002094 <SystemInit+0x68>)
 8002070:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002074:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8002076:	4b07      	ldr	r3, [pc, #28]	; (8002094 <SystemInit+0x68>)
 8002078:	2200      	movs	r2, #0
 800207a:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800207c:	4b04      	ldr	r3, [pc, #16]	; (8002090 <SystemInit+0x64>)
 800207e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002082:	609a      	str	r2, [r3, #8]
#endif
}
 8002084:	bf00      	nop
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr
 800208e:	bf00      	nop
 8002090:	e000ed00 	.word	0xe000ed00
 8002094:	40021000 	.word	0x40021000

08002098 <direct_memory_access_init>:
#include <dma/direct_memory_access.h>

direct_memory_access* direct_memory_access_instance = NULL;

direct_memory_access* direct_memory_access_init(ADC_HandleTypeDef* hadc, uint32_t number_channels){
 8002098:	b590      	push	{r4, r7, lr}
 800209a:	b083      	sub	sp, #12
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
 80020a0:	6039      	str	r1, [r7, #0]
	if( number_channels == 0 ) return NULL;
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d101      	bne.n	80020ac <direct_memory_access_init+0x14>
 80020a8:	2300      	movs	r3, #0
 80020aa:	e02c      	b.n	8002106 <direct_memory_access_init+0x6e>
	if( direct_memory_access_instance == NULL ){
 80020ac:	4b18      	ldr	r3, [pc, #96]	; (8002110 <direct_memory_access_init+0x78>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d126      	bne.n	8002102 <direct_memory_access_init+0x6a>
		direct_memory_access_instance = (direct_memory_access*) malloc(sizeof(direct_memory_access));
 80020b4:	2018      	movs	r0, #24
 80020b6:	f00a fb97 	bl	800c7e8 <malloc>
 80020ba:	4603      	mov	r3, r0
 80020bc:	461a      	mov	r2, r3
 80020be:	4b14      	ldr	r3, [pc, #80]	; (8002110 <direct_memory_access_init+0x78>)
 80020c0:	601a      	str	r2, [r3, #0]
		direct_memory_access_instance->hadc = hadc;
 80020c2:	4b13      	ldr	r3, [pc, #76]	; (8002110 <direct_memory_access_init+0x78>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	687a      	ldr	r2, [r7, #4]
 80020c8:	601a      	str	r2, [r3, #0]
		direct_memory_access_instance->number_channels = number_channels;
 80020ca:	4b11      	ldr	r3, [pc, #68]	; (8002110 <direct_memory_access_init+0x78>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	683a      	ldr	r2, [r7, #0]
 80020d0:	605a      	str	r2, [r3, #4]
		for(register uint32_t i = 0; i < number_channels; i++)
 80020d2:	2400      	movs	r4, #0
 80020d4:	e012      	b.n	80020fc <direct_memory_access_init+0x64>
			direct_memory_access_instance->adc_values[i] = (uint32_t) 0;
 80020d6:	4b0e      	ldr	r3, [pc, #56]	; (8002110 <direct_memory_access_init+0x78>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	1ca2      	adds	r2, r4, #2
 80020dc:	2100      	movs	r1, #0
 80020de:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
 80020e2:	0091      	lsls	r1, r2, #2
 80020e4:	4419      	add	r1, r3
 80020e6:	2000      	movs	r0, #0
 80020e8:	7048      	strb	r0, [r1, #1]
 80020ea:	0091      	lsls	r1, r2, #2
 80020ec:	4419      	add	r1, r3
 80020ee:	2000      	movs	r0, #0
 80020f0:	7088      	strb	r0, [r1, #2]
 80020f2:	0092      	lsls	r2, r2, #2
 80020f4:	441a      	add	r2, r3
 80020f6:	2300      	movs	r3, #0
 80020f8:	70d3      	strb	r3, [r2, #3]
		for(register uint32_t i = 0; i < number_channels; i++)
 80020fa:	3401      	adds	r4, #1
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	429c      	cmp	r4, r3
 8002100:	d3e9      	bcc.n	80020d6 <direct_memory_access_init+0x3e>
	}
	return direct_memory_access_instance;
 8002102:	4b03      	ldr	r3, [pc, #12]	; (8002110 <direct_memory_access_init+0x78>)
 8002104:	681b      	ldr	r3, [r3, #0]
}
 8002106:	4618      	mov	r0, r3
 8002108:	370c      	adds	r7, #12
 800210a:	46bd      	mov	sp, r7
 800210c:	bd90      	pop	{r4, r7, pc}
 800210e:	bf00      	nop
 8002110:	20000b00 	.word	0x20000b00

08002114 <direct_memory_access_start>:

void direct_memory_access_start(direct_memory_access* dma){
 8002114:	b580      	push	{r7, lr}
 8002116:	b082      	sub	sp, #8
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
	if( dma == NULL ) return;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d00a      	beq.n	8002138 <direct_memory_access_start+0x24>
	HAL_ADC_Start_DMA(dma->hadc, dma->adc_values, dma->number_channels);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6818      	ldr	r0, [r3, #0]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	f103 0108 	add.w	r1, r3, #8
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	461a      	mov	r2, r3
 8002132:	f006 fb4b 	bl	80087cc <HAL_ADC_Start_DMA>
 8002136:	e000      	b.n	800213a <direct_memory_access_start+0x26>
	if( dma == NULL ) return;
 8002138:	bf00      	nop
}
 800213a:	3708      	adds	r7, #8
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}

08002140 <direct_memory_access_get_adc_value>:

uint32_t direct_memory_access_get_adc_value(direct_memory_access* dma, uint32_t channel){
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
 8002148:	6039      	str	r1, [r7, #0]
	if( dma == NULL || channel < 0 ) return 0;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d101      	bne.n	8002154 <direct_memory_access_get_adc_value+0x14>
 8002150:	2300      	movs	r3, #0
 8002152:	e01e      	b.n	8002192 <direct_memory_access_get_adc_value+0x52>

	switch( channel ){
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	4a12      	ldr	r2, [pc, #72]	; (80021a0 <direct_memory_access_get_adc_value+0x60>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d010      	beq.n	800217e <direct_memory_access_get_adc_value+0x3e>
 800215c:	4a10      	ldr	r2, [pc, #64]	; (80021a0 <direct_memory_access_get_adc_value+0x60>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d803      	bhi.n	800216a <direct_memory_access_get_adc_value+0x2a>
 8002162:	4a10      	ldr	r2, [pc, #64]	; (80021a4 <direct_memory_access_get_adc_value+0x64>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d007      	beq.n	8002178 <direct_memory_access_get_adc_value+0x38>
 8002168:	e012      	b.n	8002190 <direct_memory_access_get_adc_value+0x50>
 800216a:	4a0f      	ldr	r2, [pc, #60]	; (80021a8 <direct_memory_access_get_adc_value+0x68>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d009      	beq.n	8002184 <direct_memory_access_get_adc_value+0x44>
 8002170:	4a0e      	ldr	r2, [pc, #56]	; (80021ac <direct_memory_access_get_adc_value+0x6c>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d009      	beq.n	800218a <direct_memory_access_get_adc_value+0x4a>
 8002176:	e00b      	b.n	8002190 <direct_memory_access_get_adc_value+0x50>
		case ADC_CHANNEL_1: return dma->adc_values[0];
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	e009      	b.n	8002192 <direct_memory_access_get_adc_value+0x52>
		case ADC_CHANNEL_2: return dma->adc_values[1];
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	68db      	ldr	r3, [r3, #12]
 8002182:	e006      	b.n	8002192 <direct_memory_access_get_adc_value+0x52>
		case ADC_CHANNEL_3: return dma->adc_values[2];
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	691b      	ldr	r3, [r3, #16]
 8002188:	e003      	b.n	8002192 <direct_memory_access_get_adc_value+0x52>
		case ADC_CHANNEL_12: return dma->adc_values[3];
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	695b      	ldr	r3, [r3, #20]
 800218e:	e000      	b.n	8002192 <direct_memory_access_get_adc_value+0x52>
		default: return 0;
 8002190:	2300      	movs	r3, #0
	}

}
 8002192:	4618      	mov	r0, r3
 8002194:	370c      	adds	r7, #12
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr
 800219e:	bf00      	nop
 80021a0:	08600004 	.word	0x08600004
 80021a4:	04300002 	.word	0x04300002
 80021a8:	0c900008 	.word	0x0c900008
 80021ac:	32601000 	.word	0x32601000

080021b0 <direct_memory_access_restart>:

void direct_memory_access_restart(direct_memory_access* dma){
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b082      	sub	sp, #8
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
	if( dma == NULL ) return;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d00f      	beq.n	80021de <direct_memory_access_restart+0x2e>
	HAL_ADC_Stop_DMA(dma->hadc);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4618      	mov	r0, r3
 80021c4:	f006 fb86 	bl	80088d4 <HAL_ADC_Stop_DMA>
	HAL_ADC_Start_DMA(dma->hadc, dma->adc_values, dma->number_channels);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6818      	ldr	r0, [r3, #0]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	f103 0108 	add.w	r1, r3, #8
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	461a      	mov	r2, r3
 80021d8:	f006 faf8 	bl	80087cc <HAL_ADC_Start_DMA>
 80021dc:	e000      	b.n	80021e0 <direct_memory_access_restart+0x30>
	if( dma == NULL ) return;
 80021de:	bf00      	nop
}
 80021e0:	3708      	adds	r7, #8
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}

080021e6 <HAL_ADC_ConvCpltCallback>:

// This function is based on a callback whenever the DMA reads from peripherals to memory
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 80021e6:	b480      	push	{r7}
 80021e8:	b083      	sub	sp, #12
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	6078      	str	r0, [r7, #4]

}
 80021ee:	bf00      	nop
 80021f0:	370c      	adds	r7, #12
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr

080021fa <ds18b20_init>:
#include<ds18b20/ds18b20.h>

ds18b20* ds18b20_init(GPIO_TypeDef* port, uint16_t pin){
 80021fa:	b580      	push	{r7, lr}
 80021fc:	b084      	sub	sp, #16
 80021fe:	af00      	add	r7, sp, #0
 8002200:	6078      	str	r0, [r7, #4]
 8002202:	460b      	mov	r3, r1
 8002204:	807b      	strh	r3, [r7, #2]
	ds18b20* result = (ds18b20*) malloc(sizeof(ds18b20));
 8002206:	2006      	movs	r0, #6
 8002208:	f00a faee 	bl	800c7e8 <malloc>
 800220c:	4603      	mov	r3, r0
 800220e:	60fb      	str	r3, [r7, #12]
	result->port = port;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	687a      	ldr	r2, [r7, #4]
 8002214:	601a      	str	r2, [r3, #0]
	result->pin = pin;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	887a      	ldrh	r2, [r7, #2]
 800221a:	809a      	strh	r2, [r3, #4]
	return result;
 800221c:	68fb      	ldr	r3, [r7, #12]
}
 800221e:	4618      	mov	r0, r3
 8002220:	3710      	adds	r7, #16
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}

08002226 <dsb18b20_is_presence>:
	if( ds18b20 == NULL ) return;
	free(ds18b20);
	ds18b20 = NULL;
}

uint8_t dsb18b20_is_presence(ds18b20* ds18b20){
 8002226:	b580      	push	{r7, lr}
 8002228:	b084      	sub	sp, #16
 800222a:	af00      	add	r7, sp, #0
 800222c:	6078      	str	r0, [r7, #4]
	if( ds18b20 == NULL ) return 0;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d101      	bne.n	8002238 <dsb18b20_is_presence+0x12>
 8002234:	2300      	movs	r3, #0
 8002236:	e036      	b.n	80022a6 <dsb18b20_is_presence+0x80>

	stm32_util_set_pin_output(ds18b20->port, ds18b20->pin);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	889b      	ldrh	r3, [r3, #4]
 8002240:	b29b      	uxth	r3, r3
 8002242:	4619      	mov	r1, r3
 8002244:	4610      	mov	r0, r2
 8002246:	f005 fd95 	bl	8007d74 <stm32_util_set_pin_output>
	HAL_GPIO_WritePin(ds18b20->port, ds18b20->pin, 0);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6818      	ldr	r0, [r3, #0]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	889b      	ldrh	r3, [r3, #4]
 8002252:	b29b      	uxth	r3, r3
 8002254:	2200      	movs	r2, #0
 8002256:	4619      	mov	r1, r3
 8002258:	f007 ffca 	bl	800a1f0 <HAL_GPIO_WritePin>
	stm32_util_delay_in_microseconds(480);
 800225c:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8002260:	f005 fdd4 	bl	8007e0c <stm32_util_delay_in_microseconds>
	stm32_util_set_pin_input(ds18b20->port, ds18b20->pin);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	889b      	ldrh	r3, [r3, #4]
 800226c:	b29b      	uxth	r3, r3
 800226e:	4619      	mov	r1, r3
 8002270:	4610      	mov	r0, r2
 8002272:	f005 fd9d 	bl	8007db0 <stm32_util_set_pin_input>
	stm32_util_delay_in_microseconds(80);
 8002276:	2050      	movs	r0, #80	; 0x50
 8002278:	f005 fdc8 	bl	8007e0c <stm32_util_delay_in_microseconds>

	uint8_t result = 0;
 800227c:	2300      	movs	r3, #0
 800227e:	73fb      	strb	r3, [r7, #15]
	if( ! HAL_GPIO_ReadPin(ds18b20->port, ds18b20->pin) ) result = 1;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	889b      	ldrh	r3, [r3, #4]
 8002288:	b29b      	uxth	r3, r3
 800228a:	4619      	mov	r1, r3
 800228c:	4610      	mov	r0, r2
 800228e:	f007 ff97 	bl	800a1c0 <HAL_GPIO_ReadPin>
 8002292:	4603      	mov	r3, r0
 8002294:	2b00      	cmp	r3, #0
 8002296:	d101      	bne.n	800229c <dsb18b20_is_presence+0x76>
 8002298:	2301      	movs	r3, #1
 800229a:	73fb      	strb	r3, [r7, #15]
	stm32_util_delay_in_microseconds(400);
 800229c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80022a0:	f005 fdb4 	bl	8007e0c <stm32_util_delay_in_microseconds>
	return result;
 80022a4:	7bfb      	ldrb	r3, [r7, #15]

}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3710      	adds	r7, #16
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}

080022ae <ds18b20_write>:

void ds18b20_write(ds18b20* ds18b20, uint8_t data){
 80022ae:	b580      	push	{r7, lr}
 80022b0:	b084      	sub	sp, #16
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	6078      	str	r0, [r7, #4]
 80022b6:	460b      	mov	r3, r1
 80022b8:	70fb      	strb	r3, [r7, #3]
	if( ds18b20 == NULL ) return;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d05a      	beq.n	8002376 <ds18b20_write+0xc8>

	stm32_util_set_pin_output(ds18b20->port, ds18b20->pin);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	889b      	ldrh	r3, [r3, #4]
 80022c8:	b29b      	uxth	r3, r3
 80022ca:	4619      	mov	r1, r3
 80022cc:	4610      	mov	r0, r2
 80022ce:	f005 fd51 	bl	8007d74 <stm32_util_set_pin_output>
	for (int i=0; i<8; i++){
 80022d2:	2300      	movs	r3, #0
 80022d4:	60fb      	str	r3, [r7, #12]
 80022d6:	e04a      	b.n	800236e <ds18b20_write+0xc0>
		if ( (data & (1<<i)) != 0 ){
 80022d8:	78fa      	ldrb	r2, [r7, #3]
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	fa42 f303 	asr.w	r3, r2, r3
 80022e0:	f003 0301 	and.w	r3, r3, #1
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d021      	beq.n	800232c <ds18b20_write+0x7e>
			stm32_util_set_pin_output(ds18b20->port, ds18b20->pin);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	889b      	ldrh	r3, [r3, #4]
 80022f0:	b29b      	uxth	r3, r3
 80022f2:	4619      	mov	r1, r3
 80022f4:	4610      	mov	r0, r2
 80022f6:	f005 fd3d 	bl	8007d74 <stm32_util_set_pin_output>
			HAL_GPIO_WritePin(ds18b20->port, ds18b20->pin, 0);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6818      	ldr	r0, [r3, #0]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	889b      	ldrh	r3, [r3, #4]
 8002302:	b29b      	uxth	r3, r3
 8002304:	2200      	movs	r2, #0
 8002306:	4619      	mov	r1, r3
 8002308:	f007 ff72 	bl	800a1f0 <HAL_GPIO_WritePin>
			stm32_util_delay_in_microseconds(1);
 800230c:	2001      	movs	r0, #1
 800230e:	f005 fd7d 	bl	8007e0c <stm32_util_delay_in_microseconds>
			stm32_util_set_pin_input(ds18b20->port, ds18b20->pin);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	889b      	ldrh	r3, [r3, #4]
 800231a:	b29b      	uxth	r3, r3
 800231c:	4619      	mov	r1, r3
 800231e:	4610      	mov	r0, r2
 8002320:	f005 fd46 	bl	8007db0 <stm32_util_set_pin_input>
			stm32_util_delay_in_microseconds(50);
 8002324:	2032      	movs	r0, #50	; 0x32
 8002326:	f005 fd71 	bl	8007e0c <stm32_util_delay_in_microseconds>
 800232a:	e01d      	b.n	8002368 <ds18b20_write+0xba>
		} else {
			stm32_util_set_pin_output(ds18b20->port, ds18b20->pin);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	889b      	ldrh	r3, [r3, #4]
 8002334:	b29b      	uxth	r3, r3
 8002336:	4619      	mov	r1, r3
 8002338:	4610      	mov	r0, r2
 800233a:	f005 fd1b 	bl	8007d74 <stm32_util_set_pin_output>
			HAL_GPIO_WritePin(ds18b20->port, ds18b20->pin, 0);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6818      	ldr	r0, [r3, #0]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	889b      	ldrh	r3, [r3, #4]
 8002346:	b29b      	uxth	r3, r3
 8002348:	2200      	movs	r2, #0
 800234a:	4619      	mov	r1, r3
 800234c:	f007 ff50 	bl	800a1f0 <HAL_GPIO_WritePin>
			stm32_util_delay_in_microseconds(50);
 8002350:	2032      	movs	r0, #50	; 0x32
 8002352:	f005 fd5b 	bl	8007e0c <stm32_util_delay_in_microseconds>
			stm32_util_set_pin_input(ds18b20->port, ds18b20->pin);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	889b      	ldrh	r3, [r3, #4]
 800235e:	b29b      	uxth	r3, r3
 8002360:	4619      	mov	r1, r3
 8002362:	4610      	mov	r0, r2
 8002364:	f005 fd24 	bl	8007db0 <stm32_util_set_pin_input>
	for (int i=0; i<8; i++){
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	3301      	adds	r3, #1
 800236c:	60fb      	str	r3, [r7, #12]
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	2b07      	cmp	r3, #7
 8002372:	ddb1      	ble.n	80022d8 <ds18b20_write+0x2a>
 8002374:	e000      	b.n	8002378 <ds18b20_write+0xca>
	if( ds18b20 == NULL ) return;
 8002376:	bf00      	nop
		}
	}
}
 8002378:	3710      	adds	r7, #16
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
	...

08002380 <ds18b20_read>:

float ds18b20_read(ds18b20* ds18b20){
 8002380:	b5b0      	push	{r4, r5, r7, lr}
 8002382:	b084      	sub	sp, #16
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
	if( ds18b20 == NULL ) return 0;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d102      	bne.n	8002394 <ds18b20_read+0x14>
 800238e:	f04f 0300 	mov.w	r3, #0
 8002392:	e089      	b.n	80024a8 <ds18b20_read+0x128>

	dsb18b20_is_presence(ds18b20);
 8002394:	6878      	ldr	r0, [r7, #4]
 8002396:	f7ff ff46 	bl	8002226 <dsb18b20_is_presence>
	stm32_util_delay_in_milliseconds(1);
 800239a:	2001      	movs	r0, #1
 800239c:	f005 fd41 	bl	8007e22 <stm32_util_delay_in_milliseconds>
	ds18b20_write(ds18b20, 0xCC);
 80023a0:	21cc      	movs	r1, #204	; 0xcc
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	f7ff ff83 	bl	80022ae <ds18b20_write>
	ds18b20_write(ds18b20, 0x44);
 80023a8:	2144      	movs	r1, #68	; 0x44
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	f7ff ff7f 	bl	80022ae <ds18b20_write>
	stm32_util_delay_in_milliseconds(800);
 80023b0:	f44f 7048 	mov.w	r0, #800	; 0x320
 80023b4:	f005 fd35 	bl	8007e22 <stm32_util_delay_in_milliseconds>

	dsb18b20_is_presence(ds18b20);
 80023b8:	6878      	ldr	r0, [r7, #4]
 80023ba:	f7ff ff34 	bl	8002226 <dsb18b20_is_presence>
	stm32_util_delay_in_milliseconds(1);
 80023be:	2001      	movs	r0, #1
 80023c0:	f005 fd2f 	bl	8007e22 <stm32_util_delay_in_milliseconds>
	ds18b20_write(ds18b20, 0xCC);
 80023c4:	21cc      	movs	r1, #204	; 0xcc
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	f7ff ff71 	bl	80022ae <ds18b20_write>
	ds18b20_write(ds18b20, 0xBE);
 80023cc:	21be      	movs	r1, #190	; 0xbe
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f7ff ff6d 	bl	80022ae <ds18b20_write>

	uint8_t value[] = {0,0};
 80023d4:	2300      	movs	r3, #0
 80023d6:	723b      	strb	r3, [r7, #8]
 80023d8:	2300      	movs	r3, #0
 80023da:	727b      	strb	r3, [r7, #9]
	for(register int j = 0; j < 2; j++){
 80023dc:	2400      	movs	r4, #0
 80023de:	e04c      	b.n	800247a <ds18b20_read+0xfa>
		stm32_util_set_pin_input(ds18b20->port, ds18b20->pin);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	889b      	ldrh	r3, [r3, #4]
 80023e8:	b29b      	uxth	r3, r3
 80023ea:	4619      	mov	r1, r3
 80023ec:	4610      	mov	r0, r2
 80023ee:	f005 fcdf 	bl	8007db0 <stm32_util_set_pin_input>
		for (register int i=0; i < 8; i++){
 80023f2:	2500      	movs	r5, #0
 80023f4:	e03e      	b.n	8002474 <ds18b20_read+0xf4>
			stm32_util_set_pin_output(ds18b20->port, ds18b20->pin);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	889b      	ldrh	r3, [r3, #4]
 80023fe:	b29b      	uxth	r3, r3
 8002400:	4619      	mov	r1, r3
 8002402:	4610      	mov	r0, r2
 8002404:	f005 fcb6 	bl	8007d74 <stm32_util_set_pin_output>
			HAL_GPIO_WritePin(ds18b20->port, ds18b20->pin, 0);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6818      	ldr	r0, [r3, #0]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	889b      	ldrh	r3, [r3, #4]
 8002410:	b29b      	uxth	r3, r3
 8002412:	2200      	movs	r2, #0
 8002414:	4619      	mov	r1, r3
 8002416:	f007 feeb 	bl	800a1f0 <HAL_GPIO_WritePin>
			stm32_util_delay_in_microseconds(1);
 800241a:	2001      	movs	r0, #1
 800241c:	f005 fcf6 	bl	8007e0c <stm32_util_delay_in_microseconds>
			stm32_util_set_pin_input(ds18b20->port, ds18b20->pin);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	889b      	ldrh	r3, [r3, #4]
 8002428:	b29b      	uxth	r3, r3
 800242a:	4619      	mov	r1, r3
 800242c:	4610      	mov	r0, r2
 800242e:	f005 fcbf 	bl	8007db0 <stm32_util_set_pin_input>
			if (HAL_GPIO_ReadPin(ds18b20->port, ds18b20->pin)) value[j] |= 1<<i;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	889b      	ldrh	r3, [r3, #4]
 800243a:	b29b      	uxth	r3, r3
 800243c:	4619      	mov	r1, r3
 800243e:	4610      	mov	r0, r2
 8002440:	f007 febe 	bl	800a1c0 <HAL_GPIO_ReadPin>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d010      	beq.n	800246c <ds18b20_read+0xec>
 800244a:	f107 0310 	add.w	r3, r7, #16
 800244e:	4423      	add	r3, r4
 8002450:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8002454:	b25a      	sxtb	r2, r3
 8002456:	2301      	movs	r3, #1
 8002458:	40ab      	lsls	r3, r5
 800245a:	b25b      	sxtb	r3, r3
 800245c:	4313      	orrs	r3, r2
 800245e:	b25b      	sxtb	r3, r3
 8002460:	b2da      	uxtb	r2, r3
 8002462:	f107 0310 	add.w	r3, r7, #16
 8002466:	4423      	add	r3, r4
 8002468:	f803 2c08 	strb.w	r2, [r3, #-8]
			stm32_util_delay_in_microseconds(50);
 800246c:	2032      	movs	r0, #50	; 0x32
 800246e:	f005 fccd 	bl	8007e0c <stm32_util_delay_in_microseconds>
		for (register int i=0; i < 8; i++){
 8002472:	3501      	adds	r5, #1
 8002474:	2d07      	cmp	r5, #7
 8002476:	ddbe      	ble.n	80023f6 <ds18b20_read+0x76>
	for(register int j = 0; j < 2; j++){
 8002478:	3401      	adds	r4, #1
 800247a:	2c01      	cmp	r4, #1
 800247c:	ddb0      	ble.n	80023e0 <ds18b20_read+0x60>
		}
	}
	float result =  ( (value[1] << 8) | value[0] ) / 16.0;
 800247e:	7a7b      	ldrb	r3, [r7, #9]
 8002480:	021b      	lsls	r3, r3, #8
 8002482:	7a3a      	ldrb	r2, [r7, #8]
 8002484:	4313      	orrs	r3, r2
 8002486:	4618      	mov	r0, r3
 8002488:	f7fe f85c 	bl	8000544 <__aeabi_i2d>
 800248c:	f04f 0200 	mov.w	r2, #0
 8002490:	4b09      	ldr	r3, [pc, #36]	; (80024b8 <ds18b20_read+0x138>)
 8002492:	f7fe f9eb 	bl	800086c <__aeabi_ddiv>
 8002496:	4603      	mov	r3, r0
 8002498:	460c      	mov	r4, r1
 800249a:	4618      	mov	r0, r3
 800249c:	4621      	mov	r1, r4
 800249e:	f7fe fbb3 	bl	8000c08 <__aeabi_d2f>
 80024a2:	4603      	mov	r3, r0
 80024a4:	60fb      	str	r3, [r7, #12]
	return result;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	ee07 3a90 	vmov	s15, r3
}
 80024ac:	eeb0 0a67 	vmov.f32	s0, s15
 80024b0:	3710      	adds	r7, #16
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bdb0      	pop	{r4, r5, r7, pc}
 80024b6:	bf00      	nop
 80024b8:	40300000 	.word	0x40300000

080024bc <at_init>:
uint8_t at_rx_cbuf_area[AT_CBUF_MAX];
ceb_cbuf_t at_cb;
at_cmd_t cmd;
volatile bool at_started = false;

bool at_init(void) {
 80024bc:	b580      	push	{r7, lr}
 80024be:	af00      	add	r7, sp, #0
    if(ceb_cbuf_init(&at_cb, at_rx_cbuf_area, AT_CBUF_MAX) == CEB_CBUF_OK)
 80024c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80024c4:	4907      	ldr	r1, [pc, #28]	; (80024e4 <at_init+0x28>)
 80024c6:	4808      	ldr	r0, [pc, #32]	; (80024e8 <at_init+0x2c>)
 80024c8:	f000 fbaa 	bl	8002c20 <ceb_cbuf_init>
 80024cc:	4603      	mov	r3, r0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d102      	bne.n	80024d8 <at_init+0x1c>
    	at_started = true;
 80024d2:	4b06      	ldr	r3, [pc, #24]	; (80024ec <at_init+0x30>)
 80024d4:	2201      	movs	r2, #1
 80024d6:	701a      	strb	r2, [r3, #0]

    return at_started;
 80024d8:	4b04      	ldr	r3, [pc, #16]	; (80024ec <at_init+0x30>)
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	b2db      	uxtb	r3, r3
}   
 80024de:	4618      	mov	r0, r3
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	20000d60 	.word	0x20000d60
 80024e8:	20000d54 	.word	0x20000d54
 80024ec:	20000b04 	.word	0x20000b04

080024f0 <at_send_cmd_blocking>:

ceb_cbuf_t* at_get_cbuf(void){
    return &at_cb;
}

at_status_t at_send_cmd_blocking(at_cmd_t* cmd, uint32_t tmrout_ms){
 80024f0:	b5b0      	push	{r4, r5, r7, lr}
 80024f2:	b0aa      	sub	sp, #168	; 0xa8
 80024f4:	af04      	add	r7, sp, #16
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	6039      	str	r1, [r7, #0]
    if(cmd->id >= AT_CMD_NONE)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	781b      	ldrb	r3, [r3, #0]
 80024fe:	2b13      	cmp	r3, #19
 8002500:	d901      	bls.n	8002506 <at_send_cmd_blocking+0x16>
        return AT_STATUS_INVAL_CMD;
 8002502:	2303      	movs	r3, #3
 8002504:	e366      	b.n	8002bd4 <at_send_cmd_blocking+0x6e4>

    // AT, if any
    hw_serial_tx(at_at, strlen((const char*)at_at));
 8002506:	4bb1      	ldr	r3, [pc, #708]	; (80027cc <at_send_cmd_blocking+0x2dc>)
 8002508:	681c      	ldr	r4, [r3, #0]
 800250a:	4bb0      	ldr	r3, [pc, #704]	; (80027cc <at_send_cmd_blocking+0x2dc>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4618      	mov	r0, r3
 8002510:	f7fd fe68 	bl	80001e4 <strlen>
 8002514:	4603      	mov	r3, r0
 8002516:	b29b      	uxth	r3, r3
 8002518:	4619      	mov	r1, r3
 800251a:	4620      	mov	r0, r4
 800251c:	f000 ff20 	bl	8003360 <hw_serial_tx>

    // base command name
    hw_serial_tx(at_cmd_basename_str[cmd->id], strlen((const char*)at_cmd_basename_str[cmd->id]));
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	461a      	mov	r2, r3
 8002526:	4baa      	ldr	r3, [pc, #680]	; (80027d0 <at_send_cmd_blocking+0x2e0>)
 8002528:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	781b      	ldrb	r3, [r3, #0]
 8002530:	461a      	mov	r2, r3
 8002532:	4ba7      	ldr	r3, [pc, #668]	; (80027d0 <at_send_cmd_blocking+0x2e0>)
 8002534:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002538:	4618      	mov	r0, r3
 800253a:	f7fd fe53 	bl	80001e4 <strlen>
 800253e:	4603      	mov	r3, r0
 8002540:	b29b      	uxth	r3, r3
 8002542:	4619      	mov	r1, r3
 8002544:	4620      	mov	r0, r4
 8002546:	f000 ff0b 	bl	8003360 <hw_serial_tx>

    // parameters, if any
    switch(cmd->id){
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	781b      	ldrb	r3, [r3, #0]
 800254e:	3b02      	subs	r3, #2
 8002550:	2b11      	cmp	r3, #17
 8002552:	f200 82ce 	bhi.w	8002af2 <at_send_cmd_blocking+0x602>
 8002556:	a201      	add	r2, pc, #4	; (adr r2, 800255c <at_send_cmd_blocking+0x6c>)
 8002558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800255c:	08002611 	.word	0x08002611
 8002560:	0800262d 	.word	0x0800262d
 8002564:	080025a5 	.word	0x080025a5
 8002568:	08002af3 	.word	0x08002af3
 800256c:	08002651 	.word	0x08002651
 8002570:	080026a7 	.word	0x080026a7
 8002574:	08002755 	.word	0x08002755
 8002578:	080026d9 	.word	0x080026d9
 800257c:	080027ed 	.word	0x080027ed
 8002580:	0800287f 	.word	0x0800287f
 8002584:	080028b3 	.word	0x080028b3
 8002588:	080025c9 	.word	0x080025c9
 800258c:	0800291b 	.word	0x0800291b
 8002590:	08002a79 	.word	0x08002a79
 8002594:	08002a17 	.word	0x08002a17
 8002598:	080028e7 	.word	0x080028e7
 800259c:	080025ed 	.word	0x080025ed
 80025a0:	08002aa7 	.word	0x08002aa7
        case AT_CMD_WIFI_AP_MODE: {
            uint8_t mode = '0' + cmd->payload.wifi_mode.ap_station;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	785b      	ldrb	r3, [r3, #1]
 80025a8:	3330      	adds	r3, #48	; 0x30
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
            hw_serial_tx((uint8_t *)"=", 1);
 80025b0:	2101      	movs	r1, #1
 80025b2:	4888      	ldr	r0, [pc, #544]	; (80027d4 <at_send_cmd_blocking+0x2e4>)
 80025b4:	f000 fed4 	bl	8003360 <hw_serial_tx>
            hw_serial_tx(&mode, 1);
 80025b8:	f107 0393 	add.w	r3, r7, #147	; 0x93
 80025bc:	2101      	movs	r1, #1
 80025be:	4618      	mov	r0, r3
 80025c0:	f000 fece 	bl	8003360 <hw_serial_tx>
            break;
 80025c4:	bf00      	nop
 80025c6:	e2ae      	b.n	8002b26 <at_send_cmd_blocking+0x636>
        }

        case AT_CMD_CON_MUX: {
            uint8_t mode = '0' + cmd->payload.mux.enabled;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	785b      	ldrb	r3, [r3, #1]
 80025cc:	3330      	adds	r3, #48	; 0x30
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
            hw_serial_tx((uint8_t *)"=", 1);
 80025d4:	2101      	movs	r1, #1
 80025d6:	487f      	ldr	r0, [pc, #508]	; (80027d4 <at_send_cmd_blocking+0x2e4>)
 80025d8:	f000 fec2 	bl	8003360 <hw_serial_tx>
            hw_serial_tx(&mode, 1);
 80025dc:	f107 0392 	add.w	r3, r7, #146	; 0x92
 80025e0:	2101      	movs	r1, #1
 80025e2:	4618      	mov	r0, r3
 80025e4:	f000 febc 	bl	8003360 <hw_serial_tx>
            break;
 80025e8:	bf00      	nop
 80025ea:	e29c      	b.n	8002b26 <at_send_cmd_blocking+0x636>
        }

        case AT_CMD_CON_MODE: {
            uint8_t mode = '0' + cmd->payload.con_mode.mode;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	785b      	ldrb	r3, [r3, #1]
 80025f0:	3330      	adds	r3, #48	; 0x30
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91
            hw_serial_tx((uint8_t *)"=", 1);
 80025f8:	2101      	movs	r1, #1
 80025fa:	4876      	ldr	r0, [pc, #472]	; (80027d4 <at_send_cmd_blocking+0x2e4>)
 80025fc:	f000 feb0 	bl	8003360 <hw_serial_tx>
            hw_serial_tx(&mode, 1);
 8002600:	f107 0391 	add.w	r3, r7, #145	; 0x91
 8002604:	2101      	movs	r1, #1
 8002606:	4618      	mov	r0, r3
 8002608:	f000 feaa 	bl	8003360 <hw_serial_tx>
            break;            
 800260c:	bf00      	nop
 800260e:	e28a      	b.n	8002b26 <at_send_cmd_blocking+0x636>
        }

        case AT_CMD_ECHO: {
            uint8_t mode = '0' + cmd->payload.echo.enabled;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	785b      	ldrb	r3, [r3, #1]
 8002614:	3330      	adds	r3, #48	; 0x30
 8002616:	b2db      	uxtb	r3, r3
 8002618:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
            hw_serial_tx(&mode, 1);
 800261c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002620:	2101      	movs	r1, #1
 8002622:	4618      	mov	r0, r3
 8002624:	f000 fe9c 	bl	8003360 <hw_serial_tx>
            break;                        
 8002628:	bf00      	nop
 800262a:	e27c      	b.n	8002b26 <at_send_cmd_blocking+0x636>
        }

        case AT_CMD_WIFI_AUTO_CON: {
            uint8_t enabled = '0' + cmd->payload.wifi_autocon.enabled;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	785b      	ldrb	r3, [r3, #1]
 8002630:	3330      	adds	r3, #48	; 0x30
 8002632:	b2db      	uxtb	r3, r3
 8002634:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            hw_serial_tx((uint8_t *)"=", 1);
 8002638:	2101      	movs	r1, #1
 800263a:	4866      	ldr	r0, [pc, #408]	; (80027d4 <at_send_cmd_blocking+0x2e4>)
 800263c:	f000 fe90 	bl	8003360 <hw_serial_tx>
            hw_serial_tx(&enabled, 1);
 8002640:	f107 038f 	add.w	r3, r7, #143	; 0x8f
 8002644:	2101      	movs	r1, #1
 8002646:	4618      	mov	r0, r3
 8002648:	f000 fe8a 	bl	8003360 <hw_serial_tx>
        	break;
 800264c:	bf00      	nop
 800264e:	e26a      	b.n	8002b26 <at_send_cmd_blocking+0x636>
        }

        case AT_CMD_WIFI_AP_SET: {
            hw_serial_tx((uint8_t *)"=\"", 2);
 8002650:	2102      	movs	r1, #2
 8002652:	4861      	ldr	r0, [pc, #388]	; (80027d8 <at_send_cmd_blocking+0x2e8>)
 8002654:	f000 fe84 	bl	8003360 <hw_serial_tx>
            hw_serial_tx(cmd->payload.wifi_ap.ssid, strlen((char*)cmd->payload.wifi_ap.ssid));
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	f8d3 4001 	ldr.w	r4, [r3, #1]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8002664:	4618      	mov	r0, r3
 8002666:	f7fd fdbd 	bl	80001e4 <strlen>
 800266a:	4603      	mov	r3, r0
 800266c:	b29b      	uxth	r3, r3
 800266e:	4619      	mov	r1, r3
 8002670:	4620      	mov	r0, r4
 8002672:	f000 fe75 	bl	8003360 <hw_serial_tx>
            hw_serial_tx((uint8_t *)"\",\"", 3);
 8002676:	2103      	movs	r1, #3
 8002678:	4858      	ldr	r0, [pc, #352]	; (80027dc <at_send_cmd_blocking+0x2ec>)
 800267a:	f000 fe71 	bl	8003360 <hw_serial_tx>
            hw_serial_tx(cmd->payload.wifi_ap.pwd, strlen((char*)cmd->payload.wifi_ap.pwd));
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	f8d3 4005 	ldr.w	r4, [r3, #5]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	f8d3 3005 	ldr.w	r3, [r3, #5]
 800268a:	4618      	mov	r0, r3
 800268c:	f7fd fdaa 	bl	80001e4 <strlen>
 8002690:	4603      	mov	r3, r0
 8002692:	b29b      	uxth	r3, r3
 8002694:	4619      	mov	r1, r3
 8002696:	4620      	mov	r0, r4
 8002698:	f000 fe62 	bl	8003360 <hw_serial_tx>
            hw_serial_tx((uint8_t *)"\"", 1);
 800269c:	2101      	movs	r1, #1
 800269e:	4850      	ldr	r0, [pc, #320]	; (80027e0 <at_send_cmd_blocking+0x2f0>)
 80026a0:	f000 fe5e 	bl	8003360 <hw_serial_tx>
            break;
 80026a4:	e23f      	b.n	8002b26 <at_send_cmd_blocking+0x636>
        }

        case AT_CMD_WIFI_AP_DHCP: {
            uint8_t val[10];
            sprintf((char*)val, "=%d,%d", cmd->payload.wifi_dhcp.ap_station, cmd->payload.wifi_dhcp.enabled);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	785b      	ldrb	r3, [r3, #1]
 80026aa:	461a      	mov	r2, r3
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	789b      	ldrb	r3, [r3, #2]
 80026b0:	f107 0084 	add.w	r0, r7, #132	; 0x84
 80026b4:	494b      	ldr	r1, [pc, #300]	; (80027e4 <at_send_cmd_blocking+0x2f4>)
 80026b6:	f00a fb01 	bl	800ccbc <sprintf>
            hw_serial_tx(val, strlen((char*)val));
 80026ba:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80026be:	4618      	mov	r0, r3
 80026c0:	f7fd fd90 	bl	80001e4 <strlen>
 80026c4:	4603      	mov	r3, r0
 80026c6:	b29a      	uxth	r2, r3
 80026c8:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80026cc:	4611      	mov	r1, r2
 80026ce:	4618      	mov	r0, r3
 80026d0:	f000 fe46 	bl	8003360 <hw_serial_tx>
            break;
 80026d4:	bf00      	nop
 80026d6:	e226      	b.n	8002b26 <at_send_cmd_blocking+0x636>
        }

        case AT_CMD_WIFI_AP_NET_CFG: {
            hw_serial_tx((uint8_t *)"=\"", 2);
 80026d8:	2102      	movs	r1, #2
 80026da:	483f      	ldr	r0, [pc, #252]	; (80027d8 <at_send_cmd_blocking+0x2e8>)
 80026dc:	f000 fe40 	bl	8003360 <hw_serial_tx>
            hw_serial_tx(cmd->payload.wifi_net_cfg.ip, strlen((char*)cmd->payload.wifi_net_cfg.ip));
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	f8d3 4001 	ldr.w	r4, [r3, #1]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	f8d3 3001 	ldr.w	r3, [r3, #1]
 80026ec:	4618      	mov	r0, r3
 80026ee:	f7fd fd79 	bl	80001e4 <strlen>
 80026f2:	4603      	mov	r3, r0
 80026f4:	b29b      	uxth	r3, r3
 80026f6:	4619      	mov	r1, r3
 80026f8:	4620      	mov	r0, r4
 80026fa:	f000 fe31 	bl	8003360 <hw_serial_tx>
            hw_serial_tx((uint8_t *)"\",\"", 3);
 80026fe:	2103      	movs	r1, #3
 8002700:	4836      	ldr	r0, [pc, #216]	; (80027dc <at_send_cmd_blocking+0x2ec>)
 8002702:	f000 fe2d 	bl	8003360 <hw_serial_tx>
            hw_serial_tx(cmd->payload.wifi_net_cfg.gateway, strlen((char*)cmd->payload.wifi_net_cfg.gateway));
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	f8d3 4005 	ldr.w	r4, [r3, #5]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	f8d3 3005 	ldr.w	r3, [r3, #5]
 8002712:	4618      	mov	r0, r3
 8002714:	f7fd fd66 	bl	80001e4 <strlen>
 8002718:	4603      	mov	r3, r0
 800271a:	b29b      	uxth	r3, r3
 800271c:	4619      	mov	r1, r3
 800271e:	4620      	mov	r0, r4
 8002720:	f000 fe1e 	bl	8003360 <hw_serial_tx>
            hw_serial_tx((uint8_t *)"\",\"", 3);
 8002724:	2103      	movs	r1, #3
 8002726:	482d      	ldr	r0, [pc, #180]	; (80027dc <at_send_cmd_blocking+0x2ec>)
 8002728:	f000 fe1a 	bl	8003360 <hw_serial_tx>
            hw_serial_tx(cmd->payload.wifi_net_cfg.mask, strlen((char*)cmd->payload.wifi_net_cfg.mask));
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	f8d3 4009 	ldr.w	r4, [r3, #9]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	f8d3 3009 	ldr.w	r3, [r3, #9]
 8002738:	4618      	mov	r0, r3
 800273a:	f7fd fd53 	bl	80001e4 <strlen>
 800273e:	4603      	mov	r3, r0
 8002740:	b29b      	uxth	r3, r3
 8002742:	4619      	mov	r1, r3
 8002744:	4620      	mov	r0, r4
 8002746:	f000 fe0b 	bl	8003360 <hw_serial_tx>
            hw_serial_tx((uint8_t *)"\"", 1);
 800274a:	2101      	movs	r1, #1
 800274c:	4824      	ldr	r0, [pc, #144]	; (80027e0 <at_send_cmd_blocking+0x2f0>)
 800274e:	f000 fe07 	bl	8003360 <hw_serial_tx>
            break;
 8002752:	e1e8      	b.n	8002b26 <at_send_cmd_blocking+0x636>
        }

        case AT_CMD_WIFI_AP_DHCP_CFG: {
            uint8_t val[10];
            sprintf((char *)val, "=%d,%d,\"", cmd->payload.wifi_dhcp_cfg.enabled, cmd->payload.wifi_dhcp_cfg.lease_time_min);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	785b      	ldrb	r3, [r3, #1]
 8002758:	461a      	mov	r2, r3
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	885b      	ldrh	r3, [r3, #2]
 800275e:	b29b      	uxth	r3, r3
 8002760:	f107 0078 	add.w	r0, r7, #120	; 0x78
 8002764:	4920      	ldr	r1, [pc, #128]	; (80027e8 <at_send_cmd_blocking+0x2f8>)
 8002766:	f00a faa9 	bl	800ccbc <sprintf>
            hw_serial_tx(val, strlen((char*)val));
 800276a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800276e:	4618      	mov	r0, r3
 8002770:	f7fd fd38 	bl	80001e4 <strlen>
 8002774:	4603      	mov	r3, r0
 8002776:	b29a      	uxth	r2, r3
 8002778:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800277c:	4611      	mov	r1, r2
 800277e:	4618      	mov	r0, r3
 8002780:	f000 fdee 	bl	8003360 <hw_serial_tx>
            hw_serial_tx(cmd->payload.wifi_dhcp_cfg.ip_begin, strlen((char*)cmd->payload.wifi_dhcp_cfg.ip_begin));
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	685c      	ldr	r4, [r3, #4]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	4618      	mov	r0, r3
 800278e:	f7fd fd29 	bl	80001e4 <strlen>
 8002792:	4603      	mov	r3, r0
 8002794:	b29b      	uxth	r3, r3
 8002796:	4619      	mov	r1, r3
 8002798:	4620      	mov	r0, r4
 800279a:	f000 fde1 	bl	8003360 <hw_serial_tx>
            hw_serial_tx((uint8_t *)"\",\"", 3);
 800279e:	2103      	movs	r1, #3
 80027a0:	480e      	ldr	r0, [pc, #56]	; (80027dc <at_send_cmd_blocking+0x2ec>)
 80027a2:	f000 fddd 	bl	8003360 <hw_serial_tx>
            hw_serial_tx(cmd->payload.wifi_dhcp_cfg.ip_end, strlen((char*)cmd->payload.wifi_dhcp_cfg.ip_end));
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	689c      	ldr	r4, [r3, #8]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	4618      	mov	r0, r3
 80027b0:	f7fd fd18 	bl	80001e4 <strlen>
 80027b4:	4603      	mov	r3, r0
 80027b6:	b29b      	uxth	r3, r3
 80027b8:	4619      	mov	r1, r3
 80027ba:	4620      	mov	r0, r4
 80027bc:	f000 fdd0 	bl	8003360 <hw_serial_tx>
            hw_serial_tx((uint8_t *)"\"", 1);
 80027c0:	2101      	movs	r1, #1
 80027c2:	4807      	ldr	r0, [pc, #28]	; (80027e0 <at_send_cmd_blocking+0x2f0>)
 80027c4:	f000 fdcc 	bl	8003360 <hw_serial_tx>
            break;
 80027c8:	bf00      	nop
 80027ca:	e1ac      	b.n	8002b26 <at_send_cmd_blocking+0x636>
 80027cc:	200000c8 	.word	0x200000c8
 80027d0:	20000064 	.word	0x20000064
 80027d4:	0801177c 	.word	0x0801177c
 80027d8:	08011780 	.word	0x08011780
 80027dc:	08011784 	.word	0x08011784
 80027e0:	08011788 	.word	0x08011788
 80027e4:	0801178c 	.word	0x0801178c
 80027e8:	08011794 	.word	0x08011794
        }
        case AT_CMD_WIFI_AP_SECURITY: {
            uint8_t val[16];
            hw_serial_tx((uint8_t *)"=\"", 2);
 80027ec:	2102      	movs	r1, #2
 80027ee:	48c3      	ldr	r0, [pc, #780]	; (8002afc <at_send_cmd_blocking+0x60c>)
 80027f0:	f000 fdb6 	bl	8003360 <hw_serial_tx>
            hw_serial_tx(cmd->payload.wifi_security.ssid, strlen((char*)cmd->payload.wifi_security.ssid));
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	f8d3 4001 	ldr.w	r4, [r3, #1]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8002800:	4618      	mov	r0, r3
 8002802:	f7fd fcef 	bl	80001e4 <strlen>
 8002806:	4603      	mov	r3, r0
 8002808:	b29b      	uxth	r3, r3
 800280a:	4619      	mov	r1, r3
 800280c:	4620      	mov	r0, r4
 800280e:	f000 fda7 	bl	8003360 <hw_serial_tx>
            hw_serial_tx((uint8_t *)"\",\"", 3);
 8002812:	2103      	movs	r1, #3
 8002814:	48ba      	ldr	r0, [pc, #744]	; (8002b00 <at_send_cmd_blocking+0x610>)
 8002816:	f000 fda3 	bl	8003360 <hw_serial_tx>
            hw_serial_tx(cmd->payload.wifi_security.pwd, strlen((char*)cmd->payload.wifi_security.pwd));
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	f8d3 4005 	ldr.w	r4, [r3, #5]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	f8d3 3005 	ldr.w	r3, [r3, #5]
 8002826:	4618      	mov	r0, r3
 8002828:	f7fd fcdc 	bl	80001e4 <strlen>
 800282c:	4603      	mov	r3, r0
 800282e:	b29b      	uxth	r3, r3
 8002830:	4619      	mov	r1, r3
 8002832:	4620      	mov	r0, r4
 8002834:	f000 fd94 	bl	8003360 <hw_serial_tx>
            sprintf((char*)val, "\",%d,%d,%d,%d", cmd->payload.wifi_security.channel, cmd->payload.wifi_security.crypto, cmd->payload.wifi_security.max_conn, cmd->payload.wifi_security.ssid_hidden);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	7a5b      	ldrb	r3, [r3, #9]
 800283c:	4619      	mov	r1, r3
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	7a9b      	ldrb	r3, [r3, #10]
 8002842:	461c      	mov	r4, r3
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	7adb      	ldrb	r3, [r3, #11]
 8002848:	461a      	mov	r2, r3
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	7b1b      	ldrb	r3, [r3, #12]
 800284e:	f107 0068 	add.w	r0, r7, #104	; 0x68
 8002852:	9301      	str	r3, [sp, #4]
 8002854:	9200      	str	r2, [sp, #0]
 8002856:	4623      	mov	r3, r4
 8002858:	460a      	mov	r2, r1
 800285a:	49aa      	ldr	r1, [pc, #680]	; (8002b04 <at_send_cmd_blocking+0x614>)
 800285c:	f00a fa2e 	bl	800ccbc <sprintf>
            hw_serial_tx(val, strlen((char*)val));
 8002860:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002864:	4618      	mov	r0, r3
 8002866:	f7fd fcbd 	bl	80001e4 <strlen>
 800286a:	4603      	mov	r3, r0
 800286c:	b29a      	uxth	r2, r3
 800286e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002872:	4611      	mov	r1, r2
 8002874:	4618      	mov	r0, r3
 8002876:	f000 fd73 	bl	8003360 <hw_serial_tx>
            break;
 800287a:	bf00      	nop
 800287c:	e153      	b.n	8002b26 <at_send_cmd_blocking+0x636>
        }

        case AT_CMD_CON_SERVER: {
            uint8_t val[10];
            sprintf((char*)val,"=%d,%d", cmd->payload.con_server.create, cmd->payload.con_server.port);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	785b      	ldrb	r3, [r3, #1]
 8002882:	461a      	mov	r2, r3
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	885b      	ldrh	r3, [r3, #2]
 8002888:	b29b      	uxth	r3, r3
 800288a:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 800288e:	499e      	ldr	r1, [pc, #632]	; (8002b08 <at_send_cmd_blocking+0x618>)
 8002890:	f00a fa14 	bl	800ccbc <sprintf>
            hw_serial_tx(val, strlen((char*)val));
 8002894:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002898:	4618      	mov	r0, r3
 800289a:	f7fd fca3 	bl	80001e4 <strlen>
 800289e:	4603      	mov	r3, r0
 80028a0:	b29a      	uxth	r2, r3
 80028a2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80028a6:	4611      	mov	r1, r2
 80028a8:	4618      	mov	r0, r3
 80028aa:	f000 fd59 	bl	8003360 <hw_serial_tx>
            break;
 80028ae:	bf00      	nop
 80028b0:	e139      	b.n	8002b26 <at_send_cmd_blocking+0x636>
        }

        case AT_CMD_CON_SERVER_TMROUT: {
            uint8_t val[10];
            sprintf((char*)val, "=%d", cmd->payload.con_server_tmrout.timeout_s);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80028b8:	b29b      	uxth	r3, r3
 80028ba:	461a      	mov	r2, r3
 80028bc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80028c0:	4992      	ldr	r1, [pc, #584]	; (8002b0c <at_send_cmd_blocking+0x61c>)
 80028c2:	4618      	mov	r0, r3
 80028c4:	f00a f9fa 	bl	800ccbc <sprintf>
            hw_serial_tx(val, strlen((char*)val));
 80028c8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80028cc:	4618      	mov	r0, r3
 80028ce:	f7fd fc89 	bl	80001e4 <strlen>
 80028d2:	4603      	mov	r3, r0
 80028d4:	b29a      	uxth	r2, r3
 80028d6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80028da:	4611      	mov	r1, r2
 80028dc:	4618      	mov	r0, r3
 80028de:	f000 fd3f 	bl	8003360 <hw_serial_tx>
            break;
 80028e2:	bf00      	nop
 80028e4:	e11f      	b.n	8002b26 <at_send_cmd_blocking+0x636>
        }

        case AT_CMD_SLL_BUFFER_SIZE: {
            uint8_t val[10];
            sprintf((char *)val, "=%d", cmd->payload.ssl_buffer.size);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80028ec:	b29b      	uxth	r3, r3
 80028ee:	461a      	mov	r2, r3
 80028f0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80028f4:	4985      	ldr	r1, [pc, #532]	; (8002b0c <at_send_cmd_blocking+0x61c>)
 80028f6:	4618      	mov	r0, r3
 80028f8:	f00a f9e0 	bl	800ccbc <sprintf>
            hw_serial_tx(val, strlen((char*)val));
 80028fc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002900:	4618      	mov	r0, r3
 8002902:	f7fd fc6f 	bl	80001e4 <strlen>
 8002906:	4603      	mov	r3, r0
 8002908:	b29a      	uxth	r2, r3
 800290a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800290e:	4611      	mov	r1, r2
 8002910:	4618      	mov	r0, r3
 8002912:	f000 fd25 	bl	8003360 <hw_serial_tx>
            break;
 8002916:	bf00      	nop
 8002918:	e105      	b.n	8002b26 <at_send_cmd_blocking+0x636>
        }

        case AT_CMD_CON_START: {
            uint8_t val[10];
            if(cmd->payload.con_start.channel >= 0) {
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8002920:	2b00      	cmp	r3, #0
 8002922:	db17      	blt.n	8002954 <at_send_cmd_blocking+0x464>
                sprintf((char *)val, "=%d,\"", cmd->payload.con_start.channel);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	f993 3009 	ldrsb.w	r3, [r3, #9]
 800292a:	461a      	mov	r2, r3
 800292c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002930:	4977      	ldr	r1, [pc, #476]	; (8002b10 <at_send_cmd_blocking+0x620>)
 8002932:	4618      	mov	r0, r3
 8002934:	f00a f9c2 	bl	800ccbc <sprintf>
                hw_serial_tx(val,strlen((char*)val));
 8002938:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800293c:	4618      	mov	r0, r3
 800293e:	f7fd fc51 	bl	80001e4 <strlen>
 8002942:	4603      	mov	r3, r0
 8002944:	b29a      	uxth	r2, r3
 8002946:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800294a:	4611      	mov	r1, r2
 800294c:	4618      	mov	r0, r3
 800294e:	f000 fd07 	bl	8003360 <hw_serial_tx>
 8002952:	e003      	b.n	800295c <at_send_cmd_blocking+0x46c>
            }
            else hw_serial_tx((uint8_t *)"=\"", 2);
 8002954:	2102      	movs	r1, #2
 8002956:	4869      	ldr	r0, [pc, #420]	; (8002afc <at_send_cmd_blocking+0x60c>)
 8002958:	f000 fd02 	bl	8003360 <hw_serial_tx>
            
            hw_serial_tx(cmd->payload.con_start.transport, strlen((char*)cmd->payload.con_start.transport));
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	f8d3 4005 	ldr.w	r4, [r3, #5]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	f8d3 3005 	ldr.w	r3, [r3, #5]
 8002968:	4618      	mov	r0, r3
 800296a:	f7fd fc3b 	bl	80001e4 <strlen>
 800296e:	4603      	mov	r3, r0
 8002970:	b29b      	uxth	r3, r3
 8002972:	4619      	mov	r1, r3
 8002974:	4620      	mov	r0, r4
 8002976:	f000 fcf3 	bl	8003360 <hw_serial_tx>
            hw_serial_tx((uint8_t *)"\",\"", 3);
 800297a:	2103      	movs	r1, #3
 800297c:	4860      	ldr	r0, [pc, #384]	; (8002b00 <at_send_cmd_blocking+0x610>)
 800297e:	f000 fcef 	bl	8003360 <hw_serial_tx>
            hw_serial_tx(cmd->payload.con_start.site, strlen((char*)cmd->payload.con_start.site));
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	f8d3 4001 	ldr.w	r4, [r3, #1]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	f8d3 3001 	ldr.w	r3, [r3, #1]
 800298e:	4618      	mov	r0, r3
 8002990:	f7fd fc28 	bl	80001e4 <strlen>
 8002994:	4603      	mov	r3, r0
 8002996:	b29b      	uxth	r3, r3
 8002998:	4619      	mov	r1, r3
 800299a:	4620      	mov	r0, r4
 800299c:	f000 fce0 	bl	8003360 <hw_serial_tx>
            sprintf((char*)val, "\",%d", cmd->payload.con_start.port);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	895b      	ldrh	r3, [r3, #10]
 80029a4:	b29b      	uxth	r3, r3
 80029a6:	461a      	mov	r2, r3
 80029a8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80029ac:	4959      	ldr	r1, [pc, #356]	; (8002b14 <at_send_cmd_blocking+0x624>)
 80029ae:	4618      	mov	r0, r3
 80029b0:	f00a f984 	bl	800ccbc <sprintf>
            hw_serial_tx(val, strlen((char*)val));
 80029b4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80029b8:	4618      	mov	r0, r3
 80029ba:	f7fd fc13 	bl	80001e4 <strlen>
 80029be:	4603      	mov	r3, r0
 80029c0:	b29a      	uxth	r2, r3
 80029c2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80029c6:	4611      	mov	r1, r2
 80029c8:	4618      	mov	r0, r3
 80029ca:	f000 fcc9 	bl	8003360 <hw_serial_tx>

            if(strcmp((char*)cmd->payload.con_start.transport, "UDP") == 0) {
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	f8d3 3005 	ldr.w	r3, [r3, #5]
 80029d4:	4950      	ldr	r1, [pc, #320]	; (8002b18 <at_send_cmd_blocking+0x628>)
 80029d6:	4618      	mov	r0, r3
 80029d8:	f7fd fbfa 	bl	80001d0 <strcmp>
 80029dc:	4603      	mov	r3, r0
 80029de:	2b00      	cmp	r3, #0
 80029e0:	f040 8089 	bne.w	8002af6 <at_send_cmd_blocking+0x606>
                sprintf((char*) val, ",%d,0", cmd->payload.con_start.port);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	895b      	ldrh	r3, [r3, #10]
 80029e8:	b29b      	uxth	r3, r3
 80029ea:	461a      	mov	r2, r3
 80029ec:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80029f0:	494a      	ldr	r1, [pc, #296]	; (8002b1c <at_send_cmd_blocking+0x62c>)
 80029f2:	4618      	mov	r0, r3
 80029f4:	f00a f962 	bl	800ccbc <sprintf>
                hw_serial_tx(val, strlen((char*)val));
 80029f8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80029fc:	4618      	mov	r0, r3
 80029fe:	f7fd fbf1 	bl	80001e4 <strlen>
 8002a02:	4603      	mov	r3, r0
 8002a04:	b29a      	uxth	r2, r3
 8002a06:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002a0a:	4611      	mov	r1, r2
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f000 fca7 	bl	8003360 <hw_serial_tx>
            }            

            break;
 8002a12:	bf00      	nop
 8002a14:	e06f      	b.n	8002af6 <at_send_cmd_blocking+0x606>
        }

        case AT_CMD_CON_SEND: {
            if(cmd->payload.con_send.transparent == 0){
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	7a9b      	ldrb	r3, [r3, #10]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	f040 8082 	bne.w	8002b24 <at_send_cmd_blocking+0x634>
                uint8_t val[10];
                if(cmd->payload.con_send.channel >= 0)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	db0d      	blt.n	8002a46 <at_send_cmd_blocking+0x556>
                    sprintf((char*)val, "=%d,%d", cmd->payload.con_send.channel, cmd->payload.con_send.size);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8002a30:	461a      	mov	r2, r3
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8002a38:	b29b      	uxth	r3, r3
 8002a3a:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8002a3e:	4932      	ldr	r1, [pc, #200]	; (8002b08 <at_send_cmd_blocking+0x618>)
 8002a40:	f00a f93c 	bl	800ccbc <sprintf>
 8002a44:	e00a      	b.n	8002a5c <at_send_cmd_blocking+0x56c>
                else
                    sprintf((char*)val, "=%d", cmd->payload.con_send.size);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8002a4c:	b29b      	uxth	r3, r3
 8002a4e:	461a      	mov	r2, r3
 8002a50:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a54:	492d      	ldr	r1, [pc, #180]	; (8002b0c <at_send_cmd_blocking+0x61c>)
 8002a56:	4618      	mov	r0, r3
 8002a58:	f00a f930 	bl	800ccbc <sprintf>

                hw_serial_tx(val, strlen((char*) val));
 8002a5c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a60:	4618      	mov	r0, r3
 8002a62:	f7fd fbbf 	bl	80001e4 <strlen>
 8002a66:	4603      	mov	r3, r0
 8002a68:	b29a      	uxth	r2, r3
 8002a6a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a6e:	4611      	mov	r1, r2
 8002a70:	4618      	mov	r0, r3
 8002a72:	f000 fc75 	bl	8003360 <hw_serial_tx>
                    sprintf((char*)val, "\",%d", cmd->payload.con_send.port);
                    hw_serial_tx(val, strlen((char*)val));
                }
                */
            }            
            break;
 8002a76:	e055      	b.n	8002b24 <at_send_cmd_blocking+0x634>
        }

        case AT_CMD_CON_CLOSE: {
            if(cmd->payload.con_close.channel >= 0){
            	uint8_t val[10];
                sprintf((char*)val, "=%d", cmd->payload.con_close.channel);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	785b      	ldrb	r3, [r3, #1]
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	f107 0320 	add.w	r3, r7, #32
 8002a82:	4922      	ldr	r1, [pc, #136]	; (8002b0c <at_send_cmd_blocking+0x61c>)
 8002a84:	4618      	mov	r0, r3
 8002a86:	f00a f919 	bl	800ccbc <sprintf>
                hw_serial_tx(val, strlen((char*)val));
 8002a8a:	f107 0320 	add.w	r3, r7, #32
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f7fd fba8 	bl	80001e4 <strlen>
 8002a94:	4603      	mov	r3, r0
 8002a96:	b29a      	uxth	r2, r3
 8002a98:	f107 0320 	add.w	r3, r7, #32
 8002a9c:	4611      	mov	r1, r2
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f000 fc5e 	bl	8003360 <hw_serial_tx>
            }
            break;
 8002aa4:	e03f      	b.n	8002b26 <at_send_cmd_blocking+0x636>
        }

        case AT_CMD_UART:{
            uint8_t val[20];
            sprintf((char*)val, "=%u,%d,%d,%d,%d", (unsigned int) cmd->payload.uart.baud_rate, cmd->payload.uart.data_bits, cmd->payload.uart.stop_bit, cmd->payload.uart.parity, cmd->payload.uart.flow_control);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	f8d3 2001 	ldr.w	r2, [r3, #1]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	795b      	ldrb	r3, [r3, #5]
 8002ab0:	461d      	mov	r5, r3
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	799b      	ldrb	r3, [r3, #6]
 8002ab6:	4619      	mov	r1, r3
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	79db      	ldrb	r3, [r3, #7]
 8002abc:	461c      	mov	r4, r3
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	7a1b      	ldrb	r3, [r3, #8]
 8002ac2:	f107 000c 	add.w	r0, r7, #12
 8002ac6:	9302      	str	r3, [sp, #8]
 8002ac8:	9401      	str	r4, [sp, #4]
 8002aca:	9100      	str	r1, [sp, #0]
 8002acc:	462b      	mov	r3, r5
 8002ace:	4914      	ldr	r1, [pc, #80]	; (8002b20 <at_send_cmd_blocking+0x630>)
 8002ad0:	f00a f8f4 	bl	800ccbc <sprintf>
            hw_serial_tx(val, strlen((char*)val));
 8002ad4:	f107 030c 	add.w	r3, r7, #12
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f7fd fb83 	bl	80001e4 <strlen>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	b29a      	uxth	r2, r3
 8002ae2:	f107 030c 	add.w	r3, r7, #12
 8002ae6:	4611      	mov	r1, r2
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f000 fc39 	bl	8003360 <hw_serial_tx>
        	break;
 8002aee:	bf00      	nop
 8002af0:	e019      	b.n	8002b26 <at_send_cmd_blocking+0x636>
        }

        default:
            break;
 8002af2:	bf00      	nop
 8002af4:	e017      	b.n	8002b26 <at_send_cmd_blocking+0x636>
            break;
 8002af6:	bf00      	nop
 8002af8:	e015      	b.n	8002b26 <at_send_cmd_blocking+0x636>
 8002afa:	bf00      	nop
 8002afc:	08011780 	.word	0x08011780
 8002b00:	08011784 	.word	0x08011784
 8002b04:	080117a0 	.word	0x080117a0
 8002b08:	0801178c 	.word	0x0801178c
 8002b0c:	080117b0 	.word	0x080117b0
 8002b10:	080117b4 	.word	0x080117b4
 8002b14:	080117bc 	.word	0x080117bc
 8002b18:	080117c4 	.word	0x080117c4
 8002b1c:	080117c8 	.word	0x080117c8
 8002b20:	080117d0 	.word	0x080117d0
            break;
 8002b24:	bf00      	nop
    }

    // end of line, if any
    hw_serial_tx(at_eol, strlen((const char*)at_eol));
 8002b26:	4b2d      	ldr	r3, [pc, #180]	; (8002bdc <at_send_cmd_blocking+0x6ec>)
 8002b28:	681c      	ldr	r4, [r3, #0]
 8002b2a:	4b2c      	ldr	r3, [pc, #176]	; (8002bdc <at_send_cmd_blocking+0x6ec>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f7fd fb58 	bl	80001e4 <strlen>
 8002b34:	4603      	mov	r3, r0
 8002b36:	b29b      	uxth	r3, r3
 8002b38:	4619      	mov	r1, r3
 8002b3a:	4620      	mov	r0, r4
 8002b3c:	f000 fc10 	bl	8003360 <hw_serial_tx>
    
    // set expected answer
    int16_t ans;
    uint16_t nb;
    switch(cmd->id){
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	781b      	ldrb	r3, [r3, #0]
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d002      	beq.n	8002b4e <at_send_cmd_blocking+0x65e>
 8002b48:	2b10      	cmp	r3, #16
 8002b4a:	d016      	beq.n	8002b7a <at_send_cmd_blocking+0x68a>
 8002b4c:	e023      	b.n	8002b96 <at_send_cmd_blocking+0x6a6>
        case AT_CMD_RST:
            ans = ceb_cbuf_find_str(&at_cb, (uint8_t*) at_ready, strlen((const char*)at_ready), &nb, tmrout_ms);
 8002b4e:	4b24      	ldr	r3, [pc, #144]	; (8002be0 <at_send_cmd_blocking+0x6f0>)
 8002b50:	681c      	ldr	r4, [r3, #0]
 8002b52:	4b23      	ldr	r3, [pc, #140]	; (8002be0 <at_send_cmd_blocking+0x6f0>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4618      	mov	r0, r3
 8002b58:	f7fd fb44 	bl	80001e4 <strlen>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	b29a      	uxth	r2, r3
 8002b60:	f107 0194 	add.w	r1, r7, #148	; 0x94
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	9300      	str	r3, [sp, #0]
 8002b68:	460b      	mov	r3, r1
 8002b6a:	4621      	mov	r1, r4
 8002b6c:	481d      	ldr	r0, [pc, #116]	; (8002be4 <at_send_cmd_blocking+0x6f4>)
 8002b6e:	f000 f8d7 	bl	8002d20 <ceb_cbuf_find_str>
 8002b72:	4603      	mov	r3, r0
 8002b74:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
            break;
 8002b78:	e017      	b.n	8002baa <at_send_cmd_blocking+0x6ba>
        case AT_CMD_CON_SEND:
            ans = ceb_cbuf_find_str(&at_cb, (uint8_t *)">", 1, &nb, tmrout_ms);
 8002b7a:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	9300      	str	r3, [sp, #0]
 8002b82:	4613      	mov	r3, r2
 8002b84:	2201      	movs	r2, #1
 8002b86:	4918      	ldr	r1, [pc, #96]	; (8002be8 <at_send_cmd_blocking+0x6f8>)
 8002b88:	4816      	ldr	r0, [pc, #88]	; (8002be4 <at_send_cmd_blocking+0x6f4>)
 8002b8a:	f000 f8c9 	bl	8002d20 <ceb_cbuf_find_str>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
            break;
 8002b94:	e009      	b.n	8002baa <at_send_cmd_blocking+0x6ba>
        default:
            ans = ceb_cbuf_find_multi_str(&at_cb, at_ok_error, 2, tmrout_ms);
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	2202      	movs	r2, #2
 8002b9a:	4914      	ldr	r1, [pc, #80]	; (8002bec <at_send_cmd_blocking+0x6fc>)
 8002b9c:	4811      	ldr	r0, [pc, #68]	; (8002be4 <at_send_cmd_blocking+0x6f4>)
 8002b9e:	f000 f904 	bl	8002daa <ceb_cbuf_find_multi_str>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
            break;
 8002ba8:	bf00      	nop
    }

    switch(ans){
 8002baa:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 8002bae:	2b01      	cmp	r3, #1
 8002bb0:	d007      	beq.n	8002bc2 <at_send_cmd_blocking+0x6d2>
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	d001      	beq.n	8002bba <at_send_cmd_blocking+0x6ca>
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d107      	bne.n	8002bca <at_send_cmd_blocking+0x6da>
        case 0:
        case 2:
            cmd->status = AT_STATUS_OK;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	735a      	strb	r2, [r3, #13]
            break;
 8002bc0:	e007      	b.n	8002bd2 <at_send_cmd_blocking+0x6e2>
        case 1:
            cmd->status = AT_STATUS_ERROR;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	735a      	strb	r2, [r3, #13]
            break;
 8002bc8:	e003      	b.n	8002bd2 <at_send_cmd_blocking+0x6e2>
        case -1:
        default:
            cmd->status = AT_STATUS_NO_ANSWER;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2204      	movs	r2, #4
 8002bce:	735a      	strb	r2, [r3, #13]
            break;
 8002bd0:	bf00      	nop
    }
    return AT_STATUS_OK;
 8002bd2:	2300      	movs	r3, #0
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	3798      	adds	r7, #152	; 0x98
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bdb0      	pop	{r4, r5, r7, pc}
 8002bdc:	200000c4 	.word	0x200000c4
 8002be0:	200000cc 	.word	0x200000cc
 8002be4:	20000d54 	.word	0x20000d54
 8002be8:	080117e0 	.word	0x080117e0
 8002bec:	200000b4 	.word	0x200000b4

08002bf0 <at_rx_interrupt>:

void at_rx_interrupt(uint8_t c){
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b082      	sub	sp, #8
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	71fb      	strb	r3, [r7, #7]
	if(at_started){
 8002bfa:	4b07      	ldr	r3, [pc, #28]	; (8002c18 <at_rx_interrupt+0x28>)
 8002bfc:	781b      	ldrb	r3, [r3, #0]
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d004      	beq.n	8002c0e <at_rx_interrupt+0x1e>
		if(ceb_cbuf_put(&at_cb, c) == CEB_CBUF_FULL){
 8002c04:	79fb      	ldrb	r3, [r7, #7]
 8002c06:	4619      	mov	r1, r3
 8002c08:	4804      	ldr	r0, [pc, #16]	; (8002c1c <at_rx_interrupt+0x2c>)
 8002c0a:	f000 f857 	bl	8002cbc <ceb_cbuf_put>
			//printf("%02X-",buffer[0]);
			//printf("%c",c);
			//fflush(stdout);
		}
	}
}
 8002c0e:	bf00      	nop
 8002c10:	3708      	adds	r7, #8
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	20000b04 	.word	0x20000b04
 8002c1c:	20000d54 	.word	0x20000d54

08002c20 <ceb_cbuf_init>:
#include <esp8266/ceb_cbuf.h>

#define CEB_CBUF_INC(v,mv)   ((((v) + 1) >= (mv)) ? 0 : (v) + 1)

cbuf_status_t ceb_cbuf_init(ceb_cbuf_t *cb, uint8_t *area, uint16_t size)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b085      	sub	sp, #20
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	60f8      	str	r0, [r7, #12]
 8002c28:	60b9      	str	r1, [r7, #8]
 8002c2a:	4613      	mov	r3, r2
 8002c2c:	80fb      	strh	r3, [r7, #6]
	cb->buffer = area;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	68ba      	ldr	r2, [r7, #8]
 8002c32:	f8c3 2006 	str.w	r2, [r3, #6]
	cb->size = size;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	88fa      	ldrh	r2, [r7, #6]
 8002c3a:	809a      	strh	r2, [r3, #4]
	cb->prod = cb->cons = 0;
 8002c3c:	2100      	movs	r1, #0
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	460a      	mov	r2, r1
 8002c42:	805a      	strh	r2, [r3, #2]
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	460a      	mov	r2, r1
 8002c48:	801a      	strh	r2, [r3, #0]

	return CEB_CBUF_OK;
 8002c4a:	2300      	movs	r3, #0
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3714      	adds	r7, #20
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr

08002c58 <ceb_cbuf_get>:

	return CEB_CBUF_OK;
}

cbuf_status_t ceb_cbuf_get(ceb_cbuf_t *cb, uint8_t *c)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b083      	sub	sp, #12
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	6039      	str	r1, [r7, #0]
	if(cb->cons == cb->prod)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	885b      	ldrh	r3, [r3, #2]
 8002c66:	b29a      	uxth	r2, r3
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	881b      	ldrh	r3, [r3, #0]
 8002c6c:	b29b      	uxth	r3, r3
 8002c6e:	429a      	cmp	r2, r3
 8002c70:	d101      	bne.n	8002c76 <ceb_cbuf_get+0x1e>
		return CEB_CBUF_EMPTY;
 8002c72:	2302      	movs	r3, #2
 8002c74:	e01c      	b.n	8002cb0 <ceb_cbuf_get+0x58>

	*c = cb->buffer[cb->cons];
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	f8d3 3006 	ldr.w	r3, [r3, #6]
 8002c7c:	687a      	ldr	r2, [r7, #4]
 8002c7e:	8852      	ldrh	r2, [r2, #2]
 8002c80:	b292      	uxth	r2, r2
 8002c82:	4413      	add	r3, r2
 8002c84:	781a      	ldrb	r2, [r3, #0]
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	701a      	strb	r2, [r3, #0]
	cb->cons = CEB_CBUF_INC(cb->cons,cb->size);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	885b      	ldrh	r3, [r3, #2]
 8002c8e:	b29b      	uxth	r3, r3
 8002c90:	3301      	adds	r3, #1
 8002c92:	687a      	ldr	r2, [r7, #4]
 8002c94:	8892      	ldrh	r2, [r2, #4]
 8002c96:	b292      	uxth	r2, r2
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	da05      	bge.n	8002ca8 <ceb_cbuf_get+0x50>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	885b      	ldrh	r3, [r3, #2]
 8002ca0:	b29b      	uxth	r3, r3
 8002ca2:	3301      	adds	r3, #1
 8002ca4:	b29a      	uxth	r2, r3
 8002ca6:	e000      	b.n	8002caa <ceb_cbuf_get+0x52>
 8002ca8:	2200      	movs	r2, #0
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	805a      	strh	r2, [r3, #2]

	return CEB_CBUF_OK;
 8002cae:	2300      	movs	r3, #0
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	370c      	adds	r7, #12
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cba:	4770      	bx	lr

08002cbc <ceb_cbuf_put>:

cbuf_status_t ceb_cbuf_put(ceb_cbuf_t *cb, uint8_t c)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b085      	sub	sp, #20
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
 8002cc4:	460b      	mov	r3, r1
 8002cc6:	70fb      	strb	r3, [r7, #3]
	uint16_t next_prod = CEB_CBUF_INC(cb->prod,cb->size);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	881b      	ldrh	r3, [r3, #0]
 8002ccc:	b29b      	uxth	r3, r3
 8002cce:	3301      	adds	r3, #1
 8002cd0:	687a      	ldr	r2, [r7, #4]
 8002cd2:	8892      	ldrh	r2, [r2, #4]
 8002cd4:	b292      	uxth	r2, r2
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	da05      	bge.n	8002ce6 <ceb_cbuf_put+0x2a>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	881b      	ldrh	r3, [r3, #0]
 8002cde:	b29b      	uxth	r3, r3
 8002ce0:	3301      	adds	r3, #1
 8002ce2:	b29b      	uxth	r3, r3
 8002ce4:	e000      	b.n	8002ce8 <ceb_cbuf_put+0x2c>
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	81fb      	strh	r3, [r7, #14]

	if(next_prod == cb->cons)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	885b      	ldrh	r3, [r3, #2]
 8002cee:	b29b      	uxth	r3, r3
 8002cf0:	89fa      	ldrh	r2, [r7, #14]
 8002cf2:	429a      	cmp	r2, r3
 8002cf4:	d101      	bne.n	8002cfa <ceb_cbuf_put+0x3e>
		return CEB_CBUF_FULL;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e00c      	b.n	8002d14 <ceb_cbuf_put+0x58>

	cb->buffer[cb->prod] = c;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	f8d3 3006 	ldr.w	r3, [r3, #6]
 8002d00:	687a      	ldr	r2, [r7, #4]
 8002d02:	8812      	ldrh	r2, [r2, #0]
 8002d04:	b292      	uxth	r2, r2
 8002d06:	4413      	add	r3, r2
 8002d08:	78fa      	ldrb	r2, [r7, #3]
 8002d0a:	701a      	strb	r2, [r3, #0]
	cb->prod = next_prod;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	89fa      	ldrh	r2, [r7, #14]
 8002d10:	801a      	strh	r2, [r3, #0]

	return CEB_CBUF_OK;
 8002d12:	2300      	movs	r3, #0
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	3714      	adds	r7, #20
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr

08002d20 <ceb_cbuf_find_str>:

#if 1
int16_t ceb_cbuf_find_str(ceb_cbuf_t *cb, uint8_t *str, uint16_t len, uint16_t *nb, uint32_t tmrout_ms)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b088      	sub	sp, #32
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	60f8      	str	r0, [r7, #12]
 8002d28:	60b9      	str	r1, [r7, #8]
 8002d2a:	603b      	str	r3, [r7, #0]
 8002d2c:	4613      	mov	r3, r2
 8002d2e:	80fb      	strh	r3, [r7, #6]
	uint16_t n_match = 0;
 8002d30:	2300      	movs	r3, #0
 8002d32:	83fb      	strh	r3, [r7, #30]
	uint8_t c;
	uint32_t tmr = hw_time_get();
 8002d34:	f000 fb3c 	bl	80033b0 <hw_time_get>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	61bb      	str	r3, [r7, #24]

	*nb = 0;
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	801a      	strh	r2, [r3, #0]
	do
	{
		if(ceb_cbuf_get(cb,&c) == CEB_CBUF_OK)
 8002d42:	f107 0317 	add.w	r3, r7, #23
 8002d46:	4619      	mov	r1, r3
 8002d48:	68f8      	ldr	r0, [r7, #12]
 8002d4a:	f7ff ff85 	bl	8002c58 <ceb_cbuf_get>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d118      	bne.n	8002d86 <ceb_cbuf_find_str+0x66>
		{
			*nb = *nb + 1;
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	881b      	ldrh	r3, [r3, #0]
 8002d58:	3301      	adds	r3, #1
 8002d5a:	b29a      	uxth	r2, r3
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	801a      	strh	r2, [r3, #0]
			if(str[n_match] == c)
 8002d60:	8bfb      	ldrh	r3, [r7, #30]
 8002d62:	68ba      	ldr	r2, [r7, #8]
 8002d64:	4413      	add	r3, r2
 8002d66:	781a      	ldrb	r2, [r3, #0]
 8002d68:	7dfb      	ldrb	r3, [r7, #23]
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d103      	bne.n	8002d76 <ceb_cbuf_find_str+0x56>
				n_match++;
 8002d6e:	8bfb      	ldrh	r3, [r7, #30]
 8002d70:	3301      	adds	r3, #1
 8002d72:	83fb      	strh	r3, [r7, #30]
 8002d74:	e001      	b.n	8002d7a <ceb_cbuf_find_str+0x5a>
			else
				n_match = 0;
 8002d76:	2300      	movs	r3, #0
 8002d78:	83fb      	strh	r3, [r7, #30]

			if(n_match >= len)
 8002d7a:	8bfa      	ldrh	r2, [r7, #30]
 8002d7c:	88fb      	ldrh	r3, [r7, #6]
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	d301      	bcc.n	8002d86 <ceb_cbuf_find_str+0x66>
				return 0;		
 8002d82:	2300      	movs	r3, #0
 8002d84:	e00d      	b.n	8002da2 <ceb_cbuf_find_str+0x82>
		}
	} while (hw_time_elapsed(tmr,hw_time_get()) < tmrout_ms);
 8002d86:	f000 fb13 	bl	80033b0 <hw_time_get>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	4619      	mov	r1, r3
 8002d8e:	69b8      	ldr	r0, [r7, #24]
 8002d90:	f000 fb15 	bl	80033be <hw_time_elapsed>
 8002d94:	4603      	mov	r3, r0
 8002d96:	461a      	mov	r2, r3
 8002d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d8d1      	bhi.n	8002d42 <ceb_cbuf_find_str+0x22>

	return -1;
 8002d9e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	3720      	adds	r7, #32
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}

08002daa <ceb_cbuf_find_multi_str>:

int16_t ceb_cbuf_find_multi_str(ceb_cbuf_t *cb, ceb_cbuf_str_t *str_list, uint16_t len_list, uint32_t tmrout_ms)
{
 8002daa:	b580      	push	{r7, lr}
 8002dac:	b088      	sub	sp, #32
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	60f8      	str	r0, [r7, #12]
 8002db2:	60b9      	str	r1, [r7, #8]
 8002db4:	603b      	str	r3, [r7, #0]
 8002db6:	4613      	mov	r3, r2
 8002db8:	80fb      	strh	r3, [r7, #6]
	uint16_t n;
	uint8_t c;
	uint32_t tmr = hw_time_get();
 8002dba:	f000 faf9 	bl	80033b0 <hw_time_get>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	61bb      	str	r3, [r7, #24]

	for(n = 0; n < len_list ; n++)
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	83fb      	strh	r3, [r7, #30]
 8002dc6:	e00a      	b.n	8002dde <ceb_cbuf_find_multi_str+0x34>
		str_list[n].n_match = 0;
 8002dc8:	8bfb      	ldrh	r3, [r7, #30]
 8002dca:	00db      	lsls	r3, r3, #3
 8002dcc:	68ba      	ldr	r2, [r7, #8]
 8002dce:	4413      	add	r3, r2
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	719a      	strb	r2, [r3, #6]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	71da      	strb	r2, [r3, #7]
	for(n = 0; n < len_list ; n++)
 8002dd8:	8bfb      	ldrh	r3, [r7, #30]
 8002dda:	3301      	adds	r3, #1
 8002ddc:	83fb      	strh	r3, [r7, #30]
 8002dde:	8bfa      	ldrh	r2, [r7, #30]
 8002de0:	88fb      	ldrh	r3, [r7, #6]
 8002de2:	429a      	cmp	r2, r3
 8002de4:	d3f0      	bcc.n	8002dc8 <ceb_cbuf_find_multi_str+0x1e>

	do
	{
		if(ceb_cbuf_get(cb,&c) == CEB_CBUF_OK)
 8002de6:	f107 0317 	add.w	r3, r7, #23
 8002dea:	4619      	mov	r1, r3
 8002dec:	68f8      	ldr	r0, [r7, #12]
 8002dee:	f7ff ff33 	bl	8002c58 <ceb_cbuf_get>
 8002df2:	4603      	mov	r3, r0
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d13c      	bne.n	8002e72 <ceb_cbuf_find_multi_str+0xc8>
		{
			for(n = 0; n < len_list ; n++)
 8002df8:	2300      	movs	r3, #0
 8002dfa:	83fb      	strh	r3, [r7, #30]
 8002dfc:	e035      	b.n	8002e6a <ceb_cbuf_find_multi_str+0xc0>
			{
				if(str_list[n].str[str_list[n].n_match] == c)
 8002dfe:	8bfb      	ldrh	r3, [r7, #30]
 8002e00:	00db      	lsls	r3, r3, #3
 8002e02:	68ba      	ldr	r2, [r7, #8]
 8002e04:	4413      	add	r3, r2
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	8bfa      	ldrh	r2, [r7, #30]
 8002e0a:	00d2      	lsls	r2, r2, #3
 8002e0c:	68b9      	ldr	r1, [r7, #8]
 8002e0e:	440a      	add	r2, r1
 8002e10:	88d2      	ldrh	r2, [r2, #6]
 8002e12:	b292      	uxth	r2, r2
 8002e14:	4413      	add	r3, r2
 8002e16:	781a      	ldrb	r2, [r3, #0]
 8002e18:	7dfb      	ldrb	r3, [r7, #23]
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d109      	bne.n	8002e32 <ceb_cbuf_find_multi_str+0x88>
					str_list[n].n_match++;
 8002e1e:	8bfb      	ldrh	r3, [r7, #30]
 8002e20:	00db      	lsls	r3, r3, #3
 8002e22:	68ba      	ldr	r2, [r7, #8]
 8002e24:	4413      	add	r3, r2
 8002e26:	88da      	ldrh	r2, [r3, #6]
 8002e28:	b292      	uxth	r2, r2
 8002e2a:	3201      	adds	r2, #1
 8002e2c:	b292      	uxth	r2, r2
 8002e2e:	80da      	strh	r2, [r3, #6]
 8002e30:	e007      	b.n	8002e42 <ceb_cbuf_find_multi_str+0x98>
				else
					str_list[n].n_match = 0;
 8002e32:	8bfb      	ldrh	r3, [r7, #30]
 8002e34:	00db      	lsls	r3, r3, #3
 8002e36:	68ba      	ldr	r2, [r7, #8]
 8002e38:	4413      	add	r3, r2
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	719a      	strb	r2, [r3, #6]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	71da      	strb	r2, [r3, #7]

				if(str_list[n].n_match >= str_list[n].len)
 8002e42:	8bfb      	ldrh	r3, [r7, #30]
 8002e44:	00db      	lsls	r3, r3, #3
 8002e46:	68ba      	ldr	r2, [r7, #8]
 8002e48:	4413      	add	r3, r2
 8002e4a:	88db      	ldrh	r3, [r3, #6]
 8002e4c:	b29a      	uxth	r2, r3
 8002e4e:	8bfb      	ldrh	r3, [r7, #30]
 8002e50:	00db      	lsls	r3, r3, #3
 8002e52:	68b9      	ldr	r1, [r7, #8]
 8002e54:	440b      	add	r3, r1
 8002e56:	889b      	ldrh	r3, [r3, #4]
 8002e58:	b29b      	uxth	r3, r3
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	d302      	bcc.n	8002e64 <ceb_cbuf_find_multi_str+0xba>
					return n;
 8002e5e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002e62:	e014      	b.n	8002e8e <ceb_cbuf_find_multi_str+0xe4>
			for(n = 0; n < len_list ; n++)
 8002e64:	8bfb      	ldrh	r3, [r7, #30]
 8002e66:	3301      	adds	r3, #1
 8002e68:	83fb      	strh	r3, [r7, #30]
 8002e6a:	8bfa      	ldrh	r2, [r7, #30]
 8002e6c:	88fb      	ldrh	r3, [r7, #6]
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	d3c5      	bcc.n	8002dfe <ceb_cbuf_find_multi_str+0x54>
			}
		}
	} while (hw_time_elapsed(tmr,hw_time_get()) < tmrout_ms);
 8002e72:	f000 fa9d 	bl	80033b0 <hw_time_get>
 8002e76:	4603      	mov	r3, r0
 8002e78:	4619      	mov	r1, r3
 8002e7a:	69b8      	ldr	r0, [r7, #24]
 8002e7c:	f000 fa9f 	bl	80033be <hw_time_elapsed>
 8002e80:	4603      	mov	r3, r0
 8002e82:	461a      	mov	r2, r3
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d8ad      	bhi.n	8002de6 <ceb_cbuf_find_multi_str+0x3c>

	return -1;	
 8002e8a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3720      	adds	r7, #32
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}

08002e96 <esp8266_init>:
#include <esp8266/esp8266.h>

esp8266* esp8266_init(void){
 8002e96:	b580      	push	{r7, lr}
 8002e98:	b082      	sub	sp, #8
 8002e9a:	af00      	add	r7, sp, #0
	esp8266* esp = (esp8266*) malloc(sizeof(esp8266));
 8002e9c:	200f      	movs	r0, #15
 8002e9e:	f009 fca3 	bl	800c7e8 <malloc>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	607b      	str	r3, [r7, #4]
    esp->ssid = NULL;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	701a      	strb	r2, [r3, #0]
 8002eac:	2200      	movs	r2, #0
 8002eae:	705a      	strb	r2, [r3, #1]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	709a      	strb	r2, [r3, #2]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	70da      	strb	r2, [r3, #3]
    esp->password = NULL;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	711a      	strb	r2, [r3, #4]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	715a      	strb	r2, [r3, #5]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	719a      	strb	r2, [r3, #6]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	71da      	strb	r2, [r3, #7]
    esp->connected = false;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	721a      	strb	r2, [r3, #8]
    esp->ip = NULL;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	725a      	strb	r2, [r3, #9]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	729a      	strb	r2, [r3, #10]
 8002eda:	2200      	movs	r2, #0
 8002edc:	72da      	strb	r2, [r3, #11]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	731a      	strb	r2, [r3, #12]
    esp->port = 1883;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	f042 025b 	orr.w	r2, r2, #91	; 0x5b
 8002eea:	735a      	strb	r2, [r3, #13]
 8002eec:	2200      	movs	r2, #0
 8002eee:	f042 0207 	orr.w	r2, r2, #7
 8002ef2:	739a      	strb	r2, [r3, #14]
    esp8266_turn_on(esp);
 8002ef4:	6878      	ldr	r0, [r7, #4]
 8002ef6:	f000 f805 	bl	8002f04 <esp8266_turn_on>
    return esp;
 8002efa:	687b      	ldr	r3, [r7, #4]
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	3708      	adds	r7, #8
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}

08002f04 <esp8266_turn_on>:
	esp8266_turn_off(esp8266);
	free(esp8266);
	esp8266 = NULL;
}

void esp8266_turn_on(esp8266* esp8266){
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b082      	sub	sp, #8
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
	if( esp8266 == NULL ) return;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d036      	beq.n	8002f80 <esp8266_turn_on+0x7c>
	// app_init
	hw_esp_power_set(true);
 8002f12:	2001      	movs	r0, #1
 8002f14:	f000 f91a 	bl	800314c <hw_esp_power_set>
	hw_time_sleep(100);
 8002f18:	2064      	movs	r0, #100	; 0x64
 8002f1a:	f000 fa69 	bl	80033f0 <hw_time_sleep>
	hw_uart_init();
 8002f1e:	f000 fa7d 	bl	800341c <hw_uart_init>

	// iot_on
	// WifiOn
	hw_esp_power_set(true);
 8002f22:	2001      	movs	r0, #1
 8002f24:	f000 f912 	bl	800314c <hw_esp_power_set>
	hw_esp_reset_set(false);
 8002f28:	2000      	movs	r0, #0
 8002f2a:	f000 f92b 	bl	8003184 <hw_esp_reset_set>
	hw_esp_enable_set(true);
 8002f2e:	2001      	movs	r0, #1
 8002f30:	f000 f933 	bl	800319a <hw_esp_enable_set>

	// iot_on
	hw_time_sleep(1000);
 8002f34:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002f38:	f000 fa5a 	bl	80033f0 <hw_time_sleep>
	at_init();
 8002f3c:	f7ff fabe 	bl	80024bc <at_init>

	cmd.id = AT_CMD_READY;
 8002f40:	4b12      	ldr	r3, [pc, #72]	; (8002f8c <esp8266_turn_on+0x88>)
 8002f42:	2200      	movs	r2, #0
 8002f44:	701a      	strb	r2, [r3, #0]
	at_send_cmd_blocking(&cmd,1000);
 8002f46:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002f4a:	4810      	ldr	r0, [pc, #64]	; (8002f8c <esp8266_turn_on+0x88>)
 8002f4c:	f7ff fad0 	bl	80024f0 <at_send_cmd_blocking>

	cmd.id = AT_CMD_READY;
 8002f50:	4b0e      	ldr	r3, [pc, #56]	; (8002f8c <esp8266_turn_on+0x88>)
 8002f52:	2200      	movs	r2, #0
 8002f54:	701a      	strb	r2, [r3, #0]
	at_send_cmd_blocking(&cmd,3000);
 8002f56:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8002f5a:	480c      	ldr	r0, [pc, #48]	; (8002f8c <esp8266_turn_on+0x88>)
 8002f5c:	f7ff fac8 	bl	80024f0 <at_send_cmd_blocking>

	if(cmd.status != AT_STATUS_OK) return;
 8002f60:	4b0a      	ldr	r3, [pc, #40]	; (8002f8c <esp8266_turn_on+0x88>)
 8002f62:	7b5b      	ldrb	r3, [r3, #13]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d10d      	bne.n	8002f84 <esp8266_turn_on+0x80>

	cmd.id = AT_CMD_WIFI_AUTO_CON;
 8002f68:	4b08      	ldr	r3, [pc, #32]	; (8002f8c <esp8266_turn_on+0x88>)
 8002f6a:	2203      	movs	r2, #3
 8002f6c:	701a      	strb	r2, [r3, #0]
	cmd.payload.wifi_autocon.enabled = 0;
 8002f6e:	4b07      	ldr	r3, [pc, #28]	; (8002f8c <esp8266_turn_on+0x88>)
 8002f70:	2200      	movs	r2, #0
 8002f72:	705a      	strb	r2, [r3, #1]
	at_send_cmd_blocking(&cmd,1000);
 8002f74:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002f78:	4804      	ldr	r0, [pc, #16]	; (8002f8c <esp8266_turn_on+0x88>)
 8002f7a:	f7ff fab9 	bl	80024f0 <at_send_cmd_blocking>
 8002f7e:	e002      	b.n	8002f86 <esp8266_turn_on+0x82>
	if( esp8266 == NULL ) return;
 8002f80:	bf00      	nop
 8002f82:	e000      	b.n	8002f86 <esp8266_turn_on+0x82>
	if(cmd.status != AT_STATUS_OK) return;
 8002f84:	bf00      	nop
}
 8002f86:	3708      	adds	r7, #8
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}
 8002f8c:	20001160 	.word	0x20001160

08002f90 <esp8266_setOprToStationSoftAP>:
	if( esp8266 == NULL ) return;
	cmd.id = AT_CMD_RST;
	at_send_cmd_blocking(&cmd, 6000);
}

void esp8266_setOprToStationSoftAP(esp8266* esp8266){
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b082      	sub	sp, #8
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
	if ( esp8266 == NULL ) return;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d019      	beq.n	8002fd2 <esp8266_setOprToStationSoftAP+0x42>

	cmd.id = AT_CMD_WIFI_AP_MODE;
 8002f9e:	4b0f      	ldr	r3, [pc, #60]	; (8002fdc <esp8266_setOprToStationSoftAP+0x4c>)
 8002fa0:	2204      	movs	r2, #4
 8002fa2:	701a      	strb	r2, [r3, #0]
	cmd.payload.wifi_mode.ap_station = AT_WIFI_MODE_STATION;
 8002fa4:	4b0d      	ldr	r3, [pc, #52]	; (8002fdc <esp8266_setOprToStationSoftAP+0x4c>)
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	705a      	strb	r2, [r3, #1]
	at_send_cmd_blocking(&cmd,2000);
 8002faa:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8002fae:	480b      	ldr	r0, [pc, #44]	; (8002fdc <esp8266_setOprToStationSoftAP+0x4c>)
 8002fb0:	f7ff fa9e 	bl	80024f0 <at_send_cmd_blocking>

    cmd.id = AT_CMD_WIFI_AP_DHCP;
 8002fb4:	4b09      	ldr	r3, [pc, #36]	; (8002fdc <esp8266_setOprToStationSoftAP+0x4c>)
 8002fb6:	2207      	movs	r2, #7
 8002fb8:	701a      	strb	r2, [r3, #0]
    cmd.payload.wifi_dhcp.ap_station = 1;
 8002fba:	4b08      	ldr	r3, [pc, #32]	; (8002fdc <esp8266_setOprToStationSoftAP+0x4c>)
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	705a      	strb	r2, [r3, #1]
    cmd.payload.wifi_dhcp.enabled = 1;
 8002fc0:	4b06      	ldr	r3, [pc, #24]	; (8002fdc <esp8266_setOprToStationSoftAP+0x4c>)
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	709a      	strb	r2, [r3, #2]
    at_send_cmd_blocking(&cmd,2000);
 8002fc6:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8002fca:	4804      	ldr	r0, [pc, #16]	; (8002fdc <esp8266_setOprToStationSoftAP+0x4c>)
 8002fcc:	f7ff fa90 	bl	80024f0 <at_send_cmd_blocking>
 8002fd0:	e000      	b.n	8002fd4 <esp8266_setOprToStationSoftAP+0x44>
	if ( esp8266 == NULL ) return;
 8002fd2:	bf00      	nop
}
 8002fd4:	3708      	adds	r7, #8
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	bf00      	nop
 8002fdc:	20001160 	.word	0x20001160

08002fe0 <esp8266_joinAP>:

bool esp8266_joinAP(esp8266* esp8266, uint8_t* ssid, uint8_t* password){
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b084      	sub	sp, #16
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	60f8      	str	r0, [r7, #12]
 8002fe8:	60b9      	str	r1, [r7, #8]
 8002fea:	607a      	str	r2, [r7, #4]
	if( esp8266 == NULL ) return false;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d101      	bne.n	8002ff6 <esp8266_joinAP+0x16>
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	e025      	b.n	8003042 <esp8266_joinAP+0x62>

	cmd.id = AT_CMD_WIFI_AP_SET;
 8002ff6:	4b15      	ldr	r3, [pc, #84]	; (800304c <esp8266_joinAP+0x6c>)
 8002ff8:	2206      	movs	r2, #6
 8002ffa:	701a      	strb	r2, [r3, #0]
	cmd.payload.wifi_ap.ssid = ssid;
 8002ffc:	4a13      	ldr	r2, [pc, #76]	; (800304c <esp8266_joinAP+0x6c>)
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	f8c2 3001 	str.w	r3, [r2, #1]
	cmd.payload.wifi_ap.pwd = password;
 8003004:	4a11      	ldr	r2, [pc, #68]	; (800304c <esp8266_joinAP+0x6c>)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	f8c2 3005 	str.w	r3, [r2, #5]

	at_send_cmd_blocking(&cmd, 30000);
 800300c:	f247 5130 	movw	r1, #30000	; 0x7530
 8003010:	480e      	ldr	r0, [pc, #56]	; (800304c <esp8266_joinAP+0x6c>)
 8003012:	f7ff fa6d 	bl	80024f0 <at_send_cmd_blocking>
	if( cmd.status != AT_STATUS_OK ) return false;
 8003016:	4b0d      	ldr	r3, [pc, #52]	; (800304c <esp8266_joinAP+0x6c>)
 8003018:	7b5b      	ldrb	r3, [r3, #13]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d001      	beq.n	8003022 <esp8266_joinAP+0x42>
 800301e:	2300      	movs	r3, #0
 8003020:	e00f      	b.n	8003042 <esp8266_joinAP+0x62>

	cmd.id = AT_CMD_SLL_BUFFER_SIZE;
 8003022:	4b0a      	ldr	r3, [pc, #40]	; (800304c <esp8266_joinAP+0x6c>)
 8003024:	2211      	movs	r2, #17
 8003026:	701a      	strb	r2, [r3, #0]
	cmd.payload.ssl_buffer.size = 4096;
 8003028:	4b08      	ldr	r3, [pc, #32]	; (800304c <esp8266_joinAP+0x6c>)
 800302a:	2200      	movs	r2, #0
 800302c:	705a      	strb	r2, [r3, #1]
 800302e:	2200      	movs	r2, #0
 8003030:	f042 0210 	orr.w	r2, r2, #16
 8003034:	709a      	strb	r2, [r3, #2]
	at_send_cmd_blocking(&cmd, 2000);
 8003036:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800303a:	4804      	ldr	r0, [pc, #16]	; (800304c <esp8266_joinAP+0x6c>)
 800303c:	f7ff fa58 	bl	80024f0 <at_send_cmd_blocking>

	return true;
 8003040:	2301      	movs	r3, #1

}
 8003042:	4618      	mov	r0, r3
 8003044:	3710      	adds	r7, #16
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop
 800304c:	20001160 	.word	0x20001160

08003050 <esp8266_enableMUX>:

bool esp8266_enableMUX(esp8266* esp8266){
 8003050:	b580      	push	{r7, lr}
 8003052:	b082      	sub	sp, #8
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
	if ( esp8266 == NULL ) return false;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d101      	bne.n	8003062 <esp8266_enableMUX+0x12>
 800305e:	2300      	movs	r3, #0
 8003060:	e00b      	b.n	800307a <esp8266_enableMUX+0x2a>
    cmd.id = AT_CMD_CON_MUX;
 8003062:	4b08      	ldr	r3, [pc, #32]	; (8003084 <esp8266_enableMUX+0x34>)
 8003064:	220d      	movs	r2, #13
 8003066:	701a      	strb	r2, [r3, #0]
    cmd.payload.mux.enabled = 1;
 8003068:	4b06      	ldr	r3, [pc, #24]	; (8003084 <esp8266_enableMUX+0x34>)
 800306a:	2201      	movs	r2, #1
 800306c:	705a      	strb	r2, [r3, #1]
    at_send_cmd_blocking(&cmd, 2000);
 800306e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8003072:	4804      	ldr	r0, [pc, #16]	; (8003084 <esp8266_enableMUX+0x34>)
 8003074:	f7ff fa3c 	bl	80024f0 <at_send_cmd_blocking>

    return true;
 8003078:	2301      	movs	r3, #1
}
 800307a:	4618      	mov	r0, r3
 800307c:	3708      	adds	r7, #8
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}
 8003082:	bf00      	nop
 8003084:	20001160 	.word	0x20001160

08003088 <esp8266_createTCP>:
    cmd.payload.mux.enabled = 0;
    at_send_cmd_blocking(&cmd, 2000);
    return true;
}

bool esp8266_createTCP(esp8266* esp8266, uint8_t* ip, uint16_t port){
 8003088:	b580      	push	{r7, lr}
 800308a:	b084      	sub	sp, #16
 800308c:	af00      	add	r7, sp, #0
 800308e:	60f8      	str	r0, [r7, #12]
 8003090:	60b9      	str	r1, [r7, #8]
 8003092:	4613      	mov	r3, r2
 8003094:	80fb      	strh	r3, [r7, #6]
	if ( esp8266 == NULL ) return false;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d101      	bne.n	80030a0 <esp8266_createTCP+0x18>
 800309c:	2300      	movs	r3, #0
 800309e:	e01a      	b.n	80030d6 <esp8266_createTCP+0x4e>

	cmd.id = AT_CMD_CON_START;
 80030a0:	4b0f      	ldr	r3, [pc, #60]	; (80030e0 <esp8266_createTCP+0x58>)
 80030a2:	220e      	movs	r2, #14
 80030a4:	701a      	strb	r2, [r3, #0]
	cmd.payload.con_start.port = port;
 80030a6:	4b0e      	ldr	r3, [pc, #56]	; (80030e0 <esp8266_createTCP+0x58>)
 80030a8:	88fa      	ldrh	r2, [r7, #6]
 80030aa:	815a      	strh	r2, [r3, #10]
	cmd.payload.con_start.transport = (uint8_t*) "TCP";
 80030ac:	4b0c      	ldr	r3, [pc, #48]	; (80030e0 <esp8266_createTCP+0x58>)
 80030ae:	4a0d      	ldr	r2, [pc, #52]	; (80030e4 <esp8266_createTCP+0x5c>)
 80030b0:	f8c3 2005 	str.w	r2, [r3, #5]
	cmd.payload.con_start.site = ip;
 80030b4:	4a0a      	ldr	r2, [pc, #40]	; (80030e0 <esp8266_createTCP+0x58>)
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	f8c2 3001 	str.w	r3, [r2, #1]
	cmd.payload.con_start.channel = 0;
 80030bc:	4b08      	ldr	r3, [pc, #32]	; (80030e0 <esp8266_createTCP+0x58>)
 80030be:	2200      	movs	r2, #0
 80030c0:	725a      	strb	r2, [r3, #9]
	at_send_cmd_blocking(&cmd, 10000);
 80030c2:	f242 7110 	movw	r1, #10000	; 0x2710
 80030c6:	4806      	ldr	r0, [pc, #24]	; (80030e0 <esp8266_createTCP+0x58>)
 80030c8:	f7ff fa12 	bl	80024f0 <at_send_cmd_blocking>

	esp8266->connected = true; //cmd.status != AT_STATUS_OK ? false : true;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2201      	movs	r2, #1
 80030d0:	721a      	strb	r2, [r3, #8]

	return esp8266->connected;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	7a1b      	ldrb	r3, [r3, #8]
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3710      	adds	r7, #16
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	bf00      	nop
 80030e0:	20001160 	.word	0x20001160
 80030e4:	080117e4 	.word	0x080117e4

080030e8 <esp8266_send>:

uint32_t esp8266_recv(esp8266* esp8266){
	return 0;
}

bool esp8266_send(esp8266* esp8266, uint8_t* buffer, uint16_t buffer_size){
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b086      	sub	sp, #24
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	60f8      	str	r0, [r7, #12]
 80030f0:	60b9      	str	r1, [r7, #8]
 80030f2:	4613      	mov	r3, r2
 80030f4:	80fb      	strh	r3, [r7, #6]
	if( esp8266 == NULL ) return false;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d101      	bne.n	8003100 <esp8266_send+0x18>
 80030fc:	2300      	movs	r3, #0
 80030fe:	e01e      	b.n	800313e <esp8266_send+0x56>

    cmd.id = AT_CMD_CON_SEND;
 8003100:	4b11      	ldr	r3, [pc, #68]	; (8003148 <esp8266_send+0x60>)
 8003102:	2210      	movs	r2, #16
 8003104:	701a      	strb	r2, [r3, #0]
    cmd.payload.con_send.size = buffer_size;
 8003106:	4b10      	ldr	r3, [pc, #64]	; (8003148 <esp8266_send+0x60>)
 8003108:	88fa      	ldrh	r2, [r7, #6]
 800310a:	f8a3 2001 	strh.w	r2, [r3, #1]
    cmd.payload.con_send.transparent = 0;
 800310e:	4b0e      	ldr	r3, [pc, #56]	; (8003148 <esp8266_send+0x60>)
 8003110:	2200      	movs	r2, #0
 8003112:	729a      	strb	r2, [r3, #10]
    cmd.payload.con_send.channel = 0;
 8003114:	4b0c      	ldr	r3, [pc, #48]	; (8003148 <esp8266_send+0x60>)
 8003116:	2200      	movs	r2, #0
 8003118:	70da      	strb	r2, [r3, #3]
    at_send_cmd_blocking(&cmd, 2000);
 800311a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800311e:	480a      	ldr	r0, [pc, #40]	; (8003148 <esp8266_send+0x60>)
 8003120:	f7ff f9e6 	bl	80024f0 <at_send_cmd_blocking>

    hw_serial_tx(buffer, buffer_size);
 8003124:	88fb      	ldrh	r3, [r7, #6]
 8003126:	4619      	mov	r1, r3
 8003128:	68b8      	ldr	r0, [r7, #8]
 800312a:	f000 f919 	bl	8003360 <hw_serial_tx>

    bool result = cmd.status != AT_STATUS_OK ? false : true;
 800312e:	4b06      	ldr	r3, [pc, #24]	; (8003148 <esp8266_send+0x60>)
 8003130:	7b5b      	ldrb	r3, [r3, #13]
 8003132:	2b00      	cmp	r3, #0
 8003134:	bf0c      	ite	eq
 8003136:	2301      	moveq	r3, #1
 8003138:	2300      	movne	r3, #0
 800313a:	75fb      	strb	r3, [r7, #23]

    return result;
 800313c:	7dfb      	ldrb	r3, [r7, #23]
}
 800313e:	4618      	mov	r0, r3
 8003140:	3718      	adds	r7, #24
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	20001160 	.word	0x20001160

0800314c <hw_esp_power_set>:
//		HAL_GPIO_WritePin(DSP_ON_GPIO_Port,DSP_ON_Pin,GPIO_PIN_RESET);
//	else
//		HAL_GPIO_WritePin(DSP_ON_GPIO_Port,DSP_ON_Pin,GPIO_PIN_SET);
}

void hw_esp_power_set(bool value){
 800314c:	b580      	push	{r7, lr}
 800314e:	b082      	sub	sp, #8
 8003150:	af00      	add	r7, sp, #0
 8003152:	4603      	mov	r3, r0
 8003154:	71fb      	strb	r3, [r7, #7]
	if(value)
 8003156:	79fb      	ldrb	r3, [r7, #7]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d006      	beq.n	800316a <hw_esp_power_set+0x1e>
		HAL_GPIO_WritePin(ESP_POWER_EN_GPIO_Port, ESP_POWER_EN_Pin, GPIO_PIN_RESET);
 800315c:	2200      	movs	r2, #0
 800315e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003162:	4807      	ldr	r0, [pc, #28]	; (8003180 <hw_esp_power_set+0x34>)
 8003164:	f007 f844 	bl	800a1f0 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(ESP_POWER_EN_GPIO_Port, ESP_POWER_EN_Pin, GPIO_PIN_SET);
}
 8003168:	e005      	b.n	8003176 <hw_esp_power_set+0x2a>
		HAL_GPIO_WritePin(ESP_POWER_EN_GPIO_Port, ESP_POWER_EN_Pin, GPIO_PIN_SET);
 800316a:	2201      	movs	r2, #1
 800316c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003170:	4803      	ldr	r0, [pc, #12]	; (8003180 <hw_esp_power_set+0x34>)
 8003172:	f007 f83d 	bl	800a1f0 <HAL_GPIO_WritePin>
}
 8003176:	bf00      	nop
 8003178:	3708      	adds	r7, #8
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}
 800317e:	bf00      	nop
 8003180:	48000400 	.word	0x48000400

08003184 <hw_esp_reset_set>:

void hw_esp_reset_set(bool value){
 8003184:	b480      	push	{r7}
 8003186:	b083      	sub	sp, #12
 8003188:	af00      	add	r7, sp, #0
 800318a:	4603      	mov	r3, r0
 800318c:	71fb      	strb	r3, [r7, #7]
//	if(value)
//		HAL_GPIO_WritePin(ESP_RST_GPIO_Port,ESP_RST_Pin,GPIO_PIN_RESET);
//	else
//		HAL_GPIO_WritePin(ESP_RST_GPIO_Port,ESP_RST_Pin,GPIO_PIN_SET);
}
 800318e:	bf00      	nop
 8003190:	370c      	adds	r7, #12
 8003192:	46bd      	mov	sp, r7
 8003194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003198:	4770      	bx	lr

0800319a <hw_esp_enable_set>:

void hw_esp_enable_set(bool value){
 800319a:	b580      	push	{r7, lr}
 800319c:	b082      	sub	sp, #8
 800319e:	af00      	add	r7, sp, #0
 80031a0:	4603      	mov	r3, r0
 80031a2:	71fb      	strb	r3, [r7, #7]
	if(value)
 80031a4:	79fb      	ldrb	r3, [r7, #7]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d006      	beq.n	80031b8 <hw_esp_enable_set+0x1e>
		HAL_GPIO_WritePin(ESP_EN_GPIO_Port, ESP_EN_Pin, GPIO_PIN_SET);
 80031aa:	2201      	movs	r2, #1
 80031ac:	2120      	movs	r1, #32
 80031ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80031b2:	f007 f81d 	bl	800a1f0 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(ESP_EN_GPIO_Port, ESP_EN_Pin, GPIO_PIN_RESET);
}
 80031b6:	e005      	b.n	80031c4 <hw_esp_enable_set+0x2a>
		HAL_GPIO_WritePin(ESP_EN_GPIO_Port, ESP_EN_Pin, GPIO_PIN_RESET);
 80031b8:	2200      	movs	r2, #0
 80031ba:	2120      	movs	r1, #32
 80031bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80031c0:	f007 f816 	bl	800a1f0 <HAL_GPIO_WritePin>
}
 80031c4:	bf00      	nop
 80031c6:	3708      	adds	r7, #8
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}

080031cc <hw_debug>:
#if 0
{
	CDC_Transmit_FS((uint8_t*)msg,len);
}
#else
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b084      	sub	sp, #16
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
 80031d4:	460b      	mov	r3, r1
 80031d6:	807b      	strh	r3, [r7, #2]
	static uint8_t col 	= 0;
	static uint8_t row 	= 0;
	uint8_t nrow 		= 0;
 80031d8:	2300      	movs	r3, #0
 80031da:	73fb      	strb	r3, [r7, #15]
	int n;

	SSD1306_Goto(col*6, row);
 80031dc:	4b34      	ldr	r3, [pc, #208]	; (80032b0 <hw_debug+0xe4>)
 80031de:	781b      	ldrb	r3, [r3, #0]
 80031e0:	461a      	mov	r2, r3
 80031e2:	0052      	lsls	r2, r2, #1
 80031e4:	4413      	add	r3, r2
 80031e6:	005b      	lsls	r3, r3, #1
 80031e8:	b2da      	uxtb	r2, r3
 80031ea:	4b32      	ldr	r3, [pc, #200]	; (80032b4 <hw_debug+0xe8>)
 80031ec:	781b      	ldrb	r3, [r3, #0]
 80031ee:	4619      	mov	r1, r3
 80031f0:	4610      	mov	r0, r2
 80031f2:	f003 ff1d 	bl	8007030 <SSD1306_Goto>

	for(n = 0 ; n < len; n++){
 80031f6:	2300      	movs	r3, #0
 80031f8:	60bb      	str	r3, [r7, #8]
 80031fa:	e051      	b.n	80032a0 <hw_debug+0xd4>
		if(msg[n] == '\n' || msg[n] == '\r'){
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	687a      	ldr	r2, [r7, #4]
 8003200:	4413      	add	r3, r2
 8003202:	781b      	ldrb	r3, [r3, #0]
 8003204:	2b0a      	cmp	r3, #10
 8003206:	d005      	beq.n	8003214 <hw_debug+0x48>
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	687a      	ldr	r2, [r7, #4]
 800320c:	4413      	add	r3, r2
 800320e:	781b      	ldrb	r3, [r3, #0]
 8003210:	2b0d      	cmp	r3, #13
 8003212:	d10c      	bne.n	800322e <hw_debug+0x62>
			nrow = (row+1) >= SSD1306_HEIGHT/8 ? 0 : row+1;
 8003214:	4b27      	ldr	r3, [pc, #156]	; (80032b4 <hw_debug+0xe8>)
 8003216:	781b      	ldrb	r3, [r3, #0]
 8003218:	3301      	adds	r3, #1
 800321a:	2b07      	cmp	r3, #7
 800321c:	dc04      	bgt.n	8003228 <hw_debug+0x5c>
 800321e:	4b25      	ldr	r3, [pc, #148]	; (80032b4 <hw_debug+0xe8>)
 8003220:	781b      	ldrb	r3, [r3, #0]
 8003222:	3301      	adds	r3, #1
 8003224:	b2db      	uxtb	r3, r3
 8003226:	e000      	b.n	800322a <hw_debug+0x5e>
 8003228:	2300      	movs	r3, #0
 800322a:	73fb      	strb	r3, [r7, #15]
 800322c:	e020      	b.n	8003270 <hw_debug+0xa4>
		}
		else {
			SSD1306_Write_Char(msg[n], &SSD1306_Font_07X05);
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	687a      	ldr	r2, [r7, #4]
 8003232:	4413      	add	r3, r2
 8003234:	781b      	ldrb	r3, [r3, #0]
 8003236:	4920      	ldr	r1, [pc, #128]	; (80032b8 <hw_debug+0xec>)
 8003238:	4618      	mov	r0, r3
 800323a:	f003 ff27 	bl	800708c <SSD1306_Write_Char>
			col++;
 800323e:	4b1c      	ldr	r3, [pc, #112]	; (80032b0 <hw_debug+0xe4>)
 8003240:	781b      	ldrb	r3, [r3, #0]
 8003242:	3301      	adds	r3, #1
 8003244:	b2da      	uxtb	r2, r3
 8003246:	4b1a      	ldr	r3, [pc, #104]	; (80032b0 <hw_debug+0xe4>)
 8003248:	701a      	strb	r2, [r3, #0]
			if(col >= SSD1306_WIDTH/6){
 800324a:	4b19      	ldr	r3, [pc, #100]	; (80032b0 <hw_debug+0xe4>)
 800324c:	781b      	ldrb	r3, [r3, #0]
 800324e:	2b14      	cmp	r3, #20
 8003250:	d90e      	bls.n	8003270 <hw_debug+0xa4>
				col = 0;
 8003252:	4b17      	ldr	r3, [pc, #92]	; (80032b0 <hw_debug+0xe4>)
 8003254:	2200      	movs	r2, #0
 8003256:	701a      	strb	r2, [r3, #0]
				nrow = (row+1) >= SSD1306_HEIGHT/8 ? 0 : row+1;
 8003258:	4b16      	ldr	r3, [pc, #88]	; (80032b4 <hw_debug+0xe8>)
 800325a:	781b      	ldrb	r3, [r3, #0]
 800325c:	3301      	adds	r3, #1
 800325e:	2b07      	cmp	r3, #7
 8003260:	dc04      	bgt.n	800326c <hw_debug+0xa0>
 8003262:	4b14      	ldr	r3, [pc, #80]	; (80032b4 <hw_debug+0xe8>)
 8003264:	781b      	ldrb	r3, [r3, #0]
 8003266:	3301      	adds	r3, #1
 8003268:	b2db      	uxtb	r3, r3
 800326a:	e000      	b.n	800326e <hw_debug+0xa2>
 800326c:	2300      	movs	r3, #0
 800326e:	73fb      	strb	r3, [r7, #15]
			}
		}

		if(row != nrow){
 8003270:	4b10      	ldr	r3, [pc, #64]	; (80032b4 <hw_debug+0xe8>)
 8003272:	781b      	ldrb	r3, [r3, #0]
 8003274:	7bfa      	ldrb	r2, [r7, #15]
 8003276:	429a      	cmp	r2, r3
 8003278:	d00f      	beq.n	800329a <hw_debug+0xce>
			row = nrow;
 800327a:	4a0e      	ldr	r2, [pc, #56]	; (80032b4 <hw_debug+0xe8>)
 800327c:	7bfb      	ldrb	r3, [r7, #15]
 800327e:	7013      	strb	r3, [r2, #0]
			SSD1306_Goto(col*6, row);
 8003280:	4b0b      	ldr	r3, [pc, #44]	; (80032b0 <hw_debug+0xe4>)
 8003282:	781b      	ldrb	r3, [r3, #0]
 8003284:	461a      	mov	r2, r3
 8003286:	0052      	lsls	r2, r2, #1
 8003288:	4413      	add	r3, r2
 800328a:	005b      	lsls	r3, r3, #1
 800328c:	b2da      	uxtb	r2, r3
 800328e:	4b09      	ldr	r3, [pc, #36]	; (80032b4 <hw_debug+0xe8>)
 8003290:	781b      	ldrb	r3, [r3, #0]
 8003292:	4619      	mov	r1, r3
 8003294:	4610      	mov	r0, r2
 8003296:	f003 fecb 	bl	8007030 <SSD1306_Goto>
	for(n = 0 ; n < len; n++){
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	3301      	adds	r3, #1
 800329e:	60bb      	str	r3, [r7, #8]
 80032a0:	887b      	ldrh	r3, [r7, #2]
 80032a2:	68ba      	ldr	r2, [r7, #8]
 80032a4:	429a      	cmp	r2, r3
 80032a6:	dba9      	blt.n	80031fc <hw_debug+0x30>
		}
	}
}
 80032a8:	bf00      	nop
 80032aa:	3710      	adds	r7, #16
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}
 80032b0:	20000b06 	.word	0x20000b06
 80032b4:	20000b07 	.word	0x20000b07
 80032b8:	200000d4 	.word	0x200000d4

080032bc <USART2_IRQHandler>:
#endif

void USART2_IRQHandler(void){
 80032bc:	b580      	push	{r7, lr}
 80032be:	b084      	sub	sp, #16
 80032c0:	af00      	add	r7, sp, #0
    uint8_t c = 0;
 80032c2:	2300      	movs	r3, #0
 80032c4:	71fb      	strb	r3, [r7, #7]
    uint32_t sr;
    USART_TypeDef* h = UART_HANDLE.Instance;
 80032c6:	4b16      	ldr	r3, [pc, #88]	; (8003320 <USART2_IRQHandler+0x64>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	60bb      	str	r3, [r7, #8]

    // lê o status register e trata erros até que desapareçam
    // (o manual manda ler o SR e em seguida DR)

    sr = h->ISR;
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	69db      	ldr	r3, [r3, #28]
 80032d0:	60fb      	str	r3, [r7, #12]

    while(sr & (UART_FLAG_ORE | UART_FLAG_PE | UART_FLAG_FE | UART_FLAG_NE)){
 80032d2:	e005      	b.n	80032e0 <USART2_IRQHandler+0x24>
    	h->ICR = UART_CLEAR_OREF | UART_CLEAR_PEF | UART_CLEAR_FEF | UART_CLEAR_NEF;
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	220f      	movs	r2, #15
 80032d8:	621a      	str	r2, [r3, #32]
    	sr = h->ISR;
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	69db      	ldr	r3, [r3, #28]
 80032de:	60fb      	str	r3, [r7, #12]
    while(sr & (UART_FLAG_ORE | UART_FLAG_PE | UART_FLAG_FE | UART_FLAG_NE)){
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	f003 030f 	and.w	r3, r3, #15
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d1f4      	bne.n	80032d4 <USART2_IRQHandler+0x18>
        //c = h->RDR;
    }

    if(sr & UART_FLAG_RXNE){
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	f003 0320 	and.w	r3, r3, #32
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d011      	beq.n	8003318 <USART2_IRQHandler+0x5c>
        c = h->RDR;
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80032f8:	b29b      	uxth	r3, r3
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	71fb      	strb	r3, [r7, #7]

        if(hw_debug_enable)
 80032fe:	4b09      	ldr	r3, [pc, #36]	; (8003324 <USART2_IRQHandler+0x68>)
 8003300:	781b      	ldrb	r3, [r3, #0]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d004      	beq.n	8003310 <USART2_IRQHandler+0x54>
        	hw_debug(&c, 1);
 8003306:	1dfb      	adds	r3, r7, #7
 8003308:	2101      	movs	r1, #1
 800330a:	4618      	mov	r0, r3
 800330c:	f7ff ff5e 	bl	80031cc <hw_debug>

        at_rx_interrupt(c);
 8003310:	79fb      	ldrb	r3, [r7, #7]
 8003312:	4618      	mov	r0, r3
 8003314:	f7ff fc6c 	bl	8002bf0 <at_rx_interrupt>
        // some action here
    }
}
 8003318:	bf00      	nop
 800331a:	3710      	adds	r7, #16
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}
 8003320:	20000cd4 	.word	0x20000cd4
 8003324:	20000b05 	.word	0x20000b05

08003328 <hw_serial_send_byte>:

static void hw_serial_send_byte(uint8_t c){
 8003328:	b480      	push	{r7}
 800332a:	b085      	sub	sp, #20
 800332c:	af00      	add	r7, sp, #0
 800332e:	4603      	mov	r3, r0
 8003330:	71fb      	strb	r3, [r7, #7]
	USART_TypeDef* h = UART_HANDLE.Instance;
 8003332:	4b0a      	ldr	r3, [pc, #40]	; (800335c <hw_serial_send_byte+0x34>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	60fb      	str	r3, [r7, #12]
	while( !(h->ISR & UART_FLAG_TXE) ) {}
 8003338:	bf00      	nop
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	69db      	ldr	r3, [r3, #28]
 800333e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003342:	2b00      	cmp	r3, #0
 8003344:	d0f9      	beq.n	800333a <hw_serial_send_byte+0x12>
	h->TDR = c;
 8003346:	79fb      	ldrb	r3, [r7, #7]
 8003348:	b29a      	uxth	r2, r3
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	851a      	strh	r2, [r3, #40]	; 0x28
}
 800334e:	bf00      	nop
 8003350:	3714      	adds	r7, #20
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr
 800335a:	bf00      	nop
 800335c:	20000cd4 	.word	0x20000cd4

08003360 <hw_serial_tx>:

uint32_t hw_serial_tx(const uint8_t* str, uint16_t len){
 8003360:	b580      	push	{r7, lr}
 8003362:	b084      	sub	sp, #16
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
 8003368:	460b      	mov	r3, r1
 800336a:	807b      	strh	r3, [r7, #2]
	uint16_t n;

	if(hw_debug_enable)
 800336c:	4b0f      	ldr	r3, [pc, #60]	; (80033ac <hw_serial_tx+0x4c>)
 800336e:	781b      	ldrb	r3, [r3, #0]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d004      	beq.n	800337e <hw_serial_tx+0x1e>
		hw_debug(str, len);
 8003374:	887b      	ldrh	r3, [r7, #2]
 8003376:	4619      	mov	r1, r3
 8003378:	6878      	ldr	r0, [r7, #4]
 800337a:	f7ff ff27 	bl	80031cc <hw_debug>

	for(n = 0 ; n < len ; n++)
 800337e:	2300      	movs	r3, #0
 8003380:	81fb      	strh	r3, [r7, #14]
 8003382:	e009      	b.n	8003398 <hw_serial_tx+0x38>
		hw_serial_send_byte(str[n]);
 8003384:	89fb      	ldrh	r3, [r7, #14]
 8003386:	687a      	ldr	r2, [r7, #4]
 8003388:	4413      	add	r3, r2
 800338a:	781b      	ldrb	r3, [r3, #0]
 800338c:	4618      	mov	r0, r3
 800338e:	f7ff ffcb 	bl	8003328 <hw_serial_send_byte>
	for(n = 0 ; n < len ; n++)
 8003392:	89fb      	ldrh	r3, [r7, #14]
 8003394:	3301      	adds	r3, #1
 8003396:	81fb      	strh	r3, [r7, #14]
 8003398:	89fa      	ldrh	r2, [r7, #14]
 800339a:	887b      	ldrh	r3, [r7, #2]
 800339c:	429a      	cmp	r2, r3
 800339e:	d3f1      	bcc.n	8003384 <hw_serial_tx+0x24>

	return len;
 80033a0:	887b      	ldrh	r3, [r7, #2]
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3710      	adds	r7, #16
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}
 80033aa:	bf00      	nop
 80033ac:	20000b05 	.word	0x20000b05

080033b0 <hw_time_get>:

uint32_t hw_time_get(void){
 80033b0:	b580      	push	{r7, lr}
 80033b2:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 80033b4:	f004 fe7a 	bl	80080ac <HAL_GetTick>
 80033b8:	4603      	mov	r3, r0
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	bd80      	pop	{r7, pc}

080033be <hw_time_elapsed>:

uint32_t hw_time_elapsed(uint32_t tmr_old_ms, uint32_t tmr_new_ms){
 80033be:	b480      	push	{r7}
 80033c0:	b085      	sub	sp, #20
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	6078      	str	r0, [r7, #4]
 80033c6:	6039      	str	r1, [r7, #0]
    uint32_t elapsed_ms;

    if(tmr_new_ms < tmr_old_ms)
 80033c8:	683a      	ldr	r2, [r7, #0]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d204      	bcs.n	80033da <hw_time_elapsed+0x1c>
        elapsed_ms = UINT32_MAX - tmr_old_ms + tmr_new_ms + 1;
 80033d0:	683a      	ldr	r2, [r7, #0]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	60fb      	str	r3, [r7, #12]
 80033d8:	e003      	b.n	80033e2 <hw_time_elapsed+0x24>
    else
        elapsed_ms = tmr_new_ms - tmr_old_ms;
 80033da:	683a      	ldr	r2, [r7, #0]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	1ad3      	subs	r3, r2, r3
 80033e0:	60fb      	str	r3, [r7, #12]

    return elapsed_ms;
 80033e2:	68fb      	ldr	r3, [r7, #12]
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	3714      	adds	r7, #20
 80033e8:	46bd      	mov	sp, r7
 80033ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ee:	4770      	bx	lr

080033f0 <hw_time_sleep>:

void hw_time_sleep(uint32_t tmr_ms){
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b084      	sub	sp, #16
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
    uint32_t tmr_new_ms;
    uint32_t tmr_old_ms = hw_time_get();
 80033f8:	f7ff ffda 	bl	80033b0 <hw_time_get>
 80033fc:	60f8      	str	r0, [r7, #12]

    do{
        tmr_new_ms = hw_time_get();
 80033fe:	f7ff ffd7 	bl	80033b0 <hw_time_get>
 8003402:	60b8      	str	r0, [r7, #8]
    } while(hw_time_elapsed(tmr_old_ms, tmr_new_ms) < tmr_ms);
 8003404:	68b9      	ldr	r1, [r7, #8]
 8003406:	68f8      	ldr	r0, [r7, #12]
 8003408:	f7ff ffd9 	bl	80033be <hw_time_elapsed>
 800340c:	4602      	mov	r2, r0
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	4293      	cmp	r3, r2
 8003412:	d8f4      	bhi.n	80033fe <hw_time_sleep+0xe>
}
 8003414:	bf00      	nop
 8003416:	3710      	adds	r7, #16
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}

0800341c <hw_uart_init>:

void hw_debug_set(bool state){
	hw_debug_enable = state;
}

void hw_uart_init(void){
 800341c:	b580      	push	{r7, lr}
 800341e:	af00      	add	r7, sp, #0
	UART_HANDLE.Instance->CR3 |= USART_CR3_EIE;
 8003420:	4b0c      	ldr	r3, [pc, #48]	; (8003454 <hw_uart_init+0x38>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	689a      	ldr	r2, [r3, #8]
 8003426:	4b0b      	ldr	r3, [pc, #44]	; (8003454 <hw_uart_init+0x38>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f042 0201 	orr.w	r2, r2, #1
 800342e:	609a      	str	r2, [r3, #8]
	UART_HANDLE.Instance->CR1 |= USART_CR1_PEIE | USART_CR1_RXNEIE;
 8003430:	4b08      	ldr	r3, [pc, #32]	; (8003454 <hw_uart_init+0x38>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	4b07      	ldr	r3, [pc, #28]	; (8003454 <hw_uart_init+0x38>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800343e:	601a      	str	r2, [r3, #0]
	HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 8003440:	2200      	movs	r2, #0
 8003442:	2101      	movs	r1, #1
 8003444:	2026      	movs	r0, #38	; 0x26
 8003446:	f006 fad4 	bl	80099f2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART2_IRQn);
 800344a:	2026      	movs	r0, #38	; 0x26
 800344c:	f006 faed 	bl	8009a2a <HAL_NVIC_EnableIRQ>
}
 8003450:	bf00      	nop
 8003452:	bd80      	pop	{r7, pc}
 8003454:	20000cd4 	.word	0x20000cd4

08003458 <_times>:
int _unlink(char* name){
	errno = ENOENT;
	return -1;
}

int _times(struct tms *buf){
 8003458:	b480      	push	{r7}
 800345a:	b083      	sub	sp, #12
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
	return -1;
 8003460:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003464:	4618      	mov	r0, r3
 8003466:	370c      	adds	r7, #12
 8003468:	46bd      	mov	sp, r7
 800346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346e:	4770      	bx	lr

08003470 <_sbrk>:

/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr){
 8003470:	b580      	push	{r7, lr}
 8003472:	b084      	sub	sp, #16
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003478:	4b11      	ldr	r3, [pc, #68]	; (80034c0 <_sbrk+0x50>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d102      	bne.n	8003486 <_sbrk+0x16>
		heap_end = &end;
 8003480:	4b0f      	ldr	r3, [pc, #60]	; (80034c0 <_sbrk+0x50>)
 8003482:	4a10      	ldr	r2, [pc, #64]	; (80034c4 <_sbrk+0x54>)
 8003484:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003486:	4b0e      	ldr	r3, [pc, #56]	; (80034c0 <_sbrk+0x50>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr){
 800348c:	4b0c      	ldr	r3, [pc, #48]	; (80034c0 <_sbrk+0x50>)
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	4413      	add	r3, r2
 8003494:	466a      	mov	r2, sp
 8003496:	4293      	cmp	r3, r2
 8003498:	d907      	bls.n	80034aa <_sbrk+0x3a>
		errno = ENOMEM;
 800349a:	f009 f97b 	bl	800c794 <__errno>
 800349e:	4602      	mov	r2, r0
 80034a0:	230c      	movs	r3, #12
 80034a2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80034a4:	f04f 33ff 	mov.w	r3, #4294967295
 80034a8:	e006      	b.n	80034b8 <_sbrk+0x48>
	}

	heap_end += incr;
 80034aa:	4b05      	ldr	r3, [pc, #20]	; (80034c0 <_sbrk+0x50>)
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	4413      	add	r3, r2
 80034b2:	4a03      	ldr	r2, [pc, #12]	; (80034c0 <_sbrk+0x50>)
 80034b4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80034b6:	68fb      	ldr	r3, [r7, #12]
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	3710      	adds	r7, #16
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}
 80034c0:	20000b08 	.word	0x20000b08
 80034c4:	20001188 	.word	0x20001188

080034c8 <assembler_build_to_control_packet>:
#include <mqtt_client/assembler.h>

control_packet* assembler_build_to_control_packet(bytes* bytes){
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b084      	sub	sp, #16
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
	if( bytes == NULL ) return NULL;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d101      	bne.n	80034da <assembler_build_to_control_packet+0x12>
 80034d6:	2300      	movs	r3, #0
 80034d8:	e020      	b.n	800351c <assembler_build_to_control_packet+0x54>
	control_packet* result = (control_packet*) malloc(sizeof(control_packet));
 80034da:	2006      	movs	r0, #6
 80034dc:	f009 f984 	bl	800c7e8 <malloc>
 80034e0:	4603      	mov	r3, r0
 80034e2:	60fb      	str	r3, [r7, #12]

	unsigned char typeAndFlags	= bytes_at(bytes, 0);
 80034e4:	2100      	movs	r1, #0
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f000 fa61 	bl	80039ae <bytes_at>
 80034ec:	4603      	mov	r3, r0
 80034ee:	72fb      	strb	r3, [r7, #11]
	result->type                	= typeAndFlags & 0xF0;
 80034f0:	7afb      	ldrb	r3, [r7, #11]
 80034f2:	f023 030f 	bic.w	r3, r3, #15
 80034f6:	b2da      	uxtb	r2, r3
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	701a      	strb	r2, [r3, #0]
	result->flags               	= typeAndFlags & 0x0F;
 80034fc:	7afb      	ldrb	r3, [r7, #11]
 80034fe:	f003 030f 	and.w	r3, r3, #15
 8003502:	b2da      	uxtb	r2, r3
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	705a      	strb	r2, [r3, #1]
	result->remaining_length    	= bytes_at(bytes, 1);
 8003508:	2101      	movs	r1, #1
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f000 fa4f 	bl	80039ae <bytes_at>
 8003510:	4603      	mov	r3, r0
 8003512:	461a      	mov	r2, r3
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	f8c3 2002 	str.w	r2, [r3, #2]

	return result;
 800351a:	68fb      	ldr	r3, [r7, #12]
}
 800351c:	4618      	mov	r0, r3
 800351e:	3710      	adds	r7, #16
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}

08003524 <assembler_build_to_connect>:
	result->clean_session = bytes_at(bytes, 2) == 0x00 ? true : false;
	result->return_code = bytes_at(bytes, 3);
	return result;
}

connect* assembler_build_to_connect(bytes* bytes){
 8003524:	b590      	push	{r4, r7, lr}
 8003526:	b089      	sub	sp, #36	; 0x24
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
	if( bytes == NULL ) return NULL;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d101      	bne.n	8003536 <assembler_build_to_connect+0x12>
 8003532:	2300      	movs	r3, #0
 8003534:	e0ea      	b.n	800370c <assembler_build_to_connect+0x1e8>
	connect* result = (connect*) malloc(sizeof(connect));
 8003536:	201e      	movs	r0, #30
 8003538:	f009 f956 	bl	800c7e8 <malloc>
 800353c:	4603      	mov	r3, r0
 800353e:	61fb      	str	r3, [r7, #28]
	result->control_packet = assembler_build_to_control_packet(bytes);
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	f7ff ffc1 	bl	80034c8 <assembler_build_to_control_packet>
 8003546:	4602      	mov	r2, r0
 8003548:	69fb      	ldr	r3, [r7, #28]
 800354a:	601a      	str	r2, [r3, #0]

	unsigned int index = 2;
 800354c:	2302      	movs	r3, #2
 800354e:	60fb      	str	r3, [r7, #12]

	// Protocol Name
	result->variable_header = bytes_init();
 8003550:	f000 f9bc 	bl	80038cc <bytes_init>
 8003554:	4602      	mov	r2, r0
 8003556:	69fb      	ldr	r3, [r7, #28]
 8003558:	605a      	str	r2, [r3, #4]
	bytes_push_back( result->variable_header, (unsigned char) bytes_at(bytes, (index++)) );
 800355a:	69fb      	ldr	r3, [r7, #28]
 800355c:	685c      	ldr	r4, [r3, #4]
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	1c5a      	adds	r2, r3, #1
 8003562:	60fa      	str	r2, [r7, #12]
 8003564:	4619      	mov	r1, r3
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f000 fa21 	bl	80039ae <bytes_at>
 800356c:	4603      	mov	r3, r0
 800356e:	4619      	mov	r1, r3
 8003570:	4620      	mov	r0, r4
 8003572:	f000 fa4a 	bl	8003a0a <bytes_push_back>
	bytes_push_back( result->variable_header, (unsigned char) bytes_at(bytes, (index++)) );
 8003576:	69fb      	ldr	r3, [r7, #28]
 8003578:	685c      	ldr	r4, [r3, #4]
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	1c5a      	adds	r2, r3, #1
 800357e:	60fa      	str	r2, [r7, #12]
 8003580:	4619      	mov	r1, r3
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f000 fa13 	bl	80039ae <bytes_at>
 8003588:	4603      	mov	r3, r0
 800358a:	4619      	mov	r1, r3
 800358c:	4620      	mov	r0, r4
 800358e:	f000 fa3c 	bl	8003a0a <bytes_push_back>
	bytes_push_back( result->variable_header, (unsigned char) bytes_at(bytes, (index++)) );
 8003592:	69fb      	ldr	r3, [r7, #28]
 8003594:	685c      	ldr	r4, [r3, #4]
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	1c5a      	adds	r2, r3, #1
 800359a:	60fa      	str	r2, [r7, #12]
 800359c:	4619      	mov	r1, r3
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f000 fa05 	bl	80039ae <bytes_at>
 80035a4:	4603      	mov	r3, r0
 80035a6:	4619      	mov	r1, r3
 80035a8:	4620      	mov	r0, r4
 80035aa:	f000 fa2e 	bl	8003a0a <bytes_push_back>
	bytes_push_back( result->variable_header, (unsigned char) bytes_at(bytes, (index++)) );
 80035ae:	69fb      	ldr	r3, [r7, #28]
 80035b0:	685c      	ldr	r4, [r3, #4]
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	1c5a      	adds	r2, r3, #1
 80035b6:	60fa      	str	r2, [r7, #12]
 80035b8:	4619      	mov	r1, r3
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	f000 f9f7 	bl	80039ae <bytes_at>
 80035c0:	4603      	mov	r3, r0
 80035c2:	4619      	mov	r1, r3
 80035c4:	4620      	mov	r0, r4
 80035c6:	f000 fa20 	bl	8003a0a <bytes_push_back>
	bytes_push_back( result->variable_header, (unsigned char) bytes_at(bytes, (index++)) );
 80035ca:	69fb      	ldr	r3, [r7, #28]
 80035cc:	685c      	ldr	r4, [r3, #4]
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	1c5a      	adds	r2, r3, #1
 80035d2:	60fa      	str	r2, [r7, #12]
 80035d4:	4619      	mov	r1, r3
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f000 f9e9 	bl	80039ae <bytes_at>
 80035dc:	4603      	mov	r3, r0
 80035de:	4619      	mov	r1, r3
 80035e0:	4620      	mov	r0, r4
 80035e2:	f000 fa12 	bl	8003a0a <bytes_push_back>
	bytes_push_back( result->variable_header, (unsigned char) bytes_at(bytes, (index++)) );
 80035e6:	69fb      	ldr	r3, [r7, #28]
 80035e8:	685c      	ldr	r4, [r3, #4]
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	1c5a      	adds	r2, r3, #1
 80035ee:	60fa      	str	r2, [r7, #12]
 80035f0:	4619      	mov	r1, r3
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f000 f9db 	bl	80039ae <bytes_at>
 80035f8:	4603      	mov	r3, r0
 80035fa:	4619      	mov	r1, r3
 80035fc:	4620      	mov	r0, r4
 80035fe:	f000 fa04 	bl	8003a0a <bytes_push_back>

	// Protocol Level
	bytes_push_back( result->variable_header, (unsigned char) bytes_at(bytes, (index++)) );
 8003602:	69fb      	ldr	r3, [r7, #28]
 8003604:	685c      	ldr	r4, [r3, #4]
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	1c5a      	adds	r2, r3, #1
 800360a:	60fa      	str	r2, [r7, #12]
 800360c:	4619      	mov	r1, r3
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f000 f9cd 	bl	80039ae <bytes_at>
 8003614:	4603      	mov	r3, r0
 8003616:	4619      	mov	r1, r3
 8003618:	4620      	mov	r0, r4
 800361a:	f000 f9f6 	bl	8003a0a <bytes_push_back>

	// Flags
	bytes_push_back( result->variable_header, (unsigned char) bytes_at(bytes, (index++)));
 800361e:	69fb      	ldr	r3, [r7, #28]
 8003620:	685c      	ldr	r4, [r3, #4]
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	1c5a      	adds	r2, r3, #1
 8003626:	60fa      	str	r2, [r7, #12]
 8003628:	4619      	mov	r1, r3
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f000 f9bf 	bl	80039ae <bytes_at>
 8003630:	4603      	mov	r3, r0
 8003632:	4619      	mov	r1, r3
 8003634:	4620      	mov	r0, r4
 8003636:	f000 f9e8 	bl	8003a0a <bytes_push_back>

	// Keep Alive
	unsigned int msb_keep_alive = (unsigned int) (bytes_at(bytes, (index++)) << 8);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	1c5a      	adds	r2, r3, #1
 800363e:	60fa      	str	r2, [r7, #12]
 8003640:	4619      	mov	r1, r3
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f000 f9b3 	bl	80039ae <bytes_at>
 8003648:	4603      	mov	r3, r0
 800364a:	021b      	lsls	r3, r3, #8
 800364c:	61bb      	str	r3, [r7, #24]
	unsigned int lsb_keep_alive = (unsigned int) bytes_at(bytes, (index++));
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	1c5a      	adds	r2, r3, #1
 8003652:	60fa      	str	r2, [r7, #12]
 8003654:	4619      	mov	r1, r3
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f000 f9a9 	bl	80039ae <bytes_at>
 800365c:	4603      	mov	r3, r0
 800365e:	617b      	str	r3, [r7, #20]
	result->keep_alive = msb_keep_alive + lsb_keep_alive;
 8003660:	69bb      	ldr	r3, [r7, #24]
 8003662:	b29a      	uxth	r2, r3
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	b29b      	uxth	r3, r3
 8003668:	4413      	add	r3, r2
 800366a:	b29a      	uxth	r2, r3
 800366c:	69fb      	ldr	r3, [r7, #28]
 800366e:	811a      	strh	r2, [r3, #8]

	// Client Identifier
	result->client_identifier = packet_util_build_string(bytes, &index);
 8003670:	f107 030c 	add.w	r3, r7, #12
 8003674:	4619      	mov	r1, r3
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	f001 fb90 	bl	8004d9c <packet_util_build_string>
 800367c:	4602      	mov	r2, r0
 800367e:	69fb      	ldr	r3, [r7, #28]
 8003680:	f8c3 200a 	str.w	r2, [r3, #10]

	// Flags
	unsigned char flags = bytes_at(result->variable_header, 7);
 8003684:	69fb      	ldr	r3, [r7, #28]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	2107      	movs	r1, #7
 800368a:	4618      	mov	r0, r3
 800368c:	f000 f98f 	bl	80039ae <bytes_at>
 8003690:	4603      	mov	r3, r0
 8003692:	74fb      	strb	r3, [r7, #19]
	if ( flags & ( 0x01 << 2 ) ){
 8003694:	7cfb      	ldrb	r3, [r7, #19]
 8003696:	f003 0304 	and.w	r3, r3, #4
 800369a:	2b00      	cmp	r3, #0
 800369c:	d035      	beq.n	800370a <assembler_build_to_connect+0x1e6>
		result->will_topic = packet_util_build_string(bytes, &index);
 800369e:	f107 030c 	add.w	r3, r7, #12
 80036a2:	4619      	mov	r1, r3
 80036a4:	6878      	ldr	r0, [r7, #4]
 80036a6:	f001 fb79 	bl	8004d9c <packet_util_build_string>
 80036aa:	4602      	mov	r2, r0
 80036ac:	69fb      	ldr	r3, [r7, #28]
 80036ae:	f8c3 200e 	str.w	r2, [r3, #14]
		if ( flags & ( 0x01 << 2 ) )
 80036b2:	7cfb      	ldrb	r3, [r7, #19]
 80036b4:	f003 0304 	and.w	r3, r3, #4
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d009      	beq.n	80036d0 <assembler_build_to_connect+0x1ac>
			result->will_message = packet_util_build_string(bytes, &index);
 80036bc:	f107 030c 	add.w	r3, r7, #12
 80036c0:	4619      	mov	r1, r3
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f001 fb6a 	bl	8004d9c <packet_util_build_string>
 80036c8:	4602      	mov	r2, r0
 80036ca:	69fb      	ldr	r3, [r7, #28]
 80036cc:	f8c3 2012 	str.w	r2, [r3, #18]
		if ( flags & ( 0x01 << 7 ) ){
 80036d0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	da18      	bge.n	800370a <assembler_build_to_connect+0x1e6>
			result->username = packet_util_build_string(bytes, &index);
 80036d8:	f107 030c 	add.w	r3, r7, #12
 80036dc:	4619      	mov	r1, r3
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f001 fb5c 	bl	8004d9c <packet_util_build_string>
 80036e4:	4602      	mov	r2, r0
 80036e6:	69fb      	ldr	r3, [r7, #28]
 80036e8:	f8c3 2016 	str.w	r2, [r3, #22]
			if ( flags & ( 0x01 << 6 ) )
 80036ec:	7cfb      	ldrb	r3, [r7, #19]
 80036ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d009      	beq.n	800370a <assembler_build_to_connect+0x1e6>
				result->password = packet_util_build_string(bytes, &index);
 80036f6:	f107 030c 	add.w	r3, r7, #12
 80036fa:	4619      	mov	r1, r3
 80036fc:	6878      	ldr	r0, [r7, #4]
 80036fe:	f001 fb4d 	bl	8004d9c <packet_util_build_string>
 8003702:	4602      	mov	r2, r0
 8003704:	69fb      	ldr	r3, [r7, #28]
 8003706:	f8c3 201a 	str.w	r2, [r3, #26]
		}
	}

	return result;
 800370a:	69fb      	ldr	r3, [r7, #28]
}
 800370c:	4618      	mov	r0, r3
 800370e:	3724      	adds	r7, #36	; 0x24
 8003710:	46bd      	mov	sp, r7
 8003712:	bd90      	pop	{r4, r7, pc}

08003714 <assembler_build_to_publish>:
	unsigned int lsb_packet_identifier = (unsigned int) bytes_at(bytes, 3);
	result->packet_identifier = msb_packet_identifier + lsb_packet_identifier;
	return result;
}

publish* assembler_build_to_publish(bytes* bytes){
 8003714:	b580      	push	{r7, lr}
 8003716:	b086      	sub	sp, #24
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
	if( bytes == NULL ) return NULL;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d101      	bne.n	8003726 <assembler_build_to_publish+0x12>
 8003722:	2300      	movs	r3, #0
 8003724:	e06e      	b.n	8003804 <assembler_build_to_publish+0xf0>

	publish* result = (publish*) malloc(sizeof(publish));
 8003726:	2011      	movs	r0, #17
 8003728:	f009 f85e 	bl	800c7e8 <malloc>
 800372c:	4603      	mov	r3, r0
 800372e:	617b      	str	r3, [r7, #20]
	result->dup       	= control_packet_get_flags(result->control_packet) & 0x08 ? true : false;
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4618      	mov	r0, r3
 8003736:	f000 fe55 	bl	80043e4 <control_packet_get_flags>
 800373a:	4603      	mov	r3, r0
 800373c:	f003 0308 	and.w	r3, r3, #8
 8003740:	2b00      	cmp	r3, #0
 8003742:	bf14      	ite	ne
 8003744:	2301      	movne	r3, #1
 8003746:	2300      	moveq	r3, #0
 8003748:	b2da      	uxtb	r2, r3
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	711a      	strb	r2, [r3, #4]
	result->qos_level 	= (unsigned char) ( (control_packet_get_flags(result->control_packet) & 0x06) >> 1 );
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4618      	mov	r0, r3
 8003754:	f000 fe46 	bl	80043e4 <control_packet_get_flags>
 8003758:	4603      	mov	r3, r0
 800375a:	105b      	asrs	r3, r3, #1
 800375c:	b2db      	uxtb	r3, r3
 800375e:	f003 0303 	and.w	r3, r3, #3
 8003762:	b2da      	uxtb	r2, r3
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	715a      	strb	r2, [r3, #5]
	result->retain    	= control_packet_get_flags(result->control_packet) & 0x01 ? true : false;
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4618      	mov	r0, r3
 800376e:	f000 fe39 	bl	80043e4 <control_packet_get_flags>
 8003772:	4603      	mov	r3, r0
 8003774:	f003 0301 	and.w	r3, r3, #1
 8003778:	2b00      	cmp	r3, #0
 800377a:	bf14      	ite	ne
 800377c:	2301      	movne	r3, #1
 800377e:	2300      	moveq	r3, #0
 8003780:	b2da      	uxtb	r2, r3
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	719a      	strb	r2, [r3, #6]

	unsigned int index = 2;
 8003786:	2302      	movs	r3, #2
 8003788:	60bb      	str	r3, [r7, #8]
	result->topic_name = packet_util_build_string(bytes, &index);
 800378a:	f107 0308 	add.w	r3, r7, #8
 800378e:	4619      	mov	r1, r3
 8003790:	6878      	ldr	r0, [r7, #4]
 8003792:	f001 fb03 	bl	8004d9c <packet_util_build_string>
 8003796:	4602      	mov	r2, r0
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	f8c3 2007 	str.w	r2, [r3, #7]
	if( result->qos_level == PUBLISH_QOS_LEVEL_1 || result->qos_level == PUBLISH_QOS_LEVEL_2 ) {
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	795a      	ldrb	r2, [r3, #5]
 80037a2:	4b1a      	ldr	r3, [pc, #104]	; (800380c <assembler_build_to_publish+0xf8>)
 80037a4:	781b      	ldrb	r3, [r3, #0]
 80037a6:	429a      	cmp	r2, r3
 80037a8:	d005      	beq.n	80037b6 <assembler_build_to_publish+0xa2>
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	795a      	ldrb	r2, [r3, #5]
 80037ae:	4b18      	ldr	r3, [pc, #96]	; (8003810 <assembler_build_to_publish+0xfc>)
 80037b0:	781b      	ldrb	r3, [r3, #0]
 80037b2:	429a      	cmp	r2, r3
 80037b4:	d11b      	bne.n	80037ee <assembler_build_to_publish+0xda>
		unsigned int msb_packet_identifier = (unsigned int) ( bytes_at(bytes,index++) << 8 );
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	1c5a      	adds	r2, r3, #1
 80037ba:	60ba      	str	r2, [r7, #8]
 80037bc:	4619      	mov	r1, r3
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f000 f8f5 	bl	80039ae <bytes_at>
 80037c4:	4603      	mov	r3, r0
 80037c6:	021b      	lsls	r3, r3, #8
 80037c8:	613b      	str	r3, [r7, #16]
		unsigned int lsb_packet_identifier = (unsigned int) bytes_at(bytes, index++);
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	1c5a      	adds	r2, r3, #1
 80037ce:	60ba      	str	r2, [r7, #8]
 80037d0:	4619      	mov	r1, r3
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	f000 f8eb 	bl	80039ae <bytes_at>
 80037d8:	4603      	mov	r3, r0
 80037da:	60fb      	str	r3, [r7, #12]
		result->packet_identifier = msb_packet_identifier + lsb_packet_identifier;
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	b29a      	uxth	r2, r3
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	b29b      	uxth	r3, r3
 80037e4:	4413      	add	r3, r2
 80037e6:	b29a      	uxth	r2, r3
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	f8a3 200b 	strh.w	r2, [r3, #11]
	}

	result->payload = packet_util_build_string(bytes, &index);
 80037ee:	f107 0308 	add.w	r3, r7, #8
 80037f2:	4619      	mov	r1, r3
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	f001 fad1 	bl	8004d9c <packet_util_build_string>
 80037fa:	4602      	mov	r2, r0
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	f8c3 200d 	str.w	r2, [r3, #13]

	return result;
 8003802:	697b      	ldr	r3, [r7, #20]
}
 8003804:	4618      	mov	r0, r3
 8003806:	3718      	adds	r7, #24
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}
 800380c:	200000d0 	.word	0x200000d0
 8003810:	200000d1 	.word	0x200000d1

08003814 <assembler_build_to_pub_rel>:
	unsigned int lsb_packet_identifier = (unsigned int) bytes_at(bytes, 3);
	result->packet_identifier = msb_packet_identifier + lsb_packet_identifier;
	return result;
}

pub_rel* assembler_build_to_pub_rel(bytes* bytes){
 8003814:	b580      	push	{r7, lr}
 8003816:	b086      	sub	sp, #24
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
	if( bytes == NULL ) return NULL;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d101      	bne.n	8003826 <assembler_build_to_pub_rel+0x12>
 8003822:	2300      	movs	r3, #0
 8003824:	e01d      	b.n	8003862 <assembler_build_to_pub_rel+0x4e>
	pub_rel* result = (pub_rel*) malloc(sizeof(pub_rel));
 8003826:	2008      	movs	r0, #8
 8003828:	f008 ffde 	bl	800c7e8 <malloc>
 800382c:	4603      	mov	r3, r0
 800382e:	617b      	str	r3, [r7, #20]
	result->control_packet = assembler_build_to_control_packet(bytes);
 8003830:	6878      	ldr	r0, [r7, #4]
 8003832:	f7ff fe49 	bl	80034c8 <assembler_build_to_control_packet>
 8003836:	4602      	mov	r2, r0
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	601a      	str	r2, [r3, #0]
	unsigned int msb_packet_identifier = (unsigned int) ( bytes_at(bytes, 2) << 8);
 800383c:	2102      	movs	r1, #2
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f000 f8b5 	bl	80039ae <bytes_at>
 8003844:	4603      	mov	r3, r0
 8003846:	021b      	lsls	r3, r3, #8
 8003848:	613b      	str	r3, [r7, #16]
	unsigned int lsb_packet_identifier = (unsigned int) bytes_at(bytes, 3);
 800384a:	2103      	movs	r1, #3
 800384c:	6878      	ldr	r0, [r7, #4]
 800384e:	f000 f8ae 	bl	80039ae <bytes_at>
 8003852:	4603      	mov	r3, r0
 8003854:	60fb      	str	r3, [r7, #12]
	result->packet_identifier = msb_packet_identifier + lsb_packet_identifier;
 8003856:	693a      	ldr	r2, [r7, #16]
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	441a      	add	r2, r3
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	605a      	str	r2, [r3, #4]
	return result;
 8003860:	697b      	ldr	r3, [r7, #20]
}
 8003862:	4618      	mov	r0, r3
 8003864:	3718      	adds	r7, #24
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}

0800386a <node_init>:
#include <mqtt_client/bytes.h>

node* node_init(const unsigned char value, node* previous, node* next){
 800386a:	b580      	push	{r7, lr}
 800386c:	b086      	sub	sp, #24
 800386e:	af00      	add	r7, sp, #0
 8003870:	4603      	mov	r3, r0
 8003872:	60b9      	str	r1, [r7, #8]
 8003874:	607a      	str	r2, [r7, #4]
 8003876:	73fb      	strb	r3, [r7, #15]
	node* result = (node*) malloc(sizeof(node));
 8003878:	200c      	movs	r0, #12
 800387a:	f008 ffb5 	bl	800c7e8 <malloc>
 800387e:	4603      	mov	r3, r0
 8003880:	617b      	str	r3, [r7, #20]
	result->value = value;
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	7bfa      	ldrb	r2, [r7, #15]
 8003886:	701a      	strb	r2, [r3, #0]
	result->previous = previous;
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	68ba      	ldr	r2, [r7, #8]
 800388c:	605a      	str	r2, [r3, #4]
	result->next = next;
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	687a      	ldr	r2, [r7, #4]
 8003892:	609a      	str	r2, [r3, #8]
	return result;
 8003894:	697b      	ldr	r3, [r7, #20]
}
 8003896:	4618      	mov	r0, r3
 8003898:	3718      	adds	r7, #24
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}

0800389e <node_destroy>:

void node_destroy(node* node){
 800389e:	b580      	push	{r7, lr}
 80038a0:	b082      	sub	sp, #8
 80038a2:	af00      	add	r7, sp, #0
 80038a4:	6078      	str	r0, [r7, #4]
	if( node == NULL ) return;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d00b      	beq.n	80038c4 <node_destroy+0x26>
	node->previous = NULL;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2200      	movs	r2, #0
 80038b0:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2200      	movs	r2, #0
 80038b6:	609a      	str	r2, [r3, #8]
	free(node);
 80038b8:	6878      	ldr	r0, [r7, #4]
 80038ba:	f008 ff9d 	bl	800c7f8 <free>
	node = NULL;
 80038be:	2300      	movs	r3, #0
 80038c0:	607b      	str	r3, [r7, #4]
 80038c2:	e000      	b.n	80038c6 <node_destroy+0x28>
	if( node == NULL ) return;
 80038c4:	bf00      	nop
}
 80038c6:	3708      	adds	r7, #8
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}

080038cc <bytes_init>:

bytes* bytes_init(){
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b082      	sub	sp, #8
 80038d0:	af00      	add	r7, sp, #0
	bytes* result = (bytes*) malloc(sizeof(bytes));
 80038d2:	200c      	movs	r0, #12
 80038d4:	f008 ff88 	bl	800c7e8 <malloc>
 80038d8:	4603      	mov	r3, r0
 80038da:	607b      	str	r3, [r7, #4]
	result->front = NULL;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2200      	movs	r2, #0
 80038e0:	701a      	strb	r2, [r3, #0]
 80038e2:	2200      	movs	r2, #0
 80038e4:	705a      	strb	r2, [r3, #1]
 80038e6:	2200      	movs	r2, #0
 80038e8:	709a      	strb	r2, [r3, #2]
 80038ea:	2200      	movs	r2, #0
 80038ec:	70da      	strb	r2, [r3, #3]
	result->back = NULL;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2200      	movs	r2, #0
 80038f2:	711a      	strb	r2, [r3, #4]
 80038f4:	2200      	movs	r2, #0
 80038f6:	715a      	strb	r2, [r3, #5]
 80038f8:	2200      	movs	r2, #0
 80038fa:	719a      	strb	r2, [r3, #6]
 80038fc:	2200      	movs	r2, #0
 80038fe:	71da      	strb	r2, [r3, #7]
	result->size = 0;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2200      	movs	r2, #0
 8003904:	721a      	strb	r2, [r3, #8]
 8003906:	2200      	movs	r2, #0
 8003908:	725a      	strb	r2, [r3, #9]
 800390a:	2200      	movs	r2, #0
 800390c:	729a      	strb	r2, [r3, #10]
 800390e:	2200      	movs	r2, #0
 8003910:	72da      	strb	r2, [r3, #11]
	return result;
 8003912:	687b      	ldr	r3, [r7, #4]
}
 8003914:	4618      	mov	r0, r3
 8003916:	3708      	adds	r7, #8
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}

0800391c <bytes_destroy>:

void bytes_destroy(bytes* bytes){
 800391c:	b580      	push	{r7, lr}
 800391e:	b084      	sub	sp, #16
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
	if( bytes == NULL ) return;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d028      	beq.n	800397c <bytes_destroy+0x60>

	node* next = NULL;
 800392a:	2300      	movs	r3, #0
 800392c:	60bb      	str	r3, [r7, #8]
	node* actual = bytes->front;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	60fb      	str	r3, [r7, #12]
	while( actual != NULL ){
 8003934:	e007      	b.n	8003946 <bytes_destroy+0x2a>
		next = actual->next;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	60bb      	str	r3, [r7, #8]
		node_destroy(actual);
 800393c:	68f8      	ldr	r0, [r7, #12]
 800393e:	f7ff ffae 	bl	800389e <node_destroy>
		actual = next;
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	60fb      	str	r3, [r7, #12]
	while( actual != NULL ){
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d1f4      	bne.n	8003936 <bytes_destroy+0x1a>
	}
	bytes->front = NULL;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2200      	movs	r2, #0
 8003950:	701a      	strb	r2, [r3, #0]
 8003952:	2200      	movs	r2, #0
 8003954:	705a      	strb	r2, [r3, #1]
 8003956:	2200      	movs	r2, #0
 8003958:	709a      	strb	r2, [r3, #2]
 800395a:	2200      	movs	r2, #0
 800395c:	70da      	strb	r2, [r3, #3]
	bytes->back = NULL;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2200      	movs	r2, #0
 8003962:	711a      	strb	r2, [r3, #4]
 8003964:	2200      	movs	r2, #0
 8003966:	715a      	strb	r2, [r3, #5]
 8003968:	2200      	movs	r2, #0
 800396a:	719a      	strb	r2, [r3, #6]
 800396c:	2200      	movs	r2, #0
 800396e:	71da      	strb	r2, [r3, #7]
	free(bytes);
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	f008 ff41 	bl	800c7f8 <free>
	bytes = NULL;
 8003976:	2300      	movs	r3, #0
 8003978:	607b      	str	r3, [r7, #4]
 800397a:	e000      	b.n	800397e <bytes_destroy+0x62>
	if( bytes == NULL ) return;
 800397c:	bf00      	nop
}
 800397e:	3710      	adds	r7, #16
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}

08003984 <bytes_is_empty>:

unsigned char bytes_is_empty(bytes* bytes){
 8003984:	b480      	push	{r7}
 8003986:	b083      	sub	sp, #12
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
	return bytes == NULL || bytes->size == 0 ? 1 : 0;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d003      	beq.n	800399a <bytes_is_empty+0x16>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d101      	bne.n	800399e <bytes_is_empty+0x1a>
 800399a:	2301      	movs	r3, #1
 800399c:	e000      	b.n	80039a0 <bytes_is_empty+0x1c>
 800399e:	2300      	movs	r3, #0
 80039a0:	b2db      	uxtb	r3, r3
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	370c      	adds	r7, #12
 80039a6:	46bd      	mov	sp, r7
 80039a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ac:	4770      	bx	lr

080039ae <bytes_at>:

unsigned char bytes_at(bytes* bytes, const unsigned int index){
 80039ae:	b480      	push	{r7}
 80039b0:	b085      	sub	sp, #20
 80039b2:	af00      	add	r7, sp, #0
 80039b4:	6078      	str	r0, [r7, #4]
 80039b6:	6039      	str	r1, [r7, #0]
	if( bytes == NULL || index >= bytes->size )
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d004      	beq.n	80039c8 <bytes_at+0x1a>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	683a      	ldr	r2, [r7, #0]
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d301      	bcc.n	80039cc <bytes_at+0x1e>
		return (unsigned char) 0;
 80039c8:	2300      	movs	r3, #0
 80039ca:	e018      	b.n	80039fe <bytes_at+0x50>

	int position = index;
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	60fb      	str	r3, [r7, #12]
	node* current = bytes->front;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	60bb      	str	r3, [r7, #8]
	while( position != 0 && current != NULL) {
 80039d6:	e005      	b.n	80039e4 <bytes_at+0x36>
		current = current->next;
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	60bb      	str	r3, [r7, #8]
		position--;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	3b01      	subs	r3, #1
 80039e2:	60fb      	str	r3, [r7, #12]
	while( position != 0 && current != NULL) {
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d002      	beq.n	80039f0 <bytes_at+0x42>
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d1f3      	bne.n	80039d8 <bytes_at+0x2a>
	}

	return current == NULL ? (unsigned char) 0 : current->value;
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d002      	beq.n	80039fc <bytes_at+0x4e>
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	781b      	ldrb	r3, [r3, #0]
 80039fa:	e000      	b.n	80039fe <bytes_at+0x50>
 80039fc:	2300      	movs	r3, #0
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3714      	adds	r7, #20
 8003a02:	46bd      	mov	sp, r7
 8003a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a08:	4770      	bx	lr

08003a0a <bytes_push_back>:
	if( bytes_is_empty(bytes) )
		return (unsigned char) 0;
	return bytes->back->value;
}

void bytes_push_back(bytes* bytes, const unsigned char value){
 8003a0a:	b580      	push	{r7, lr}
 8003a0c:	b084      	sub	sp, #16
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	6078      	str	r0, [r7, #4]
 8003a12:	460b      	mov	r3, r1
 8003a14:	70fb      	strb	r3, [r7, #3]
	node* node = node_init(value, bytes->back, NULL);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6859      	ldr	r1, [r3, #4]
 8003a1a:	78fb      	ldrb	r3, [r7, #3]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f7ff ff23 	bl	800386a <node_init>
 8003a24:	60f8      	str	r0, [r7, #12]
	if( bytes->front == NULL ){
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d107      	bne.n	8003a3e <bytes_push_back+0x34>
		bytes->front = bytes->back = node;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	68fa      	ldr	r2, [r7, #12]
 8003a32:	605a      	str	r2, [r3, #4]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	685a      	ldr	r2, [r3, #4]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	601a      	str	r2, [r3, #0]
 8003a3c:	e006      	b.n	8003a4c <bytes_push_back+0x42>
	} else {
		bytes->back->next = node;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	68fa      	ldr	r2, [r7, #12]
 8003a44:	609a      	str	r2, [r3, #8]
		bytes->back = node;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	68fa      	ldr	r2, [r7, #12]
 8003a4a:	605a      	str	r2, [r3, #4]
	}
	bytes->size++;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	1c5a      	adds	r2, r3, #1
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	609a      	str	r2, [r3, #8]
}
 8003a56:	bf00      	nop
 8003a58:	3710      	adds	r7, #16
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}

08003a5e <bytes_get_size>:
	}

	bytes->size--;
}

unsigned int bytes_get_size(bytes* bytes){
 8003a5e:	b580      	push	{r7, lr}
 8003a60:	b082      	sub	sp, #8
 8003a62:	af00      	add	r7, sp, #0
 8003a64:	6078      	str	r0, [r7, #4]
	return bytes_is_empty(bytes) ? 0 : bytes->size;
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f7ff ff8c 	bl	8003984 <bytes_is_empty>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d102      	bne.n	8003a78 <bytes_get_size+0x1a>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	e000      	b.n	8003a7a <bytes_get_size+0x1c>
 8003a78:	2300      	movs	r3, #0
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	3708      	adds	r7, #8
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}

08003a82 <bytes_concat>:

void bytes_concat(bytes* destiny, bytes* source){
 8003a82:	b590      	push	{r4, r7, lr}
 8003a84:	b083      	sub	sp, #12
 8003a86:	af00      	add	r7, sp, #0
 8003a88:	6078      	str	r0, [r7, #4]
 8003a8a:	6039      	str	r1, [r7, #0]
	if ( bytes_is_empty(source) ) return;
 8003a8c:	6838      	ldr	r0, [r7, #0]
 8003a8e:	f7ff ff79 	bl	8003984 <bytes_is_empty>
 8003a92:	4603      	mov	r3, r0
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d112      	bne.n	8003abe <bytes_concat+0x3c>
	for(register unsigned int i = 0; i < bytes_get_size(source); i++){
 8003a98:	2400      	movs	r4, #0
 8003a9a:	e009      	b.n	8003ab0 <bytes_concat+0x2e>
		bytes_push_back(destiny, bytes_at(source, i));
 8003a9c:	4621      	mov	r1, r4
 8003a9e:	6838      	ldr	r0, [r7, #0]
 8003aa0:	f7ff ff85 	bl	80039ae <bytes_at>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	4619      	mov	r1, r3
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	f7ff ffae 	bl	8003a0a <bytes_push_back>
	for(register unsigned int i = 0; i < bytes_get_size(source); i++){
 8003aae:	3401      	adds	r4, #1
 8003ab0:	6838      	ldr	r0, [r7, #0]
 8003ab2:	f7ff ffd4 	bl	8003a5e <bytes_get_size>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	429c      	cmp	r4, r3
 8003aba:	d3ef      	bcc.n	8003a9c <bytes_concat+0x1a>
 8003abc:	e000      	b.n	8003ac0 <bytes_concat+0x3e>
	if ( bytes_is_empty(source) ) return;
 8003abe:	bf00      	nop
	}
}
 8003ac0:	370c      	adds	r7, #12
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd90      	pop	{r4, r7, pc}

08003ac6 <bytes_to_array>:

unsigned char* bytes_to_array(bytes* bytes){
 8003ac6:	b5b0      	push	{r4, r5, r7, lr}
 8003ac8:	b084      	sub	sp, #16
 8003aca:	af00      	add	r7, sp, #0
 8003acc:	6078      	str	r0, [r7, #4]
	if ( bytes_is_empty(bytes) ) return NULL;
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f7ff ff58 	bl	8003984 <bytes_is_empty>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d001      	beq.n	8003ade <bytes_to_array+0x18>
 8003ada:	2300      	movs	r3, #0
 8003adc:	e017      	b.n	8003b0e <bytes_to_array+0x48>

	unsigned int size = bytes_get_size(bytes);
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f7ff ffbd 	bl	8003a5e <bytes_get_size>
 8003ae4:	60f8      	str	r0, [r7, #12]
	unsigned char* result = (unsigned char*) malloc(size*sizeof(unsigned char));
 8003ae6:	68f8      	ldr	r0, [r7, #12]
 8003ae8:	f008 fe7e 	bl	800c7e8 <malloc>
 8003aec:	4603      	mov	r3, r0
 8003aee:	60bb      	str	r3, [r7, #8]
	for(register unsigned int i = 0; i < size; i++) result[i] = bytes_at(bytes, i);
 8003af0:	2400      	movs	r4, #0
 8003af2:	e008      	b.n	8003b06 <bytes_to_array+0x40>
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	191d      	adds	r5, r3, r4
 8003af8:	4621      	mov	r1, r4
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f7ff ff57 	bl	80039ae <bytes_at>
 8003b00:	4603      	mov	r3, r0
 8003b02:	702b      	strb	r3, [r5, #0]
 8003b04:	3401      	adds	r4, #1
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	429c      	cmp	r4, r3
 8003b0a:	d3f3      	bcc.n	8003af4 <bytes_to_array+0x2e>
	return result;
 8003b0c:	68bb      	ldr	r3, [r7, #8]
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3710      	adds	r7, #16
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bdb0      	pop	{r4, r5, r7, pc}

08003b16 <connack_init>:

const unsigned char CONNACK_RETURN_CODE_CONNECTION_REFUSED_BAD_USERNAME_OR_PASSWORD      = 0x04;

const unsigned char CONNACK_RETURN_CODE_CONNECTION_REFUSED_NOT_AUTHORIZED                = 0x05;

connack* connack_init(const bool clean_session, const unsigned char return_code){
 8003b16:	b580      	push	{r7, lr}
 8003b18:	b084      	sub	sp, #16
 8003b1a:	af00      	add	r7, sp, #0
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	460a      	mov	r2, r1
 8003b20:	71fb      	strb	r3, [r7, #7]
 8003b22:	4613      	mov	r3, r2
 8003b24:	71bb      	strb	r3, [r7, #6]
	connack* result = (connack*) malloc(sizeof(connack));
 8003b26:	2006      	movs	r0, #6
 8003b28:	f008 fe5e 	bl	800c7e8 <malloc>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	60fb      	str	r3, [r7, #12]
	result->clean_session      	= clean_session;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	79fa      	ldrb	r2, [r7, #7]
 8003b34:	711a      	strb	r2, [r3, #4]
	result->return_code        	= return_code;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	79ba      	ldrb	r2, [r7, #6]
 8003b3a:	715a      	strb	r2, [r3, #5]
	return result;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3710      	adds	r7, #16
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}

08003b46 <connack_destroy>:

void connack_destroy(connack* connack){
 8003b46:	b580      	push	{r7, lr}
 8003b48:	b082      	sub	sp, #8
 8003b4a:	af00      	add	r7, sp, #0
 8003b4c:	6078      	str	r0, [r7, #4]
	if( connack == NULL ) return;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d00e      	beq.n	8003b72 <connack_destroy+0x2c>

	connack->control_packet = NULL;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2200      	movs	r2, #0
 8003b58:	701a      	strb	r2, [r3, #0]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	705a      	strb	r2, [r3, #1]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	709a      	strb	r2, [r3, #2]
 8003b62:	2200      	movs	r2, #0
 8003b64:	70da      	strb	r2, [r3, #3]
	free(connack);
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f008 fe46 	bl	800c7f8 <free>
	connack = NULL;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	607b      	str	r3, [r7, #4]
 8003b70:	e000      	b.n	8003b74 <connack_destroy+0x2e>
	if( connack == NULL ) return;
 8003b72:	bf00      	nop
}
 8003b74:	3708      	adds	r7, #8
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}

08003b7a <connack_is_connection_accepted>:
void connack_set_return_code(connack* connack, const unsigned char return_code){
	if( connack == NULL ) return;
	connack->return_code = return_code;
}

bool connack_is_connection_accepted(connack* connack){
 8003b7a:	b480      	push	{r7}
 8003b7c:	b083      	sub	sp, #12
 8003b7e:	af00      	add	r7, sp, #0
 8003b80:	6078      	str	r0, [r7, #4]
	return connack == NULL ? false : connack->return_code == CONNACK_RETURN_CODE_CONNECTION_ACCEPTED;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d006      	beq.n	8003b96 <connack_is_connection_accepted+0x1c>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	795b      	ldrb	r3, [r3, #5]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d101      	bne.n	8003b96 <connack_is_connection_accepted+0x1c>
 8003b92:	2301      	movs	r3, #1
 8003b94:	e000      	b.n	8003b98 <connack_is_connection_accepted+0x1e>
 8003b96:	2300      	movs	r3, #0
 8003b98:	f003 0301 	and.w	r3, r3, #1
 8003b9c:	b2db      	uxtb	r3, r3
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	370c      	adds	r7, #12
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba8:	4770      	bx	lr

08003baa <connack_service_init>:
#include "../../Inc/mqtt_client/connack_service.h"

connack_service* connack_service_init(control_packet_proxy* control_packet_proxy){
 8003baa:	b580      	push	{r7, lr}
 8003bac:	b084      	sub	sp, #16
 8003bae:	af00      	add	r7, sp, #0
 8003bb0:	6078      	str	r0, [r7, #4]
	if(control_packet_proxy == NULL) return NULL;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d101      	bne.n	8003bbc <connack_service_init+0x12>
 8003bb8:	2300      	movs	r3, #0
 8003bba:	e008      	b.n	8003bce <connack_service_init+0x24>
	connack_service* result = (connack_service*) malloc(sizeof(connack_service));
 8003bbc:	2004      	movs	r0, #4
 8003bbe:	f008 fe13 	bl	800c7e8 <malloc>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	60fb      	str	r3, [r7, #12]
	result->control_packet_proxy = control_packet_proxy;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	687a      	ldr	r2, [r7, #4]
 8003bca:	601a      	str	r2, [r3, #0]
	return result;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	3710      	adds	r7, #16
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}

08003bd6 <connack_service_destroy>:

void connack_service_destroy(connack_service* connack_service){
 8003bd6:	b580      	push	{r7, lr}
 8003bd8:	b082      	sub	sp, #8
 8003bda:	af00      	add	r7, sp, #0
 8003bdc:	6078      	str	r0, [r7, #4]
	if( connack_service == NULL ) return;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d00e      	beq.n	8003c02 <connack_service_destroy+0x2c>
	connack_service->control_packet_proxy = NULL;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2200      	movs	r2, #0
 8003be8:	701a      	strb	r2, [r3, #0]
 8003bea:	2200      	movs	r2, #0
 8003bec:	705a      	strb	r2, [r3, #1]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	709a      	strb	r2, [r3, #2]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	70da      	strb	r2, [r3, #3]
	free(connack_service);
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	f008 fdfe 	bl	800c7f8 <free>
	connack_service = NULL;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	607b      	str	r3, [r7, #4]
 8003c00:	e000      	b.n	8003c04 <connack_service_destroy+0x2e>
	if( connack_service == NULL ) return;
 8003c02:	bf00      	nop
}
 8003c04:	3708      	adds	r7, #8
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}
	...

08003c0c <connack_service_create>:

connack* connack_service_create(connack_service* connack_service){
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b086      	sub	sp, #24
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
	if( connack_service == NULL ) return NULL;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d101      	bne.n	8003c1e <connack_service_create+0x12>
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	e010      	b.n	8003c40 <connack_service_create+0x34>
	session* session = session_get_instance();
 8003c1e:	f001 ff05 	bl	8005a2c <session_get_instance>
 8003c22:	6178      	str	r0, [r7, #20]
	bool clean_session = session_is_clean(session);
 8003c24:	6978      	ldr	r0, [r7, #20]
 8003c26:	f001 ffe0 	bl	8005bea <session_is_clean>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	74fb      	strb	r3, [r7, #19]
	connack* result = connack_init(clean_session, CONNACK_RETURN_CODE_CONNECTION_ACCEPTED);
 8003c2e:	4b06      	ldr	r3, [pc, #24]	; (8003c48 <connack_service_create+0x3c>)
 8003c30:	781a      	ldrb	r2, [r3, #0]
 8003c32:	7cfb      	ldrb	r3, [r7, #19]
 8003c34:	4611      	mov	r1, r2
 8003c36:	4618      	mov	r0, r3
 8003c38:	f7ff ff6d 	bl	8003b16 <connack_init>
 8003c3c:	60f8      	str	r0, [r7, #12]
	return result;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	3718      	adds	r7, #24
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd80      	pop	{r7, pc}
 8003c48:	080118f4 	.word	0x080118f4

08003c4c <connect_init>:
const unsigned char CONNECT_QOS_LEVEL_1 = 0x01;

const unsigned char CONNECT_QOS_LEVEL_2 = 0x02;


connect* connect_init(const bool username, const bool password, const bool will_retain, const unsigned char will_QoS, const bool will_flag, const bool clean_session, const unsigned int keep_alive){
 8003c4c:	b590      	push	{r4, r7, lr}
 8003c4e:	b085      	sub	sp, #20
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	4604      	mov	r4, r0
 8003c54:	4608      	mov	r0, r1
 8003c56:	4611      	mov	r1, r2
 8003c58:	461a      	mov	r2, r3
 8003c5a:	4623      	mov	r3, r4
 8003c5c:	71fb      	strb	r3, [r7, #7]
 8003c5e:	4603      	mov	r3, r0
 8003c60:	71bb      	strb	r3, [r7, #6]
 8003c62:	460b      	mov	r3, r1
 8003c64:	717b      	strb	r3, [r7, #5]
 8003c66:	4613      	mov	r3, r2
 8003c68:	713b      	strb	r3, [r7, #4]
	connect* result = (connect*) malloc(sizeof(connect));
 8003c6a:	201e      	movs	r0, #30
 8003c6c:	f008 fdbc 	bl	800c7e8 <malloc>
 8003c70:	4603      	mov	r3, r0
 8003c72:	60bb      	str	r3, [r7, #8]
	result->control_packet = control_packet_init(CONTROL_PACKET_TYPE_CONNECT, CONTROL_PACKET_FLAG_CONNECT, 0x00);
 8003c74:	4b5f      	ldr	r3, [pc, #380]	; (8003df4 <connect_init+0x1a8>)
 8003c76:	7818      	ldrb	r0, [r3, #0]
 8003c78:	4b5f      	ldr	r3, [pc, #380]	; (8003df8 <connect_init+0x1ac>)
 8003c7a:	781b      	ldrb	r3, [r3, #0]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	4619      	mov	r1, r3
 8003c80:	f000 fb94 	bl	80043ac <control_packet_init>
 8003c84:	4602      	mov	r2, r0
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	601a      	str	r2, [r3, #0]

	result->variable_header = bytes_init();
 8003c8a:	f7ff fe1f 	bl	80038cc <bytes_init>
 8003c8e:	4602      	mov	r2, r0
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	605a      	str	r2, [r3, #4]
	bytes_push_back( result->variable_header, (unsigned char) 0 );
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	2100      	movs	r1, #0
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f7ff feb5 	bl	8003a0a <bytes_push_back>
	bytes_push_back( result->variable_header, (unsigned char) 4 );
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	2104      	movs	r1, #4
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f7ff feaf 	bl	8003a0a <bytes_push_back>
	bytes_push_back( result->variable_header, (unsigned char) 'M' );
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	214d      	movs	r1, #77	; 0x4d
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f7ff fea9 	bl	8003a0a <bytes_push_back>
	bytes_push_back( result->variable_header, (unsigned char) 'Q' );
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	2151      	movs	r1, #81	; 0x51
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f7ff fea3 	bl	8003a0a <bytes_push_back>
	bytes_push_back( result->variable_header, (unsigned char) 'T' );
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	2154      	movs	r1, #84	; 0x54
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f7ff fe9d 	bl	8003a0a <bytes_push_back>
	bytes_push_back( result->variable_header, (unsigned char) 'T' );
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	2154      	movs	r1, #84	; 0x54
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f7ff fe97 	bl	8003a0a <bytes_push_back>
	bytes_push_back( result->variable_header, (unsigned char) 4 );
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	2104      	movs	r1, #4
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f7ff fe91 	bl	8003a0a <bytes_push_back>

	// Connect Flag bits
	unsigned char flags = (unsigned char) 0;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	73fb      	strb	r3, [r7, #15]
	flags = flags | ( (username ? 0x01 : 0x00) << 7 ); // User Name Flag
 8003cec:	79fb      	ldrb	r3, [r7, #7]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d002      	beq.n	8003cf8 <connect_init+0xac>
 8003cf2:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 8003cf6:	e000      	b.n	8003cfa <connect_init+0xae>
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	b25b      	sxtb	r3, r3
 8003d02:	73fb      	strb	r3, [r7, #15]
	flags = flags | ( (password ? 0x01 : 0x00) << 6 ); // Password Flag
 8003d04:	79bb      	ldrb	r3, [r7, #6]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d001      	beq.n	8003d0e <connect_init+0xc2>
 8003d0a:	2240      	movs	r2, #64	; 0x40
 8003d0c:	e000      	b.n	8003d10 <connect_init+0xc4>
 8003d0e:	2200      	movs	r2, #0
 8003d10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d14:	4313      	orrs	r3, r2
 8003d16:	b25b      	sxtb	r3, r3
 8003d18:	73fb      	strb	r3, [r7, #15]
	flags = flags | ( (will_retain ? 0x01 : 0x00) << 5 ); // Will Retain
 8003d1a:	797b      	ldrb	r3, [r7, #5]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d001      	beq.n	8003d24 <connect_init+0xd8>
 8003d20:	2220      	movs	r2, #32
 8003d22:	e000      	b.n	8003d26 <connect_init+0xda>
 8003d24:	2200      	movs	r2, #0
 8003d26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	b25b      	sxtb	r3, r3
 8003d2e:	73fb      	strb	r3, [r7, #15]
	flags = flags | ( (will_QoS & 0x03) << 3 ); // Will QoS
 8003d30:	793b      	ldrb	r3, [r7, #4]
 8003d32:	00db      	lsls	r3, r3, #3
 8003d34:	b25b      	sxtb	r3, r3
 8003d36:	f003 0318 	and.w	r3, r3, #24
 8003d3a:	b25a      	sxtb	r2, r3
 8003d3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d40:	4313      	orrs	r3, r2
 8003d42:	b25b      	sxtb	r3, r3
 8003d44:	73fb      	strb	r3, [r7, #15]
	flags = flags | ( (will_flag ? 0x01 : 0x00) << 2 ); // Will Flag
 8003d46:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d001      	beq.n	8003d52 <connect_init+0x106>
 8003d4e:	2204      	movs	r2, #4
 8003d50:	e000      	b.n	8003d54 <connect_init+0x108>
 8003d52:	2200      	movs	r2, #0
 8003d54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	b25b      	sxtb	r3, r3
 8003d5c:	73fb      	strb	r3, [r7, #15]
	flags = flags | ( (clean_session ? 0x01 : 0x00) << 1 ); // Clean Session
 8003d5e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d001      	beq.n	8003d6a <connect_init+0x11e>
 8003d66:	2202      	movs	r2, #2
 8003d68:	e000      	b.n	8003d6c <connect_init+0x120>
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d70:	4313      	orrs	r3, r2
 8003d72:	b25b      	sxtb	r3, r3
 8003d74:	73fb      	strb	r3, [r7, #15]

	// Condition of will_flag
	if ( ! will_flag ){
 8003d76:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003d7a:	f083 0301 	eor.w	r3, r3, #1
 8003d7e:	b2db      	uxtb	r3, r3
 8003d80:	2b00      	cmp	r3, #0
		flags = flags | ( 0x00 << 5 ); // Will Retain
	    flags = flags | ( 0x00 << 3 ); // Will QoS
	}

	if ( ! username ){
 8003d82:	79fb      	ldrb	r3, [r7, #7]
 8003d84:	f083 0301 	eor.w	r3, r3, #1
 8003d88:	b2db      	uxtb	r3, r3
 8003d8a:	2b00      	cmp	r3, #0
		flags = flags | ( 0x00 << 6 ); // Password Flag
	}

	bytes_push_back( result->variable_header, flags);
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	7bfa      	ldrb	r2, [r7, #15]
 8003d92:	4611      	mov	r1, r2
 8003d94:	4618      	mov	r0, r3
 8003d96:	f7ff fe38 	bl	8003a0a <bytes_push_back>
	result->keep_alive = keep_alive;
 8003d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d9c:	b29a      	uxth	r2, r3
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	811a      	strh	r2, [r3, #8]

	result->will_topic = NULL;
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	2200      	movs	r2, #0
 8003da6:	739a      	strb	r2, [r3, #14]
 8003da8:	2200      	movs	r2, #0
 8003daa:	73da      	strb	r2, [r3, #15]
 8003dac:	2200      	movs	r2, #0
 8003dae:	741a      	strb	r2, [r3, #16]
 8003db0:	2200      	movs	r2, #0
 8003db2:	745a      	strb	r2, [r3, #17]
	result->will_message = NULL;
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	2200      	movs	r2, #0
 8003db8:	749a      	strb	r2, [r3, #18]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	74da      	strb	r2, [r3, #19]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	751a      	strb	r2, [r3, #20]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	755a      	strb	r2, [r3, #21]
	result->username = NULL;
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	759a      	strb	r2, [r3, #22]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	75da      	strb	r2, [r3, #23]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	761a      	strb	r2, [r3, #24]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	765a      	strb	r2, [r3, #25]
	result->password = NULL;
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	769a      	strb	r2, [r3, #26]
 8003dde:	2200      	movs	r2, #0
 8003de0:	76da      	strb	r2, [r3, #27]
 8003de2:	2200      	movs	r2, #0
 8003de4:	771a      	strb	r2, [r3, #28]
 8003de6:	2200      	movs	r2, #0
 8003de8:	775a      	strb	r2, [r3, #29]

	return result;
 8003dea:	68bb      	ldr	r3, [r7, #8]
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	3714      	adds	r7, #20
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd90      	pop	{r4, r7, pc}
 8003df4:	080118f8 	.word	0x080118f8
 8003df8:	08011900 	.word	0x08011900

08003dfc <connect_destroy>:

void connect_destroy(connect* connect){
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b082      	sub	sp, #8
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
	if(connect == NULL) return;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d049      	beq.n	8003e9e <connect_destroy+0xa2>

	connect->control_packet = NULL;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	701a      	strb	r2, [r3, #0]
 8003e10:	2200      	movs	r2, #0
 8003e12:	705a      	strb	r2, [r3, #1]
 8003e14:	2200      	movs	r2, #0
 8003e16:	709a      	strb	r2, [r3, #2]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	70da      	strb	r2, [r3, #3]

	bytes_destroy(connect->variable_header);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	4618      	mov	r0, r3
 8003e22:	f7ff fd7b 	bl	800391c <bytes_destroy>

	connect->variable_header = NULL;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	711a      	strb	r2, [r3, #4]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	715a      	strb	r2, [r3, #5]
 8003e30:	2200      	movs	r2, #0
 8003e32:	719a      	strb	r2, [r3, #6]
 8003e34:	2200      	movs	r2, #0
 8003e36:	71da      	strb	r2, [r3, #7]
	connect->client_identifier = NULL;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	729a      	strb	r2, [r3, #10]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	72da      	strb	r2, [r3, #11]
 8003e42:	2200      	movs	r2, #0
 8003e44:	731a      	strb	r2, [r3, #12]
 8003e46:	2200      	movs	r2, #0
 8003e48:	735a      	strb	r2, [r3, #13]
	connect->will_topic = NULL;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	739a      	strb	r2, [r3, #14]
 8003e50:	2200      	movs	r2, #0
 8003e52:	73da      	strb	r2, [r3, #15]
 8003e54:	2200      	movs	r2, #0
 8003e56:	741a      	strb	r2, [r3, #16]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	745a      	strb	r2, [r3, #17]
	connect->will_message = NULL;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	749a      	strb	r2, [r3, #18]
 8003e62:	2200      	movs	r2, #0
 8003e64:	74da      	strb	r2, [r3, #19]
 8003e66:	2200      	movs	r2, #0
 8003e68:	751a      	strb	r2, [r3, #20]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	755a      	strb	r2, [r3, #21]
	connect->username = NULL;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2200      	movs	r2, #0
 8003e72:	759a      	strb	r2, [r3, #22]
 8003e74:	2200      	movs	r2, #0
 8003e76:	75da      	strb	r2, [r3, #23]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	761a      	strb	r2, [r3, #24]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	765a      	strb	r2, [r3, #25]
	connect->password = NULL;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2200      	movs	r2, #0
 8003e84:	769a      	strb	r2, [r3, #26]
 8003e86:	2200      	movs	r2, #0
 8003e88:	76da      	strb	r2, [r3, #27]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	771a      	strb	r2, [r3, #28]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	775a      	strb	r2, [r3, #29]

	free(connect);
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f008 fcb0 	bl	800c7f8 <free>
	connect = NULL;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	607b      	str	r3, [r7, #4]
 8003e9c:	e000      	b.n	8003ea0 <connect_destroy+0xa4>
	if(connect == NULL) return;
 8003e9e:	bf00      	nop
}
 8003ea0:	3708      	adds	r7, #8
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}

08003ea6 <connect_get_client_identifier>:
void connect_set_keep_alive(connect* connect, const unsigned int keep_alive){
	if( connect == NULL) return;
	connect->keep_alive = keep_alive;
}

char* connect_get_client_identifier(connect* connect){
 8003ea6:	b480      	push	{r7}
 8003ea8:	b083      	sub	sp, #12
 8003eaa:	af00      	add	r7, sp, #0
 8003eac:	6078      	str	r0, [r7, #4]
	return connect == NULL ? NULL : connect->client_identifier;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d003      	beq.n	8003ebc <connect_get_client_identifier+0x16>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	f8d3 300a 	ldr.w	r3, [r3, #10]
 8003eba:	e000      	b.n	8003ebe <connect_get_client_identifier+0x18>
 8003ebc:	2300      	movs	r3, #0
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	370c      	adds	r7, #12
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec8:	4770      	bx	lr

08003eca <connect_set_client_identifier>:

void connect_set_client_identifier(connect* connect, char* client_identifier){
 8003eca:	b480      	push	{r7}
 8003ecc:	b083      	sub	sp, #12
 8003ece:	af00      	add	r7, sp, #0
 8003ed0:	6078      	str	r0, [r7, #4]
 8003ed2:	6039      	str	r1, [r7, #0]
	if( connect == NULL) return;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d004      	beq.n	8003ee4 <connect_set_client_identifier+0x1a>
	connect->client_identifier = client_identifier;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	683a      	ldr	r2, [r7, #0]
 8003ede:	f8c3 200a 	str.w	r2, [r3, #10]
 8003ee2:	e000      	b.n	8003ee6 <connect_set_client_identifier+0x1c>
	if( connect == NULL) return;
 8003ee4:	bf00      	nop
}
 8003ee6:	370c      	adds	r7, #12
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eee:	4770      	bx	lr

08003ef0 <connect_set_username>:

char* connect_get_username(connect* connect){
	return connect == NULL ? NULL : connect->username;
}

void connect_set_username(connect* connect, char* username){
 8003ef0:	b480      	push	{r7}
 8003ef2:	b083      	sub	sp, #12
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
 8003ef8:	6039      	str	r1, [r7, #0]
	if( connect == NULL) return;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d004      	beq.n	8003f0a <connect_set_username+0x1a>
	connect->username = username;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	683a      	ldr	r2, [r7, #0]
 8003f04:	f8c3 2016 	str.w	r2, [r3, #22]
 8003f08:	e000      	b.n	8003f0c <connect_set_username+0x1c>
	if( connect == NULL) return;
 8003f0a:	bf00      	nop
}
 8003f0c:	370c      	adds	r7, #12
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f14:	4770      	bx	lr

08003f16 <connect_set_password>:

char* connect_get_password(connect* connect){
	return connect == NULL ? NULL : connect->password;
}

void connect_set_password(connect* connect, char* password){
 8003f16:	b480      	push	{r7}
 8003f18:	b083      	sub	sp, #12
 8003f1a:	af00      	add	r7, sp, #0
 8003f1c:	6078      	str	r0, [r7, #4]
 8003f1e:	6039      	str	r1, [r7, #0]
	if( connect == NULL) return;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d004      	beq.n	8003f30 <connect_set_password+0x1a>
	connect->password = password;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	683a      	ldr	r2, [r7, #0]
 8003f2a:	f8c3 201a 	str.w	r2, [r3, #26]
 8003f2e:	e000      	b.n	8003f32 <connect_set_password+0x1c>
	if( connect == NULL) return;
 8003f30:	bf00      	nop
}
 8003f32:	370c      	adds	r7, #12
 8003f34:	46bd      	mov	sp, r7
 8003f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3a:	4770      	bx	lr

08003f3c <connect_to_bytes>:

bytes* connect_to_bytes(connect* connect){
 8003f3c:	b590      	push	{r4, r7, lr}
 8003f3e:	b08f      	sub	sp, #60	; 0x3c
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
	if( connect == NULL) return NULL;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d101      	bne.n	8003f4e <connect_to_bytes+0x12>
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	e0f5      	b.n	800413a <connect_to_bytes+0x1fe>

	bytes* payload = bytes_init();
 8003f4e:	f7ff fcbd 	bl	80038cc <bytes_init>
 8003f52:	6378      	str	r0, [r7, #52]	; 0x34

	char* client_identifier = connect_get_client_identifier(connect);
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	f7ff ffa6 	bl	8003ea6 <connect_get_client_identifier>
 8003f5a:	6338      	str	r0, [r7, #48]	; 0x30
	if ( ! string_util_is_empty(client_identifier) ){
 8003f5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003f5e:	f003 ff6b 	bl	8007e38 <string_util_is_empty>
 8003f62:	4603      	mov	r3, r0
 8003f64:	f083 0301 	eor.w	r3, r3, #1
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d025      	beq.n	8003fba <connect_to_bytes+0x7e>
		if ( string_util_length(client_identifier) >= 24 ){ // Deve ter no maximo 23 caracteres
 8003f6e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003f70:	f003 ffd9 	bl	8007f26 <string_util_length>
 8003f74:	4603      	mov	r3, r0
 8003f76:	2b17      	cmp	r3, #23
 8003f78:	d914      	bls.n	8003fa4 <connect_to_bytes+0x68>
			char* client_identifier_sub_string = string_util_build_empty_string(23+1);
 8003f7a:	2018      	movs	r0, #24
 8003f7c:	f003 ffdf 	bl	8007f3e <string_util_build_empty_string>
 8003f80:	62b8      	str	r0, [r7, #40]	; 0x28
			string_util_copy(client_identifier_sub_string, client_identifier, 23);
 8003f82:	2217      	movs	r2, #23
 8003f84:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f88:	f003 fff3 	bl	8007f72 <string_util_copy>
			bytes* client_identifier_bytes = packet_util_build_bytes(client_identifier_sub_string);
 8003f8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f8e:	f000 fed7 	bl	8004d40 <packet_util_build_bytes>
 8003f92:	6278      	str	r0, [r7, #36]	; 0x24
			bytes_concat(payload, client_identifier_bytes);
 8003f94:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003f96:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003f98:	f7ff fd73 	bl	8003a82 <bytes_concat>
			bytes_destroy(client_identifier_bytes);
 8003f9c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003f9e:	f7ff fcbd 	bl	800391c <bytes_destroy>
 8003fa2:	e00a      	b.n	8003fba <connect_to_bytes+0x7e>
		} else {
			bytes* client_identifier_bytes = packet_util_build_bytes(client_identifier);
 8003fa4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003fa6:	f000 fecb 	bl	8004d40 <packet_util_build_bytes>
 8003faa:	62f8      	str	r0, [r7, #44]	; 0x2c
			bytes_concat(payload, client_identifier_bytes);
 8003fac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003fae:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003fb0:	f7ff fd67 	bl	8003a82 <bytes_concat>
			bytes_destroy(client_identifier_bytes);
 8003fb4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003fb6:	f7ff fcb1 	bl	800391c <bytes_destroy>
		}
	}


	unsigned char flags = bytes_at(connect->variable_header, 7);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	2107      	movs	r1, #7
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f7ff fcf4 	bl	80039ae <bytes_at>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	if ( ( flags & ( 0x01 << 2 ) ) && ! string_util_is_empty(connect->will_topic) ){
 8003fcc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003fd0:	f003 0304 	and.w	r3, r3, #4
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d019      	beq.n	800400c <connect_to_bytes+0xd0>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	f8d3 300e 	ldr.w	r3, [r3, #14]
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f003 ff2a 	bl	8007e38 <string_util_is_empty>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	f083 0301 	eor.w	r3, r3, #1
 8003fea:	b2db      	uxtb	r3, r3
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d00d      	beq.n	800400c <connect_to_bytes+0xd0>
		bytes* will_topic_bytes = packet_util_build_bytes(connect->will_topic);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	f8d3 300e 	ldr.w	r3, [r3, #14]
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f000 fea2 	bl	8004d40 <packet_util_build_bytes>
 8003ffc:	61f8      	str	r0, [r7, #28]
		bytes_concat(payload, will_topic_bytes);
 8003ffe:	69f9      	ldr	r1, [r7, #28]
 8004000:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004002:	f7ff fd3e 	bl	8003a82 <bytes_concat>
		bytes_destroy(will_topic_bytes);
 8004006:	69f8      	ldr	r0, [r7, #28]
 8004008:	f7ff fc88 	bl	800391c <bytes_destroy>
	}

	if ( ( flags & ( 0x01 << 2 ) ) && ! string_util_is_empty(connect->will_message) ){
 800400c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004010:	f003 0304 	and.w	r3, r3, #4
 8004014:	2b00      	cmp	r3, #0
 8004016:	d019      	beq.n	800404c <connect_to_bytes+0x110>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	f8d3 3012 	ldr.w	r3, [r3, #18]
 800401e:	4618      	mov	r0, r3
 8004020:	f003 ff0a 	bl	8007e38 <string_util_is_empty>
 8004024:	4603      	mov	r3, r0
 8004026:	f083 0301 	eor.w	r3, r3, #1
 800402a:	b2db      	uxtb	r3, r3
 800402c:	2b00      	cmp	r3, #0
 800402e:	d00d      	beq.n	800404c <connect_to_bytes+0x110>
		bytes* will_message_bytes = packet_util_build_bytes(connect->will_message);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	f8d3 3012 	ldr.w	r3, [r3, #18]
 8004036:	4618      	mov	r0, r3
 8004038:	f000 fe82 	bl	8004d40 <packet_util_build_bytes>
 800403c:	61b8      	str	r0, [r7, #24]
		bytes_concat(payload, will_message_bytes);
 800403e:	69b9      	ldr	r1, [r7, #24]
 8004040:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004042:	f7ff fd1e 	bl	8003a82 <bytes_concat>
		bytes_destroy(will_message_bytes);
 8004046:	69b8      	ldr	r0, [r7, #24]
 8004048:	f7ff fc68 	bl	800391c <bytes_destroy>
	}

	if ( ( flags & ( 0x01 << 7 ) ) && ! string_util_is_empty(connect->username) ){
 800404c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8004050:	2b00      	cmp	r3, #0
 8004052:	da39      	bge.n	80040c8 <connect_to_bytes+0x18c>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	f8d3 3016 	ldr.w	r3, [r3, #22]
 800405a:	4618      	mov	r0, r3
 800405c:	f003 feec 	bl	8007e38 <string_util_is_empty>
 8004060:	4603      	mov	r3, r0
 8004062:	f083 0301 	eor.w	r3, r3, #1
 8004066:	b2db      	uxtb	r3, r3
 8004068:	2b00      	cmp	r3, #0
 800406a:	d02d      	beq.n	80040c8 <connect_to_bytes+0x18c>
		bytes* username_bytes = packet_util_build_bytes(connect->username);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	f8d3 3016 	ldr.w	r3, [r3, #22]
 8004072:	4618      	mov	r0, r3
 8004074:	f000 fe64 	bl	8004d40 <packet_util_build_bytes>
 8004078:	6178      	str	r0, [r7, #20]
		bytes_concat(payload, username_bytes);
 800407a:	6979      	ldr	r1, [r7, #20]
 800407c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800407e:	f7ff fd00 	bl	8003a82 <bytes_concat>
	    if ( ( flags & ( 0x01 << 6 ) ) && ! string_util_is_empty(connect->password) ){
 8004082:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004086:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800408a:	2b00      	cmp	r3, #0
 800408c:	d019      	beq.n	80040c2 <connect_to_bytes+0x186>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	f8d3 301a 	ldr.w	r3, [r3, #26]
 8004094:	4618      	mov	r0, r3
 8004096:	f003 fecf 	bl	8007e38 <string_util_is_empty>
 800409a:	4603      	mov	r3, r0
 800409c:	f083 0301 	eor.w	r3, r3, #1
 80040a0:	b2db      	uxtb	r3, r3
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d00d      	beq.n	80040c2 <connect_to_bytes+0x186>
	    	bytes* password_bytes = packet_util_build_bytes(connect->password);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	f8d3 301a 	ldr.w	r3, [r3, #26]
 80040ac:	4618      	mov	r0, r3
 80040ae:	f000 fe47 	bl	8004d40 <packet_util_build_bytes>
 80040b2:	6138      	str	r0, [r7, #16]
	    	bytes_concat(payload, password_bytes);
 80040b4:	6939      	ldr	r1, [r7, #16]
 80040b6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80040b8:	f7ff fce3 	bl	8003a82 <bytes_concat>
	    	bytes_destroy(password_bytes);
 80040bc:	6938      	ldr	r0, [r7, #16]
 80040be:	f7ff fc2d 	bl	800391c <bytes_destroy>
	    }
	    bytes_destroy(username_bytes);
 80040c2:	6978      	ldr	r0, [r7, #20]
 80040c4:	f7ff fc2a 	bl	800391c <bytes_destroy>
	}

	long int remaining_length = bytes_get_size(connect->variable_header) + bytes_get_size(payload) + sizeof(connect->keep_alive);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	4618      	mov	r0, r3
 80040ce:	f7ff fcc6 	bl	8003a5e <bytes_get_size>
 80040d2:	4604      	mov	r4, r0
 80040d4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80040d6:	f7ff fcc2 	bl	8003a5e <bytes_get_size>
 80040da:	4603      	mov	r3, r0
 80040dc:	4423      	add	r3, r4
 80040de:	3302      	adds	r3, #2
 80040e0:	60fb      	str	r3, [r7, #12]
	control_packet_set_remaining_length(connect->control_packet, remaining_length);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	68f9      	ldr	r1, [r7, #12]
 80040e8:	4618      	mov	r0, r3
 80040ea:	f000 f99f 	bl	800442c <control_packet_set_remaining_length>

	bytes* result = control_packet_to_bytes(connect->control_packet);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4618      	mov	r0, r3
 80040f4:	f000 f9ad 	bl	8004452 <control_packet_to_bytes>
 80040f8:	60b8      	str	r0, [r7, #8]
	bytes_concat(result, connect->variable_header);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	4619      	mov	r1, r3
 8004100:	68b8      	ldr	r0, [r7, #8]
 8004102:	f7ff fcbe 	bl	8003a82 <bytes_concat>
	bytes_push_back( result, (unsigned char) ( (connect->keep_alive & 0xFF00) >> 8) );
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	891b      	ldrh	r3, [r3, #8]
 800410a:	b29b      	uxth	r3, r3
 800410c:	0a1b      	lsrs	r3, r3, #8
 800410e:	b29b      	uxth	r3, r3
 8004110:	b2db      	uxtb	r3, r3
 8004112:	4619      	mov	r1, r3
 8004114:	68b8      	ldr	r0, [r7, #8]
 8004116:	f7ff fc78 	bl	8003a0a <bytes_push_back>
	bytes_push_back( result, (unsigned char) ( (connect->keep_alive & 0x00FF) ) );
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	891b      	ldrh	r3, [r3, #8]
 800411e:	b29b      	uxth	r3, r3
 8004120:	b2db      	uxtb	r3, r3
 8004122:	4619      	mov	r1, r3
 8004124:	68b8      	ldr	r0, [r7, #8]
 8004126:	f7ff fc70 	bl	8003a0a <bytes_push_back>
	bytes_concat( result, payload);
 800412a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800412c:	68b8      	ldr	r0, [r7, #8]
 800412e:	f7ff fca8 	bl	8003a82 <bytes_concat>
	bytes_destroy(payload);
 8004132:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004134:	f7ff fbf2 	bl	800391c <bytes_destroy>
	return result;
 8004138:	68bb      	ldr	r3, [r7, #8]
}
 800413a:	4618      	mov	r0, r3
 800413c:	373c      	adds	r7, #60	; 0x3c
 800413e:	46bd      	mov	sp, r7
 8004140:	bd90      	pop	{r4, r7, pc}

08004142 <connect_service_init>:
#include <mqtt_client/connect_service.h>

connect_service* connect_service_init(control_packet_proxy* control_packet_proxy){
 8004142:	b580      	push	{r7, lr}
 8004144:	b084      	sub	sp, #16
 8004146:	af00      	add	r7, sp, #0
 8004148:	6078      	str	r0, [r7, #4]
	if( control_packet_proxy == NULL ) return NULL;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d101      	bne.n	8004154 <connect_service_init+0x12>
 8004150:	2300      	movs	r3, #0
 8004152:	e008      	b.n	8004166 <connect_service_init+0x24>
	connect_service* result = (connect_service*) malloc(sizeof(connect_service));
 8004154:	2004      	movs	r0, #4
 8004156:	f008 fb47 	bl	800c7e8 <malloc>
 800415a:	4603      	mov	r3, r0
 800415c:	60fb      	str	r3, [r7, #12]
	result->control_packet_proxy = control_packet_proxy;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	687a      	ldr	r2, [r7, #4]
 8004162:	601a      	str	r2, [r3, #0]
	return result;
 8004164:	68fb      	ldr	r3, [r7, #12]
}
 8004166:	4618      	mov	r0, r3
 8004168:	3710      	adds	r7, #16
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}

0800416e <connect_service_destroy>:

void connect_service_destroy(connect_service* connect_service){
 800416e:	b580      	push	{r7, lr}
 8004170:	b082      	sub	sp, #8
 8004172:	af00      	add	r7, sp, #0
 8004174:	6078      	str	r0, [r7, #4]
	if( connect_service == NULL ) return;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d00e      	beq.n	800419a <connect_service_destroy+0x2c>
	connect_service->control_packet_proxy = NULL;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2200      	movs	r2, #0
 8004180:	701a      	strb	r2, [r3, #0]
 8004182:	2200      	movs	r2, #0
 8004184:	705a      	strb	r2, [r3, #1]
 8004186:	2200      	movs	r2, #0
 8004188:	709a      	strb	r2, [r3, #2]
 800418a:	2200      	movs	r2, #0
 800418c:	70da      	strb	r2, [r3, #3]
	free(connect_service);
 800418e:	6878      	ldr	r0, [r7, #4]
 8004190:	f008 fb32 	bl	800c7f8 <free>
	connect_service = NULL;
 8004194:	2300      	movs	r3, #0
 8004196:	607b      	str	r3, [r7, #4]
 8004198:	e000      	b.n	800419c <connect_service_destroy+0x2e>
	if( connect_service == NULL ) return;
 800419a:	bf00      	nop
}
 800419c:	3708      	adds	r7, #8
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}
	...

080041a4 <connect_service_create>:

connect* connect_service_create(connect_service* connect_service){
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b08c      	sub	sp, #48	; 0x30
 80041a8:	af04      	add	r7, sp, #16
 80041aa:	6078      	str	r0, [r7, #4]
	if( connect_service == NULL ) return NULL;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d101      	bne.n	80041b6 <connect_service_create+0x12>
 80041b2:	2300      	movs	r3, #0
 80041b4:	e0ac      	b.n	8004310 <connect_service_create+0x16c>

	session* session 		= session_get_instance();
 80041b6:	f001 fc39 	bl	8005a2c <session_get_instance>
 80041ba:	61b8      	str	r0, [r7, #24]
	bool has_username		= string_util_is_empty(session_get_username(session)) ? false : true;
 80041bc:	69b8      	ldr	r0, [r7, #24]
 80041be:	f001 fe20 	bl	8005e02 <session_get_username>
 80041c2:	4603      	mov	r3, r0
 80041c4:	4618      	mov	r0, r3
 80041c6:	f003 fe37 	bl	8007e38 <string_util_is_empty>
 80041ca:	4603      	mov	r3, r0
 80041cc:	f083 0301 	eor.w	r3, r3, #1
 80041d0:	75fb      	strb	r3, [r7, #23]
	bool has_password       = string_util_is_empty(session_get_password(session)) ? false : true;
 80041d2:	69b8      	ldr	r0, [r7, #24]
 80041d4:	f001 fe26 	bl	8005e24 <session_get_password>
 80041d8:	4603      	mov	r3, r0
 80041da:	4618      	mov	r0, r3
 80041dc:	f003 fe2c 	bl	8007e38 <string_util_is_empty>
 80041e0:	4603      	mov	r3, r0
 80041e2:	f083 0301 	eor.w	r3, r3, #1
 80041e6:	75bb      	strb	r3, [r7, #22]
	bool is_id_empty        = string_util_is_empty(session_get_id(session));
 80041e8:	69b8      	ldr	r0, [r7, #24]
 80041ea:	f001 fcdb 	bl	8005ba4 <session_get_id>
 80041ee:	4603      	mov	r3, r0
 80041f0:	4618      	mov	r0, r3
 80041f2:	f003 fe21 	bl	8007e38 <string_util_is_empty>
 80041f6:	4603      	mov	r3, r0
 80041f8:	757b      	strb	r3, [r7, #21]
	bool clean              = is_id_empty ? true : session_is_clean(session);
 80041fa:	7d7b      	ldrb	r3, [r7, #21]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d105      	bne.n	800420c <connect_service_create+0x68>
 8004200:	69b8      	ldr	r0, [r7, #24]
 8004202:	f001 fcf2 	bl	8005bea <session_is_clean>
 8004206:	4603      	mov	r3, r0
 8004208:	2b00      	cmp	r3, #0
 800420a:	d001      	beq.n	8004210 <connect_service_create+0x6c>
 800420c:	2301      	movs	r3, #1
 800420e:	e000      	b.n	8004212 <connect_service_create+0x6e>
 8004210:	2300      	movs	r3, #0
 8004212:	753b      	strb	r3, [r7, #20]
	unsigned int keep_alive = session_get_keep_alive(session);
 8004214:	69b8      	ldr	r0, [r7, #24]
 8004216:	f001 fd5a 	bl	8005cce <session_get_keep_alive>
 800421a:	6138      	str	r0, [r7, #16]

	connect* connect = NULL;
 800421c:	2300      	movs	r3, #0
 800421e:	61fb      	str	r3, [r7, #28]
	unsigned char qos = session_get_qos(session);
 8004220:	69b8      	ldr	r0, [r7, #24]
 8004222:	f001 fd79 	bl	8005d18 <session_get_qos>
 8004226:	4603      	mov	r3, r0
 8004228:	73fb      	strb	r3, [r7, #15]
	if ( qos == CONNECT_QOS_LEVEL_0){
 800422a:	4b3b      	ldr	r3, [pc, #236]	; (8004318 <connect_service_create+0x174>)
 800422c:	781b      	ldrb	r3, [r3, #0]
 800422e:	7bfa      	ldrb	r2, [r7, #15]
 8004230:	429a      	cmp	r2, r3
 8004232:	d10f      	bne.n	8004254 <connect_service_create+0xb0>
		connect = connect_init(has_username, has_password, false, CONNECT_QOS_LEVEL_0, false, clean, keep_alive);
 8004234:	4b38      	ldr	r3, [pc, #224]	; (8004318 <connect_service_create+0x174>)
 8004236:	781a      	ldrb	r2, [r3, #0]
 8004238:	7db9      	ldrb	r1, [r7, #22]
 800423a:	7df8      	ldrb	r0, [r7, #23]
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	9302      	str	r3, [sp, #8]
 8004240:	7d3b      	ldrb	r3, [r7, #20]
 8004242:	9301      	str	r3, [sp, #4]
 8004244:	2300      	movs	r3, #0
 8004246:	9300      	str	r3, [sp, #0]
 8004248:	4613      	mov	r3, r2
 800424a:	2200      	movs	r2, #0
 800424c:	f7ff fcfe 	bl	8003c4c <connect_init>
 8004250:	61f8      	str	r0, [r7, #28]
 8004252:	e038      	b.n	80042c6 <connect_service_create+0x122>
	} else if ( qos == CONNECT_QOS_LEVEL_1 ){
 8004254:	4b31      	ldr	r3, [pc, #196]	; (800431c <connect_service_create+0x178>)
 8004256:	781b      	ldrb	r3, [r3, #0]
 8004258:	7bfa      	ldrb	r2, [r7, #15]
 800425a:	429a      	cmp	r2, r3
 800425c:	d10f      	bne.n	800427e <connect_service_create+0xda>
		connect = connect_init(has_username, has_password, false, CONNECT_QOS_LEVEL_1, false, clean, keep_alive);
 800425e:	4b2f      	ldr	r3, [pc, #188]	; (800431c <connect_service_create+0x178>)
 8004260:	781a      	ldrb	r2, [r3, #0]
 8004262:	7db9      	ldrb	r1, [r7, #22]
 8004264:	7df8      	ldrb	r0, [r7, #23]
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	9302      	str	r3, [sp, #8]
 800426a:	7d3b      	ldrb	r3, [r7, #20]
 800426c:	9301      	str	r3, [sp, #4]
 800426e:	2300      	movs	r3, #0
 8004270:	9300      	str	r3, [sp, #0]
 8004272:	4613      	mov	r3, r2
 8004274:	2200      	movs	r2, #0
 8004276:	f7ff fce9 	bl	8003c4c <connect_init>
 800427a:	61f8      	str	r0, [r7, #28]
 800427c:	e023      	b.n	80042c6 <connect_service_create+0x122>
	} else if ( qos == CONNECT_QOS_LEVEL_2 ){
 800427e:	4b28      	ldr	r3, [pc, #160]	; (8004320 <connect_service_create+0x17c>)
 8004280:	781b      	ldrb	r3, [r3, #0]
 8004282:	7bfa      	ldrb	r2, [r7, #15]
 8004284:	429a      	cmp	r2, r3
 8004286:	d10f      	bne.n	80042a8 <connect_service_create+0x104>
		connect = connect_init(has_username, has_password, false, CONNECT_QOS_LEVEL_2, false, clean, keep_alive);
 8004288:	4b25      	ldr	r3, [pc, #148]	; (8004320 <connect_service_create+0x17c>)
 800428a:	781a      	ldrb	r2, [r3, #0]
 800428c:	7db9      	ldrb	r1, [r7, #22]
 800428e:	7df8      	ldrb	r0, [r7, #23]
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	9302      	str	r3, [sp, #8]
 8004294:	7d3b      	ldrb	r3, [r7, #20]
 8004296:	9301      	str	r3, [sp, #4]
 8004298:	2300      	movs	r3, #0
 800429a:	9300      	str	r3, [sp, #0]
 800429c:	4613      	mov	r3, r2
 800429e:	2200      	movs	r2, #0
 80042a0:	f7ff fcd4 	bl	8003c4c <connect_init>
 80042a4:	61f8      	str	r0, [r7, #28]
 80042a6:	e00e      	b.n	80042c6 <connect_service_create+0x122>
	} else {
		connect = connect_init(has_username, has_password, false, CONNECT_QOS_LEVEL_0, false, clean, keep_alive);
 80042a8:	4b1b      	ldr	r3, [pc, #108]	; (8004318 <connect_service_create+0x174>)
 80042aa:	781a      	ldrb	r2, [r3, #0]
 80042ac:	7db9      	ldrb	r1, [r7, #22]
 80042ae:	7df8      	ldrb	r0, [r7, #23]
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	9302      	str	r3, [sp, #8]
 80042b4:	7d3b      	ldrb	r3, [r7, #20]
 80042b6:	9301      	str	r3, [sp, #4]
 80042b8:	2300      	movs	r3, #0
 80042ba:	9300      	str	r3, [sp, #0]
 80042bc:	4613      	mov	r3, r2
 80042be:	2200      	movs	r2, #0
 80042c0:	f7ff fcc4 	bl	8003c4c <connect_init>
 80042c4:	61f8      	str	r0, [r7, #28]
	}

	if ( has_username ) connect_set_username(connect, session_get_username(session));
 80042c6:	7dfb      	ldrb	r3, [r7, #23]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d007      	beq.n	80042dc <connect_service_create+0x138>
 80042cc:	69b8      	ldr	r0, [r7, #24]
 80042ce:	f001 fd98 	bl	8005e02 <session_get_username>
 80042d2:	4603      	mov	r3, r0
 80042d4:	4619      	mov	r1, r3
 80042d6:	69f8      	ldr	r0, [r7, #28]
 80042d8:	f7ff fe0a 	bl	8003ef0 <connect_set_username>
	if ( has_password ) connect_set_password(connect, session_get_password(session));
 80042dc:	7dbb      	ldrb	r3, [r7, #22]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d007      	beq.n	80042f2 <connect_service_create+0x14e>
 80042e2:	69b8      	ldr	r0, [r7, #24]
 80042e4:	f001 fd9e 	bl	8005e24 <session_get_password>
 80042e8:	4603      	mov	r3, r0
 80042ea:	4619      	mov	r1, r3
 80042ec:	69f8      	ldr	r0, [r7, #28]
 80042ee:	f7ff fe12 	bl	8003f16 <connect_set_password>
	if ( ! is_id_empty ) connect_set_client_identifier(connect, session_get_id(session));
 80042f2:	7d7b      	ldrb	r3, [r7, #21]
 80042f4:	f083 0301 	eor.w	r3, r3, #1
 80042f8:	b2db      	uxtb	r3, r3
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d007      	beq.n	800430e <connect_service_create+0x16a>
 80042fe:	69b8      	ldr	r0, [r7, #24]
 8004300:	f001 fc50 	bl	8005ba4 <session_get_id>
 8004304:	4603      	mov	r3, r0
 8004306:	4619      	mov	r1, r3
 8004308:	69f8      	ldr	r0, [r7, #28]
 800430a:	f7ff fdde 	bl	8003eca <connect_set_client_identifier>

	return connect;
 800430e:	69fb      	ldr	r3, [r7, #28]
}
 8004310:	4618      	mov	r0, r3
 8004312:	3720      	adds	r7, #32
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}
 8004318:	080118f5 	.word	0x080118f5
 800431c:	080118f6 	.word	0x080118f6
 8004320:	080118f7 	.word	0x080118f7

08004324 <connect_service_write>:
	connect* connect = bytes_is_empty(bytes) ? NULL : assembler_build_to_connect(bytes);
	bytes_destroy(bytes);
	return connect;
}

void connect_service_write(connect_service* connect_service, connect* connect){
 8004324:	b580      	push	{r7, lr}
 8004326:	b088      	sub	sp, #32
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
 800432c:	6039      	str	r1, [r7, #0]
	if ( connect_service == NULL || connect == NULL ) return;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d037      	beq.n	80043a4 <connect_service_write+0x80>
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d034      	beq.n	80043a4 <connect_service_write+0x80>
	session* session = session_get_instance();
 800433a:	f001 fb77 	bl	8005a2c <session_get_instance>
 800433e:	61f8      	str	r0, [r7, #28]
	if ( ! session_is_connected(session) ){
 8004340:	69f8      	ldr	r0, [r7, #28]
 8004342:	f001 fd37 	bl	8005db4 <session_is_connected>
 8004346:	4603      	mov	r3, r0
 8004348:	f083 0301 	eor.w	r3, r3, #1
 800434c:	b2db      	uxtb	r3, r3
 800434e:	2b00      	cmp	r3, #0
 8004350:	d01a      	beq.n	8004388 <connect_service_write+0x64>
		char* host = session_get_host(session);
 8004352:	69f8      	ldr	r0, [r7, #28]
 8004354:	f001 fc70 	bl	8005c38 <session_get_host>
 8004358:	61b8      	str	r0, [r7, #24]
		unsigned int port = session_get_port(session);
 800435a:	69f8      	ldr	r0, [r7, #28]
 800435c:	f001 fc91 	bl	8005c82 <session_get_port>
 8004360:	6178      	str	r0, [r7, #20]
		control_packet_proxy_connect(connect_service->control_packet_proxy, host, port);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	697a      	ldr	r2, [r7, #20]
 8004368:	69b9      	ldr	r1, [r7, #24]
 800436a:	4618      	mov	r0, r3
 800436c:	f000 f905 	bl	800457a <control_packet_proxy_connect>
		bool connected = control_packet_proxy_is_connected(connect_service->control_packet_proxy);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4618      	mov	r0, r3
 8004376:	f000 f915 	bl	80045a4 <control_packet_proxy_is_connected>
 800437a:	4603      	mov	r3, r0
 800437c:	74fb      	strb	r3, [r7, #19]
		session_set_connected(session, connected);
 800437e:	7cfb      	ldrb	r3, [r7, #19]
 8004380:	4619      	mov	r1, r3
 8004382:	69f8      	ldr	r0, [r7, #28]
 8004384:	f001 fd2a 	bl	8005ddc <session_set_connected>
	}
	bytes* bytes = connect_to_bytes(connect);
 8004388:	6838      	ldr	r0, [r7, #0]
 800438a:	f7ff fdd7 	bl	8003f3c <connect_to_bytes>
 800438e:	60f8      	str	r0, [r7, #12]
	control_packet_proxy_write(connect_service->control_packet_proxy, bytes);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	68f9      	ldr	r1, [r7, #12]
 8004396:	4618      	mov	r0, r3
 8004398:	f000 f917 	bl	80045ca <control_packet_proxy_write>
	bytes_destroy(bytes);
 800439c:	68f8      	ldr	r0, [r7, #12]
 800439e:	f7ff fabd 	bl	800391c <bytes_destroy>
 80043a2:	e000      	b.n	80043a6 <connect_service_write+0x82>
	if ( connect_service == NULL || connect == NULL ) return;
 80043a4:	bf00      	nop
}
 80043a6:	3720      	adds	r7, #32
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}

080043ac <control_packet_init>:
const unsigned char CONTROL_PACKET_FLAG_UNSUBACK     = 0x00;
const unsigned char CONTROL_PACKET_FLAG_PINGREQ      = 0x00;
const unsigned char CONTROL_PACKET_FLAG_PINGRESP     = 0x00;
const unsigned char CONTROL_PACKET_FLAG_DISCONNECT   = 0x00;

control_packet* control_packet_init(const unsigned char type, const unsigned char flags, const long int remaining_length){
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b084      	sub	sp, #16
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	4603      	mov	r3, r0
 80043b4:	603a      	str	r2, [r7, #0]
 80043b6:	71fb      	strb	r3, [r7, #7]
 80043b8:	460b      	mov	r3, r1
 80043ba:	71bb      	strb	r3, [r7, #6]
	control_packet* result = (control_packet*) malloc(sizeof(control_packet));
 80043bc:	2006      	movs	r0, #6
 80043be:	f008 fa13 	bl	800c7e8 <malloc>
 80043c2:	4603      	mov	r3, r0
 80043c4:	60fb      	str	r3, [r7, #12]
	result->type 				= type;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	79fa      	ldrb	r2, [r7, #7]
 80043ca:	701a      	strb	r2, [r3, #0]
	result->flags 				= flags;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	79ba      	ldrb	r2, [r7, #6]
 80043d0:	705a      	strb	r2, [r3, #1]
	result->remaining_length 	= remaining_length;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	683a      	ldr	r2, [r7, #0]
 80043d6:	f8c3 2002 	str.w	r2, [r3, #2]

	return result;
 80043da:	68fb      	ldr	r3, [r7, #12]
}
 80043dc:	4618      	mov	r0, r3
 80043de:	3710      	adds	r7, #16
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}

080043e4 <control_packet_get_flags>:
void control_packet_set_type(control_packet* control_packet, const unsigned char type){
	if( control_packet == NULL ) return;
	control_packet->type = type;
}

unsigned char control_packet_get_flags(control_packet* control_packet){
 80043e4:	b480      	push	{r7}
 80043e6:	b083      	sub	sp, #12
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
	return control_packet == NULL ? (unsigned char) 0 : control_packet->flags;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d002      	beq.n	80043f8 <control_packet_get_flags+0x14>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	785b      	ldrb	r3, [r3, #1]
 80043f6:	e000      	b.n	80043fa <control_packet_get_flags+0x16>
 80043f8:	2300      	movs	r3, #0
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	370c      	adds	r7, #12
 80043fe:	46bd      	mov	sp, r7
 8004400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004404:	4770      	bx	lr

08004406 <control_packet_set_flags>:

void control_packet_set_flags(control_packet* control_packet, const unsigned char flags){
 8004406:	b480      	push	{r7}
 8004408:	b083      	sub	sp, #12
 800440a:	af00      	add	r7, sp, #0
 800440c:	6078      	str	r0, [r7, #4]
 800440e:	460b      	mov	r3, r1
 8004410:	70fb      	strb	r3, [r7, #3]
	if( control_packet == NULL ) return;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d003      	beq.n	8004420 <control_packet_set_flags+0x1a>
	control_packet->flags = flags;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	78fa      	ldrb	r2, [r7, #3]
 800441c:	705a      	strb	r2, [r3, #1]
 800441e:	e000      	b.n	8004422 <control_packet_set_flags+0x1c>
	if( control_packet == NULL ) return;
 8004420:	bf00      	nop
}
 8004422:	370c      	adds	r7, #12
 8004424:	46bd      	mov	sp, r7
 8004426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442a:	4770      	bx	lr

0800442c <control_packet_set_remaining_length>:

long int control_packet_get_remaining_length(control_packet* control_packet){
	return control_packet == NULL ? (long int) 0 : control_packet->remaining_length;
}

void control_packet_set_remaining_length(control_packet* control_packet, const long int remaining_length){
 800442c:	b480      	push	{r7}
 800442e:	b083      	sub	sp, #12
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
 8004434:	6039      	str	r1, [r7, #0]
	if( control_packet == NULL ) return;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d004      	beq.n	8004446 <control_packet_set_remaining_length+0x1a>
	control_packet->remaining_length = remaining_length;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	683a      	ldr	r2, [r7, #0]
 8004440:	f8c3 2002 	str.w	r2, [r3, #2]
 8004444:	e000      	b.n	8004448 <control_packet_set_remaining_length+0x1c>
	if( control_packet == NULL ) return;
 8004446:	bf00      	nop
}
 8004448:	370c      	adds	r7, #12
 800444a:	46bd      	mov	sp, r7
 800444c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004450:	4770      	bx	lr

08004452 <control_packet_to_bytes>:

bytes* control_packet_to_bytes(control_packet* control_packet){
 8004452:	b580      	push	{r7, lr}
 8004454:	b086      	sub	sp, #24
 8004456:	af00      	add	r7, sp, #0
 8004458:	6078      	str	r0, [r7, #4]
	if( control_packet == NULL ) return NULL;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d101      	bne.n	8004464 <control_packet_to_bytes+0x12>
 8004460:	2300      	movs	r3, #0
 8004462:	e02f      	b.n	80044c4 <control_packet_to_bytes+0x72>

	bytes* result = bytes_init();
 8004464:	f7ff fa32 	bl	80038cc <bytes_init>
 8004468:	60f8      	str	r0, [r7, #12]
	bytes_push_back(result, (unsigned char) ( control_packet->type | control_packet->flags ));
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	781a      	ldrb	r2, [r3, #0]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	785b      	ldrb	r3, [r3, #1]
 8004472:	4313      	orrs	r3, r2
 8004474:	b2db      	uxtb	r3, r3
 8004476:	4619      	mov	r1, r3
 8004478:	68f8      	ldr	r0, [r7, #12]
 800447a:	f7ff fac6 	bl	8003a0a <bytes_push_back>

	unsigned char encode_byte;
	long int remaining_length = control_packet->remaining_length;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8004484:	613b      	str	r3, [r7, #16]
	do {
		encode_byte = remaining_length % 128;
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	425a      	negs	r2, r3
 800448a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800448e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004492:	bf58      	it	pl
 8004494:	4253      	negpl	r3, r2
 8004496:	75fb      	strb	r3, [r7, #23]
		remaining_length = remaining_length / 128;
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	2b00      	cmp	r3, #0
 800449c:	da00      	bge.n	80044a0 <control_packet_to_bytes+0x4e>
 800449e:	337f      	adds	r3, #127	; 0x7f
 80044a0:	11db      	asrs	r3, r3, #7
 80044a2:	613b      	str	r3, [r7, #16]
		if( remaining_length ) encode_byte = encode_byte | 0x80;
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d003      	beq.n	80044b2 <control_packet_to_bytes+0x60>
 80044aa:	7dfb      	ldrb	r3, [r7, #23]
 80044ac:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80044b0:	75fb      	strb	r3, [r7, #23]
		bytes_push_back(result, (unsigned char) encode_byte);
 80044b2:	7dfb      	ldrb	r3, [r7, #23]
 80044b4:	4619      	mov	r1, r3
 80044b6:	68f8      	ldr	r0, [r7, #12]
 80044b8:	f7ff faa7 	bl	8003a0a <bytes_push_back>
	} while ( remaining_length > 0 );
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	dce1      	bgt.n	8004486 <control_packet_to_bytes+0x34>

	return result;
 80044c2:	68fb      	ldr	r3, [r7, #12]
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	3718      	adds	r7, #24
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd80      	pop	{r7, pc}

080044cc <control_packet_proxy_init>:
#include "../../Inc/mqtt_client/control_packet_proxy.h"

control_packet_proxy* control_packet_proxy_init(wifi* wifi, ping_req_service* ping_req_service, ping_resp_service* ping_resp_service, unsigned int connection_attempts){
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b086      	sub	sp, #24
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	60f8      	str	r0, [r7, #12]
 80044d4:	60b9      	str	r1, [r7, #8]
 80044d6:	607a      	str	r2, [r7, #4]
 80044d8:	603b      	str	r3, [r7, #0]
	if( wifi == NULL || ping_req_service == NULL ||  ping_resp_service == NULL || connection_attempts == 0 ) return NULL;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d008      	beq.n	80044f2 <control_packet_proxy_init+0x26>
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d005      	beq.n	80044f2 <control_packet_proxy_init+0x26>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d002      	beq.n	80044f2 <control_packet_proxy_init+0x26>
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d101      	bne.n	80044f6 <control_packet_proxy_init+0x2a>
 80044f2:	2300      	movs	r3, #0
 80044f4:	e011      	b.n	800451a <control_packet_proxy_init+0x4e>
	control_packet_proxy* result = (control_packet_proxy*) malloc(sizeof(control_packet_proxy));
 80044f6:	2010      	movs	r0, #16
 80044f8:	f008 f976 	bl	800c7e8 <malloc>
 80044fc:	4603      	mov	r3, r0
 80044fe:	617b      	str	r3, [r7, #20]
	result->wifi = wifi;
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	68fa      	ldr	r2, [r7, #12]
 8004504:	601a      	str	r2, [r3, #0]
	result->ping_req_service = ping_req_service;
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	68ba      	ldr	r2, [r7, #8]
 800450a:	605a      	str	r2, [r3, #4]
	result->ping_resp_service = ping_resp_service;
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	687a      	ldr	r2, [r7, #4]
 8004510:	609a      	str	r2, [r3, #8]
	result->connection_attempts = connection_attempts;
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	683a      	ldr	r2, [r7, #0]
 8004516:	60da      	str	r2, [r3, #12]
	return result;
 8004518:	697b      	ldr	r3, [r7, #20]
}
 800451a:	4618      	mov	r0, r3
 800451c:	3718      	adds	r7, #24
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}

08004522 <control_packet_proxy_destroy>:

void control_packet_proxy_destroy(control_packet_proxy* control_packet_proxy){
 8004522:	b580      	push	{r7, lr}
 8004524:	b082      	sub	sp, #8
 8004526:	af00      	add	r7, sp, #0
 8004528:	6078      	str	r0, [r7, #4]
	if( control_packet_proxy == NULL ) return;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d020      	beq.n	8004572 <control_packet_proxy_destroy+0x50>
	control_packet_proxy->wifi = NULL;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2200      	movs	r2, #0
 8004534:	701a      	strb	r2, [r3, #0]
 8004536:	2200      	movs	r2, #0
 8004538:	705a      	strb	r2, [r3, #1]
 800453a:	2200      	movs	r2, #0
 800453c:	709a      	strb	r2, [r3, #2]
 800453e:	2200      	movs	r2, #0
 8004540:	70da      	strb	r2, [r3, #3]
	control_packet_proxy->ping_req_service = NULL;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2200      	movs	r2, #0
 8004546:	711a      	strb	r2, [r3, #4]
 8004548:	2200      	movs	r2, #0
 800454a:	715a      	strb	r2, [r3, #5]
 800454c:	2200      	movs	r2, #0
 800454e:	719a      	strb	r2, [r3, #6]
 8004550:	2200      	movs	r2, #0
 8004552:	71da      	strb	r2, [r3, #7]
	control_packet_proxy->ping_resp_service = NULL;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2200      	movs	r2, #0
 8004558:	721a      	strb	r2, [r3, #8]
 800455a:	2200      	movs	r2, #0
 800455c:	725a      	strb	r2, [r3, #9]
 800455e:	2200      	movs	r2, #0
 8004560:	729a      	strb	r2, [r3, #10]
 8004562:	2200      	movs	r2, #0
 8004564:	72da      	strb	r2, [r3, #11]
	free(control_packet_proxy);
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	f008 f946 	bl	800c7f8 <free>
	control_packet_proxy = NULL;
 800456c:	2300      	movs	r3, #0
 800456e:	607b      	str	r3, [r7, #4]
 8004570:	e000      	b.n	8004574 <control_packet_proxy_destroy+0x52>
	if( control_packet_proxy == NULL ) return;
 8004572:	bf00      	nop
}
 8004574:	3708      	adds	r7, #8
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}

0800457a <control_packet_proxy_connect>:

void control_packet_proxy_connect(control_packet_proxy* control_packet_proxy, char* ip, unsigned int port){
 800457a:	b580      	push	{r7, lr}
 800457c:	b084      	sub	sp, #16
 800457e:	af00      	add	r7, sp, #0
 8004580:	60f8      	str	r0, [r7, #12]
 8004582:	60b9      	str	r1, [r7, #8]
 8004584:	607a      	str	r2, [r7, #4]
	if( control_packet_proxy == NULL ) return;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d007      	beq.n	800459c <control_packet_proxy_connect+0x22>
	wifi_connect(control_packet_proxy->wifi, ip, port);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	687a      	ldr	r2, [r7, #4]
 8004592:	68b9      	ldr	r1, [r7, #8]
 8004594:	4618      	mov	r0, r3
 8004596:	f001 fdc0 	bl	800611a <wifi_connect>
 800459a:	e000      	b.n	800459e <control_packet_proxy_connect+0x24>
	if( control_packet_proxy == NULL ) return;
 800459c:	bf00      	nop
}
 800459e:	3710      	adds	r7, #16
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}

080045a4 <control_packet_proxy_is_connected>:
void control_packet_proxy_disconnect(control_packet_proxy* control_packet_proxy){
	if( control_packet_proxy == NULL ) return;
	wifi_disconnect(control_packet_proxy->wifi);
}

bool control_packet_proxy_is_connected(control_packet_proxy* control_packet_proxy){
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b082      	sub	sp, #8
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
	if( control_packet_proxy == NULL ) return false;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d101      	bne.n	80045b6 <control_packet_proxy_is_connected+0x12>
 80045b2:	2300      	movs	r3, #0
 80045b4:	e005      	b.n	80045c2 <control_packet_proxy_is_connected+0x1e>
	return wifi_is_connected(control_packet_proxy->wifi);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4618      	mov	r0, r3
 80045bc:	f001 fdd3 	bl	8006166 <wifi_is_connected>
 80045c0:	4603      	mov	r3, r0
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	3708      	adds	r7, #8
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}

080045ca <control_packet_proxy_write>:
bytes* control_packet_proxy_read(control_packet_proxy* control_packet_proxy){
	if( control_packet_proxy == NULL ) return NULL;
	return wifi_read(control_packet_proxy->wifi);
}

void control_packet_proxy_write(control_packet_proxy* control_packet_proxy, bytes* bytes){
 80045ca:	b580      	push	{r7, lr}
 80045cc:	b086      	sub	sp, #24
 80045ce:	af00      	add	r7, sp, #0
 80045d0:	6078      	str	r0, [r7, #4]
 80045d2:	6039      	str	r1, [r7, #0]
	if(control_packet_proxy == NULL || bytes == NULL ) return;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d02a      	beq.n	8004630 <control_packet_proxy_write+0x66>
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d027      	beq.n	8004630 <control_packet_proxy_write+0x66>
	session* session = session_get_instance();
 80045e0:	f001 fa24 	bl	8005a2c <session_get_instance>
 80045e4:	6178      	str	r0, [r7, #20]
	if( session_is_expired(session) ){
 80045e6:	6978      	ldr	r0, [r7, #20]
 80045e8:	f001 fc46 	bl	8005e78 <session_is_expired>
 80045ec:	4603      	mov	r3, r0
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d014      	beq.n	800461c <control_packet_proxy_write+0x52>
		ping_req* ping_req = ping_req_service_create(control_packet_proxy->ping_req_service);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	4618      	mov	r0, r3
 80045f8:	f000 fc6f 	bl	8004eda <ping_req_service_create>
 80045fc:	6138      	str	r0, [r7, #16]
		ping_req_service_write(control_packet_proxy->ping_req_service, ping_req);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	6939      	ldr	r1, [r7, #16]
 8004604:	4618      	mov	r0, r3
 8004606:	f000 fc78 	bl	8004efa <ping_req_service_write>

		ping_resp* ping_resp = ping_resp_service_read(control_packet_proxy->ping_resp_service);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	689b      	ldr	r3, [r3, #8]
 800460e:	4618      	mov	r0, r3
 8004610:	f000 fcda 	bl	8004fc8 <ping_resp_service_read>
 8004614:	60f8      	str	r0, [r7, #12]
		if( ping_resp == NULL ) return;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d00b      	beq.n	8004634 <control_packet_proxy_write+0x6a>
	}
	wifi_write(control_packet_proxy->wifi, bytes);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	6839      	ldr	r1, [r7, #0]
 8004622:	4618      	mov	r0, r3
 8004624:	f001 fdc3 	bl	80061ae <wifi_write>
	session_signal_time_last_package(session);
 8004628:	6978      	ldr	r0, [r7, #20]
 800462a:	f001 fc0d 	bl	8005e48 <session_signal_time_last_package>
 800462e:	e002      	b.n	8004636 <control_packet_proxy_write+0x6c>
	if(control_packet_proxy == NULL || bytes == NULL ) return;
 8004630:	bf00      	nop
 8004632:	e000      	b.n	8004636 <control_packet_proxy_write+0x6c>
		if( ping_resp == NULL ) return;
 8004634:	bf00      	nop
}
 8004636:	3718      	adds	r7, #24
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}

0800463c <disconnect_service_init>:
#include "../../Inc/mqtt_client/disconnect_service.h"


disconnect_service* disconnect_service_init(control_packet_proxy* control_packet_proxy){
 800463c:	b580      	push	{r7, lr}
 800463e:	b084      	sub	sp, #16
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
	if( control_packet_proxy == NULL ) return NULL;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d101      	bne.n	800464e <disconnect_service_init+0x12>
 800464a:	2300      	movs	r3, #0
 800464c:	e008      	b.n	8004660 <disconnect_service_init+0x24>
	disconnect_service* result = (disconnect_service*) malloc(sizeof(disconnect_service));
 800464e:	2004      	movs	r0, #4
 8004650:	f008 f8ca 	bl	800c7e8 <malloc>
 8004654:	4603      	mov	r3, r0
 8004656:	60fb      	str	r3, [r7, #12]
	result->control_packet_proxy = control_packet_proxy;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	687a      	ldr	r2, [r7, #4]
 800465c:	601a      	str	r2, [r3, #0]
	return result;
 800465e:	68fb      	ldr	r3, [r7, #12]
}
 8004660:	4618      	mov	r0, r3
 8004662:	3710      	adds	r7, #16
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}

08004668 <disconnect_service_destroy>:

void disconnect_service_destroy(disconnect_service* disconnect_service){
 8004668:	b580      	push	{r7, lr}
 800466a:	b082      	sub	sp, #8
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
	if( disconnect_service == NULL ) return;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d00e      	beq.n	8004694 <disconnect_service_destroy+0x2c>
	disconnect_service->control_packet_proxy = NULL;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2200      	movs	r2, #0
 800467a:	701a      	strb	r2, [r3, #0]
 800467c:	2200      	movs	r2, #0
 800467e:	705a      	strb	r2, [r3, #1]
 8004680:	2200      	movs	r2, #0
 8004682:	709a      	strb	r2, [r3, #2]
 8004684:	2200      	movs	r2, #0
 8004686:	70da      	strb	r2, [r3, #3]
	free(disconnect_service);
 8004688:	6878      	ldr	r0, [r7, #4]
 800468a:	f008 f8b5 	bl	800c7f8 <free>
	disconnect_service = NULL;
 800468e:	2300      	movs	r3, #0
 8004690:	607b      	str	r3, [r7, #4]
 8004692:	e000      	b.n	8004696 <disconnect_service_destroy+0x2e>
	if( disconnect_service == NULL ) return;
 8004694:	bf00      	nop
}
 8004696:	3708      	adds	r7, #8
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}

0800469c <mqtt_client_init>:
unsigned char MQTT_CLIENT_QOS_LEVEL_1 = 0x01;

unsigned char MQTT_CLIENT_QOS_LEVEL_2 = 0x02;


mqtt_client* mqtt_client_init(esp8266* esp8266){
 800469c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800469e:	b08b      	sub	sp, #44	; 0x2c
 80046a0:	af06      	add	r7, sp, #24
 80046a2:	6078      	str	r0, [r7, #4]
	if( esp8266 == NULL ) return NULL;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d101      	bne.n	80046ae <mqtt_client_init+0x12>
 80046aa:	2300      	movs	r3, #0
 80046ac:	e0c0      	b.n	8004830 <mqtt_client_init+0x194>

	mqtt_client* result = (mqtt_client*) malloc(sizeof(mqtt_client));
 80046ae:	2034      	movs	r0, #52	; 0x34
 80046b0:	f008 f89a 	bl	800c7e8 <malloc>
 80046b4:	4603      	mov	r3, r0
 80046b6:	60fb      	str	r3, [r7, #12]

	result->wifi 					= wifi_init(esp8266, 1000);
 80046b8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80046bc:	6878      	ldr	r0, [r7, #4]
 80046be:	f001 fcbe 	bl	800603e <wifi_init>
 80046c2:	4602      	mov	r2, r0
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	601a      	str	r2, [r3, #0]
	result->ping_req_service 		= ping_req_service_init(result->wifi);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4618      	mov	r0, r3
 80046ce:	f000 fbd4 	bl	8004e7a <ping_req_service_init>
 80046d2:	4602      	mov	r2, r0
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	605a      	str	r2, [r3, #4]
	result->ping_resp_service		= ping_resp_service_init(result->wifi);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4618      	mov	r0, r3
 80046de:	f000 fc43 	bl	8004f68 <ping_resp_service_init>
 80046e2:	4602      	mov	r2, r0
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	609a      	str	r2, [r3, #8]
	result->control_packet_proxy 	= control_packet_proxy_init(result->wifi, result->ping_req_service, result->ping_resp_service, 3);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	6818      	ldr	r0, [r3, #0]
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	6859      	ldr	r1, [r3, #4]
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	689a      	ldr	r2, [r3, #8]
 80046f4:	2303      	movs	r3, #3
 80046f6:	f7ff fee9 	bl	80044cc <control_packet_proxy_init>
 80046fa:	4602      	mov	r2, r0
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	60da      	str	r2, [r3, #12]
	result->connack_service			= connack_service_init(result->control_packet_proxy);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	68db      	ldr	r3, [r3, #12]
 8004704:	4618      	mov	r0, r3
 8004706:	f7ff fa50 	bl	8003baa <connack_service_init>
 800470a:	4602      	mov	r2, r0
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	611a      	str	r2, [r3, #16]
	result->connect_service			= connect_service_init(result->control_packet_proxy);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	68db      	ldr	r3, [r3, #12]
 8004714:	4618      	mov	r0, r3
 8004716:	f7ff fd14 	bl	8004142 <connect_service_init>
 800471a:	4602      	mov	r2, r0
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	615a      	str	r2, [r3, #20]
	result->disconnect_service		= disconnect_service_init(result->control_packet_proxy);
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	68db      	ldr	r3, [r3, #12]
 8004724:	4618      	mov	r0, r3
 8004726:	f7ff ff89 	bl	800463c <disconnect_service_init>
 800472a:	4602      	mov	r2, r0
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	619a      	str	r2, [r3, #24]
	result->pub_ack_service			= pub_ack_service_init(result->control_packet_proxy);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	68db      	ldr	r3, [r3, #12]
 8004734:	4618      	mov	r0, r3
 8004736:	f000 fcb4 	bl	80050a2 <pub_ack_service_init>
 800473a:	4602      	mov	r2, r0
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	61da      	str	r2, [r3, #28]
	result->pub_comp_service			= pub_comp_service_init(result->control_packet_proxy);
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	68db      	ldr	r3, [r3, #12]
 8004744:	4618      	mov	r0, r3
 8004746:	f000 fd40 	bl	80051ca <pub_comp_service_init>
 800474a:	4602      	mov	r2, r0
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	621a      	str	r2, [r3, #32]
	result->publish_service			= publish_service_init(result->control_packet_proxy);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	68db      	ldr	r3, [r3, #12]
 8004754:	4618      	mov	r0, r3
 8004756:	f001 f8b7 	bl	80058c8 <publish_service_init>
 800475a:	4602      	mov	r2, r0
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	625a      	str	r2, [r3, #36]	; 0x24
	result->pub_rec_service			= pub_rec_service_init(result->control_packet_proxy);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	68db      	ldr	r3, [r3, #12]
 8004764:	4618      	mov	r0, r3
 8004766:	f000 fdc4 	bl	80052f2 <pub_rec_service_init>
 800476a:	4602      	mov	r2, r0
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	629a      	str	r2, [r3, #40]	; 0x28
	result->pub_rel_service			= pub_rel_service_init(result->control_packet_proxy);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	68db      	ldr	r3, [r3, #12]
 8004774:	4618      	mov	r0, r3
 8004776:	f000 fe91 	bl	800549c <pub_rel_service_init>
 800477a:	4602      	mov	r2, r0
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	62da      	str	r2, [r3, #44]	; 0x2c
	result->mqtt_service				= mqtt_service_init(result->control_packet_proxy, result->connack_service, result->connect_service, result->disconnect_service, result->pub_ack_service, result->pub_comp_service, result->publish_service, result->pub_rec_service, result->pub_rel_service);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	68dd      	ldr	r5, [r3, #12]
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	691e      	ldr	r6, [r3, #16]
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	f8d3 c014 	ldr.w	ip, [r3, #20]
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	f8d3 e018 	ldr.w	lr, [r3, #24]
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	69db      	ldr	r3, [r3, #28]
 8004798:	68fa      	ldr	r2, [r7, #12]
 800479a:	6a12      	ldr	r2, [r2, #32]
 800479c:	68f9      	ldr	r1, [r7, #12]
 800479e:	6a49      	ldr	r1, [r1, #36]	; 0x24
 80047a0:	68f8      	ldr	r0, [r7, #12]
 80047a2:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80047a4:	68fc      	ldr	r4, [r7, #12]
 80047a6:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
 80047a8:	9404      	str	r4, [sp, #16]
 80047aa:	9003      	str	r0, [sp, #12]
 80047ac:	9102      	str	r1, [sp, #8]
 80047ae:	9201      	str	r2, [sp, #4]
 80047b0:	9300      	str	r3, [sp, #0]
 80047b2:	4673      	mov	r3, lr
 80047b4:	4662      	mov	r2, ip
 80047b6:	4631      	mov	r1, r6
 80047b8:	4628      	mov	r0, r5
 80047ba:	f000 f8fc 	bl	80049b6 <mqtt_service_init>
 80047be:	4602      	mov	r2, r0
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	631a      	str	r2, [r3, #48]	; 0x30

	if( result->wifi == NULL || result->ping_req_service == NULL || result->ping_resp_service == NULL ||
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d02b      	beq.n	8004824 <mqtt_client_init+0x188>
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d027      	beq.n	8004824 <mqtt_client_init+0x188>
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d023      	beq.n	8004824 <mqtt_client_init+0x188>
		result->control_packet_proxy == NULL || result->connack_service == NULL || result->connect_service == NULL ||
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	68db      	ldr	r3, [r3, #12]
	if( result->wifi == NULL || result->ping_req_service == NULL || result->ping_resp_service == NULL ||
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d01f      	beq.n	8004824 <mqtt_client_init+0x188>
		result->control_packet_proxy == NULL || result->connack_service == NULL || result->connect_service == NULL ||
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	691b      	ldr	r3, [r3, #16]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d01b      	beq.n	8004824 <mqtt_client_init+0x188>
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	695b      	ldr	r3, [r3, #20]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d017      	beq.n	8004824 <mqtt_client_init+0x188>
		result->disconnect_service == NULL || result->pub_ack_service == NULL || result->pub_comp_service == NULL ||
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	699b      	ldr	r3, [r3, #24]
		result->control_packet_proxy == NULL || result->connack_service == NULL || result->connect_service == NULL ||
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d013      	beq.n	8004824 <mqtt_client_init+0x188>
		result->disconnect_service == NULL || result->pub_ack_service == NULL || result->pub_comp_service == NULL ||
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	69db      	ldr	r3, [r3, #28]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d00f      	beq.n	8004824 <mqtt_client_init+0x188>
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	6a1b      	ldr	r3, [r3, #32]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d00b      	beq.n	8004824 <mqtt_client_init+0x188>
		result->publish_service == NULL || result->pub_rec_service == NULL || result->pub_rel_service == NULL ){
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
		result->disconnect_service == NULL || result->pub_ack_service == NULL || result->pub_comp_service == NULL ||
 8004810:	2b00      	cmp	r3, #0
 8004812:	d007      	beq.n	8004824 <mqtt_client_init+0x188>
		result->publish_service == NULL || result->pub_rec_service == NULL || result->pub_rel_service == NULL ){
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004818:	2b00      	cmp	r3, #0
 800481a:	d003      	beq.n	8004824 <mqtt_client_init+0x188>
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004820:	2b00      	cmp	r3, #0
 8004822:	d104      	bne.n	800482e <mqtt_client_init+0x192>

		mqtt_client_destroy(result);
 8004824:	68f8      	ldr	r0, [r7, #12]
 8004826:	f000 f807 	bl	8004838 <mqtt_client_destroy>

		return NULL;
 800482a:	2300      	movs	r3, #0
 800482c:	e000      	b.n	8004830 <mqtt_client_init+0x194>
	}

	return result;
 800482e:	68fb      	ldr	r3, [r7, #12]
}
 8004830:	4618      	mov	r0, r3
 8004832:	3714      	adds	r7, #20
 8004834:	46bd      	mov	sp, r7
 8004836:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004838 <mqtt_client_destroy>:

void mqtt_client_destroy(mqtt_client* mqtt_client){
 8004838:	b580      	push	{r7, lr}
 800483a:	b082      	sub	sp, #8
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
	if ( mqtt_client == NULL ) return;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d046      	beq.n	80048d4 <mqtt_client_destroy+0x9c>

	wifi_destroy(mqtt_client->wifi);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4618      	mov	r0, r3
 800484c:	f001 fc2b 	bl	80060a6 <wifi_destroy>
	ping_req_service_destroy(mqtt_client->ping_req_service);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	4618      	mov	r0, r3
 8004856:	f000 fb26 	bl	8004ea6 <ping_req_service_destroy>
	ping_resp_service_destroy(mqtt_client->ping_resp_service);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	4618      	mov	r0, r3
 8004860:	f000 fb98 	bl	8004f94 <ping_resp_service_destroy>
	control_packet_proxy_destroy(mqtt_client->control_packet_proxy);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	68db      	ldr	r3, [r3, #12]
 8004868:	4618      	mov	r0, r3
 800486a:	f7ff fe5a 	bl	8004522 <control_packet_proxy_destroy>
	connack_service_destroy(mqtt_client->connack_service);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	691b      	ldr	r3, [r3, #16]
 8004872:	4618      	mov	r0, r3
 8004874:	f7ff f9af 	bl	8003bd6 <connack_service_destroy>
	connect_service_destroy(mqtt_client->connect_service);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	695b      	ldr	r3, [r3, #20]
 800487c:	4618      	mov	r0, r3
 800487e:	f7ff fc76 	bl	800416e <connect_service_destroy>
	disconnect_service_destroy(mqtt_client->disconnect_service);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	699b      	ldr	r3, [r3, #24]
 8004886:	4618      	mov	r0, r3
 8004888:	f7ff feee 	bl	8004668 <disconnect_service_destroy>
	pub_ack_service_destroy(mqtt_client->pub_ack_service);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	69db      	ldr	r3, [r3, #28]
 8004890:	4618      	mov	r0, r3
 8004892:	f000 fc1c 	bl	80050ce <pub_ack_service_destroy>
	pub_comp_service_destroy(mqtt_client->pub_comp_service);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6a1b      	ldr	r3, [r3, #32]
 800489a:	4618      	mov	r0, r3
 800489c:	f000 fcab 	bl	80051f6 <pub_comp_service_destroy>
	publish_service_destroy(mqtt_client->publish_service);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a4:	4618      	mov	r0, r3
 80048a6:	f001 f825 	bl	80058f4 <publish_service_destroy>
	pub_rec_service_destroy(mqtt_client->pub_rec_service);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ae:	4618      	mov	r0, r3
 80048b0:	f000 fd35 	bl	800531e <pub_rec_service_destroy>
	pub_rel_service_destroy(mqtt_client->pub_rel_service);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048b8:	4618      	mov	r0, r3
 80048ba:	f000 fe00 	bl	80054be <pub_rel_service_destroy>
	mqtt_service_destroy(mqtt_client->mqtt_service);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048c2:	4618      	mov	r0, r3
 80048c4:	f000 f8a3 	bl	8004a0e <mqtt_service_destroy>

	free(mqtt_client);
 80048c8:	6878      	ldr	r0, [r7, #4]
 80048ca:	f007 ff95 	bl	800c7f8 <free>
	mqtt_client = NULL;
 80048ce:	2300      	movs	r3, #0
 80048d0:	607b      	str	r3, [r7, #4]
 80048d2:	e000      	b.n	80048d6 <mqtt_client_destroy+0x9e>
	if ( mqtt_client == NULL ) return;
 80048d4:	bf00      	nop
}
 80048d6:	3708      	adds	r7, #8
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}

080048dc <mqtt_client_connect>:

void mqtt_client_connect(mqtt_client* mqtt_client, char* id, char* host, unsigned int port, unsigned int keep_alive, bool clean_session){
 80048dc:	b580      	push	{r7, lr}
 80048de:	b086      	sub	sp, #24
 80048e0:	af02      	add	r7, sp, #8
 80048e2:	60f8      	str	r0, [r7, #12]
 80048e4:	60b9      	str	r1, [r7, #8]
 80048e6:	607a      	str	r2, [r7, #4]
 80048e8:	603b      	str	r3, [r7, #0]
	if( mqtt_client == NULL ) return;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d014      	beq.n	800491a <mqtt_client_connect+0x3e>
	wifi_connect(mqtt_client->wifi, (uint8_t*) SMART_WATER_PROPERTIES_API_GATEWAY_HOST, (unsigned int) SMART_WATER_PROPERTIES_API_GATEWAY_PORT);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	6818      	ldr	r0, [r3, #0]
 80048f4:	4b0b      	ldr	r3, [pc, #44]	; (8004924 <mqtt_client_connect+0x48>)
 80048f6:	6819      	ldr	r1, [r3, #0]
 80048f8:	4b0b      	ldr	r3, [pc, #44]	; (8004928 <mqtt_client_connect+0x4c>)
 80048fa:	881b      	ldrh	r3, [r3, #0]
 80048fc:	461a      	mov	r2, r3
 80048fe:	f001 fc0c 	bl	800611a <wifi_connect>
	mqtt_service_connect(mqtt_client->mqtt_service, id, host, port, keep_alive, clean_session);
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004906:	7f3b      	ldrb	r3, [r7, #28]
 8004908:	9301      	str	r3, [sp, #4]
 800490a:	69bb      	ldr	r3, [r7, #24]
 800490c:	9300      	str	r3, [sp, #0]
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	687a      	ldr	r2, [r7, #4]
 8004912:	68b9      	ldr	r1, [r7, #8]
 8004914:	f000 f90f 	bl	8004b36 <mqtt_service_connect>
 8004918:	e000      	b.n	800491c <mqtt_client_connect+0x40>
	if( mqtt_client == NULL ) return;
 800491a:	bf00      	nop
}
 800491c:	3710      	adds	r7, #16
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}
 8004922:	bf00      	nop
 8004924:	20000010 	.word	0x20000010
 8004928:	20000014 	.word	0x20000014

0800492c <mqtt_client_publish>:

void mqtt_client_publish(mqtt_client* mqtt_client, char* topic, char* payload, unsigned char qos, bool retain){
 800492c:	b580      	push	{r7, lr}
 800492e:	b086      	sub	sp, #24
 8004930:	af02      	add	r7, sp, #8
 8004932:	60f8      	str	r0, [r7, #12]
 8004934:	60b9      	str	r1, [r7, #8]
 8004936:	607a      	str	r2, [r7, #4]
 8004938:	70fb      	strb	r3, [r7, #3]
	if( mqtt_client == NULL ) return;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d00a      	beq.n	8004956 <mqtt_client_publish+0x2a>
	mqtt_service_publish(mqtt_client->mqtt_service, topic, payload, qos, retain);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004944:	78fa      	ldrb	r2, [r7, #3]
 8004946:	7e3b      	ldrb	r3, [r7, #24]
 8004948:	9300      	str	r3, [sp, #0]
 800494a:	4613      	mov	r3, r2
 800494c:	687a      	ldr	r2, [r7, #4]
 800494e:	68b9      	ldr	r1, [r7, #8]
 8004950:	f000 f944 	bl	8004bdc <mqtt_service_publish>
 8004954:	e000      	b.n	8004958 <mqtt_client_publish+0x2c>
	if( mqtt_client == NULL ) return;
 8004956:	bf00      	nop
}
 8004958:	3710      	adds	r7, #16
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}

0800495e <mqtt_server_request>:

	free(mqtt_server);
	mqtt_server = NULL;
}

void mqtt_server_request(mqtt_server* mqtt_server, bytes* bytes){
 800495e:	b580      	push	{r7, lr}
 8004960:	b082      	sub	sp, #8
 8004962:	af00      	add	r7, sp, #0
 8004964:	6078      	str	r0, [r7, #4]
 8004966:	6039      	str	r1, [r7, #0]
	if( mqtt_server == NULL || bytes == NULL) return;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d01f      	beq.n	80049ae <mqtt_server_request+0x50>
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d01c      	beq.n	80049ae <mqtt_server_request+0x50>

	if( mqtt_server->connect == NULL ){
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d106      	bne.n	800498a <mqtt_server_request+0x2c>
		mqtt_server->connect = assembler_build_to_connect(bytes);
 800497c:	6838      	ldr	r0, [r7, #0]
 800497e:	f7fe fdd1 	bl	8003524 <assembler_build_to_connect>
 8004982:	4602      	mov	r2, r0
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	601a      	str	r2, [r3, #0]
 8004988:	e012      	b.n	80049b0 <mqtt_server_request+0x52>
	} else if ( mqtt_server->publish == NULL ){
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	689b      	ldr	r3, [r3, #8]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d106      	bne.n	80049a0 <mqtt_server_request+0x42>
		mqtt_server->publish = assembler_build_to_publish(bytes);
 8004992:	6838      	ldr	r0, [r7, #0]
 8004994:	f7fe febe 	bl	8003714 <assembler_build_to_publish>
 8004998:	4602      	mov	r2, r0
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	609a      	str	r2, [r3, #8]
 800499e:	e007      	b.n	80049b0 <mqtt_server_request+0x52>
	} else {
		mqtt_server->pub_rel = assembler_build_to_pub_rel(bytes);
 80049a0:	6838      	ldr	r0, [r7, #0]
 80049a2:	f7fe ff37 	bl	8003814 <assembler_build_to_pub_rel>
 80049a6:	4602      	mov	r2, r0
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	611a      	str	r2, [r3, #16]
 80049ac:	e000      	b.n	80049b0 <mqtt_server_request+0x52>
	if( mqtt_server == NULL || bytes == NULL) return;
 80049ae:	bf00      	nop
	}
}
 80049b0:	3708      	adds	r7, #8
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}

080049b6 <mqtt_service_init>:
unsigned char MQTT_SERVICE_QOS_LEVEL_1 = 0x01;

unsigned char MQTT_SERVICE_QOS_LEVEL_2 = 0x02;


mqtt_service* mqtt_service_init(control_packet_proxy* control_packet_proxy, connack_service* connack_service, connect_service* connect_service, disconnect_service* disconnect_service, pub_ack_service* pub_ack_service, pub_comp_service* pub_comp_service, publish_service* publish_service, pub_rec_service* pub_rec_service, pub_rel_service* pub_rel_service){
 80049b6:	b580      	push	{r7, lr}
 80049b8:	b086      	sub	sp, #24
 80049ba:	af00      	add	r7, sp, #0
 80049bc:	60f8      	str	r0, [r7, #12]
 80049be:	60b9      	str	r1, [r7, #8]
 80049c0:	607a      	str	r2, [r7, #4]
 80049c2:	603b      	str	r3, [r7, #0]
	mqtt_service* result = (mqtt_service*) malloc(sizeof(mqtt_service));
 80049c4:	2024      	movs	r0, #36	; 0x24
 80049c6:	f007 ff0f 	bl	800c7e8 <malloc>
 80049ca:	4603      	mov	r3, r0
 80049cc:	617b      	str	r3, [r7, #20]
	result->control_packet_proxy   = control_packet_proxy;
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	68fa      	ldr	r2, [r7, #12]
 80049d2:	601a      	str	r2, [r3, #0]
	result->connack_service        = connack_service;
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	68ba      	ldr	r2, [r7, #8]
 80049d8:	605a      	str	r2, [r3, #4]
	result->connect_service        = connect_service;
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	687a      	ldr	r2, [r7, #4]
 80049de:	609a      	str	r2, [r3, #8]
	result->disconnect_service     = disconnect_service;
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	683a      	ldr	r2, [r7, #0]
 80049e4:	60da      	str	r2, [r3, #12]
	result->pub_ack_service        = pub_ack_service;
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	6a3a      	ldr	r2, [r7, #32]
 80049ea:	611a      	str	r2, [r3, #16]
	result->pub_comp_service       = pub_comp_service;
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049f0:	615a      	str	r2, [r3, #20]
	result->publish_service        = publish_service;
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80049f6:	619a      	str	r2, [r3, #24]
	result->pub_rec_service        = pub_rec_service;
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049fc:	61da      	str	r2, [r3, #28]
	result->pub_rel_service        = pub_rel_service;
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a02:	621a      	str	r2, [r3, #32]
	return result;
 8004a04:	697b      	ldr	r3, [r7, #20]
}
 8004a06:	4618      	mov	r0, r3
 8004a08:	3718      	adds	r7, #24
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bd80      	pop	{r7, pc}

08004a0e <mqtt_service_destroy>:

void mqtt_service_destroy(mqtt_service* mqtt_service){
 8004a0e:	b580      	push	{r7, lr}
 8004a10:	b082      	sub	sp, #8
 8004a12:	af00      	add	r7, sp, #0
 8004a14:	6078      	str	r0, [r7, #4]
	if( mqtt_service == NULL ) return;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	f000 8088 	beq.w	8004b2e <mqtt_service_destroy+0x120>

	control_packet_proxy_destroy(mqtt_service->control_packet_proxy);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4618      	mov	r0, r3
 8004a24:	f7ff fd7d 	bl	8004522 <control_packet_proxy_destroy>
	connack_service_destroy(mqtt_service->connack_service);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	f7ff f8d2 	bl	8003bd6 <connack_service_destroy>
	connect_service_destroy(mqtt_service->connect_service);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	4618      	mov	r0, r3
 8004a38:	f7ff fb99 	bl	800416e <connect_service_destroy>
	disconnect_service_destroy(mqtt_service->disconnect_service);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	68db      	ldr	r3, [r3, #12]
 8004a40:	4618      	mov	r0, r3
 8004a42:	f7ff fe11 	bl	8004668 <disconnect_service_destroy>
	pub_ack_service_destroy(mqtt_service->pub_ack_service);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	691b      	ldr	r3, [r3, #16]
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f000 fb3f 	bl	80050ce <pub_ack_service_destroy>
	pub_comp_service_destroy(mqtt_service->pub_comp_service);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	695b      	ldr	r3, [r3, #20]
 8004a54:	4618      	mov	r0, r3
 8004a56:	f000 fbce 	bl	80051f6 <pub_comp_service_destroy>
	publish_service_destroy(mqtt_service->publish_service);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	699b      	ldr	r3, [r3, #24]
 8004a5e:	4618      	mov	r0, r3
 8004a60:	f000 ff48 	bl	80058f4 <publish_service_destroy>
	pub_rec_service_destroy(mqtt_service->pub_rec_service);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	69db      	ldr	r3, [r3, #28]
 8004a68:	4618      	mov	r0, r3
 8004a6a:	f000 fc58 	bl	800531e <pub_rec_service_destroy>
	pub_rel_service_destroy(mqtt_service->pub_rel_service);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6a1b      	ldr	r3, [r3, #32]
 8004a72:	4618      	mov	r0, r3
 8004a74:	f000 fd23 	bl	80054be <pub_rel_service_destroy>

	mqtt_service->control_packet_proxy = NULL;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	701a      	strb	r2, [r3, #0]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	705a      	strb	r2, [r3, #1]
 8004a82:	2200      	movs	r2, #0
 8004a84:	709a      	strb	r2, [r3, #2]
 8004a86:	2200      	movs	r2, #0
 8004a88:	70da      	strb	r2, [r3, #3]
	mqtt_service->connack_service = NULL;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	711a      	strb	r2, [r3, #4]
 8004a90:	2200      	movs	r2, #0
 8004a92:	715a      	strb	r2, [r3, #5]
 8004a94:	2200      	movs	r2, #0
 8004a96:	719a      	strb	r2, [r3, #6]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	71da      	strb	r2, [r3, #7]
	mqtt_service->connect_service = NULL;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	721a      	strb	r2, [r3, #8]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	725a      	strb	r2, [r3, #9]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	729a      	strb	r2, [r3, #10]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	72da      	strb	r2, [r3, #11]
	mqtt_service->disconnect_service = NULL;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	731a      	strb	r2, [r3, #12]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	735a      	strb	r2, [r3, #13]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	739a      	strb	r2, [r3, #14]
 8004abc:	2200      	movs	r2, #0
 8004abe:	73da      	strb	r2, [r3, #15]
	mqtt_service->pub_ack_service = NULL;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	741a      	strb	r2, [r3, #16]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	745a      	strb	r2, [r3, #17]
 8004aca:	2200      	movs	r2, #0
 8004acc:	749a      	strb	r2, [r3, #18]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	74da      	strb	r2, [r3, #19]
	mqtt_service->pub_comp_service = NULL;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	751a      	strb	r2, [r3, #20]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	755a      	strb	r2, [r3, #21]
 8004adc:	2200      	movs	r2, #0
 8004ade:	759a      	strb	r2, [r3, #22]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	75da      	strb	r2, [r3, #23]
	mqtt_service->publish_service = NULL;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	761a      	strb	r2, [r3, #24]
 8004aea:	2200      	movs	r2, #0
 8004aec:	765a      	strb	r2, [r3, #25]
 8004aee:	2200      	movs	r2, #0
 8004af0:	769a      	strb	r2, [r3, #26]
 8004af2:	2200      	movs	r2, #0
 8004af4:	76da      	strb	r2, [r3, #27]
	mqtt_service->pub_rec_service = NULL;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2200      	movs	r2, #0
 8004afa:	771a      	strb	r2, [r3, #28]
 8004afc:	2200      	movs	r2, #0
 8004afe:	775a      	strb	r2, [r3, #29]
 8004b00:	2200      	movs	r2, #0
 8004b02:	779a      	strb	r2, [r3, #30]
 8004b04:	2200      	movs	r2, #0
 8004b06:	77da      	strb	r2, [r3, #31]
	mqtt_service->pub_rel_service = NULL;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	f883 2020 	strb.w	r2, [r3, #32]
 8004b10:	2200      	movs	r2, #0
 8004b12:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8004b16:	2200      	movs	r2, #0
 8004b18:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

	free(mqtt_service);
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	f007 fe68 	bl	800c7f8 <free>
	mqtt_service = NULL;
 8004b28:	2300      	movs	r3, #0
 8004b2a:	607b      	str	r3, [r7, #4]
 8004b2c:	e000      	b.n	8004b30 <mqtt_service_destroy+0x122>
	if( mqtt_service == NULL ) return;
 8004b2e:	bf00      	nop
}
 8004b30:	3708      	adds	r7, #8
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}

08004b36 <mqtt_service_connect>:

void mqtt_service_connect(mqtt_service* mqtt_service, char* id, char* host, unsigned int port, unsigned int keep_alive, bool clean_session){
 8004b36:	b580      	push	{r7, lr}
 8004b38:	b088      	sub	sp, #32
 8004b3a:	af00      	add	r7, sp, #0
 8004b3c:	60f8      	str	r0, [r7, #12]
 8004b3e:	60b9      	str	r1, [r7, #8]
 8004b40:	607a      	str	r2, [r7, #4]
 8004b42:	603b      	str	r3, [r7, #0]
    session* session = session_get_instance();
 8004b44:	f000 ff72 	bl	8005a2c <session_get_instance>
 8004b48:	61f8      	str	r0, [r7, #28]
    session_set_id(session, id);
 8004b4a:	68b9      	ldr	r1, [r7, #8]
 8004b4c:	69f8      	ldr	r0, [r7, #28]
 8004b4e:	f001 f83a 	bl	8005bc6 <session_set_id>
    session_set_host(session, host);
 8004b52:	6879      	ldr	r1, [r7, #4]
 8004b54:	69f8      	ldr	r0, [r7, #28]
 8004b56:	f001 f881 	bl	8005c5c <session_set_host>
    session_set_port(session, port);
 8004b5a:	6839      	ldr	r1, [r7, #0]
 8004b5c:	69f8      	ldr	r0, [r7, #28]
 8004b5e:	f001 f8a3 	bl	8005ca8 <session_set_port>
    session_set_keep_alive(session, keep_alive);
 8004b62:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b64:	69f8      	ldr	r0, [r7, #28]
 8004b66:	f001 f8c4 	bl	8005cf2 <session_set_keep_alive>
    session_set_clean(session, clean_session);
 8004b6a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004b6e:	4619      	mov	r1, r3
 8004b70:	69f8      	ldr	r0, [r7, #28]
 8004b72:	f001 f84e 	bl	8005c12 <session_set_clean>

    connect* connect = connect_service_create(mqtt_service->connect_service);
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	689b      	ldr	r3, [r3, #8]
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f7ff fb12 	bl	80041a4 <connect_service_create>
 8004b80:	61b8      	str	r0, [r7, #24]
    connect_service_write(mqtt_service->connect_service, connect);
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	69b9      	ldr	r1, [r7, #24]
 8004b88:	4618      	mov	r0, r3
 8004b8a:	f7ff fbcb 	bl	8004324 <connect_service_write>
    connack* connack = connack_service_create(mqtt_service->connack_service);
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	4618      	mov	r0, r3
 8004b94:	f7ff f83a 	bl	8003c0c <connack_service_create>
 8004b98:	6178      	str	r0, [r7, #20]

    session_set_connected(session,  session_is_connected(session) && connack_is_connection_accepted(connack) );
 8004b9a:	69f8      	ldr	r0, [r7, #28]
 8004b9c:	f001 f90a 	bl	8005db4 <session_is_connected>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d007      	beq.n	8004bb6 <mqtt_service_connect+0x80>
 8004ba6:	6978      	ldr	r0, [r7, #20]
 8004ba8:	f7fe ffe7 	bl	8003b7a <connack_is_connection_accepted>
 8004bac:	4603      	mov	r3, r0
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d001      	beq.n	8004bb6 <mqtt_service_connect+0x80>
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	e000      	b.n	8004bb8 <mqtt_service_connect+0x82>
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	f003 0301 	and.w	r3, r3, #1
 8004bbc:	b2db      	uxtb	r3, r3
 8004bbe:	4619      	mov	r1, r3
 8004bc0:	69f8      	ldr	r0, [r7, #28]
 8004bc2:	f001 f90b 	bl	8005ddc <session_set_connected>

    connack_destroy(connack);
 8004bc6:	6978      	ldr	r0, [r7, #20]
 8004bc8:	f7fe ffbd 	bl	8003b46 <connack_destroy>
    connect_destroy(connect);
 8004bcc:	69b8      	ldr	r0, [r7, #24]
 8004bce:	f7ff f915 	bl	8003dfc <connect_destroy>
}
 8004bd2:	bf00      	nop
 8004bd4:	3720      	adds	r7, #32
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}
	...

08004bdc <mqtt_service_publish>:

void mqtt_service_publish(mqtt_service* mqtt_service, char* topic, char* payload, unsigned char qos, bool retain){
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b08a      	sub	sp, #40	; 0x28
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	60f8      	str	r0, [r7, #12]
 8004be4:	60b9      	str	r1, [r7, #8]
 8004be6:	607a      	str	r2, [r7, #4]
 8004be8:	70fb      	strb	r3, [r7, #3]
	if( mqtt_service == NULL || topic == NULL || payload == NULL ) return;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	f000 809e 	beq.w	8004d2e <mqtt_service_publish+0x152>
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	f000 809a 	beq.w	8004d2e <mqtt_service_publish+0x152>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	f000 8096 	beq.w	8004d2e <mqtt_service_publish+0x152>

	session* session = session_get_instance();
 8004c02:	f000 ff13 	bl	8005a2c <session_get_instance>
 8004c06:	6278      	str	r0, [r7, #36]	; 0x24
	session_set_qos(session, qos);
 8004c08:	78fb      	ldrb	r3, [r7, #3]
 8004c0a:	4619      	mov	r1, r3
 8004c0c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004c0e:	f001 f897 	bl	8005d40 <session_set_qos>
	session_set_retain(session, retain);
 8004c12:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004c16:	4619      	mov	r1, r3
 8004c18:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004c1a:	f001 f8b8 	bl	8005d8e <session_set_retain>

	if( session_is_connected(session) ){
 8004c1e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004c20:	f001 f8c8 	bl	8005db4 <session_is_connected>
 8004c24:	4603      	mov	r3, r0
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	f000 8082 	beq.w	8004d30 <mqtt_service_publish+0x154>
		publish* publish = publish_service_create(mqtt_service->publish_service);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	699b      	ldr	r3, [r3, #24]
 8004c30:	4618      	mov	r0, r3
 8004c32:	f000 fe79 	bl	8005928 <publish_service_create>
 8004c36:	6238      	str	r0, [r7, #32]
		publish_set_payload(publish, payload);
 8004c38:	6879      	ldr	r1, [r7, #4]
 8004c3a:	6a38      	ldr	r0, [r7, #32]
 8004c3c:	f000 fd8a 	bl	8005754 <publish_set_payload>
		publish_set_topic_name(publish, topic);
 8004c40:	68b9      	ldr	r1, [r7, #8]
 8004c42:	6a38      	ldr	r0, [r7, #32]
 8004c44:	f000 fd4c 	bl	80056e0 <publish_set_topic_name>
		publish_service_write(mqtt_service->publish_service, publish);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	699b      	ldr	r3, [r3, #24]
 8004c4c:	6a39      	ldr	r1, [r7, #32]
 8004c4e:	4618      	mov	r0, r3
 8004c50:	f000 fece 	bl	80059f0 <publish_service_write>

		if ( session_get_qos(session) == PUBLISH_QOS_LEVEL_1 ){
 8004c54:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004c56:	f001 f85f 	bl	8005d18 <session_get_qos>
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	461a      	mov	r2, r3
 8004c5e:	4b36      	ldr	r3, [pc, #216]	; (8004d38 <mqtt_service_publish+0x15c>)
 8004c60:	781b      	ldrb	r3, [r3, #0]
 8004c62:	429a      	cmp	r2, r3
 8004c64:	d115      	bne.n	8004c92 <mqtt_service_publish+0xb6>
			session_set_unacknowledged_publish(session, publish);
 8004c66:	6a39      	ldr	r1, [r7, #32]
 8004c68:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004c6a:	f001 f925 	bl	8005eb8 <session_set_unacknowledged_publish>
			pub_ack* pub_ack = pub_ack_service_create(mqtt_service->pub_ack_service);
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	691b      	ldr	r3, [r3, #16]
 8004c72:	4618      	mov	r0, r3
 8004c74:	f000 fa45 	bl	8005102 <pub_ack_service_create>
 8004c78:	6138      	str	r0, [r7, #16]
			session_confirm(session, pub_ack_get_packet_identifier(pub_ack));
 8004c7a:	6938      	ldr	r0, [r7, #16]
 8004c7c:	f000 fa00 	bl	8005080 <pub_ack_get_packet_identifier>
 8004c80:	4603      	mov	r3, r0
 8004c82:	4619      	mov	r1, r3
 8004c84:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004c86:	f001 f941 	bl	8005f0c <session_confirm>

			pub_ack_destroy(pub_ack);
 8004c8a:	6938      	ldr	r0, [r7, #16]
 8004c8c:	f000 f9de 	bl	800504c <pub_ack_destroy>
 8004c90:	e049      	b.n	8004d26 <mqtt_service_publish+0x14a>
		} else if ( session_get_qos(session) == PUBLISH_QOS_LEVEL_2 ){
 8004c92:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004c94:	f001 f840 	bl	8005d18 <session_get_qos>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	461a      	mov	r2, r3
 8004c9c:	4b27      	ldr	r3, [pc, #156]	; (8004d3c <mqtt_service_publish+0x160>)
 8004c9e:	781b      	ldrb	r3, [r3, #0]
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	d140      	bne.n	8004d26 <mqtt_service_publish+0x14a>
			session_set_unacknowledged_publish(session, publish);
 8004ca4:	6a39      	ldr	r1, [r7, #32]
 8004ca6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004ca8:	f001 f906 	bl	8005eb8 <session_set_unacknowledged_publish>

			pub_rec* pub_rec = pub_rec_service_create(mqtt_service->pub_rec_service);
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	69db      	ldr	r3, [r3, #28]
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	f000 fb4d 	bl	8005350 <pub_rec_service_create>
 8004cb6:	61f8      	str	r0, [r7, #28]
			session_confirm(session, pub_rec_get_packet_identifier(pub_rec));
 8004cb8:	69f8      	ldr	r0, [r7, #28]
 8004cba:	f000 fb09 	bl	80052d0 <pub_rec_get_packet_identifier>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	4619      	mov	r1, r3
 8004cc2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004cc4:	f001 f922 	bl	8005f0c <session_confirm>
			session_set_unacknowledged_pub_rec(session, pub_rec);
 8004cc8:	69f9      	ldr	r1, [r7, #28]
 8004cca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004ccc:	f001 f909 	bl	8005ee2 <session_set_unacknowledged_pub_rec>

			pub_rel* pub_rel = pub_rel_service_create(mqtt_service->pub_rel_service);
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	6a1b      	ldr	r3, [r3, #32]
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	f000 fc0c 	bl	80054f2 <pub_rel_service_create>
 8004cda:	61b8      	str	r0, [r7, #24]
			pub_rel_set_packet_identifier(pub_rel, publish_get_packet_identifier(publish));
 8004cdc:	6a38      	ldr	r0, [r7, #32]
 8004cde:	f000 fd12 	bl	8005706 <publish_get_packet_identifier>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	4619      	mov	r1, r3
 8004ce6:	69b8      	ldr	r0, [r7, #24]
 8004ce8:	f000 fb97 	bl	800541a <pub_rel_set_packet_identifier>
			pub_rel_service_write(mqtt_service->pub_rel_service, pub_rel);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	6a1b      	ldr	r3, [r3, #32]
 8004cf0:	69b9      	ldr	r1, [r7, #24]
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	f000 fc16 	bl	8005524 <pub_rel_service_write>

			pub_comp* pub_comp = pub_comp_service_create(mqtt_service->pub_comp_service);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	695b      	ldr	r3, [r3, #20]
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	f000 fa94 	bl	800522a <pub_comp_service_create>
 8004d02:	6178      	str	r0, [r7, #20]
			session_confirm(session, pub_comp_get_packet_identifier(pub_comp));
 8004d04:	6978      	ldr	r0, [r7, #20]
 8004d06:	f000 fa4f 	bl	80051a8 <pub_comp_get_packet_identifier>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	4619      	mov	r1, r3
 8004d0e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004d10:	f001 f8fc 	bl	8005f0c <session_confirm>

			pub_comp_destroy(pub_comp);
 8004d14:	6978      	ldr	r0, [r7, #20]
 8004d16:	f000 fa2d 	bl	8005174 <pub_comp_destroy>
			pub_rel_destroy(pub_rel);
 8004d1a:	69b8      	ldr	r0, [r7, #24]
 8004d1c:	f000 fb52 	bl	80053c4 <pub_rel_destroy>
			pub_rec_destroy(pub_rec);
 8004d20:	69f8      	ldr	r0, [r7, #28]
 8004d22:	f000 fabb 	bl	800529c <pub_rec_destroy>
		}

		publish_destroy(publish);
 8004d26:	6a38      	ldr	r0, [r7, #32]
 8004d28:	f000 fcae 	bl	8005688 <publish_destroy>
 8004d2c:	e000      	b.n	8004d30 <mqtt_service_publish+0x154>
	if( mqtt_service == NULL || topic == NULL || payload == NULL ) return;
 8004d2e:	bf00      	nop
	}
}
 8004d30:	3728      	adds	r7, #40	; 0x28
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}
 8004d36:	bf00      	nop
 8004d38:	200000d0 	.word	0x200000d0
 8004d3c:	200000d1 	.word	0x200000d1

08004d40 <packet_util_build_bytes>:
#include "../../Inc/mqtt_client/packet_util.h"

bytes* packet_util_build_bytes(char* input){
 8004d40:	b590      	push	{r4, r7, lr}
 8004d42:	b087      	sub	sp, #28
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
	bytes* result = bytes_init();
 8004d48:	f7fe fdc0 	bl	80038cc <bytes_init>
 8004d4c:	6178      	str	r0, [r7, #20]

	unsigned int length = string_util_length(input);
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f003 f8e9 	bl	8007f26 <string_util_length>
 8004d54:	6138      	str	r0, [r7, #16]
	unsigned char msb_length = (unsigned char) ( (0xFF00 & length) >> 8 );
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	0a1b      	lsrs	r3, r3, #8
 8004d5a:	73fb      	strb	r3, [r7, #15]
	unsigned char lsb_length = (unsigned char) ( 0x00FF & length );
 8004d5c:	693b      	ldr	r3, [r7, #16]
 8004d5e:	73bb      	strb	r3, [r7, #14]
	bytes_push_back(result, msb_length);
 8004d60:	7bfb      	ldrb	r3, [r7, #15]
 8004d62:	4619      	mov	r1, r3
 8004d64:	6978      	ldr	r0, [r7, #20]
 8004d66:	f7fe fe50 	bl	8003a0a <bytes_push_back>
	bytes_push_back(result, lsb_length);
 8004d6a:	7bbb      	ldrb	r3, [r7, #14]
 8004d6c:	4619      	mov	r1, r3
 8004d6e:	6978      	ldr	r0, [r7, #20]
 8004d70:	f7fe fe4b 	bl	8003a0a <bytes_push_back>

	for(register int i = 0; i < length; i++)
 8004d74:	2400      	movs	r4, #0
 8004d76:	e008      	b.n	8004d8a <packet_util_build_bytes+0x4a>
		bytes_push_back(result, (unsigned char) input[i] );
 8004d78:	4622      	mov	r2, r4
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	4413      	add	r3, r2
 8004d7e:	781b      	ldrb	r3, [r3, #0]
 8004d80:	4619      	mov	r1, r3
 8004d82:	6978      	ldr	r0, [r7, #20]
 8004d84:	f7fe fe41 	bl	8003a0a <bytes_push_back>
	for(register int i = 0; i < length; i++)
 8004d88:	3401      	adds	r4, #1
 8004d8a:	4622      	mov	r2, r4
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d8f2      	bhi.n	8004d78 <packet_util_build_bytes+0x38>

	return result;
 8004d92:	697b      	ldr	r3, [r7, #20]
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	371c      	adds	r7, #28
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bd90      	pop	{r4, r7, pc}

08004d9c <packet_util_build_string>:



char* packet_util_build_string(bytes* bytes, unsigned int* from){
 8004d9c:	b5b0      	push	{r4, r5, r7, lr}
 8004d9e:	b086      	sub	sp, #24
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
 8004da4:	6039      	str	r1, [r7, #0]
	unsigned int msb_length = (unsigned int) ( bytes_at(bytes, *from) << 8);
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4619      	mov	r1, r3
 8004dac:	6878      	ldr	r0, [r7, #4]
 8004dae:	f7fe fdfe 	bl	80039ae <bytes_at>
 8004db2:	4603      	mov	r3, r0
 8004db4:	021b      	lsls	r3, r3, #8
 8004db6:	617b      	str	r3, [r7, #20]
	unsigned int lsb_length = (unsigned int) (bytes_at(bytes, (*from)+1));
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	3301      	adds	r3, #1
 8004dbe:	4619      	mov	r1, r3
 8004dc0:	6878      	ldr	r0, [r7, #4]
 8004dc2:	f7fe fdf4 	bl	80039ae <bytes_at>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	613b      	str	r3, [r7, #16]
	unsigned int length = msb_length + lsb_length;
 8004dca:	697a      	ldr	r2, [r7, #20]
 8004dcc:	693b      	ldr	r3, [r7, #16]
 8004dce:	4413      	add	r3, r2
 8004dd0:	60fb      	str	r3, [r7, #12]

	char* field = string_util_build_empty_string(length+1);
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	3301      	adds	r3, #1
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f003 f8b1 	bl	8007f3e <string_util_build_empty_string>
 8004ddc:	60b8      	str	r0, [r7, #8]

	for(register unsigned int i = 0; i < length; i++ )
 8004dde:	2400      	movs	r4, #0
 8004de0:	e00c      	b.n	8004dfc <packet_util_build_string+0x60>
		field[i] = (char) bytes_at(bytes, *from + i + 2);
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4423      	add	r3, r4
 8004de8:	1c9a      	adds	r2, r3, #2
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	191d      	adds	r5, r3, r4
 8004dee:	4611      	mov	r1, r2
 8004df0:	6878      	ldr	r0, [r7, #4]
 8004df2:	f7fe fddc 	bl	80039ae <bytes_at>
 8004df6:	4603      	mov	r3, r0
 8004df8:	702b      	strb	r3, [r5, #0]
	for(register unsigned int i = 0; i < length; i++ )
 8004dfa:	3401      	adds	r4, #1
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	429c      	cmp	r4, r3
 8004e00:	d3ef      	bcc.n	8004de2 <packet_util_build_string+0x46>

	*from = *from + length + 2;
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	681a      	ldr	r2, [r3, #0]
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	4413      	add	r3, r2
 8004e0a:	1c9a      	adds	r2, r3, #2
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	601a      	str	r2, [r3, #0]
	return field;
 8004e10:	68bb      	ldr	r3, [r7, #8]
}
 8004e12:	4618      	mov	r0, r3
 8004e14:	3718      	adds	r7, #24
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bdb0      	pop	{r4, r5, r7, pc}
	...

08004e1c <ping_req_init>:
#include "../../Inc/mqtt_client/ping_req.h"


ping_req* ping_req_init(){
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b082      	sub	sp, #8
 8004e20:	af00      	add	r7, sp, #0
	ping_req* result = (ping_req*) malloc(sizeof(ping_req));
 8004e22:	2004      	movs	r0, #4
 8004e24:	f007 fce0 	bl	800c7e8 <malloc>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	607b      	str	r3, [r7, #4]
	result->control_packet = control_packet_init(CONTROL_PACKET_TYPE_PINGREQ, CONTROL_PACKET_FLAG_PINGREQ, 0x00);
 8004e2c:	4b07      	ldr	r3, [pc, #28]	; (8004e4c <ping_req_init+0x30>)
 8004e2e:	7818      	ldrb	r0, [r3, #0]
 8004e30:	4b07      	ldr	r3, [pc, #28]	; (8004e50 <ping_req_init+0x34>)
 8004e32:	781b      	ldrb	r3, [r3, #0]
 8004e34:	2200      	movs	r2, #0
 8004e36:	4619      	mov	r1, r3
 8004e38:	f7ff fab8 	bl	80043ac <control_packet_init>
 8004e3c:	4602      	mov	r2, r0
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	601a      	str	r2, [r3, #0]
	return result;
 8004e42:	687b      	ldr	r3, [r7, #4]
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	3708      	adds	r7, #8
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd80      	pop	{r7, pc}
 8004e4c:	080118fe 	.word	0x080118fe
 8004e50:	08011906 	.word	0x08011906

08004e54 <ping_req_to_bytes>:

	free(ping_req);
	ping_req = NULL;
}

bytes* ping_req_to_bytes(ping_req* ping_req){
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b082      	sub	sp, #8
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
	if( ping_req == NULL ) return NULL;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d101      	bne.n	8004e66 <ping_req_to_bytes+0x12>
 8004e62:	2300      	movs	r3, #0
 8004e64:	e005      	b.n	8004e72 <ping_req_to_bytes+0x1e>
	return control_packet_to_bytes(ping_req->control_packet);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	f7ff faf1 	bl	8004452 <control_packet_to_bytes>
 8004e70:	4603      	mov	r3, r0
}
 8004e72:	4618      	mov	r0, r3
 8004e74:	3708      	adds	r7, #8
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}

08004e7a <ping_req_service_init>:
#include "../../Inc/mqtt_client/ping_req_service.h"


ping_req_service* ping_req_service_init(wifi* wifi){
 8004e7a:	b580      	push	{r7, lr}
 8004e7c:	b084      	sub	sp, #16
 8004e7e:	af00      	add	r7, sp, #0
 8004e80:	6078      	str	r0, [r7, #4]
	if( wifi == NULL ) return NULL;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d101      	bne.n	8004e8c <ping_req_service_init+0x12>
 8004e88:	2300      	movs	r3, #0
 8004e8a:	e008      	b.n	8004e9e <ping_req_service_init+0x24>
	ping_req_service* result = (ping_req_service*) malloc(sizeof(ping_req_service));
 8004e8c:	2004      	movs	r0, #4
 8004e8e:	f007 fcab 	bl	800c7e8 <malloc>
 8004e92:	4603      	mov	r3, r0
 8004e94:	60fb      	str	r3, [r7, #12]
	result->wifi = wifi;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	687a      	ldr	r2, [r7, #4]
 8004e9a:	601a      	str	r2, [r3, #0]
	return result;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	3710      	adds	r7, #16
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}

08004ea6 <ping_req_service_destroy>:

void ping_req_service_destroy(ping_req_service* ping_req_service){
 8004ea6:	b580      	push	{r7, lr}
 8004ea8:	b082      	sub	sp, #8
 8004eaa:	af00      	add	r7, sp, #0
 8004eac:	6078      	str	r0, [r7, #4]
	if( ping_req_service == NULL ) return;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d00e      	beq.n	8004ed2 <ping_req_service_destroy+0x2c>
	ping_req_service->wifi = NULL;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	701a      	strb	r2, [r3, #0]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	705a      	strb	r2, [r3, #1]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	709a      	strb	r2, [r3, #2]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	70da      	strb	r2, [r3, #3]
	free(ping_req_service);
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	f007 fc96 	bl	800c7f8 <free>
	ping_req_service = NULL;
 8004ecc:	2300      	movs	r3, #0
 8004ece:	607b      	str	r3, [r7, #4]
 8004ed0:	e000      	b.n	8004ed4 <ping_req_service_destroy+0x2e>
	if( ping_req_service == NULL ) return;
 8004ed2:	bf00      	nop
}
 8004ed4:	3708      	adds	r7, #8
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bd80      	pop	{r7, pc}

08004eda <ping_req_service_create>:

ping_req* ping_req_service_create(ping_req_service* ping_req_service){
 8004eda:	b580      	push	{r7, lr}
 8004edc:	b082      	sub	sp, #8
 8004ede:	af00      	add	r7, sp, #0
 8004ee0:	6078      	str	r0, [r7, #4]
	if( ping_req_service == NULL ) return NULL;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d101      	bne.n	8004eec <ping_req_service_create+0x12>
 8004ee8:	2300      	movs	r3, #0
 8004eea:	e002      	b.n	8004ef2 <ping_req_service_create+0x18>
	return ping_req_init();
 8004eec:	f7ff ff96 	bl	8004e1c <ping_req_init>
 8004ef0:	4603      	mov	r3, r0
}
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	3708      	adds	r7, #8
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}

08004efa <ping_req_service_write>:
    ping_req* ping_req = bytes_is_empty(bytes)? NULL : ping_req_init(bytes);
    bytes_destroy(bytes);
    return ping_req;
}

void ping_req_service_write(ping_req_service* ping_req_service, ping_req* ping_req){
 8004efa:	b580      	push	{r7, lr}
 8004efc:	b084      	sub	sp, #16
 8004efe:	af00      	add	r7, sp, #0
 8004f00:	6078      	str	r0, [r7, #4]
 8004f02:	6039      	str	r1, [r7, #0]
	if( ping_req == NULL ) return;
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d00d      	beq.n	8004f26 <ping_req_service_write+0x2c>
	bytes* bytes = ping_req_to_bytes(ping_req);
 8004f0a:	6838      	ldr	r0, [r7, #0]
 8004f0c:	f7ff ffa2 	bl	8004e54 <ping_req_to_bytes>
 8004f10:	60f8      	str	r0, [r7, #12]
	wifi_write(ping_req_service->wifi, bytes);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	68f9      	ldr	r1, [r7, #12]
 8004f18:	4618      	mov	r0, r3
 8004f1a:	f001 f948 	bl	80061ae <wifi_write>
	bytes_destroy(bytes);
 8004f1e:	68f8      	ldr	r0, [r7, #12]
 8004f20:	f7fe fcfc 	bl	800391c <bytes_destroy>
 8004f24:	e000      	b.n	8004f28 <ping_req_service_write+0x2e>
	if( ping_req == NULL ) return;
 8004f26:	bf00      	nop
}
 8004f28:	3710      	adds	r7, #16
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bd80      	pop	{r7, pc}
	...

08004f30 <ping_resp_init>:
#include "../../Inc/mqtt_client/ping_resp.h"


ping_resp* ping_resp_init(){
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b082      	sub	sp, #8
 8004f34:	af00      	add	r7, sp, #0
	ping_resp* result = (ping_resp*) malloc(sizeof(ping_resp));
 8004f36:	2004      	movs	r0, #4
 8004f38:	f007 fc56 	bl	800c7e8 <malloc>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	607b      	str	r3, [r7, #4]
	result->control_packet = control_packet_init(CONTROL_PACKET_TYPE_PINGRESP, CONTROL_PACKET_FLAG_PINGRESP, 0x00);
 8004f40:	4b07      	ldr	r3, [pc, #28]	; (8004f60 <ping_resp_init+0x30>)
 8004f42:	7818      	ldrb	r0, [r3, #0]
 8004f44:	4b07      	ldr	r3, [pc, #28]	; (8004f64 <ping_resp_init+0x34>)
 8004f46:	781b      	ldrb	r3, [r3, #0]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	4619      	mov	r1, r3
 8004f4c:	f7ff fa2e 	bl	80043ac <control_packet_init>
 8004f50:	4602      	mov	r2, r0
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	601a      	str	r2, [r3, #0]
	return result;
 8004f56:	687b      	ldr	r3, [r7, #4]
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	3708      	adds	r7, #8
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bd80      	pop	{r7, pc}
 8004f60:	080118ff 	.word	0x080118ff
 8004f64:	08011907 	.word	0x08011907

08004f68 <ping_resp_service_init>:
#include "../../Inc/mqtt_client/ping_resp_service.h"


ping_resp_service* ping_resp_service_init(wifi* wifi){
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b084      	sub	sp, #16
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
	if( wifi == NULL ) return NULL;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d101      	bne.n	8004f7a <ping_resp_service_init+0x12>
 8004f76:	2300      	movs	r3, #0
 8004f78:	e008      	b.n	8004f8c <ping_resp_service_init+0x24>
	ping_resp_service* result = (ping_resp_service*) malloc(sizeof(ping_resp_service));
 8004f7a:	2004      	movs	r0, #4
 8004f7c:	f007 fc34 	bl	800c7e8 <malloc>
 8004f80:	4603      	mov	r3, r0
 8004f82:	60fb      	str	r3, [r7, #12]
	result->wifi = wifi;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	687a      	ldr	r2, [r7, #4]
 8004f88:	601a      	str	r2, [r3, #0]
	return result;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	3710      	adds	r7, #16
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}

08004f94 <ping_resp_service_destroy>:

void ping_resp_service_destroy(ping_resp_service* ping_resp_service){
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b082      	sub	sp, #8
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
	if( ping_resp_service == NULL ) return;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d00e      	beq.n	8004fc0 <ping_resp_service_destroy+0x2c>
	ping_resp_service->wifi = NULL;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	701a      	strb	r2, [r3, #0]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	705a      	strb	r2, [r3, #1]
 8004fac:	2200      	movs	r2, #0
 8004fae:	709a      	strb	r2, [r3, #2]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	70da      	strb	r2, [r3, #3]
	free(ping_resp_service);
 8004fb4:	6878      	ldr	r0, [r7, #4]
 8004fb6:	f007 fc1f 	bl	800c7f8 <free>
	ping_resp_service = NULL;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	607b      	str	r3, [r7, #4]
 8004fbe:	e000      	b.n	8004fc2 <ping_resp_service_destroy+0x2e>
	if( ping_resp_service == NULL ) return;
 8004fc0:	bf00      	nop
}
 8004fc2:	3708      	adds	r7, #8
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}

08004fc8 <ping_resp_service_read>:
ping_resp* ping_resp_service_create(ping_resp_service* ping_resp_service){
	if( ping_resp_service == NULL ) return NULL;
	return ping_resp_init();
}

ping_resp* ping_resp_service_read(ping_resp_service* ping_resp_service){
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b084      	sub	sp, #16
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
	if( ping_resp_service == NULL ) return NULL;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d101      	bne.n	8004fda <ping_resp_service_read+0x12>
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	e013      	b.n	8005002 <ping_resp_service_read+0x3a>
    bytes* bytes = wifi_read(ping_resp_service->wifi);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4618      	mov	r0, r3
 8004fe0:	f001 f8d5 	bl	800618e <wifi_read>
 8004fe4:	60f8      	str	r0, [r7, #12]
    ping_resp* ping_resp = bytes_is_empty(bytes)? NULL : ping_resp_init(bytes);
 8004fe6:	68f8      	ldr	r0, [r7, #12]
 8004fe8:	f7fe fccc 	bl	8003984 <bytes_is_empty>
 8004fec:	4603      	mov	r3, r0
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d104      	bne.n	8004ffc <ping_resp_service_read+0x34>
 8004ff2:	68f8      	ldr	r0, [r7, #12]
 8004ff4:	f7ff ff9c 	bl	8004f30 <ping_resp_init>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	e000      	b.n	8004ffe <ping_resp_service_read+0x36>
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	60bb      	str	r3, [r7, #8]
    return ping_resp;
 8005000:	68bb      	ldr	r3, [r7, #8]
}
 8005002:	4618      	mov	r0, r3
 8005004:	3710      	adds	r7, #16
 8005006:	46bd      	mov	sp, r7
 8005008:	bd80      	pop	{r7, pc}
	...

0800500c <pub_ack_init>:
#include "../../Inc/mqtt_client/pub_ack.h"


pub_ack* pub_ack_init(unsigned int packet_identifier){
 800500c:	b580      	push	{r7, lr}
 800500e:	b084      	sub	sp, #16
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
	pub_ack* result = (pub_ack*) malloc(sizeof(pub_ack));
 8005014:	2008      	movs	r0, #8
 8005016:	f007 fbe7 	bl	800c7e8 <malloc>
 800501a:	4603      	mov	r3, r0
 800501c:	60fb      	str	r3, [r7, #12]
	result->control_packet = control_packet_init(CONTROL_PACKET_TYPE_PUBACK, CONTROL_PACKET_FLAG_PUBACK, 0x00);
 800501e:	4b09      	ldr	r3, [pc, #36]	; (8005044 <pub_ack_init+0x38>)
 8005020:	7818      	ldrb	r0, [r3, #0]
 8005022:	4b09      	ldr	r3, [pc, #36]	; (8005048 <pub_ack_init+0x3c>)
 8005024:	781b      	ldrb	r3, [r3, #0]
 8005026:	2200      	movs	r2, #0
 8005028:	4619      	mov	r1, r3
 800502a:	f7ff f9bf 	bl	80043ac <control_packet_init>
 800502e:	4602      	mov	r2, r0
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	601a      	str	r2, [r3, #0]
	result->packet_identifier = packet_identifier;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	687a      	ldr	r2, [r7, #4]
 8005038:	605a      	str	r2, [r3, #4]
	return result;
 800503a:	68fb      	ldr	r3, [r7, #12]
}
 800503c:	4618      	mov	r0, r3
 800503e:	3710      	adds	r7, #16
 8005040:	46bd      	mov	sp, r7
 8005042:	bd80      	pop	{r7, pc}
 8005044:	080118fa 	.word	0x080118fa
 8005048:	08011902 	.word	0x08011902

0800504c <pub_ack_destroy>:

void pub_ack_destroy(pub_ack* pub_ack){
 800504c:	b580      	push	{r7, lr}
 800504e:	b082      	sub	sp, #8
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
	if( pub_ack == NULL ) return;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d00e      	beq.n	8005078 <pub_ack_destroy+0x2c>

	pub_ack->control_packet = NULL;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2200      	movs	r2, #0
 800505e:	701a      	strb	r2, [r3, #0]
 8005060:	2200      	movs	r2, #0
 8005062:	705a      	strb	r2, [r3, #1]
 8005064:	2200      	movs	r2, #0
 8005066:	709a      	strb	r2, [r3, #2]
 8005068:	2200      	movs	r2, #0
 800506a:	70da      	strb	r2, [r3, #3]

	free(pub_ack);
 800506c:	6878      	ldr	r0, [r7, #4]
 800506e:	f007 fbc3 	bl	800c7f8 <free>
	pub_ack = NULL;
 8005072:	2300      	movs	r3, #0
 8005074:	607b      	str	r3, [r7, #4]
 8005076:	e000      	b.n	800507a <pub_ack_destroy+0x2e>
	if( pub_ack == NULL ) return;
 8005078:	bf00      	nop
}
 800507a:	3708      	adds	r7, #8
 800507c:	46bd      	mov	sp, r7
 800507e:	bd80      	pop	{r7, pc}

08005080 <pub_ack_get_packet_identifier>:

unsigned int pub_ack_get_packet_identifier(pub_ack* pub_ack){
 8005080:	b480      	push	{r7}
 8005082:	b083      	sub	sp, #12
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
	return pub_ack == NULL ? 0 : pub_ack->packet_identifier;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d002      	beq.n	8005094 <pub_ack_get_packet_identifier+0x14>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	e000      	b.n	8005096 <pub_ack_get_packet_identifier+0x16>
 8005094:	2300      	movs	r3, #0
}
 8005096:	4618      	mov	r0, r3
 8005098:	370c      	adds	r7, #12
 800509a:	46bd      	mov	sp, r7
 800509c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a0:	4770      	bx	lr

080050a2 <pub_ack_service_init>:
#include "../../Inc/mqtt_client/pub_ack_service.h"


pub_ack_service* pub_ack_service_init(control_packet_proxy* control_packet_proxy){
 80050a2:	b580      	push	{r7, lr}
 80050a4:	b084      	sub	sp, #16
 80050a6:	af00      	add	r7, sp, #0
 80050a8:	6078      	str	r0, [r7, #4]
	if( control_packet_proxy == NULL ) return NULL;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d101      	bne.n	80050b4 <pub_ack_service_init+0x12>
 80050b0:	2300      	movs	r3, #0
 80050b2:	e008      	b.n	80050c6 <pub_ack_service_init+0x24>
	pub_ack_service* result = (pub_ack_service*) malloc(sizeof(pub_ack_service));
 80050b4:	2004      	movs	r0, #4
 80050b6:	f007 fb97 	bl	800c7e8 <malloc>
 80050ba:	4603      	mov	r3, r0
 80050bc:	60fb      	str	r3, [r7, #12]
	result->control_packet_proxy = control_packet_proxy;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	687a      	ldr	r2, [r7, #4]
 80050c2:	601a      	str	r2, [r3, #0]
	return result;
 80050c4:	68fb      	ldr	r3, [r7, #12]
}
 80050c6:	4618      	mov	r0, r3
 80050c8:	3710      	adds	r7, #16
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bd80      	pop	{r7, pc}

080050ce <pub_ack_service_destroy>:

void pub_ack_service_destroy(pub_ack_service* pub_ack_service){
 80050ce:	b580      	push	{r7, lr}
 80050d0:	b082      	sub	sp, #8
 80050d2:	af00      	add	r7, sp, #0
 80050d4:	6078      	str	r0, [r7, #4]
	if( pub_ack_service == NULL ) return;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d00e      	beq.n	80050fa <pub_ack_service_destroy+0x2c>
	pub_ack_service->control_packet_proxy = NULL;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2200      	movs	r2, #0
 80050e0:	701a      	strb	r2, [r3, #0]
 80050e2:	2200      	movs	r2, #0
 80050e4:	705a      	strb	r2, [r3, #1]
 80050e6:	2200      	movs	r2, #0
 80050e8:	709a      	strb	r2, [r3, #2]
 80050ea:	2200      	movs	r2, #0
 80050ec:	70da      	strb	r2, [r3, #3]
	free(pub_ack_service);
 80050ee:	6878      	ldr	r0, [r7, #4]
 80050f0:	f007 fb82 	bl	800c7f8 <free>
	pub_ack_service = NULL;
 80050f4:	2300      	movs	r3, #0
 80050f6:	607b      	str	r3, [r7, #4]
 80050f8:	e000      	b.n	80050fc <pub_ack_service_destroy+0x2e>
	if( pub_ack_service == NULL ) return;
 80050fa:	bf00      	nop
}
 80050fc:	3708      	adds	r7, #8
 80050fe:	46bd      	mov	sp, r7
 8005100:	bd80      	pop	{r7, pc}

08005102 <pub_ack_service_create>:

pub_ack* pub_ack_service_create(pub_ack_service* pub_ack_service){
 8005102:	b580      	push	{r7, lr}
 8005104:	b086      	sub	sp, #24
 8005106:	af00      	add	r7, sp, #0
 8005108:	6078      	str	r0, [r7, #4]
	if( pub_ack_service == NULL ) return NULL;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d101      	bne.n	8005114 <pub_ack_service_create+0x12>
 8005110:	2300      	movs	r3, #0
 8005112:	e00b      	b.n	800512c <pub_ack_service_create+0x2a>
	session* session = session_get_instance();
 8005114:	f000 fc8a 	bl	8005a2c <session_get_instance>
 8005118:	6178      	str	r0, [r7, #20]
	unsigned int packet_identifier = session_get_last_packet_identifier(session);
 800511a:	6978      	ldr	r0, [r7, #20]
 800511c:	f000 ff76 	bl	800600c <session_get_last_packet_identifier>
 8005120:	6138      	str	r0, [r7, #16]
	pub_ack* pub_ack = pub_ack_init(packet_identifier);
 8005122:	6938      	ldr	r0, [r7, #16]
 8005124:	f7ff ff72 	bl	800500c <pub_ack_init>
 8005128:	60f8      	str	r0, [r7, #12]
	return pub_ack;
 800512a:	68fb      	ldr	r3, [r7, #12]
}
 800512c:	4618      	mov	r0, r3
 800512e:	3718      	adds	r7, #24
 8005130:	46bd      	mov	sp, r7
 8005132:	bd80      	pop	{r7, pc}

08005134 <pub_comp_init>:
#include "../../Inc/mqtt_client/pub_comp.h"

pub_comp* pub_comp_init(unsigned int packet_identifier){
 8005134:	b580      	push	{r7, lr}
 8005136:	b084      	sub	sp, #16
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
	pub_comp* result = (pub_comp*) malloc(sizeof(pub_comp));
 800513c:	2008      	movs	r0, #8
 800513e:	f007 fb53 	bl	800c7e8 <malloc>
 8005142:	4603      	mov	r3, r0
 8005144:	60fb      	str	r3, [r7, #12]
	result->control_packet = control_packet_init(CONTROL_PACKET_TYPE_PUBCOMP, CONTROL_PACKET_FLAG_PUBCOMP, 0x00);
 8005146:	4b09      	ldr	r3, [pc, #36]	; (800516c <pub_comp_init+0x38>)
 8005148:	7818      	ldrb	r0, [r3, #0]
 800514a:	4b09      	ldr	r3, [pc, #36]	; (8005170 <pub_comp_init+0x3c>)
 800514c:	781b      	ldrb	r3, [r3, #0]
 800514e:	2200      	movs	r2, #0
 8005150:	4619      	mov	r1, r3
 8005152:	f7ff f92b 	bl	80043ac <control_packet_init>
 8005156:	4602      	mov	r2, r0
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	601a      	str	r2, [r3, #0]
	result->packet_identifier = packet_identifier;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	687a      	ldr	r2, [r7, #4]
 8005160:	605a      	str	r2, [r3, #4]
	return result;
 8005162:	68fb      	ldr	r3, [r7, #12]
}
 8005164:	4618      	mov	r0, r3
 8005166:	3710      	adds	r7, #16
 8005168:	46bd      	mov	sp, r7
 800516a:	bd80      	pop	{r7, pc}
 800516c:	080118fd 	.word	0x080118fd
 8005170:	08011905 	.word	0x08011905

08005174 <pub_comp_destroy>:

void pub_comp_destroy(pub_comp* pub_comp){
 8005174:	b580      	push	{r7, lr}
 8005176:	b082      	sub	sp, #8
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
	if( pub_comp == NULL ) return;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d00e      	beq.n	80051a0 <pub_comp_destroy+0x2c>

	pub_comp->control_packet = NULL;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2200      	movs	r2, #0
 8005186:	701a      	strb	r2, [r3, #0]
 8005188:	2200      	movs	r2, #0
 800518a:	705a      	strb	r2, [r3, #1]
 800518c:	2200      	movs	r2, #0
 800518e:	709a      	strb	r2, [r3, #2]
 8005190:	2200      	movs	r2, #0
 8005192:	70da      	strb	r2, [r3, #3]

	free(pub_comp);
 8005194:	6878      	ldr	r0, [r7, #4]
 8005196:	f007 fb2f 	bl	800c7f8 <free>
	pub_comp = NULL;
 800519a:	2300      	movs	r3, #0
 800519c:	607b      	str	r3, [r7, #4]
 800519e:	e000      	b.n	80051a2 <pub_comp_destroy+0x2e>
	if( pub_comp == NULL ) return;
 80051a0:	bf00      	nop
}
 80051a2:	3708      	adds	r7, #8
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bd80      	pop	{r7, pc}

080051a8 <pub_comp_get_packet_identifier>:

unsigned int pub_comp_get_packet_identifier(pub_comp* pub_comp){
 80051a8:	b480      	push	{r7}
 80051aa:	b083      	sub	sp, #12
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
	return pub_comp == NULL ? 0 : pub_comp->packet_identifier;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d002      	beq.n	80051bc <pub_comp_get_packet_identifier+0x14>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	e000      	b.n	80051be <pub_comp_get_packet_identifier+0x16>
 80051bc:	2300      	movs	r3, #0
}
 80051be:	4618      	mov	r0, r3
 80051c0:	370c      	adds	r7, #12
 80051c2:	46bd      	mov	sp, r7
 80051c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c8:	4770      	bx	lr

080051ca <pub_comp_service_init>:
#include "../../Inc/mqtt_client/pub_comp_service.h"


pub_comp_service* pub_comp_service_init(control_packet_proxy* control_packet_proxy){
 80051ca:	b580      	push	{r7, lr}
 80051cc:	b084      	sub	sp, #16
 80051ce:	af00      	add	r7, sp, #0
 80051d0:	6078      	str	r0, [r7, #4]
	if( control_packet_proxy == NULL ) return NULL;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d101      	bne.n	80051dc <pub_comp_service_init+0x12>
 80051d8:	2300      	movs	r3, #0
 80051da:	e008      	b.n	80051ee <pub_comp_service_init+0x24>
	pub_comp_service* result = (pub_comp_service*) malloc(sizeof(pub_comp_service));
 80051dc:	2004      	movs	r0, #4
 80051de:	f007 fb03 	bl	800c7e8 <malloc>
 80051e2:	4603      	mov	r3, r0
 80051e4:	60fb      	str	r3, [r7, #12]
	result->control_packet_proxy = control_packet_proxy;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	687a      	ldr	r2, [r7, #4]
 80051ea:	601a      	str	r2, [r3, #0]
	return result;
 80051ec:	68fb      	ldr	r3, [r7, #12]
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	3710      	adds	r7, #16
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}

080051f6 <pub_comp_service_destroy>:

void pub_comp_service_destroy(pub_comp_service* pub_comp_service){
 80051f6:	b580      	push	{r7, lr}
 80051f8:	b082      	sub	sp, #8
 80051fa:	af00      	add	r7, sp, #0
 80051fc:	6078      	str	r0, [r7, #4]
	if( pub_comp_service == NULL ) return;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d00e      	beq.n	8005222 <pub_comp_service_destroy+0x2c>
	pub_comp_service->control_packet_proxy = NULL;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2200      	movs	r2, #0
 8005208:	701a      	strb	r2, [r3, #0]
 800520a:	2200      	movs	r2, #0
 800520c:	705a      	strb	r2, [r3, #1]
 800520e:	2200      	movs	r2, #0
 8005210:	709a      	strb	r2, [r3, #2]
 8005212:	2200      	movs	r2, #0
 8005214:	70da      	strb	r2, [r3, #3]
	free(pub_comp_service);
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f007 faee 	bl	800c7f8 <free>
	pub_comp_service = NULL;
 800521c:	2300      	movs	r3, #0
 800521e:	607b      	str	r3, [r7, #4]
 8005220:	e000      	b.n	8005224 <pub_comp_service_destroy+0x2e>
	if( pub_comp_service == NULL ) return;
 8005222:	bf00      	nop
}
 8005224:	3708      	adds	r7, #8
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}

0800522a <pub_comp_service_create>:

pub_comp* pub_comp_service_create(pub_comp_service* pub_comp_service){
 800522a:	b580      	push	{r7, lr}
 800522c:	b086      	sub	sp, #24
 800522e:	af00      	add	r7, sp, #0
 8005230:	6078      	str	r0, [r7, #4]
	if( pub_comp_service == NULL ) return NULL;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d101      	bne.n	800523c <pub_comp_service_create+0x12>
 8005238:	2300      	movs	r3, #0
 800523a:	e00b      	b.n	8005254 <pub_comp_service_create+0x2a>
    session* session = session_get_instance();
 800523c:	f000 fbf6 	bl	8005a2c <session_get_instance>
 8005240:	6178      	str	r0, [r7, #20]
    unsigned int packet_identifier = session_get_last_packet_identifier(session);
 8005242:	6978      	ldr	r0, [r7, #20]
 8005244:	f000 fee2 	bl	800600c <session_get_last_packet_identifier>
 8005248:	6138      	str	r0, [r7, #16]
    pub_comp* pub_comp = pub_comp_init(packet_identifier);
 800524a:	6938      	ldr	r0, [r7, #16]
 800524c:	f7ff ff72 	bl	8005134 <pub_comp_init>
 8005250:	60f8      	str	r0, [r7, #12]
    return pub_comp;
 8005252:	68fb      	ldr	r3, [r7, #12]
}
 8005254:	4618      	mov	r0, r3
 8005256:	3718      	adds	r7, #24
 8005258:	46bd      	mov	sp, r7
 800525a:	bd80      	pop	{r7, pc}

0800525c <pub_rec_init>:
#include "../../Inc/mqtt_client/pub_rec.h"


pub_rec* pub_rec_init(unsigned int packet_identifier){
 800525c:	b580      	push	{r7, lr}
 800525e:	b084      	sub	sp, #16
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
	pub_rec* result = (pub_rec*) malloc(sizeof(pub_rec));
 8005264:	2008      	movs	r0, #8
 8005266:	f007 fabf 	bl	800c7e8 <malloc>
 800526a:	4603      	mov	r3, r0
 800526c:	60fb      	str	r3, [r7, #12]
	result->control_packet = control_packet_init(CONTROL_PACKET_TYPE_PUBREC, CONTROL_PACKET_FLAG_PUBREC, 0x00);
 800526e:	4b09      	ldr	r3, [pc, #36]	; (8005294 <pub_rec_init+0x38>)
 8005270:	7818      	ldrb	r0, [r3, #0]
 8005272:	4b09      	ldr	r3, [pc, #36]	; (8005298 <pub_rec_init+0x3c>)
 8005274:	781b      	ldrb	r3, [r3, #0]
 8005276:	2200      	movs	r2, #0
 8005278:	4619      	mov	r1, r3
 800527a:	f7ff f897 	bl	80043ac <control_packet_init>
 800527e:	4602      	mov	r2, r0
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	601a      	str	r2, [r3, #0]
	result->packet_identifier = packet_identifier;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	687a      	ldr	r2, [r7, #4]
 8005288:	605a      	str	r2, [r3, #4]
	return result;
 800528a:	68fb      	ldr	r3, [r7, #12]
}
 800528c:	4618      	mov	r0, r3
 800528e:	3710      	adds	r7, #16
 8005290:	46bd      	mov	sp, r7
 8005292:	bd80      	pop	{r7, pc}
 8005294:	080118fb 	.word	0x080118fb
 8005298:	08011903 	.word	0x08011903

0800529c <pub_rec_destroy>:

void pub_rec_destroy(pub_rec* pub_rec){
 800529c:	b580      	push	{r7, lr}
 800529e:	b082      	sub	sp, #8
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
	if( pub_rec == NULL ) return;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d00e      	beq.n	80052c8 <pub_rec_destroy+0x2c>

	pub_rec->control_packet = NULL;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2200      	movs	r2, #0
 80052ae:	701a      	strb	r2, [r3, #0]
 80052b0:	2200      	movs	r2, #0
 80052b2:	705a      	strb	r2, [r3, #1]
 80052b4:	2200      	movs	r2, #0
 80052b6:	709a      	strb	r2, [r3, #2]
 80052b8:	2200      	movs	r2, #0
 80052ba:	70da      	strb	r2, [r3, #3]

	free(pub_rec);
 80052bc:	6878      	ldr	r0, [r7, #4]
 80052be:	f007 fa9b 	bl	800c7f8 <free>
	pub_rec = NULL;
 80052c2:	2300      	movs	r3, #0
 80052c4:	607b      	str	r3, [r7, #4]
 80052c6:	e000      	b.n	80052ca <pub_rec_destroy+0x2e>
	if( pub_rec == NULL ) return;
 80052c8:	bf00      	nop
}
 80052ca:	3708      	adds	r7, #8
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bd80      	pop	{r7, pc}

080052d0 <pub_rec_get_packet_identifier>:

unsigned int pub_rec_get_packet_identifier(pub_rec* pub_rec){
 80052d0:	b480      	push	{r7}
 80052d2:	b083      	sub	sp, #12
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
	return pub_rec == NULL ? 0 : pub_rec->packet_identifier;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d002      	beq.n	80052e4 <pub_rec_get_packet_identifier+0x14>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	e000      	b.n	80052e6 <pub_rec_get_packet_identifier+0x16>
 80052e4:	2300      	movs	r3, #0
}
 80052e6:	4618      	mov	r0, r3
 80052e8:	370c      	adds	r7, #12
 80052ea:	46bd      	mov	sp, r7
 80052ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f0:	4770      	bx	lr

080052f2 <pub_rec_service_init>:
#include "../../Inc/mqtt_client/pub_rec_service.h"


pub_rec_service* pub_rec_service_init(control_packet_proxy* control_packet_proxy){
 80052f2:	b580      	push	{r7, lr}
 80052f4:	b084      	sub	sp, #16
 80052f6:	af00      	add	r7, sp, #0
 80052f8:	6078      	str	r0, [r7, #4]
	if( control_packet_proxy == NULL ) return NULL;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d101      	bne.n	8005304 <pub_rec_service_init+0x12>
 8005300:	2300      	movs	r3, #0
 8005302:	e008      	b.n	8005316 <pub_rec_service_init+0x24>
	pub_rec_service* result = (pub_rec_service*) malloc(sizeof(pub_rec_service));
 8005304:	2004      	movs	r0, #4
 8005306:	f007 fa6f 	bl	800c7e8 <malloc>
 800530a:	4603      	mov	r3, r0
 800530c:	60fb      	str	r3, [r7, #12]
	result->control_packet_proxy = control_packet_proxy;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	687a      	ldr	r2, [r7, #4]
 8005312:	601a      	str	r2, [r3, #0]
	return result;
 8005314:	68fb      	ldr	r3, [r7, #12]
}
 8005316:	4618      	mov	r0, r3
 8005318:	3710      	adds	r7, #16
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}

0800531e <pub_rec_service_destroy>:

void pub_rec_service_destroy(pub_rec_service* pub_rec_service){
 800531e:	b480      	push	{r7}
 8005320:	b083      	sub	sp, #12
 8005322:	af00      	add	r7, sp, #0
 8005324:	6078      	str	r0, [r7, #4]
	if( pub_rec_service == NULL ) return;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d00b      	beq.n	8005344 <pub_rec_service_destroy+0x26>
	pub_rec_service->control_packet_proxy = NULL;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2200      	movs	r2, #0
 8005330:	701a      	strb	r2, [r3, #0]
 8005332:	2200      	movs	r2, #0
 8005334:	705a      	strb	r2, [r3, #1]
 8005336:	2200      	movs	r2, #0
 8005338:	709a      	strb	r2, [r3, #2]
 800533a:	2200      	movs	r2, #0
 800533c:	70da      	strb	r2, [r3, #3]
	pub_rec_service = NULL;
 800533e:	2300      	movs	r3, #0
 8005340:	607b      	str	r3, [r7, #4]
 8005342:	e000      	b.n	8005346 <pub_rec_service_destroy+0x28>
	if( pub_rec_service == NULL ) return;
 8005344:	bf00      	nop
}
 8005346:	370c      	adds	r7, #12
 8005348:	46bd      	mov	sp, r7
 800534a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534e:	4770      	bx	lr

08005350 <pub_rec_service_create>:

pub_rec* pub_rec_service_create(pub_rec_service* pub_rec_service){
 8005350:	b580      	push	{r7, lr}
 8005352:	b086      	sub	sp, #24
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
	if( pub_rec_service == NULL ) return NULL;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d101      	bne.n	8005362 <pub_rec_service_create+0x12>
 800535e:	2300      	movs	r3, #0
 8005360:	e00b      	b.n	800537a <pub_rec_service_create+0x2a>
    session* session = session_get_instance();
 8005362:	f000 fb63 	bl	8005a2c <session_get_instance>
 8005366:	6178      	str	r0, [r7, #20]
    unsigned int packet_identifier = session_get_last_packet_identifier(session);
 8005368:	6978      	ldr	r0, [r7, #20]
 800536a:	f000 fe4f 	bl	800600c <session_get_last_packet_identifier>
 800536e:	6138      	str	r0, [r7, #16]
    pub_rec* result = pub_rec_init(packet_identifier);
 8005370:	6938      	ldr	r0, [r7, #16]
 8005372:	f7ff ff73 	bl	800525c <pub_rec_init>
 8005376:	60f8      	str	r0, [r7, #12]
    return result;
 8005378:	68fb      	ldr	r3, [r7, #12]
}
 800537a:	4618      	mov	r0, r3
 800537c:	3718      	adds	r7, #24
 800537e:	46bd      	mov	sp, r7
 8005380:	bd80      	pop	{r7, pc}
	...

08005384 <pub_rel_init>:
#include "../../Inc/mqtt_client/pub_rel.h"

pub_rel* pub_rel_init(unsigned int packet_identifier){
 8005384:	b580      	push	{r7, lr}
 8005386:	b084      	sub	sp, #16
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
	pub_rel* result = (pub_rel*) malloc(sizeof(pub_rel));
 800538c:	2008      	movs	r0, #8
 800538e:	f007 fa2b 	bl	800c7e8 <malloc>
 8005392:	4603      	mov	r3, r0
 8005394:	60fb      	str	r3, [r7, #12]
	result->control_packet = control_packet_init(CONTROL_PACKET_TYPE_PUBREL, CONTROL_PACKET_FLAG_PUBREL, 0x02);
 8005396:	4b09      	ldr	r3, [pc, #36]	; (80053bc <pub_rel_init+0x38>)
 8005398:	7818      	ldrb	r0, [r3, #0]
 800539a:	4b09      	ldr	r3, [pc, #36]	; (80053c0 <pub_rel_init+0x3c>)
 800539c:	781b      	ldrb	r3, [r3, #0]
 800539e:	2202      	movs	r2, #2
 80053a0:	4619      	mov	r1, r3
 80053a2:	f7ff f803 	bl	80043ac <control_packet_init>
 80053a6:	4602      	mov	r2, r0
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	601a      	str	r2, [r3, #0]
	result->packet_identifier = packet_identifier;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	687a      	ldr	r2, [r7, #4]
 80053b0:	605a      	str	r2, [r3, #4]

	return result;
 80053b2:	68fb      	ldr	r3, [r7, #12]
}
 80053b4:	4618      	mov	r0, r3
 80053b6:	3710      	adds	r7, #16
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bd80      	pop	{r7, pc}
 80053bc:	080118fc 	.word	0x080118fc
 80053c0:	08011904 	.word	0x08011904

080053c4 <pub_rel_destroy>:

void pub_rel_destroy(pub_rel* pub_rel){
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b082      	sub	sp, #8
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
	if( pub_rel == NULL ) return;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d00e      	beq.n	80053f0 <pub_rel_destroy+0x2c>

	pub_rel->control_packet = NULL;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2200      	movs	r2, #0
 80053d6:	701a      	strb	r2, [r3, #0]
 80053d8:	2200      	movs	r2, #0
 80053da:	705a      	strb	r2, [r3, #1]
 80053dc:	2200      	movs	r2, #0
 80053de:	709a      	strb	r2, [r3, #2]
 80053e0:	2200      	movs	r2, #0
 80053e2:	70da      	strb	r2, [r3, #3]

	free(pub_rel);
 80053e4:	6878      	ldr	r0, [r7, #4]
 80053e6:	f007 fa07 	bl	800c7f8 <free>
	pub_rel = NULL;
 80053ea:	2300      	movs	r3, #0
 80053ec:	607b      	str	r3, [r7, #4]
 80053ee:	e000      	b.n	80053f2 <pub_rel_destroy+0x2e>
	if( pub_rel == NULL ) return;
 80053f0:	bf00      	nop
}
 80053f2:	3708      	adds	r7, #8
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bd80      	pop	{r7, pc}

080053f8 <pub_rel_get_packet_identifier>:

unsigned int pub_rel_get_packet_identifier(pub_rel* pub_rel){
 80053f8:	b480      	push	{r7}
 80053fa:	b083      	sub	sp, #12
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
	return pub_rel == NULL ? 0 : pub_rel->packet_identifier;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d002      	beq.n	800540c <pub_rel_get_packet_identifier+0x14>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	e000      	b.n	800540e <pub_rel_get_packet_identifier+0x16>
 800540c:	2300      	movs	r3, #0
}
 800540e:	4618      	mov	r0, r3
 8005410:	370c      	adds	r7, #12
 8005412:	46bd      	mov	sp, r7
 8005414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005418:	4770      	bx	lr

0800541a <pub_rel_set_packet_identifier>:

void pub_rel_set_packet_identifier(pub_rel* pub_rel, unsigned int packet_identifier){
 800541a:	b480      	push	{r7}
 800541c:	b083      	sub	sp, #12
 800541e:	af00      	add	r7, sp, #0
 8005420:	6078      	str	r0, [r7, #4]
 8005422:	6039      	str	r1, [r7, #0]
	if( pub_rel == NULL ) return;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d003      	beq.n	8005432 <pub_rel_set_packet_identifier+0x18>
	pub_rel->packet_identifier = packet_identifier;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	683a      	ldr	r2, [r7, #0]
 800542e:	605a      	str	r2, [r3, #4]
 8005430:	e000      	b.n	8005434 <pub_rel_set_packet_identifier+0x1a>
	if( pub_rel == NULL ) return;
 8005432:	bf00      	nop
}
 8005434:	370c      	adds	r7, #12
 8005436:	46bd      	mov	sp, r7
 8005438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543c:	4770      	bx	lr

0800543e <pub_rel_to_bytes>:

bytes* pub_rel_to_bytes(pub_rel* pub_rel){
 800543e:	b580      	push	{r7, lr}
 8005440:	b086      	sub	sp, #24
 8005442:	af00      	add	r7, sp, #0
 8005444:	6078      	str	r0, [r7, #4]
	if( pub_rel == NULL ) return NULL;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d101      	bne.n	8005450 <pub_rel_to_bytes+0x12>
 800544c:	2300      	movs	r3, #0
 800544e:	e021      	b.n	8005494 <pub_rel_to_bytes+0x56>

    bytes* packet_identifier = bytes_init();
 8005450:	f7fe fa3c 	bl	80038cc <bytes_init>
 8005454:	6178      	str	r0, [r7, #20]
    unsigned char msb_packet_identifier = (unsigned char) ( (0xFF00 & pub_rel->packet_identifier) >> 8 );
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	0a1b      	lsrs	r3, r3, #8
 800545c:	74fb      	strb	r3, [r7, #19]
    unsigned char lsb_packet_identifier = (unsigned char) ( 0x00FF & pub_rel->packet_identifier);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	74bb      	strb	r3, [r7, #18]
    bytes_push_back(packet_identifier, msb_packet_identifier);
 8005464:	7cfb      	ldrb	r3, [r7, #19]
 8005466:	4619      	mov	r1, r3
 8005468:	6978      	ldr	r0, [r7, #20]
 800546a:	f7fe face 	bl	8003a0a <bytes_push_back>
    bytes_push_back(packet_identifier, lsb_packet_identifier);
 800546e:	7cbb      	ldrb	r3, [r7, #18]
 8005470:	4619      	mov	r1, r3
 8005472:	6978      	ldr	r0, [r7, #20]
 8005474:	f7fe fac9 	bl	8003a0a <bytes_push_back>

    bytes* result = control_packet_to_bytes(pub_rel->control_packet);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4618      	mov	r0, r3
 800547e:	f7fe ffe8 	bl	8004452 <control_packet_to_bytes>
 8005482:	60f8      	str	r0, [r7, #12]
    bytes_concat(result, packet_identifier);
 8005484:	6979      	ldr	r1, [r7, #20]
 8005486:	68f8      	ldr	r0, [r7, #12]
 8005488:	f7fe fafb 	bl	8003a82 <bytes_concat>
    bytes_destroy(packet_identifier);
 800548c:	6978      	ldr	r0, [r7, #20]
 800548e:	f7fe fa45 	bl	800391c <bytes_destroy>
    return result;
 8005492:	68fb      	ldr	r3, [r7, #12]
}
 8005494:	4618      	mov	r0, r3
 8005496:	3718      	adds	r7, #24
 8005498:	46bd      	mov	sp, r7
 800549a:	bd80      	pop	{r7, pc}

0800549c <pub_rel_service_init>:
#include "../../Inc/mqtt_client/pub_rel_service.h"

pub_rel_service* pub_rel_service_init(control_packet_proxy* control_packet_proxy){
 800549c:	b580      	push	{r7, lr}
 800549e:	b084      	sub	sp, #16
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
	pub_rel_service* result = (pub_rel_service*) malloc(sizeof(pub_rel_service));
 80054a4:	2004      	movs	r0, #4
 80054a6:	f007 f99f 	bl	800c7e8 <malloc>
 80054aa:	4603      	mov	r3, r0
 80054ac:	60fb      	str	r3, [r7, #12]
	result->control_packet_proxy = control_packet_proxy;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	687a      	ldr	r2, [r7, #4]
 80054b2:	601a      	str	r2, [r3, #0]
	return result;
 80054b4:	68fb      	ldr	r3, [r7, #12]
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	3710      	adds	r7, #16
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}

080054be <pub_rel_service_destroy>:

void pub_rel_service_destroy(pub_rel_service* pub_rel_service){
 80054be:	b580      	push	{r7, lr}
 80054c0:	b082      	sub	sp, #8
 80054c2:	af00      	add	r7, sp, #0
 80054c4:	6078      	str	r0, [r7, #4]
	if( pub_rel_service == NULL ) return;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d00e      	beq.n	80054ea <pub_rel_service_destroy+0x2c>
	pub_rel_service->control_packet_proxy = NULL;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2200      	movs	r2, #0
 80054d0:	701a      	strb	r2, [r3, #0]
 80054d2:	2200      	movs	r2, #0
 80054d4:	705a      	strb	r2, [r3, #1]
 80054d6:	2200      	movs	r2, #0
 80054d8:	709a      	strb	r2, [r3, #2]
 80054da:	2200      	movs	r2, #0
 80054dc:	70da      	strb	r2, [r3, #3]
	free(pub_rel_service);
 80054de:	6878      	ldr	r0, [r7, #4]
 80054e0:	f007 f98a 	bl	800c7f8 <free>
	pub_rel_service = NULL;
 80054e4:	2300      	movs	r3, #0
 80054e6:	607b      	str	r3, [r7, #4]
 80054e8:	e000      	b.n	80054ec <pub_rel_service_destroy+0x2e>
	if( pub_rel_service == NULL ) return;
 80054ea:	bf00      	nop
}
 80054ec:	3708      	adds	r7, #8
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bd80      	pop	{r7, pc}

080054f2 <pub_rel_service_create>:

pub_rel* pub_rel_service_create(pub_rel_service* pub_rel_service){
 80054f2:	b580      	push	{r7, lr}
 80054f4:	b086      	sub	sp, #24
 80054f6:	af00      	add	r7, sp, #0
 80054f8:	6078      	str	r0, [r7, #4]
	if( pub_rel_service == NULL ) return NULL;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d101      	bne.n	8005504 <pub_rel_service_create+0x12>
 8005500:	2300      	movs	r3, #0
 8005502:	e00b      	b.n	800551c <pub_rel_service_create+0x2a>
	session* session = session_get_instance();
 8005504:	f000 fa92 	bl	8005a2c <session_get_instance>
 8005508:	6178      	str	r0, [r7, #20]
	unsigned int packet_identifier = session_get_last_packet_identifier(session);
 800550a:	6978      	ldr	r0, [r7, #20]
 800550c:	f000 fd7e 	bl	800600c <session_get_last_packet_identifier>
 8005510:	6138      	str	r0, [r7, #16]
	pub_rel* result= pub_rel_init(packet_identifier);
 8005512:	6938      	ldr	r0, [r7, #16]
 8005514:	f7ff ff36 	bl	8005384 <pub_rel_init>
 8005518:	60f8      	str	r0, [r7, #12]
	return result;
 800551a:	68fb      	ldr	r3, [r7, #12]
}
 800551c:	4618      	mov	r0, r3
 800551e:	3718      	adds	r7, #24
 8005520:	46bd      	mov	sp, r7
 8005522:	bd80      	pop	{r7, pc}

08005524 <pub_rel_service_write>:
	pub_rel* pub_rel = bytes_is_empty(bytes) ? NULL : assembler_build_to_pub_rel(bytes);
	bytes_destroy(bytes);
	return pub_rel;
}

void pub_rel_service_write(pub_rel_service* pub_rel_service, pub_rel* pub_rel){
 8005524:	b580      	push	{r7, lr}
 8005526:	b084      	sub	sp, #16
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
 800552c:	6039      	str	r1, [r7, #0]
	if ( pub_rel_service == NULL ||  pub_rel == NULL ) return;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d010      	beq.n	8005556 <pub_rel_service_write+0x32>
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d00d      	beq.n	8005556 <pub_rel_service_write+0x32>
	bytes* bytes = pub_rel_to_bytes(pub_rel);
 800553a:	6838      	ldr	r0, [r7, #0]
 800553c:	f7ff ff7f 	bl	800543e <pub_rel_to_bytes>
 8005540:	60f8      	str	r0, [r7, #12]
	control_packet_proxy_write(pub_rel_service->control_packet_proxy, bytes);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	68f9      	ldr	r1, [r7, #12]
 8005548:	4618      	mov	r0, r3
 800554a:	f7ff f83e 	bl	80045ca <control_packet_proxy_write>
	bytes_destroy(bytes);
 800554e:	68f8      	ldr	r0, [r7, #12]
 8005550:	f7fe f9e4 	bl	800391c <bytes_destroy>
 8005554:	e000      	b.n	8005558 <pub_rel_service_write+0x34>
	if ( pub_rel_service == NULL ||  pub_rel == NULL ) return;
 8005556:	bf00      	nop
}
 8005558:	3710      	adds	r7, #16
 800555a:	46bd      	mov	sp, r7
 800555c:	bd80      	pop	{r7, pc}
	...

08005560 <publish_init>:

unsigned char PUBLISH_QOS_LEVEL_1 = 0x01;

unsigned char PUBLISH_QOS_LEVEL_2 = 0x02;

publish* publish_init(bool dup, unsigned char qos_level, bool retain){
 8005560:	b590      	push	{r4, r7, lr}
 8005562:	b085      	sub	sp, #20
 8005564:	af00      	add	r7, sp, #0
 8005566:	4603      	mov	r3, r0
 8005568:	71fb      	strb	r3, [r7, #7]
 800556a:	460b      	mov	r3, r1
 800556c:	71bb      	strb	r3, [r7, #6]
 800556e:	4613      	mov	r3, r2
 8005570:	717b      	strb	r3, [r7, #5]
	publish* result = (publish*) malloc(sizeof(publish));
 8005572:	2011      	movs	r0, #17
 8005574:	f007 f938 	bl	800c7e8 <malloc>
 8005578:	4603      	mov	r3, r0
 800557a:	60fb      	str	r3, [r7, #12]
	result->control_packet = control_packet_init(CONTROL_PACKET_TYPE_PUBLISH, CONTROL_PACKET_FLAG_PUBLISH, 0x00);
 800557c:	4b40      	ldr	r3, [pc, #256]	; (8005680 <publish_init+0x120>)
 800557e:	7818      	ldrb	r0, [r3, #0]
 8005580:	4b40      	ldr	r3, [pc, #256]	; (8005684 <publish_init+0x124>)
 8005582:	781b      	ldrb	r3, [r3, #0]
 8005584:	2200      	movs	r2, #0
 8005586:	4619      	mov	r1, r3
 8005588:	f7fe ff10 	bl	80043ac <control_packet_init>
 800558c:	4602      	mov	r2, r0
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	601a      	str	r2, [r3, #0]

	result->qos_level         = qos_level;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	79ba      	ldrb	r2, [r7, #6]
 8005596:	715a      	strb	r2, [r3, #5]
	result->dup               = result->qos_level == 0x00 ? false : dup;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	795b      	ldrb	r3, [r3, #5]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d004      	beq.n	80055aa <publish_init+0x4a>
 80055a0:	79fb      	ldrb	r3, [r7, #7]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d001      	beq.n	80055aa <publish_init+0x4a>
 80055a6:	2201      	movs	r2, #1
 80055a8:	e000      	b.n	80055ac <publish_init+0x4c>
 80055aa:	2200      	movs	r2, #0
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	711a      	strb	r2, [r3, #4]
    result->retain            = retain;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	797a      	ldrb	r2, [r7, #5]
 80055b4:	719a      	strb	r2, [r3, #6]
    result->topic_name        = NULL;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2200      	movs	r2, #0
 80055ba:	71da      	strb	r2, [r3, #7]
 80055bc:	2200      	movs	r2, #0
 80055be:	721a      	strb	r2, [r3, #8]
 80055c0:	2200      	movs	r2, #0
 80055c2:	725a      	strb	r2, [r3, #9]
 80055c4:	2200      	movs	r2, #0
 80055c6:	729a      	strb	r2, [r3, #10]
    result->packet_identifier = 0;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	2200      	movs	r2, #0
 80055cc:	72da      	strb	r2, [r3, #11]
 80055ce:	2200      	movs	r2, #0
 80055d0:	731a      	strb	r2, [r3, #12]
    result->payload           = NULL;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	2200      	movs	r2, #0
 80055d6:	735a      	strb	r2, [r3, #13]
 80055d8:	2200      	movs	r2, #0
 80055da:	739a      	strb	r2, [r3, #14]
 80055dc:	2200      	movs	r2, #0
 80055de:	73da      	strb	r2, [r3, #15]
 80055e0:	2200      	movs	r2, #0
 80055e2:	741a      	strb	r2, [r3, #16]
    control_packet_set_flags(result->control_packet, 0x00);
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	2100      	movs	r1, #0
 80055ea:	4618      	mov	r0, r3
 80055ec:	f7fe ff0b 	bl	8004406 <control_packet_set_flags>
    control_packet_set_flags(result->control_packet, result->dup == true ? (0x01 << 3) : control_packet_get_flags(result->control_packet) );
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681c      	ldr	r4, [r3, #0]
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	791b      	ldrb	r3, [r3, #4]
 80055f8:	2b01      	cmp	r3, #1
 80055fa:	d006      	beq.n	800560a <publish_init+0xaa>
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4618      	mov	r0, r3
 8005602:	f7fe feef 	bl	80043e4 <control_packet_get_flags>
 8005606:	4603      	mov	r3, r0
 8005608:	e000      	b.n	800560c <publish_init+0xac>
 800560a:	2308      	movs	r3, #8
 800560c:	4619      	mov	r1, r3
 800560e:	4620      	mov	r0, r4
 8005610:	f7fe fef9 	bl	8004406 <control_packet_set_flags>
    control_packet_set_flags(result->control_packet, control_packet_get_flags(result->control_packet) | ( (result->qos_level & 0x03) << 1 ) );
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681c      	ldr	r4, [r3, #0]
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4618      	mov	r0, r3
 800561e:	f7fe fee1 	bl	80043e4 <control_packet_get_flags>
 8005622:	4603      	mov	r3, r0
 8005624:	b25a      	sxtb	r2, r3
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	795b      	ldrb	r3, [r3, #5]
 800562a:	005b      	lsls	r3, r3, #1
 800562c:	b25b      	sxtb	r3, r3
 800562e:	f003 0306 	and.w	r3, r3, #6
 8005632:	b25b      	sxtb	r3, r3
 8005634:	4313      	orrs	r3, r2
 8005636:	b25b      	sxtb	r3, r3
 8005638:	b2db      	uxtb	r3, r3
 800563a:	4619      	mov	r1, r3
 800563c:	4620      	mov	r0, r4
 800563e:	f7fe fee2 	bl	8004406 <control_packet_set_flags>
    control_packet_set_flags(result->control_packet, result->retain ? control_packet_get_flags(result->control_packet) | 0x01 : control_packet_get_flags(result->control_packet));
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681c      	ldr	r4, [r3, #0]
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	799b      	ldrb	r3, [r3, #6]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d009      	beq.n	8005662 <publish_init+0x102>
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4618      	mov	r0, r3
 8005654:	f7fe fec6 	bl	80043e4 <control_packet_get_flags>
 8005658:	4603      	mov	r3, r0
 800565a:	f043 0301 	orr.w	r3, r3, #1
 800565e:	b2db      	uxtb	r3, r3
 8005660:	e005      	b.n	800566e <publish_init+0x10e>
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4618      	mov	r0, r3
 8005668:	f7fe febc 	bl	80043e4 <control_packet_get_flags>
 800566c:	4603      	mov	r3, r0
 800566e:	4619      	mov	r1, r3
 8005670:	4620      	mov	r0, r4
 8005672:	f7fe fec8 	bl	8004406 <control_packet_set_flags>

    return result;
 8005676:	68fb      	ldr	r3, [r7, #12]
}
 8005678:	4618      	mov	r0, r3
 800567a:	3714      	adds	r7, #20
 800567c:	46bd      	mov	sp, r7
 800567e:	bd90      	pop	{r4, r7, pc}
 8005680:	080118f9 	.word	0x080118f9
 8005684:	08011901 	.word	0x08011901

08005688 <publish_destroy>:

void publish_destroy(publish* publish){
 8005688:	b580      	push	{r7, lr}
 800568a:	b082      	sub	sp, #8
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
	if( publish == NULL ) return;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d020      	beq.n	80056d8 <publish_destroy+0x50>

	publish->control_packet = NULL;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2200      	movs	r2, #0
 800569a:	701a      	strb	r2, [r3, #0]
 800569c:	2200      	movs	r2, #0
 800569e:	705a      	strb	r2, [r3, #1]
 80056a0:	2200      	movs	r2, #0
 80056a2:	709a      	strb	r2, [r3, #2]
 80056a4:	2200      	movs	r2, #0
 80056a6:	70da      	strb	r2, [r3, #3]
	publish->topic_name = NULL;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2200      	movs	r2, #0
 80056ac:	71da      	strb	r2, [r3, #7]
 80056ae:	2200      	movs	r2, #0
 80056b0:	721a      	strb	r2, [r3, #8]
 80056b2:	2200      	movs	r2, #0
 80056b4:	725a      	strb	r2, [r3, #9]
 80056b6:	2200      	movs	r2, #0
 80056b8:	729a      	strb	r2, [r3, #10]
	publish->payload = NULL;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2200      	movs	r2, #0
 80056be:	735a      	strb	r2, [r3, #13]
 80056c0:	2200      	movs	r2, #0
 80056c2:	739a      	strb	r2, [r3, #14]
 80056c4:	2200      	movs	r2, #0
 80056c6:	73da      	strb	r2, [r3, #15]
 80056c8:	2200      	movs	r2, #0
 80056ca:	741a      	strb	r2, [r3, #16]

	free(publish);
 80056cc:	6878      	ldr	r0, [r7, #4]
 80056ce:	f007 f893 	bl	800c7f8 <free>
	publish = NULL;
 80056d2:	2300      	movs	r3, #0
 80056d4:	607b      	str	r3, [r7, #4]
 80056d6:	e000      	b.n	80056da <publish_destroy+0x52>
	if( publish == NULL ) return;
 80056d8:	bf00      	nop
}
 80056da:	3708      	adds	r7, #8
 80056dc:	46bd      	mov	sp, r7
 80056de:	bd80      	pop	{r7, pc}

080056e0 <publish_set_topic_name>:

char* publish_get_topic_name(publish* publish){
	return publish == NULL ? NULL : publish->topic_name;
}

void publish_set_topic_name(publish* publish, char* topic_name){
 80056e0:	b480      	push	{r7}
 80056e2:	b083      	sub	sp, #12
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
 80056e8:	6039      	str	r1, [r7, #0]
	if( publish == NULL ) return;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d004      	beq.n	80056fa <publish_set_topic_name+0x1a>
	publish->topic_name = topic_name;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	683a      	ldr	r2, [r7, #0]
 80056f4:	f8c3 2007 	str.w	r2, [r3, #7]
 80056f8:	e000      	b.n	80056fc <publish_set_topic_name+0x1c>
	if( publish == NULL ) return;
 80056fa:	bf00      	nop
}
 80056fc:	370c      	adds	r7, #12
 80056fe:	46bd      	mov	sp, r7
 8005700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005704:	4770      	bx	lr

08005706 <publish_get_packet_identifier>:

unsigned short publish_get_packet_identifier(publish* publish){
 8005706:	b480      	push	{r7}
 8005708:	b083      	sub	sp, #12
 800570a:	af00      	add	r7, sp, #0
 800570c:	6078      	str	r0, [r7, #4]
	return publish == NULL ? 0 : publish->packet_identifier;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d004      	beq.n	800571e <publish_get_packet_identifier+0x18>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 800571a:	b29b      	uxth	r3, r3
 800571c:	e000      	b.n	8005720 <publish_get_packet_identifier+0x1a>
 800571e:	2300      	movs	r3, #0
}
 8005720:	4618      	mov	r0, r3
 8005722:	370c      	adds	r7, #12
 8005724:	46bd      	mov	sp, r7
 8005726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572a:	4770      	bx	lr

0800572c <publish_set_packet_identifier>:

void publish_set_packet_identifier(publish* publish, unsigned short packet_identifier){
 800572c:	b480      	push	{r7}
 800572e:	b083      	sub	sp, #12
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
 8005734:	460b      	mov	r3, r1
 8005736:	807b      	strh	r3, [r7, #2]
	if( publish == NULL ) return;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d004      	beq.n	8005748 <publish_set_packet_identifier+0x1c>
	publish->packet_identifier = packet_identifier;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	887a      	ldrh	r2, [r7, #2]
 8005742:	f8a3 200b 	strh.w	r2, [r3, #11]
 8005746:	e000      	b.n	800574a <publish_set_packet_identifier+0x1e>
	if( publish == NULL ) return;
 8005748:	bf00      	nop
}
 800574a:	370c      	adds	r7, #12
 800574c:	46bd      	mov	sp, r7
 800574e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005752:	4770      	bx	lr

08005754 <publish_set_payload>:

char* publish_get_payload(publish* publish){
	return publish == NULL ? NULL : publish->payload;
}

void publish_set_payload(publish* publish, char* payload){
 8005754:	b480      	push	{r7}
 8005756:	b083      	sub	sp, #12
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
 800575c:	6039      	str	r1, [r7, #0]
	if( publish == NULL ) return;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d004      	beq.n	800576e <publish_set_payload+0x1a>
	publish->payload = payload;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	683a      	ldr	r2, [r7, #0]
 8005768:	f8c3 200d 	str.w	r2, [r3, #13]
 800576c:	e000      	b.n	8005770 <publish_set_payload+0x1c>
	if( publish == NULL ) return;
 800576e:	bf00      	nop
}
 8005770:	370c      	adds	r7, #12
 8005772:	46bd      	mov	sp, r7
 8005774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005778:	4770      	bx	lr
	...

0800577c <publish_to_bytes>:

bytes* publish_to_bytes(publish* publish){
 800577c:	b5b0      	push	{r4, r5, r7, lr}
 800577e:	b08a      	sub	sp, #40	; 0x28
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
	if( publish == NULL ) return NULL;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d101      	bne.n	800578e <publish_to_bytes+0x12>
 800578a:	2300      	movs	r3, #0
 800578c:	e093      	b.n	80058b6 <publish_to_bytes+0x13a>

	bytes* variable_header = bytes_init();
 800578e:	f7fe f89d 	bl	80038cc <bytes_init>
 8005792:	6278      	str	r0, [r7, #36]	; 0x24
	if( ! string_util_is_empty(publish->topic_name) ){
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	f8d3 3007 	ldr.w	r3, [r3, #7]
 800579a:	4618      	mov	r0, r3
 800579c:	f002 fb4c 	bl	8007e38 <string_util_is_empty>
 80057a0:	4603      	mov	r3, r0
 80057a2:	f083 0301 	eor.w	r3, r3, #1
 80057a6:	b2db      	uxtb	r3, r3
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d00d      	beq.n	80057c8 <publish_to_bytes+0x4c>
		bytes* topic_name_field = packet_util_build_bytes(publish->topic_name);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	f8d3 3007 	ldr.w	r3, [r3, #7]
 80057b2:	4618      	mov	r0, r3
 80057b4:	f7ff fac4 	bl	8004d40 <packet_util_build_bytes>
 80057b8:	6238      	str	r0, [r7, #32]
		bytes_concat(variable_header, topic_name_field);
 80057ba:	6a39      	ldr	r1, [r7, #32]
 80057bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80057be:	f7fe f960 	bl	8003a82 <bytes_concat>
		bytes_destroy(topic_name_field);
 80057c2:	6a38      	ldr	r0, [r7, #32]
 80057c4:	f7fe f8aa 	bl	800391c <bytes_destroy>
	}

	if( publish->qos_level == PUBLISH_QOS_LEVEL_1 || publish->qos_level == PUBLISH_QOS_LEVEL_2 ) {
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	795a      	ldrb	r2, [r3, #5]
 80057cc:	4b3c      	ldr	r3, [pc, #240]	; (80058c0 <publish_to_bytes+0x144>)
 80057ce:	781b      	ldrb	r3, [r3, #0]
 80057d0:	429a      	cmp	r2, r3
 80057d2:	d005      	beq.n	80057e0 <publish_to_bytes+0x64>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	795a      	ldrb	r2, [r3, #5]
 80057d8:	4b3a      	ldr	r3, [pc, #232]	; (80058c4 <publish_to_bytes+0x148>)
 80057da:	781b      	ldrb	r3, [r3, #0]
 80057dc:	429a      	cmp	r2, r3
 80057de:	d11f      	bne.n	8005820 <publish_to_bytes+0xa4>
		bytes* packet_identifier_field = bytes_init();
 80057e0:	f7fe f874 	bl	80038cc <bytes_init>
 80057e4:	61f8      	str	r0, [r7, #28]
	    unsigned char msb_packet_identifier = (unsigned char) ( (0xFF00 & publish->packet_identifier) >> 8 );
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 80057ec:	b29b      	uxth	r3, r3
 80057ee:	0a1b      	lsrs	r3, r3, #8
 80057f0:	b29b      	uxth	r3, r3
 80057f2:	76fb      	strb	r3, [r7, #27]
	    unsigned char lsb_packet_identifier = (unsigned char) ( 0x00FF & publish->packet_identifier);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 80057fa:	b29b      	uxth	r3, r3
 80057fc:	76bb      	strb	r3, [r7, #26]
	    bytes_push_back(packet_identifier_field, msb_packet_identifier);
 80057fe:	7efb      	ldrb	r3, [r7, #27]
 8005800:	4619      	mov	r1, r3
 8005802:	69f8      	ldr	r0, [r7, #28]
 8005804:	f7fe f901 	bl	8003a0a <bytes_push_back>
	    bytes_push_back(packet_identifier_field, lsb_packet_identifier);
 8005808:	7ebb      	ldrb	r3, [r7, #26]
 800580a:	4619      	mov	r1, r3
 800580c:	69f8      	ldr	r0, [r7, #28]
 800580e:	f7fe f8fc 	bl	8003a0a <bytes_push_back>
	    bytes_concat(variable_header, packet_identifier_field);
 8005812:	69f9      	ldr	r1, [r7, #28]
 8005814:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005816:	f7fe f934 	bl	8003a82 <bytes_concat>
	    bytes_destroy(packet_identifier_field);
 800581a:	69f8      	ldr	r0, [r7, #28]
 800581c:	f7fe f87e 	bl	800391c <bytes_destroy>
	}

	// The length of the payload can be calculated by subtracting the length of the variable header from the Remaining Length field that is in the Fixed Header
	// so there's no need to add the field size
	bytes* payload = bytes_init();
 8005820:	f7fe f854 	bl	80038cc <bytes_init>
 8005824:	6178      	str	r0, [r7, #20]
	if ( ! string_util_is_empty(publish->payload) ){
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	f8d3 300d 	ldr.w	r3, [r3, #13]
 800582c:	4618      	mov	r0, r3
 800582e:	f002 fb03 	bl	8007e38 <string_util_is_empty>
 8005832:	4603      	mov	r3, r0
 8005834:	f083 0301 	eor.w	r3, r3, #1
 8005838:	b2db      	uxtb	r3, r3
 800583a:	2b00      	cmp	r3, #0
 800583c:	d017      	beq.n	800586e <publish_to_bytes+0xf2>
		unsigned int length = string_util_length(publish->payload);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	f8d3 300d 	ldr.w	r3, [r3, #13]
 8005844:	4618      	mov	r0, r3
 8005846:	f002 fb6e 	bl	8007f26 <string_util_length>
 800584a:	6138      	str	r0, [r7, #16]
		for(register int i = 0; i < length; i++) bytes_push_back(payload, (unsigned char) publish->payload[i] );
 800584c:	2400      	movs	r4, #0
 800584e:	e00a      	b.n	8005866 <publish_to_bytes+0xea>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	f8d3 300d 	ldr.w	r3, [r3, #13]
 8005856:	4622      	mov	r2, r4
 8005858:	4413      	add	r3, r2
 800585a:	781b      	ldrb	r3, [r3, #0]
 800585c:	4619      	mov	r1, r3
 800585e:	6978      	ldr	r0, [r7, #20]
 8005860:	f7fe f8d3 	bl	8003a0a <bytes_push_back>
 8005864:	3401      	adds	r4, #1
 8005866:	4622      	mov	r2, r4
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	4293      	cmp	r3, r2
 800586c:	d8f0      	bhi.n	8005850 <publish_to_bytes+0xd4>
		//bytes_concat(payload, packet_util_build_bytes(publish->payload));
	}

	control_packet_set_remaining_length(publish->control_packet, (long int) bytes_get_size(variable_header) + bytes_get_size(payload) );
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681c      	ldr	r4, [r3, #0]
 8005872:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005874:	f7fe f8f3 	bl	8003a5e <bytes_get_size>
 8005878:	4605      	mov	r5, r0
 800587a:	6978      	ldr	r0, [r7, #20]
 800587c:	f7fe f8ef 	bl	8003a5e <bytes_get_size>
 8005880:	4603      	mov	r3, r0
 8005882:	442b      	add	r3, r5
 8005884:	4619      	mov	r1, r3
 8005886:	4620      	mov	r0, r4
 8005888:	f7fe fdd0 	bl	800442c <control_packet_set_remaining_length>

	bytes* result = control_packet_to_bytes(publish->control_packet);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4618      	mov	r0, r3
 8005892:	f7fe fdde 	bl	8004452 <control_packet_to_bytes>
 8005896:	60f8      	str	r0, [r7, #12]
	bytes_concat(result, variable_header);
 8005898:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800589a:	68f8      	ldr	r0, [r7, #12]
 800589c:	f7fe f8f1 	bl	8003a82 <bytes_concat>
	bytes_concat(result, payload);
 80058a0:	6979      	ldr	r1, [r7, #20]
 80058a2:	68f8      	ldr	r0, [r7, #12]
 80058a4:	f7fe f8ed 	bl	8003a82 <bytes_concat>

	bytes_destroy(variable_header);
 80058a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80058aa:	f7fe f837 	bl	800391c <bytes_destroy>
	bytes_destroy(payload);
 80058ae:	6978      	ldr	r0, [r7, #20]
 80058b0:	f7fe f834 	bl	800391c <bytes_destroy>

	return result;
 80058b4:	68fb      	ldr	r3, [r7, #12]
}
 80058b6:	4618      	mov	r0, r3
 80058b8:	3728      	adds	r7, #40	; 0x28
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bdb0      	pop	{r4, r5, r7, pc}
 80058be:	bf00      	nop
 80058c0:	200000d0 	.word	0x200000d0
 80058c4:	200000d1 	.word	0x200000d1

080058c8 <publish_service_init>:
#include "../../Inc/mqtt_client/publish_service.h"


publish_service* publish_service_init(control_packet_proxy* control_packet_proxy){
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b084      	sub	sp, #16
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
	if( control_packet_proxy == NULL ) return NULL;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d101      	bne.n	80058da <publish_service_init+0x12>
 80058d6:	2300      	movs	r3, #0
 80058d8:	e008      	b.n	80058ec <publish_service_init+0x24>
	publish_service* result = (publish_service*) malloc(sizeof(publish_service));
 80058da:	2004      	movs	r0, #4
 80058dc:	f006 ff84 	bl	800c7e8 <malloc>
 80058e0:	4603      	mov	r3, r0
 80058e2:	60fb      	str	r3, [r7, #12]
	result->control_packet_proxy = control_packet_proxy;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	687a      	ldr	r2, [r7, #4]
 80058e8:	601a      	str	r2, [r3, #0]
	return result;
 80058ea:	68fb      	ldr	r3, [r7, #12]
}
 80058ec:	4618      	mov	r0, r3
 80058ee:	3710      	adds	r7, #16
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bd80      	pop	{r7, pc}

080058f4 <publish_service_destroy>:

void publish_service_destroy(publish_service* publish_service){
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b082      	sub	sp, #8
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
	if( publish_service == NULL ) return;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d00e      	beq.n	8005920 <publish_service_destroy+0x2c>
	publish_service->control_packet_proxy = NULL;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2200      	movs	r2, #0
 8005906:	701a      	strb	r2, [r3, #0]
 8005908:	2200      	movs	r2, #0
 800590a:	705a      	strb	r2, [r3, #1]
 800590c:	2200      	movs	r2, #0
 800590e:	709a      	strb	r2, [r3, #2]
 8005910:	2200      	movs	r2, #0
 8005912:	70da      	strb	r2, [r3, #3]
	free(publish_service);
 8005914:	6878      	ldr	r0, [r7, #4]
 8005916:	f006 ff6f 	bl	800c7f8 <free>
	publish_service = NULL;
 800591a:	2300      	movs	r3, #0
 800591c:	607b      	str	r3, [r7, #4]
 800591e:	e000      	b.n	8005922 <publish_service_destroy+0x2e>
	if( publish_service == NULL ) return;
 8005920:	bf00      	nop
}
 8005922:	3708      	adds	r7, #8
 8005924:	46bd      	mov	sp, r7
 8005926:	bd80      	pop	{r7, pc}

08005928 <publish_service_create>:

publish* publish_service_create(publish_service* publish_service){
 8005928:	b580      	push	{r7, lr}
 800592a:	b086      	sub	sp, #24
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
	 bool           dup         = false;
 8005930:	2300      	movs	r3, #0
 8005932:	74fb      	strb	r3, [r7, #19]
	 session*       session     = session_get_instance();
 8005934:	f000 f87a 	bl	8005a2c <session_get_instance>
 8005938:	60f8      	str	r0, [r7, #12]
	 unsigned char	qos         = session_get_qos(session);
 800593a:	68f8      	ldr	r0, [r7, #12]
 800593c:	f000 f9ec 	bl	8005d18 <session_get_qos>
 8005940:	4603      	mov	r3, r0
 8005942:	72fb      	strb	r3, [r7, #11]
	 bool           retain      = session_is_retain(session);
 8005944:	68f8      	ldr	r0, [r7, #12]
 8005946:	f000 fa0e 	bl	8005d66 <session_is_retain>
 800594a:	4603      	mov	r3, r0
 800594c:	72bb      	strb	r3, [r7, #10]

	 publish* publish = NULL;
 800594e:	2300      	movs	r3, #0
 8005950:	617b      	str	r3, [r7, #20]
	 if( qos == PUBLISH_QOS_LEVEL_0 ){
 8005952:	4b24      	ldr	r3, [pc, #144]	; (80059e4 <publish_service_create+0xbc>)
 8005954:	781b      	ldrb	r3, [r3, #0]
 8005956:	7afa      	ldrb	r2, [r7, #11]
 8005958:	429a      	cmp	r2, r3
 800595a:	d108      	bne.n	800596e <publish_service_create+0x46>
		 publish = publish_init(dup, PUBLISH_QOS_LEVEL_0, retain);
 800595c:	4b21      	ldr	r3, [pc, #132]	; (80059e4 <publish_service_create+0xbc>)
 800595e:	7819      	ldrb	r1, [r3, #0]
 8005960:	7aba      	ldrb	r2, [r7, #10]
 8005962:	7cfb      	ldrb	r3, [r7, #19]
 8005964:	4618      	mov	r0, r3
 8005966:	f7ff fdfb 	bl	8005560 <publish_init>
 800596a:	6178      	str	r0, [r7, #20]
 800596c:	e035      	b.n	80059da <publish_service_create+0xb2>
	 } else if ( qos == PUBLISH_QOS_LEVEL_1 ){
 800596e:	4b1e      	ldr	r3, [pc, #120]	; (80059e8 <publish_service_create+0xc0>)
 8005970:	781b      	ldrb	r3, [r3, #0]
 8005972:	7afa      	ldrb	r2, [r7, #11]
 8005974:	429a      	cmp	r2, r3
 8005976:	d111      	bne.n	800599c <publish_service_create+0x74>
		 publish = publish_init(dup, PUBLISH_QOS_LEVEL_1, retain);
 8005978:	4b1b      	ldr	r3, [pc, #108]	; (80059e8 <publish_service_create+0xc0>)
 800597a:	7819      	ldrb	r1, [r3, #0]
 800597c:	7aba      	ldrb	r2, [r7, #10]
 800597e:	7cfb      	ldrb	r3, [r7, #19]
 8005980:	4618      	mov	r0, r3
 8005982:	f7ff fded 	bl	8005560 <publish_init>
 8005986:	6178      	str	r0, [r7, #20]
		 publish_set_packet_identifier(publish, session_generate_packet_identifier(session));
 8005988:	68f8      	ldr	r0, [r7, #12]
 800598a:	f000 fb1b 	bl	8005fc4 <session_generate_packet_identifier>
 800598e:	4603      	mov	r3, r0
 8005990:	b29b      	uxth	r3, r3
 8005992:	4619      	mov	r1, r3
 8005994:	6978      	ldr	r0, [r7, #20]
 8005996:	f7ff fec9 	bl	800572c <publish_set_packet_identifier>
 800599a:	e01e      	b.n	80059da <publish_service_create+0xb2>
	 } else if ( qos == PUBLISH_QOS_LEVEL_2 ){
 800599c:	4b13      	ldr	r3, [pc, #76]	; (80059ec <publish_service_create+0xc4>)
 800599e:	781b      	ldrb	r3, [r3, #0]
 80059a0:	7afa      	ldrb	r2, [r7, #11]
 80059a2:	429a      	cmp	r2, r3
 80059a4:	d111      	bne.n	80059ca <publish_service_create+0xa2>
 		 publish = publish_init(dup, PUBLISH_QOS_LEVEL_2, retain);
 80059a6:	4b11      	ldr	r3, [pc, #68]	; (80059ec <publish_service_create+0xc4>)
 80059a8:	7819      	ldrb	r1, [r3, #0]
 80059aa:	7aba      	ldrb	r2, [r7, #10]
 80059ac:	7cfb      	ldrb	r3, [r7, #19]
 80059ae:	4618      	mov	r0, r3
 80059b0:	f7ff fdd6 	bl	8005560 <publish_init>
 80059b4:	6178      	str	r0, [r7, #20]
 		 publish_set_packet_identifier(publish, session_generate_packet_identifier(session));
 80059b6:	68f8      	ldr	r0, [r7, #12]
 80059b8:	f000 fb04 	bl	8005fc4 <session_generate_packet_identifier>
 80059bc:	4603      	mov	r3, r0
 80059be:	b29b      	uxth	r3, r3
 80059c0:	4619      	mov	r1, r3
 80059c2:	6978      	ldr	r0, [r7, #20]
 80059c4:	f7ff feb2 	bl	800572c <publish_set_packet_identifier>
 80059c8:	e007      	b.n	80059da <publish_service_create+0xb2>
	 } else {
		 publish = publish_init(dup, PUBLISH_QOS_LEVEL_0, retain);
 80059ca:	4b06      	ldr	r3, [pc, #24]	; (80059e4 <publish_service_create+0xbc>)
 80059cc:	7819      	ldrb	r1, [r3, #0]
 80059ce:	7aba      	ldrb	r2, [r7, #10]
 80059d0:	7cfb      	ldrb	r3, [r7, #19]
 80059d2:	4618      	mov	r0, r3
 80059d4:	f7ff fdc4 	bl	8005560 <publish_init>
 80059d8:	6178      	str	r0, [r7, #20]
	 }

	 return publish;
 80059da:	697b      	ldr	r3, [r7, #20]
}
 80059dc:	4618      	mov	r0, r3
 80059de:	3718      	adds	r7, #24
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bd80      	pop	{r7, pc}
 80059e4:	20000b0c 	.word	0x20000b0c
 80059e8:	200000d0 	.word	0x200000d0
 80059ec:	200000d1 	.word	0x200000d1

080059f0 <publish_service_write>:
	publish* publish = bytes_is_empty(bytes) ? NULL : assembler_build_to_publish(bytes);
	bytes_destroy(bytes);
	return publish;
}

void publish_service_write(publish_service* publish_service, publish* publish){
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b084      	sub	sp, #16
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
 80059f8:	6039      	str	r1, [r7, #0]
	if ( publish_service == NULL ||  publish == NULL ) return;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d010      	beq.n	8005a22 <publish_service_write+0x32>
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d00d      	beq.n	8005a22 <publish_service_write+0x32>
	bytes* bytes = publish_to_bytes(publish);
 8005a06:	6838      	ldr	r0, [r7, #0]
 8005a08:	f7ff feb8 	bl	800577c <publish_to_bytes>
 8005a0c:	60f8      	str	r0, [r7, #12]
	control_packet_proxy_write(publish_service->control_packet_proxy, bytes);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	68f9      	ldr	r1, [r7, #12]
 8005a14:	4618      	mov	r0, r3
 8005a16:	f7fe fdd8 	bl	80045ca <control_packet_proxy_write>
	bytes_destroy(bytes);
 8005a1a:	68f8      	ldr	r0, [r7, #12]
 8005a1c:	f7fd ff7e 	bl	800391c <bytes_destroy>
 8005a20:	e000      	b.n	8005a24 <publish_service_write+0x34>
	if ( publish_service == NULL ||  publish == NULL ) return;
 8005a22:	bf00      	nop
}
 8005a24:	3710      	adds	r7, #16
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bd80      	pop	{r7, pc}
	...

08005a2c <session_get_instance>:

unsigned char SESSION_QOS_LEVEL_1 = 0x01;

unsigned char SESSION_QOS_LEVEL_2 = 0x02;

session* session_get_instance(){
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	af00      	add	r7, sp, #0
	if( session_instance == NULL ){
 8005a30:	4b59      	ldr	r3, [pc, #356]	; (8005b98 <session_get_instance+0x16c>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	f040 80ab 	bne.w	8005b90 <session_get_instance+0x164>
		session_instance = (session*) malloc(sizeof(session));
 8005a3a:	2034      	movs	r0, #52	; 0x34
 8005a3c:	f006 fed4 	bl	800c7e8 <malloc>
 8005a40:	4603      	mov	r3, r0
 8005a42:	461a      	mov	r2, r3
 8005a44:	4b54      	ldr	r3, [pc, #336]	; (8005b98 <session_get_instance+0x16c>)
 8005a46:	601a      	str	r2, [r3, #0]
		session_instance->id = NULL;
 8005a48:	4b53      	ldr	r3, [pc, #332]	; (8005b98 <session_get_instance+0x16c>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	701a      	strb	r2, [r3, #0]
 8005a50:	2200      	movs	r2, #0
 8005a52:	705a      	strb	r2, [r3, #1]
 8005a54:	2200      	movs	r2, #0
 8005a56:	709a      	strb	r2, [r3, #2]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	70da      	strb	r2, [r3, #3]
		session_instance->clean = false;
 8005a5c:	4b4e      	ldr	r3, [pc, #312]	; (8005b98 <session_get_instance+0x16c>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	2200      	movs	r2, #0
 8005a62:	711a      	strb	r2, [r3, #4]
		session_instance->host = NULL;
 8005a64:	4b4c      	ldr	r3, [pc, #304]	; (8005b98 <session_get_instance+0x16c>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	715a      	strb	r2, [r3, #5]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	719a      	strb	r2, [r3, #6]
 8005a70:	2200      	movs	r2, #0
 8005a72:	71da      	strb	r2, [r3, #7]
 8005a74:	2200      	movs	r2, #0
 8005a76:	721a      	strb	r2, [r3, #8]
		session_instance->port = 1883;
 8005a78:	4b47      	ldr	r3, [pc, #284]	; (8005b98 <session_get_instance+0x16c>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	f042 025b 	orr.w	r2, r2, #91	; 0x5b
 8005a82:	725a      	strb	r2, [r3, #9]
 8005a84:	2200      	movs	r2, #0
 8005a86:	f042 0207 	orr.w	r2, r2, #7
 8005a8a:	729a      	strb	r2, [r3, #10]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	72da      	strb	r2, [r3, #11]
 8005a90:	2200      	movs	r2, #0
 8005a92:	731a      	strb	r2, [r3, #12]
		session_instance->keep_alive = 60;
 8005a94:	4b40      	ldr	r3, [pc, #256]	; (8005b98 <session_get_instance+0x16c>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	f042 023c 	orr.w	r2, r2, #60	; 0x3c
 8005a9e:	735a      	strb	r2, [r3, #13]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	739a      	strb	r2, [r3, #14]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	73da      	strb	r2, [r3, #15]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	741a      	strb	r2, [r3, #16]
		session_instance->qos = SESSION_QOS_LEVEL_0;
 8005aac:	4b3a      	ldr	r3, [pc, #232]	; (8005b98 <session_get_instance+0x16c>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a3a      	ldr	r2, [pc, #232]	; (8005b9c <session_get_instance+0x170>)
 8005ab2:	7812      	ldrb	r2, [r2, #0]
 8005ab4:	745a      	strb	r2, [r3, #17]
		session_instance->retain = false;
 8005ab6:	4b38      	ldr	r3, [pc, #224]	; (8005b98 <session_get_instance+0x16c>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	2200      	movs	r2, #0
 8005abc:	749a      	strb	r2, [r3, #18]
		session_instance->time_last_package = clock() / 1000;
 8005abe:	f006 fe29 	bl	800c714 <clock>
 8005ac2:	4601      	mov	r1, r0
 8005ac4:	4b34      	ldr	r3, [pc, #208]	; (8005b98 <session_get_instance+0x16c>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a35      	ldr	r2, [pc, #212]	; (8005ba0 <session_get_instance+0x174>)
 8005aca:	fba2 1201 	umull	r1, r2, r2, r1
 8005ace:	0992      	lsrs	r2, r2, #6
 8005ad0:	f8c3 2013 	str.w	r2, [r3, #19]
		session_instance->connected = false;
 8005ad4:	4b30      	ldr	r3, [pc, #192]	; (8005b98 <session_get_instance+0x16c>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	75da      	strb	r2, [r3, #23]
		session_instance->username = NULL;
 8005adc:	4b2e      	ldr	r3, [pc, #184]	; (8005b98 <session_get_instance+0x16c>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	761a      	strb	r2, [r3, #24]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	765a      	strb	r2, [r3, #25]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	769a      	strb	r2, [r3, #26]
 8005aec:	2200      	movs	r2, #0
 8005aee:	76da      	strb	r2, [r3, #27]
		session_instance->password = NULL;
 8005af0:	4b29      	ldr	r3, [pc, #164]	; (8005b98 <session_get_instance+0x16c>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	2200      	movs	r2, #0
 8005af6:	771a      	strb	r2, [r3, #28]
 8005af8:	2200      	movs	r2, #0
 8005afa:	775a      	strb	r2, [r3, #29]
 8005afc:	2200      	movs	r2, #0
 8005afe:	779a      	strb	r2, [r3, #30]
 8005b00:	2200      	movs	r2, #0
 8005b02:	77da      	strb	r2, [r3, #31]

		session_instance->unacknowledged_publish = NULL;
 8005b04:	4b24      	ldr	r3, [pc, #144]	; (8005b98 <session_get_instance+0x16c>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	f883 2020 	strb.w	r2, [r3, #32]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8005b14:	2200      	movs	r2, #0
 8005b16:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		session_instance->unacknowledged_pub_rel = NULL;
 8005b20:	4b1d      	ldr	r3, [pc, #116]	; (8005b98 <session_get_instance+0x16c>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	2200      	movs	r2, #0
 8005b26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 8005b30:	2200      	movs	r2, #0
 8005b32:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 8005b36:	2200      	movs	r2, #0
 8005b38:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		session_instance->unacknowledged_pub_rec = NULL;
 8005b3c:	4b16      	ldr	r3, [pc, #88]	; (8005b98 <session_get_instance+0x16c>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	2200      	movs	r2, #0
 8005b42:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8005b46:	2200      	movs	r2, #0
 8005b48:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 8005b52:	2200      	movs	r2, #0
 8005b54:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

		session_instance->packet_identifier = 0;
 8005b58:	4b0f      	ldr	r3, [pc, #60]	; (8005b98 <session_get_instance+0x16c>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8005b62:	2200      	movs	r2, #0
 8005b64:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 8005b68:	2200      	movs	r2, #0
 8005b6a:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 8005b6e:	2200      	movs	r2, #0
 8005b70:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		session_instance->last_packet_identifier = 0;
 8005b74:	4b08      	ldr	r3, [pc, #32]	; (8005b98 <session_get_instance+0x16c>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8005b7e:	2200      	movs	r2, #0
 8005b80:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8005b84:	2200      	movs	r2, #0
 8005b86:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	}

	return session_instance;
 8005b90:	4b01      	ldr	r3, [pc, #4]	; (8005b98 <session_get_instance+0x16c>)
 8005b92:	681b      	ldr	r3, [r3, #0]
}
 8005b94:	4618      	mov	r0, r3
 8005b96:	bd80      	pop	{r7, pc}
 8005b98:	20000b10 	.word	0x20000b10
 8005b9c:	20000b14 	.word	0x20000b14
 8005ba0:	10624dd3 	.word	0x10624dd3

08005ba4 <session_get_id>:
	session_reset(session);
	free(session);
	session = NULL;
}

char* session_get_id(session* session){
 8005ba4:	b480      	push	{r7}
 8005ba6:	b083      	sub	sp, #12
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
	return session == NULL ? NULL : session->id;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d002      	beq.n	8005bb8 <session_get_id+0x14>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	e000      	b.n	8005bba <session_get_id+0x16>
 8005bb8:	2300      	movs	r3, #0
}
 8005bba:	4618      	mov	r0, r3
 8005bbc:	370c      	adds	r7, #12
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc4:	4770      	bx	lr

08005bc6 <session_set_id>:

void session_set_id(session* session, char* id){
 8005bc6:	b480      	push	{r7}
 8005bc8:	b083      	sub	sp, #12
 8005bca:	af00      	add	r7, sp, #0
 8005bcc:	6078      	str	r0, [r7, #4]
 8005bce:	6039      	str	r1, [r7, #0]
	if( session == NULL ) return;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d003      	beq.n	8005bde <session_set_id+0x18>
	session->id = id;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	683a      	ldr	r2, [r7, #0]
 8005bda:	601a      	str	r2, [r3, #0]
 8005bdc:	e000      	b.n	8005be0 <session_set_id+0x1a>
	if( session == NULL ) return;
 8005bde:	bf00      	nop
}
 8005be0:	370c      	adds	r7, #12
 8005be2:	46bd      	mov	sp, r7
 8005be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be8:	4770      	bx	lr

08005bea <session_is_clean>:

bool session_is_clean(session* session){
 8005bea:	b480      	push	{r7}
 8005bec:	b083      	sub	sp, #12
 8005bee:	af00      	add	r7, sp, #0
 8005bf0:	6078      	str	r0, [r7, #4]
	return session == NULL ? false : session->clean;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d005      	beq.n	8005c04 <session_is_clean+0x1a>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	791b      	ldrb	r3, [r3, #4]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d001      	beq.n	8005c04 <session_is_clean+0x1a>
 8005c00:	2301      	movs	r3, #1
 8005c02:	e000      	b.n	8005c06 <session_is_clean+0x1c>
 8005c04:	2300      	movs	r3, #0
}
 8005c06:	4618      	mov	r0, r3
 8005c08:	370c      	adds	r7, #12
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c10:	4770      	bx	lr

08005c12 <session_set_clean>:

void session_set_clean(session* session, bool clean){
 8005c12:	b480      	push	{r7}
 8005c14:	b083      	sub	sp, #12
 8005c16:	af00      	add	r7, sp, #0
 8005c18:	6078      	str	r0, [r7, #4]
 8005c1a:	460b      	mov	r3, r1
 8005c1c:	70fb      	strb	r3, [r7, #3]
	if( session == NULL ) return;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d003      	beq.n	8005c2c <session_set_clean+0x1a>
	session->clean = clean;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	78fa      	ldrb	r2, [r7, #3]
 8005c28:	711a      	strb	r2, [r3, #4]
 8005c2a:	e000      	b.n	8005c2e <session_set_clean+0x1c>
	if( session == NULL ) return;
 8005c2c:	bf00      	nop
}
 8005c2e:	370c      	adds	r7, #12
 8005c30:	46bd      	mov	sp, r7
 8005c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c36:	4770      	bx	lr

08005c38 <session_get_host>:

char* session_get_host(session* session){
 8005c38:	b480      	push	{r7}
 8005c3a:	b083      	sub	sp, #12
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
	return session == NULL ? NULL : session->host;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d003      	beq.n	8005c4e <session_get_host+0x16>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	f8d3 3005 	ldr.w	r3, [r3, #5]
 8005c4c:	e000      	b.n	8005c50 <session_get_host+0x18>
 8005c4e:	2300      	movs	r3, #0
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	370c      	adds	r7, #12
 8005c54:	46bd      	mov	sp, r7
 8005c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5a:	4770      	bx	lr

08005c5c <session_set_host>:

void session_set_host(session* session, char* host){
 8005c5c:	b480      	push	{r7}
 8005c5e:	b083      	sub	sp, #12
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
 8005c64:	6039      	str	r1, [r7, #0]
	if( session == NULL ) return;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d004      	beq.n	8005c76 <session_set_host+0x1a>
	session->host = host;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	683a      	ldr	r2, [r7, #0]
 8005c70:	f8c3 2005 	str.w	r2, [r3, #5]
 8005c74:	e000      	b.n	8005c78 <session_set_host+0x1c>
	if( session == NULL ) return;
 8005c76:	bf00      	nop
}
 8005c78:	370c      	adds	r7, #12
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c80:	4770      	bx	lr

08005c82 <session_get_port>:

unsigned int session_get_port(session* session){
 8005c82:	b480      	push	{r7}
 8005c84:	b083      	sub	sp, #12
 8005c86:	af00      	add	r7, sp, #0
 8005c88:	6078      	str	r0, [r7, #4]
	return session == NULL ? 1883 : session->port;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d003      	beq.n	8005c98 <session_get_port+0x16>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	f8d3 3009 	ldr.w	r3, [r3, #9]
 8005c96:	e001      	b.n	8005c9c <session_get_port+0x1a>
 8005c98:	f240 735b 	movw	r3, #1883	; 0x75b
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	370c      	adds	r7, #12
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca6:	4770      	bx	lr

08005ca8 <session_set_port>:

void session_set_port(session* session, unsigned int port){
 8005ca8:	b480      	push	{r7}
 8005caa:	b083      	sub	sp, #12
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
 8005cb0:	6039      	str	r1, [r7, #0]
	if( session == NULL ) return;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d004      	beq.n	8005cc2 <session_set_port+0x1a>
	session->port = port;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	683a      	ldr	r2, [r7, #0]
 8005cbc:	f8c3 2009 	str.w	r2, [r3, #9]
 8005cc0:	e000      	b.n	8005cc4 <session_set_port+0x1c>
	if( session == NULL ) return;
 8005cc2:	bf00      	nop
}
 8005cc4:	370c      	adds	r7, #12
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ccc:	4770      	bx	lr

08005cce <session_get_keep_alive>:

unsigned int session_get_keep_alive(session* session){
 8005cce:	b480      	push	{r7}
 8005cd0:	b083      	sub	sp, #12
 8005cd2:	af00      	add	r7, sp, #0
 8005cd4:	6078      	str	r0, [r7, #4]
	return session == NULL ? 60 : session->keep_alive;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d003      	beq.n	8005ce4 <session_get_keep_alive+0x16>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	f8d3 300d 	ldr.w	r3, [r3, #13]
 8005ce2:	e000      	b.n	8005ce6 <session_get_keep_alive+0x18>
 8005ce4:	233c      	movs	r3, #60	; 0x3c
}
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	370c      	adds	r7, #12
 8005cea:	46bd      	mov	sp, r7
 8005cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf0:	4770      	bx	lr

08005cf2 <session_set_keep_alive>:

void session_set_keep_alive(session* session, unsigned int keep_alive){
 8005cf2:	b480      	push	{r7}
 8005cf4:	b083      	sub	sp, #12
 8005cf6:	af00      	add	r7, sp, #0
 8005cf8:	6078      	str	r0, [r7, #4]
 8005cfa:	6039      	str	r1, [r7, #0]
	if( session == NULL ) return;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d004      	beq.n	8005d0c <session_set_keep_alive+0x1a>
	session->keep_alive = keep_alive;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	683a      	ldr	r2, [r7, #0]
 8005d06:	f8c3 200d 	str.w	r2, [r3, #13]
 8005d0a:	e000      	b.n	8005d0e <session_set_keep_alive+0x1c>
	if( session == NULL ) return;
 8005d0c:	bf00      	nop
}
 8005d0e:	370c      	adds	r7, #12
 8005d10:	46bd      	mov	sp, r7
 8005d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d16:	4770      	bx	lr

08005d18 <session_get_qos>:

unsigned char session_get_qos(session* session){
 8005d18:	b480      	push	{r7}
 8005d1a:	b083      	sub	sp, #12
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
	return session == NULL ? SESSION_QOS_LEVEL_0 : session->qos;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d002      	beq.n	8005d2c <session_get_qos+0x14>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	7c5b      	ldrb	r3, [r3, #17]
 8005d2a:	e001      	b.n	8005d30 <session_get_qos+0x18>
 8005d2c:	4b03      	ldr	r3, [pc, #12]	; (8005d3c <session_get_qos+0x24>)
 8005d2e:	781b      	ldrb	r3, [r3, #0]
}
 8005d30:	4618      	mov	r0, r3
 8005d32:	370c      	adds	r7, #12
 8005d34:	46bd      	mov	sp, r7
 8005d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3a:	4770      	bx	lr
 8005d3c:	20000b14 	.word	0x20000b14

08005d40 <session_set_qos>:

void session_set_qos(session* session, unsigned char qos){
 8005d40:	b480      	push	{r7}
 8005d42:	b083      	sub	sp, #12
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
 8005d48:	460b      	mov	r3, r1
 8005d4a:	70fb      	strb	r3, [r7, #3]
	if( session == NULL ) return;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d003      	beq.n	8005d5a <session_set_qos+0x1a>
	session->qos = qos;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	78fa      	ldrb	r2, [r7, #3]
 8005d56:	745a      	strb	r2, [r3, #17]
 8005d58:	e000      	b.n	8005d5c <session_set_qos+0x1c>
	if( session == NULL ) return;
 8005d5a:	bf00      	nop
}
 8005d5c:	370c      	adds	r7, #12
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d64:	4770      	bx	lr

08005d66 <session_is_retain>:

bool session_is_retain(session* session){
 8005d66:	b480      	push	{r7}
 8005d68:	b083      	sub	sp, #12
 8005d6a:	af00      	add	r7, sp, #0
 8005d6c:	6078      	str	r0, [r7, #4]
	return session == NULL ? false : session->retain;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d005      	beq.n	8005d80 <session_is_retain+0x1a>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	7c9b      	ldrb	r3, [r3, #18]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d001      	beq.n	8005d80 <session_is_retain+0x1a>
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	e000      	b.n	8005d82 <session_is_retain+0x1c>
 8005d80:	2300      	movs	r3, #0
}
 8005d82:	4618      	mov	r0, r3
 8005d84:	370c      	adds	r7, #12
 8005d86:	46bd      	mov	sp, r7
 8005d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8c:	4770      	bx	lr

08005d8e <session_set_retain>:

void session_set_retain(session* session, bool retain){
 8005d8e:	b480      	push	{r7}
 8005d90:	b083      	sub	sp, #12
 8005d92:	af00      	add	r7, sp, #0
 8005d94:	6078      	str	r0, [r7, #4]
 8005d96:	460b      	mov	r3, r1
 8005d98:	70fb      	strb	r3, [r7, #3]
	if ( session == NULL ) return;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d003      	beq.n	8005da8 <session_set_retain+0x1a>
	session->retain = retain;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	78fa      	ldrb	r2, [r7, #3]
 8005da4:	749a      	strb	r2, [r3, #18]
 8005da6:	e000      	b.n	8005daa <session_set_retain+0x1c>
	if ( session == NULL ) return;
 8005da8:	bf00      	nop
}
 8005daa:	370c      	adds	r7, #12
 8005dac:	46bd      	mov	sp, r7
 8005dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db2:	4770      	bx	lr

08005db4 <session_is_connected>:
void session_set_time_last_package(session* session, unsigned long time_last_package){
	if ( session == NULL ) return;
	session->time_last_package = time_last_package;
}

bool session_is_connected(session* session){
 8005db4:	b480      	push	{r7}
 8005db6:	b083      	sub	sp, #12
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
	return session == NULL ? false : session->connected;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d005      	beq.n	8005dce <session_is_connected+0x1a>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	7ddb      	ldrb	r3, [r3, #23]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d001      	beq.n	8005dce <session_is_connected+0x1a>
 8005dca:	2301      	movs	r3, #1
 8005dcc:	e000      	b.n	8005dd0 <session_is_connected+0x1c>
 8005dce:	2300      	movs	r3, #0
}
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	370c      	adds	r7, #12
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dda:	4770      	bx	lr

08005ddc <session_set_connected>:

void session_set_connected(session* session, bool connected){
 8005ddc:	b480      	push	{r7}
 8005dde:	b083      	sub	sp, #12
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
 8005de4:	460b      	mov	r3, r1
 8005de6:	70fb      	strb	r3, [r7, #3]
	if ( session == NULL ) return;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d003      	beq.n	8005df6 <session_set_connected+0x1a>
	session->connected = connected;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	78fa      	ldrb	r2, [r7, #3]
 8005df2:	75da      	strb	r2, [r3, #23]
 8005df4:	e000      	b.n	8005df8 <session_set_connected+0x1c>
	if ( session == NULL ) return;
 8005df6:	bf00      	nop
}
 8005df8:	370c      	adds	r7, #12
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e00:	4770      	bx	lr

08005e02 <session_get_username>:

char* session_get_username(session* session){
 8005e02:	b480      	push	{r7}
 8005e04:	b083      	sub	sp, #12
 8005e06:	af00      	add	r7, sp, #0
 8005e08:	6078      	str	r0, [r7, #4]
	return session == NULL ? NULL : session->username;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d002      	beq.n	8005e16 <session_get_username+0x14>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	699b      	ldr	r3, [r3, #24]
 8005e14:	e000      	b.n	8005e18 <session_get_username+0x16>
 8005e16:	2300      	movs	r3, #0
}
 8005e18:	4618      	mov	r0, r3
 8005e1a:	370c      	adds	r7, #12
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e22:	4770      	bx	lr

08005e24 <session_get_password>:
void session_set_username(session* session, char* username){
	if ( session == NULL ) return;
	session->username = username;
}

char* session_get_password(session* session){
 8005e24:	b480      	push	{r7}
 8005e26:	b083      	sub	sp, #12
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
	return session == NULL ? NULL : session->password;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d002      	beq.n	8005e38 <session_get_password+0x14>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	69db      	ldr	r3, [r3, #28]
 8005e36:	e000      	b.n	8005e3a <session_get_password+0x16>
 8005e38:	2300      	movs	r3, #0
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	370c      	adds	r7, #12
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e44:	4770      	bx	lr
	...

08005e48 <session_signal_time_last_package>:
void session_set_password(session* session, char* password){
	if( session == NULL ) return;
	session->password = password;
}

void session_signal_time_last_package(session* session){
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b082      	sub	sp, #8
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
	if ( session == NULL ) return;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d00a      	beq.n	8005e6c <session_signal_time_last_package+0x24>
	session->time_last_package = clock() / 1000;
 8005e56:	f006 fc5d 	bl	800c714 <clock>
 8005e5a:	4602      	mov	r2, r0
 8005e5c:	4b05      	ldr	r3, [pc, #20]	; (8005e74 <session_signal_time_last_package+0x2c>)
 8005e5e:	fba3 2302 	umull	r2, r3, r3, r2
 8005e62:	099a      	lsrs	r2, r3, #6
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	f8c3 2013 	str.w	r2, [r3, #19]
 8005e6a:	e000      	b.n	8005e6e <session_signal_time_last_package+0x26>
	if ( session == NULL ) return;
 8005e6c:	bf00      	nop
}
 8005e6e:	3708      	adds	r7, #8
 8005e70:	46bd      	mov	sp, r7
 8005e72:	bd80      	pop	{r7, pc}
 8005e74:	10624dd3 	.word	0x10624dd3

08005e78 <session_is_expired>:

bool session_is_expired(session* session){
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b084      	sub	sp, #16
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
	clock_t now = clock() / 1000;
 8005e80:	f006 fc48 	bl	800c714 <clock>
 8005e84:	4602      	mov	r2, r0
 8005e86:	4b0b      	ldr	r3, [pc, #44]	; (8005eb4 <session_is_expired+0x3c>)
 8005e88:	fba3 2302 	umull	r2, r3, r3, r2
 8005e8c:	099b      	lsrs	r3, r3, #6
 8005e8e:	60fb      	str	r3, [r7, #12]
	return (( now - session->time_last_package ) > session->keep_alive );
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	f8d3 3013 	ldr.w	r3, [r3, #19]
 8005e96:	68fa      	ldr	r2, [r7, #12]
 8005e98:	1ad2      	subs	r2, r2, r3
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	f8d3 300d 	ldr.w	r3, [r3, #13]
 8005ea0:	429a      	cmp	r2, r3
 8005ea2:	bf8c      	ite	hi
 8005ea4:	2301      	movhi	r3, #1
 8005ea6:	2300      	movls	r3, #0
 8005ea8:	b2db      	uxtb	r3, r3
}
 8005eaa:	4618      	mov	r0, r3
 8005eac:	3710      	adds	r7, #16
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	bd80      	pop	{r7, pc}
 8005eb2:	bf00      	nop
 8005eb4:	10624dd3 	.word	0x10624dd3

08005eb8 <session_set_unacknowledged_publish>:

void session_set_unacknowledged_publish(session* session, publish* unacknowledged_publish){
 8005eb8:	b480      	push	{r7}
 8005eba:	b083      	sub	sp, #12
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
 8005ec0:	6039      	str	r1, [r7, #0]
	if( session == NULL || unacknowledged_publish == NULL ) return;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d006      	beq.n	8005ed6 <session_set_unacknowledged_publish+0x1e>
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d003      	beq.n	8005ed6 <session_set_unacknowledged_publish+0x1e>
	session->unacknowledged_publish = unacknowledged_publish;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	683a      	ldr	r2, [r7, #0]
 8005ed2:	621a      	str	r2, [r3, #32]
 8005ed4:	e000      	b.n	8005ed8 <session_set_unacknowledged_publish+0x20>
	if( session == NULL || unacknowledged_publish == NULL ) return;
 8005ed6:	bf00      	nop
}
 8005ed8:	370c      	adds	r7, #12
 8005eda:	46bd      	mov	sp, r7
 8005edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee0:	4770      	bx	lr

08005ee2 <session_set_unacknowledged_pub_rec>:
void session_set_unacknowledged_pub_rel(session* session, pub_rel* unacknowledged_pub_rel){
	if( session == NULL || unacknowledged_pub_rel == NULL ) return;
	session->unacknowledged_pub_rel = unacknowledged_pub_rel;
}

void session_set_unacknowledged_pub_rec(session* session, pub_rec* unacknowledged_pub_rec){
 8005ee2:	b480      	push	{r7}
 8005ee4:	b083      	sub	sp, #12
 8005ee6:	af00      	add	r7, sp, #0
 8005ee8:	6078      	str	r0, [r7, #4]
 8005eea:	6039      	str	r1, [r7, #0]
	if( session == NULL || unacknowledged_pub_rec == NULL ) return;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d006      	beq.n	8005f00 <session_set_unacknowledged_pub_rec+0x1e>
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d003      	beq.n	8005f00 <session_set_unacknowledged_pub_rec+0x1e>
	session->unacknowledged_pub_rec = unacknowledged_pub_rec;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	683a      	ldr	r2, [r7, #0]
 8005efc:	629a      	str	r2, [r3, #40]	; 0x28
 8005efe:	e000      	b.n	8005f02 <session_set_unacknowledged_pub_rec+0x20>
	if( session == NULL || unacknowledged_pub_rec == NULL ) return;
 8005f00:	bf00      	nop
}
 8005f02:	370c      	adds	r7, #12
 8005f04:	46bd      	mov	sp, r7
 8005f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0a:	4770      	bx	lr

08005f0c <session_confirm>:

void session_confirm(session* session, unsigned int packet_identifier){
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b082      	sub	sp, #8
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
 8005f14:	6039      	str	r1, [r7, #0]
	if( session == NULL ) return;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d04f      	beq.n	8005fbc <session_confirm+0xb0>

    if( session->unacknowledged_publish != NULL && publish_get_packet_identifier(session->unacknowledged_publish) == packet_identifier )
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6a1b      	ldr	r3, [r3, #32]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d016      	beq.n	8005f52 <session_confirm+0x46>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6a1b      	ldr	r3, [r3, #32]
 8005f28:	4618      	mov	r0, r3
 8005f2a:	f7ff fbec 	bl	8005706 <publish_get_packet_identifier>
 8005f2e:	4603      	mov	r3, r0
 8005f30:	461a      	mov	r2, r3
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d10c      	bne.n	8005f52 <session_confirm+0x46>
    	session->unacknowledged_publish = NULL;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	f883 2020 	strb.w	r2, [r3, #32]
 8005f40:	2200      	movs	r2, #0
 8005f42:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8005f46:	2200      	movs	r2, #0
 8005f48:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

    if( session->unacknowledged_pub_rel != NULL && pub_rel_get_packet_identifier(session->unacknowledged_pub_rel) == packet_identifier )
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d015      	beq.n	8005f86 <session_confirm+0x7a>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f5e:	4618      	mov	r0, r3
 8005f60:	f7ff fa4a 	bl	80053f8 <pub_rel_get_packet_identifier>
 8005f64:	4602      	mov	r2, r0
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d10c      	bne.n	8005f86 <session_confirm+0x7a>
        session->unacknowledged_pub_rel = NULL;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005f74:	2200      	movs	r2, #0
 8005f76:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 8005f80:	2200      	movs	r2, #0
 8005f82:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

    if( session->unacknowledged_pub_rec != NULL && pub_rec_get_packet_identifier(session->unacknowledged_pub_rec) == packet_identifier )
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d017      	beq.n	8005fbe <session_confirm+0xb2>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f92:	4618      	mov	r0, r3
 8005f94:	f7ff f99c 	bl	80052d0 <pub_rec_get_packet_identifier>
 8005f98:	4602      	mov	r2, r0
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d10e      	bne.n	8005fbe <session_confirm+0xb2>
    	session->unacknowledged_pub_rec = NULL;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8005fa8:	2200      	movs	r2, #0
 8005faa:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 8005fae:	2200      	movs	r2, #0
 8005fb0:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
 8005fba:	e000      	b.n	8005fbe <session_confirm+0xb2>
	if( session == NULL ) return;
 8005fbc:	bf00      	nop
}
 8005fbe:	3708      	adds	r7, #8
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	bd80      	pop	{r7, pc}

08005fc4 <session_generate_packet_identifier>:

unsigned int session_generate_packet_identifier(session* session){
 8005fc4:	b480      	push	{r7}
 8005fc6:	b085      	sub	sp, #20
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
	if( session == NULL ) return 0;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d101      	bne.n	8005fd6 <session_generate_packet_identifier+0x12>
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	e012      	b.n	8005ffc <session_generate_packet_identifier+0x38>
	unsigned int result = session->packet_identifier;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fda:	60fb      	str	r3, [r7, #12]
	session->packet_identifier = (session->packet_identifier + 1) % 65534;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fe0:	1c59      	adds	r1, r3, #1
 8005fe2:	084b      	lsrs	r3, r1, #1
 8005fe4:	4a08      	ldr	r2, [pc, #32]	; (8006008 <session_generate_packet_identifier+0x44>)
 8005fe6:	fba2 2303 	umull	r2, r3, r2, r3
 8005fea:	0b9a      	lsrs	r2, r3, #14
 8005fec:	4613      	mov	r3, r2
 8005fee:	03db      	lsls	r3, r3, #15
 8005ff0:	1a9b      	subs	r3, r3, r2
 8005ff2:	005b      	lsls	r3, r3, #1
 8005ff4:	1aca      	subs	r2, r1, r3
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	62da      	str	r2, [r3, #44]	; 0x2c
	//if(session->packet_identifier == 0) session->packet_identifier = 1;
	return result;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
}
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	3714      	adds	r7, #20
 8006000:	46bd      	mov	sp, r7
 8006002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006006:	4770      	bx	lr
 8006008:	80010003 	.word	0x80010003

0800600c <session_get_last_packet_identifier>:

unsigned int session_get_last_packet_identifier(session* session){
 800600c:	b480      	push	{r7}
 800600e:	b083      	sub	sp, #12
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
	if( session == NULL ) return 0;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d101      	bne.n	800601e <session_get_last_packet_identifier+0x12>
 800601a:	2300      	movs	r3, #0
 800601c:	e009      	b.n	8006032 <session_get_last_packet_identifier+0x26>
	return session->packet_identifier == 0 ? session->packet_identifier - 1 : 65533;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006022:	2b00      	cmp	r3, #0
 8006024:	d103      	bne.n	800602e <session_get_last_packet_identifier+0x22>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800602a:	3b01      	subs	r3, #1
 800602c:	e001      	b.n	8006032 <session_get_last_packet_identifier+0x26>
 800602e:	f64f 73fd 	movw	r3, #65533	; 0xfffd
}
 8006032:	4618      	mov	r0, r3
 8006034:	370c      	adds	r7, #12
 8006036:	46bd      	mov	sp, r7
 8006038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603c:	4770      	bx	lr

0800603e <wifi_init>:
#include "../../Inc/mqtt_client/wifi.h"

wifi* wifi_init(esp8266* esp8266, unsigned int timeout){
 800603e:	b580      	push	{r7, lr}
 8006040:	b084      	sub	sp, #16
 8006042:	af00      	add	r7, sp, #0
 8006044:	6078      	str	r0, [r7, #4]
 8006046:	6039      	str	r1, [r7, #0]
	wifi* result = (wifi*) malloc(sizeof(wifi));
 8006048:	f241 0015 	movw	r0, #4117	; 0x1015
 800604c:	f006 fbcc 	bl	800c7e8 <malloc>
 8006050:	4603      	mov	r3, r0
 8006052:	60fb      	str	r3, [r7, #12]

	result->connected     = esp8266->connected;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	7a1a      	ldrb	r2, [r3, #8]
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	701a      	strb	r2, [r3, #0]
	result->esp8266       = esp8266;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	687a      	ldr	r2, [r7, #4]
 8006060:	f8c3 2001 	str.w	r2, [r3, #1]
	result->timeout       = timeout;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	683a      	ldr	r2, [r7, #0]
 8006068:	f8c3 2005 	str.w	r2, [r3, #5]
	result->received      = NULL;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006072:	330d      	adds	r3, #13
 8006074:	2200      	movs	r2, #0
 8006076:	701a      	strb	r2, [r3, #0]
 8006078:	2200      	movs	r2, #0
 800607a:	705a      	strb	r2, [r3, #1]
 800607c:	2200      	movs	r2, #0
 800607e:	709a      	strb	r2, [r3, #2]
 8006080:	2200      	movs	r2, #0
 8006082:	70da      	strb	r2, [r3, #3]
	result->mqtt_server   = NULL;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800608a:	3311      	adds	r3, #17
 800608c:	2200      	movs	r2, #0
 800608e:	701a      	strb	r2, [r3, #0]
 8006090:	2200      	movs	r2, #0
 8006092:	705a      	strb	r2, [r3, #1]
 8006094:	2200      	movs	r2, #0
 8006096:	709a      	strb	r2, [r3, #2]
 8006098:	2200      	movs	r2, #0
 800609a:	70da      	strb	r2, [r3, #3]

	return result;
 800609c:	68fb      	ldr	r3, [r7, #12]
}
 800609e:	4618      	mov	r0, r3
 80060a0:	3710      	adds	r7, #16
 80060a2:	46bd      	mov	sp, r7
 80060a4:	bd80      	pop	{r7, pc}

080060a6 <wifi_destroy>:

void wifi_destroy(wifi* wifi){
 80060a6:	b580      	push	{r7, lr}
 80060a8:	b082      	sub	sp, #8
 80060aa:	af00      	add	r7, sp, #0
 80060ac:	6078      	str	r0, [r7, #4]
	if( wifi == NULL ) return;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d02e      	beq.n	8006112 <wifi_destroy+0x6c>
	wifi->esp8266 = NULL;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2200      	movs	r2, #0
 80060b8:	705a      	strb	r2, [r3, #1]
 80060ba:	2200      	movs	r2, #0
 80060bc:	709a      	strb	r2, [r3, #2]
 80060be:	2200      	movs	r2, #0
 80060c0:	70da      	strb	r2, [r3, #3]
 80060c2:	2200      	movs	r2, #0
 80060c4:	711a      	strb	r2, [r3, #4]
	bytes_destroy(wifi->received);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060cc:	330d      	adds	r3, #13
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4618      	mov	r0, r3
 80060d2:	f7fd fc23 	bl	800391c <bytes_destroy>
	wifi->received = NULL;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060dc:	330d      	adds	r3, #13
 80060de:	2200      	movs	r2, #0
 80060e0:	701a      	strb	r2, [r3, #0]
 80060e2:	2200      	movs	r2, #0
 80060e4:	705a      	strb	r2, [r3, #1]
 80060e6:	2200      	movs	r2, #0
 80060e8:	709a      	strb	r2, [r3, #2]
 80060ea:	2200      	movs	r2, #0
 80060ec:	70da      	strb	r2, [r3, #3]
	wifi->mqtt_server = NULL;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060f4:	3311      	adds	r3, #17
 80060f6:	2200      	movs	r2, #0
 80060f8:	701a      	strb	r2, [r3, #0]
 80060fa:	2200      	movs	r2, #0
 80060fc:	705a      	strb	r2, [r3, #1]
 80060fe:	2200      	movs	r2, #0
 8006100:	709a      	strb	r2, [r3, #2]
 8006102:	2200      	movs	r2, #0
 8006104:	70da      	strb	r2, [r3, #3]
	free(wifi);
 8006106:	6878      	ldr	r0, [r7, #4]
 8006108:	f006 fb76 	bl	800c7f8 <free>
	wifi = NULL;
 800610c:	2300      	movs	r3, #0
 800610e:	607b      	str	r3, [r7, #4]
 8006110:	e000      	b.n	8006114 <wifi_destroy+0x6e>
	if( wifi == NULL ) return;
 8006112:	bf00      	nop
}
 8006114:	3708      	adds	r7, #8
 8006116:	46bd      	mov	sp, r7
 8006118:	bd80      	pop	{r7, pc}

0800611a <wifi_connect>:

void wifi_connect(wifi* wifi, char* ip, unsigned int port){
 800611a:	b580      	push	{r7, lr}
 800611c:	b084      	sub	sp, #16
 800611e:	af00      	add	r7, sp, #0
 8006120:	60f8      	str	r0, [r7, #12]
 8006122:	60b9      	str	r1, [r7, #8]
 8006124:	607a      	str	r2, [r7, #4]
	if( wifi == NULL ) return;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d018      	beq.n	800615e <wifi_connect+0x44>

	if ( wifi->mqtt_server != NULL ){
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006132:	3311      	adds	r3, #17
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d003      	beq.n	8006142 <wifi_connect+0x28>
		wifi->connected = true;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	2201      	movs	r2, #1
 800613e:	701a      	strb	r2, [r3, #0]
		return;\
 8006140:	e00e      	b.n	8006160 <wifi_connect+0x46>
	}
	wifi->connected = esp8266_createTCP(wifi->esp8266, (uint8_t*) ip, (uint16_t) port);
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8006148:	687a      	ldr	r2, [r7, #4]
 800614a:	b292      	uxth	r2, r2
 800614c:	68b9      	ldr	r1, [r7, #8]
 800614e:	4618      	mov	r0, r3
 8006150:	f7fc ff9a 	bl	8003088 <esp8266_createTCP>
 8006154:	4603      	mov	r3, r0
 8006156:	461a      	mov	r2, r3
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	701a      	strb	r2, [r3, #0]
 800615c:	e000      	b.n	8006160 <wifi_connect+0x46>
	if( wifi == NULL ) return;
 800615e:	bf00      	nop
}
 8006160:	3710      	adds	r7, #16
 8006162:	46bd      	mov	sp, r7
 8006164:	bd80      	pop	{r7, pc}

08006166 <wifi_is_connected>:

    esp8266_releaseTCP(wifi->esp8266);
    wifi->connected = false;
}

bool wifi_is_connected(wifi* wifi){
 8006166:	b480      	push	{r7}
 8006168:	b083      	sub	sp, #12
 800616a:	af00      	add	r7, sp, #0
 800616c:	6078      	str	r0, [r7, #4]
	return wifi == NULL ? false : wifi->connected;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d005      	beq.n	8006180 <wifi_is_connected+0x1a>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	781b      	ldrb	r3, [r3, #0]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d001      	beq.n	8006180 <wifi_is_connected+0x1a>
 800617c:	2301      	movs	r3, #1
 800617e:	e000      	b.n	8006182 <wifi_is_connected+0x1c>
 8006180:	2300      	movs	r3, #0
}
 8006182:	4618      	mov	r0, r3
 8006184:	370c      	adds	r7, #12
 8006186:	46bd      	mov	sp, r7
 8006188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618c:	4770      	bx	lr

0800618e <wifi_read>:

bytes* wifi_read(wifi* wifi){
 800618e:	b580      	push	{r7, lr}
 8006190:	b082      	sub	sp, #8
 8006192:	af00      	add	r7, sp, #0
 8006194:	6078      	str	r0, [r7, #4]
	if( wifi == NULL ) return NULL;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d101      	bne.n	80061a0 <wifi_read+0x12>
 800619c:	2300      	movs	r3, #0
 800619e:	e002      	b.n	80061a6 <wifi_read+0x18>
	return bytes_init();
 80061a0:	f7fd fb94 	bl	80038cc <bytes_init>
 80061a4:	4603      	mov	r3, r0
}
 80061a6:	4618      	mov	r0, r3
 80061a8:	3708      	adds	r7, #8
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bd80      	pop	{r7, pc}

080061ae <wifi_write>:

void wifi_write(wifi* wifi, bytes* bytes){
 80061ae:	b580      	push	{r7, lr}
 80061b0:	b084      	sub	sp, #16
 80061b2:	af00      	add	r7, sp, #0
 80061b4:	6078      	str	r0, [r7, #4]
 80061b6:	6039      	str	r1, [r7, #0]
    if( ! wifi->connected || bytes == NULL || bytes_is_empty(bytes) ) return;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	781b      	ldrb	r3, [r3, #0]
 80061bc:	f083 0301 	eor.w	r3, r3, #1
 80061c0:	b2db      	uxtb	r3, r3
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d130      	bne.n	8006228 <wifi_write+0x7a>
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d02d      	beq.n	8006228 <wifi_write+0x7a>
 80061cc:	6838      	ldr	r0, [r7, #0]
 80061ce:	f7fd fbd9 	bl	8003984 <bytes_is_empty>
 80061d2:	4603      	mov	r3, r0
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d127      	bne.n	8006228 <wifi_write+0x7a>

    if( wifi->mqtt_server != NULL ){
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80061de:	3311      	adds	r3, #17
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d009      	beq.n	80061fa <wifi_write+0x4c>
        mqtt_server_request(wifi->mqtt_server, bytes);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80061ec:	3311      	adds	r3, #17
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	6839      	ldr	r1, [r7, #0]
 80061f2:	4618      	mov	r0, r3
 80061f4:	f7fe fbb3 	bl	800495e <mqtt_server_request>
        return;
 80061f8:	e017      	b.n	800622a <wifi_write+0x7c>
    }

    uint8_t* array = bytes_to_array(bytes);
 80061fa:	6838      	ldr	r0, [r7, #0]
 80061fc:	f7fd fc63 	bl	8003ac6 <bytes_to_array>
 8006200:	60f8      	str	r0, [r7, #12]
    uint16_t size = bytes_get_size(bytes);
 8006202:	6838      	ldr	r0, [r7, #0]
 8006204:	f7fd fc2b 	bl	8003a5e <bytes_get_size>
 8006208:	4603      	mov	r3, r0
 800620a:	817b      	strh	r3, [r7, #10]
    esp8266_send(wifi->esp8266, array, size);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8006212:	897a      	ldrh	r2, [r7, #10]
 8006214:	68f9      	ldr	r1, [r7, #12]
 8006216:	4618      	mov	r0, r3
 8006218:	f7fc ff66 	bl	80030e8 <esp8266_send>
    free(array);
 800621c:	68f8      	ldr	r0, [r7, #12]
 800621e:	f006 faeb 	bl	800c7f8 <free>
    array = NULL;
 8006222:	2300      	movs	r3, #0
 8006224:	60fb      	str	r3, [r7, #12]
 8006226:	e000      	b.n	800622a <wifi_write+0x7c>
    if( ! wifi->connected || bytes == NULL || bytes_is_empty(bytes) ) return;
 8006228:	bf00      	nop
}
 800622a:	3710      	adds	r7, #16
 800622c:	46bd      	mov	sp, r7
 800622e:	bd80      	pop	{r7, pc}

08006230 <sen0161_init>:
#include <sen0161/sen0161.h>

sen0161* sen0161_init(direct_memory_access* dma, uint32_t channel, float offset){
 8006230:	b590      	push	{r4, r7, lr}
 8006232:	b087      	sub	sp, #28
 8006234:	af00      	add	r7, sp, #0
 8006236:	60f8      	str	r0, [r7, #12]
 8006238:	60b9      	str	r1, [r7, #8]
 800623a:	ed87 0a01 	vstr	s0, [r7, #4]
	sen0161* result = (sen0161*) malloc(sizeof(sen0161));
 800623e:	2040      	movs	r0, #64	; 0x40
 8006240:	f006 fad2 	bl	800c7e8 <malloc>
 8006244:	4603      	mov	r3, r0
 8006246:	617b      	str	r3, [r7, #20]
	result->channel = channel;
 8006248:	697b      	ldr	r3, [r7, #20]
 800624a:	68ba      	ldr	r2, [r7, #8]
 800624c:	601a      	str	r2, [r3, #0]
	result->offset = offset;
 800624e:	697b      	ldr	r3, [r7, #20]
 8006250:	687a      	ldr	r2, [r7, #4]
 8006252:	605a      	str	r2, [r3, #4]
	for(register int i = 0; i < 12; i++) result->readings[i] = 0;
 8006254:	2400      	movs	r4, #0
 8006256:	e011      	b.n	800627c <sen0161_init+0x4c>
 8006258:	697b      	ldr	r3, [r7, #20]
 800625a:	1ca2      	adds	r2, r4, #2
 800625c:	2100      	movs	r1, #0
 800625e:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
 8006262:	0091      	lsls	r1, r2, #2
 8006264:	4419      	add	r1, r3
 8006266:	2000      	movs	r0, #0
 8006268:	7048      	strb	r0, [r1, #1]
 800626a:	0091      	lsls	r1, r2, #2
 800626c:	4419      	add	r1, r3
 800626e:	2000      	movs	r0, #0
 8006270:	7088      	strb	r0, [r1, #2]
 8006272:	0092      	lsls	r2, r2, #2
 8006274:	441a      	add	r2, r3
 8006276:	2300      	movs	r3, #0
 8006278:	70d3      	strb	r3, [r2, #3]
 800627a:	3401      	adds	r4, #1
 800627c:	2c0b      	cmp	r4, #11
 800627e:	ddeb      	ble.n	8006258 <sen0161_init+0x28>
	result->index = 0;
 8006280:	697b      	ldr	r3, [r7, #20]
 8006282:	2200      	movs	r2, #0
 8006284:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8006288:	2200      	movs	r2, #0
 800628a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 800628e:	2200      	movs	r2, #0
 8006290:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8006294:	2200      	movs	r2, #0
 8006296:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	result->dma = dma;
 800629a:	697b      	ldr	r3, [r7, #20]
 800629c:	68fa      	ldr	r2, [r7, #12]
 800629e:	63da      	str	r2, [r3, #60]	; 0x3c
	return result;
 80062a0:	697b      	ldr	r3, [r7, #20]
}
 80062a2:	4618      	mov	r0, r3
 80062a4:	371c      	adds	r7, #28
 80062a6:	46bd      	mov	sp, r7
 80062a8:	bd90      	pop	{r4, r7, pc}
	...

080062ac <sen0161_read>:
void sen0161_set_dma(sen0161* sen0161, direct_memory_access* dma){
	if( sen0161 == NULL ) return;
	sen0161->dma = dma;
}

float sen0161_read(sen0161* sen0161){
 80062ac:	b5b0      	push	{r4, r5, r7, lr}
 80062ae:	b084      	sub	sp, #16
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
	if( sen0161 == NULL ) return 0.0;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d102      	bne.n	80062c0 <sen0161_read+0x14>
 80062ba:	f04f 0300 	mov.w	r3, #0
 80062be:	e05e      	b.n	800637e <sen0161_read+0xd2>

	float raw_adc = direct_memory_access_get_adc_value(sen0161->dma, sen0161->channel) ;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4619      	mov	r1, r3
 80062ca:	4610      	mov	r0, r2
 80062cc:	f7fb ff38 	bl	8002140 <direct_memory_access_get_adc_value>
 80062d0:	ee07 0a90 	vmov	s15, r0
 80062d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062d8:	edc7 7a03 	vstr	s15, [r7, #12]
	sen0161->readings[sen0161->index] = raw_adc;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80062e0:	edd7 7a03 	vldr	s15, [r7, #12]
 80062e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80062e8:	ee17 1a90 	vmov	r1, s15
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	3202      	adds	r2, #2
 80062f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	sen0161->index = ( sen0161->index + 1 ) % 12;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062f8:	1c59      	adds	r1, r3, #1
 80062fa:	4b24      	ldr	r3, [pc, #144]	; (800638c <sen0161_read+0xe0>)
 80062fc:	fba3 2301 	umull	r2, r3, r3, r1
 8006300:	08da      	lsrs	r2, r3, #3
 8006302:	4613      	mov	r3, r2
 8006304:	005b      	lsls	r3, r3, #1
 8006306:	4413      	add	r3, r2
 8006308:	009b      	lsls	r3, r3, #2
 800630a:	1aca      	subs	r2, r1, r3
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	639a      	str	r2, [r3, #56]	; 0x38

	float phValue = 3.5 * ( sen0161_average(sen0161) * 5.0 / 4096.0 ) + sen0161->offset;
 8006310:	6878      	ldr	r0, [r7, #4]
 8006312:	f000 f843 	bl	800639c <sen0161_average>
 8006316:	ee10 3a10 	vmov	r3, s0
 800631a:	4618      	mov	r0, r3
 800631c:	f7fa f924 	bl	8000568 <__aeabi_f2d>
 8006320:	f04f 0200 	mov.w	r2, #0
 8006324:	4b1a      	ldr	r3, [pc, #104]	; (8006390 <sen0161_read+0xe4>)
 8006326:	f7fa f977 	bl	8000618 <__aeabi_dmul>
 800632a:	4603      	mov	r3, r0
 800632c:	460c      	mov	r4, r1
 800632e:	4618      	mov	r0, r3
 8006330:	4621      	mov	r1, r4
 8006332:	f04f 0200 	mov.w	r2, #0
 8006336:	4b17      	ldr	r3, [pc, #92]	; (8006394 <sen0161_read+0xe8>)
 8006338:	f7fa fa98 	bl	800086c <__aeabi_ddiv>
 800633c:	4603      	mov	r3, r0
 800633e:	460c      	mov	r4, r1
 8006340:	4618      	mov	r0, r3
 8006342:	4621      	mov	r1, r4
 8006344:	f04f 0200 	mov.w	r2, #0
 8006348:	4b13      	ldr	r3, [pc, #76]	; (8006398 <sen0161_read+0xec>)
 800634a:	f7fa f965 	bl	8000618 <__aeabi_dmul>
 800634e:	4603      	mov	r3, r0
 8006350:	460c      	mov	r4, r1
 8006352:	4625      	mov	r5, r4
 8006354:	461c      	mov	r4, r3
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	685b      	ldr	r3, [r3, #4]
 800635a:	4618      	mov	r0, r3
 800635c:	f7fa f904 	bl	8000568 <__aeabi_f2d>
 8006360:	4602      	mov	r2, r0
 8006362:	460b      	mov	r3, r1
 8006364:	4620      	mov	r0, r4
 8006366:	4629      	mov	r1, r5
 8006368:	f7f9 ffa0 	bl	80002ac <__adddf3>
 800636c:	4603      	mov	r3, r0
 800636e:	460c      	mov	r4, r1
 8006370:	4618      	mov	r0, r3
 8006372:	4621      	mov	r1, r4
 8006374:	f7fa fc48 	bl	8000c08 <__aeabi_d2f>
 8006378:	4603      	mov	r3, r0
 800637a:	60bb      	str	r3, [r7, #8]
	return phValue;
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	ee07 3a90 	vmov	s15, r3
}
 8006382:	eeb0 0a67 	vmov.f32	s0, s15
 8006386:	3710      	adds	r7, #16
 8006388:	46bd      	mov	sp, r7
 800638a:	bdb0      	pop	{r4, r5, r7, pc}
 800638c:	aaaaaaab 	.word	0xaaaaaaab
 8006390:	40140000 	.word	0x40140000
 8006394:	40b00000 	.word	0x40b00000
 8006398:	400c0000 	.word	0x400c0000

0800639c <sen0161_average>:

float sen0161_average(sen0161* sen0161){
 800639c:	b490      	push	{r4, r7}
 800639e:	b086      	sub	sp, #24
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
	if( sen0161 == NULL ) return 0.0;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d102      	bne.n	80063b0 <sen0161_average+0x14>
 80063aa:	eddf 7a3c 	vldr	s15, [pc, #240]	; 800649c <sen0161_average+0x100>
 80063ae:	e06e      	b.n	800648e <sen0161_average+0xf2>

	long amount = 0;
 80063b0:	2300      	movs	r3, #0
 80063b2:	617b      	str	r3, [r7, #20]
	if( sen0161->index < 5 ){
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063b8:	2b04      	cmp	r3, #4
 80063ba:	d817      	bhi.n	80063ec <sen0161_average+0x50>
		for(register unsigned int i = 0; i < sen0161->index; i++ ){
 80063bc:	2400      	movs	r4, #0
 80063be:	e007      	b.n	80063d0 <sen0161_average+0x34>
			amount += sen0161->readings[i];
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	1ca2      	adds	r2, r4, #2
 80063c4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80063c8:	697b      	ldr	r3, [r7, #20]
 80063ca:	4413      	add	r3, r2
 80063cc:	617b      	str	r3, [r7, #20]
		for(register unsigned int i = 0; i < sen0161->index; i++ ){
 80063ce:	3401      	adds	r4, #1
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063d4:	429c      	cmp	r4, r3
 80063d6:	d3f3      	bcc.n	80063c0 <sen0161_average+0x24>
		}
		return (float) (amount / sen0161->index);
 80063d8:	697a      	ldr	r2, [r7, #20]
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063de:	fbb2 f3f3 	udiv	r3, r2, r3
 80063e2:	ee07 3a90 	vmov	s15, r3
 80063e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063ea:	e050      	b.n	800648e <sen0161_average+0xf2>
	}

	unsigned int maximum, minimum;
	if( sen0161->readings[0] < sen0161->readings[1] ){
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	689a      	ldr	r2, [r3, #8]
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	68db      	ldr	r3, [r3, #12]
 80063f4:	429a      	cmp	r2, r3
 80063f6:	d206      	bcs.n	8006406 <sen0161_average+0x6a>
		minimum = sen0161->readings[0]; maximum = sen0161->readings[1];
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	689b      	ldr	r3, [r3, #8]
 80063fc:	60fb      	str	r3, [r7, #12]
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	68db      	ldr	r3, [r3, #12]
 8006402:	613b      	str	r3, [r7, #16]
 8006404:	e005      	b.n	8006412 <sen0161_average+0x76>
	} else {
		minimum = sen0161->readings[1]; maximum = sen0161->readings[0];
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	68db      	ldr	r3, [r3, #12]
 800640a:	60fb      	str	r3, [r7, #12]
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	689b      	ldr	r3, [r3, #8]
 8006410:	613b      	str	r3, [r7, #16]
	}

	for(register unsigned int i=2; i < sen0161->index; i++){
 8006412:	2402      	movs	r4, #2
 8006414:	e029      	b.n	800646a <sen0161_average+0xce>
		if( sen0161->readings[i] < minimum) {
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	1ca2      	adds	r2, r4, #2
 800641a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800641e:	68fa      	ldr	r2, [r7, #12]
 8006420:	429a      	cmp	r2, r3
 8006422:	d909      	bls.n	8006438 <sen0161_average+0x9c>
			amount += minimum; minimum = sen0161->readings[i];
 8006424:	697a      	ldr	r2, [r7, #20]
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	4413      	add	r3, r2
 800642a:	617b      	str	r3, [r7, #20]
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	1ca2      	adds	r2, r4, #2
 8006430:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006434:	60fb      	str	r3, [r7, #12]
 8006436:	e017      	b.n	8006468 <sen0161_average+0xcc>
	    } else if( sen0161->readings[i] > maximum ) {
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	1ca2      	adds	r2, r4, #2
 800643c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006440:	693a      	ldr	r2, [r7, #16]
 8006442:	429a      	cmp	r2, r3
 8006444:	d209      	bcs.n	800645a <sen0161_average+0xbe>
	    	amount += maximum; maximum = sen0161->readings[i];
 8006446:	697a      	ldr	r2, [r7, #20]
 8006448:	693b      	ldr	r3, [r7, #16]
 800644a:	4413      	add	r3, r2
 800644c:	617b      	str	r3, [r7, #20]
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	1ca2      	adds	r2, r4, #2
 8006452:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006456:	613b      	str	r3, [r7, #16]
 8006458:	e006      	b.n	8006468 <sen0161_average+0xcc>
	    } else {
		    amount += sen0161->readings[i];
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	1ca2      	adds	r2, r4, #2
 800645e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006462:	697b      	ldr	r3, [r7, #20]
 8006464:	4413      	add	r3, r2
 8006466:	617b      	str	r3, [r7, #20]
	for(register unsigned int i=2; i < sen0161->index; i++){
 8006468:	3401      	adds	r4, #1
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800646e:	429c      	cmp	r4, r3
 8006470:	d3d1      	bcc.n	8006416 <sen0161_average+0x7a>
	    }
	}

	float average = (float) ( amount / (sen0161->index-2) );
 8006472:	697a      	ldr	r2, [r7, #20]
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006478:	3b02      	subs	r3, #2
 800647a:	fbb2 f3f3 	udiv	r3, r2, r3
 800647e:	ee07 3a90 	vmov	s15, r3
 8006482:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006486:	edc7 7a02 	vstr	s15, [r7, #8]
	return average;
 800648a:	edd7 7a02 	vldr	s15, [r7, #8]
}
 800648e:	eeb0 0a67 	vmov.f32	s0, s15
 8006492:	3718      	adds	r7, #24
 8006494:	46bd      	mov	sp, r7
 8006496:	bc90      	pop	{r4, r7}
 8006498:	4770      	bx	lr
 800649a:	bf00      	nop
 800649c:	00000000 	.word	0x00000000

080064a0 <sen0165_init>:
#include <sen0165/sen0165.h>

sen0165* sen0165_init(direct_memory_access* dma, uint32_t channel, float offset){
 80064a0:	b590      	push	{r4, r7, lr}
 80064a2:	b087      	sub	sp, #28
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	60f8      	str	r0, [r7, #12]
 80064a8:	60b9      	str	r1, [r7, #8]
 80064aa:	ed87 0a01 	vstr	s0, [r7, #4]
	sen0165* result = (sen0165*) malloc(sizeof(sen0165));
 80064ae:	2040      	movs	r0, #64	; 0x40
 80064b0:	f006 f99a 	bl	800c7e8 <malloc>
 80064b4:	4603      	mov	r3, r0
 80064b6:	617b      	str	r3, [r7, #20]
	result->channel = channel;
 80064b8:	697b      	ldr	r3, [r7, #20]
 80064ba:	68ba      	ldr	r2, [r7, #8]
 80064bc:	601a      	str	r2, [r3, #0]
	result->offset = offset;
 80064be:	697b      	ldr	r3, [r7, #20]
 80064c0:	687a      	ldr	r2, [r7, #4]
 80064c2:	605a      	str	r2, [r3, #4]
	for(register int i = 0; i < 12; i++) result->readings[i] = 0;
 80064c4:	2400      	movs	r4, #0
 80064c6:	e011      	b.n	80064ec <sen0165_init+0x4c>
 80064c8:	697b      	ldr	r3, [r7, #20]
 80064ca:	1ca2      	adds	r2, r4, #2
 80064cc:	2100      	movs	r1, #0
 80064ce:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
 80064d2:	0091      	lsls	r1, r2, #2
 80064d4:	4419      	add	r1, r3
 80064d6:	2000      	movs	r0, #0
 80064d8:	7048      	strb	r0, [r1, #1]
 80064da:	0091      	lsls	r1, r2, #2
 80064dc:	4419      	add	r1, r3
 80064de:	2000      	movs	r0, #0
 80064e0:	7088      	strb	r0, [r1, #2]
 80064e2:	0092      	lsls	r2, r2, #2
 80064e4:	441a      	add	r2, r3
 80064e6:	2300      	movs	r3, #0
 80064e8:	70d3      	strb	r3, [r2, #3]
 80064ea:	3401      	adds	r4, #1
 80064ec:	2c0b      	cmp	r4, #11
 80064ee:	ddeb      	ble.n	80064c8 <sen0165_init+0x28>
	result->index = 0;
 80064f0:	697b      	ldr	r3, [r7, #20]
 80064f2:	2200      	movs	r2, #0
 80064f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 80064f8:	2200      	movs	r2, #0
 80064fa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 80064fe:	2200      	movs	r2, #0
 8006500:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8006504:	2200      	movs	r2, #0
 8006506:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	result->dma = dma;
 800650a:	697b      	ldr	r3, [r7, #20]
 800650c:	68fa      	ldr	r2, [r7, #12]
 800650e:	63da      	str	r2, [r3, #60]	; 0x3c
	return result;
 8006510:	697b      	ldr	r3, [r7, #20]
}
 8006512:	4618      	mov	r0, r3
 8006514:	371c      	adds	r7, #28
 8006516:	46bd      	mov	sp, r7
 8006518:	bd90      	pop	{r4, r7, pc}
 800651a:	0000      	movs	r0, r0
 800651c:	0000      	movs	r0, r0
	...

08006520 <sen0165_read>:
void sen0165_set_dma(sen0165* sen0165, direct_memory_access* dma){
	if( sen0165 == NULL ) return;
	sen0165->dma = dma;
}

float sen0165_read(sen0165* sen0165){
 8006520:	b5b0      	push	{r4, r5, r7, lr}
 8006522:	b084      	sub	sp, #16
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
	if( sen0165 == NULL ) return 0.0;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d102      	bne.n	8006534 <sen0165_read+0x14>
 800652e:	f04f 0300 	mov.w	r3, #0
 8006532:	e075      	b.n	8006620 <sen0165_read+0x100>

	float raw_adc = direct_memory_access_get_adc_value(sen0165->dma, sen0165->channel) ;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	4619      	mov	r1, r3
 800653e:	4610      	mov	r0, r2
 8006540:	f7fb fdfe 	bl	8002140 <direct_memory_access_get_adc_value>
 8006544:	ee07 0a90 	vmov	s15, r0
 8006548:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800654c:	edc7 7a03 	vstr	s15, [r7, #12]
	sen0165->readings[sen0165->index] = raw_adc;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006554:	edd7 7a03 	vldr	s15, [r7, #12]
 8006558:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800655c:	ee17 1a90 	vmov	r1, s15
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	3202      	adds	r2, #2
 8006564:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	sen0165->index = ( sen0165->index + 1 ) % 12;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800656c:	1c59      	adds	r1, r3, #1
 800656e:	4b34      	ldr	r3, [pc, #208]	; (8006640 <sen0165_read+0x120>)
 8006570:	fba3 2301 	umull	r2, r3, r3, r1
 8006574:	08da      	lsrs	r2, r3, #3
 8006576:	4613      	mov	r3, r2
 8006578:	005b      	lsls	r3, r3, #1
 800657a:	4413      	add	r3, r2
 800657c:	009b      	lsls	r3, r3, #2
 800657e:	1aca      	subs	r2, r1, r3
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	639a      	str	r2, [r3, #56]	; 0x38

	float orpValue = ( ( 30 * 5.0 * 1000 ) - ( 75 * sen0165_average(sen0165) * 5.0 * 1000 / 4096.0 ) ) / 75 + sen0165->offset;
 8006584:	6878      	ldr	r0, [r7, #4]
 8006586:	f000 f865 	bl	8006654 <sen0165_average>
 800658a:	eeb0 7a40 	vmov.f32	s14, s0
 800658e:	eddf 7a2d 	vldr	s15, [pc, #180]	; 8006644 <sen0165_read+0x124>
 8006592:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006596:	ee17 0a90 	vmov	r0, s15
 800659a:	f7f9 ffe5 	bl	8000568 <__aeabi_f2d>
 800659e:	f04f 0200 	mov.w	r2, #0
 80065a2:	4b29      	ldr	r3, [pc, #164]	; (8006648 <sen0165_read+0x128>)
 80065a4:	f7fa f838 	bl	8000618 <__aeabi_dmul>
 80065a8:	4603      	mov	r3, r0
 80065aa:	460c      	mov	r4, r1
 80065ac:	4618      	mov	r0, r3
 80065ae:	4621      	mov	r1, r4
 80065b0:	f04f 0200 	mov.w	r2, #0
 80065b4:	4b25      	ldr	r3, [pc, #148]	; (800664c <sen0165_read+0x12c>)
 80065b6:	f7fa f82f 	bl	8000618 <__aeabi_dmul>
 80065ba:	4603      	mov	r3, r0
 80065bc:	460c      	mov	r4, r1
 80065be:	4618      	mov	r0, r3
 80065c0:	4621      	mov	r1, r4
 80065c2:	f04f 0200 	mov.w	r2, #0
 80065c6:	4b22      	ldr	r3, [pc, #136]	; (8006650 <sen0165_read+0x130>)
 80065c8:	f7fa f950 	bl	800086c <__aeabi_ddiv>
 80065cc:	4603      	mov	r3, r0
 80065ce:	460c      	mov	r4, r1
 80065d0:	461a      	mov	r2, r3
 80065d2:	4623      	mov	r3, r4
 80065d4:	a116      	add	r1, pc, #88	; (adr r1, 8006630 <sen0165_read+0x110>)
 80065d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80065da:	f7f9 fe65 	bl	80002a8 <__aeabi_dsub>
 80065de:	4603      	mov	r3, r0
 80065e0:	460c      	mov	r4, r1
 80065e2:	4618      	mov	r0, r3
 80065e4:	4621      	mov	r1, r4
 80065e6:	a314      	add	r3, pc, #80	; (adr r3, 8006638 <sen0165_read+0x118>)
 80065e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ec:	f7fa f93e 	bl	800086c <__aeabi_ddiv>
 80065f0:	4603      	mov	r3, r0
 80065f2:	460c      	mov	r4, r1
 80065f4:	4625      	mov	r5, r4
 80065f6:	461c      	mov	r4, r3
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	685b      	ldr	r3, [r3, #4]
 80065fc:	4618      	mov	r0, r3
 80065fe:	f7f9 ffb3 	bl	8000568 <__aeabi_f2d>
 8006602:	4602      	mov	r2, r0
 8006604:	460b      	mov	r3, r1
 8006606:	4620      	mov	r0, r4
 8006608:	4629      	mov	r1, r5
 800660a:	f7f9 fe4f 	bl	80002ac <__adddf3>
 800660e:	4603      	mov	r3, r0
 8006610:	460c      	mov	r4, r1
 8006612:	4618      	mov	r0, r3
 8006614:	4621      	mov	r1, r4
 8006616:	f7fa faf7 	bl	8000c08 <__aeabi_d2f>
 800661a:	4603      	mov	r3, r0
 800661c:	60bb      	str	r3, [r7, #8]
	return orpValue;
 800661e:	68bb      	ldr	r3, [r7, #8]
 8006620:	ee07 3a90 	vmov	s15, r3
}
 8006624:	eeb0 0a67 	vmov.f32	s0, s15
 8006628:	3710      	adds	r7, #16
 800662a:	46bd      	mov	sp, r7
 800662c:	bdb0      	pop	{r4, r5, r7, pc}
 800662e:	bf00      	nop
 8006630:	00000000 	.word	0x00000000
 8006634:	41024f80 	.word	0x41024f80
 8006638:	00000000 	.word	0x00000000
 800663c:	4052c000 	.word	0x4052c000
 8006640:	aaaaaaab 	.word	0xaaaaaaab
 8006644:	42960000 	.word	0x42960000
 8006648:	40140000 	.word	0x40140000
 800664c:	408f4000 	.word	0x408f4000
 8006650:	40b00000 	.word	0x40b00000

08006654 <sen0165_average>:

float sen0165_average(sen0165* sen0165){
 8006654:	b490      	push	{r4, r7}
 8006656:	b086      	sub	sp, #24
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
	if( sen0165 == NULL ) return 0.0;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d102      	bne.n	8006668 <sen0165_average+0x14>
 8006662:	eddf 7a3c 	vldr	s15, [pc, #240]	; 8006754 <sen0165_average+0x100>
 8006666:	e06e      	b.n	8006746 <sen0165_average+0xf2>

	long amount = 0;
 8006668:	2300      	movs	r3, #0
 800666a:	617b      	str	r3, [r7, #20]
	if( sen0165->index < 5 ){
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006670:	2b04      	cmp	r3, #4
 8006672:	d817      	bhi.n	80066a4 <sen0165_average+0x50>
		for(register unsigned int i = 0; i < sen0165->index; i++ ){
 8006674:	2400      	movs	r4, #0
 8006676:	e007      	b.n	8006688 <sen0165_average+0x34>
			amount += sen0165->readings[i];
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	1ca2      	adds	r2, r4, #2
 800667c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006680:	697b      	ldr	r3, [r7, #20]
 8006682:	4413      	add	r3, r2
 8006684:	617b      	str	r3, [r7, #20]
		for(register unsigned int i = 0; i < sen0165->index; i++ ){
 8006686:	3401      	adds	r4, #1
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800668c:	429c      	cmp	r4, r3
 800668e:	d3f3      	bcc.n	8006678 <sen0165_average+0x24>
		}
		return (float) (amount / sen0165->index);
 8006690:	697a      	ldr	r2, [r7, #20]
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006696:	fbb2 f3f3 	udiv	r3, r2, r3
 800669a:	ee07 3a90 	vmov	s15, r3
 800669e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066a2:	e050      	b.n	8006746 <sen0165_average+0xf2>
	}

	unsigned int maximum, minimum;
	if( sen0165->readings[0] < sen0165->readings[1] ){
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	689a      	ldr	r2, [r3, #8]
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	68db      	ldr	r3, [r3, #12]
 80066ac:	429a      	cmp	r2, r3
 80066ae:	d206      	bcs.n	80066be <sen0165_average+0x6a>
		minimum = sen0165->readings[0]; maximum = sen0165->readings[1];
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	689b      	ldr	r3, [r3, #8]
 80066b4:	60fb      	str	r3, [r7, #12]
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	68db      	ldr	r3, [r3, #12]
 80066ba:	613b      	str	r3, [r7, #16]
 80066bc:	e005      	b.n	80066ca <sen0165_average+0x76>
	} else {
		minimum = sen0165->readings[1]; maximum = sen0165->readings[0];
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	68db      	ldr	r3, [r3, #12]
 80066c2:	60fb      	str	r3, [r7, #12]
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	689b      	ldr	r3, [r3, #8]
 80066c8:	613b      	str	r3, [r7, #16]
	}

	for(register unsigned int i=2; i < sen0165->index; i++){
 80066ca:	2402      	movs	r4, #2
 80066cc:	e029      	b.n	8006722 <sen0165_average+0xce>
		if( sen0165->readings[i] < minimum) {
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	1ca2      	adds	r2, r4, #2
 80066d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066d6:	68fa      	ldr	r2, [r7, #12]
 80066d8:	429a      	cmp	r2, r3
 80066da:	d909      	bls.n	80066f0 <sen0165_average+0x9c>
			amount += minimum; minimum = sen0165->readings[i];
 80066dc:	697a      	ldr	r2, [r7, #20]
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	4413      	add	r3, r2
 80066e2:	617b      	str	r3, [r7, #20]
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	1ca2      	adds	r2, r4, #2
 80066e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066ec:	60fb      	str	r3, [r7, #12]
 80066ee:	e017      	b.n	8006720 <sen0165_average+0xcc>
	    } else if( sen0165->readings[i] > maximum ) {
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	1ca2      	adds	r2, r4, #2
 80066f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066f8:	693a      	ldr	r2, [r7, #16]
 80066fa:	429a      	cmp	r2, r3
 80066fc:	d209      	bcs.n	8006712 <sen0165_average+0xbe>
	    	amount += maximum; maximum = sen0165->readings[i];
 80066fe:	697a      	ldr	r2, [r7, #20]
 8006700:	693b      	ldr	r3, [r7, #16]
 8006702:	4413      	add	r3, r2
 8006704:	617b      	str	r3, [r7, #20]
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	1ca2      	adds	r2, r4, #2
 800670a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800670e:	613b      	str	r3, [r7, #16]
 8006710:	e006      	b.n	8006720 <sen0165_average+0xcc>
	    } else {
		    amount += sen0165->readings[i];
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	1ca2      	adds	r2, r4, #2
 8006716:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800671a:	697b      	ldr	r3, [r7, #20]
 800671c:	4413      	add	r3, r2
 800671e:	617b      	str	r3, [r7, #20]
	for(register unsigned int i=2; i < sen0165->index; i++){
 8006720:	3401      	adds	r4, #1
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006726:	429c      	cmp	r4, r3
 8006728:	d3d1      	bcc.n	80066ce <sen0165_average+0x7a>
	    }
	}

	float average = (float) ( amount / (sen0165->index-2) );
 800672a:	697a      	ldr	r2, [r7, #20]
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006730:	3b02      	subs	r3, #2
 8006732:	fbb2 f3f3 	udiv	r3, r2, r3
 8006736:	ee07 3a90 	vmov	s15, r3
 800673a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800673e:	edc7 7a02 	vstr	s15, [r7, #8]
	return average;
 8006742:	edd7 7a02 	vldr	s15, [r7, #8]
}
 8006746:	eeb0 0a67 	vmov.f32	s0, s15
 800674a:	3718      	adds	r7, #24
 800674c:	46bd      	mov	sp, r7
 800674e:	bc90      	pop	{r4, r7}
 8006750:	4770      	bx	lr
 8006752:	bf00      	nop
 8006754:	00000000 	.word	0x00000000

08006758 <sen0169_init>:
#include <sen0169/sen0169.h>

sen0169* sen0169_init(direct_memory_access* dma, uint32_t channel, float offset){
 8006758:	b590      	push	{r4, r7, lr}
 800675a:	b087      	sub	sp, #28
 800675c:	af00      	add	r7, sp, #0
 800675e:	60f8      	str	r0, [r7, #12]
 8006760:	60b9      	str	r1, [r7, #8]
 8006762:	ed87 0a01 	vstr	s0, [r7, #4]
	sen0169* result 	= (sen0169*) malloc(sizeof(sen0169));
 8006766:	2040      	movs	r0, #64	; 0x40
 8006768:	f006 f83e 	bl	800c7e8 <malloc>
 800676c:	4603      	mov	r3, r0
 800676e:	617b      	str	r3, [r7, #20]
	result->channel 	= channel;
 8006770:	697b      	ldr	r3, [r7, #20]
 8006772:	68ba      	ldr	r2, [r7, #8]
 8006774:	601a      	str	r2, [r3, #0]
	result->offset 		= offset;
 8006776:	697b      	ldr	r3, [r7, #20]
 8006778:	687a      	ldr	r2, [r7, #4]
 800677a:	605a      	str	r2, [r3, #4]
	for(register int i = 0; i < 40; i++) result->readings[i] = 0;
 800677c:	2400      	movs	r4, #0
 800677e:	e011      	b.n	80067a4 <sen0169_init+0x4c>
 8006780:	697b      	ldr	r3, [r7, #20]
 8006782:	1ca2      	adds	r2, r4, #2
 8006784:	2100      	movs	r1, #0
 8006786:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
 800678a:	0091      	lsls	r1, r2, #2
 800678c:	4419      	add	r1, r3
 800678e:	2000      	movs	r0, #0
 8006790:	7048      	strb	r0, [r1, #1]
 8006792:	0091      	lsls	r1, r2, #2
 8006794:	4419      	add	r1, r3
 8006796:	2000      	movs	r0, #0
 8006798:	7088      	strb	r0, [r1, #2]
 800679a:	0092      	lsls	r2, r2, #2
 800679c:	441a      	add	r2, r3
 800679e:	2300      	movs	r3, #0
 80067a0:	70d3      	strb	r3, [r2, #3]
 80067a2:	3401      	adds	r4, #1
 80067a4:	2c27      	cmp	r4, #39	; 0x27
 80067a6:	ddeb      	ble.n	8006780 <sen0169_init+0x28>
	result->index 		= 0;
 80067a8:	697b      	ldr	r3, [r7, #20]
 80067aa:	2200      	movs	r2, #0
 80067ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 80067b0:	2200      	movs	r2, #0
 80067b2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 80067b6:	2200      	movs	r2, #0
 80067b8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 80067bc:	2200      	movs	r2, #0
 80067be:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	result->dma 		= dma;
 80067c2:	697b      	ldr	r3, [r7, #20]
 80067c4:	68fa      	ldr	r2, [r7, #12]
 80067c6:	63da      	str	r2, [r3, #60]	; 0x3c
	return result;
 80067c8:	697b      	ldr	r3, [r7, #20]
}
 80067ca:	4618      	mov	r0, r3
 80067cc:	371c      	adds	r7, #28
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bd90      	pop	{r4, r7, pc}
	...

080067d4 <sen0169_read>:
void sen0169_set_dma(sen0169* sen0169, direct_memory_access* dma){
	if( sen0169 == NULL ) return;
	sen0169->dma = dma;
}

float sen0169_read(sen0169* sen0169){
 80067d4:	b5b0      	push	{r4, r5, r7, lr}
 80067d6:	b084      	sub	sp, #16
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
	if( sen0169 == NULL ) return 0.0;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d102      	bne.n	80067e8 <sen0169_read+0x14>
 80067e2:	f04f 0300 	mov.w	r3, #0
 80067e6:	e05e      	b.n	80068a6 <sen0169_read+0xd2>

	float raw_adc = direct_memory_access_get_adc_value(sen0169->dma, sen0169->channel);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	4619      	mov	r1, r3
 80067f2:	4610      	mov	r0, r2
 80067f4:	f7fb fca4 	bl	8002140 <direct_memory_access_get_adc_value>
 80067f8:	ee07 0a90 	vmov	s15, r0
 80067fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006800:	edc7 7a03 	vstr	s15, [r7, #12]
	sen0169->readings[sen0169->index] = raw_adc;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006808:	edd7 7a03 	vldr	s15, [r7, #12]
 800680c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006810:	ee17 1a90 	vmov	r1, s15
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	3202      	adds	r2, #2
 8006818:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	sen0169->index = ( sen0169->index + 1 ) % 12;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006820:	1c59      	adds	r1, r3, #1
 8006822:	4b24      	ldr	r3, [pc, #144]	; (80068b4 <sen0169_read+0xe0>)
 8006824:	fba3 2301 	umull	r2, r3, r3, r1
 8006828:	08da      	lsrs	r2, r3, #3
 800682a:	4613      	mov	r3, r2
 800682c:	005b      	lsls	r3, r3, #1
 800682e:	4413      	add	r3, r2
 8006830:	009b      	lsls	r3, r3, #2
 8006832:	1aca      	subs	r2, r1, r3
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	639a      	str	r2, [r3, #56]	; 0x38

	float phValue = 3.5 * ( sen0169_average(sen0169) * 5.0 / 4096.0 ) + sen0169->offset;
 8006838:	6878      	ldr	r0, [r7, #4]
 800683a:	f000 f843 	bl	80068c4 <sen0169_average>
 800683e:	ee10 3a10 	vmov	r3, s0
 8006842:	4618      	mov	r0, r3
 8006844:	f7f9 fe90 	bl	8000568 <__aeabi_f2d>
 8006848:	f04f 0200 	mov.w	r2, #0
 800684c:	4b1a      	ldr	r3, [pc, #104]	; (80068b8 <sen0169_read+0xe4>)
 800684e:	f7f9 fee3 	bl	8000618 <__aeabi_dmul>
 8006852:	4603      	mov	r3, r0
 8006854:	460c      	mov	r4, r1
 8006856:	4618      	mov	r0, r3
 8006858:	4621      	mov	r1, r4
 800685a:	f04f 0200 	mov.w	r2, #0
 800685e:	4b17      	ldr	r3, [pc, #92]	; (80068bc <sen0169_read+0xe8>)
 8006860:	f7fa f804 	bl	800086c <__aeabi_ddiv>
 8006864:	4603      	mov	r3, r0
 8006866:	460c      	mov	r4, r1
 8006868:	4618      	mov	r0, r3
 800686a:	4621      	mov	r1, r4
 800686c:	f04f 0200 	mov.w	r2, #0
 8006870:	4b13      	ldr	r3, [pc, #76]	; (80068c0 <sen0169_read+0xec>)
 8006872:	f7f9 fed1 	bl	8000618 <__aeabi_dmul>
 8006876:	4603      	mov	r3, r0
 8006878:	460c      	mov	r4, r1
 800687a:	4625      	mov	r5, r4
 800687c:	461c      	mov	r4, r3
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	685b      	ldr	r3, [r3, #4]
 8006882:	4618      	mov	r0, r3
 8006884:	f7f9 fe70 	bl	8000568 <__aeabi_f2d>
 8006888:	4602      	mov	r2, r0
 800688a:	460b      	mov	r3, r1
 800688c:	4620      	mov	r0, r4
 800688e:	4629      	mov	r1, r5
 8006890:	f7f9 fd0c 	bl	80002ac <__adddf3>
 8006894:	4603      	mov	r3, r0
 8006896:	460c      	mov	r4, r1
 8006898:	4618      	mov	r0, r3
 800689a:	4621      	mov	r1, r4
 800689c:	f7fa f9b4 	bl	8000c08 <__aeabi_d2f>
 80068a0:	4603      	mov	r3, r0
 80068a2:	60bb      	str	r3, [r7, #8]
	return phValue;
 80068a4:	68bb      	ldr	r3, [r7, #8]
 80068a6:	ee07 3a90 	vmov	s15, r3
}
 80068aa:	eeb0 0a67 	vmov.f32	s0, s15
 80068ae:	3710      	adds	r7, #16
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bdb0      	pop	{r4, r5, r7, pc}
 80068b4:	aaaaaaab 	.word	0xaaaaaaab
 80068b8:	40140000 	.word	0x40140000
 80068bc:	40b00000 	.word	0x40b00000
 80068c0:	400c0000 	.word	0x400c0000

080068c4 <sen0169_average>:

float sen0169_average(sen0169* sen0169){
 80068c4:	b490      	push	{r4, r7}
 80068c6:	b086      	sub	sp, #24
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
	if( sen0169 == NULL ) return 0.0;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d102      	bne.n	80068d8 <sen0169_average+0x14>
 80068d2:	eddf 7a3c 	vldr	s15, [pc, #240]	; 80069c4 <sen0169_average+0x100>
 80068d6:	e06e      	b.n	80069b6 <sen0169_average+0xf2>

	long amount = 0;
 80068d8:	2300      	movs	r3, #0
 80068da:	617b      	str	r3, [r7, #20]
	if( sen0169->index < 5 ){
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068e0:	2b04      	cmp	r3, #4
 80068e2:	d817      	bhi.n	8006914 <sen0169_average+0x50>
		for(register unsigned int i = 0; i < sen0169->index; i++ ){
 80068e4:	2400      	movs	r4, #0
 80068e6:	e007      	b.n	80068f8 <sen0169_average+0x34>
			amount += sen0169->readings[i];
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	1ca2      	adds	r2, r4, #2
 80068ec:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80068f0:	697b      	ldr	r3, [r7, #20]
 80068f2:	4413      	add	r3, r2
 80068f4:	617b      	str	r3, [r7, #20]
		for(register unsigned int i = 0; i < sen0169->index; i++ ){
 80068f6:	3401      	adds	r4, #1
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068fc:	429c      	cmp	r4, r3
 80068fe:	d3f3      	bcc.n	80068e8 <sen0169_average+0x24>
		}
		return (float) (amount / sen0169->index);
 8006900:	697a      	ldr	r2, [r7, #20]
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006906:	fbb2 f3f3 	udiv	r3, r2, r3
 800690a:	ee07 3a90 	vmov	s15, r3
 800690e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006912:	e050      	b.n	80069b6 <sen0169_average+0xf2>
	}

	unsigned int maximum, minimum;
	if( sen0169->readings[0] < sen0169->readings[1] ){
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	689a      	ldr	r2, [r3, #8]
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	68db      	ldr	r3, [r3, #12]
 800691c:	429a      	cmp	r2, r3
 800691e:	d206      	bcs.n	800692e <sen0169_average+0x6a>
		minimum = sen0169->readings[0]; maximum = sen0169->readings[1];
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	689b      	ldr	r3, [r3, #8]
 8006924:	60fb      	str	r3, [r7, #12]
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	68db      	ldr	r3, [r3, #12]
 800692a:	613b      	str	r3, [r7, #16]
 800692c:	e005      	b.n	800693a <sen0169_average+0x76>
	} else {
		minimum = sen0169->readings[1]; maximum = sen0169->readings[0];
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	68db      	ldr	r3, [r3, #12]
 8006932:	60fb      	str	r3, [r7, #12]
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	689b      	ldr	r3, [r3, #8]
 8006938:	613b      	str	r3, [r7, #16]
	}

	for(register unsigned int i=2; i < sen0169->index; i++){
 800693a:	2402      	movs	r4, #2
 800693c:	e029      	b.n	8006992 <sen0169_average+0xce>
		if( sen0169->readings[i] < minimum) {
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	1ca2      	adds	r2, r4, #2
 8006942:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006946:	68fa      	ldr	r2, [r7, #12]
 8006948:	429a      	cmp	r2, r3
 800694a:	d909      	bls.n	8006960 <sen0169_average+0x9c>
			amount += minimum; minimum = sen0169->readings[i];
 800694c:	697a      	ldr	r2, [r7, #20]
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	4413      	add	r3, r2
 8006952:	617b      	str	r3, [r7, #20]
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	1ca2      	adds	r2, r4, #2
 8006958:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800695c:	60fb      	str	r3, [r7, #12]
 800695e:	e017      	b.n	8006990 <sen0169_average+0xcc>
	    } else if( sen0169->readings[i] > maximum ) {
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	1ca2      	adds	r2, r4, #2
 8006964:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006968:	693a      	ldr	r2, [r7, #16]
 800696a:	429a      	cmp	r2, r3
 800696c:	d209      	bcs.n	8006982 <sen0169_average+0xbe>
	    	amount += maximum; maximum = sen0169->readings[i];
 800696e:	697a      	ldr	r2, [r7, #20]
 8006970:	693b      	ldr	r3, [r7, #16]
 8006972:	4413      	add	r3, r2
 8006974:	617b      	str	r3, [r7, #20]
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	1ca2      	adds	r2, r4, #2
 800697a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800697e:	613b      	str	r3, [r7, #16]
 8006980:	e006      	b.n	8006990 <sen0169_average+0xcc>
	    } else {
		    amount += sen0169->readings[i];
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	1ca2      	adds	r2, r4, #2
 8006986:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800698a:	697b      	ldr	r3, [r7, #20]
 800698c:	4413      	add	r3, r2
 800698e:	617b      	str	r3, [r7, #20]
	for(register unsigned int i=2; i < sen0169->index; i++){
 8006990:	3401      	adds	r4, #1
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006996:	429c      	cmp	r4, r3
 8006998:	d3d1      	bcc.n	800693e <sen0169_average+0x7a>
	    }
	}

	float average = (float) ( amount / (sen0169->index-2) );
 800699a:	697a      	ldr	r2, [r7, #20]
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069a0:	3b02      	subs	r3, #2
 80069a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80069a6:	ee07 3a90 	vmov	s15, r3
 80069aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069ae:	edc7 7a02 	vstr	s15, [r7, #8]
	return average;
 80069b2:	edd7 7a02 	vldr	s15, [r7, #8]
}
 80069b6:	eeb0 0a67 	vmov.f32	s0, s15
 80069ba:	3718      	adds	r7, #24
 80069bc:	46bd      	mov	sp, r7
 80069be:	bc90      	pop	{r4, r7}
 80069c0:	4770      	bx	lr
 80069c2:	bf00      	nop
 80069c4:	00000000 	.word	0x00000000

080069c8 <sen0189_init>:
#include <sen0189/sen0189.h>

sen0189* sen0189_init(direct_memory_access* dma, uint32_t channel){
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b084      	sub	sp, #16
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
 80069d0:	6039      	str	r1, [r7, #0]
	sen0189* result = (sen0189*) malloc(sizeof(sen0189));
 80069d2:	2008      	movs	r0, #8
 80069d4:	f005 ff08 	bl	800c7e8 <malloc>
 80069d8:	4603      	mov	r3, r0
 80069da:	60fb      	str	r3, [r7, #12]
	result->channel = channel;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	683a      	ldr	r2, [r7, #0]
 80069e0:	601a      	str	r2, [r3, #0]
	result->dma = dma;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	687a      	ldr	r2, [r7, #4]
 80069e6:	605a      	str	r2, [r3, #4]
	return result;
 80069e8:	68fb      	ldr	r3, [r7, #12]
}
 80069ea:	4618      	mov	r0, r3
 80069ec:	3710      	adds	r7, #16
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bd80      	pop	{r7, pc}
 80069f2:	0000      	movs	r0, r0
 80069f4:	0000      	movs	r0, r0
	...

080069f8 <sen0189_read>:
void sen0189_set_dma(sen0189* sen0189, direct_memory_access* dma){
	if( sen0189 == NULL ) return;
	sen0189->dma = dma;
}

float sen0189_read(sen0189* sen0189){
 80069f8:	b590      	push	{r4, r7, lr}
 80069fa:	b085      	sub	sp, #20
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
	if( sen0189 == NULL ) return 0.0;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d102      	bne.n	8006a0c <sen0189_read+0x14>
 8006a06:	f04f 0300 	mov.w	r3, #0
 8006a0a:	e051      	b.n	8006ab0 <sen0189_read+0xb8>

	float voltage = direct_memory_access_get_adc_value(sen0189->dma, sen0189->channel) * ( 5000.0 / 4096.0 );
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	685a      	ldr	r2, [r3, #4]
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	4619      	mov	r1, r3
 8006a16:	4610      	mov	r0, r2
 8006a18:	f7fb fb92 	bl	8002140 <direct_memory_access_get_adc_value>
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	4618      	mov	r0, r3
 8006a20:	f7f9 fd80 	bl	8000524 <__aeabi_ui2d>
 8006a24:	a32d      	add	r3, pc, #180	; (adr r3, 8006adc <sen0189_read+0xe4>)
 8006a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a2a:	f7f9 fdf5 	bl	8000618 <__aeabi_dmul>
 8006a2e:	4603      	mov	r3, r0
 8006a30:	460c      	mov	r4, r1
 8006a32:	4618      	mov	r0, r3
 8006a34:	4621      	mov	r1, r4
 8006a36:	f7fa f8e7 	bl	8000c08 <__aeabi_d2f>
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	60fb      	str	r3, [r7, #12]
    voltage = voltage > 3004.74 ? 3004.74 : voltage;
 8006a3e:	68f8      	ldr	r0, [r7, #12]
 8006a40:	f7f9 fd92 	bl	8000568 <__aeabi_f2d>
 8006a44:	a327      	add	r3, pc, #156	; (adr r3, 8006ae4 <sen0189_read+0xec>)
 8006a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a4a:	f7fa f875 	bl	8000b38 <__aeabi_dcmpgt>
 8006a4e:	4603      	mov	r3, r0
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d001      	beq.n	8006a58 <sen0189_read+0x60>
 8006a54:	4b1e      	ldr	r3, [pc, #120]	; (8006ad0 <sen0189_read+0xd8>)
 8006a56:	e000      	b.n	8006a5a <sen0189_read+0x62>
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	60fb      	str	r3, [r7, #12]

    float sensor_value = sqrtf( 1346605265-448160*voltage);
 8006a5c:	edd7 7a03 	vldr	s15, [r7, #12]
 8006a60:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8006ad4 <sen0189_read+0xdc>
 8006a64:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006a68:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8006ad8 <sen0189_read+0xe0>
 8006a6c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006a70:	eeb0 0a67 	vmov.f32	s0, s15
 8006a74:	f00a fcc4 	bl	8011400 <sqrtf>
 8006a78:	ed87 0a02 	vstr	s0, [r7, #8]
	sensor_value = (sensor_value / 22408.0) + (57423.0/22408.0);
 8006a7c:	68b8      	ldr	r0, [r7, #8]
 8006a7e:	f7f9 fd73 	bl	8000568 <__aeabi_f2d>
 8006a82:	a30f      	add	r3, pc, #60	; (adr r3, 8006ac0 <sen0189_read+0xc8>)
 8006a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a88:	f7f9 fef0 	bl	800086c <__aeabi_ddiv>
 8006a8c:	4603      	mov	r3, r0
 8006a8e:	460c      	mov	r4, r1
 8006a90:	4618      	mov	r0, r3
 8006a92:	4621      	mov	r1, r4
 8006a94:	a30c      	add	r3, pc, #48	; (adr r3, 8006ac8 <sen0189_read+0xd0>)
 8006a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a9a:	f7f9 fc07 	bl	80002ac <__adddf3>
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	460c      	mov	r4, r1
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	4621      	mov	r1, r4
 8006aa6:	f7fa f8af 	bl	8000c08 <__aeabi_d2f>
 8006aaa:	4603      	mov	r3, r0
 8006aac:	60bb      	str	r3, [r7, #8]

	return sensor_value;
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	ee07 3a90 	vmov	s15, r3
}
 8006ab4:	eeb0 0a67 	vmov.f32	s0, s15
 8006ab8:	3714      	adds	r7, #20
 8006aba:	46bd      	mov	sp, r7
 8006abc:	bd90      	pop	{r4, r7, pc}
 8006abe:	bf00      	nop
 8006ac0:	00000000 	.word	0x00000000
 8006ac4:	40d5e200 	.word	0x40d5e200
 8006ac8:	7e4f261d 	.word	0x7e4f261d
 8006acc:	4004803a 	.word	0x4004803a
 8006ad0:	453bcbd7 	.word	0x453bcbd7
 8006ad4:	48dad400 	.word	0x48dad400
 8006ad8:	4ea08722 	.word	0x4ea08722
 8006adc:	00000000 	.word	0x00000000
 8006ae0:	3ff38800 	.word	0x3ff38800
 8006ae4:	e147ae14 	.word	0xe147ae14
 8006ae8:	40a7797a 	.word	0x40a7797a

08006aec <sen0237a_init>:
#include <sen0237a/sen0237a.h>

sen0237a* sen0237a_init(direct_memory_access* dma, uint32_t channel, char mode_calibration, char points_for_calibration, uint32_t voltage_point_1, uint8_t temperature_point_1, uint32_t voltage_point_2, uint8_t temperature_point_2, uint32_t current_temperature){
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b086      	sub	sp, #24
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	60f8      	str	r0, [r7, #12]
 8006af4:	60b9      	str	r1, [r7, #8]
 8006af6:	4611      	mov	r1, r2
 8006af8:	461a      	mov	r2, r3
 8006afa:	460b      	mov	r3, r1
 8006afc:	71fb      	strb	r3, [r7, #7]
 8006afe:	4613      	mov	r3, r2
 8006b00:	71bb      	strb	r3, [r7, #6]
	sen0237a* result = (sen0237a*) malloc(sizeof(sen0237a));
 8006b02:	206a      	movs	r0, #106	; 0x6a
 8006b04:	f005 fe70 	bl	800c7e8 <malloc>
 8006b08:	4603      	mov	r3, r0
 8006b0a:	617b      	str	r3, [r7, #20]

	result->dma 						= dma;
 8006b0c:	697b      	ldr	r3, [r7, #20]
 8006b0e:	68fa      	ldr	r2, [r7, #12]
 8006b10:	601a      	str	r2, [r3, #0]
	result->channel						= channel;
 8006b12:	697b      	ldr	r3, [r7, #20]
 8006b14:	68ba      	ldr	r2, [r7, #8]
 8006b16:	605a      	str	r2, [r3, #4]
	result->mode_calibration			= mode_calibration;
 8006b18:	697b      	ldr	r3, [r7, #20]
 8006b1a:	79fa      	ldrb	r2, [r7, #7]
 8006b1c:	721a      	strb	r2, [r3, #8]
	result->points_for_calibration		= points_for_calibration;
 8006b1e:	697b      	ldr	r3, [r7, #20]
 8006b20:	79ba      	ldrb	r2, [r7, #6]
 8006b22:	725a      	strb	r2, [r3, #9]

	result->voltage_point_1				= voltage_point_1;
 8006b24:	697b      	ldr	r3, [r7, #20]
 8006b26:	6a3a      	ldr	r2, [r7, #32]
 8006b28:	f8c3 200a 	str.w	r2, [r3, #10]
	result->temperature_point_1			= temperature_point_1;
 8006b2c:	697b      	ldr	r3, [r7, #20]
 8006b2e:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8006b32:	739a      	strb	r2, [r3, #14]

	result->voltage_point_2				= voltage_point_2;
 8006b34:	697b      	ldr	r3, [r7, #20]
 8006b36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b38:	f8c3 200f 	str.w	r2, [r3, #15]
	result->temperature_point_2			= temperature_point_2;
 8006b3c:	697b      	ldr	r3, [r7, #20]
 8006b3e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8006b42:	74da      	strb	r2, [r3, #19]

	result->current_temperature			= current_temperature;
 8006b44:	697b      	ldr	r3, [r7, #20]
 8006b46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b48:	615a      	str	r2, [r3, #20]

	result->table_reference[0] = 14460;
 8006b4a:	697b      	ldr	r3, [r7, #20]
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	f042 027c 	orr.w	r2, r2, #124	; 0x7c
 8006b52:	761a      	strb	r2, [r3, #24]
 8006b54:	2200      	movs	r2, #0
 8006b56:	f042 0238 	orr.w	r2, r2, #56	; 0x38
 8006b5a:	765a      	strb	r2, [r3, #25]
	result->table_reference[1] = 14220;
 8006b5c:	697b      	ldr	r3, [r7, #20]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	f062 0273 	orn	r2, r2, #115	; 0x73
 8006b64:	769a      	strb	r2, [r3, #26]
 8006b66:	2200      	movs	r2, #0
 8006b68:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 8006b6c:	76da      	strb	r2, [r3, #27]
	result->table_reference[2] = 13820;
 8006b6e:	697b      	ldr	r3, [r7, #20]
 8006b70:	2200      	movs	r2, #0
 8006b72:	f062 0203 	orn	r2, r2, #3
 8006b76:	771a      	strb	r2, [r3, #28]
 8006b78:	2200      	movs	r2, #0
 8006b7a:	f042 0235 	orr.w	r2, r2, #53	; 0x35
 8006b7e:	775a      	strb	r2, [r3, #29]
	result->table_reference[3] = 13440;
 8006b80:	697b      	ldr	r3, [r7, #20]
 8006b82:	2200      	movs	r2, #0
 8006b84:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b88:	779a      	strb	r2, [r3, #30]
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	f042 0234 	orr.w	r2, r2, #52	; 0x34
 8006b90:	77da      	strb	r2, [r3, #31]
	result->table_reference[4] = 13090;
 8006b92:	697b      	ldr	r3, [r7, #20]
 8006b94:	2200      	movs	r2, #0
 8006b96:	f042 0222 	orr.w	r2, r2, #34	; 0x22
 8006b9a:	f883 2020 	strb.w	r2, [r3, #32]
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	f042 0233 	orr.w	r2, r2, #51	; 0x33
 8006ba4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	result->table_reference[5] = 12740;
 8006ba8:	697b      	ldr	r3, [r7, #20]
 8006baa:	2200      	movs	r2, #0
 8006bac:	f062 023b 	orn	r2, r2, #59	; 0x3b
 8006bb0:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	f042 0231 	orr.w	r2, r2, #49	; 0x31
 8006bba:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	result->table_reference[6] = 12420;
 8006bbe:	697b      	ldr	r3, [r7, #20]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	f062 027b 	orn	r2, r2, #123	; 0x7b
 8006bc6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8006bca:	2200      	movs	r2, #0
 8006bcc:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 8006bd0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	result->table_reference[7] = 12110;
 8006bd4:	697b      	ldr	r3, [r7, #20]
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	f042 024e 	orr.w	r2, r2, #78	; 0x4e
 8006bdc:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 8006be0:	2200      	movs	r2, #0
 8006be2:	f042 022f 	orr.w	r2, r2, #47	; 0x2f
 8006be6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	result->table_reference[8] = 11810;
 8006bea:	697b      	ldr	r3, [r7, #20]
 8006bec:	2200      	movs	r2, #0
 8006bee:	f042 0222 	orr.w	r2, r2, #34	; 0x22
 8006bf2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	f042 022e 	orr.w	r2, r2, #46	; 0x2e
 8006bfc:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	result->table_reference[9] = 11530;
 8006c00:	697b      	ldr	r3, [r7, #20]
 8006c02:	2200      	movs	r2, #0
 8006c04:	f042 020a 	orr.w	r2, r2, #10
 8006c08:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	f042 022d 	orr.w	r2, r2, #45	; 0x2d
 8006c12:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

	result->table_reference[10] = 11260;
 8006c16:	697b      	ldr	r3, [r7, #20]
 8006c18:	2200      	movs	r2, #0
 8006c1a:	f062 0203 	orn	r2, r2, #3
 8006c1e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8006c22:	2200      	movs	r2, #0
 8006c24:	f042 022b 	orr.w	r2, r2, #43	; 0x2b
 8006c28:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	result->table_reference[11] = 11010;
 8006c2c:	697b      	ldr	r3, [r7, #20]
 8006c2e:	2200      	movs	r2, #0
 8006c30:	f042 0202 	orr.w	r2, r2, #2
 8006c34:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 8006c38:	2200      	movs	r2, #0
 8006c3a:	f042 022b 	orr.w	r2, r2, #43	; 0x2b
 8006c3e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	result->table_reference[12] = 10770;
 8006c42:	697b      	ldr	r3, [r7, #20]
 8006c44:	2200      	movs	r2, #0
 8006c46:	f042 0212 	orr.w	r2, r2, #18
 8006c4a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8006c4e:	2200      	movs	r2, #0
 8006c50:	f042 022a 	orr.w	r2, r2, #42	; 0x2a
 8006c54:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	result->table_reference[13] = 10530;
 8006c58:	697b      	ldr	r3, [r7, #20]
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	f042 0222 	orr.w	r2, r2, #34	; 0x22
 8006c60:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 8006c64:	2200      	movs	r2, #0
 8006c66:	f042 0229 	orr.w	r2, r2, #41	; 0x29
 8006c6a:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	result->table_reference[14] = 10300;
 8006c6e:	697b      	ldr	r3, [r7, #20]
 8006c70:	2200      	movs	r2, #0
 8006c72:	f042 023c 	orr.w	r2, r2, #60	; 0x3c
 8006c76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	f042 0228 	orr.w	r2, r2, #40	; 0x28
 8006c80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	result->table_reference[15] = 10080;
 8006c84:	697b      	ldr	r3, [r7, #20]
 8006c86:	2200      	movs	r2, #0
 8006c88:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8006c8c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 8006c90:	2200      	movs	r2, #0
 8006c92:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 8006c96:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	result->table_reference[16] = 9860;
 8006c9a:	697b      	ldr	r3, [r7, #20]
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	f062 027b 	orn	r2, r2, #123	; 0x7b
 8006ca2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	f042 0226 	orr.w	r2, r2, #38	; 0x26
 8006cac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	result->table_reference[17] = 9660;
 8006cb0:	697b      	ldr	r3, [r7, #20]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	f062 0243 	orn	r2, r2, #67	; 0x43
 8006cb8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	f042 0225 	orr.w	r2, r2, #37	; 0x25
 8006cc2:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	result->table_reference[18] = 9460;
 8006cc6:	697b      	ldr	r3, [r7, #20]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	f062 020b 	orn	r2, r2, #11
 8006cce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	f042 0224 	orr.w	r2, r2, #36	; 0x24
 8006cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	result->table_reference[19] = 9270;
 8006cdc:	697b      	ldr	r3, [r7, #20]
 8006cde:	2200      	movs	r2, #0
 8006ce0:	f042 0236 	orr.w	r2, r2, #54	; 0x36
 8006ce4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006ce8:	2200      	movs	r2, #0
 8006cea:	f042 0224 	orr.w	r2, r2, #36	; 0x24
 8006cee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f

	result->table_reference[20] = 9080;
 8006cf2:	697b      	ldr	r3, [r7, #20]
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	f042 0278 	orr.w	r2, r2, #120	; 0x78
 8006cfa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006cfe:	2200      	movs	r2, #0
 8006d00:	f042 0223 	orr.w	r2, r2, #35	; 0x23
 8006d04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	result->table_reference[21] = 8900;
 8006d08:	697b      	ldr	r3, [r7, #20]
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	f062 023b 	orn	r2, r2, #59	; 0x3b
 8006d10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006d14:	2200      	movs	r2, #0
 8006d16:	f042 0222 	orr.w	r2, r2, #34	; 0x22
 8006d1a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
	result->table_reference[22] = 8730;
 8006d1e:	697b      	ldr	r3, [r7, #20]
 8006d20:	2200      	movs	r2, #0
 8006d22:	f042 021a 	orr.w	r2, r2, #26
 8006d26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	f042 0222 	orr.w	r2, r2, #34	; 0x22
 8006d30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	result->table_reference[23] = 8570;
 8006d34:	697b      	ldr	r3, [r7, #20]
 8006d36:	2200      	movs	r2, #0
 8006d38:	f042 027a 	orr.w	r2, r2, #122	; 0x7a
 8006d3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006d40:	2200      	movs	r2, #0
 8006d42:	f042 0221 	orr.w	r2, r2, #33	; 0x21
 8006d46:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	result->table_reference[24] = 8410;
 8006d4a:	697b      	ldr	r3, [r7, #20]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	f062 0225 	orn	r2, r2, #37	; 0x25
 8006d52:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8006d56:	2200      	movs	r2, #0
 8006d58:	f042 0220 	orr.w	r2, r2, #32
 8006d5c:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	result->table_reference[25] = 8250;
 8006d60:	697b      	ldr	r3, [r7, #20]
 8006d62:	2200      	movs	r2, #0
 8006d64:	f042 023a 	orr.w	r2, r2, #58	; 0x3a
 8006d68:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	f042 0220 	orr.w	r2, r2, #32
 8006d72:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	result->table_reference[25] = 8110;
 8006d76:	697b      	ldr	r3, [r7, #20]
 8006d78:	2200      	movs	r2, #0
 8006d7a:	f062 0251 	orn	r2, r2, #81	; 0x51
 8006d7e:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 8006d82:	2200      	movs	r2, #0
 8006d84:	f042 021f 	orr.w	r2, r2, #31
 8006d88:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	result->table_reference[27] = 7960;
 8006d8c:	697b      	ldr	r3, [r7, #20]
 8006d8e:	2200      	movs	r2, #0
 8006d90:	f042 0218 	orr.w	r2, r2, #24
 8006d94:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 8006d98:	2200      	movs	r2, #0
 8006d9a:	f042 021f 	orr.w	r2, r2, #31
 8006d9e:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
	result->table_reference[28] = 7820;
 8006da2:	697b      	ldr	r3, [r7, #20]
 8006da4:	2200      	movs	r2, #0
 8006da6:	f062 0273 	orn	r2, r2, #115	; 0x73
 8006daa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8006dae:	2200      	movs	r2, #0
 8006db0:	f042 021e 	orr.w	r2, r2, #30
 8006db4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	result->table_reference[29] = 7690;
 8006db8:	697b      	ldr	r3, [r7, #20]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	f042 020a 	orr.w	r2, r2, #10
 8006dc0:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	f042 021e 	orr.w	r2, r2, #30
 8006dca:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53

	result->table_reference[30] = 7560;
 8006dce:	697b      	ldr	r3, [r7, #20]
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	f062 0277 	orn	r2, r2, #119	; 0x77
 8006dd6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8006dda:	2200      	movs	r2, #0
 8006ddc:	f042 021d 	orr.w	r2, r2, #29
 8006de0:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	result->table_reference[31] = 7430;
 8006de4:	697b      	ldr	r3, [r7, #20]
 8006de6:	2200      	movs	r2, #0
 8006de8:	f042 0206 	orr.w	r2, r2, #6
 8006dec:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
 8006df0:	2200      	movs	r2, #0
 8006df2:	f042 021d 	orr.w	r2, r2, #29
 8006df6:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	result->table_reference[32] = 7300;
 8006dfa:	697b      	ldr	r3, [r7, #20]
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	f062 027b 	orn	r2, r2, #123	; 0x7b
 8006e02:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8006e06:	2200      	movs	r2, #0
 8006e08:	f042 021c 	orr.w	r2, r2, #28
 8006e0c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	result->table_reference[33] = 7180;
 8006e10:	697b      	ldr	r3, [r7, #20]
 8006e12:	2200      	movs	r2, #0
 8006e14:	f042 020c 	orr.w	r2, r2, #12
 8006e18:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	f042 021c 	orr.w	r2, r2, #28
 8006e22:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
	result->table_reference[34] = 7070;
 8006e26:	697b      	ldr	r3, [r7, #20]
 8006e28:	2200      	movs	r2, #0
 8006e2a:	f062 0261 	orn	r2, r2, #97	; 0x61
 8006e2e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8006e32:	2200      	movs	r2, #0
 8006e34:	f042 021b 	orr.w	r2, r2, #27
 8006e38:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
	result->table_reference[35] = 6950;
 8006e3c:	697b      	ldr	r3, [r7, #20]
 8006e3e:	2200      	movs	r2, #0
 8006e40:	f042 0226 	orr.w	r2, r2, #38	; 0x26
 8006e44:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
 8006e48:	2200      	movs	r2, #0
 8006e4a:	f042 021b 	orr.w	r2, r2, #27
 8006e4e:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
	result->table_reference[36] = 6840;
 8006e52:	697b      	ldr	r3, [r7, #20]
 8006e54:	2200      	movs	r2, #0
 8006e56:	f062 0247 	orn	r2, r2, #71	; 0x47
 8006e5a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 8006e5e:	2200      	movs	r2, #0
 8006e60:	f042 021a 	orr.w	r2, r2, #26
 8006e64:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
	result->table_reference[37] = 6730;
 8006e68:	697b      	ldr	r3, [r7, #20]
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	f042 024a 	orr.w	r2, r2, #74	; 0x4a
 8006e70:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
 8006e74:	2200      	movs	r2, #0
 8006e76:	f042 021a 	orr.w	r2, r2, #26
 8006e7a:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
	result->table_reference[38] = 6630;
 8006e7e:	697b      	ldr	r3, [r7, #20]
 8006e80:	2200      	movs	r2, #0
 8006e82:	f062 0219 	orn	r2, r2, #25
 8006e86:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	f042 0219 	orr.w	r2, r2, #25
 8006e90:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
	result->table_reference[39] = 6530;
 8006e94:	697b      	ldr	r3, [r7, #20]
 8006e96:	2200      	movs	r2, #0
 8006e98:	f062 027d 	orn	r2, r2, #125	; 0x7d
 8006e9c:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	f042 0219 	orr.w	r2, r2, #25
 8006ea6:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
	result->table_reference[40] = 6410;
 8006eaa:	697b      	ldr	r3, [r7, #20]
 8006eac:	2200      	movs	r2, #0
 8006eae:	f042 020a 	orr.w	r2, r2, #10
 8006eb2:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	f042 0219 	orr.w	r2, r2, #25
 8006ebc:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

	return result;
 8006ec0:	697b      	ldr	r3, [r7, #20]
}
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	3718      	adds	r7, #24
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	bd80      	pop	{r7, pc}
	...

08006ecc <sen0237a_read>:
void sen0237a_set_dma(sen0237a* sen0237a, direct_memory_access* dma){
	if( sen0237a == NULL ) return;
	sen0237a->dma = dma;
}

float sen0237a_read(sen0237a* sen0237a){
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b088      	sub	sp, #32
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
	if( sen0237a == NULL ) return 0.0;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d102      	bne.n	8006ee0 <sen0237a_read+0x14>
 8006eda:	f04f 0300 	mov.w	r3, #0
 8006ede:	e080      	b.n	8006fe2 <sen0237a_read+0x116>

	float adc_raw = direct_memory_access_get_adc_value(sen0237a->dma, sen0237a->channel);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681a      	ldr	r2, [r3, #0]
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	685b      	ldr	r3, [r3, #4]
 8006ee8:	4619      	mov	r1, r3
 8006eea:	4610      	mov	r0, r2
 8006eec:	f7fb f928 	bl	8002140 <direct_memory_access_get_adc_value>
 8006ef0:	ee07 0a90 	vmov	s15, r0
 8006ef4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ef8:	edc7 7a06 	vstr	s15, [r7, #24]
	float adc_voltage = adc_raw * ( 5000.0 / 4096.0 );
 8006efc:	edd7 7a06 	vldr	s15, [r7, #24]
 8006f00:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8006ff0 <sen0237a_read+0x124>
 8006f04:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006f08:	edc7 7a05 	vstr	s15, [r7, #20]

	if ( sen0237a->mode_calibration != 0x00 ){
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	7a1b      	ldrb	r3, [r3, #8]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d001      	beq.n	8006f18 <sen0237a_read+0x4c>
		return adc_voltage;
 8006f14:	697b      	ldr	r3, [r7, #20]
 8006f16:	e064      	b.n	8006fe2 <sen0237a_read+0x116>
	}

	uint16_t saturation = 0;
 8006f18:	2300      	movs	r3, #0
 8006f1a:	83fb      	strh	r3, [r7, #30]
	char points_for_calibration = sen0237a->points_for_calibration;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	7a5b      	ldrb	r3, [r3, #9]
 8006f20:	74fb      	strb	r3, [r7, #19]
	if( points_for_calibration == 0x01 ){
 8006f22:	7cfb      	ldrb	r3, [r7, #19]
 8006f24:	2b01      	cmp	r3, #1
 8006f26:	d11c      	bne.n	8006f62 <sen0237a_read+0x96>
		saturation = (uint32_t) sen0237a->voltage_point_1 + ( (uint32_t) 35 * sen0237a->current_temperature ) - ( (uint32_t) sen0237a->temperature_point_1 * 35 );
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	f8d3 300a 	ldr.w	r3, [r3, #10]
 8006f2e:	b29a      	uxth	r2, r3
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	695b      	ldr	r3, [r3, #20]
 8006f34:	b29b      	uxth	r3, r3
 8006f36:	4619      	mov	r1, r3
 8006f38:	0089      	lsls	r1, r1, #2
 8006f3a:	440b      	add	r3, r1
 8006f3c:	4619      	mov	r1, r3
 8006f3e:	00c9      	lsls	r1, r1, #3
 8006f40:	1acb      	subs	r3, r1, r3
 8006f42:	b29b      	uxth	r3, r3
 8006f44:	4413      	add	r3, r2
 8006f46:	b29a      	uxth	r2, r3
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	7b9b      	ldrb	r3, [r3, #14]
 8006f4c:	b29b      	uxth	r3, r3
 8006f4e:	4619      	mov	r1, r3
 8006f50:	0089      	lsls	r1, r1, #2
 8006f52:	440b      	add	r3, r1
 8006f54:	4619      	mov	r1, r3
 8006f56:	00c9      	lsls	r1, r1, #3
 8006f58:	1acb      	subs	r3, r1, r3
 8006f5a:	b29b      	uxth	r3, r3
 8006f5c:	1ad3      	subs	r3, r2, r3
 8006f5e:	83fb      	strh	r3, [r7, #30]
 8006f60:	e026      	b.n	8006fb0 <sen0237a_read+0xe4>
	} else if ( points_for_calibration == 0x02 ){
 8006f62:	7cfb      	ldrb	r3, [r7, #19]
 8006f64:	2b02      	cmp	r3, #2
 8006f66:	d123      	bne.n	8006fb0 <sen0237a_read+0xe4>
		saturation = (int16_t)( (int8_t)sen0237a->current_temperature - sen0237a->temperature_point_2) * ( (uint16_t)sen0237a->voltage_point_1 - sen0237a->voltage_point_2 ) / ( (uint8_t)sen0237a->temperature_point_1 - sen0237a->temperature_point_2 ) + sen0237a->voltage_point_2;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	695b      	ldr	r3, [r3, #20]
 8006f6c:	b25b      	sxtb	r3, r3
 8006f6e:	b21a      	sxth	r2, r3
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	7cdb      	ldrb	r3, [r3, #19]
 8006f74:	b21b      	sxth	r3, r3
 8006f76:	1ad3      	subs	r3, r2, r3
 8006f78:	b21b      	sxth	r3, r3
 8006f7a:	461a      	mov	r2, r3
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	f8d3 300a 	ldr.w	r3, [r3, #10]
 8006f82:	b29b      	uxth	r3, r3
 8006f84:	4619      	mov	r1, r3
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	f8d3 300f 	ldr.w	r3, [r3, #15]
 8006f8c:	1acb      	subs	r3, r1, r3
 8006f8e:	fb03 f302 	mul.w	r3, r3, r2
 8006f92:	687a      	ldr	r2, [r7, #4]
 8006f94:	7b92      	ldrb	r2, [r2, #14]
 8006f96:	4611      	mov	r1, r2
 8006f98:	687a      	ldr	r2, [r7, #4]
 8006f9a:	7cd2      	ldrb	r2, [r2, #19]
 8006f9c:	1a8a      	subs	r2, r1, r2
 8006f9e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006fa2:	b29a      	uxth	r2, r3
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	f8d3 300f 	ldr.w	r3, [r3, #15]
 8006faa:	b29b      	uxth	r3, r3
 8006fac:	4413      	add	r3, r2
 8006fae:	83fb      	strh	r3, [r7, #30]
	}

	float result = (adc_voltage * sen0237a->table_reference[sen0237a->current_temperature] / saturation);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	695a      	ldr	r2, [r3, #20]
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	320c      	adds	r2, #12
 8006fb8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8006fbc:	b29b      	uxth	r3, r3
 8006fbe:	ee07 3a90 	vmov	s15, r3
 8006fc2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006fc6:	edd7 7a05 	vldr	s15, [r7, #20]
 8006fca:	ee67 6a27 	vmul.f32	s13, s14, s15
 8006fce:	8bfb      	ldrh	r3, [r7, #30]
 8006fd0:	ee07 3a90 	vmov	s15, r3
 8006fd4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006fd8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006fdc:	edc7 7a03 	vstr	s15, [r7, #12]
	return result;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	ee07 3a90 	vmov	s15, r3
}
 8006fe6:	eeb0 0a67 	vmov.f32	s0, s15
 8006fea:	3720      	adds	r7, #32
 8006fec:	46bd      	mov	sp, r7
 8006fee:	bd80      	pop	{r7, pc}
 8006ff0:	3f9c4000 	.word	0x3f9c4000

08006ff4 <SSD1306_Write_Command>:
extern I2C_HandleTypeDef hi2c2;

#define SSD1306_I2C       &hi2c2
#define SSD1306_I2C_ADDR  (0x78)

uint8_t SSD1306_Write_Command(uint8_t command){
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b086      	sub	sp, #24
 8006ff8:	af02      	add	r7, sp, #8
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	71fb      	strb	r3, [r7, #7]
	uint8_t data[2] = {0x00, command};
 8006ffe:	2300      	movs	r3, #0
 8007000:	733b      	strb	r3, [r7, #12]
 8007002:	79fb      	ldrb	r3, [r7, #7]
 8007004:	737b      	strb	r3, [r7, #13]

    if(HAL_I2C_Master_Transmit(SSD1306_I2C, SSD1306_I2C_ADDR, data, 2, 2) != HAL_OK)
 8007006:	f107 020c 	add.w	r2, r7, #12
 800700a:	2302      	movs	r3, #2
 800700c:	9300      	str	r3, [sp, #0]
 800700e:	2302      	movs	r3, #2
 8007010:	2178      	movs	r1, #120	; 0x78
 8007012:	4806      	ldr	r0, [pc, #24]	; (800702c <SSD1306_Write_Command+0x38>)
 8007014:	f003 f994 	bl	800a340 <HAL_I2C_Master_Transmit>
 8007018:	4603      	mov	r3, r0
 800701a:	2b00      	cmp	r3, #0
 800701c:	d001      	beq.n	8007022 <SSD1306_Write_Command+0x2e>
        return 0;
 800701e:	2300      	movs	r3, #0
 8007020:	e000      	b.n	8007024 <SSD1306_Write_Command+0x30>
    else
        return 1;
 8007022:	2301      	movs	r3, #1
}
 8007024:	4618      	mov	r0, r3
 8007026:	3710      	adds	r7, #16
 8007028:	46bd      	mov	sp, r7
 800702a:	bd80      	pop	{r7, pc}
 800702c:	20000b54 	.word	0x20000b54

08007030 <SSD1306_Goto>:
        return 0;
    else
        return 1;
}

void SSD1306_Goto(uint8_t col, uint8_t row){
 8007030:	b580      	push	{r7, lr}
 8007032:	b082      	sub	sp, #8
 8007034:	af00      	add	r7, sp, #0
 8007036:	4603      	mov	r3, r0
 8007038:	460a      	mov	r2, r1
 800703a:	71fb      	strb	r3, [r7, #7]
 800703c:	4613      	mov	r3, r2
 800703e:	71bb      	strb	r3, [r7, #6]
	if(row >= SSD1306_HEIGHT/8)
 8007040:	79bb      	ldrb	r3, [r7, #6]
 8007042:	2b07      	cmp	r3, #7
 8007044:	d901      	bls.n	800704a <SSD1306_Goto+0x1a>
		row = SSD1306_HEIGHT/8 - 1;
 8007046:	2307      	movs	r3, #7
 8007048:	71bb      	strb	r3, [r7, #6]

	if(col >= SSD1306_WIDTH)
 800704a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800704e:	2b00      	cmp	r3, #0
 8007050:	da01      	bge.n	8007056 <SSD1306_Goto+0x26>
		col = SSD1306_WIDTH - 1;
 8007052:	237f      	movs	r3, #127	; 0x7f
 8007054:	71fb      	strb	r3, [r7, #7]

	SSD1306_Write_Command(0xB0 | row);
 8007056:	79bb      	ldrb	r3, [r7, #6]
 8007058:	f063 034f 	orn	r3, r3, #79	; 0x4f
 800705c:	b2db      	uxtb	r3, r3
 800705e:	4618      	mov	r0, r3
 8007060:	f7ff ffc8 	bl	8006ff4 <SSD1306_Write_Command>
	SSD1306_Write_Command(0x00 | (col & 0x0F));
 8007064:	79fb      	ldrb	r3, [r7, #7]
 8007066:	f003 030f 	and.w	r3, r3, #15
 800706a:	b2db      	uxtb	r3, r3
 800706c:	4618      	mov	r0, r3
 800706e:	f7ff ffc1 	bl	8006ff4 <SSD1306_Write_Command>
	SSD1306_Write_Command(0x10 | (col >> 4));
 8007072:	79fb      	ldrb	r3, [r7, #7]
 8007074:	091b      	lsrs	r3, r3, #4
 8007076:	b2db      	uxtb	r3, r3
 8007078:	f043 0310 	orr.w	r3, r3, #16
 800707c:	b2db      	uxtb	r3, r3
 800707e:	4618      	mov	r0, r3
 8007080:	f7ff ffb8 	bl	8006ff4 <SSD1306_Write_Command>
}
 8007084:	bf00      	nop
 8007086:	3708      	adds	r7, #8
 8007088:	46bd      	mov	sp, r7
 800708a:	bd80      	pop	{r7, pc}

0800708c <SSD1306_Write_Char>:

void SSD1306_Write_Char(uint8_t c, SSD1306_Font_t* font){
 800708c:	b580      	push	{r7, lr}
 800708e:	b08a      	sub	sp, #40	; 0x28
 8007090:	af02      	add	r7, sp, #8
 8007092:	4603      	mov	r3, r0
 8007094:	6039      	str	r1, [r7, #0]
 8007096:	71fb      	strb	r3, [r7, #7]
	const uint8_t *base;
	uint8_t width, n;
	uint8_t data[16];

	if(c < 32 || c > 127)
 8007098:	79fb      	ldrb	r3, [r7, #7]
 800709a:	2b1f      	cmp	r3, #31
 800709c:	d903      	bls.n	80070a6 <SSD1306_Write_Char+0x1a>
 800709e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	da01      	bge.n	80070aa <SSD1306_Write_Char+0x1e>
		c = 127;
 80070a6:	237f      	movs	r3, #127	; 0x7f
 80070a8:	71fb      	strb	r3, [r7, #7]

	c -= 32;
 80070aa:	79fb      	ldrb	r3, [r7, #7]
 80070ac:	3b20      	subs	r3, #32
 80070ae:	71fb      	strb	r3, [r7, #7]

	width = font->width;
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	781b      	ldrb	r3, [r3, #0]
 80070b4:	77bb      	strb	r3, [r7, #30]
	data[0] = 0x40;
 80070b6:	2340      	movs	r3, #64	; 0x40
 80070b8:	723b      	strb	r3, [r7, #8]
	base = font->data + width*c;
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	685b      	ldr	r3, [r3, #4]
 80070be:	7fba      	ldrb	r2, [r7, #30]
 80070c0:	79f9      	ldrb	r1, [r7, #7]
 80070c2:	fb01 f202 	mul.w	r2, r1, r2
 80070c6:	4413      	add	r3, r2
 80070c8:	61bb      	str	r3, [r7, #24]
	for(n = 0 ; n < width ; n++)
 80070ca:	2300      	movs	r3, #0
 80070cc:	77fb      	strb	r3, [r7, #31]
 80070ce:	e00d      	b.n	80070ec <SSD1306_Write_Char+0x60>
		data[1+n] = base[n];
 80070d0:	7ffb      	ldrb	r3, [r7, #31]
 80070d2:	69ba      	ldr	r2, [r7, #24]
 80070d4:	441a      	add	r2, r3
 80070d6:	7ffb      	ldrb	r3, [r7, #31]
 80070d8:	3301      	adds	r3, #1
 80070da:	7812      	ldrb	r2, [r2, #0]
 80070dc:	f107 0120 	add.w	r1, r7, #32
 80070e0:	440b      	add	r3, r1
 80070e2:	f803 2c18 	strb.w	r2, [r3, #-24]
	for(n = 0 ; n < width ; n++)
 80070e6:	7ffb      	ldrb	r3, [r7, #31]
 80070e8:	3301      	adds	r3, #1
 80070ea:	77fb      	strb	r3, [r7, #31]
 80070ec:	7ffa      	ldrb	r2, [r7, #31]
 80070ee:	7fbb      	ldrb	r3, [r7, #30]
 80070f0:	429a      	cmp	r2, r3
 80070f2:	d3ed      	bcc.n	80070d0 <SSD1306_Write_Char+0x44>

	data[width+1] = 0x00;
 80070f4:	7fbb      	ldrb	r3, [r7, #30]
 80070f6:	3301      	adds	r3, #1
 80070f8:	f107 0220 	add.w	r2, r7, #32
 80070fc:	4413      	add	r3, r2
 80070fe:	2200      	movs	r2, #0
 8007100:	f803 2c18 	strb.w	r2, [r3, #-24]

	HAL_I2C_Master_Transmit(SSD1306_I2C,SSD1306_I2C_ADDR, data, width+2, 10);
 8007104:	7fbb      	ldrb	r3, [r7, #30]
 8007106:	b29b      	uxth	r3, r3
 8007108:	3302      	adds	r3, #2
 800710a:	b299      	uxth	r1, r3
 800710c:	f107 0208 	add.w	r2, r7, #8
 8007110:	230a      	movs	r3, #10
 8007112:	9300      	str	r3, [sp, #0]
 8007114:	460b      	mov	r3, r1
 8007116:	2178      	movs	r1, #120	; 0x78
 8007118:	4803      	ldr	r0, [pc, #12]	; (8007128 <SSD1306_Write_Char+0x9c>)
 800711a:	f003 f911 	bl	800a340 <HAL_I2C_Master_Transmit>
}
 800711e:	bf00      	nop
 8007120:	3720      	adds	r7, #32
 8007122:	46bd      	mov	sp, r7
 8007124:	bd80      	pop	{r7, pc}
 8007126:	bf00      	nop
 8007128:	20000b54 	.word	0x20000b54

0800712c <SSD1306_Write_Buffer>:

void SSD1306_Write_Buffer(uint8_t* str, uint8_t size, SSD1306_Font_t* font){
 800712c:	b580      	push	{r7, lr}
 800712e:	b086      	sub	sp, #24
 8007130:	af00      	add	r7, sp, #0
 8007132:	60f8      	str	r0, [r7, #12]
 8007134:	460b      	mov	r3, r1
 8007136:	607a      	str	r2, [r7, #4]
 8007138:	72fb      	strb	r3, [r7, #11]
	uint8_t  n;
	for(n = 0 ; n < size ; n++)
 800713a:	2300      	movs	r3, #0
 800713c:	75fb      	strb	r3, [r7, #23]
 800713e:	e00a      	b.n	8007156 <SSD1306_Write_Buffer+0x2a>
		SSD1306_Write_Char(str[n],font);
 8007140:	7dfb      	ldrb	r3, [r7, #23]
 8007142:	68fa      	ldr	r2, [r7, #12]
 8007144:	4413      	add	r3, r2
 8007146:	781b      	ldrb	r3, [r3, #0]
 8007148:	6879      	ldr	r1, [r7, #4]
 800714a:	4618      	mov	r0, r3
 800714c:	f7ff ff9e 	bl	800708c <SSD1306_Write_Char>
	for(n = 0 ; n < size ; n++)
 8007150:	7dfb      	ldrb	r3, [r7, #23]
 8007152:	3301      	adds	r3, #1
 8007154:	75fb      	strb	r3, [r7, #23]
 8007156:	7dfa      	ldrb	r2, [r7, #23]
 8007158:	7afb      	ldrb	r3, [r7, #11]
 800715a:	429a      	cmp	r2, r3
 800715c:	d3f0      	bcc.n	8007140 <SSD1306_Write_Buffer+0x14>
}
 800715e:	bf00      	nop
 8007160:	3718      	adds	r7, #24
 8007162:	46bd      	mov	sp, r7
 8007164:	bd80      	pop	{r7, pc}
	...

08007168 <SSD1306_Write_String>:

void SSD1306_Write_String(uint8_t *str){
 8007168:	b580      	push	{r7, lr}
 800716a:	b082      	sub	sp, #8
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
	SSD1306_Write_Buffer(str,strlen((char *)str),&SSD1306_Font_07X05);
 8007170:	6878      	ldr	r0, [r7, #4]
 8007172:	f7f9 f837 	bl	80001e4 <strlen>
 8007176:	4603      	mov	r3, r0
 8007178:	b2db      	uxtb	r3, r3
 800717a:	4a04      	ldr	r2, [pc, #16]	; (800718c <SSD1306_Write_String+0x24>)
 800717c:	4619      	mov	r1, r3
 800717e:	6878      	ldr	r0, [r7, #4]
 8007180:	f7ff ffd4 	bl	800712c <SSD1306_Write_Buffer>
}
 8007184:	bf00      	nop
 8007186:	3708      	adds	r7, #8
 8007188:	46bd      	mov	sp, r7
 800718a:	bd80      	pop	{r7, pc}
 800718c:	200000d4 	.word	0x200000d4

08007190 <SSD1306_Write_Centered_String>:

void SSD1306_Write_Centered_String(uint8_t* str, uint8_t row){
 8007190:	b580      	push	{r7, lr}
 8007192:	b084      	sub	sp, #16
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
 8007198:	460b      	mov	r3, r1
 800719a:	70fb      	strb	r3, [r7, #3]
	int16_t col = (SSD1306_WIDTH - strlen((char *)str)*6)/2;
 800719c:	6878      	ldr	r0, [r7, #4]
 800719e:	f7f9 f821 	bl	80001e4 <strlen>
 80071a2:	4602      	mov	r2, r0
 80071a4:	4613      	mov	r3, r2
 80071a6:	005b      	lsls	r3, r3, #1
 80071a8:	4413      	add	r3, r2
 80071aa:	005b      	lsls	r3, r3, #1
 80071ac:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80071b0:	085b      	lsrs	r3, r3, #1
 80071b2:	81fb      	strh	r3, [r7, #14]
	col = col < 0 ? 0 : col;
 80071b4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80071b8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80071bc:	81fb      	strh	r3, [r7, #14]
	SSD1306_Goto(col,row);
 80071be:	89fb      	ldrh	r3, [r7, #14]
 80071c0:	b2db      	uxtb	r3, r3
 80071c2:	78fa      	ldrb	r2, [r7, #3]
 80071c4:	4611      	mov	r1, r2
 80071c6:	4618      	mov	r0, r3
 80071c8:	f7ff ff32 	bl	8007030 <SSD1306_Goto>
	SSD1306_Write_String(str);
 80071cc:	6878      	ldr	r0, [r7, #4]
 80071ce:	f7ff ffcb 	bl	8007168 <SSD1306_Write_String>
}
 80071d2:	bf00      	nop
 80071d4:	3710      	adds	r7, #16
 80071d6:	46bd      	mov	sp, r7
 80071d8:	bd80      	pop	{r7, pc}
	...

080071dc <SDD1306_Clear_Screen>:

void SDD1306_Clear_Screen(void){
 80071dc:	b580      	push	{r7, lr}
 80071de:	b088      	sub	sp, #32
 80071e0:	af02      	add	r7, sp, #8
	uint8_t n,m;
	uint8_t data[] = {0x40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
 80071e2:	1d3b      	adds	r3, r7, #4
 80071e4:	2200      	movs	r2, #0
 80071e6:	601a      	str	r2, [r3, #0]
 80071e8:	605a      	str	r2, [r3, #4]
 80071ea:	609a      	str	r2, [r3, #8]
 80071ec:	60da      	str	r2, [r3, #12]
 80071ee:	741a      	strb	r2, [r3, #16]
 80071f0:	2340      	movs	r3, #64	; 0x40
 80071f2:	713b      	strb	r3, [r7, #4]

	SSD1306_Goto(0,0);
 80071f4:	2100      	movs	r1, #0
 80071f6:	2000      	movs	r0, #0
 80071f8:	f7ff ff1a 	bl	8007030 <SSD1306_Goto>

	for(n = 0 ; n < SSD1306_HEIGHT/8 ; n++)
 80071fc:	2300      	movs	r3, #0
 80071fe:	75fb      	strb	r3, [r7, #23]
 8007200:	e013      	b.n	800722a <SDD1306_Clear_Screen+0x4e>
		for(m = 0 ; m < SSD1306_WIDTH/16 ; m++)
 8007202:	2300      	movs	r3, #0
 8007204:	75bb      	strb	r3, [r7, #22]
 8007206:	e00a      	b.n	800721e <SDD1306_Clear_Screen+0x42>
			HAL_I2C_Master_Transmit(SSD1306_I2C,SSD1306_I2C_ADDR, data, 17, 10);
 8007208:	1d3a      	adds	r2, r7, #4
 800720a:	230a      	movs	r3, #10
 800720c:	9300      	str	r3, [sp, #0]
 800720e:	2311      	movs	r3, #17
 8007210:	2178      	movs	r1, #120	; 0x78
 8007212:	4809      	ldr	r0, [pc, #36]	; (8007238 <SDD1306_Clear_Screen+0x5c>)
 8007214:	f003 f894 	bl	800a340 <HAL_I2C_Master_Transmit>
		for(m = 0 ; m < SSD1306_WIDTH/16 ; m++)
 8007218:	7dbb      	ldrb	r3, [r7, #22]
 800721a:	3301      	adds	r3, #1
 800721c:	75bb      	strb	r3, [r7, #22]
 800721e:	7dbb      	ldrb	r3, [r7, #22]
 8007220:	2b07      	cmp	r3, #7
 8007222:	d9f1      	bls.n	8007208 <SDD1306_Clear_Screen+0x2c>
	for(n = 0 ; n < SSD1306_HEIGHT/8 ; n++)
 8007224:	7dfb      	ldrb	r3, [r7, #23]
 8007226:	3301      	adds	r3, #1
 8007228:	75fb      	strb	r3, [r7, #23]
 800722a:	7dfb      	ldrb	r3, [r7, #23]
 800722c:	2b07      	cmp	r3, #7
 800722e:	d9e8      	bls.n	8007202 <SDD1306_Clear_Screen+0x26>
}
 8007230:	bf00      	nop
 8007232:	3718      	adds	r7, #24
 8007234:	46bd      	mov	sp, r7
 8007236:	bd80      	pop	{r7, pc}
 8007238:	20000b54 	.word	0x20000b54

0800723c <SSD1306_Init>:

uint8_t SSD1306_Init(void){
 800723c:	b580      	push	{r7, lr}
 800723e:	af00      	add	r7, sp, #0
	
	HAL_Delay(100);
 8007240:	2064      	movs	r0, #100	; 0x64
 8007242:	f000 ff3f 	bl	80080c4 <HAL_Delay>

	SSD1306_Write_Command(0xAE); //display off
 8007246:	20ae      	movs	r0, #174	; 0xae
 8007248:	f7ff fed4 	bl	8006ff4 <SSD1306_Write_Command>
	SSD1306_Write_Command(0x20); //Set Memory Addressing Mode
 800724c:	2020      	movs	r0, #32
 800724e:	f7ff fed1 	bl	8006ff4 <SSD1306_Write_Command>
	SSD1306_Write_Command(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8007252:	2010      	movs	r0, #16
 8007254:	f7ff fece 	bl	8006ff4 <SSD1306_Write_Command>
	SSD1306_Write_Command(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8007258:	20b0      	movs	r0, #176	; 0xb0
 800725a:	f7ff fecb 	bl	8006ff4 <SSD1306_Write_Command>
	SSD1306_Write_Command(0xC8); //Set COM Output Scan Direction
 800725e:	20c8      	movs	r0, #200	; 0xc8
 8007260:	f7ff fec8 	bl	8006ff4 <SSD1306_Write_Command>
	SSD1306_Write_Command(0x00); //---set low column address
 8007264:	2000      	movs	r0, #0
 8007266:	f7ff fec5 	bl	8006ff4 <SSD1306_Write_Command>
	SSD1306_Write_Command(0x10); //---set high column address
 800726a:	2010      	movs	r0, #16
 800726c:	f7ff fec2 	bl	8006ff4 <SSD1306_Write_Command>
	SSD1306_Write_Command(0x40); //--set start line address
 8007270:	2040      	movs	r0, #64	; 0x40
 8007272:	f7ff febf 	bl	8006ff4 <SSD1306_Write_Command>
	SSD1306_Write_Command(0x81); //--set contrast control register
 8007276:	2081      	movs	r0, #129	; 0x81
 8007278:	f7ff febc 	bl	8006ff4 <SSD1306_Write_Command>
	SSD1306_Write_Command(0xFF);
 800727c:	20ff      	movs	r0, #255	; 0xff
 800727e:	f7ff feb9 	bl	8006ff4 <SSD1306_Write_Command>
	SSD1306_Write_Command(0xA1); //--set segment re-map 0 to 127
 8007282:	20a1      	movs	r0, #161	; 0xa1
 8007284:	f7ff feb6 	bl	8006ff4 <SSD1306_Write_Command>
	SSD1306_Write_Command(0xA6); //--set normal display
 8007288:	20a6      	movs	r0, #166	; 0xa6
 800728a:	f7ff feb3 	bl	8006ff4 <SSD1306_Write_Command>
	SSD1306_Write_Command(0xA8); //--set multiplex ratio(1 to 64)
 800728e:	20a8      	movs	r0, #168	; 0xa8
 8007290:	f7ff feb0 	bl	8006ff4 <SSD1306_Write_Command>
	SSD1306_Write_Command(0x3F); //
 8007294:	203f      	movs	r0, #63	; 0x3f
 8007296:	f7ff fead 	bl	8006ff4 <SSD1306_Write_Command>
	SSD1306_Write_Command(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800729a:	20a4      	movs	r0, #164	; 0xa4
 800729c:	f7ff feaa 	bl	8006ff4 <SSD1306_Write_Command>
	SSD1306_Write_Command(0xD3); //-set display offset
 80072a0:	20d3      	movs	r0, #211	; 0xd3
 80072a2:	f7ff fea7 	bl	8006ff4 <SSD1306_Write_Command>
	SSD1306_Write_Command(0x00); //-not offset
 80072a6:	2000      	movs	r0, #0
 80072a8:	f7ff fea4 	bl	8006ff4 <SSD1306_Write_Command>
	SSD1306_Write_Command(0xD5); //--set display clock divide ratio/oscillator frequency
 80072ac:	20d5      	movs	r0, #213	; 0xd5
 80072ae:	f7ff fea1 	bl	8006ff4 <SSD1306_Write_Command>
	SSD1306_Write_Command(0xf0); //--set divide ratio 0xF0
 80072b2:	20f0      	movs	r0, #240	; 0xf0
 80072b4:	f7ff fe9e 	bl	8006ff4 <SSD1306_Write_Command>
	SSD1306_Write_Command(0xD9); //--set pre-charge period
 80072b8:	20d9      	movs	r0, #217	; 0xd9
 80072ba:	f7ff fe9b 	bl	8006ff4 <SSD1306_Write_Command>
	SSD1306_Write_Command(0x22); //
 80072be:	2022      	movs	r0, #34	; 0x22
 80072c0:	f7ff fe98 	bl	8006ff4 <SSD1306_Write_Command>
	SSD1306_Write_Command(0xDA); //--set com pins hardware configuration
 80072c4:	20da      	movs	r0, #218	; 0xda
 80072c6:	f7ff fe95 	bl	8006ff4 <SSD1306_Write_Command>
	SSD1306_Write_Command(0x12);
 80072ca:	2012      	movs	r0, #18
 80072cc:	f7ff fe92 	bl	8006ff4 <SSD1306_Write_Command>
	SSD1306_Write_Command(0xDB); //--set vcomh
 80072d0:	20db      	movs	r0, #219	; 0xdb
 80072d2:	f7ff fe8f 	bl	8006ff4 <SSD1306_Write_Command>
	SSD1306_Write_Command(0x20); //0x20,0.77xVcc,
 80072d6:	2020      	movs	r0, #32
 80072d8:	f7ff fe8c 	bl	8006ff4 <SSD1306_Write_Command>
	SSD1306_Write_Command(0x8D); //--set DC-DC enable
 80072dc:	208d      	movs	r0, #141	; 0x8d
 80072de:	f7ff fe89 	bl	8006ff4 <SSD1306_Write_Command>
	SSD1306_Write_Command(0x14); //
 80072e2:	2014      	movs	r0, #20
 80072e4:	f7ff fe86 	bl	8006ff4 <SSD1306_Write_Command>
	SSD1306_Write_Command(0xAF); //--turn on SSD1306 panel
 80072e8:	20af      	movs	r0, #175	; 0xaf
 80072ea:	f7ff fe83 	bl	8006ff4 <SSD1306_Write_Command>

	SDD1306_Clear_Screen();
 80072ee:	f7ff ff75 	bl	80071dc <SDD1306_Clear_Screen>
	
	return 1;
 80072f2:	2301      	movs	r3, #1
}
 80072f4:	4618      	mov	r0, r3
 80072f6:	bd80      	pop	{r7, pc}

080072f8 <DWT_Init>:
 * Initialization routine.
 * You might need to enable access to DWT registers on Cortex-M7
 *   DWT->LAR = 0xC5ACCE55
 */
void DWT_Init(void)
{
 80072f8:	b480      	push	{r7}
 80072fa:	af00      	add	r7, sp, #0
    if (!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)) {
 80072fc:	4b0c      	ldr	r3, [pc, #48]	; (8007330 <DWT_Init+0x38>)
 80072fe:	68db      	ldr	r3, [r3, #12]
 8007300:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007304:	2b00      	cmp	r3, #0
 8007306:	d10e      	bne.n	8007326 <DWT_Init+0x2e>
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8007308:	4b09      	ldr	r3, [pc, #36]	; (8007330 <DWT_Init+0x38>)
 800730a:	68db      	ldr	r3, [r3, #12]
 800730c:	4a08      	ldr	r2, [pc, #32]	; (8007330 <DWT_Init+0x38>)
 800730e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007312:	60d3      	str	r3, [r2, #12]
        DWT->CYCCNT = 0;
 8007314:	4b07      	ldr	r3, [pc, #28]	; (8007334 <DWT_Init+0x3c>)
 8007316:	2200      	movs	r2, #0
 8007318:	605a      	str	r2, [r3, #4]
        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800731a:	4b06      	ldr	r3, [pc, #24]	; (8007334 <DWT_Init+0x3c>)
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	4a05      	ldr	r2, [pc, #20]	; (8007334 <DWT_Init+0x3c>)
 8007320:	f043 0301 	orr.w	r3, r3, #1
 8007324:	6013      	str	r3, [r2, #0]
    }
}
 8007326:	bf00      	nop
 8007328:	46bd      	mov	sp, r7
 800732a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732e:	4770      	bx	lr
 8007330:	e000edf0 	.word	0xe000edf0
 8007334:	e0001000 	.word	0xe0001000

08007338 <DWT_Delay>:
 * No need to check an overflow. Let it just tick :)
 *
 * @param uint32_t us  Number of microseconds to delay for
 */
void DWT_Delay(uint32_t us) // microseconds
{
 8007338:	b480      	push	{r7}
 800733a:	b085      	sub	sp, #20
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
    uint32_t startTick = DWT->CYCCNT,
 8007340:	4b0d      	ldr	r3, [pc, #52]	; (8007378 <DWT_Delay+0x40>)
 8007342:	685b      	ldr	r3, [r3, #4]
 8007344:	60fb      	str	r3, [r7, #12]
             delayTicks = us * (SystemCoreClock/1000000);
 8007346:	4b0d      	ldr	r3, [pc, #52]	; (800737c <DWT_Delay+0x44>)
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	4a0d      	ldr	r2, [pc, #52]	; (8007380 <DWT_Delay+0x48>)
 800734c:	fba2 2303 	umull	r2, r3, r2, r3
 8007350:	0c9a      	lsrs	r2, r3, #18
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	fb02 f303 	mul.w	r3, r2, r3
 8007358:	60bb      	str	r3, [r7, #8]

    while (DWT->CYCCNT - startTick < delayTicks);
 800735a:	bf00      	nop
 800735c:	4b06      	ldr	r3, [pc, #24]	; (8007378 <DWT_Delay+0x40>)
 800735e:	685a      	ldr	r2, [r3, #4]
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	1ad3      	subs	r3, r2, r3
 8007364:	68ba      	ldr	r2, [r7, #8]
 8007366:	429a      	cmp	r2, r3
 8007368:	d8f8      	bhi.n	800735c <DWT_Delay+0x24>
}
 800736a:	bf00      	nop
 800736c:	3714      	adds	r7, #20
 800736e:	46bd      	mov	sp, r7
 8007370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007374:	4770      	bx	lr
 8007376:	bf00      	nop
 8007378:	e0001000 	.word	0xe0001000
 800737c:	20000000 	.word	0x20000000
 8007380:	431bde83 	.word	0x431bde83

08007384 <logger_get_instance>:

logger* logger_instance = NULL;

const unsigned int LOGGER_MAX_LINES = 8;

logger* logger_get_instance(){
 8007384:	b580      	push	{r7, lr}
 8007386:	af00      	add	r7, sp, #0
	if( logger_instance == NULL ){
 8007388:	4b0c      	ldr	r3, [pc, #48]	; (80073bc <logger_get_instance+0x38>)
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d110      	bne.n	80073b2 <logger_get_instance+0x2e>
		logger_instance = (logger*) malloc(sizeof(logger));
 8007390:	2004      	movs	r0, #4
 8007392:	f005 fa29 	bl	800c7e8 <malloc>
 8007396:	4603      	mov	r3, r0
 8007398:	461a      	mov	r2, r3
 800739a:	4b08      	ldr	r3, [pc, #32]	; (80073bc <logger_get_instance+0x38>)
 800739c:	601a      	str	r2, [r3, #0]
		logger_instance->line = 0;
 800739e:	4b07      	ldr	r3, [pc, #28]	; (80073bc <logger_get_instance+0x38>)
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	2200      	movs	r2, #0
 80073a4:	701a      	strb	r2, [r3, #0]
 80073a6:	2200      	movs	r2, #0
 80073a8:	705a      	strb	r2, [r3, #1]
 80073aa:	2200      	movs	r2, #0
 80073ac:	709a      	strb	r2, [r3, #2]
 80073ae:	2200      	movs	r2, #0
 80073b0:	70da      	strb	r2, [r3, #3]
	}
	return logger_instance;
 80073b2:	4b02      	ldr	r3, [pc, #8]	; (80073bc <logger_get_instance+0x38>)
 80073b4:	681b      	ldr	r3, [r3, #0]
}
 80073b6:	4618      	mov	r0, r3
 80073b8:	bd80      	pop	{r7, pc}
 80073ba:	bf00      	nop
 80073bc:	20000b18 	.word	0x20000b18

080073c0 <logger_info>:
	unsigned int line = (++logger->line) % LOGGER_MAX_LINES;
	SSD1306_Goto(0, line);
	SSD1306_Write_String((uint8_t*) string_util_concat("[W] ", input));
}

void logger_info(logger* logger, char* input){
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b084      	sub	sp, #16
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
 80073c8:	6039      	str	r1, [r7, #0]
	if( logger == NULL ) return;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d024      	beq.n	800741a <logger_info+0x5a>
	if( logger->line == LOGGER_MAX_LINES-1) SDD1306_Clear_Screen();
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681a      	ldr	r2, [r3, #0]
 80073d4:	2308      	movs	r3, #8
 80073d6:	3b01      	subs	r3, #1
 80073d8:	429a      	cmp	r2, r3
 80073da:	d101      	bne.n	80073e0 <logger_info+0x20>
 80073dc:	f7ff fefe 	bl	80071dc <SDD1306_Clear_Screen>
	unsigned int line = (++logger->line) % LOGGER_MAX_LINES;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	1c5a      	adds	r2, r3, #1
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	601a      	str	r2, [r3, #0]
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	2208      	movs	r2, #8
 80073f0:	fbb3 f1f2 	udiv	r1, r3, r2
 80073f4:	fb02 f201 	mul.w	r2, r2, r1
 80073f8:	1a9b      	subs	r3, r3, r2
 80073fa:	60fb      	str	r3, [r7, #12]
	SSD1306_Goto(0, line);
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	b2db      	uxtb	r3, r3
 8007400:	4619      	mov	r1, r3
 8007402:	2000      	movs	r0, #0
 8007404:	f7ff fe14 	bl	8007030 <SSD1306_Goto>
	SSD1306_Write_String((uint8_t*) string_util_concat("[I] ", input));
 8007408:	6839      	ldr	r1, [r7, #0]
 800740a:	4806      	ldr	r0, [pc, #24]	; (8007424 <logger_info+0x64>)
 800740c:	f000 fd5a 	bl	8007ec4 <string_util_concat>
 8007410:	4603      	mov	r3, r0
 8007412:	4618      	mov	r0, r3
 8007414:	f7ff fea8 	bl	8007168 <SSD1306_Write_String>
 8007418:	e000      	b.n	800741c <logger_info+0x5c>
	if( logger == NULL ) return;
 800741a:	bf00      	nop
}
 800741c:	3710      	adds	r7, #16
 800741e:	46bd      	mov	sp, r7
 8007420:	bd80      	pop	{r7, pc}
 8007422:	bf00      	nop
 8007424:	08011810 	.word	0x08011810

08007428 <logger_clean>:
	unsigned int line = (++logger->line) % LOGGER_MAX_LINES;
	SSD1306_Goto(0, line);
	SSD1306_Write_String((uint8_t*) string_util_concat("[D] ", input));
}

void logger_clean(logger* logger){
 8007428:	b580      	push	{r7, lr}
 800742a:	b082      	sub	sp, #8
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
	if( logger == NULL ) return;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d00c      	beq.n	8007450 <logger_clean+0x28>
	logger_instance->line = 0;
 8007436:	4b08      	ldr	r3, [pc, #32]	; (8007458 <logger_clean+0x30>)
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	2200      	movs	r2, #0
 800743c:	701a      	strb	r2, [r3, #0]
 800743e:	2200      	movs	r2, #0
 8007440:	705a      	strb	r2, [r3, #1]
 8007442:	2200      	movs	r2, #0
 8007444:	709a      	strb	r2, [r3, #2]
 8007446:	2200      	movs	r2, #0
 8007448:	70da      	strb	r2, [r3, #3]
	SDD1306_Clear_Screen();
 800744a:	f7ff fec7 	bl	80071dc <SDD1306_Clear_Screen>
 800744e:	e000      	b.n	8007452 <logger_clean+0x2a>
	if( logger == NULL ) return;
 8007450:	bf00      	nop
}
 8007452:	3708      	adds	r7, #8
 8007454:	46bd      	mov	sp, r7
 8007456:	bd80      	pop	{r7, pc}
 8007458:	20000b18 	.word	0x20000b18

0800745c <map_string_init>:
#include <util/map_string.h>

map_string* map_string_init(){
 800745c:	b590      	push	{r4, r7, lr}
 800745e:	b083      	sub	sp, #12
 8007460:	af00      	add	r7, sp, #0
	map_string* result = (map_string*) malloc(sizeof(map_string));
 8007462:	2094      	movs	r0, #148	; 0x94
 8007464:	f005 f9c0 	bl	800c7e8 <malloc>
 8007468:	4603      	mov	r3, r0
 800746a:	607b      	str	r3, [r7, #4]
	for(register int i = 0; i < MAP_STRING_LENGTH; i++){
 800746c:	2400      	movs	r4, #0
 800746e:	e011      	b.n	8007494 <map_string_init+0x38>
		result->key[i][0] = '\0';
 8007470:	687a      	ldr	r2, [r7, #4]
 8007472:	4623      	mov	r3, r4
 8007474:	005b      	lsls	r3, r3, #1
 8007476:	4423      	add	r3, r4
 8007478:	009b      	lsls	r3, r3, #2
 800747a:	4413      	add	r3, r2
 800747c:	2200      	movs	r2, #0
 800747e:	701a      	strb	r2, [r3, #0]
		result->value[i][0] = '\0';
 8007480:	687a      	ldr	r2, [r7, #4]
 8007482:	4623      	mov	r3, r4
 8007484:	005b      	lsls	r3, r3, #1
 8007486:	4423      	add	r3, r4
 8007488:	009b      	lsls	r3, r3, #2
 800748a:	4413      	add	r3, r2
 800748c:	3348      	adds	r3, #72	; 0x48
 800748e:	2200      	movs	r2, #0
 8007490:	701a      	strb	r2, [r3, #0]
	for(register int i = 0; i < MAP_STRING_LENGTH; i++){
 8007492:	3401      	adds	r4, #1
 8007494:	2c05      	cmp	r4, #5
 8007496:	ddeb      	ble.n	8007470 <map_string_init+0x14>
	}
	result->index = 0;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2200      	movs	r2, #0
 800749c:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
 80074a0:	2200      	movs	r2, #0
 80074a2:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
 80074a6:	2200      	movs	r2, #0
 80074a8:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
 80074ac:	2200      	movs	r2, #0
 80074ae:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	return result;
 80074b2:	687b      	ldr	r3, [r7, #4]
}
 80074b4:	4618      	mov	r0, r3
 80074b6:	370c      	adds	r7, #12
 80074b8:	46bd      	mov	sp, r7
 80074ba:	bd90      	pop	{r4, r7, pc}

080074bc <map_string_destroy>:

void map_string_destroy(map_string* map_string){
 80074bc:	b590      	push	{r4, r7, lr}
 80074be:	b083      	sub	sp, #12
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
	if( map_string == NULL ) return;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d01b      	beq.n	8007502 <map_string_destroy+0x46>

	for(register int i = 0; i < MAP_STRING_LENGTH; i++){
 80074ca:	2400      	movs	r4, #0
 80074cc:	e011      	b.n	80074f2 <map_string_destroy+0x36>
		map_string->key[i][0] = '\0';
 80074ce:	687a      	ldr	r2, [r7, #4]
 80074d0:	4623      	mov	r3, r4
 80074d2:	005b      	lsls	r3, r3, #1
 80074d4:	4423      	add	r3, r4
 80074d6:	009b      	lsls	r3, r3, #2
 80074d8:	4413      	add	r3, r2
 80074da:	2200      	movs	r2, #0
 80074dc:	701a      	strb	r2, [r3, #0]
		map_string->value[i][0] = '\0';
 80074de:	687a      	ldr	r2, [r7, #4]
 80074e0:	4623      	mov	r3, r4
 80074e2:	005b      	lsls	r3, r3, #1
 80074e4:	4423      	add	r3, r4
 80074e6:	009b      	lsls	r3, r3, #2
 80074e8:	4413      	add	r3, r2
 80074ea:	3348      	adds	r3, #72	; 0x48
 80074ec:	2200      	movs	r2, #0
 80074ee:	701a      	strb	r2, [r3, #0]
	for(register int i = 0; i < MAP_STRING_LENGTH; i++){
 80074f0:	3401      	adds	r4, #1
 80074f2:	2c05      	cmp	r4, #5
 80074f4:	ddeb      	ble.n	80074ce <map_string_destroy+0x12>
	}

	free(map_string);
 80074f6:	6878      	ldr	r0, [r7, #4]
 80074f8:	f005 f97e 	bl	800c7f8 <free>
	map_string = NULL;
 80074fc:	2300      	movs	r3, #0
 80074fe:	607b      	str	r3, [r7, #4]
 8007500:	e000      	b.n	8007504 <map_string_destroy+0x48>
	if( map_string == NULL ) return;
 8007502:	bf00      	nop
}
 8007504:	370c      	adds	r7, #12
 8007506:	46bd      	mov	sp, r7
 8007508:	bd90      	pop	{r4, r7, pc}

0800750a <map_string_put>:

void map_string_put(map_string* map_string, char key[], char value[]){
 800750a:	b580      	push	{r7, lr}
 800750c:	b084      	sub	sp, #16
 800750e:	af00      	add	r7, sp, #0
 8007510:	60f8      	str	r0, [r7, #12]
 8007512:	60b9      	str	r1, [r7, #8]
 8007514:	607a      	str	r2, [r7, #4]
	if( map_string == NULL || map_string->index == MAP_STRING_LENGTH || key == NULL) return;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d02a      	beq.n	8007572 <map_string_put+0x68>
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007522:	2b06      	cmp	r3, #6
 8007524:	d025      	beq.n	8007572 <map_string_put+0x68>
 8007526:	68bb      	ldr	r3, [r7, #8]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d022      	beq.n	8007572 <map_string_put+0x68>
	strcpy(map_string->key[map_string->index], key);
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8007532:	4613      	mov	r3, r2
 8007534:	005b      	lsls	r3, r3, #1
 8007536:	4413      	add	r3, r2
 8007538:	009b      	lsls	r3, r3, #2
 800753a:	68fa      	ldr	r2, [r7, #12]
 800753c:	4413      	add	r3, r2
 800753e:	68b9      	ldr	r1, [r7, #8]
 8007540:	4618      	mov	r0, r3
 8007542:	f005 fbea 	bl	800cd1a <strcpy>
	strcpy(map_string->value[map_string->index], value);
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800754c:	4613      	mov	r3, r2
 800754e:	005b      	lsls	r3, r3, #1
 8007550:	4413      	add	r3, r2
 8007552:	009b      	lsls	r3, r3, #2
 8007554:	3348      	adds	r3, #72	; 0x48
 8007556:	68fa      	ldr	r2, [r7, #12]
 8007558:	4413      	add	r3, r2
 800755a:	6879      	ldr	r1, [r7, #4]
 800755c:	4618      	mov	r0, r3
 800755e:	f005 fbdc 	bl	800cd1a <strcpy>
	map_string->index++;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007568:	1c5a      	adds	r2, r3, #1
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8007570:	e000      	b.n	8007574 <map_string_put+0x6a>
	if( map_string == NULL || map_string->index == MAP_STRING_LENGTH || key == NULL) return;
 8007572:	bf00      	nop
}
 8007574:	3710      	adds	r7, #16
 8007576:	46bd      	mov	sp, r7
 8007578:	bd80      	pop	{r7, pc}
	...

0800757c <map_string_to_char>:
			break;
		}
	}
}

char* map_string_to_char(map_string* map_string){
 800757c:	b5b0      	push	{r4, r5, r7, lr}
 800757e:	b088      	sub	sp, #32
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
	if( map_string == NULL ) return NULL;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d101      	bne.n	800758e <map_string_to_char+0x12>
 800758a:	2300      	movs	r3, #0
 800758c:	e134      	b.n	80077f8 <map_string_to_char+0x27c>
	unsigned int number_of_entries = map_string_number_of_entries(map_string);
 800758e:	6878      	ldr	r0, [r7, #4]
 8007590:	f000 f975 	bl	800787e <map_string_number_of_entries>
 8007594:	61f8      	str	r0, [r7, #28]
	unsigned int length_separtors = number_of_entries * 5 + (number_of_entries-1) + 2; // Para as aspas, virgulas, dois pontos, e chaves
 8007596:	69fa      	ldr	r2, [r7, #28]
 8007598:	4613      	mov	r3, r2
 800759a:	005b      	lsls	r3, r3, #1
 800759c:	4413      	add	r3, r2
 800759e:	005b      	lsls	r3, r3, #1
 80075a0:	3301      	adds	r3, #1
 80075a2:	61bb      	str	r3, [r7, #24]
	unsigned int number_of_chars = map_string_number_of_chars(map_string);
 80075a4:	6878      	ldr	r0, [r7, #4]
 80075a6:	f000 f937 	bl	8007818 <map_string_number_of_chars>
 80075aa:	6178      	str	r0, [r7, #20]
	char* result = (char*) malloc((length_separtors+number_of_chars+1) * sizeof(char));
 80075ac:	69ba      	ldr	r2, [r7, #24]
 80075ae:	697b      	ldr	r3, [r7, #20]
 80075b0:	4413      	add	r3, r2
 80075b2:	3301      	adds	r3, #1
 80075b4:	4618      	mov	r0, r3
 80075b6:	f005 f917 	bl	800c7e8 <malloc>
 80075ba:	4603      	mov	r3, r0
 80075bc:	613b      	str	r3, [r7, #16]

	strcpy(result, "{");
 80075be:	693b      	ldr	r3, [r7, #16]
 80075c0:	498f      	ldr	r1, [pc, #572]	; (8007800 <map_string_to_char+0x284>)
 80075c2:	461a      	mov	r2, r3
 80075c4:	460b      	mov	r3, r1
 80075c6:	881b      	ldrh	r3, [r3, #0]
 80075c8:	8013      	strh	r3, [r2, #0]
	if( map_string->index != 0 ){
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	f000 8104 	beq.w	80077de <map_string_to_char+0x262>
		for(register unsigned int i = 0; i < map_string->index-1; i++){
 80075d6:	2400      	movs	r4, #0
 80075d8:	e07b      	b.n	80076d2 <map_string_to_char+0x156>
			strcat(result, "\""); strcat(result, map_string->key[i]); strcat(result, "\":");
 80075da:	6938      	ldr	r0, [r7, #16]
 80075dc:	f7f8 fe02 	bl	80001e4 <strlen>
 80075e0:	4603      	mov	r3, r0
 80075e2:	461a      	mov	r2, r3
 80075e4:	693b      	ldr	r3, [r7, #16]
 80075e6:	4413      	add	r3, r2
 80075e8:	4986      	ldr	r1, [pc, #536]	; (8007804 <map_string_to_char+0x288>)
 80075ea:	461a      	mov	r2, r3
 80075ec:	460b      	mov	r3, r1
 80075ee:	881b      	ldrh	r3, [r3, #0]
 80075f0:	8013      	strh	r3, [r2, #0]
 80075f2:	4623      	mov	r3, r4
 80075f4:	005b      	lsls	r3, r3, #1
 80075f6:	4423      	add	r3, r4
 80075f8:	009b      	lsls	r3, r3, #2
 80075fa:	687a      	ldr	r2, [r7, #4]
 80075fc:	4413      	add	r3, r2
 80075fe:	4619      	mov	r1, r3
 8007600:	6938      	ldr	r0, [r7, #16]
 8007602:	f005 fb7b 	bl	800ccfc <strcat>
 8007606:	6938      	ldr	r0, [r7, #16]
 8007608:	f7f8 fdec 	bl	80001e4 <strlen>
 800760c:	4603      	mov	r3, r0
 800760e:	461a      	mov	r2, r3
 8007610:	693b      	ldr	r3, [r7, #16]
 8007612:	4413      	add	r3, r2
 8007614:	4a7c      	ldr	r2, [pc, #496]	; (8007808 <map_string_to_char+0x28c>)
 8007616:	8811      	ldrh	r1, [r2, #0]
 8007618:	7892      	ldrb	r2, [r2, #2]
 800761a:	8019      	strh	r1, [r3, #0]
 800761c:	709a      	strb	r2, [r3, #2]
			int is_number = atof(map_string->value[i]) != 0.0 ? 1 : 0;
 800761e:	4623      	mov	r3, r4
 8007620:	005b      	lsls	r3, r3, #1
 8007622:	4423      	add	r3, r4
 8007624:	009b      	lsls	r3, r3, #2
 8007626:	3348      	adds	r3, #72	; 0x48
 8007628:	687a      	ldr	r2, [r7, #4]
 800762a:	4413      	add	r3, r2
 800762c:	4618      	mov	r0, r3
 800762e:	f005 f86d 	bl	800c70c <atof>
 8007632:	ec51 0b10 	vmov	r0, r1, d0
 8007636:	2301      	movs	r3, #1
 8007638:	461d      	mov	r5, r3
 800763a:	f04f 0200 	mov.w	r2, #0
 800763e:	f04f 0300 	mov.w	r3, #0
 8007642:	f7f9 fa51 	bl	8000ae8 <__aeabi_dcmpeq>
 8007646:	4603      	mov	r3, r0
 8007648:	2b00      	cmp	r3, #0
 800764a:	d001      	beq.n	8007650 <map_string_to_char+0xd4>
 800764c:	2300      	movs	r3, #0
 800764e:	461d      	mov	r5, r3
 8007650:	b2eb      	uxtb	r3, r5
 8007652:	60bb      	str	r3, [r7, #8]
			if( is_number ){
 8007654:	68bb      	ldr	r3, [r7, #8]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d017      	beq.n	800768a <map_string_to_char+0x10e>
				strcat(result, map_string->value[i]); strcat(result, ",");
 800765a:	4623      	mov	r3, r4
 800765c:	005b      	lsls	r3, r3, #1
 800765e:	4423      	add	r3, r4
 8007660:	009b      	lsls	r3, r3, #2
 8007662:	3348      	adds	r3, #72	; 0x48
 8007664:	687a      	ldr	r2, [r7, #4]
 8007666:	4413      	add	r3, r2
 8007668:	4619      	mov	r1, r3
 800766a:	6938      	ldr	r0, [r7, #16]
 800766c:	f005 fb46 	bl	800ccfc <strcat>
 8007670:	6938      	ldr	r0, [r7, #16]
 8007672:	f7f8 fdb7 	bl	80001e4 <strlen>
 8007676:	4603      	mov	r3, r0
 8007678:	461a      	mov	r2, r3
 800767a:	693b      	ldr	r3, [r7, #16]
 800767c:	4413      	add	r3, r2
 800767e:	4963      	ldr	r1, [pc, #396]	; (800780c <map_string_to_char+0x290>)
 8007680:	461a      	mov	r2, r3
 8007682:	460b      	mov	r3, r1
 8007684:	881b      	ldrh	r3, [r3, #0]
 8007686:	8013      	strh	r3, [r2, #0]
 8007688:	e022      	b.n	80076d0 <map_string_to_char+0x154>
			} else {
				strcat(result, "\""); strcat(result, map_string->value[i]); strcat(result, "\",");
 800768a:	6938      	ldr	r0, [r7, #16]
 800768c:	f7f8 fdaa 	bl	80001e4 <strlen>
 8007690:	4603      	mov	r3, r0
 8007692:	461a      	mov	r2, r3
 8007694:	693b      	ldr	r3, [r7, #16]
 8007696:	4413      	add	r3, r2
 8007698:	495a      	ldr	r1, [pc, #360]	; (8007804 <map_string_to_char+0x288>)
 800769a:	461a      	mov	r2, r3
 800769c:	460b      	mov	r3, r1
 800769e:	881b      	ldrh	r3, [r3, #0]
 80076a0:	8013      	strh	r3, [r2, #0]
 80076a2:	4623      	mov	r3, r4
 80076a4:	005b      	lsls	r3, r3, #1
 80076a6:	4423      	add	r3, r4
 80076a8:	009b      	lsls	r3, r3, #2
 80076aa:	3348      	adds	r3, #72	; 0x48
 80076ac:	687a      	ldr	r2, [r7, #4]
 80076ae:	4413      	add	r3, r2
 80076b0:	4619      	mov	r1, r3
 80076b2:	6938      	ldr	r0, [r7, #16]
 80076b4:	f005 fb22 	bl	800ccfc <strcat>
 80076b8:	6938      	ldr	r0, [r7, #16]
 80076ba:	f7f8 fd93 	bl	80001e4 <strlen>
 80076be:	4603      	mov	r3, r0
 80076c0:	461a      	mov	r2, r3
 80076c2:	693b      	ldr	r3, [r7, #16]
 80076c4:	4413      	add	r3, r2
 80076c6:	4a52      	ldr	r2, [pc, #328]	; (8007810 <map_string_to_char+0x294>)
 80076c8:	8811      	ldrh	r1, [r2, #0]
 80076ca:	7892      	ldrb	r2, [r2, #2]
 80076cc:	8019      	strh	r1, [r3, #0]
 80076ce:	709a      	strb	r2, [r3, #2]
		for(register unsigned int i = 0; i < map_string->index-1; i++){
 80076d0:	3401      	adds	r4, #1
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076d8:	3b01      	subs	r3, #1
 80076da:	429c      	cmp	r4, r3
 80076dc:	f4ff af7d 	bcc.w	80075da <map_string_to_char+0x5e>
			}
		}

		strcat(result, "\""); strcat(result, map_string->key[map_string->index-1]); strcat(result, "\":");
 80076e0:	6938      	ldr	r0, [r7, #16]
 80076e2:	f7f8 fd7f 	bl	80001e4 <strlen>
 80076e6:	4603      	mov	r3, r0
 80076e8:	461a      	mov	r2, r3
 80076ea:	693b      	ldr	r3, [r7, #16]
 80076ec:	4413      	add	r3, r2
 80076ee:	4945      	ldr	r1, [pc, #276]	; (8007804 <map_string_to_char+0x288>)
 80076f0:	461a      	mov	r2, r3
 80076f2:	460b      	mov	r3, r1
 80076f4:	881b      	ldrh	r3, [r3, #0]
 80076f6:	8013      	strh	r3, [r2, #0]
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076fe:	1e5a      	subs	r2, r3, #1
 8007700:	4613      	mov	r3, r2
 8007702:	005b      	lsls	r3, r3, #1
 8007704:	4413      	add	r3, r2
 8007706:	009b      	lsls	r3, r3, #2
 8007708:	687a      	ldr	r2, [r7, #4]
 800770a:	4413      	add	r3, r2
 800770c:	4619      	mov	r1, r3
 800770e:	6938      	ldr	r0, [r7, #16]
 8007710:	f005 faf4 	bl	800ccfc <strcat>
 8007714:	6938      	ldr	r0, [r7, #16]
 8007716:	f7f8 fd65 	bl	80001e4 <strlen>
 800771a:	4603      	mov	r3, r0
 800771c:	461a      	mov	r2, r3
 800771e:	693b      	ldr	r3, [r7, #16]
 8007720:	4413      	add	r3, r2
 8007722:	4a39      	ldr	r2, [pc, #228]	; (8007808 <map_string_to_char+0x28c>)
 8007724:	8811      	ldrh	r1, [r2, #0]
 8007726:	7892      	ldrb	r2, [r2, #2]
 8007728:	8019      	strh	r1, [r3, #0]
 800772a:	709a      	strb	r2, [r3, #2]
		int is_number = atof(map_string->value[map_string->index-1]) != 0.0 ? 1 : 0;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007732:	1e5a      	subs	r2, r3, #1
 8007734:	4613      	mov	r3, r2
 8007736:	005b      	lsls	r3, r3, #1
 8007738:	4413      	add	r3, r2
 800773a:	009b      	lsls	r3, r3, #2
 800773c:	3348      	adds	r3, #72	; 0x48
 800773e:	687a      	ldr	r2, [r7, #4]
 8007740:	4413      	add	r3, r2
 8007742:	4618      	mov	r0, r3
 8007744:	f004 ffe2 	bl	800c70c <atof>
 8007748:	ec51 0b10 	vmov	r0, r1, d0
 800774c:	2301      	movs	r3, #1
 800774e:	461c      	mov	r4, r3
 8007750:	f04f 0200 	mov.w	r2, #0
 8007754:	f04f 0300 	mov.w	r3, #0
 8007758:	f7f9 f9c6 	bl	8000ae8 <__aeabi_dcmpeq>
 800775c:	4603      	mov	r3, r0
 800775e:	2b00      	cmp	r3, #0
 8007760:	d001      	beq.n	8007766 <map_string_to_char+0x1ea>
 8007762:	2300      	movs	r3, #0
 8007764:	461c      	mov	r4, r3
 8007766:	b2e3      	uxtb	r3, r4
 8007768:	60fb      	str	r3, [r7, #12]
		if( is_number ){
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d00f      	beq.n	8007790 <map_string_to_char+0x214>
			strcat(result, map_string->value[map_string->index-1]);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007776:	1e5a      	subs	r2, r3, #1
 8007778:	4613      	mov	r3, r2
 800777a:	005b      	lsls	r3, r3, #1
 800777c:	4413      	add	r3, r2
 800777e:	009b      	lsls	r3, r3, #2
 8007780:	3348      	adds	r3, #72	; 0x48
 8007782:	687a      	ldr	r2, [r7, #4]
 8007784:	4413      	add	r3, r2
 8007786:	4619      	mov	r1, r3
 8007788:	6938      	ldr	r0, [r7, #16]
 800778a:	f005 fab7 	bl	800ccfc <strcat>
 800778e:	e026      	b.n	80077de <map_string_to_char+0x262>
		} else {
			strcat(result, "\""); strcat(result, map_string->value[map_string->index-1]); strcat(result, "\"");
 8007790:	6938      	ldr	r0, [r7, #16]
 8007792:	f7f8 fd27 	bl	80001e4 <strlen>
 8007796:	4603      	mov	r3, r0
 8007798:	461a      	mov	r2, r3
 800779a:	693b      	ldr	r3, [r7, #16]
 800779c:	4413      	add	r3, r2
 800779e:	4919      	ldr	r1, [pc, #100]	; (8007804 <map_string_to_char+0x288>)
 80077a0:	461a      	mov	r2, r3
 80077a2:	460b      	mov	r3, r1
 80077a4:	881b      	ldrh	r3, [r3, #0]
 80077a6:	8013      	strh	r3, [r2, #0]
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077ae:	1e5a      	subs	r2, r3, #1
 80077b0:	4613      	mov	r3, r2
 80077b2:	005b      	lsls	r3, r3, #1
 80077b4:	4413      	add	r3, r2
 80077b6:	009b      	lsls	r3, r3, #2
 80077b8:	3348      	adds	r3, #72	; 0x48
 80077ba:	687a      	ldr	r2, [r7, #4]
 80077bc:	4413      	add	r3, r2
 80077be:	4619      	mov	r1, r3
 80077c0:	6938      	ldr	r0, [r7, #16]
 80077c2:	f005 fa9b 	bl	800ccfc <strcat>
 80077c6:	6938      	ldr	r0, [r7, #16]
 80077c8:	f7f8 fd0c 	bl	80001e4 <strlen>
 80077cc:	4603      	mov	r3, r0
 80077ce:	461a      	mov	r2, r3
 80077d0:	693b      	ldr	r3, [r7, #16]
 80077d2:	4413      	add	r3, r2
 80077d4:	490b      	ldr	r1, [pc, #44]	; (8007804 <map_string_to_char+0x288>)
 80077d6:	461a      	mov	r2, r3
 80077d8:	460b      	mov	r3, r1
 80077da:	881b      	ldrh	r3, [r3, #0]
 80077dc:	8013      	strh	r3, [r2, #0]
		}
	}
	strcat(result, "}");
 80077de:	6938      	ldr	r0, [r7, #16]
 80077e0:	f7f8 fd00 	bl	80001e4 <strlen>
 80077e4:	4603      	mov	r3, r0
 80077e6:	461a      	mov	r2, r3
 80077e8:	693b      	ldr	r3, [r7, #16]
 80077ea:	4413      	add	r3, r2
 80077ec:	4909      	ldr	r1, [pc, #36]	; (8007814 <map_string_to_char+0x298>)
 80077ee:	461a      	mov	r2, r3
 80077f0:	460b      	mov	r3, r1
 80077f2:	881b      	ldrh	r3, [r3, #0]
 80077f4:	8013      	strh	r3, [r2, #0]
	return result;
 80077f6:	693b      	ldr	r3, [r7, #16]
}
 80077f8:	4618      	mov	r0, r3
 80077fa:	3720      	adds	r7, #32
 80077fc:	46bd      	mov	sp, r7
 80077fe:	bdb0      	pop	{r4, r5, r7, pc}
 8007800:	08011820 	.word	0x08011820
 8007804:	08011824 	.word	0x08011824
 8007808:	08011828 	.word	0x08011828
 800780c:	0801182c 	.word	0x0801182c
 8007810:	08011830 	.word	0x08011830
 8007814:	08011834 	.word	0x08011834

08007818 <map_string_number_of_chars>:


unsigned int map_string_number_of_chars(map_string* map_string){
 8007818:	b590      	push	{r4, r7, lr}
 800781a:	b085      	sub	sp, #20
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
	if( map_string == NULL ) return 0;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2b00      	cmp	r3, #0
 8007824:	d101      	bne.n	800782a <map_string_number_of_chars+0x12>
 8007826:	2300      	movs	r3, #0
 8007828:	e025      	b.n	8007876 <map_string_number_of_chars+0x5e>

	unsigned int number_of_chars = 0;
 800782a:	2300      	movs	r3, #0
 800782c:	60fb      	str	r3, [r7, #12]
	for(register unsigned int i = 0; i < map_string->index; i++){
 800782e:	2400      	movs	r4, #0
 8007830:	e01b      	b.n	800786a <map_string_number_of_chars+0x52>
		number_of_chars += strlen(map_string->key[i]);
 8007832:	4623      	mov	r3, r4
 8007834:	005b      	lsls	r3, r3, #1
 8007836:	4423      	add	r3, r4
 8007838:	009b      	lsls	r3, r3, #2
 800783a:	687a      	ldr	r2, [r7, #4]
 800783c:	4413      	add	r3, r2
 800783e:	4618      	mov	r0, r3
 8007840:	f7f8 fcd0 	bl	80001e4 <strlen>
 8007844:	4602      	mov	r2, r0
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	4413      	add	r3, r2
 800784a:	60fb      	str	r3, [r7, #12]
		number_of_chars += strlen(map_string->value[i]);
 800784c:	4623      	mov	r3, r4
 800784e:	005b      	lsls	r3, r3, #1
 8007850:	4423      	add	r3, r4
 8007852:	009b      	lsls	r3, r3, #2
 8007854:	3348      	adds	r3, #72	; 0x48
 8007856:	687a      	ldr	r2, [r7, #4]
 8007858:	4413      	add	r3, r2
 800785a:	4618      	mov	r0, r3
 800785c:	f7f8 fcc2 	bl	80001e4 <strlen>
 8007860:	4602      	mov	r2, r0
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	4413      	add	r3, r2
 8007866:	60fb      	str	r3, [r7, #12]
	for(register unsigned int i = 0; i < map_string->index; i++){
 8007868:	3401      	adds	r4, #1
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007870:	429c      	cmp	r4, r3
 8007872:	d3de      	bcc.n	8007832 <map_string_number_of_chars+0x1a>
	}

	return number_of_chars;
 8007874:	68fb      	ldr	r3, [r7, #12]
}
 8007876:	4618      	mov	r0, r3
 8007878:	3714      	adds	r7, #20
 800787a:	46bd      	mov	sp, r7
 800787c:	bd90      	pop	{r4, r7, pc}

0800787e <map_string_number_of_entries>:

unsigned int map_string_number_of_entries(map_string* map_string){
 800787e:	b480      	push	{r7}
 8007880:	b083      	sub	sp, #12
 8007882:	af00      	add	r7, sp, #0
 8007884:	6078      	str	r0, [r7, #4]
	if( map_string == NULL ) return 0;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d101      	bne.n	8007890 <map_string_number_of_entries+0x12>
 800788c:	2300      	movs	r3, #0
 800788e:	e002      	b.n	8007896 <map_string_number_of_entries+0x18>
	return map_string->index;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
}
 8007896:	4618      	mov	r0, r3
 8007898:	370c      	adds	r7, #12
 800789a:	46bd      	mov	sp, r7
 800789c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a0:	4770      	bx	lr
	...

080078a4 <message_builder_get_instance>:
#include <util/message_builder.h>

message_builder* message_builder_instance = NULL;

message_builder* message_builder_get_instance(){
 80078a4:	b598      	push	{r3, r4, r7, lr}
 80078a6:	af00      	add	r7, sp, #0
	if( message_builder_instance == NULL ){
 80078a8:	4b28      	ldr	r3, [pc, #160]	; (800794c <message_builder_get_instance+0xa8>)
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d148      	bne.n	8007942 <message_builder_get_instance+0x9e>
		message_builder_instance = (message_builder*) malloc(sizeof(message_builder));
 80078b0:	201c      	movs	r0, #28
 80078b2:	f004 ff99 	bl	800c7e8 <malloc>
 80078b6:	4603      	mov	r3, r0
 80078b8:	461a      	mov	r2, r3
 80078ba:	4b24      	ldr	r3, [pc, #144]	; (800794c <message_builder_get_instance+0xa8>)
 80078bc:	601a      	str	r2, [r3, #0]
		message_builder_instance->reply_host = NULL;
 80078be:	4b23      	ldr	r3, [pc, #140]	; (800794c <message_builder_get_instance+0xa8>)
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	2200      	movs	r2, #0
 80078c4:	701a      	strb	r2, [r3, #0]
 80078c6:	2200      	movs	r2, #0
 80078c8:	705a      	strb	r2, [r3, #1]
 80078ca:	2200      	movs	r2, #0
 80078cc:	709a      	strb	r2, [r3, #2]
 80078ce:	2200      	movs	r2, #0
 80078d0:	70da      	strb	r2, [r3, #3]
		message_builder_instance->reply_port = NULL;
 80078d2:	4b1e      	ldr	r3, [pc, #120]	; (800794c <message_builder_get_instance+0xa8>)
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	2200      	movs	r2, #0
 80078d8:	711a      	strb	r2, [r3, #4]
 80078da:	2200      	movs	r2, #0
 80078dc:	715a      	strb	r2, [r3, #5]
 80078de:	2200      	movs	r2, #0
 80078e0:	719a      	strb	r2, [r3, #6]
 80078e2:	2200      	movs	r2, #0
 80078e4:	71da      	strb	r2, [r3, #7]
		message_builder_instance->reply_channel = NULL;
 80078e6:	4b19      	ldr	r3, [pc, #100]	; (800794c <message_builder_get_instance+0xa8>)
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	2200      	movs	r2, #0
 80078ec:	721a      	strb	r2, [r3, #8]
 80078ee:	2200      	movs	r2, #0
 80078f0:	725a      	strb	r2, [r3, #9]
 80078f2:	2200      	movs	r2, #0
 80078f4:	729a      	strb	r2, [r3, #10]
 80078f6:	2200      	movs	r2, #0
 80078f8:	72da      	strb	r2, [r3, #11]
		message_builder_instance->method = NULL;
 80078fa:	4b14      	ldr	r3, [pc, #80]	; (800794c <message_builder_get_instance+0xa8>)
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	2200      	movs	r2, #0
 8007900:	731a      	strb	r2, [r3, #12]
 8007902:	2200      	movs	r2, #0
 8007904:	735a      	strb	r2, [r3, #13]
 8007906:	2200      	movs	r2, #0
 8007908:	739a      	strb	r2, [r3, #14]
 800790a:	2200      	movs	r2, #0
 800790c:	73da      	strb	r2, [r3, #15]
		message_builder_instance->uri = NULL;
 800790e:	4b0f      	ldr	r3, [pc, #60]	; (800794c <message_builder_get_instance+0xa8>)
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	2200      	movs	r2, #0
 8007914:	741a      	strb	r2, [r3, #16]
 8007916:	2200      	movs	r2, #0
 8007918:	745a      	strb	r2, [r3, #17]
 800791a:	2200      	movs	r2, #0
 800791c:	749a      	strb	r2, [r3, #18]
 800791e:	2200      	movs	r2, #0
 8007920:	74da      	strb	r2, [r3, #19]
		message_builder_instance->header = NULL;
 8007922:	4b0a      	ldr	r3, [pc, #40]	; (800794c <message_builder_get_instance+0xa8>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	2200      	movs	r2, #0
 8007928:	751a      	strb	r2, [r3, #20]
 800792a:	2200      	movs	r2, #0
 800792c:	755a      	strb	r2, [r3, #21]
 800792e:	2200      	movs	r2, #0
 8007930:	759a      	strb	r2, [r3, #22]
 8007932:	2200      	movs	r2, #0
 8007934:	75da      	strb	r2, [r3, #23]
		message_builder_instance->body = map_string_init();
 8007936:	4b05      	ldr	r3, [pc, #20]	; (800794c <message_builder_get_instance+0xa8>)
 8007938:	681c      	ldr	r4, [r3, #0]
 800793a:	f7ff fd8f 	bl	800745c <map_string_init>
 800793e:	4603      	mov	r3, r0
 8007940:	61a3      	str	r3, [r4, #24]
	}
	return message_builder_instance;
 8007942:	4b02      	ldr	r3, [pc, #8]	; (800794c <message_builder_get_instance+0xa8>)
 8007944:	681b      	ldr	r3, [r3, #0]
}
 8007946:	4618      	mov	r0, r3
 8007948:	bd98      	pop	{r3, r4, r7, pc}
 800794a:	bf00      	nop
 800794c:	20000b1c 	.word	0x20000b1c

08007950 <message_builder_set_reply_host>:

message_builder* message_builder_set_reply_host(message_builder* message_builder, char* reply_host){
 8007950:	b480      	push	{r7}
 8007952:	b083      	sub	sp, #12
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
 8007958:	6039      	str	r1, [r7, #0]
	if( message_builder == NULL ) return NULL;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d101      	bne.n	8007964 <message_builder_set_reply_host+0x14>
 8007960:	2300      	movs	r3, #0
 8007962:	e003      	b.n	800796c <message_builder_set_reply_host+0x1c>
	message_builder->reply_host = reply_host;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	683a      	ldr	r2, [r7, #0]
 8007968:	601a      	str	r2, [r3, #0]
	return message_builder;
 800796a:	687b      	ldr	r3, [r7, #4]
}
 800796c:	4618      	mov	r0, r3
 800796e:	370c      	adds	r7, #12
 8007970:	46bd      	mov	sp, r7
 8007972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007976:	4770      	bx	lr

08007978 <message_builder_set_reply_port>:

message_builder* message_builder_set_reply_port(message_builder* message_builder, char* reply_port){
 8007978:	b480      	push	{r7}
 800797a:	b083      	sub	sp, #12
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
 8007980:	6039      	str	r1, [r7, #0]
	if( message_builder == NULL ) return NULL;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d101      	bne.n	800798c <message_builder_set_reply_port+0x14>
 8007988:	2300      	movs	r3, #0
 800798a:	e003      	b.n	8007994 <message_builder_set_reply_port+0x1c>
	message_builder->reply_port = reply_port;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	683a      	ldr	r2, [r7, #0]
 8007990:	605a      	str	r2, [r3, #4]
	return message_builder;
 8007992:	687b      	ldr	r3, [r7, #4]
}
 8007994:	4618      	mov	r0, r3
 8007996:	370c      	adds	r7, #12
 8007998:	46bd      	mov	sp, r7
 800799a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799e:	4770      	bx	lr

080079a0 <message_builder_set_reply_channel>:

message_builder* message_builder_set_reply_channel(message_builder* message_builder, char* reply_channel){
 80079a0:	b480      	push	{r7}
 80079a2:	b083      	sub	sp, #12
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
 80079a8:	6039      	str	r1, [r7, #0]
	if( message_builder == NULL ) return NULL;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d101      	bne.n	80079b4 <message_builder_set_reply_channel+0x14>
 80079b0:	2300      	movs	r3, #0
 80079b2:	e003      	b.n	80079bc <message_builder_set_reply_channel+0x1c>
	message_builder->reply_channel = reply_channel;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	683a      	ldr	r2, [r7, #0]
 80079b8:	609a      	str	r2, [r3, #8]
	return message_builder;
 80079ba:	687b      	ldr	r3, [r7, #4]
}
 80079bc:	4618      	mov	r0, r3
 80079be:	370c      	adds	r7, #12
 80079c0:	46bd      	mov	sp, r7
 80079c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c6:	4770      	bx	lr

080079c8 <message_builder_set_method>:

message_builder* message_builder_set_method(message_builder* message_builder, char* method){
 80079c8:	b480      	push	{r7}
 80079ca:	b083      	sub	sp, #12
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
 80079d0:	6039      	str	r1, [r7, #0]
	if( message_builder == NULL ) return NULL;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d101      	bne.n	80079dc <message_builder_set_method+0x14>
 80079d8:	2300      	movs	r3, #0
 80079da:	e003      	b.n	80079e4 <message_builder_set_method+0x1c>
	message_builder->method = method;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	683a      	ldr	r2, [r7, #0]
 80079e0:	60da      	str	r2, [r3, #12]
	return message_builder;
 80079e2:	687b      	ldr	r3, [r7, #4]
}
 80079e4:	4618      	mov	r0, r3
 80079e6:	370c      	adds	r7, #12
 80079e8:	46bd      	mov	sp, r7
 80079ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ee:	4770      	bx	lr

080079f0 <message_builder_set_uri>:

message_builder* message_builder_set_uri(message_builder* message_builder, char* uri){
 80079f0:	b480      	push	{r7}
 80079f2:	b083      	sub	sp, #12
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
 80079f8:	6039      	str	r1, [r7, #0]
	if( message_builder == NULL ) return NULL;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d101      	bne.n	8007a04 <message_builder_set_uri+0x14>
 8007a00:	2300      	movs	r3, #0
 8007a02:	e003      	b.n	8007a0c <message_builder_set_uri+0x1c>
	message_builder->uri = uri;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	683a      	ldr	r2, [r7, #0]
 8007a08:	611a      	str	r2, [r3, #16]
	return message_builder;
 8007a0a:	687b      	ldr	r3, [r7, #4]
}
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	370c      	adds	r7, #12
 8007a10:	46bd      	mov	sp, r7
 8007a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a16:	4770      	bx	lr

08007a18 <message_builder_put_body>:
	if( message_builder == NULL ) return NULL;
	map_string_put(message_builder->header, key, value);
	return message_builder;
}

message_builder* message_builder_put_body(message_builder* message_builder, char* key, char* value){
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b084      	sub	sp, #16
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	60f8      	str	r0, [r7, #12]
 8007a20:	60b9      	str	r1, [r7, #8]
 8007a22:	607a      	str	r2, [r7, #4]
	if( message_builder == NULL ) return NULL;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d101      	bne.n	8007a2e <message_builder_put_body+0x16>
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	e007      	b.n	8007a3e <message_builder_put_body+0x26>
	map_string_put(message_builder->body, key, value);
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	699b      	ldr	r3, [r3, #24]
 8007a32:	687a      	ldr	r2, [r7, #4]
 8007a34:	68b9      	ldr	r1, [r7, #8]
 8007a36:	4618      	mov	r0, r3
 8007a38:	f7ff fd67 	bl	800750a <map_string_put>
	return message_builder;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
}
 8007a3e:	4618      	mov	r0, r3
 8007a40:	3710      	adds	r7, #16
 8007a42:	46bd      	mov	sp, r7
 8007a44:	bd80      	pop	{r7, pc}
	...

08007a48 <message_builder_build>:

char* message_builder_build(message_builder* message_builder){
 8007a48:	b5b0      	push	{r4, r5, r7, lr}
 8007a4a:	b084      	sub	sp, #16
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
	if( message_builder == NULL ) return NULL;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d101      	bne.n	8007a5a <message_builder_build+0x12>
 8007a56:	2300      	movs	r3, #0
 8007a58:	e10b      	b.n	8007c72 <message_builder_build+0x22a>

	char* message = (char*) malloc(256*sizeof(char)); message[0] = '\0';
 8007a5a:	f44f 7080 	mov.w	r0, #256	; 0x100
 8007a5e:	f004 fec3 	bl	800c7e8 <malloc>
 8007a62:	4603      	mov	r3, r0
 8007a64:	60fb      	str	r3, [r7, #12]
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	2200      	movs	r2, #0
 8007a6a:	701a      	strb	r2, [r3, #0]
	message[0] = '{';
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	227b      	movs	r2, #123	; 0x7b
 8007a70:	701a      	strb	r2, [r3, #0]
	message[1] = '\0';
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	3301      	adds	r3, #1
 8007a76:	2200      	movs	r2, #0
 8007a78:	701a      	strb	r2, [r3, #0]

	//strcat(message, "{");
	strcat(message, (char*) "\"replyHost\":\""); strcat(message, message_builder->reply_host); strcat(message, (char*) "\",");
 8007a7a:	68f8      	ldr	r0, [r7, #12]
 8007a7c:	f7f8 fbb2 	bl	80001e4 <strlen>
 8007a80:	4603      	mov	r3, r0
 8007a82:	461a      	mov	r2, r3
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	4413      	add	r3, r2
 8007a88:	4a7c      	ldr	r2, [pc, #496]	; (8007c7c <message_builder_build+0x234>)
 8007a8a:	461c      	mov	r4, r3
 8007a8c:	4613      	mov	r3, r2
 8007a8e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007a90:	6020      	str	r0, [r4, #0]
 8007a92:	6061      	str	r1, [r4, #4]
 8007a94:	60a2      	str	r2, [r4, #8]
 8007a96:	881b      	ldrh	r3, [r3, #0]
 8007a98:	81a3      	strh	r3, [r4, #12]
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	4619      	mov	r1, r3
 8007aa0:	68f8      	ldr	r0, [r7, #12]
 8007aa2:	f005 f92b 	bl	800ccfc <strcat>
 8007aa6:	68f8      	ldr	r0, [r7, #12]
 8007aa8:	f7f8 fb9c 	bl	80001e4 <strlen>
 8007aac:	4603      	mov	r3, r0
 8007aae:	461a      	mov	r2, r3
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	4413      	add	r3, r2
 8007ab4:	4a72      	ldr	r2, [pc, #456]	; (8007c80 <message_builder_build+0x238>)
 8007ab6:	8811      	ldrh	r1, [r2, #0]
 8007ab8:	7892      	ldrb	r2, [r2, #2]
 8007aba:	8019      	strh	r1, [r3, #0]
 8007abc:	709a      	strb	r2, [r3, #2]
	strcat(message, (char*) "\"replyPort\":"); strcat(message, message_builder->reply_port); strcat(message, (char*) ",");
 8007abe:	68f8      	ldr	r0, [r7, #12]
 8007ac0:	f7f8 fb90 	bl	80001e4 <strlen>
 8007ac4:	4603      	mov	r3, r0
 8007ac6:	461a      	mov	r2, r3
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	4413      	add	r3, r2
 8007acc:	4a6d      	ldr	r2, [pc, #436]	; (8007c84 <message_builder_build+0x23c>)
 8007ace:	461c      	mov	r4, r3
 8007ad0:	4613      	mov	r3, r2
 8007ad2:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007ad4:	6020      	str	r0, [r4, #0]
 8007ad6:	6061      	str	r1, [r4, #4]
 8007ad8:	60a2      	str	r2, [r4, #8]
 8007ada:	781b      	ldrb	r3, [r3, #0]
 8007adc:	7323      	strb	r3, [r4, #12]
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	685b      	ldr	r3, [r3, #4]
 8007ae2:	4619      	mov	r1, r3
 8007ae4:	68f8      	ldr	r0, [r7, #12]
 8007ae6:	f005 f909 	bl	800ccfc <strcat>
 8007aea:	68f8      	ldr	r0, [r7, #12]
 8007aec:	f7f8 fb7a 	bl	80001e4 <strlen>
 8007af0:	4603      	mov	r3, r0
 8007af2:	461a      	mov	r2, r3
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	4413      	add	r3, r2
 8007af8:	4963      	ldr	r1, [pc, #396]	; (8007c88 <message_builder_build+0x240>)
 8007afa:	461a      	mov	r2, r3
 8007afc:	460b      	mov	r3, r1
 8007afe:	881b      	ldrh	r3, [r3, #0]
 8007b00:	8013      	strh	r3, [r2, #0]
	strcat(message, (char*) "\"replyChannel\":\""); strcat(message, message_builder->reply_channel); strcat(message, (char*) "\",");
 8007b02:	68f8      	ldr	r0, [r7, #12]
 8007b04:	f7f8 fb6e 	bl	80001e4 <strlen>
 8007b08:	4603      	mov	r3, r0
 8007b0a:	461a      	mov	r2, r3
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	4413      	add	r3, r2
 8007b10:	4a5e      	ldr	r2, [pc, #376]	; (8007c8c <message_builder_build+0x244>)
 8007b12:	461d      	mov	r5, r3
 8007b14:	4614      	mov	r4, r2
 8007b16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007b18:	6028      	str	r0, [r5, #0]
 8007b1a:	6069      	str	r1, [r5, #4]
 8007b1c:	60aa      	str	r2, [r5, #8]
 8007b1e:	60eb      	str	r3, [r5, #12]
 8007b20:	7823      	ldrb	r3, [r4, #0]
 8007b22:	742b      	strb	r3, [r5, #16]
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	689b      	ldr	r3, [r3, #8]
 8007b28:	4619      	mov	r1, r3
 8007b2a:	68f8      	ldr	r0, [r7, #12]
 8007b2c:	f005 f8e6 	bl	800ccfc <strcat>
 8007b30:	68f8      	ldr	r0, [r7, #12]
 8007b32:	f7f8 fb57 	bl	80001e4 <strlen>
 8007b36:	4603      	mov	r3, r0
 8007b38:	461a      	mov	r2, r3
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	4413      	add	r3, r2
 8007b3e:	4a50      	ldr	r2, [pc, #320]	; (8007c80 <message_builder_build+0x238>)
 8007b40:	8811      	ldrh	r1, [r2, #0]
 8007b42:	7892      	ldrb	r2, [r2, #2]
 8007b44:	8019      	strh	r1, [r3, #0]
 8007b46:	709a      	strb	r2, [r3, #2]
	strcat(message, (char*) "\"method\":\""); strcat(message, message_builder->method); strcat(message, (char*) "\",");
 8007b48:	68f8      	ldr	r0, [r7, #12]
 8007b4a:	f7f8 fb4b 	bl	80001e4 <strlen>
 8007b4e:	4603      	mov	r3, r0
 8007b50:	461a      	mov	r2, r3
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	4413      	add	r3, r2
 8007b56:	494e      	ldr	r1, [pc, #312]	; (8007c90 <message_builder_build+0x248>)
 8007b58:	461a      	mov	r2, r3
 8007b5a:	460b      	mov	r3, r1
 8007b5c:	cb03      	ldmia	r3!, {r0, r1}
 8007b5e:	6010      	str	r0, [r2, #0]
 8007b60:	6051      	str	r1, [r2, #4]
 8007b62:	8819      	ldrh	r1, [r3, #0]
 8007b64:	789b      	ldrb	r3, [r3, #2]
 8007b66:	8111      	strh	r1, [r2, #8]
 8007b68:	7293      	strb	r3, [r2, #10]
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	68db      	ldr	r3, [r3, #12]
 8007b6e:	4619      	mov	r1, r3
 8007b70:	68f8      	ldr	r0, [r7, #12]
 8007b72:	f005 f8c3 	bl	800ccfc <strcat>
 8007b76:	68f8      	ldr	r0, [r7, #12]
 8007b78:	f7f8 fb34 	bl	80001e4 <strlen>
 8007b7c:	4603      	mov	r3, r0
 8007b7e:	461a      	mov	r2, r3
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	4413      	add	r3, r2
 8007b84:	4a3e      	ldr	r2, [pc, #248]	; (8007c80 <message_builder_build+0x238>)
 8007b86:	8811      	ldrh	r1, [r2, #0]
 8007b88:	7892      	ldrb	r2, [r2, #2]
 8007b8a:	8019      	strh	r1, [r3, #0]
 8007b8c:	709a      	strb	r2, [r3, #2]
	strcat(message, (char*) "\"uri\":\""); strcat(message, message_builder->uri); strcat(message, "\",");
 8007b8e:	68f8      	ldr	r0, [r7, #12]
 8007b90:	f7f8 fb28 	bl	80001e4 <strlen>
 8007b94:	4603      	mov	r3, r0
 8007b96:	461a      	mov	r2, r3
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	4413      	add	r3, r2
 8007b9c:	493d      	ldr	r1, [pc, #244]	; (8007c94 <message_builder_build+0x24c>)
 8007b9e:	461a      	mov	r2, r3
 8007ba0:	460b      	mov	r3, r1
 8007ba2:	cb03      	ldmia	r3!, {r0, r1}
 8007ba4:	6010      	str	r0, [r2, #0]
 8007ba6:	6051      	str	r1, [r2, #4]
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	691b      	ldr	r3, [r3, #16]
 8007bac:	4619      	mov	r1, r3
 8007bae:	68f8      	ldr	r0, [r7, #12]
 8007bb0:	f005 f8a4 	bl	800ccfc <strcat>
 8007bb4:	68f8      	ldr	r0, [r7, #12]
 8007bb6:	f7f8 fb15 	bl	80001e4 <strlen>
 8007bba:	4603      	mov	r3, r0
 8007bbc:	461a      	mov	r2, r3
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	4413      	add	r3, r2
 8007bc2:	4a2f      	ldr	r2, [pc, #188]	; (8007c80 <message_builder_build+0x238>)
 8007bc4:	8811      	ldrh	r1, [r2, #0]
 8007bc6:	7892      	ldrb	r2, [r2, #2]
 8007bc8:	8019      	strh	r1, [r3, #0]
 8007bca:	709a      	strb	r2, [r3, #2]
	strcat(message, (char*) "\"header\":"); strcat(message, "{}"); strcat(message, (char*) ",");
 8007bcc:	68f8      	ldr	r0, [r7, #12]
 8007bce:	f7f8 fb09 	bl	80001e4 <strlen>
 8007bd2:	4603      	mov	r3, r0
 8007bd4:	461a      	mov	r2, r3
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	4413      	add	r3, r2
 8007bda:	492f      	ldr	r1, [pc, #188]	; (8007c98 <message_builder_build+0x250>)
 8007bdc:	461a      	mov	r2, r3
 8007bde:	460b      	mov	r3, r1
 8007be0:	cb03      	ldmia	r3!, {r0, r1}
 8007be2:	6010      	str	r0, [r2, #0]
 8007be4:	6051      	str	r1, [r2, #4]
 8007be6:	881b      	ldrh	r3, [r3, #0]
 8007be8:	8113      	strh	r3, [r2, #8]
 8007bea:	68f8      	ldr	r0, [r7, #12]
 8007bec:	f7f8 fafa 	bl	80001e4 <strlen>
 8007bf0:	4603      	mov	r3, r0
 8007bf2:	461a      	mov	r2, r3
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	4413      	add	r3, r2
 8007bf8:	4a28      	ldr	r2, [pc, #160]	; (8007c9c <message_builder_build+0x254>)
 8007bfa:	8811      	ldrh	r1, [r2, #0]
 8007bfc:	7892      	ldrb	r2, [r2, #2]
 8007bfe:	8019      	strh	r1, [r3, #0]
 8007c00:	709a      	strb	r2, [r3, #2]
 8007c02:	68f8      	ldr	r0, [r7, #12]
 8007c04:	f7f8 faee 	bl	80001e4 <strlen>
 8007c08:	4603      	mov	r3, r0
 8007c0a:	461a      	mov	r2, r3
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	4413      	add	r3, r2
 8007c10:	491d      	ldr	r1, [pc, #116]	; (8007c88 <message_builder_build+0x240>)
 8007c12:	461a      	mov	r2, r3
 8007c14:	460b      	mov	r3, r1
 8007c16:	881b      	ldrh	r3, [r3, #0]
 8007c18:	8013      	strh	r3, [r2, #0]
	strcat(message, (char*) "\"body\":"); strcat(message, map_string_to_char(message_builder->body));
 8007c1a:	68f8      	ldr	r0, [r7, #12]
 8007c1c:	f7f8 fae2 	bl	80001e4 <strlen>
 8007c20:	4603      	mov	r3, r0
 8007c22:	461a      	mov	r2, r3
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	4413      	add	r3, r2
 8007c28:	491d      	ldr	r1, [pc, #116]	; (8007ca0 <message_builder_build+0x258>)
 8007c2a:	461a      	mov	r2, r3
 8007c2c:	460b      	mov	r3, r1
 8007c2e:	cb03      	ldmia	r3!, {r0, r1}
 8007c30:	6010      	str	r0, [r2, #0]
 8007c32:	6051      	str	r1, [r2, #4]
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	699b      	ldr	r3, [r3, #24]
 8007c38:	4618      	mov	r0, r3
 8007c3a:	f7ff fc9f 	bl	800757c <map_string_to_char>
 8007c3e:	4603      	mov	r3, r0
 8007c40:	4619      	mov	r1, r3
 8007c42:	68f8      	ldr	r0, [r7, #12]
 8007c44:	f005 f85a 	bl	800ccfc <strcat>
	strcat(message, (char*) "}");
 8007c48:	68f8      	ldr	r0, [r7, #12]
 8007c4a:	f7f8 facb 	bl	80001e4 <strlen>
 8007c4e:	4603      	mov	r3, r0
 8007c50:	461a      	mov	r2, r3
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	4413      	add	r3, r2
 8007c56:	4913      	ldr	r1, [pc, #76]	; (8007ca4 <message_builder_build+0x25c>)
 8007c58:	461a      	mov	r2, r3
 8007c5a:	460b      	mov	r3, r1
 8007c5c:	881b      	ldrh	r3, [r3, #0]
 8007c5e:	8013      	strh	r3, [r2, #0]
	message[strlen(message)] = '\0';
 8007c60:	68f8      	ldr	r0, [r7, #12]
 8007c62:	f7f8 fabf 	bl	80001e4 <strlen>
 8007c66:	4602      	mov	r2, r0
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	4413      	add	r3, r2
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	701a      	strb	r2, [r3, #0]
	return message;
 8007c70:	68fb      	ldr	r3, [r7, #12]
}
 8007c72:	4618      	mov	r0, r3
 8007c74:	3710      	adds	r7, #16
 8007c76:	46bd      	mov	sp, r7
 8007c78:	bdb0      	pop	{r4, r5, r7, pc}
 8007c7a:	bf00      	nop
 8007c7c:	08011838 	.word	0x08011838
 8007c80:	08011848 	.word	0x08011848
 8007c84:	0801184c 	.word	0x0801184c
 8007c88:	0801185c 	.word	0x0801185c
 8007c8c:	08011860 	.word	0x08011860
 8007c90:	08011874 	.word	0x08011874
 8007c94:	08011880 	.word	0x08011880
 8007c98:	08011888 	.word	0x08011888
 8007c9c:	08011894 	.word	0x08011894
 8007ca0:	08011898 	.word	0x08011898
 8007ca4:	080118a0 	.word	0x080118a0

08007ca8 <message_builder_destroy>:

void message_builder_destroy(){
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	af00      	add	r7, sp, #0
	if( message_builder_instance == NULL ) return;
 8007cac:	4b30      	ldr	r3, [pc, #192]	; (8007d70 <message_builder_destroy+0xc8>)
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d05a      	beq.n	8007d6a <message_builder_destroy+0xc2>

	//free(message_builder_instance->reply_host);
	message_builder_instance->reply_host = NULL;
 8007cb4:	4b2e      	ldr	r3, [pc, #184]	; (8007d70 <message_builder_destroy+0xc8>)
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	2200      	movs	r2, #0
 8007cba:	701a      	strb	r2, [r3, #0]
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	705a      	strb	r2, [r3, #1]
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	709a      	strb	r2, [r3, #2]
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	70da      	strb	r2, [r3, #3]

	//free(message_builder_instance->reply_port);
	message_builder_instance->reply_port = NULL;
 8007cc8:	4b29      	ldr	r3, [pc, #164]	; (8007d70 <message_builder_destroy+0xc8>)
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	2200      	movs	r2, #0
 8007cce:	711a      	strb	r2, [r3, #4]
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	715a      	strb	r2, [r3, #5]
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	719a      	strb	r2, [r3, #6]
 8007cd8:	2200      	movs	r2, #0
 8007cda:	71da      	strb	r2, [r3, #7]

	//free(message_builder_instance->reply_channel);
	message_builder_instance->reply_channel = NULL;
 8007cdc:	4b24      	ldr	r3, [pc, #144]	; (8007d70 <message_builder_destroy+0xc8>)
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	721a      	strb	r2, [r3, #8]
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	725a      	strb	r2, [r3, #9]
 8007ce8:	2200      	movs	r2, #0
 8007cea:	729a      	strb	r2, [r3, #10]
 8007cec:	2200      	movs	r2, #0
 8007cee:	72da      	strb	r2, [r3, #11]

	//free(message_builder_instance->method);
	message_builder_instance->method = NULL;
 8007cf0:	4b1f      	ldr	r3, [pc, #124]	; (8007d70 <message_builder_destroy+0xc8>)
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	731a      	strb	r2, [r3, #12]
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	735a      	strb	r2, [r3, #13]
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	739a      	strb	r2, [r3, #14]
 8007d00:	2200      	movs	r2, #0
 8007d02:	73da      	strb	r2, [r3, #15]

	//free(message_builder_instance->uri);
	message_builder_instance->uri = NULL;
 8007d04:	4b1a      	ldr	r3, [pc, #104]	; (8007d70 <message_builder_destroy+0xc8>)
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	2200      	movs	r2, #0
 8007d0a:	741a      	strb	r2, [r3, #16]
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	745a      	strb	r2, [r3, #17]
 8007d10:	2200      	movs	r2, #0
 8007d12:	749a      	strb	r2, [r3, #18]
 8007d14:	2200      	movs	r2, #0
 8007d16:	74da      	strb	r2, [r3, #19]

	map_string_destroy(message_builder_instance->header);
 8007d18:	4b15      	ldr	r3, [pc, #84]	; (8007d70 <message_builder_destroy+0xc8>)
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	695b      	ldr	r3, [r3, #20]
 8007d1e:	4618      	mov	r0, r3
 8007d20:	f7ff fbcc 	bl	80074bc <map_string_destroy>
	message_builder_instance->header = NULL;
 8007d24:	4b12      	ldr	r3, [pc, #72]	; (8007d70 <message_builder_destroy+0xc8>)
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	2200      	movs	r2, #0
 8007d2a:	751a      	strb	r2, [r3, #20]
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	755a      	strb	r2, [r3, #21]
 8007d30:	2200      	movs	r2, #0
 8007d32:	759a      	strb	r2, [r3, #22]
 8007d34:	2200      	movs	r2, #0
 8007d36:	75da      	strb	r2, [r3, #23]

	map_string_destroy(message_builder_instance->body);
 8007d38:	4b0d      	ldr	r3, [pc, #52]	; (8007d70 <message_builder_destroy+0xc8>)
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	699b      	ldr	r3, [r3, #24]
 8007d3e:	4618      	mov	r0, r3
 8007d40:	f7ff fbbc 	bl	80074bc <map_string_destroy>
	message_builder_instance->body = NULL;
 8007d44:	4b0a      	ldr	r3, [pc, #40]	; (8007d70 <message_builder_destroy+0xc8>)
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	2200      	movs	r2, #0
 8007d4a:	761a      	strb	r2, [r3, #24]
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	765a      	strb	r2, [r3, #25]
 8007d50:	2200      	movs	r2, #0
 8007d52:	769a      	strb	r2, [r3, #26]
 8007d54:	2200      	movs	r2, #0
 8007d56:	76da      	strb	r2, [r3, #27]

	free(message_builder_instance);
 8007d58:	4b05      	ldr	r3, [pc, #20]	; (8007d70 <message_builder_destroy+0xc8>)
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	f004 fd4b 	bl	800c7f8 <free>
	message_builder_instance = NULL;
 8007d62:	4b03      	ldr	r3, [pc, #12]	; (8007d70 <message_builder_destroy+0xc8>)
 8007d64:	2200      	movs	r2, #0
 8007d66:	601a      	str	r2, [r3, #0]
 8007d68:	e000      	b.n	8007d6c <message_builder_destroy+0xc4>
	if( message_builder_instance == NULL ) return;
 8007d6a:	bf00      	nop
}
 8007d6c:	bd80      	pop	{r7, pc}
 8007d6e:	bf00      	nop
 8007d70:	20000b1c 	.word	0x20000b1c

08007d74 <stm32_util_set_pin_output>:

uint32_t stm32_util_read_analog(uint32_t channel){
	return 0;
}

void stm32_util_set_pin_output(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin){
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b088      	sub	sp, #32
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
 8007d7c:	460b      	mov	r3, r1
 8007d7e:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007d80:	f107 030c 	add.w	r3, r7, #12
 8007d84:	2200      	movs	r2, #0
 8007d86:	601a      	str	r2, [r3, #0]
 8007d88:	605a      	str	r2, [r3, #4]
 8007d8a:	609a      	str	r2, [r3, #8]
 8007d8c:	60da      	str	r2, [r3, #12]
 8007d8e:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8007d90:	887b      	ldrh	r3, [r7, #2]
 8007d92:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007d94:	2301      	movs	r3, #1
 8007d96:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007d98:	2300      	movs	r3, #0
 8007d9a:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8007d9c:	f107 030c 	add.w	r3, r7, #12
 8007da0:	4619      	mov	r1, r3
 8007da2:	6878      	ldr	r0, [r7, #4]
 8007da4:	f002 f892 	bl	8009ecc <HAL_GPIO_Init>
}
 8007da8:	bf00      	nop
 8007daa:	3720      	adds	r7, #32
 8007dac:	46bd      	mov	sp, r7
 8007dae:	bd80      	pop	{r7, pc}

08007db0 <stm32_util_set_pin_input>:

void stm32_util_set_pin_input(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin){
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b088      	sub	sp, #32
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
 8007db8:	460b      	mov	r3, r1
 8007dba:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007dbc:	f107 030c 	add.w	r3, r7, #12
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	601a      	str	r2, [r3, #0]
 8007dc4:	605a      	str	r2, [r3, #4]
 8007dc6:	609a      	str	r2, [r3, #8]
 8007dc8:	60da      	str	r2, [r3, #12]
 8007dca:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8007dcc:	887b      	ldrh	r3, [r7, #2]
 8007dce:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007dd4:	2301      	movs	r3, #1
 8007dd6:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8007dd8:	f107 030c 	add.w	r3, r7, #12
 8007ddc:	4619      	mov	r1, r3
 8007dde:	6878      	ldr	r0, [r7, #4]
 8007de0:	f002 f874 	bl	8009ecc <HAL_GPIO_Init>
}
 8007de4:	bf00      	nop
 8007de6:	3720      	adds	r7, #32
 8007de8:	46bd      	mov	sp, r7
 8007dea:	bd80      	pop	{r7, pc}

08007dec <stm32_util_delay_in_seconds>:

void stm32_util_delay_in_seconds(uint32_t seconds){
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b082      	sub	sp, #8
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
	stm32_util_delay_in_milliseconds(seconds * 1000);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007dfa:	fb02 f303 	mul.w	r3, r2, r3
 8007dfe:	4618      	mov	r0, r3
 8007e00:	f000 f80f 	bl	8007e22 <stm32_util_delay_in_milliseconds>
}
 8007e04:	bf00      	nop
 8007e06:	3708      	adds	r7, #8
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	bd80      	pop	{r7, pc}

08007e0c <stm32_util_delay_in_microseconds>:

void stm32_util_delay_in_microseconds(uint32_t microseconds){
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b082      	sub	sp, #8
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
	DWT_Delay(microseconds);
 8007e14:	6878      	ldr	r0, [r7, #4]
 8007e16:	f7ff fa8f 	bl	8007338 <DWT_Delay>
}
 8007e1a:	bf00      	nop
 8007e1c:	3708      	adds	r7, #8
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	bd80      	pop	{r7, pc}

08007e22 <stm32_util_delay_in_milliseconds>:

void stm32_util_delay_in_milliseconds(uint32_t milliseconds){
 8007e22:	b580      	push	{r7, lr}
 8007e24:	b082      	sub	sp, #8
 8007e26:	af00      	add	r7, sp, #0
 8007e28:	6078      	str	r0, [r7, #4]
	HAL_Delay(milliseconds);
 8007e2a:	6878      	ldr	r0, [r7, #4]
 8007e2c:	f000 f94a 	bl	80080c4 <HAL_Delay>
}
 8007e30:	bf00      	nop
 8007e32:	3708      	adds	r7, #8
 8007e34:	46bd      	mov	sp, r7
 8007e36:	bd80      	pop	{r7, pc}

08007e38 <string_util_is_empty>:
#include <util/string_util.h>

bool string_util_is_empty(char* string){
 8007e38:	b480      	push	{r7}
 8007e3a:	b083      	sub	sp, #12
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
	if( string == NULL ) return true;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d101      	bne.n	8007e4a <string_util_is_empty+0x12>
 8007e46:	2301      	movs	r3, #1
 8007e48:	e006      	b.n	8007e58 <string_util_is_empty+0x20>
	return strlen(string) == 0;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	781b      	ldrb	r3, [r3, #0]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	bf0c      	ite	eq
 8007e52:	2301      	moveq	r3, #1
 8007e54:	2300      	movne	r3, #0
 8007e56:	b2db      	uxtb	r3, r3
}
 8007e58:	4618      	mov	r0, r3
 8007e5a:	370c      	adds	r7, #12
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e62:	4770      	bx	lr

08007e64 <string_util_property>:

char* string_util_trim(char* string, char mark){
    return string_util_right_trim(string_util_left_trim(string, mark), mark);
}

char* string_util_property(char* name, char* value){
 8007e64:	b590      	push	{r4, r7, lr}
 8007e66:	b085      	sub	sp, #20
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
 8007e6c:	6039      	str	r1, [r7, #0]
	unsigned int length = strlen(name) + strlen(value) + 2;
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	f7f8 f9b8 	bl	80001e4 <strlen>
 8007e74:	4604      	mov	r4, r0
 8007e76:	6838      	ldr	r0, [r7, #0]
 8007e78:	f7f8 f9b4 	bl	80001e4 <strlen>
 8007e7c:	4603      	mov	r3, r0
 8007e7e:	4423      	add	r3, r4
 8007e80:	3302      	adds	r3, #2
 8007e82:	60fb      	str	r3, [r7, #12]
	char* result = (char*) malloc(length*sizeof(char));
 8007e84:	68f8      	ldr	r0, [r7, #12]
 8007e86:	f004 fcaf 	bl	800c7e8 <malloc>
 8007e8a:	4603      	mov	r3, r0
 8007e8c:	60bb      	str	r3, [r7, #8]
	strcpy(result, name);
 8007e8e:	6879      	ldr	r1, [r7, #4]
 8007e90:	68b8      	ldr	r0, [r7, #8]
 8007e92:	f004 ff42 	bl	800cd1a <strcpy>
	strcat(result, (char*) ":");
 8007e96:	68b8      	ldr	r0, [r7, #8]
 8007e98:	f7f8 f9a4 	bl	80001e4 <strlen>
 8007e9c:	4603      	mov	r3, r0
 8007e9e:	461a      	mov	r2, r3
 8007ea0:	68bb      	ldr	r3, [r7, #8]
 8007ea2:	4413      	add	r3, r2
 8007ea4:	4906      	ldr	r1, [pc, #24]	; (8007ec0 <string_util_property+0x5c>)
 8007ea6:	461a      	mov	r2, r3
 8007ea8:	460b      	mov	r3, r1
 8007eaa:	881b      	ldrh	r3, [r3, #0]
 8007eac:	8013      	strh	r3, [r2, #0]
	strcat(result, value);
 8007eae:	6839      	ldr	r1, [r7, #0]
 8007eb0:	68b8      	ldr	r0, [r7, #8]
 8007eb2:	f004 ff23 	bl	800ccfc <strcat>
	return result;
 8007eb6:	68bb      	ldr	r3, [r7, #8]
}
 8007eb8:	4618      	mov	r0, r3
 8007eba:	3714      	adds	r7, #20
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	bd90      	pop	{r4, r7, pc}
 8007ec0:	080118a8 	.word	0x080118a8

08007ec4 <string_util_concat>:

char* string_util_concat(char* destiny, char* source){
 8007ec4:	b590      	push	{r4, r7, lr}
 8007ec6:	b087      	sub	sp, #28
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
 8007ecc:	6039      	str	r1, [r7, #0]
	size_t size_destiny = strlen(destiny);
 8007ece:	6878      	ldr	r0, [r7, #4]
 8007ed0:	f7f8 f988 	bl	80001e4 <strlen>
 8007ed4:	6178      	str	r0, [r7, #20]
	size_t size_source = strlen(source);
 8007ed6:	6838      	ldr	r0, [r7, #0]
 8007ed8:	f7f8 f984 	bl	80001e4 <strlen>
 8007edc:	6138      	str	r0, [r7, #16]
	size_t size = size_destiny + size_source + 1;
 8007ede:	697a      	ldr	r2, [r7, #20]
 8007ee0:	693b      	ldr	r3, [r7, #16]
 8007ee2:	4413      	add	r3, r2
 8007ee4:	3301      	adds	r3, #1
 8007ee6:	60fb      	str	r3, [r7, #12]

	char* result = (char*) malloc(size*sizeof(char));
 8007ee8:	68f8      	ldr	r0, [r7, #12]
 8007eea:	f004 fc7d 	bl	800c7e8 <malloc>
 8007eee:	4603      	mov	r3, r0
 8007ef0:	60bb      	str	r3, [r7, #8]
	for(register size_t i = 0; i < size; i++) result[i] = '\0';
 8007ef2:	2400      	movs	r4, #0
 8007ef4:	e004      	b.n	8007f00 <string_util_concat+0x3c>
 8007ef6:	68bb      	ldr	r3, [r7, #8]
 8007ef8:	4423      	add	r3, r4
 8007efa:	2200      	movs	r2, #0
 8007efc:	701a      	strb	r2, [r3, #0]
 8007efe:	3401      	adds	r4, #1
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	429c      	cmp	r4, r3
 8007f04:	d3f7      	bcc.n	8007ef6 <string_util_concat+0x32>
	strcpy(result, destiny);
 8007f06:	6879      	ldr	r1, [r7, #4]
 8007f08:	68b8      	ldr	r0, [r7, #8]
 8007f0a:	f004 ff06 	bl	800cd1a <strcpy>
	strcpy(&result[size_destiny], source);
 8007f0e:	68ba      	ldr	r2, [r7, #8]
 8007f10:	697b      	ldr	r3, [r7, #20]
 8007f12:	4413      	add	r3, r2
 8007f14:	6839      	ldr	r1, [r7, #0]
 8007f16:	4618      	mov	r0, r3
 8007f18:	f004 feff 	bl	800cd1a <strcpy>

	return result;
 8007f1c:	68bb      	ldr	r3, [r7, #8]
}
 8007f1e:	4618      	mov	r0, r3
 8007f20:	371c      	adds	r7, #28
 8007f22:	46bd      	mov	sp, r7
 8007f24:	bd90      	pop	{r4, r7, pc}

08007f26 <string_util_length>:

size_t string_util_length(char* string){
 8007f26:	b580      	push	{r7, lr}
 8007f28:	b082      	sub	sp, #8
 8007f2a:	af00      	add	r7, sp, #0
 8007f2c:	6078      	str	r0, [r7, #4]
	return strlen(string);
 8007f2e:	6878      	ldr	r0, [r7, #4]
 8007f30:	f7f8 f958 	bl	80001e4 <strlen>
 8007f34:	4603      	mov	r3, r0
}
 8007f36:	4618      	mov	r0, r3
 8007f38:	3708      	adds	r7, #8
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	bd80      	pop	{r7, pc}

08007f3e <string_util_build_empty_string>:

char* string_util_build_empty_string(size_t length){
 8007f3e:	b590      	push	{r4, r7, lr}
 8007f40:	b085      	sub	sp, #20
 8007f42:	af00      	add	r7, sp, #0
 8007f44:	6078      	str	r0, [r7, #4]
	char* result = (char*) malloc((length+1)*sizeof(char));
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	3301      	adds	r3, #1
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	f004 fc4c 	bl	800c7e8 <malloc>
 8007f50:	4603      	mov	r3, r0
 8007f52:	60fb      	str	r3, [r7, #12]
	for(register size_t i = 0; i < length; i++) result[i] = '\0';
 8007f54:	2400      	movs	r4, #0
 8007f56:	e004      	b.n	8007f62 <string_util_build_empty_string+0x24>
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	4423      	add	r3, r4
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	701a      	strb	r2, [r3, #0]
 8007f60:	3401      	adds	r4, #1
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	429c      	cmp	r4, r3
 8007f66:	d3f7      	bcc.n	8007f58 <string_util_build_empty_string+0x1a>
	return result;
 8007f68:	68fb      	ldr	r3, [r7, #12]
}
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	3714      	adds	r7, #20
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	bd90      	pop	{r4, r7, pc}

08007f72 <string_util_copy>:


void string_util_copy(char* destiny, char* source, size_t length){
 8007f72:	b580      	push	{r7, lr}
 8007f74:	b084      	sub	sp, #16
 8007f76:	af00      	add	r7, sp, #0
 8007f78:	60f8      	str	r0, [r7, #12]
 8007f7a:	60b9      	str	r1, [r7, #8]
 8007f7c:	607a      	str	r2, [r7, #4]
	strncpy(destiny, source, length);
 8007f7e:	687a      	ldr	r2, [r7, #4]
 8007f80:	68b9      	ldr	r1, [r7, #8]
 8007f82:	68f8      	ldr	r0, [r7, #12]
 8007f84:	f004 fed1 	bl	800cd2a <strncpy>
}
 8007f88:	bf00      	nop
 8007f8a:	3710      	adds	r7, #16
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	bd80      	pop	{r7, pc}

08007f90 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8007f90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007fc8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8007f94:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8007f96:	e003      	b.n	8007fa0 <LoopCopyDataInit>

08007f98 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8007f98:	4b0c      	ldr	r3, [pc, #48]	; (8007fcc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8007f9a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8007f9c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8007f9e:	3104      	adds	r1, #4

08007fa0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8007fa0:	480b      	ldr	r0, [pc, #44]	; (8007fd0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8007fa2:	4b0c      	ldr	r3, [pc, #48]	; (8007fd4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8007fa4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8007fa6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8007fa8:	d3f6      	bcc.n	8007f98 <CopyDataInit>
	ldr	r2, =_sbss
 8007faa:	4a0b      	ldr	r2, [pc, #44]	; (8007fd8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8007fac:	e002      	b.n	8007fb4 <LoopFillZerobss>

08007fae <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8007fae:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8007fb0:	f842 3b04 	str.w	r3, [r2], #4

08007fb4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8007fb4:	4b09      	ldr	r3, [pc, #36]	; (8007fdc <LoopForever+0x16>)
	cmp	r2, r3
 8007fb6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8007fb8:	d3f9      	bcc.n	8007fae <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8007fba:	f7fa f837 	bl	800202c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007fbe:	f004 fbef 	bl	800c7a0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8007fc2:	f7f9 fc17 	bl	80017f4 <main>

08007fc6 <LoopForever>:

LoopForever:
    b LoopForever
 8007fc6:	e7fe      	b.n	8007fc6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8007fc8:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8007fcc:	08011dc8 	.word	0x08011dc8
	ldr	r0, =_sdata
 8007fd0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8007fd4:	20000a94 	.word	0x20000a94
	ldr	r2, =_sbss
 8007fd8:	20000a94 	.word	0x20000a94
	ldr	r3, = _ebss
 8007fdc:	20001184 	.word	0x20001184

08007fe0 <CAN1_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8007fe0:	e7fe      	b.n	8007fe0 <CAN1_RX0_IRQHandler>

08007fe2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007fe2:	b580      	push	{r7, lr}
 8007fe4:	b082      	sub	sp, #8
 8007fe6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8007fe8:	2300      	movs	r3, #0
 8007fea:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007fec:	2003      	movs	r0, #3
 8007fee:	f001 fcf5 	bl	80099dc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8007ff2:	2000      	movs	r0, #0
 8007ff4:	f000 f80e 	bl	8008014 <HAL_InitTick>
 8007ff8:	4603      	mov	r3, r0
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d002      	beq.n	8008004 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8007ffe:	2301      	movs	r3, #1
 8008000:	71fb      	strb	r3, [r7, #7]
 8008002:	e001      	b.n	8008008 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8008004:	f7f9 fe8c 	bl	8001d20 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8008008:	79fb      	ldrb	r3, [r7, #7]
}
 800800a:	4618      	mov	r0, r3
 800800c:	3708      	adds	r7, #8
 800800e:	46bd      	mov	sp, r7
 8008010:	bd80      	pop	{r7, pc}
	...

08008014 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008014:	b580      	push	{r7, lr}
 8008016:	b084      	sub	sp, #16
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800801c:	2300      	movs	r3, #0
 800801e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8008020:	4b16      	ldr	r3, [pc, #88]	; (800807c <HAL_InitTick+0x68>)
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d022      	beq.n	800806e <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8008028:	4b15      	ldr	r3, [pc, #84]	; (8008080 <HAL_InitTick+0x6c>)
 800802a:	681a      	ldr	r2, [r3, #0]
 800802c:	4b13      	ldr	r3, [pc, #76]	; (800807c <HAL_InitTick+0x68>)
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008034:	fbb1 f3f3 	udiv	r3, r1, r3
 8008038:	fbb2 f3f3 	udiv	r3, r2, r3
 800803c:	4618      	mov	r0, r3
 800803e:	f001 fd02 	bl	8009a46 <HAL_SYSTICK_Config>
 8008042:	4603      	mov	r3, r0
 8008044:	2b00      	cmp	r3, #0
 8008046:	d10f      	bne.n	8008068 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2b0f      	cmp	r3, #15
 800804c:	d809      	bhi.n	8008062 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800804e:	2200      	movs	r2, #0
 8008050:	6879      	ldr	r1, [r7, #4]
 8008052:	f04f 30ff 	mov.w	r0, #4294967295
 8008056:	f001 fccc 	bl	80099f2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800805a:	4a0a      	ldr	r2, [pc, #40]	; (8008084 <HAL_InitTick+0x70>)
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	6013      	str	r3, [r2, #0]
 8008060:	e007      	b.n	8008072 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8008062:	2301      	movs	r3, #1
 8008064:	73fb      	strb	r3, [r7, #15]
 8008066:	e004      	b.n	8008072 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8008068:	2301      	movs	r3, #1
 800806a:	73fb      	strb	r3, [r7, #15]
 800806c:	e001      	b.n	8008072 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800806e:	2301      	movs	r3, #1
 8008070:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8008072:	7bfb      	ldrb	r3, [r7, #15]
}
 8008074:	4618      	mov	r0, r3
 8008076:	3710      	adds	r7, #16
 8008078:	46bd      	mov	sp, r7
 800807a:	bd80      	pop	{r7, pc}
 800807c:	200000e0 	.word	0x200000e0
 8008080:	20000000 	.word	0x20000000
 8008084:	200000dc 	.word	0x200000dc

08008088 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008088:	b480      	push	{r7}
 800808a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800808c:	4b05      	ldr	r3, [pc, #20]	; (80080a4 <HAL_IncTick+0x1c>)
 800808e:	681a      	ldr	r2, [r3, #0]
 8008090:	4b05      	ldr	r3, [pc, #20]	; (80080a8 <HAL_IncTick+0x20>)
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	4413      	add	r3, r2
 8008096:	4a03      	ldr	r2, [pc, #12]	; (80080a4 <HAL_IncTick+0x1c>)
 8008098:	6013      	str	r3, [r2, #0]
}
 800809a:	bf00      	nop
 800809c:	46bd      	mov	sp, r7
 800809e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a2:	4770      	bx	lr
 80080a4:	20001170 	.word	0x20001170
 80080a8:	200000e0 	.word	0x200000e0

080080ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80080ac:	b480      	push	{r7}
 80080ae:	af00      	add	r7, sp, #0
  return uwTick;
 80080b0:	4b03      	ldr	r3, [pc, #12]	; (80080c0 <HAL_GetTick+0x14>)
 80080b2:	681b      	ldr	r3, [r3, #0]
}
 80080b4:	4618      	mov	r0, r3
 80080b6:	46bd      	mov	sp, r7
 80080b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080bc:	4770      	bx	lr
 80080be:	bf00      	nop
 80080c0:	20001170 	.word	0x20001170

080080c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b084      	sub	sp, #16
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80080cc:	f7ff ffee 	bl	80080ac <HAL_GetTick>
 80080d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080dc:	d004      	beq.n	80080e8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80080de:	4b09      	ldr	r3, [pc, #36]	; (8008104 <HAL_Delay+0x40>)
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	68fa      	ldr	r2, [r7, #12]
 80080e4:	4413      	add	r3, r2
 80080e6:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80080e8:	bf00      	nop
 80080ea:	f7ff ffdf 	bl	80080ac <HAL_GetTick>
 80080ee:	4602      	mov	r2, r0
 80080f0:	68bb      	ldr	r3, [r7, #8]
 80080f2:	1ad3      	subs	r3, r2, r3
 80080f4:	68fa      	ldr	r2, [r7, #12]
 80080f6:	429a      	cmp	r2, r3
 80080f8:	d8f7      	bhi.n	80080ea <HAL_Delay+0x26>
  {
  }
}
 80080fa:	bf00      	nop
 80080fc:	3710      	adds	r7, #16
 80080fe:	46bd      	mov	sp, r7
 8008100:	bd80      	pop	{r7, pc}
 8008102:	bf00      	nop
 8008104:	200000e0 	.word	0x200000e0

08008108 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8008108:	b480      	push	{r7}
 800810a:	b083      	sub	sp, #12
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
 8008110:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	689b      	ldr	r3, [r3, #8]
 8008116:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	431a      	orrs	r2, r3
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	609a      	str	r2, [r3, #8]
}
 8008122:	bf00      	nop
 8008124:	370c      	adds	r7, #12
 8008126:	46bd      	mov	sp, r7
 8008128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812c:	4770      	bx	lr

0800812e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800812e:	b480      	push	{r7}
 8008130:	b083      	sub	sp, #12
 8008132:	af00      	add	r7, sp, #0
 8008134:	6078      	str	r0, [r7, #4]
 8008136:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	689b      	ldr	r3, [r3, #8]
 800813c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	431a      	orrs	r2, r3
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	609a      	str	r2, [r3, #8]
}
 8008148:	bf00      	nop
 800814a:	370c      	adds	r7, #12
 800814c:	46bd      	mov	sp, r7
 800814e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008152:	4770      	bx	lr

08008154 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8008154:	b480      	push	{r7}
 8008156:	b083      	sub	sp, #12
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	689b      	ldr	r3, [r3, #8]
 8008160:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8008164:	4618      	mov	r0, r3
 8008166:	370c      	adds	r7, #12
 8008168:	46bd      	mov	sp, r7
 800816a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816e:	4770      	bx	lr

08008170 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8008170:	b490      	push	{r4, r7}
 8008172:	b084      	sub	sp, #16
 8008174:	af00      	add	r7, sp, #0
 8008176:	60f8      	str	r0, [r7, #12]
 8008178:	60b9      	str	r1, [r7, #8]
 800817a:	607a      	str	r2, [r7, #4]
 800817c:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	3360      	adds	r3, #96	; 0x60
 8008182:	461a      	mov	r2, r3
 8008184:	68bb      	ldr	r3, [r7, #8]
 8008186:	009b      	lsls	r3, r3, #2
 8008188:	4413      	add	r3, r2
 800818a:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800818c:	6822      	ldr	r2, [r4, #0]
 800818e:	4b08      	ldr	r3, [pc, #32]	; (80081b0 <LL_ADC_SetOffset+0x40>)
 8008190:	4013      	ands	r3, r2
 8008192:	687a      	ldr	r2, [r7, #4]
 8008194:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8008198:	683a      	ldr	r2, [r7, #0]
 800819a:	430a      	orrs	r2, r1
 800819c:	4313      	orrs	r3, r2
 800819e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80081a2:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80081a4:	bf00      	nop
 80081a6:	3710      	adds	r7, #16
 80081a8:	46bd      	mov	sp, r7
 80081aa:	bc90      	pop	{r4, r7}
 80081ac:	4770      	bx	lr
 80081ae:	bf00      	nop
 80081b0:	03fff000 	.word	0x03fff000

080081b4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80081b4:	b490      	push	{r4, r7}
 80081b6:	b082      	sub	sp, #8
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
 80081bc:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	3360      	adds	r3, #96	; 0x60
 80081c2:	461a      	mov	r2, r3
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	009b      	lsls	r3, r3, #2
 80081c8:	4413      	add	r3, r2
 80081ca:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80081cc:	6823      	ldr	r3, [r4, #0]
 80081ce:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80081d2:	4618      	mov	r0, r3
 80081d4:	3708      	adds	r7, #8
 80081d6:	46bd      	mov	sp, r7
 80081d8:	bc90      	pop	{r4, r7}
 80081da:	4770      	bx	lr

080081dc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80081dc:	b490      	push	{r4, r7}
 80081de:	b084      	sub	sp, #16
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	60f8      	str	r0, [r7, #12]
 80081e4:	60b9      	str	r1, [r7, #8]
 80081e6:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	3360      	adds	r3, #96	; 0x60
 80081ec:	461a      	mov	r2, r3
 80081ee:	68bb      	ldr	r3, [r7, #8]
 80081f0:	009b      	lsls	r3, r3, #2
 80081f2:	4413      	add	r3, r2
 80081f4:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80081f6:	6823      	ldr	r3, [r4, #0]
 80081f8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	4313      	orrs	r3, r2
 8008200:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8008202:	bf00      	nop
 8008204:	3710      	adds	r7, #16
 8008206:	46bd      	mov	sp, r7
 8008208:	bc90      	pop	{r4, r7}
 800820a:	4770      	bx	lr

0800820c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800820c:	b480      	push	{r7}
 800820e:	b083      	sub	sp, #12
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	68db      	ldr	r3, [r3, #12]
 8008218:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800821c:	2b00      	cmp	r3, #0
 800821e:	d101      	bne.n	8008224 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8008220:	2301      	movs	r3, #1
 8008222:	e000      	b.n	8008226 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8008224:	2300      	movs	r3, #0
}
 8008226:	4618      	mov	r0, r3
 8008228:	370c      	adds	r7, #12
 800822a:	46bd      	mov	sp, r7
 800822c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008230:	4770      	bx	lr

08008232 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8008232:	b490      	push	{r4, r7}
 8008234:	b084      	sub	sp, #16
 8008236:	af00      	add	r7, sp, #0
 8008238:	60f8      	str	r0, [r7, #12]
 800823a:	60b9      	str	r1, [r7, #8]
 800823c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	3330      	adds	r3, #48	; 0x30
 8008242:	461a      	mov	r2, r3
 8008244:	68bb      	ldr	r3, [r7, #8]
 8008246:	0a1b      	lsrs	r3, r3, #8
 8008248:	009b      	lsls	r3, r3, #2
 800824a:	f003 030c 	and.w	r3, r3, #12
 800824e:	4413      	add	r3, r2
 8008250:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8008252:	6822      	ldr	r2, [r4, #0]
 8008254:	68bb      	ldr	r3, [r7, #8]
 8008256:	f003 031f 	and.w	r3, r3, #31
 800825a:	211f      	movs	r1, #31
 800825c:	fa01 f303 	lsl.w	r3, r1, r3
 8008260:	43db      	mvns	r3, r3
 8008262:	401a      	ands	r2, r3
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	0e9b      	lsrs	r3, r3, #26
 8008268:	f003 011f 	and.w	r1, r3, #31
 800826c:	68bb      	ldr	r3, [r7, #8]
 800826e:	f003 031f 	and.w	r3, r3, #31
 8008272:	fa01 f303 	lsl.w	r3, r1, r3
 8008276:	4313      	orrs	r3, r2
 8008278:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800827a:	bf00      	nop
 800827c:	3710      	adds	r7, #16
 800827e:	46bd      	mov	sp, r7
 8008280:	bc90      	pop	{r4, r7}
 8008282:	4770      	bx	lr

08008284 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8008284:	b480      	push	{r7}
 8008286:	b083      	sub	sp, #12
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008290:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008294:	2b00      	cmp	r3, #0
 8008296:	d101      	bne.n	800829c <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8008298:	2301      	movs	r3, #1
 800829a:	e000      	b.n	800829e <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800829c:	2300      	movs	r3, #0
}
 800829e:	4618      	mov	r0, r3
 80082a0:	370c      	adds	r7, #12
 80082a2:	46bd      	mov	sp, r7
 80082a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a8:	4770      	bx	lr

080082aa <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80082aa:	b490      	push	{r4, r7}
 80082ac:	b084      	sub	sp, #16
 80082ae:	af00      	add	r7, sp, #0
 80082b0:	60f8      	str	r0, [r7, #12]
 80082b2:	60b9      	str	r1, [r7, #8]
 80082b4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	3314      	adds	r3, #20
 80082ba:	461a      	mov	r2, r3
 80082bc:	68bb      	ldr	r3, [r7, #8]
 80082be:	0e5b      	lsrs	r3, r3, #25
 80082c0:	009b      	lsls	r3, r3, #2
 80082c2:	f003 0304 	and.w	r3, r3, #4
 80082c6:	4413      	add	r3, r2
 80082c8:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80082ca:	6822      	ldr	r2, [r4, #0]
 80082cc:	68bb      	ldr	r3, [r7, #8]
 80082ce:	0d1b      	lsrs	r3, r3, #20
 80082d0:	f003 031f 	and.w	r3, r3, #31
 80082d4:	2107      	movs	r1, #7
 80082d6:	fa01 f303 	lsl.w	r3, r1, r3
 80082da:	43db      	mvns	r3, r3
 80082dc:	401a      	ands	r2, r3
 80082de:	68bb      	ldr	r3, [r7, #8]
 80082e0:	0d1b      	lsrs	r3, r3, #20
 80082e2:	f003 031f 	and.w	r3, r3, #31
 80082e6:	6879      	ldr	r1, [r7, #4]
 80082e8:	fa01 f303 	lsl.w	r3, r1, r3
 80082ec:	4313      	orrs	r3, r2
 80082ee:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80082f0:	bf00      	nop
 80082f2:	3710      	adds	r7, #16
 80082f4:	46bd      	mov	sp, r7
 80082f6:	bc90      	pop	{r4, r7}
 80082f8:	4770      	bx	lr
	...

080082fc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80082fc:	b480      	push	{r7}
 80082fe:	b085      	sub	sp, #20
 8008300:	af00      	add	r7, sp, #0
 8008302:	60f8      	str	r0, [r7, #12]
 8008304:	60b9      	str	r1, [r7, #8]
 8008306:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800830e:	68bb      	ldr	r3, [r7, #8]
 8008310:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008314:	43db      	mvns	r3, r3
 8008316:	401a      	ands	r2, r3
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	f003 0318 	and.w	r3, r3, #24
 800831e:	4908      	ldr	r1, [pc, #32]	; (8008340 <LL_ADC_SetChannelSingleDiff+0x44>)
 8008320:	40d9      	lsrs	r1, r3
 8008322:	68bb      	ldr	r3, [r7, #8]
 8008324:	400b      	ands	r3, r1
 8008326:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800832a:	431a      	orrs	r2, r3
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8008332:	bf00      	nop
 8008334:	3714      	adds	r7, #20
 8008336:	46bd      	mov	sp, r7
 8008338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833c:	4770      	bx	lr
 800833e:	bf00      	nop
 8008340:	0007ffff 	.word	0x0007ffff

08008344 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8008344:	b480      	push	{r7}
 8008346:	b083      	sub	sp, #12
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	689b      	ldr	r3, [r3, #8]
 8008350:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8008354:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008358:	687a      	ldr	r2, [r7, #4]
 800835a:	6093      	str	r3, [r2, #8]
}
 800835c:	bf00      	nop
 800835e:	370c      	adds	r7, #12
 8008360:	46bd      	mov	sp, r7
 8008362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008366:	4770      	bx	lr

08008368 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8008368:	b480      	push	{r7}
 800836a:	b083      	sub	sp, #12
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	689b      	ldr	r3, [r3, #8]
 8008374:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008378:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800837c:	d101      	bne.n	8008382 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800837e:	2301      	movs	r3, #1
 8008380:	e000      	b.n	8008384 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8008382:	2300      	movs	r3, #0
}
 8008384:	4618      	mov	r0, r3
 8008386:	370c      	adds	r7, #12
 8008388:	46bd      	mov	sp, r7
 800838a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838e:	4770      	bx	lr

08008390 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8008390:	b480      	push	{r7}
 8008392:	b083      	sub	sp, #12
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	689b      	ldr	r3, [r3, #8]
 800839c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80083a0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80083a4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80083ac:	bf00      	nop
 80083ae:	370c      	adds	r7, #12
 80083b0:	46bd      	mov	sp, r7
 80083b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b6:	4770      	bx	lr

080083b8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80083b8:	b480      	push	{r7}
 80083ba:	b083      	sub	sp, #12
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	689b      	ldr	r3, [r3, #8]
 80083c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80083c8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80083cc:	d101      	bne.n	80083d2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80083ce:	2301      	movs	r3, #1
 80083d0:	e000      	b.n	80083d4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80083d2:	2300      	movs	r3, #0
}
 80083d4:	4618      	mov	r0, r3
 80083d6:	370c      	adds	r7, #12
 80083d8:	46bd      	mov	sp, r7
 80083da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083de:	4770      	bx	lr

080083e0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80083e0:	b480      	push	{r7}
 80083e2:	b083      	sub	sp, #12
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	689b      	ldr	r3, [r3, #8]
 80083ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80083f0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80083f4:	f043 0201 	orr.w	r2, r3, #1
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80083fc:	bf00      	nop
 80083fe:	370c      	adds	r7, #12
 8008400:	46bd      	mov	sp, r7
 8008402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008406:	4770      	bx	lr

08008408 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8008408:	b480      	push	{r7}
 800840a:	b083      	sub	sp, #12
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	689b      	ldr	r3, [r3, #8]
 8008414:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008418:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800841c:	f043 0202 	orr.w	r2, r3, #2
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8008424:	bf00      	nop
 8008426:	370c      	adds	r7, #12
 8008428:	46bd      	mov	sp, r7
 800842a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842e:	4770      	bx	lr

08008430 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8008430:	b480      	push	{r7}
 8008432:	b083      	sub	sp, #12
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	689b      	ldr	r3, [r3, #8]
 800843c:	f003 0301 	and.w	r3, r3, #1
 8008440:	2b01      	cmp	r3, #1
 8008442:	d101      	bne.n	8008448 <LL_ADC_IsEnabled+0x18>
 8008444:	2301      	movs	r3, #1
 8008446:	e000      	b.n	800844a <LL_ADC_IsEnabled+0x1a>
 8008448:	2300      	movs	r3, #0
}
 800844a:	4618      	mov	r0, r3
 800844c:	370c      	adds	r7, #12
 800844e:	46bd      	mov	sp, r7
 8008450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008454:	4770      	bx	lr

08008456 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8008456:	b480      	push	{r7}
 8008458:	b083      	sub	sp, #12
 800845a:	af00      	add	r7, sp, #0
 800845c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	689b      	ldr	r3, [r3, #8]
 8008462:	f003 0302 	and.w	r3, r3, #2
 8008466:	2b02      	cmp	r3, #2
 8008468:	d101      	bne.n	800846e <LL_ADC_IsDisableOngoing+0x18>
 800846a:	2301      	movs	r3, #1
 800846c:	e000      	b.n	8008470 <LL_ADC_IsDisableOngoing+0x1a>
 800846e:	2300      	movs	r3, #0
}
 8008470:	4618      	mov	r0, r3
 8008472:	370c      	adds	r7, #12
 8008474:	46bd      	mov	sp, r7
 8008476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847a:	4770      	bx	lr

0800847c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800847c:	b480      	push	{r7}
 800847e:	b083      	sub	sp, #12
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	689b      	ldr	r3, [r3, #8]
 8008488:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800848c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008490:	f043 0204 	orr.w	r2, r3, #4
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8008498:	bf00      	nop
 800849a:	370c      	adds	r7, #12
 800849c:	46bd      	mov	sp, r7
 800849e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a2:	4770      	bx	lr

080084a4 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80084a4:	b480      	push	{r7}
 80084a6:	b083      	sub	sp, #12
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	689b      	ldr	r3, [r3, #8]
 80084b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80084b4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80084b8:	f043 0210 	orr.w	r2, r3, #16
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80084c0:	bf00      	nop
 80084c2:	370c      	adds	r7, #12
 80084c4:	46bd      	mov	sp, r7
 80084c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ca:	4770      	bx	lr

080084cc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80084cc:	b480      	push	{r7}
 80084ce:	b083      	sub	sp, #12
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	689b      	ldr	r3, [r3, #8]
 80084d8:	f003 0304 	and.w	r3, r3, #4
 80084dc:	2b04      	cmp	r3, #4
 80084de:	d101      	bne.n	80084e4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80084e0:	2301      	movs	r3, #1
 80084e2:	e000      	b.n	80084e6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80084e4:	2300      	movs	r3, #0
}
 80084e6:	4618      	mov	r0, r3
 80084e8:	370c      	adds	r7, #12
 80084ea:	46bd      	mov	sp, r7
 80084ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f0:	4770      	bx	lr

080084f2 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80084f2:	b480      	push	{r7}
 80084f4:	b083      	sub	sp, #12
 80084f6:	af00      	add	r7, sp, #0
 80084f8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	689b      	ldr	r3, [r3, #8]
 80084fe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008502:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008506:	f043 0220 	orr.w	r2, r3, #32
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800850e:	bf00      	nop
 8008510:	370c      	adds	r7, #12
 8008512:	46bd      	mov	sp, r7
 8008514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008518:	4770      	bx	lr

0800851a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800851a:	b480      	push	{r7}
 800851c:	b083      	sub	sp, #12
 800851e:	af00      	add	r7, sp, #0
 8008520:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	689b      	ldr	r3, [r3, #8]
 8008526:	f003 0308 	and.w	r3, r3, #8
 800852a:	2b08      	cmp	r3, #8
 800852c:	d101      	bne.n	8008532 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800852e:	2301      	movs	r3, #1
 8008530:	e000      	b.n	8008534 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8008532:	2300      	movs	r3, #0
}
 8008534:	4618      	mov	r0, r3
 8008536:	370c      	adds	r7, #12
 8008538:	46bd      	mov	sp, r7
 800853a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853e:	4770      	bx	lr

08008540 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8008540:	b580      	push	{r7, lr}
 8008542:	b088      	sub	sp, #32
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008548:	2300      	movs	r3, #0
 800854a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800854c:	2300      	movs	r3, #0
 800854e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d101      	bne.n	800855a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8008556:	2301      	movs	r3, #1
 8008558:	e12a      	b.n	80087b0 <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	691b      	ldr	r3, [r3, #16]
 800855e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008564:	2b00      	cmp	r3, #0
 8008566:	d109      	bne.n	800857c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8008568:	6878      	ldr	r0, [r7, #4]
 800856a:	f7f9 fbfd 	bl	8001d68 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	2200      	movs	r2, #0
 8008572:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2200      	movs	r2, #0
 8008578:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	4618      	mov	r0, r3
 8008582:	f7ff fef1 	bl	8008368 <LL_ADC_IsDeepPowerDownEnabled>
 8008586:	4603      	mov	r3, r0
 8008588:	2b00      	cmp	r3, #0
 800858a:	d004      	beq.n	8008596 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	4618      	mov	r0, r3
 8008592:	f7ff fed7 	bl	8008344 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	4618      	mov	r0, r3
 800859c:	f7ff ff0c 	bl	80083b8 <LL_ADC_IsInternalRegulatorEnabled>
 80085a0:	4603      	mov	r3, r0
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d113      	bne.n	80085ce <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	4618      	mov	r0, r3
 80085ac:	f7ff fef0 	bl	8008390 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80085b0:	4b81      	ldr	r3, [pc, #516]	; (80087b8 <HAL_ADC_Init+0x278>)
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	099b      	lsrs	r3, r3, #6
 80085b6:	4a81      	ldr	r2, [pc, #516]	; (80087bc <HAL_ADC_Init+0x27c>)
 80085b8:	fba2 2303 	umull	r2, r3, r2, r3
 80085bc:	099b      	lsrs	r3, r3, #6
 80085be:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80085c0:	e002      	b.n	80085c8 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 80085c2:	68bb      	ldr	r3, [r7, #8]
 80085c4:	3b01      	subs	r3, #1
 80085c6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80085c8:	68bb      	ldr	r3, [r7, #8]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d1f9      	bne.n	80085c2 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	4618      	mov	r0, r3
 80085d4:	f7ff fef0 	bl	80083b8 <LL_ADC_IsInternalRegulatorEnabled>
 80085d8:	4603      	mov	r3, r0
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d10d      	bne.n	80085fa <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085e2:	f043 0210 	orr.w	r2, r3, #16
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085ee:	f043 0201 	orr.w	r2, r3, #1
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80085f6:	2301      	movs	r3, #1
 80085f8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	4618      	mov	r0, r3
 8008600:	f7ff ff64 	bl	80084cc <LL_ADC_REG_IsConversionOngoing>
 8008604:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800860a:	f003 0310 	and.w	r3, r3, #16
 800860e:	2b00      	cmp	r3, #0
 8008610:	f040 80c5 	bne.w	800879e <HAL_ADC_Init+0x25e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8008614:	697b      	ldr	r3, [r7, #20]
 8008616:	2b00      	cmp	r3, #0
 8008618:	f040 80c1 	bne.w	800879e <HAL_ADC_Init+0x25e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008620:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8008624:	f043 0202 	orr.w	r2, r3, #2
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	4618      	mov	r0, r3
 8008632:	f7ff fefd 	bl	8008430 <LL_ADC_IsEnabled>
 8008636:	4603      	mov	r3, r0
 8008638:	2b00      	cmp	r3, #0
 800863a:	d10b      	bne.n	8008654 <HAL_ADC_Init+0x114>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800863c:	4860      	ldr	r0, [pc, #384]	; (80087c0 <HAL_ADC_Init+0x280>)
 800863e:	f7ff fef7 	bl	8008430 <LL_ADC_IsEnabled>
 8008642:	4603      	mov	r3, r0
 8008644:	2b00      	cmp	r3, #0
 8008646:	d105      	bne.n	8008654 <HAL_ADC_Init+0x114>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	685b      	ldr	r3, [r3, #4]
 800864c:	4619      	mov	r1, r3
 800864e:	485d      	ldr	r0, [pc, #372]	; (80087c4 <HAL_ADC_Init+0x284>)
 8008650:	f7ff fd5a 	bl	8008108 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	7e5b      	ldrb	r3, [r3, #25]
 8008658:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800865e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8008664:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800866a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008672:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8008674:	4313      	orrs	r3, r2
 8008676:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800867e:	2b01      	cmp	r3, #1
 8008680:	d106      	bne.n	8008690 <HAL_ADC_Init+0x150>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008686:	3b01      	subs	r3, #1
 8008688:	045b      	lsls	r3, r3, #17
 800868a:	69ba      	ldr	r2, [r7, #24]
 800868c:	4313      	orrs	r3, r2
 800868e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008694:	2b00      	cmp	r3, #0
 8008696:	d009      	beq.n	80086ac <HAL_ADC_Init+0x16c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800869c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086a4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80086a6:	69ba      	ldr	r2, [r7, #24]
 80086a8:	4313      	orrs	r3, r2
 80086aa:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	68da      	ldr	r2, [r3, #12]
 80086b2:	4b45      	ldr	r3, [pc, #276]	; (80087c8 <HAL_ADC_Init+0x288>)
 80086b4:	4013      	ands	r3, r2
 80086b6:	687a      	ldr	r2, [r7, #4]
 80086b8:	6812      	ldr	r2, [r2, #0]
 80086ba:	69b9      	ldr	r1, [r7, #24]
 80086bc:	430b      	orrs	r3, r1
 80086be:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	4618      	mov	r0, r3
 80086c6:	f7ff ff01 	bl	80084cc <LL_ADC_REG_IsConversionOngoing>
 80086ca:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	4618      	mov	r0, r3
 80086d2:	f7ff ff22 	bl	800851a <LL_ADC_INJ_IsConversionOngoing>
 80086d6:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80086d8:	693b      	ldr	r3, [r7, #16]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d13d      	bne.n	800875a <HAL_ADC_Init+0x21a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d13a      	bne.n	800875a <HAL_ADC_Init+0x21a>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80086e8:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80086f0:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80086f2:	4313      	orrs	r3, r2
 80086f4:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	68db      	ldr	r3, [r3, #12]
 80086fc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008700:	f023 0302 	bic.w	r3, r3, #2
 8008704:	687a      	ldr	r2, [r7, #4]
 8008706:	6812      	ldr	r2, [r2, #0]
 8008708:	69b9      	ldr	r1, [r7, #24]
 800870a:	430b      	orrs	r3, r1
 800870c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008714:	2b01      	cmp	r3, #1
 8008716:	d118      	bne.n	800874a <HAL_ADC_Init+0x20a>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	691b      	ldr	r3, [r3, #16]
 800871e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008722:	f023 0304 	bic.w	r3, r3, #4
 8008726:	687a      	ldr	r2, [r7, #4]
 8008728:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800872a:	687a      	ldr	r2, [r7, #4]
 800872c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800872e:	4311      	orrs	r1, r2
 8008730:	687a      	ldr	r2, [r7, #4]
 8008732:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8008734:	4311      	orrs	r1, r2
 8008736:	687a      	ldr	r2, [r7, #4]
 8008738:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800873a:	430a      	orrs	r2, r1
 800873c:	431a      	orrs	r2, r3
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	f042 0201 	orr.w	r2, r2, #1
 8008746:	611a      	str	r2, [r3, #16]
 8008748:	e007      	b.n	800875a <HAL_ADC_Init+0x21a>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	691a      	ldr	r2, [r3, #16]
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	f022 0201 	bic.w	r2, r2, #1
 8008758:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	691b      	ldr	r3, [r3, #16]
 800875e:	2b01      	cmp	r3, #1
 8008760:	d10c      	bne.n	800877c <HAL_ADC_Init+0x23c>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008768:	f023 010f 	bic.w	r1, r3, #15
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	69db      	ldr	r3, [r3, #28]
 8008770:	1e5a      	subs	r2, r3, #1
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	430a      	orrs	r2, r1
 8008778:	631a      	str	r2, [r3, #48]	; 0x30
 800877a:	e007      	b.n	800878c <HAL_ADC_Init+0x24c>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	f022 020f 	bic.w	r2, r2, #15
 800878a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008790:	f023 0303 	bic.w	r3, r3, #3
 8008794:	f043 0201 	orr.w	r2, r3, #1
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	655a      	str	r2, [r3, #84]	; 0x54
 800879c:	e007      	b.n	80087ae <HAL_ADC_Init+0x26e>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087a2:	f043 0210 	orr.w	r2, r3, #16
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80087aa:	2301      	movs	r3, #1
 80087ac:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80087ae:	7ffb      	ldrb	r3, [r7, #31]
}
 80087b0:	4618      	mov	r0, r3
 80087b2:	3720      	adds	r7, #32
 80087b4:	46bd      	mov	sp, r7
 80087b6:	bd80      	pop	{r7, pc}
 80087b8:	20000000 	.word	0x20000000
 80087bc:	053e2d63 	.word	0x053e2d63
 80087c0:	50040000 	.word	0x50040000
 80087c4:	50040300 	.word	0x50040300
 80087c8:	fff0c007 	.word	0xfff0c007

080087cc <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b086      	sub	sp, #24
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	60f8      	str	r0, [r7, #12]
 80087d4:	60b9      	str	r1, [r7, #8]
 80087d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	4618      	mov	r0, r3
 80087de:	f7ff fe75 	bl	80084cc <LL_ADC_REG_IsConversionOngoing>
 80087e2:	4603      	mov	r3, r0
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d167      	bne.n	80088b8 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80087ee:	2b01      	cmp	r3, #1
 80087f0:	d101      	bne.n	80087f6 <HAL_ADC_Start_DMA+0x2a>
 80087f2:	2302      	movs	r3, #2
 80087f4:	e063      	b.n	80088be <HAL_ADC_Start_DMA+0xf2>
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	2201      	movs	r2, #1
 80087fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80087fe:	68f8      	ldr	r0, [r7, #12]
 8008800:	f000 fea4 	bl	800954c <ADC_Enable>
 8008804:	4603      	mov	r3, r0
 8008806:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8008808:	7dfb      	ldrb	r3, [r7, #23]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d14f      	bne.n	80088ae <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008812:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008816:	f023 0301 	bic.w	r3, r3, #1
 800881a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	655a      	str	r2, [r3, #84]	; 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008826:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800882a:	2b00      	cmp	r3, #0
 800882c:	d006      	beq.n	800883c <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008832:	f023 0206 	bic.w	r2, r3, #6
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	659a      	str	r2, [r3, #88]	; 0x58
 800883a:	e002      	b.n	8008842 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	2200      	movs	r2, #0
 8008840:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008846:	4a20      	ldr	r2, [pc, #128]	; (80088c8 <HAL_ADC_Start_DMA+0xfc>)
 8008848:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800884e:	4a1f      	ldr	r2, [pc, #124]	; (80088cc <HAL_ADC_Start_DMA+0x100>)
 8008850:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008856:	4a1e      	ldr	r2, [pc, #120]	; (80088d0 <HAL_ADC_Start_DMA+0x104>)
 8008858:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	221c      	movs	r2, #28
 8008860:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	2200      	movs	r2, #0
 8008866:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	685a      	ldr	r2, [r3, #4]
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	f042 0210 	orr.w	r2, r2, #16
 8008878:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	68da      	ldr	r2, [r3, #12]
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	f042 0201 	orr.w	r2, r2, #1
 8008888:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	3340      	adds	r3, #64	; 0x40
 8008894:	4619      	mov	r1, r3
 8008896:	68ba      	ldr	r2, [r7, #8]
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	f001 f999 	bl	8009bd0 <HAL_DMA_Start_IT>
 800889e:	4603      	mov	r3, r0
 80088a0:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	4618      	mov	r0, r3
 80088a8:	f7ff fde8 	bl	800847c <LL_ADC_REG_StartConversion>
 80088ac:	e006      	b.n	80088bc <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	2200      	movs	r2, #0
 80088b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80088b6:	e001      	b.n	80088bc <HAL_ADC_Start_DMA+0xf0>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80088b8:	2302      	movs	r3, #2
 80088ba:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80088bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80088be:	4618      	mov	r0, r3
 80088c0:	3718      	adds	r7, #24
 80088c2:	46bd      	mov	sp, r7
 80088c4:	bd80      	pop	{r7, pc}
 80088c6:	bf00      	nop
 80088c8:	080096b1 	.word	0x080096b1
 80088cc:	08009789 	.word	0x08009789
 80088d0:	080097a5 	.word	0x080097a5

080088d4 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b084      	sub	sp, #16
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80088e2:	2b01      	cmp	r3, #1
 80088e4:	d101      	bne.n	80088ea <HAL_ADC_Stop_DMA+0x16>
 80088e6:	2302      	movs	r3, #2
 80088e8:	e051      	b.n	800898e <HAL_ADC_Stop_DMA+0xba>
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	2201      	movs	r2, #1
 80088ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80088f2:	2103      	movs	r1, #3
 80088f4:	6878      	ldr	r0, [r7, #4]
 80088f6:	f000 fd75 	bl	80093e4 <ADC_ConversionStop>
 80088fa:	4603      	mov	r3, r0
 80088fc:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80088fe:	7bfb      	ldrb	r3, [r7, #15]
 8008900:	2b00      	cmp	r3, #0
 8008902:	d13f      	bne.n	8008984 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	68da      	ldr	r2, [r3, #12]
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	f022 0201 	bic.w	r2, r2, #1
 8008912:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008918:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800891c:	b2db      	uxtb	r3, r3
 800891e:	2b02      	cmp	r3, #2
 8008920:	d10f      	bne.n	8008942 <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008926:	4618      	mov	r0, r3
 8008928:	f001 f9b2 	bl	8009c90 <HAL_DMA_Abort>
 800892c:	4603      	mov	r3, r0
 800892e:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8008930:	7bfb      	ldrb	r3, [r7, #15]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d005      	beq.n	8008942 <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800893a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	685a      	ldr	r2, [r3, #4]
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	f022 0210 	bic.w	r2, r2, #16
 8008950:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8008952:	7bfb      	ldrb	r3, [r7, #15]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d105      	bne.n	8008964 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8008958:	6878      	ldr	r0, [r7, #4]
 800895a:	f000 fe51 	bl	8009600 <ADC_Disable>
 800895e:	4603      	mov	r3, r0
 8008960:	73fb      	strb	r3, [r7, #15]
 8008962:	e002      	b.n	800896a <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8008964:	6878      	ldr	r0, [r7, #4]
 8008966:	f000 fe4b 	bl	8009600 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800896a:	7bfb      	ldrb	r3, [r7, #15]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d109      	bne.n	8008984 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008974:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8008978:	f023 0301 	bic.w	r3, r3, #1
 800897c:	f043 0201 	orr.w	r2, r3, #1
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	655a      	str	r2, [r3, #84]	; 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2200      	movs	r2, #0
 8008988:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800898c:	7bfb      	ldrb	r3, [r7, #15]
}
 800898e:	4618      	mov	r0, r3
 8008990:	3710      	adds	r7, #16
 8008992:	46bd      	mov	sp, r7
 8008994:	bd80      	pop	{r7, pc}

08008996 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8008996:	b580      	push	{r7, lr}
 8008998:	b088      	sub	sp, #32
 800899a:	af00      	add	r7, sp, #0
 800899c:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 800899e:	2300      	movs	r3, #0
 80089a0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	685b      	ldr	r3, [r3, #4]
 80089b0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80089b2:	69bb      	ldr	r3, [r7, #24]
 80089b4:	f003 0302 	and.w	r3, r3, #2
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d017      	beq.n	80089ec <HAL_ADC_IRQHandler+0x56>
 80089bc:	697b      	ldr	r3, [r7, #20]
 80089be:	f003 0302 	and.w	r3, r3, #2
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d012      	beq.n	80089ec <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089ca:	f003 0310 	and.w	r3, r3, #16
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d105      	bne.n	80089de <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089d6:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80089de:	6878      	ldr	r0, [r7, #4]
 80089e0:	f000 ff22 	bl	8009828 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	2202      	movs	r2, #2
 80089ea:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80089ec:	69bb      	ldr	r3, [r7, #24]
 80089ee:	f003 0304 	and.w	r3, r3, #4
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d004      	beq.n	8008a00 <HAL_ADC_IRQHandler+0x6a>
 80089f6:	697b      	ldr	r3, [r7, #20]
 80089f8:	f003 0304 	and.w	r3, r3, #4
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d109      	bne.n	8008a14 <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8008a00:	69bb      	ldr	r3, [r7, #24]
 8008a02:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d05e      	beq.n	8008ac8 <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8008a0a:	697b      	ldr	r3, [r7, #20]
 8008a0c:	f003 0308 	and.w	r3, r3, #8
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d059      	beq.n	8008ac8 <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a18:	f003 0310 	and.w	r3, r3, #16
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d105      	bne.n	8008a2c <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a24:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	4618      	mov	r0, r3
 8008a32:	f7ff fbeb 	bl	800820c <LL_ADC_REG_IsTriggerSourceSWStart>
 8008a36:	4603      	mov	r3, r0
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d03e      	beq.n	8008aba <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	68db      	ldr	r3, [r3, #12]
 8008a42:	613b      	str	r3, [r7, #16]
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8008a44:	693b      	ldr	r3, [r7, #16]
 8008a46:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d135      	bne.n	8008aba <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	f003 0308 	and.w	r3, r3, #8
 8008a58:	2b08      	cmp	r3, #8
 8008a5a:	d12e      	bne.n	8008aba <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	4618      	mov	r0, r3
 8008a62:	f7ff fd33 	bl	80084cc <LL_ADC_REG_IsConversionOngoing>
 8008a66:	4603      	mov	r3, r0
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d11a      	bne.n	8008aa2 <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	685a      	ldr	r2, [r3, #4]
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	f022 020c 	bic.w	r2, r2, #12
 8008a7a:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a80:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a8c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d112      	bne.n	8008aba <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a98:	f043 0201 	orr.w	r2, r3, #1
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	655a      	str	r2, [r3, #84]	; 0x54
 8008aa0:	e00b      	b.n	8008aba <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008aa6:	f043 0210 	orr.w	r2, r3, #16
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ab2:	f043 0201 	orr.w	r2, r3, #1
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8008aba:	6878      	ldr	r0, [r7, #4]
 8008abc:	f7f9 fb93 	bl	80021e6 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	220c      	movs	r2, #12
 8008ac6:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8008ac8:	69bb      	ldr	r3, [r7, #24]
 8008aca:	f003 0320 	and.w	r3, r3, #32
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d004      	beq.n	8008adc <HAL_ADC_IRQHandler+0x146>
 8008ad2:	697b      	ldr	r3, [r7, #20]
 8008ad4:	f003 0320 	and.w	r3, r3, #32
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d109      	bne.n	8008af0 <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8008adc:	69bb      	ldr	r3, [r7, #24]
 8008ade:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d072      	beq.n	8008bcc <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8008ae6:	697b      	ldr	r3, [r7, #20]
 8008ae8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d06d      	beq.n	8008bcc <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008af4:	f003 0310 	and.w	r3, r3, #16
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d105      	bne.n	8008b08 <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b00:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	f7ff fbb9 	bl	8008284 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8008b12:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	4618      	mov	r0, r3
 8008b1a:	f7ff fb77 	bl	800820c <LL_ADC_REG_IsTriggerSourceSWStart>
 8008b1e:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	68db      	ldr	r3, [r3, #12]
 8008b26:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d10c      	bne.n	8008b48 <HAL_ADC_IRQHandler+0x1b2>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 8008b2e:	693b      	ldr	r3, [r7, #16]
 8008b30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d142      	bne.n	8008bbe <HAL_ADC_IRQHandler+0x228>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 8008b38:	68bb      	ldr	r3, [r7, #8]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d03f      	beq.n	8008bbe <HAL_ADC_IRQHandler+0x228>
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
          (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL))))
 8008b3e:	693b      	ldr	r3, [r7, #16]
 8008b40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d13a      	bne.n	8008bbe <HAL_ADC_IRQHandler+0x228>
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b52:	2b40      	cmp	r3, #64	; 0x40
 8008b54:	d133      	bne.n	8008bbe <HAL_ADC_IRQHandler+0x228>
        /* when the last context has been fully processed, JSQR is reset      */
        /* by the hardware. Even if no injected conversion is planned to come */
        /* (queue empty, triggers are ignored), it can start again            */
        /* immediately after setting a new context (JADSTART is still set).   */
        /* Therefore, state of HAL ADC injected group is kept to busy.        */
        if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8008b56:	693b      	ldr	r3, [r7, #16]
 8008b58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d12e      	bne.n	8008bbe <HAL_ADC_IRQHandler+0x228>
        {
          /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
          /* JADSTART==0 (no conversion on going)                             */
          if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	4618      	mov	r0, r3
 8008b66:	f7ff fcd8 	bl	800851a <LL_ADC_INJ_IsConversionOngoing>
 8008b6a:	4603      	mov	r3, r0
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d11a      	bne.n	8008ba6 <HAL_ADC_IRQHandler+0x210>
          {
            /* Disable ADC end of sequence conversion interrupt  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	685a      	ldr	r2, [r3, #4]
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8008b7e:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b84:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d112      	bne.n	8008bbe <HAL_ADC_IRQHandler+0x228>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b9c:	f043 0201 	orr.w	r2, r3, #1
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	655a      	str	r2, [r3, #84]	; 0x54
 8008ba4:	e00b      	b.n	8008bbe <HAL_ADC_IRQHandler+0x228>
            }
          }
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008baa:	f043 0210 	orr.w	r2, r3, #16
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008bb6:	f043 0201 	orr.w	r2, r3, #1
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8008bbe:	6878      	ldr	r0, [r7, #4]
 8008bc0:	f000 fe0a 	bl	80097d8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	2260      	movs	r2, #96	; 0x60
 8008bca:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8008bcc:	69bb      	ldr	r3, [r7, #24]
 8008bce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d011      	beq.n	8008bfa <HAL_ADC_IRQHandler+0x264>
 8008bd6:	697b      	ldr	r3, [r7, #20]
 8008bd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d00c      	beq.n	8008bfa <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008be4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8008bec:	6878      	ldr	r0, [r7, #4]
 8008bee:	f000 f890 	bl	8008d12 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	2280      	movs	r2, #128	; 0x80
 8008bf8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8008bfa:	69bb      	ldr	r3, [r7, #24]
 8008bfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d012      	beq.n	8008c2a <HAL_ADC_IRQHandler+0x294>
 8008c04:	697b      	ldr	r3, [r7, #20]
 8008c06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d00d      	beq.n	8008c2a <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c12:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8008c1a:	6878      	ldr	r0, [r7, #4]
 8008c1c:	f000 fdf0 	bl	8009800 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008c28:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8008c2a:	69bb      	ldr	r3, [r7, #24]
 8008c2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d012      	beq.n	8008c5a <HAL_ADC_IRQHandler+0x2c4>
 8008c34:	697b      	ldr	r3, [r7, #20]
 8008c36:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d00d      	beq.n	8008c5a <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c42:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8008c4a:	6878      	ldr	r0, [r7, #4]
 8008c4c:	f000 fde2 	bl	8009814 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008c58:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8008c5a:	69bb      	ldr	r3, [r7, #24]
 8008c5c:	f003 0310 	and.w	r3, r3, #16
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d02a      	beq.n	8008cba <HAL_ADC_IRQHandler+0x324>
 8008c64:	697b      	ldr	r3, [r7, #20]
 8008c66:	f003 0310 	and.w	r3, r3, #16
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d025      	beq.n	8008cba <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d102      	bne.n	8008c7c <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 8008c76:	2301      	movs	r3, #1
 8008c78:	61fb      	str	r3, [r7, #28]
 8008c7a:	e008      	b.n	8008c8e <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	68db      	ldr	r3, [r3, #12]
 8008c82:	f003 0301 	and.w	r3, r3, #1
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d001      	beq.n	8008c8e <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 8008c8a:	2301      	movs	r3, #1
 8008c8c:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 8008c8e:	69fb      	ldr	r3, [r7, #28]
 8008c90:	2b01      	cmp	r3, #1
 8008c92:	d10e      	bne.n	8008cb2 <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c98:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ca4:	f043 0202 	orr.w	r2, r3, #2
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8008cac:	6878      	ldr	r0, [r7, #4]
 8008cae:	f000 f83a 	bl	8008d26 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	2210      	movs	r2, #16
 8008cb8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8008cba:	69bb      	ldr	r3, [r7, #24]
 8008cbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d018      	beq.n	8008cf6 <HAL_ADC_IRQHandler+0x360>
 8008cc4:	697b      	ldr	r3, [r7, #20]
 8008cc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d013      	beq.n	8008cf6 <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008cd2:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008cde:	f043 0208 	orr.w	r2, r3, #8
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008cee:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8008cf0:	6878      	ldr	r0, [r7, #4]
 8008cf2:	f000 fd7b 	bl	80097ec <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8008cf6:	bf00      	nop
 8008cf8:	3720      	adds	r7, #32
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	bd80      	pop	{r7, pc}

08008cfe <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8008cfe:	b480      	push	{r7}
 8008d00:	b083      	sub	sp, #12
 8008d02:	af00      	add	r7, sp, #0
 8008d04:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8008d06:	bf00      	nop
 8008d08:	370c      	adds	r7, #12
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d10:	4770      	bx	lr

08008d12 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8008d12:	b480      	push	{r7}
 8008d14:	b083      	sub	sp, #12
 8008d16:	af00      	add	r7, sp, #0
 8008d18:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8008d1a:	bf00      	nop
 8008d1c:	370c      	adds	r7, #12
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d24:	4770      	bx	lr

08008d26 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8008d26:	b480      	push	{r7}
 8008d28:	b083      	sub	sp, #12
 8008d2a:	af00      	add	r7, sp, #0
 8008d2c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8008d2e:	bf00      	nop
 8008d30:	370c      	adds	r7, #12
 8008d32:	46bd      	mov	sp, r7
 8008d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d38:	4770      	bx	lr
	...

08008d3c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b0a6      	sub	sp, #152	; 0x98
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
 8008d44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008d46:	2300      	movs	r3, #0
 8008d48:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008d56:	2b01      	cmp	r3, #1
 8008d58:	d101      	bne.n	8008d5e <HAL_ADC_ConfigChannel+0x22>
 8008d5a:	2302      	movs	r3, #2
 8008d5c:	e338      	b.n	80093d0 <HAL_ADC_ConfigChannel+0x694>
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	2201      	movs	r2, #1
 8008d62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	f7ff fbae 	bl	80084cc <LL_ADC_REG_IsConversionOngoing>
 8008d70:	4603      	mov	r3, r0
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	f040 831d 	bne.w	80093b2 <HAL_ADC_ConfigChannel+0x676>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8008d78:	683b      	ldr	r3, [r7, #0]
 8008d7a:	685b      	ldr	r3, [r3, #4]
 8008d7c:	2b05      	cmp	r3, #5
 8008d7e:	d824      	bhi.n	8008dca <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8008d80:	683b      	ldr	r3, [r7, #0]
 8008d82:	685b      	ldr	r3, [r3, #4]
 8008d84:	3b02      	subs	r3, #2
 8008d86:	2b03      	cmp	r3, #3
 8008d88:	d81b      	bhi.n	8008dc2 <HAL_ADC_ConfigChannel+0x86>
 8008d8a:	a201      	add	r2, pc, #4	; (adr r2, 8008d90 <HAL_ADC_ConfigChannel+0x54>)
 8008d8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d90:	08008da1 	.word	0x08008da1
 8008d94:	08008da9 	.word	0x08008da9
 8008d98:	08008db1 	.word	0x08008db1
 8008d9c:	08008db9 	.word	0x08008db9
      {
        case 2U: sConfig->Rank = ADC_REGULAR_RANK_2; break;
 8008da0:	683b      	ldr	r3, [r7, #0]
 8008da2:	220c      	movs	r2, #12
 8008da4:	605a      	str	r2, [r3, #4]
 8008da6:	e011      	b.n	8008dcc <HAL_ADC_ConfigChannel+0x90>
        case 3U: sConfig->Rank = ADC_REGULAR_RANK_3; break;
 8008da8:	683b      	ldr	r3, [r7, #0]
 8008daa:	2212      	movs	r2, #18
 8008dac:	605a      	str	r2, [r3, #4]
 8008dae:	e00d      	b.n	8008dcc <HAL_ADC_ConfigChannel+0x90>
        case 4U: sConfig->Rank = ADC_REGULAR_RANK_4; break;
 8008db0:	683b      	ldr	r3, [r7, #0]
 8008db2:	2218      	movs	r2, #24
 8008db4:	605a      	str	r2, [r3, #4]
 8008db6:	e009      	b.n	8008dcc <HAL_ADC_ConfigChannel+0x90>
        case 5U: sConfig->Rank = ADC_REGULAR_RANK_5; break;
 8008db8:	683b      	ldr	r3, [r7, #0]
 8008dba:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008dbe:	605a      	str	r2, [r3, #4]
 8008dc0:	e004      	b.n	8008dcc <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default: sConfig->Rank = ADC_REGULAR_RANK_1; break;
 8008dc2:	683b      	ldr	r3, [r7, #0]
 8008dc4:	2206      	movs	r2, #6
 8008dc6:	605a      	str	r2, [r3, #4]
 8008dc8:	e000      	b.n	8008dcc <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8008dca:	bf00      	nop
    #endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	6818      	ldr	r0, [r3, #0]
 8008dd0:	683b      	ldr	r3, [r7, #0]
 8008dd2:	6859      	ldr	r1, [r3, #4]
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	461a      	mov	r2, r3
 8008dda:	f7ff fa2a 	bl	8008232 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	4618      	mov	r0, r3
 8008de4:	f7ff fb72 	bl	80084cc <LL_ADC_REG_IsConversionOngoing>
 8008de8:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	4618      	mov	r0, r3
 8008df2:	f7ff fb92 	bl	800851a <LL_ADC_INJ_IsConversionOngoing>
 8008df6:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8008dfa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	f040 8148 	bne.w	8009094 <HAL_ADC_ConfigChannel+0x358>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8008e04:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	f040 8143 	bne.w	8009094 <HAL_ADC_ConfigChannel+0x358>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	6818      	ldr	r0, [r3, #0]
 8008e12:	683b      	ldr	r3, [r7, #0]
 8008e14:	6819      	ldr	r1, [r3, #0]
 8008e16:	683b      	ldr	r3, [r7, #0]
 8008e18:	689b      	ldr	r3, [r3, #8]
 8008e1a:	461a      	mov	r2, r3
 8008e1c:	f7ff fa45 	bl	80082aa <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8008e20:	683b      	ldr	r3, [r7, #0]
 8008e22:	695a      	ldr	r2, [r3, #20]
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	68db      	ldr	r3, [r3, #12]
 8008e2a:	08db      	lsrs	r3, r3, #3
 8008e2c:	f003 0303 	and.w	r3, r3, #3
 8008e30:	005b      	lsls	r3, r3, #1
 8008e32:	fa02 f303 	lsl.w	r3, r2, r3
 8008e36:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8008e3a:	683b      	ldr	r3, [r7, #0]
 8008e3c:	691b      	ldr	r3, [r3, #16]
 8008e3e:	2b04      	cmp	r3, #4
 8008e40:	d00a      	beq.n	8008e58 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	6818      	ldr	r0, [r3, #0]
 8008e46:	683b      	ldr	r3, [r7, #0]
 8008e48:	6919      	ldr	r1, [r3, #16]
 8008e4a:	683b      	ldr	r3, [r7, #0]
 8008e4c:	681a      	ldr	r2, [r3, #0]
 8008e4e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008e52:	f7ff f98d 	bl	8008170 <LL_ADC_SetOffset>
 8008e56:	e11d      	b.n	8009094 <HAL_ADC_ConfigChannel+0x358>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	2100      	movs	r1, #0
 8008e5e:	4618      	mov	r0, r3
 8008e60:	f7ff f9a8 	bl	80081b4 <LL_ADC_GetOffsetChannel>
 8008e64:	4603      	mov	r3, r0
 8008e66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d10a      	bne.n	8008e84 <HAL_ADC_ConfigChannel+0x148>
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	2100      	movs	r1, #0
 8008e74:	4618      	mov	r0, r3
 8008e76:	f7ff f99d 	bl	80081b4 <LL_ADC_GetOffsetChannel>
 8008e7a:	4603      	mov	r3, r0
 8008e7c:	0e9b      	lsrs	r3, r3, #26
 8008e7e:	f003 021f 	and.w	r2, r3, #31
 8008e82:	e012      	b.n	8008eaa <HAL_ADC_ConfigChannel+0x16e>
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	2100      	movs	r1, #0
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	f7ff f992 	bl	80081b4 <LL_ADC_GetOffsetChannel>
 8008e90:	4603      	mov	r3, r0
 8008e92:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008e96:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008e9a:	fa93 f3a3 	rbit	r3, r3
 8008e9e:	67fb      	str	r3, [r7, #124]	; 0x7c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8008ea0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008ea2:	fab3 f383 	clz	r3, r3
 8008ea6:	b2db      	uxtb	r3, r3
 8008ea8:	461a      	mov	r2, r3
 8008eaa:	683b      	ldr	r3, [r7, #0]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d105      	bne.n	8008ec2 <HAL_ADC_ConfigChannel+0x186>
 8008eb6:	683b      	ldr	r3, [r7, #0]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	0e9b      	lsrs	r3, r3, #26
 8008ebc:	f003 031f 	and.w	r3, r3, #31
 8008ec0:	e00a      	b.n	8008ed8 <HAL_ADC_ConfigChannel+0x19c>
 8008ec2:	683b      	ldr	r3, [r7, #0]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008ec8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008eca:	fa93 f3a3 	rbit	r3, r3
 8008ece:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 8008ed0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008ed2:	fab3 f383 	clz	r3, r3
 8008ed6:	b2db      	uxtb	r3, r3
 8008ed8:	429a      	cmp	r2, r3
 8008eda:	d106      	bne.n	8008eea <HAL_ADC_ConfigChannel+0x1ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	2100      	movs	r1, #0
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	f7ff f979 	bl	80081dc <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	2101      	movs	r1, #1
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	f7ff f95f 	bl	80081b4 <LL_ADC_GetOffsetChannel>
 8008ef6:	4603      	mov	r3, r0
 8008ef8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d10a      	bne.n	8008f16 <HAL_ADC_ConfigChannel+0x1da>
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	2101      	movs	r1, #1
 8008f06:	4618      	mov	r0, r3
 8008f08:	f7ff f954 	bl	80081b4 <LL_ADC_GetOffsetChannel>
 8008f0c:	4603      	mov	r3, r0
 8008f0e:	0e9b      	lsrs	r3, r3, #26
 8008f10:	f003 021f 	and.w	r2, r3, #31
 8008f14:	e010      	b.n	8008f38 <HAL_ADC_ConfigChannel+0x1fc>
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	2101      	movs	r1, #1
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	f7ff f949 	bl	80081b4 <LL_ADC_GetOffsetChannel>
 8008f22:	4603      	mov	r3, r0
 8008f24:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008f26:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008f28:	fa93 f3a3 	rbit	r3, r3
 8008f2c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8008f2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f30:	fab3 f383 	clz	r3, r3
 8008f34:	b2db      	uxtb	r3, r3
 8008f36:	461a      	mov	r2, r3
 8008f38:	683b      	ldr	r3, [r7, #0]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d105      	bne.n	8008f50 <HAL_ADC_ConfigChannel+0x214>
 8008f44:	683b      	ldr	r3, [r7, #0]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	0e9b      	lsrs	r3, r3, #26
 8008f4a:	f003 031f 	and.w	r3, r3, #31
 8008f4e:	e00a      	b.n	8008f66 <HAL_ADC_ConfigChannel+0x22a>
 8008f50:	683b      	ldr	r3, [r7, #0]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008f56:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008f58:	fa93 f3a3 	rbit	r3, r3
 8008f5c:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8008f5e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008f60:	fab3 f383 	clz	r3, r3
 8008f64:	b2db      	uxtb	r3, r3
 8008f66:	429a      	cmp	r2, r3
 8008f68:	d106      	bne.n	8008f78 <HAL_ADC_ConfigChannel+0x23c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	2200      	movs	r2, #0
 8008f70:	2101      	movs	r1, #1
 8008f72:	4618      	mov	r0, r3
 8008f74:	f7ff f932 	bl	80081dc <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	2102      	movs	r1, #2
 8008f7e:	4618      	mov	r0, r3
 8008f80:	f7ff f918 	bl	80081b4 <LL_ADC_GetOffsetChannel>
 8008f84:	4603      	mov	r3, r0
 8008f86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d10a      	bne.n	8008fa4 <HAL_ADC_ConfigChannel+0x268>
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	2102      	movs	r1, #2
 8008f94:	4618      	mov	r0, r3
 8008f96:	f7ff f90d 	bl	80081b4 <LL_ADC_GetOffsetChannel>
 8008f9a:	4603      	mov	r3, r0
 8008f9c:	0e9b      	lsrs	r3, r3, #26
 8008f9e:	f003 021f 	and.w	r2, r3, #31
 8008fa2:	e010      	b.n	8008fc6 <HAL_ADC_ConfigChannel+0x28a>
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	2102      	movs	r1, #2
 8008faa:	4618      	mov	r0, r3
 8008fac:	f7ff f902 	bl	80081b4 <LL_ADC_GetOffsetChannel>
 8008fb0:	4603      	mov	r3, r0
 8008fb2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008fb4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008fb6:	fa93 f3a3 	rbit	r3, r3
 8008fba:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 8008fbc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008fbe:	fab3 f383 	clz	r3, r3
 8008fc2:	b2db      	uxtb	r3, r3
 8008fc4:	461a      	mov	r2, r3
 8008fc6:	683b      	ldr	r3, [r7, #0]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d105      	bne.n	8008fde <HAL_ADC_ConfigChannel+0x2a2>
 8008fd2:	683b      	ldr	r3, [r7, #0]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	0e9b      	lsrs	r3, r3, #26
 8008fd8:	f003 031f 	and.w	r3, r3, #31
 8008fdc:	e00a      	b.n	8008ff4 <HAL_ADC_ConfigChannel+0x2b8>
 8008fde:	683b      	ldr	r3, [r7, #0]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008fe4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008fe6:	fa93 f3a3 	rbit	r3, r3
 8008fea:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8008fec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008fee:	fab3 f383 	clz	r3, r3
 8008ff2:	b2db      	uxtb	r3, r3
 8008ff4:	429a      	cmp	r2, r3
 8008ff6:	d106      	bne.n	8009006 <HAL_ADC_ConfigChannel+0x2ca>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	2102      	movs	r1, #2
 8009000:	4618      	mov	r0, r3
 8009002:	f7ff f8eb 	bl	80081dc <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	2103      	movs	r1, #3
 800900c:	4618      	mov	r0, r3
 800900e:	f7ff f8d1 	bl	80081b4 <LL_ADC_GetOffsetChannel>
 8009012:	4603      	mov	r3, r0
 8009014:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009018:	2b00      	cmp	r3, #0
 800901a:	d10a      	bne.n	8009032 <HAL_ADC_ConfigChannel+0x2f6>
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	2103      	movs	r1, #3
 8009022:	4618      	mov	r0, r3
 8009024:	f7ff f8c6 	bl	80081b4 <LL_ADC_GetOffsetChannel>
 8009028:	4603      	mov	r3, r0
 800902a:	0e9b      	lsrs	r3, r3, #26
 800902c:	f003 021f 	and.w	r2, r3, #31
 8009030:	e010      	b.n	8009054 <HAL_ADC_ConfigChannel+0x318>
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	2103      	movs	r1, #3
 8009038:	4618      	mov	r0, r3
 800903a:	f7ff f8bb 	bl	80081b4 <LL_ADC_GetOffsetChannel>
 800903e:	4603      	mov	r3, r0
 8009040:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009042:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009044:	fa93 f3a3 	rbit	r3, r3
 8009048:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800904a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800904c:	fab3 f383 	clz	r3, r3
 8009050:	b2db      	uxtb	r3, r3
 8009052:	461a      	mov	r2, r3
 8009054:	683b      	ldr	r3, [r7, #0]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800905c:	2b00      	cmp	r3, #0
 800905e:	d105      	bne.n	800906c <HAL_ADC_ConfigChannel+0x330>
 8009060:	683b      	ldr	r3, [r7, #0]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	0e9b      	lsrs	r3, r3, #26
 8009066:	f003 031f 	and.w	r3, r3, #31
 800906a:	e00a      	b.n	8009082 <HAL_ADC_ConfigChannel+0x346>
 800906c:	683b      	ldr	r3, [r7, #0]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009072:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009074:	fa93 f3a3 	rbit	r3, r3
 8009078:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 800907a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800907c:	fab3 f383 	clz	r3, r3
 8009080:	b2db      	uxtb	r3, r3
 8009082:	429a      	cmp	r2, r3
 8009084:	d106      	bne.n	8009094 <HAL_ADC_ConfigChannel+0x358>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	2200      	movs	r2, #0
 800908c:	2103      	movs	r1, #3
 800908e:	4618      	mov	r0, r3
 8009090:	f7ff f8a4 	bl	80081dc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	4618      	mov	r0, r3
 800909a:	f7ff f9c9 	bl	8008430 <LL_ADC_IsEnabled>
 800909e:	4603      	mov	r3, r0
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	f040 810c 	bne.w	80092be <HAL_ADC_ConfigChannel+0x582>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	6818      	ldr	r0, [r3, #0]
 80090aa:	683b      	ldr	r3, [r7, #0]
 80090ac:	6819      	ldr	r1, [r3, #0]
 80090ae:	683b      	ldr	r3, [r7, #0]
 80090b0:	68db      	ldr	r3, [r3, #12]
 80090b2:	461a      	mov	r2, r3
 80090b4:	f7ff f922 	bl	80082fc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80090b8:	683b      	ldr	r3, [r7, #0]
 80090ba:	68db      	ldr	r3, [r3, #12]
 80090bc:	4aa8      	ldr	r2, [pc, #672]	; (8009360 <HAL_ADC_ConfigChannel+0x624>)
 80090be:	4293      	cmp	r3, r2
 80090c0:	f040 80fd 	bne.w	80092be <HAL_ADC_ConfigChannel+0x582>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80090c8:	683b      	ldr	r3, [r7, #0]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d10b      	bne.n	80090ec <HAL_ADC_ConfigChannel+0x3b0>
 80090d4:	683b      	ldr	r3, [r7, #0]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	0e9b      	lsrs	r3, r3, #26
 80090da:	3301      	adds	r3, #1
 80090dc:	f003 031f 	and.w	r3, r3, #31
 80090e0:	2b09      	cmp	r3, #9
 80090e2:	bf94      	ite	ls
 80090e4:	2301      	movls	r3, #1
 80090e6:	2300      	movhi	r3, #0
 80090e8:	b2db      	uxtb	r3, r3
 80090ea:	e012      	b.n	8009112 <HAL_ADC_ConfigChannel+0x3d6>
 80090ec:	683b      	ldr	r3, [r7, #0]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80090f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80090f4:	fa93 f3a3 	rbit	r3, r3
 80090f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80090fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090fc:	fab3 f383 	clz	r3, r3
 8009100:	b2db      	uxtb	r3, r3
 8009102:	3301      	adds	r3, #1
 8009104:	f003 031f 	and.w	r3, r3, #31
 8009108:	2b09      	cmp	r3, #9
 800910a:	bf94      	ite	ls
 800910c:	2301      	movls	r3, #1
 800910e:	2300      	movhi	r3, #0
 8009110:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8009112:	2b00      	cmp	r3, #0
 8009114:	d064      	beq.n	80091e0 <HAL_ADC_ConfigChannel+0x4a4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8009116:	683b      	ldr	r3, [r7, #0]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800911e:	2b00      	cmp	r3, #0
 8009120:	d107      	bne.n	8009132 <HAL_ADC_ConfigChannel+0x3f6>
 8009122:	683b      	ldr	r3, [r7, #0]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	0e9b      	lsrs	r3, r3, #26
 8009128:	3301      	adds	r3, #1
 800912a:	069b      	lsls	r3, r3, #26
 800912c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8009130:	e00e      	b.n	8009150 <HAL_ADC_ConfigChannel+0x414>
 8009132:	683b      	ldr	r3, [r7, #0]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800913a:	fa93 f3a3 	rbit	r3, r3
 800913e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8009140:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009142:	fab3 f383 	clz	r3, r3
 8009146:	b2db      	uxtb	r3, r3
 8009148:	3301      	adds	r3, #1
 800914a:	069b      	lsls	r3, r3, #26
 800914c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8009150:	683b      	ldr	r3, [r7, #0]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009158:	2b00      	cmp	r3, #0
 800915a:	d109      	bne.n	8009170 <HAL_ADC_ConfigChannel+0x434>
 800915c:	683b      	ldr	r3, [r7, #0]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	0e9b      	lsrs	r3, r3, #26
 8009162:	3301      	adds	r3, #1
 8009164:	f003 031f 	and.w	r3, r3, #31
 8009168:	2101      	movs	r1, #1
 800916a:	fa01 f303 	lsl.w	r3, r1, r3
 800916e:	e010      	b.n	8009192 <HAL_ADC_ConfigChannel+0x456>
 8009170:	683b      	ldr	r3, [r7, #0]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009178:	fa93 f3a3 	rbit	r3, r3
 800917c:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800917e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009180:	fab3 f383 	clz	r3, r3
 8009184:	b2db      	uxtb	r3, r3
 8009186:	3301      	adds	r3, #1
 8009188:	f003 031f 	and.w	r3, r3, #31
 800918c:	2101      	movs	r1, #1
 800918e:	fa01 f303 	lsl.w	r3, r1, r3
 8009192:	ea42 0103 	orr.w	r1, r2, r3
 8009196:	683b      	ldr	r3, [r7, #0]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d10a      	bne.n	80091b8 <HAL_ADC_ConfigChannel+0x47c>
 80091a2:	683b      	ldr	r3, [r7, #0]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	0e9b      	lsrs	r3, r3, #26
 80091a8:	3301      	adds	r3, #1
 80091aa:	f003 021f 	and.w	r2, r3, #31
 80091ae:	4613      	mov	r3, r2
 80091b0:	005b      	lsls	r3, r3, #1
 80091b2:	4413      	add	r3, r2
 80091b4:	051b      	lsls	r3, r3, #20
 80091b6:	e011      	b.n	80091dc <HAL_ADC_ConfigChannel+0x4a0>
 80091b8:	683b      	ldr	r3, [r7, #0]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80091be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091c0:	fa93 f3a3 	rbit	r3, r3
 80091c4:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80091c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091c8:	fab3 f383 	clz	r3, r3
 80091cc:	b2db      	uxtb	r3, r3
 80091ce:	3301      	adds	r3, #1
 80091d0:	f003 021f 	and.w	r2, r3, #31
 80091d4:	4613      	mov	r3, r2
 80091d6:	005b      	lsls	r3, r3, #1
 80091d8:	4413      	add	r3, r2
 80091da:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80091dc:	430b      	orrs	r3, r1
 80091de:	e069      	b.n	80092b4 <HAL_ADC_ConfigChannel+0x578>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80091e0:	683b      	ldr	r3, [r7, #0]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d107      	bne.n	80091fc <HAL_ADC_ConfigChannel+0x4c0>
 80091ec:	683b      	ldr	r3, [r7, #0]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	0e9b      	lsrs	r3, r3, #26
 80091f2:	3301      	adds	r3, #1
 80091f4:	069b      	lsls	r3, r3, #26
 80091f6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80091fa:	e00e      	b.n	800921a <HAL_ADC_ConfigChannel+0x4de>
 80091fc:	683b      	ldr	r3, [r7, #0]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009202:	6a3b      	ldr	r3, [r7, #32]
 8009204:	fa93 f3a3 	rbit	r3, r3
 8009208:	61fb      	str	r3, [r7, #28]
  return result;
 800920a:	69fb      	ldr	r3, [r7, #28]
 800920c:	fab3 f383 	clz	r3, r3
 8009210:	b2db      	uxtb	r3, r3
 8009212:	3301      	adds	r3, #1
 8009214:	069b      	lsls	r3, r3, #26
 8009216:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800921a:	683b      	ldr	r3, [r7, #0]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009222:	2b00      	cmp	r3, #0
 8009224:	d109      	bne.n	800923a <HAL_ADC_ConfigChannel+0x4fe>
 8009226:	683b      	ldr	r3, [r7, #0]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	0e9b      	lsrs	r3, r3, #26
 800922c:	3301      	adds	r3, #1
 800922e:	f003 031f 	and.w	r3, r3, #31
 8009232:	2101      	movs	r1, #1
 8009234:	fa01 f303 	lsl.w	r3, r1, r3
 8009238:	e010      	b.n	800925c <HAL_ADC_ConfigChannel+0x520>
 800923a:	683b      	ldr	r3, [r7, #0]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009240:	69bb      	ldr	r3, [r7, #24]
 8009242:	fa93 f3a3 	rbit	r3, r3
 8009246:	617b      	str	r3, [r7, #20]
  return result;
 8009248:	697b      	ldr	r3, [r7, #20]
 800924a:	fab3 f383 	clz	r3, r3
 800924e:	b2db      	uxtb	r3, r3
 8009250:	3301      	adds	r3, #1
 8009252:	f003 031f 	and.w	r3, r3, #31
 8009256:	2101      	movs	r1, #1
 8009258:	fa01 f303 	lsl.w	r3, r1, r3
 800925c:	ea42 0103 	orr.w	r1, r2, r3
 8009260:	683b      	ldr	r3, [r7, #0]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009268:	2b00      	cmp	r3, #0
 800926a:	d10d      	bne.n	8009288 <HAL_ADC_ConfigChannel+0x54c>
 800926c:	683b      	ldr	r3, [r7, #0]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	0e9b      	lsrs	r3, r3, #26
 8009272:	3301      	adds	r3, #1
 8009274:	f003 021f 	and.w	r2, r3, #31
 8009278:	4613      	mov	r3, r2
 800927a:	005b      	lsls	r3, r3, #1
 800927c:	4413      	add	r3, r2
 800927e:	3b1e      	subs	r3, #30
 8009280:	051b      	lsls	r3, r3, #20
 8009282:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8009286:	e014      	b.n	80092b2 <HAL_ADC_ConfigChannel+0x576>
 8009288:	683b      	ldr	r3, [r7, #0]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800928e:	693b      	ldr	r3, [r7, #16]
 8009290:	fa93 f3a3 	rbit	r3, r3
 8009294:	60fb      	str	r3, [r7, #12]
  return result;
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	fab3 f383 	clz	r3, r3
 800929c:	b2db      	uxtb	r3, r3
 800929e:	3301      	adds	r3, #1
 80092a0:	f003 021f 	and.w	r2, r3, #31
 80092a4:	4613      	mov	r3, r2
 80092a6:	005b      	lsls	r3, r3, #1
 80092a8:	4413      	add	r3, r2
 80092aa:	3b1e      	subs	r3, #30
 80092ac:	051b      	lsls	r3, r3, #20
 80092ae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80092b2:	430b      	orrs	r3, r1
 80092b4:	683a      	ldr	r2, [r7, #0]
 80092b6:	6892      	ldr	r2, [r2, #8]
 80092b8:	4619      	mov	r1, r3
 80092ba:	f7fe fff6 	bl	80082aa <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80092be:	683b      	ldr	r3, [r7, #0]
 80092c0:	681a      	ldr	r2, [r3, #0]
 80092c2:	4b28      	ldr	r3, [pc, #160]	; (8009364 <HAL_ADC_ConfigChannel+0x628>)
 80092c4:	4013      	ands	r3, r2
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d07c      	beq.n	80093c4 <HAL_ADC_ConfigChannel+0x688>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80092ca:	4827      	ldr	r0, [pc, #156]	; (8009368 <HAL_ADC_ConfigChannel+0x62c>)
 80092cc:	f7fe ff42 	bl	8008154 <LL_ADC_GetCommonPathInternalCh>
 80092d0:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80092d4:	683b      	ldr	r3, [r7, #0]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	4a24      	ldr	r2, [pc, #144]	; (800936c <HAL_ADC_ConfigChannel+0x630>)
 80092da:	4293      	cmp	r3, r2
 80092dc:	d126      	bne.n	800932c <HAL_ADC_ConfigChannel+0x5f0>
 80092de:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80092e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d120      	bne.n	800932c <HAL_ADC_ConfigChannel+0x5f0>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	4a20      	ldr	r2, [pc, #128]	; (8009370 <HAL_ADC_ConfigChannel+0x634>)
 80092f0:	4293      	cmp	r3, r2
 80092f2:	d167      	bne.n	80093c4 <HAL_ADC_ConfigChannel+0x688>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80092f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80092f8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80092fc:	4619      	mov	r1, r3
 80092fe:	481a      	ldr	r0, [pc, #104]	; (8009368 <HAL_ADC_ConfigChannel+0x62c>)
 8009300:	f7fe ff15 	bl	800812e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8009304:	4b1b      	ldr	r3, [pc, #108]	; (8009374 <HAL_ADC_ConfigChannel+0x638>)
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	099b      	lsrs	r3, r3, #6
 800930a:	4a1b      	ldr	r2, [pc, #108]	; (8009378 <HAL_ADC_ConfigChannel+0x63c>)
 800930c:	fba2 2303 	umull	r2, r3, r2, r3
 8009310:	099a      	lsrs	r2, r3, #6
 8009312:	4613      	mov	r3, r2
 8009314:	005b      	lsls	r3, r3, #1
 8009316:	4413      	add	r3, r2
 8009318:	009b      	lsls	r3, r3, #2
 800931a:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800931c:	e002      	b.n	8009324 <HAL_ADC_ConfigChannel+0x5e8>
          {
            wait_loop_index--;
 800931e:	68bb      	ldr	r3, [r7, #8]
 8009320:	3b01      	subs	r3, #1
 8009322:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8009324:	68bb      	ldr	r3, [r7, #8]
 8009326:	2b00      	cmp	r3, #0
 8009328:	d1f9      	bne.n	800931e <HAL_ADC_ConfigChannel+0x5e2>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800932a:	e04b      	b.n	80093c4 <HAL_ADC_ConfigChannel+0x688>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800932c:	683b      	ldr	r3, [r7, #0]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	4a12      	ldr	r2, [pc, #72]	; (800937c <HAL_ADC_ConfigChannel+0x640>)
 8009332:	4293      	cmp	r3, r2
 8009334:	d124      	bne.n	8009380 <HAL_ADC_ConfigChannel+0x644>
 8009336:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800933a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800933e:	2b00      	cmp	r3, #0
 8009340:	d11e      	bne.n	8009380 <HAL_ADC_ConfigChannel+0x644>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	4a0a      	ldr	r2, [pc, #40]	; (8009370 <HAL_ADC_ConfigChannel+0x634>)
 8009348:	4293      	cmp	r3, r2
 800934a:	d13b      	bne.n	80093c4 <HAL_ADC_ConfigChannel+0x688>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800934c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009350:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009354:	4619      	mov	r1, r3
 8009356:	4804      	ldr	r0, [pc, #16]	; (8009368 <HAL_ADC_ConfigChannel+0x62c>)
 8009358:	f7fe fee9 	bl	800812e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800935c:	e032      	b.n	80093c4 <HAL_ADC_ConfigChannel+0x688>
 800935e:	bf00      	nop
 8009360:	407f0000 	.word	0x407f0000
 8009364:	80080000 	.word	0x80080000
 8009368:	50040300 	.word	0x50040300
 800936c:	c7520000 	.word	0xc7520000
 8009370:	50040000 	.word	0x50040000
 8009374:	20000000 	.word	0x20000000
 8009378:	053e2d63 	.word	0x053e2d63
 800937c:	cb840000 	.word	0xcb840000
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8009380:	683b      	ldr	r3, [r7, #0]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	4a14      	ldr	r2, [pc, #80]	; (80093d8 <HAL_ADC_ConfigChannel+0x69c>)
 8009386:	4293      	cmp	r3, r2
 8009388:	d11c      	bne.n	80093c4 <HAL_ADC_ConfigChannel+0x688>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800938a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800938e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009392:	2b00      	cmp	r3, #0
 8009394:	d116      	bne.n	80093c4 <HAL_ADC_ConfigChannel+0x688>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	4a10      	ldr	r2, [pc, #64]	; (80093dc <HAL_ADC_ConfigChannel+0x6a0>)
 800939c:	4293      	cmp	r3, r2
 800939e:	d111      	bne.n	80093c4 <HAL_ADC_ConfigChannel+0x688>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80093a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80093a4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80093a8:	4619      	mov	r1, r3
 80093aa:	480d      	ldr	r0, [pc, #52]	; (80093e0 <HAL_ADC_ConfigChannel+0x6a4>)
 80093ac:	f7fe febf 	bl	800812e <LL_ADC_SetCommonPathInternalCh>
 80093b0:	e008      	b.n	80093c4 <HAL_ADC_ConfigChannel+0x688>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093b6:	f043 0220 	orr.w	r2, r3, #32
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80093be:	2301      	movs	r3, #1
 80093c0:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	2200      	movs	r2, #0
 80093c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80093cc:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 80093d0:	4618      	mov	r0, r3
 80093d2:	3798      	adds	r7, #152	; 0x98
 80093d4:	46bd      	mov	sp, r7
 80093d6:	bd80      	pop	{r7, pc}
 80093d8:	80000001 	.word	0x80000001
 80093dc:	50040000 	.word	0x50040000
 80093e0:	50040300 	.word	0x50040300

080093e4 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80093e4:	b580      	push	{r7, lr}
 80093e6:	b088      	sub	sp, #32
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]
 80093ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80093ee:	2300      	movs	r3, #0
 80093f0:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80093f2:	683b      	ldr	r3, [r7, #0]
 80093f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	4618      	mov	r0, r3
 80093fc:	f7ff f866 	bl	80084cc <LL_ADC_REG_IsConversionOngoing>
 8009400:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	4618      	mov	r0, r3
 8009408:	f7ff f887 	bl	800851a <LL_ADC_INJ_IsConversionOngoing>
 800940c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800940e:	693b      	ldr	r3, [r7, #16]
 8009410:	2b00      	cmp	r3, #0
 8009412:	d103      	bne.n	800941c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	2b00      	cmp	r3, #0
 8009418:	f000 8090 	beq.w	800953c <ADC_ConversionStop+0x158>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	68db      	ldr	r3, [r3, #12]
 8009422:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009426:	2b00      	cmp	r3, #0
 8009428:	d02a      	beq.n	8009480 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	7e5b      	ldrb	r3, [r3, #25]
 800942e:	2b01      	cmp	r3, #1
 8009430:	d126      	bne.n	8009480 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	7e1b      	ldrb	r3, [r3, #24]
 8009436:	2b01      	cmp	r3, #1
 8009438:	d122      	bne.n	8009480 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800943a:	2301      	movs	r3, #1
 800943c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800943e:	e014      	b.n	800946a <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8009440:	69fb      	ldr	r3, [r7, #28]
 8009442:	4a41      	ldr	r2, [pc, #260]	; (8009548 <ADC_ConversionStop+0x164>)
 8009444:	4293      	cmp	r3, r2
 8009446:	d90d      	bls.n	8009464 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800944c:	f043 0210 	orr.w	r2, r3, #16
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009458:	f043 0201 	orr.w	r2, r3, #1
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8009460:	2301      	movs	r3, #1
 8009462:	e06c      	b.n	800953e <ADC_ConversionStop+0x15a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8009464:	69fb      	ldr	r3, [r7, #28]
 8009466:	3301      	adds	r3, #1
 8009468:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009474:	2b40      	cmp	r3, #64	; 0x40
 8009476:	d1e3      	bne.n	8009440 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	2240      	movs	r2, #64	; 0x40
 800947e:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8009480:	69bb      	ldr	r3, [r7, #24]
 8009482:	2b02      	cmp	r3, #2
 8009484:	d014      	beq.n	80094b0 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	4618      	mov	r0, r3
 800948c:	f7ff f81e 	bl	80084cc <LL_ADC_REG_IsConversionOngoing>
 8009490:	4603      	mov	r3, r0
 8009492:	2b00      	cmp	r3, #0
 8009494:	d00c      	beq.n	80094b0 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	4618      	mov	r0, r3
 800949c:	f7fe ffdb 	bl	8008456 <LL_ADC_IsDisableOngoing>
 80094a0:	4603      	mov	r3, r0
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d104      	bne.n	80094b0 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	4618      	mov	r0, r3
 80094ac:	f7fe fffa 	bl	80084a4 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80094b0:	69bb      	ldr	r3, [r7, #24]
 80094b2:	2b01      	cmp	r3, #1
 80094b4:	d014      	beq.n	80094e0 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	4618      	mov	r0, r3
 80094bc:	f7ff f82d 	bl	800851a <LL_ADC_INJ_IsConversionOngoing>
 80094c0:	4603      	mov	r3, r0
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d00c      	beq.n	80094e0 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	4618      	mov	r0, r3
 80094cc:	f7fe ffc3 	bl	8008456 <LL_ADC_IsDisableOngoing>
 80094d0:	4603      	mov	r3, r0
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d104      	bne.n	80094e0 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	4618      	mov	r0, r3
 80094dc:	f7ff f809 	bl	80084f2 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80094e0:	69bb      	ldr	r3, [r7, #24]
 80094e2:	2b02      	cmp	r3, #2
 80094e4:	d004      	beq.n	80094f0 <ADC_ConversionStop+0x10c>
 80094e6:	2b03      	cmp	r3, #3
 80094e8:	d105      	bne.n	80094f6 <ADC_ConversionStop+0x112>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80094ea:	230c      	movs	r3, #12
 80094ec:	617b      	str	r3, [r7, #20]
        break;
 80094ee:	e005      	b.n	80094fc <ADC_ConversionStop+0x118>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80094f0:	2308      	movs	r3, #8
 80094f2:	617b      	str	r3, [r7, #20]
        break;
 80094f4:	e002      	b.n	80094fc <ADC_ConversionStop+0x118>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80094f6:	2304      	movs	r3, #4
 80094f8:	617b      	str	r3, [r7, #20]
        break;
 80094fa:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80094fc:	f7fe fdd6 	bl	80080ac <HAL_GetTick>
 8009500:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8009502:	e014      	b.n	800952e <ADC_ConversionStop+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8009504:	f7fe fdd2 	bl	80080ac <HAL_GetTick>
 8009508:	4602      	mov	r2, r0
 800950a:	68bb      	ldr	r3, [r7, #8]
 800950c:	1ad3      	subs	r3, r2, r3
 800950e:	2b05      	cmp	r3, #5
 8009510:	d90d      	bls.n	800952e <ADC_ConversionStop+0x14a>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009516:	f043 0210 	orr.w	r2, r3, #16
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009522:	f043 0201 	orr.w	r2, r3, #1
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 800952a:	2301      	movs	r3, #1
 800952c:	e007      	b.n	800953e <ADC_ConversionStop+0x15a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	689a      	ldr	r2, [r3, #8]
 8009534:	697b      	ldr	r3, [r7, #20]
 8009536:	4013      	ands	r3, r2
 8009538:	2b00      	cmp	r3, #0
 800953a:	d1e3      	bne.n	8009504 <ADC_ConversionStop+0x120>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800953c:	2300      	movs	r3, #0
}
 800953e:	4618      	mov	r0, r3
 8009540:	3720      	adds	r7, #32
 8009542:	46bd      	mov	sp, r7
 8009544:	bd80      	pop	{r7, pc}
 8009546:	bf00      	nop
 8009548:	a33fffff 	.word	0xa33fffff

0800954c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800954c:	b580      	push	{r7, lr}
 800954e:	b084      	sub	sp, #16
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	4618      	mov	r0, r3
 800955a:	f7fe ff69 	bl	8008430 <LL_ADC_IsEnabled>
 800955e:	4603      	mov	r3, r0
 8009560:	2b00      	cmp	r3, #0
 8009562:	d146      	bne.n	80095f2 <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	689a      	ldr	r2, [r3, #8]
 800956a:	4b24      	ldr	r3, [pc, #144]	; (80095fc <ADC_Enable+0xb0>)
 800956c:	4013      	ands	r3, r2
 800956e:	2b00      	cmp	r3, #0
 8009570:	d00d      	beq.n	800958e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009576:	f043 0210 	orr.w	r2, r3, #16
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009582:	f043 0201 	orr.w	r2, r3, #1
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800958a:	2301      	movs	r3, #1
 800958c:	e032      	b.n	80095f4 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	4618      	mov	r0, r3
 8009594:	f7fe ff24 	bl	80083e0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8009598:	f7fe fd88 	bl	80080ac <HAL_GetTick>
 800959c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800959e:	e021      	b.n	80095e4 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	4618      	mov	r0, r3
 80095a6:	f7fe ff43 	bl	8008430 <LL_ADC_IsEnabled>
 80095aa:	4603      	mov	r3, r0
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d104      	bne.n	80095ba <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	4618      	mov	r0, r3
 80095b6:	f7fe ff13 	bl	80083e0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80095ba:	f7fe fd77 	bl	80080ac <HAL_GetTick>
 80095be:	4602      	mov	r2, r0
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	1ad3      	subs	r3, r2, r3
 80095c4:	2b02      	cmp	r3, #2
 80095c6:	d90d      	bls.n	80095e4 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095cc:	f043 0210 	orr.w	r2, r3, #16
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095d8:	f043 0201 	orr.w	r2, r3, #1
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 80095e0:	2301      	movs	r3, #1
 80095e2:	e007      	b.n	80095f4 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	f003 0301 	and.w	r3, r3, #1
 80095ee:	2b01      	cmp	r3, #1
 80095f0:	d1d6      	bne.n	80095a0 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80095f2:	2300      	movs	r3, #0
}
 80095f4:	4618      	mov	r0, r3
 80095f6:	3710      	adds	r7, #16
 80095f8:	46bd      	mov	sp, r7
 80095fa:	bd80      	pop	{r7, pc}
 80095fc:	8000003f 	.word	0x8000003f

08009600 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8009600:	b580      	push	{r7, lr}
 8009602:	b084      	sub	sp, #16
 8009604:	af00      	add	r7, sp, #0
 8009606:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	4618      	mov	r0, r3
 800960e:	f7fe ff22 	bl	8008456 <LL_ADC_IsDisableOngoing>
 8009612:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	4618      	mov	r0, r3
 800961a:	f7fe ff09 	bl	8008430 <LL_ADC_IsEnabled>
 800961e:	4603      	mov	r3, r0
 8009620:	2b00      	cmp	r3, #0
 8009622:	d040      	beq.n	80096a6 <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	2b00      	cmp	r3, #0
 8009628:	d13d      	bne.n	80096a6 <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	689b      	ldr	r3, [r3, #8]
 8009630:	f003 030d 	and.w	r3, r3, #13
 8009634:	2b01      	cmp	r3, #1
 8009636:	d10c      	bne.n	8009652 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	4618      	mov	r0, r3
 800963e:	f7fe fee3 	bl	8008408 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	2203      	movs	r2, #3
 8009648:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800964a:	f7fe fd2f 	bl	80080ac <HAL_GetTick>
 800964e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8009650:	e022      	b.n	8009698 <ADC_Disable+0x98>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009656:	f043 0210 	orr.w	r2, r3, #16
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009662:	f043 0201 	orr.w	r2, r3, #1
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 800966a:	2301      	movs	r3, #1
 800966c:	e01c      	b.n	80096a8 <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800966e:	f7fe fd1d 	bl	80080ac <HAL_GetTick>
 8009672:	4602      	mov	r2, r0
 8009674:	68bb      	ldr	r3, [r7, #8]
 8009676:	1ad3      	subs	r3, r2, r3
 8009678:	2b02      	cmp	r3, #2
 800967a:	d90d      	bls.n	8009698 <ADC_Disable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009680:	f043 0210 	orr.w	r2, r3, #16
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800968c:	f043 0201 	orr.w	r2, r3, #1
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8009694:	2301      	movs	r3, #1
 8009696:	e007      	b.n	80096a8 <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	689b      	ldr	r3, [r3, #8]
 800969e:	f003 0301 	and.w	r3, r3, #1
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d1e3      	bne.n	800966e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80096a6:	2300      	movs	r3, #0
}
 80096a8:	4618      	mov	r0, r3
 80096aa:	3710      	adds	r7, #16
 80096ac:	46bd      	mov	sp, r7
 80096ae:	bd80      	pop	{r7, pc}

080096b0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80096b0:	b580      	push	{r7, lr}
 80096b2:	b084      	sub	sp, #16
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096bc:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096c2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d14b      	bne.n	8009762 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096ce:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	f003 0308 	and.w	r3, r3, #8
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d021      	beq.n	8009728 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	4618      	mov	r0, r3
 80096ea:	f7fe fd8f 	bl	800820c <LL_ADC_REG_IsTriggerSourceSWStart>
 80096ee:	4603      	mov	r3, r0
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d032      	beq.n	800975a <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	68db      	ldr	r3, [r3, #12]
 80096fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d12b      	bne.n	800975a <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009706:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009712:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009716:	2b00      	cmp	r3, #0
 8009718:	d11f      	bne.n	800975a <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800971e:	f043 0201 	orr.w	r2, r3, #1
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	655a      	str	r2, [r3, #84]	; 0x54
 8009726:	e018      	b.n	800975a <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	68db      	ldr	r3, [r3, #12]
 800972e:	f003 0302 	and.w	r3, r3, #2
 8009732:	2b00      	cmp	r3, #0
 8009734:	d111      	bne.n	800975a <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800973a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009746:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800974a:	2b00      	cmp	r3, #0
 800974c:	d105      	bne.n	800975a <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009752:	f043 0201 	orr.w	r2, r3, #1
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800975a:	68f8      	ldr	r0, [r7, #12]
 800975c:	f7f8 fd43 	bl	80021e6 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8009760:	e00e      	b.n	8009780 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009766:	f003 0310 	and.w	r3, r3, #16
 800976a:	2b00      	cmp	r3, #0
 800976c:	d003      	beq.n	8009776 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800976e:	68f8      	ldr	r0, [r7, #12]
 8009770:	f7ff fad9 	bl	8008d26 <HAL_ADC_ErrorCallback>
}
 8009774:	e004      	b.n	8009780 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800977a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800977c:	6878      	ldr	r0, [r7, #4]
 800977e:	4798      	blx	r3
}
 8009780:	bf00      	nop
 8009782:	3710      	adds	r7, #16
 8009784:	46bd      	mov	sp, r7
 8009786:	bd80      	pop	{r7, pc}

08009788 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8009788:	b580      	push	{r7, lr}
 800978a:	b084      	sub	sp, #16
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009794:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8009796:	68f8      	ldr	r0, [r7, #12]
 8009798:	f7ff fab1 	bl	8008cfe <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800979c:	bf00      	nop
 800979e:	3710      	adds	r7, #16
 80097a0:	46bd      	mov	sp, r7
 80097a2:	bd80      	pop	{r7, pc}

080097a4 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80097a4:	b580      	push	{r7, lr}
 80097a6:	b084      	sub	sp, #16
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097b0:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097b6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097c2:	f043 0204 	orr.w	r2, r3, #4
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80097ca:	68f8      	ldr	r0, [r7, #12]
 80097cc:	f7ff faab 	bl	8008d26 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80097d0:	bf00      	nop
 80097d2:	3710      	adds	r7, #16
 80097d4:	46bd      	mov	sp, r7
 80097d6:	bd80      	pop	{r7, pc}

080097d8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80097d8:	b480      	push	{r7}
 80097da:	b083      	sub	sp, #12
 80097dc:	af00      	add	r7, sp, #0
 80097de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80097e0:	bf00      	nop
 80097e2:	370c      	adds	r7, #12
 80097e4:	46bd      	mov	sp, r7
 80097e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ea:	4770      	bx	lr

080097ec <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80097ec:	b480      	push	{r7}
 80097ee:	b083      	sub	sp, #12
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80097f4:	bf00      	nop
 80097f6:	370c      	adds	r7, #12
 80097f8:	46bd      	mov	sp, r7
 80097fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fe:	4770      	bx	lr

08009800 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8009800:	b480      	push	{r7}
 8009802:	b083      	sub	sp, #12
 8009804:	af00      	add	r7, sp, #0
 8009806:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8009808:	bf00      	nop
 800980a:	370c      	adds	r7, #12
 800980c:	46bd      	mov	sp, r7
 800980e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009812:	4770      	bx	lr

08009814 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8009814:	b480      	push	{r7}
 8009816:	b083      	sub	sp, #12
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800981c:	bf00      	nop
 800981e:	370c      	adds	r7, #12
 8009820:	46bd      	mov	sp, r7
 8009822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009826:	4770      	bx	lr

08009828 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8009828:	b480      	push	{r7}
 800982a:	b083      	sub	sp, #12
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8009830:	bf00      	nop
 8009832:	370c      	adds	r7, #12
 8009834:	46bd      	mov	sp, r7
 8009836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983a:	4770      	bx	lr

0800983c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800983c:	b480      	push	{r7}
 800983e:	b085      	sub	sp, #20
 8009840:	af00      	add	r7, sp, #0
 8009842:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	f003 0307 	and.w	r3, r3, #7
 800984a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800984c:	4b0c      	ldr	r3, [pc, #48]	; (8009880 <__NVIC_SetPriorityGrouping+0x44>)
 800984e:	68db      	ldr	r3, [r3, #12]
 8009850:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009852:	68ba      	ldr	r2, [r7, #8]
 8009854:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8009858:	4013      	ands	r3, r2
 800985a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009860:	68bb      	ldr	r3, [r7, #8]
 8009862:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009864:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8009868:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800986c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800986e:	4a04      	ldr	r2, [pc, #16]	; (8009880 <__NVIC_SetPriorityGrouping+0x44>)
 8009870:	68bb      	ldr	r3, [r7, #8]
 8009872:	60d3      	str	r3, [r2, #12]
}
 8009874:	bf00      	nop
 8009876:	3714      	adds	r7, #20
 8009878:	46bd      	mov	sp, r7
 800987a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987e:	4770      	bx	lr
 8009880:	e000ed00 	.word	0xe000ed00

08009884 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8009884:	b480      	push	{r7}
 8009886:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009888:	4b04      	ldr	r3, [pc, #16]	; (800989c <__NVIC_GetPriorityGrouping+0x18>)
 800988a:	68db      	ldr	r3, [r3, #12]
 800988c:	0a1b      	lsrs	r3, r3, #8
 800988e:	f003 0307 	and.w	r3, r3, #7
}
 8009892:	4618      	mov	r0, r3
 8009894:	46bd      	mov	sp, r7
 8009896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800989a:	4770      	bx	lr
 800989c:	e000ed00 	.word	0xe000ed00

080098a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80098a0:	b480      	push	{r7}
 80098a2:	b083      	sub	sp, #12
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	4603      	mov	r3, r0
 80098a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80098aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	db0b      	blt.n	80098ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80098b2:	79fb      	ldrb	r3, [r7, #7]
 80098b4:	f003 021f 	and.w	r2, r3, #31
 80098b8:	4907      	ldr	r1, [pc, #28]	; (80098d8 <__NVIC_EnableIRQ+0x38>)
 80098ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80098be:	095b      	lsrs	r3, r3, #5
 80098c0:	2001      	movs	r0, #1
 80098c2:	fa00 f202 	lsl.w	r2, r0, r2
 80098c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80098ca:	bf00      	nop
 80098cc:	370c      	adds	r7, #12
 80098ce:	46bd      	mov	sp, r7
 80098d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d4:	4770      	bx	lr
 80098d6:	bf00      	nop
 80098d8:	e000e100 	.word	0xe000e100

080098dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80098dc:	b480      	push	{r7}
 80098de:	b083      	sub	sp, #12
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	4603      	mov	r3, r0
 80098e4:	6039      	str	r1, [r7, #0]
 80098e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80098e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	db0a      	blt.n	8009906 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80098f0:	683b      	ldr	r3, [r7, #0]
 80098f2:	b2da      	uxtb	r2, r3
 80098f4:	490c      	ldr	r1, [pc, #48]	; (8009928 <__NVIC_SetPriority+0x4c>)
 80098f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80098fa:	0112      	lsls	r2, r2, #4
 80098fc:	b2d2      	uxtb	r2, r2
 80098fe:	440b      	add	r3, r1
 8009900:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8009904:	e00a      	b.n	800991c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009906:	683b      	ldr	r3, [r7, #0]
 8009908:	b2da      	uxtb	r2, r3
 800990a:	4908      	ldr	r1, [pc, #32]	; (800992c <__NVIC_SetPriority+0x50>)
 800990c:	79fb      	ldrb	r3, [r7, #7]
 800990e:	f003 030f 	and.w	r3, r3, #15
 8009912:	3b04      	subs	r3, #4
 8009914:	0112      	lsls	r2, r2, #4
 8009916:	b2d2      	uxtb	r2, r2
 8009918:	440b      	add	r3, r1
 800991a:	761a      	strb	r2, [r3, #24]
}
 800991c:	bf00      	nop
 800991e:	370c      	adds	r7, #12
 8009920:	46bd      	mov	sp, r7
 8009922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009926:	4770      	bx	lr
 8009928:	e000e100 	.word	0xe000e100
 800992c:	e000ed00 	.word	0xe000ed00

08009930 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009930:	b480      	push	{r7}
 8009932:	b089      	sub	sp, #36	; 0x24
 8009934:	af00      	add	r7, sp, #0
 8009936:	60f8      	str	r0, [r7, #12]
 8009938:	60b9      	str	r1, [r7, #8]
 800993a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	f003 0307 	and.w	r3, r3, #7
 8009942:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009944:	69fb      	ldr	r3, [r7, #28]
 8009946:	f1c3 0307 	rsb	r3, r3, #7
 800994a:	2b04      	cmp	r3, #4
 800994c:	bf28      	it	cs
 800994e:	2304      	movcs	r3, #4
 8009950:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009952:	69fb      	ldr	r3, [r7, #28]
 8009954:	3304      	adds	r3, #4
 8009956:	2b06      	cmp	r3, #6
 8009958:	d902      	bls.n	8009960 <NVIC_EncodePriority+0x30>
 800995a:	69fb      	ldr	r3, [r7, #28]
 800995c:	3b03      	subs	r3, #3
 800995e:	e000      	b.n	8009962 <NVIC_EncodePriority+0x32>
 8009960:	2300      	movs	r3, #0
 8009962:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009964:	f04f 32ff 	mov.w	r2, #4294967295
 8009968:	69bb      	ldr	r3, [r7, #24]
 800996a:	fa02 f303 	lsl.w	r3, r2, r3
 800996e:	43da      	mvns	r2, r3
 8009970:	68bb      	ldr	r3, [r7, #8]
 8009972:	401a      	ands	r2, r3
 8009974:	697b      	ldr	r3, [r7, #20]
 8009976:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009978:	f04f 31ff 	mov.w	r1, #4294967295
 800997c:	697b      	ldr	r3, [r7, #20]
 800997e:	fa01 f303 	lsl.w	r3, r1, r3
 8009982:	43d9      	mvns	r1, r3
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009988:	4313      	orrs	r3, r2
         );
}
 800998a:	4618      	mov	r0, r3
 800998c:	3724      	adds	r7, #36	; 0x24
 800998e:	46bd      	mov	sp, r7
 8009990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009994:	4770      	bx	lr
	...

08009998 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8009998:	b580      	push	{r7, lr}
 800999a:	b082      	sub	sp, #8
 800999c:	af00      	add	r7, sp, #0
 800999e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	3b01      	subs	r3, #1
 80099a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80099a8:	d301      	bcc.n	80099ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80099aa:	2301      	movs	r3, #1
 80099ac:	e00f      	b.n	80099ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80099ae:	4a0a      	ldr	r2, [pc, #40]	; (80099d8 <SysTick_Config+0x40>)
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	3b01      	subs	r3, #1
 80099b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80099b6:	210f      	movs	r1, #15
 80099b8:	f04f 30ff 	mov.w	r0, #4294967295
 80099bc:	f7ff ff8e 	bl	80098dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80099c0:	4b05      	ldr	r3, [pc, #20]	; (80099d8 <SysTick_Config+0x40>)
 80099c2:	2200      	movs	r2, #0
 80099c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80099c6:	4b04      	ldr	r3, [pc, #16]	; (80099d8 <SysTick_Config+0x40>)
 80099c8:	2207      	movs	r2, #7
 80099ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80099cc:	2300      	movs	r3, #0
}
 80099ce:	4618      	mov	r0, r3
 80099d0:	3708      	adds	r7, #8
 80099d2:	46bd      	mov	sp, r7
 80099d4:	bd80      	pop	{r7, pc}
 80099d6:	bf00      	nop
 80099d8:	e000e010 	.word	0xe000e010

080099dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80099dc:	b580      	push	{r7, lr}
 80099de:	b082      	sub	sp, #8
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80099e4:	6878      	ldr	r0, [r7, #4]
 80099e6:	f7ff ff29 	bl	800983c <__NVIC_SetPriorityGrouping>
}
 80099ea:	bf00      	nop
 80099ec:	3708      	adds	r7, #8
 80099ee:	46bd      	mov	sp, r7
 80099f0:	bd80      	pop	{r7, pc}

080099f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80099f2:	b580      	push	{r7, lr}
 80099f4:	b086      	sub	sp, #24
 80099f6:	af00      	add	r7, sp, #0
 80099f8:	4603      	mov	r3, r0
 80099fa:	60b9      	str	r1, [r7, #8]
 80099fc:	607a      	str	r2, [r7, #4]
 80099fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8009a00:	2300      	movs	r3, #0
 8009a02:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8009a04:	f7ff ff3e 	bl	8009884 <__NVIC_GetPriorityGrouping>
 8009a08:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009a0a:	687a      	ldr	r2, [r7, #4]
 8009a0c:	68b9      	ldr	r1, [r7, #8]
 8009a0e:	6978      	ldr	r0, [r7, #20]
 8009a10:	f7ff ff8e 	bl	8009930 <NVIC_EncodePriority>
 8009a14:	4602      	mov	r2, r0
 8009a16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009a1a:	4611      	mov	r1, r2
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	f7ff ff5d 	bl	80098dc <__NVIC_SetPriority>
}
 8009a22:	bf00      	nop
 8009a24:	3718      	adds	r7, #24
 8009a26:	46bd      	mov	sp, r7
 8009a28:	bd80      	pop	{r7, pc}

08009a2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009a2a:	b580      	push	{r7, lr}
 8009a2c:	b082      	sub	sp, #8
 8009a2e:	af00      	add	r7, sp, #0
 8009a30:	4603      	mov	r3, r0
 8009a32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009a34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009a38:	4618      	mov	r0, r3
 8009a3a:	f7ff ff31 	bl	80098a0 <__NVIC_EnableIRQ>
}
 8009a3e:	bf00      	nop
 8009a40:	3708      	adds	r7, #8
 8009a42:	46bd      	mov	sp, r7
 8009a44:	bd80      	pop	{r7, pc}

08009a46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8009a46:	b580      	push	{r7, lr}
 8009a48:	b082      	sub	sp, #8
 8009a4a:	af00      	add	r7, sp, #0
 8009a4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8009a4e:	6878      	ldr	r0, [r7, #4]
 8009a50:	f7ff ffa2 	bl	8009998 <SysTick_Config>
 8009a54:	4603      	mov	r3, r0
}
 8009a56:	4618      	mov	r0, r3
 8009a58:	3708      	adds	r7, #8
 8009a5a:	46bd      	mov	sp, r7
 8009a5c:	bd80      	pop	{r7, pc}
	...

08009a60 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8009a60:	b480      	push	{r7}
 8009a62:	b085      	sub	sp, #20
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d101      	bne.n	8009a72 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8009a6e:	2301      	movs	r3, #1
 8009a70:	e098      	b.n	8009ba4 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	461a      	mov	r2, r3
 8009a78:	4b4d      	ldr	r3, [pc, #308]	; (8009bb0 <HAL_DMA_Init+0x150>)
 8009a7a:	429a      	cmp	r2, r3
 8009a7c:	d80f      	bhi.n	8009a9e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	461a      	mov	r2, r3
 8009a84:	4b4b      	ldr	r3, [pc, #300]	; (8009bb4 <HAL_DMA_Init+0x154>)
 8009a86:	4413      	add	r3, r2
 8009a88:	4a4b      	ldr	r2, [pc, #300]	; (8009bb8 <HAL_DMA_Init+0x158>)
 8009a8a:	fba2 2303 	umull	r2, r3, r2, r3
 8009a8e:	091b      	lsrs	r3, r3, #4
 8009a90:	009a      	lsls	r2, r3, #2
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	4a48      	ldr	r2, [pc, #288]	; (8009bbc <HAL_DMA_Init+0x15c>)
 8009a9a:	641a      	str	r2, [r3, #64]	; 0x40
 8009a9c:	e00e      	b.n	8009abc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	461a      	mov	r2, r3
 8009aa4:	4b46      	ldr	r3, [pc, #280]	; (8009bc0 <HAL_DMA_Init+0x160>)
 8009aa6:	4413      	add	r3, r2
 8009aa8:	4a43      	ldr	r2, [pc, #268]	; (8009bb8 <HAL_DMA_Init+0x158>)
 8009aaa:	fba2 2303 	umull	r2, r3, r2, r3
 8009aae:	091b      	lsrs	r3, r3, #4
 8009ab0:	009a      	lsls	r2, r3, #2
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	4a42      	ldr	r2, [pc, #264]	; (8009bc4 <HAL_DMA_Init+0x164>)
 8009aba:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	2202      	movs	r2, #2
 8009ac0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8009ad2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ad6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8009ae0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	691b      	ldr	r3, [r3, #16]
 8009ae6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009aec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	699b      	ldr	r3, [r3, #24]
 8009af2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009af8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	6a1b      	ldr	r3, [r3, #32]
 8009afe:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8009b00:	68fa      	ldr	r2, [r7, #12]
 8009b02:	4313      	orrs	r3, r2
 8009b04:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	68fa      	ldr	r2, [r7, #12]
 8009b0c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	689b      	ldr	r3, [r3, #8]
 8009b12:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009b16:	d039      	beq.n	8009b8c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b1c:	4a27      	ldr	r2, [pc, #156]	; (8009bbc <HAL_DMA_Init+0x15c>)
 8009b1e:	4293      	cmp	r3, r2
 8009b20:	d11a      	bne.n	8009b58 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8009b22:	4b29      	ldr	r3, [pc, #164]	; (8009bc8 <HAL_DMA_Init+0x168>)
 8009b24:	681a      	ldr	r2, [r3, #0]
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b2a:	f003 031c 	and.w	r3, r3, #28
 8009b2e:	210f      	movs	r1, #15
 8009b30:	fa01 f303 	lsl.w	r3, r1, r3
 8009b34:	43db      	mvns	r3, r3
 8009b36:	4924      	ldr	r1, [pc, #144]	; (8009bc8 <HAL_DMA_Init+0x168>)
 8009b38:	4013      	ands	r3, r2
 8009b3a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8009b3c:	4b22      	ldr	r3, [pc, #136]	; (8009bc8 <HAL_DMA_Init+0x168>)
 8009b3e:	681a      	ldr	r2, [r3, #0]
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	6859      	ldr	r1, [r3, #4]
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b48:	f003 031c 	and.w	r3, r3, #28
 8009b4c:	fa01 f303 	lsl.w	r3, r1, r3
 8009b50:	491d      	ldr	r1, [pc, #116]	; (8009bc8 <HAL_DMA_Init+0x168>)
 8009b52:	4313      	orrs	r3, r2
 8009b54:	600b      	str	r3, [r1, #0]
 8009b56:	e019      	b.n	8009b8c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8009b58:	4b1c      	ldr	r3, [pc, #112]	; (8009bcc <HAL_DMA_Init+0x16c>)
 8009b5a:	681a      	ldr	r2, [r3, #0]
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b60:	f003 031c 	and.w	r3, r3, #28
 8009b64:	210f      	movs	r1, #15
 8009b66:	fa01 f303 	lsl.w	r3, r1, r3
 8009b6a:	43db      	mvns	r3, r3
 8009b6c:	4917      	ldr	r1, [pc, #92]	; (8009bcc <HAL_DMA_Init+0x16c>)
 8009b6e:	4013      	ands	r3, r2
 8009b70:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8009b72:	4b16      	ldr	r3, [pc, #88]	; (8009bcc <HAL_DMA_Init+0x16c>)
 8009b74:	681a      	ldr	r2, [r3, #0]
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	6859      	ldr	r1, [r3, #4]
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b7e:	f003 031c 	and.w	r3, r3, #28
 8009b82:	fa01 f303 	lsl.w	r3, r1, r3
 8009b86:	4911      	ldr	r1, [pc, #68]	; (8009bcc <HAL_DMA_Init+0x16c>)
 8009b88:	4313      	orrs	r3, r2
 8009b8a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	2200      	movs	r2, #0
 8009b90:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	2201      	movs	r2, #1
 8009b96:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	2200      	movs	r2, #0
 8009b9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8009ba2:	2300      	movs	r3, #0
}
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	3714      	adds	r7, #20
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bae:	4770      	bx	lr
 8009bb0:	40020407 	.word	0x40020407
 8009bb4:	bffdfff8 	.word	0xbffdfff8
 8009bb8:	cccccccd 	.word	0xcccccccd
 8009bbc:	40020000 	.word	0x40020000
 8009bc0:	bffdfbf8 	.word	0xbffdfbf8
 8009bc4:	40020400 	.word	0x40020400
 8009bc8:	400200a8 	.word	0x400200a8
 8009bcc:	400204a8 	.word	0x400204a8

08009bd0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009bd0:	b580      	push	{r7, lr}
 8009bd2:	b086      	sub	sp, #24
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	60f8      	str	r0, [r7, #12]
 8009bd8:	60b9      	str	r1, [r7, #8]
 8009bda:	607a      	str	r2, [r7, #4]
 8009bdc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009bde:	2300      	movs	r3, #0
 8009be0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009be8:	2b01      	cmp	r3, #1
 8009bea:	d101      	bne.n	8009bf0 <HAL_DMA_Start_IT+0x20>
 8009bec:	2302      	movs	r3, #2
 8009bee:	e04b      	b.n	8009c88 <HAL_DMA_Start_IT+0xb8>
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	2201      	movs	r2, #1
 8009bf4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8009bfe:	b2db      	uxtb	r3, r3
 8009c00:	2b01      	cmp	r3, #1
 8009c02:	d13a      	bne.n	8009c7a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	2202      	movs	r2, #2
 8009c08:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	2200      	movs	r2, #0
 8009c10:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	681a      	ldr	r2, [r3, #0]
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	f022 0201 	bic.w	r2, r2, #1
 8009c20:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8009c22:	683b      	ldr	r3, [r7, #0]
 8009c24:	687a      	ldr	r2, [r7, #4]
 8009c26:	68b9      	ldr	r1, [r7, #8]
 8009c28:	68f8      	ldr	r0, [r7, #12]
 8009c2a:	f000 f91e 	bl	8009e6a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d008      	beq.n	8009c48 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	681a      	ldr	r2, [r3, #0]
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	f042 020e 	orr.w	r2, r2, #14
 8009c44:	601a      	str	r2, [r3, #0]
 8009c46:	e00f      	b.n	8009c68 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	681a      	ldr	r2, [r3, #0]
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	f022 0204 	bic.w	r2, r2, #4
 8009c56:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	681a      	ldr	r2, [r3, #0]
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	f042 020a 	orr.w	r2, r2, #10
 8009c66:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	681a      	ldr	r2, [r3, #0]
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	f042 0201 	orr.w	r2, r2, #1
 8009c76:	601a      	str	r2, [r3, #0]
 8009c78:	e005      	b.n	8009c86 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	2200      	movs	r2, #0
 8009c7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8009c82:	2302      	movs	r3, #2
 8009c84:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8009c86:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c88:	4618      	mov	r0, r3
 8009c8a:	3718      	adds	r7, #24
 8009c8c:	46bd      	mov	sp, r7
 8009c8e:	bd80      	pop	{r7, pc}

08009c90 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8009c90:	b480      	push	{r7}
 8009c92:	b085      	sub	sp, #20
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009c98:	2300      	movs	r3, #0
 8009c9a:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8009ca2:	b2db      	uxtb	r3, r3
 8009ca4:	2b02      	cmp	r3, #2
 8009ca6:	d008      	beq.n	8009cba <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	2204      	movs	r2, #4
 8009cac:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	2200      	movs	r2, #0
 8009cb2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8009cb6:	2301      	movs	r3, #1
 8009cb8:	e022      	b.n	8009d00 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	681a      	ldr	r2, [r3, #0]
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	f022 020e 	bic.w	r2, r2, #14
 8009cc8:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	681a      	ldr	r2, [r3, #0]
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	f022 0201 	bic.w	r2, r2, #1
 8009cd8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009cde:	f003 021c 	and.w	r2, r3, #28
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ce6:	2101      	movs	r1, #1
 8009ce8:	fa01 f202 	lsl.w	r2, r1, r2
 8009cec:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	2201      	movs	r2, #1
 8009cf2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	2200      	movs	r2, #0
 8009cfa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8009cfe:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8009d00:	4618      	mov	r0, r3
 8009d02:	3714      	adds	r7, #20
 8009d04:	46bd      	mov	sp, r7
 8009d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d0a:	4770      	bx	lr

08009d0c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8009d0c:	b580      	push	{r7, lr}
 8009d0e:	b084      	sub	sp, #16
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d28:	f003 031c 	and.w	r3, r3, #28
 8009d2c:	2204      	movs	r2, #4
 8009d2e:	409a      	lsls	r2, r3
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	4013      	ands	r3, r2
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d026      	beq.n	8009d86 <HAL_DMA_IRQHandler+0x7a>
 8009d38:	68bb      	ldr	r3, [r7, #8]
 8009d3a:	f003 0304 	and.w	r3, r3, #4
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d021      	beq.n	8009d86 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	f003 0320 	and.w	r3, r3, #32
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d107      	bne.n	8009d60 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	681a      	ldr	r2, [r3, #0]
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	f022 0204 	bic.w	r2, r2, #4
 8009d5e:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d64:	f003 021c 	and.w	r2, r3, #28
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d6c:	2104      	movs	r1, #4
 8009d6e:	fa01 f202 	lsl.w	r2, r1, r2
 8009d72:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d071      	beq.n	8009e60 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d80:	6878      	ldr	r0, [r7, #4]
 8009d82:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8009d84:	e06c      	b.n	8009e60 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d8a:	f003 031c 	and.w	r3, r3, #28
 8009d8e:	2202      	movs	r2, #2
 8009d90:	409a      	lsls	r2, r3
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	4013      	ands	r3, r2
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d02e      	beq.n	8009df8 <HAL_DMA_IRQHandler+0xec>
 8009d9a:	68bb      	ldr	r3, [r7, #8]
 8009d9c:	f003 0302 	and.w	r3, r3, #2
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d029      	beq.n	8009df8 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	f003 0320 	and.w	r3, r3, #32
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d10b      	bne.n	8009dca <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	681a      	ldr	r2, [r3, #0]
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	f022 020a 	bic.w	r2, r2, #10
 8009dc0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	2201      	movs	r2, #1
 8009dc6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009dce:	f003 021c 	and.w	r2, r3, #28
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dd6:	2102      	movs	r1, #2
 8009dd8:	fa01 f202 	lsl.w	r2, r1, r2
 8009ddc:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	2200      	movs	r2, #0
 8009de2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d038      	beq.n	8009e60 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009df2:	6878      	ldr	r0, [r7, #4]
 8009df4:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8009df6:	e033      	b.n	8009e60 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009dfc:	f003 031c 	and.w	r3, r3, #28
 8009e00:	2208      	movs	r2, #8
 8009e02:	409a      	lsls	r2, r3
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	4013      	ands	r3, r2
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d02a      	beq.n	8009e62 <HAL_DMA_IRQHandler+0x156>
 8009e0c:	68bb      	ldr	r3, [r7, #8]
 8009e0e:	f003 0308 	and.w	r3, r3, #8
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d025      	beq.n	8009e62 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	681a      	ldr	r2, [r3, #0]
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	f022 020e 	bic.w	r2, r2, #14
 8009e24:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e2a:	f003 021c 	and.w	r2, r3, #28
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e32:	2101      	movs	r1, #1
 8009e34:	fa01 f202 	lsl.w	r2, r1, r2
 8009e38:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	2201      	movs	r2, #1
 8009e3e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	2201      	movs	r2, #1
 8009e44:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	2200      	movs	r2, #0
 8009e4c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d004      	beq.n	8009e62 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e5c:	6878      	ldr	r0, [r7, #4]
 8009e5e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8009e60:	bf00      	nop
 8009e62:	bf00      	nop
}
 8009e64:	3710      	adds	r7, #16
 8009e66:	46bd      	mov	sp, r7
 8009e68:	bd80      	pop	{r7, pc}

08009e6a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009e6a:	b480      	push	{r7}
 8009e6c:	b085      	sub	sp, #20
 8009e6e:	af00      	add	r7, sp, #0
 8009e70:	60f8      	str	r0, [r7, #12]
 8009e72:	60b9      	str	r1, [r7, #8]
 8009e74:	607a      	str	r2, [r7, #4]
 8009e76:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e7c:	f003 021c 	and.w	r2, r3, #28
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e84:	2101      	movs	r1, #1
 8009e86:	fa01 f202 	lsl.w	r2, r1, r2
 8009e8a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	683a      	ldr	r2, [r7, #0]
 8009e92:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	689b      	ldr	r3, [r3, #8]
 8009e98:	2b10      	cmp	r3, #16
 8009e9a:	d108      	bne.n	8009eae <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	687a      	ldr	r2, [r7, #4]
 8009ea2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	68ba      	ldr	r2, [r7, #8]
 8009eaa:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8009eac:	e007      	b.n	8009ebe <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	68ba      	ldr	r2, [r7, #8]
 8009eb4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	687a      	ldr	r2, [r7, #4]
 8009ebc:	60da      	str	r2, [r3, #12]
}
 8009ebe:	bf00      	nop
 8009ec0:	3714      	adds	r7, #20
 8009ec2:	46bd      	mov	sp, r7
 8009ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec8:	4770      	bx	lr
	...

08009ecc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009ecc:	b480      	push	{r7}
 8009ece:	b087      	sub	sp, #28
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	6078      	str	r0, [r7, #4]
 8009ed4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8009ed6:	2300      	movs	r3, #0
 8009ed8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009eda:	e154      	b.n	800a186 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8009edc:	683b      	ldr	r3, [r7, #0]
 8009ede:	681a      	ldr	r2, [r3, #0]
 8009ee0:	2101      	movs	r1, #1
 8009ee2:	697b      	ldr	r3, [r7, #20]
 8009ee4:	fa01 f303 	lsl.w	r3, r1, r3
 8009ee8:	4013      	ands	r3, r2
 8009eea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	f000 8146 	beq.w	800a180 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8009ef4:	683b      	ldr	r3, [r7, #0]
 8009ef6:	685b      	ldr	r3, [r3, #4]
 8009ef8:	2b01      	cmp	r3, #1
 8009efa:	d00b      	beq.n	8009f14 <HAL_GPIO_Init+0x48>
 8009efc:	683b      	ldr	r3, [r7, #0]
 8009efe:	685b      	ldr	r3, [r3, #4]
 8009f00:	2b02      	cmp	r3, #2
 8009f02:	d007      	beq.n	8009f14 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009f04:	683b      	ldr	r3, [r7, #0]
 8009f06:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8009f08:	2b11      	cmp	r3, #17
 8009f0a:	d003      	beq.n	8009f14 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009f0c:	683b      	ldr	r3, [r7, #0]
 8009f0e:	685b      	ldr	r3, [r3, #4]
 8009f10:	2b12      	cmp	r3, #18
 8009f12:	d130      	bne.n	8009f76 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	689b      	ldr	r3, [r3, #8]
 8009f18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8009f1a:	697b      	ldr	r3, [r7, #20]
 8009f1c:	005b      	lsls	r3, r3, #1
 8009f1e:	2203      	movs	r2, #3
 8009f20:	fa02 f303 	lsl.w	r3, r2, r3
 8009f24:	43db      	mvns	r3, r3
 8009f26:	693a      	ldr	r2, [r7, #16]
 8009f28:	4013      	ands	r3, r2
 8009f2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8009f2c:	683b      	ldr	r3, [r7, #0]
 8009f2e:	68da      	ldr	r2, [r3, #12]
 8009f30:	697b      	ldr	r3, [r7, #20]
 8009f32:	005b      	lsls	r3, r3, #1
 8009f34:	fa02 f303 	lsl.w	r3, r2, r3
 8009f38:	693a      	ldr	r2, [r7, #16]
 8009f3a:	4313      	orrs	r3, r2
 8009f3c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	693a      	ldr	r2, [r7, #16]
 8009f42:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	685b      	ldr	r3, [r3, #4]
 8009f48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8009f4a:	2201      	movs	r2, #1
 8009f4c:	697b      	ldr	r3, [r7, #20]
 8009f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8009f52:	43db      	mvns	r3, r3
 8009f54:	693a      	ldr	r2, [r7, #16]
 8009f56:	4013      	ands	r3, r2
 8009f58:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8009f5a:	683b      	ldr	r3, [r7, #0]
 8009f5c:	685b      	ldr	r3, [r3, #4]
 8009f5e:	091b      	lsrs	r3, r3, #4
 8009f60:	f003 0201 	and.w	r2, r3, #1
 8009f64:	697b      	ldr	r3, [r7, #20]
 8009f66:	fa02 f303 	lsl.w	r3, r2, r3
 8009f6a:	693a      	ldr	r2, [r7, #16]
 8009f6c:	4313      	orrs	r3, r2
 8009f6e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	693a      	ldr	r2, [r7, #16]
 8009f74:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	68db      	ldr	r3, [r3, #12]
 8009f7a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8009f7c:	697b      	ldr	r3, [r7, #20]
 8009f7e:	005b      	lsls	r3, r3, #1
 8009f80:	2203      	movs	r2, #3
 8009f82:	fa02 f303 	lsl.w	r3, r2, r3
 8009f86:	43db      	mvns	r3, r3
 8009f88:	693a      	ldr	r2, [r7, #16]
 8009f8a:	4013      	ands	r3, r2
 8009f8c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8009f8e:	683b      	ldr	r3, [r7, #0]
 8009f90:	689a      	ldr	r2, [r3, #8]
 8009f92:	697b      	ldr	r3, [r7, #20]
 8009f94:	005b      	lsls	r3, r3, #1
 8009f96:	fa02 f303 	lsl.w	r3, r2, r3
 8009f9a:	693a      	ldr	r2, [r7, #16]
 8009f9c:	4313      	orrs	r3, r2
 8009f9e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	693a      	ldr	r2, [r7, #16]
 8009fa4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009fa6:	683b      	ldr	r3, [r7, #0]
 8009fa8:	685b      	ldr	r3, [r3, #4]
 8009faa:	2b02      	cmp	r3, #2
 8009fac:	d003      	beq.n	8009fb6 <HAL_GPIO_Init+0xea>
 8009fae:	683b      	ldr	r3, [r7, #0]
 8009fb0:	685b      	ldr	r3, [r3, #4]
 8009fb2:	2b12      	cmp	r3, #18
 8009fb4:	d123      	bne.n	8009ffe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8009fb6:	697b      	ldr	r3, [r7, #20]
 8009fb8:	08da      	lsrs	r2, r3, #3
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	3208      	adds	r2, #8
 8009fbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fc2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8009fc4:	697b      	ldr	r3, [r7, #20]
 8009fc6:	f003 0307 	and.w	r3, r3, #7
 8009fca:	009b      	lsls	r3, r3, #2
 8009fcc:	220f      	movs	r2, #15
 8009fce:	fa02 f303 	lsl.w	r3, r2, r3
 8009fd2:	43db      	mvns	r3, r3
 8009fd4:	693a      	ldr	r2, [r7, #16]
 8009fd6:	4013      	ands	r3, r2
 8009fd8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8009fda:	683b      	ldr	r3, [r7, #0]
 8009fdc:	691a      	ldr	r2, [r3, #16]
 8009fde:	697b      	ldr	r3, [r7, #20]
 8009fe0:	f003 0307 	and.w	r3, r3, #7
 8009fe4:	009b      	lsls	r3, r3, #2
 8009fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8009fea:	693a      	ldr	r2, [r7, #16]
 8009fec:	4313      	orrs	r3, r2
 8009fee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8009ff0:	697b      	ldr	r3, [r7, #20]
 8009ff2:	08da      	lsrs	r2, r3, #3
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	3208      	adds	r2, #8
 8009ff8:	6939      	ldr	r1, [r7, #16]
 8009ffa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800a004:	697b      	ldr	r3, [r7, #20]
 800a006:	005b      	lsls	r3, r3, #1
 800a008:	2203      	movs	r2, #3
 800a00a:	fa02 f303 	lsl.w	r3, r2, r3
 800a00e:	43db      	mvns	r3, r3
 800a010:	693a      	ldr	r2, [r7, #16]
 800a012:	4013      	ands	r3, r2
 800a014:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800a016:	683b      	ldr	r3, [r7, #0]
 800a018:	685b      	ldr	r3, [r3, #4]
 800a01a:	f003 0203 	and.w	r2, r3, #3
 800a01e:	697b      	ldr	r3, [r7, #20]
 800a020:	005b      	lsls	r3, r3, #1
 800a022:	fa02 f303 	lsl.w	r3, r2, r3
 800a026:	693a      	ldr	r2, [r7, #16]
 800a028:	4313      	orrs	r3, r2
 800a02a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	693a      	ldr	r2, [r7, #16]
 800a030:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800a032:	683b      	ldr	r3, [r7, #0]
 800a034:	685b      	ldr	r3, [r3, #4]
 800a036:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	f000 80a0 	beq.w	800a180 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a040:	4b58      	ldr	r3, [pc, #352]	; (800a1a4 <HAL_GPIO_Init+0x2d8>)
 800a042:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a044:	4a57      	ldr	r2, [pc, #348]	; (800a1a4 <HAL_GPIO_Init+0x2d8>)
 800a046:	f043 0301 	orr.w	r3, r3, #1
 800a04a:	6613      	str	r3, [r2, #96]	; 0x60
 800a04c:	4b55      	ldr	r3, [pc, #340]	; (800a1a4 <HAL_GPIO_Init+0x2d8>)
 800a04e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a050:	f003 0301 	and.w	r3, r3, #1
 800a054:	60bb      	str	r3, [r7, #8]
 800a056:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800a058:	4a53      	ldr	r2, [pc, #332]	; (800a1a8 <HAL_GPIO_Init+0x2dc>)
 800a05a:	697b      	ldr	r3, [r7, #20]
 800a05c:	089b      	lsrs	r3, r3, #2
 800a05e:	3302      	adds	r3, #2
 800a060:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a064:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800a066:	697b      	ldr	r3, [r7, #20]
 800a068:	f003 0303 	and.w	r3, r3, #3
 800a06c:	009b      	lsls	r3, r3, #2
 800a06e:	220f      	movs	r2, #15
 800a070:	fa02 f303 	lsl.w	r3, r2, r3
 800a074:	43db      	mvns	r3, r3
 800a076:	693a      	ldr	r2, [r7, #16]
 800a078:	4013      	ands	r3, r2
 800a07a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800a082:	d019      	beq.n	800a0b8 <HAL_GPIO_Init+0x1ec>
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	4a49      	ldr	r2, [pc, #292]	; (800a1ac <HAL_GPIO_Init+0x2e0>)
 800a088:	4293      	cmp	r3, r2
 800a08a:	d013      	beq.n	800a0b4 <HAL_GPIO_Init+0x1e8>
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	4a48      	ldr	r2, [pc, #288]	; (800a1b0 <HAL_GPIO_Init+0x2e4>)
 800a090:	4293      	cmp	r3, r2
 800a092:	d00d      	beq.n	800a0b0 <HAL_GPIO_Init+0x1e4>
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	4a47      	ldr	r2, [pc, #284]	; (800a1b4 <HAL_GPIO_Init+0x2e8>)
 800a098:	4293      	cmp	r3, r2
 800a09a:	d007      	beq.n	800a0ac <HAL_GPIO_Init+0x1e0>
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	4a46      	ldr	r2, [pc, #280]	; (800a1b8 <HAL_GPIO_Init+0x2ec>)
 800a0a0:	4293      	cmp	r3, r2
 800a0a2:	d101      	bne.n	800a0a8 <HAL_GPIO_Init+0x1dc>
 800a0a4:	2304      	movs	r3, #4
 800a0a6:	e008      	b.n	800a0ba <HAL_GPIO_Init+0x1ee>
 800a0a8:	2307      	movs	r3, #7
 800a0aa:	e006      	b.n	800a0ba <HAL_GPIO_Init+0x1ee>
 800a0ac:	2303      	movs	r3, #3
 800a0ae:	e004      	b.n	800a0ba <HAL_GPIO_Init+0x1ee>
 800a0b0:	2302      	movs	r3, #2
 800a0b2:	e002      	b.n	800a0ba <HAL_GPIO_Init+0x1ee>
 800a0b4:	2301      	movs	r3, #1
 800a0b6:	e000      	b.n	800a0ba <HAL_GPIO_Init+0x1ee>
 800a0b8:	2300      	movs	r3, #0
 800a0ba:	697a      	ldr	r2, [r7, #20]
 800a0bc:	f002 0203 	and.w	r2, r2, #3
 800a0c0:	0092      	lsls	r2, r2, #2
 800a0c2:	4093      	lsls	r3, r2
 800a0c4:	693a      	ldr	r2, [r7, #16]
 800a0c6:	4313      	orrs	r3, r2
 800a0c8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800a0ca:	4937      	ldr	r1, [pc, #220]	; (800a1a8 <HAL_GPIO_Init+0x2dc>)
 800a0cc:	697b      	ldr	r3, [r7, #20]
 800a0ce:	089b      	lsrs	r3, r3, #2
 800a0d0:	3302      	adds	r3, #2
 800a0d2:	693a      	ldr	r2, [r7, #16]
 800a0d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800a0d8:	4b38      	ldr	r3, [pc, #224]	; (800a1bc <HAL_GPIO_Init+0x2f0>)
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	43db      	mvns	r3, r3
 800a0e2:	693a      	ldr	r2, [r7, #16]
 800a0e4:	4013      	ands	r3, r2
 800a0e6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800a0e8:	683b      	ldr	r3, [r7, #0]
 800a0ea:	685b      	ldr	r3, [r3, #4]
 800a0ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d003      	beq.n	800a0fc <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800a0f4:	693a      	ldr	r2, [r7, #16]
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	4313      	orrs	r3, r2
 800a0fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800a0fc:	4a2f      	ldr	r2, [pc, #188]	; (800a1bc <HAL_GPIO_Init+0x2f0>)
 800a0fe:	693b      	ldr	r3, [r7, #16]
 800a100:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800a102:	4b2e      	ldr	r3, [pc, #184]	; (800a1bc <HAL_GPIO_Init+0x2f0>)
 800a104:	685b      	ldr	r3, [r3, #4]
 800a106:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	43db      	mvns	r3, r3
 800a10c:	693a      	ldr	r2, [r7, #16]
 800a10e:	4013      	ands	r3, r2
 800a110:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800a112:	683b      	ldr	r3, [r7, #0]
 800a114:	685b      	ldr	r3, [r3, #4]
 800a116:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d003      	beq.n	800a126 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800a11e:	693a      	ldr	r2, [r7, #16]
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	4313      	orrs	r3, r2
 800a124:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800a126:	4a25      	ldr	r2, [pc, #148]	; (800a1bc <HAL_GPIO_Init+0x2f0>)
 800a128:	693b      	ldr	r3, [r7, #16]
 800a12a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800a12c:	4b23      	ldr	r3, [pc, #140]	; (800a1bc <HAL_GPIO_Init+0x2f0>)
 800a12e:	689b      	ldr	r3, [r3, #8]
 800a130:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	43db      	mvns	r3, r3
 800a136:	693a      	ldr	r2, [r7, #16]
 800a138:	4013      	ands	r3, r2
 800a13a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800a13c:	683b      	ldr	r3, [r7, #0]
 800a13e:	685b      	ldr	r3, [r3, #4]
 800a140:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a144:	2b00      	cmp	r3, #0
 800a146:	d003      	beq.n	800a150 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800a148:	693a      	ldr	r2, [r7, #16]
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	4313      	orrs	r3, r2
 800a14e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800a150:	4a1a      	ldr	r2, [pc, #104]	; (800a1bc <HAL_GPIO_Init+0x2f0>)
 800a152:	693b      	ldr	r3, [r7, #16]
 800a154:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800a156:	4b19      	ldr	r3, [pc, #100]	; (800a1bc <HAL_GPIO_Init+0x2f0>)
 800a158:	68db      	ldr	r3, [r3, #12]
 800a15a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	43db      	mvns	r3, r3
 800a160:	693a      	ldr	r2, [r7, #16]
 800a162:	4013      	ands	r3, r2
 800a164:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800a166:	683b      	ldr	r3, [r7, #0]
 800a168:	685b      	ldr	r3, [r3, #4]
 800a16a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d003      	beq.n	800a17a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800a172:	693a      	ldr	r2, [r7, #16]
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	4313      	orrs	r3, r2
 800a178:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800a17a:	4a10      	ldr	r2, [pc, #64]	; (800a1bc <HAL_GPIO_Init+0x2f0>)
 800a17c:	693b      	ldr	r3, [r7, #16]
 800a17e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800a180:	697b      	ldr	r3, [r7, #20]
 800a182:	3301      	adds	r3, #1
 800a184:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800a186:	683b      	ldr	r3, [r7, #0]
 800a188:	681a      	ldr	r2, [r3, #0]
 800a18a:	697b      	ldr	r3, [r7, #20]
 800a18c:	fa22 f303 	lsr.w	r3, r2, r3
 800a190:	2b00      	cmp	r3, #0
 800a192:	f47f aea3 	bne.w	8009edc <HAL_GPIO_Init+0x10>
  }
}
 800a196:	bf00      	nop
 800a198:	371c      	adds	r7, #28
 800a19a:	46bd      	mov	sp, r7
 800a19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a0:	4770      	bx	lr
 800a1a2:	bf00      	nop
 800a1a4:	40021000 	.word	0x40021000
 800a1a8:	40010000 	.word	0x40010000
 800a1ac:	48000400 	.word	0x48000400
 800a1b0:	48000800 	.word	0x48000800
 800a1b4:	48000c00 	.word	0x48000c00
 800a1b8:	48001000 	.word	0x48001000
 800a1bc:	40010400 	.word	0x40010400

0800a1c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800a1c0:	b480      	push	{r7}
 800a1c2:	b085      	sub	sp, #20
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	6078      	str	r0, [r7, #4]
 800a1c8:	460b      	mov	r3, r1
 800a1ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	691a      	ldr	r2, [r3, #16]
 800a1d0:	887b      	ldrh	r3, [r7, #2]
 800a1d2:	4013      	ands	r3, r2
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d002      	beq.n	800a1de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800a1d8:	2301      	movs	r3, #1
 800a1da:	73fb      	strb	r3, [r7, #15]
 800a1dc:	e001      	b.n	800a1e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800a1de:	2300      	movs	r3, #0
 800a1e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800a1e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1e4:	4618      	mov	r0, r3
 800a1e6:	3714      	adds	r7, #20
 800a1e8:	46bd      	mov	sp, r7
 800a1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ee:	4770      	bx	lr

0800a1f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a1f0:	b480      	push	{r7}
 800a1f2:	b083      	sub	sp, #12
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	6078      	str	r0, [r7, #4]
 800a1f8:	460b      	mov	r3, r1
 800a1fa:	807b      	strh	r3, [r7, #2]
 800a1fc:	4613      	mov	r3, r2
 800a1fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800a200:	787b      	ldrb	r3, [r7, #1]
 800a202:	2b00      	cmp	r3, #0
 800a204:	d003      	beq.n	800a20e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800a206:	887a      	ldrh	r2, [r7, #2]
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800a20c:	e002      	b.n	800a214 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800a20e:	887a      	ldrh	r2, [r7, #2]
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	629a      	str	r2, [r3, #40]	; 0x28
}
 800a214:	bf00      	nop
 800a216:	370c      	adds	r7, #12
 800a218:	46bd      	mov	sp, r7
 800a21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a21e:	4770      	bx	lr

0800a220 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a220:	b580      	push	{r7, lr}
 800a222:	b082      	sub	sp, #8
 800a224:	af00      	add	r7, sp, #0
 800a226:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d101      	bne.n	800a232 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a22e:	2301      	movs	r3, #1
 800a230:	e081      	b.n	800a336 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a238:	b2db      	uxtb	r3, r3
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d106      	bne.n	800a24c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	2200      	movs	r2, #0
 800a242:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800a246:	6878      	ldr	r0, [r7, #4]
 800a248:	f7f7 fe1e 	bl	8001e88 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	2224      	movs	r2, #36	; 0x24
 800a250:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	681a      	ldr	r2, [r3, #0]
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	f022 0201 	bic.w	r2, r2, #1
 800a262:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	685a      	ldr	r2, [r3, #4]
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800a270:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	689a      	ldr	r2, [r3, #8]
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a280:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	68db      	ldr	r3, [r3, #12]
 800a286:	2b01      	cmp	r3, #1
 800a288:	d107      	bne.n	800a29a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	689a      	ldr	r2, [r3, #8]
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a296:	609a      	str	r2, [r3, #8]
 800a298:	e006      	b.n	800a2a8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	689a      	ldr	r2, [r3, #8]
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800a2a6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	68db      	ldr	r3, [r3, #12]
 800a2ac:	2b02      	cmp	r3, #2
 800a2ae:	d104      	bne.n	800a2ba <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a2b8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	685b      	ldr	r3, [r3, #4]
 800a2c0:	687a      	ldr	r2, [r7, #4]
 800a2c2:	6812      	ldr	r2, [r2, #0]
 800a2c4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800a2c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a2cc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	68da      	ldr	r2, [r3, #12]
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a2dc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	691a      	ldr	r2, [r3, #16]
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	695b      	ldr	r3, [r3, #20]
 800a2e6:	ea42 0103 	orr.w	r1, r2, r3
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	699b      	ldr	r3, [r3, #24]
 800a2ee:	021a      	lsls	r2, r3, #8
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	430a      	orrs	r2, r1
 800a2f6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	69d9      	ldr	r1, [r3, #28]
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	6a1a      	ldr	r2, [r3, #32]
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	430a      	orrs	r2, r1
 800a306:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	681a      	ldr	r2, [r3, #0]
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	f042 0201 	orr.w	r2, r2, #1
 800a316:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	2200      	movs	r2, #0
 800a31c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	2220      	movs	r2, #32
 800a322:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	2200      	movs	r2, #0
 800a32a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	2200      	movs	r2, #0
 800a330:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800a334:	2300      	movs	r3, #0
}
 800a336:	4618      	mov	r0, r3
 800a338:	3708      	adds	r7, #8
 800a33a:	46bd      	mov	sp, r7
 800a33c:	bd80      	pop	{r7, pc}
	...

0800a340 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a340:	b580      	push	{r7, lr}
 800a342:	b088      	sub	sp, #32
 800a344:	af02      	add	r7, sp, #8
 800a346:	60f8      	str	r0, [r7, #12]
 800a348:	607a      	str	r2, [r7, #4]
 800a34a:	461a      	mov	r2, r3
 800a34c:	460b      	mov	r3, r1
 800a34e:	817b      	strh	r3, [r7, #10]
 800a350:	4613      	mov	r3, r2
 800a352:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a35a:	b2db      	uxtb	r3, r3
 800a35c:	2b20      	cmp	r3, #32
 800a35e:	f040 80da 	bne.w	800a516 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a368:	2b01      	cmp	r3, #1
 800a36a:	d101      	bne.n	800a370 <HAL_I2C_Master_Transmit+0x30>
 800a36c:	2302      	movs	r3, #2
 800a36e:	e0d3      	b.n	800a518 <HAL_I2C_Master_Transmit+0x1d8>
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	2201      	movs	r2, #1
 800a374:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800a378:	f7fd fe98 	bl	80080ac <HAL_GetTick>
 800a37c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a37e:	697b      	ldr	r3, [r7, #20]
 800a380:	9300      	str	r3, [sp, #0]
 800a382:	2319      	movs	r3, #25
 800a384:	2201      	movs	r2, #1
 800a386:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a38a:	68f8      	ldr	r0, [r7, #12]
 800a38c:	f000 f8f0 	bl	800a570 <I2C_WaitOnFlagUntilTimeout>
 800a390:	4603      	mov	r3, r0
 800a392:	2b00      	cmp	r3, #0
 800a394:	d001      	beq.n	800a39a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800a396:	2301      	movs	r3, #1
 800a398:	e0be      	b.n	800a518 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	2221      	movs	r2, #33	; 0x21
 800a39e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	2210      	movs	r2, #16
 800a3a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	2200      	movs	r2, #0
 800a3ae:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	687a      	ldr	r2, [r7, #4]
 800a3b4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	893a      	ldrh	r2, [r7, #8]
 800a3ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	2200      	movs	r2, #0
 800a3c0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a3c6:	b29b      	uxth	r3, r3
 800a3c8:	2bff      	cmp	r3, #255	; 0xff
 800a3ca:	d90e      	bls.n	800a3ea <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	22ff      	movs	r2, #255	; 0xff
 800a3d0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a3d6:	b2da      	uxtb	r2, r3
 800a3d8:	8979      	ldrh	r1, [r7, #10]
 800a3da:	4b51      	ldr	r3, [pc, #324]	; (800a520 <HAL_I2C_Master_Transmit+0x1e0>)
 800a3dc:	9300      	str	r3, [sp, #0]
 800a3de:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a3e2:	68f8      	ldr	r0, [r7, #12]
 800a3e4:	f000 f9e6 	bl	800a7b4 <I2C_TransferConfig>
 800a3e8:	e06c      	b.n	800a4c4 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a3ee:	b29a      	uxth	r2, r3
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a3f8:	b2da      	uxtb	r2, r3
 800a3fa:	8979      	ldrh	r1, [r7, #10]
 800a3fc:	4b48      	ldr	r3, [pc, #288]	; (800a520 <HAL_I2C_Master_Transmit+0x1e0>)
 800a3fe:	9300      	str	r3, [sp, #0]
 800a400:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a404:	68f8      	ldr	r0, [r7, #12]
 800a406:	f000 f9d5 	bl	800a7b4 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800a40a:	e05b      	b.n	800a4c4 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a40c:	697a      	ldr	r2, [r7, #20]
 800a40e:	6a39      	ldr	r1, [r7, #32]
 800a410:	68f8      	ldr	r0, [r7, #12]
 800a412:	f000 f8ed 	bl	800a5f0 <I2C_WaitOnTXISFlagUntilTimeout>
 800a416:	4603      	mov	r3, r0
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d001      	beq.n	800a420 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800a41c:	2301      	movs	r3, #1
 800a41e:	e07b      	b.n	800a518 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a424:	781a      	ldrb	r2, [r3, #0]
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a430:	1c5a      	adds	r2, r3, #1
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a43a:	b29b      	uxth	r3, r3
 800a43c:	3b01      	subs	r3, #1
 800a43e:	b29a      	uxth	r2, r3
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a448:	3b01      	subs	r3, #1
 800a44a:	b29a      	uxth	r2, r3
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a454:	b29b      	uxth	r3, r3
 800a456:	2b00      	cmp	r3, #0
 800a458:	d034      	beq.n	800a4c4 <HAL_I2C_Master_Transmit+0x184>
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d130      	bne.n	800a4c4 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800a462:	697b      	ldr	r3, [r7, #20]
 800a464:	9300      	str	r3, [sp, #0]
 800a466:	6a3b      	ldr	r3, [r7, #32]
 800a468:	2200      	movs	r2, #0
 800a46a:	2180      	movs	r1, #128	; 0x80
 800a46c:	68f8      	ldr	r0, [r7, #12]
 800a46e:	f000 f87f 	bl	800a570 <I2C_WaitOnFlagUntilTimeout>
 800a472:	4603      	mov	r3, r0
 800a474:	2b00      	cmp	r3, #0
 800a476:	d001      	beq.n	800a47c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800a478:	2301      	movs	r3, #1
 800a47a:	e04d      	b.n	800a518 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a480:	b29b      	uxth	r3, r3
 800a482:	2bff      	cmp	r3, #255	; 0xff
 800a484:	d90e      	bls.n	800a4a4 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	22ff      	movs	r2, #255	; 0xff
 800a48a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a490:	b2da      	uxtb	r2, r3
 800a492:	8979      	ldrh	r1, [r7, #10]
 800a494:	2300      	movs	r3, #0
 800a496:	9300      	str	r3, [sp, #0]
 800a498:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a49c:	68f8      	ldr	r0, [r7, #12]
 800a49e:	f000 f989 	bl	800a7b4 <I2C_TransferConfig>
 800a4a2:	e00f      	b.n	800a4c4 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a4a8:	b29a      	uxth	r2, r3
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a4b2:	b2da      	uxtb	r2, r3
 800a4b4:	8979      	ldrh	r1, [r7, #10]
 800a4b6:	2300      	movs	r3, #0
 800a4b8:	9300      	str	r3, [sp, #0]
 800a4ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a4be:	68f8      	ldr	r0, [r7, #12]
 800a4c0:	f000 f978 	bl	800a7b4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a4c8:	b29b      	uxth	r3, r3
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d19e      	bne.n	800a40c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a4ce:	697a      	ldr	r2, [r7, #20]
 800a4d0:	6a39      	ldr	r1, [r7, #32]
 800a4d2:	68f8      	ldr	r0, [r7, #12]
 800a4d4:	f000 f8cc 	bl	800a670 <I2C_WaitOnSTOPFlagUntilTimeout>
 800a4d8:	4603      	mov	r3, r0
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d001      	beq.n	800a4e2 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800a4de:	2301      	movs	r3, #1
 800a4e0:	e01a      	b.n	800a518 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	2220      	movs	r2, #32
 800a4e8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	6859      	ldr	r1, [r3, #4]
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	681a      	ldr	r2, [r3, #0]
 800a4f4:	4b0b      	ldr	r3, [pc, #44]	; (800a524 <HAL_I2C_Master_Transmit+0x1e4>)
 800a4f6:	400b      	ands	r3, r1
 800a4f8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	2220      	movs	r2, #32
 800a4fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	2200      	movs	r2, #0
 800a506:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	2200      	movs	r2, #0
 800a50e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a512:	2300      	movs	r3, #0
 800a514:	e000      	b.n	800a518 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800a516:	2302      	movs	r3, #2
  }
}
 800a518:	4618      	mov	r0, r3
 800a51a:	3718      	adds	r7, #24
 800a51c:	46bd      	mov	sp, r7
 800a51e:	bd80      	pop	{r7, pc}
 800a520:	80002000 	.word	0x80002000
 800a524:	fe00e800 	.word	0xfe00e800

0800a528 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800a528:	b480      	push	{r7}
 800a52a:	b083      	sub	sp, #12
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	699b      	ldr	r3, [r3, #24]
 800a536:	f003 0302 	and.w	r3, r3, #2
 800a53a:	2b02      	cmp	r3, #2
 800a53c:	d103      	bne.n	800a546 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	2200      	movs	r2, #0
 800a544:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	699b      	ldr	r3, [r3, #24]
 800a54c:	f003 0301 	and.w	r3, r3, #1
 800a550:	2b01      	cmp	r3, #1
 800a552:	d007      	beq.n	800a564 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	699a      	ldr	r2, [r3, #24]
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	f042 0201 	orr.w	r2, r2, #1
 800a562:	619a      	str	r2, [r3, #24]
  }
}
 800a564:	bf00      	nop
 800a566:	370c      	adds	r7, #12
 800a568:	46bd      	mov	sp, r7
 800a56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a56e:	4770      	bx	lr

0800a570 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800a570:	b580      	push	{r7, lr}
 800a572:	b084      	sub	sp, #16
 800a574:	af00      	add	r7, sp, #0
 800a576:	60f8      	str	r0, [r7, #12]
 800a578:	60b9      	str	r1, [r7, #8]
 800a57a:	603b      	str	r3, [r7, #0]
 800a57c:	4613      	mov	r3, r2
 800a57e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a580:	e022      	b.n	800a5c8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a582:	683b      	ldr	r3, [r7, #0]
 800a584:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a588:	d01e      	beq.n	800a5c8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a58a:	f7fd fd8f 	bl	80080ac <HAL_GetTick>
 800a58e:	4602      	mov	r2, r0
 800a590:	69bb      	ldr	r3, [r7, #24]
 800a592:	1ad3      	subs	r3, r2, r3
 800a594:	683a      	ldr	r2, [r7, #0]
 800a596:	429a      	cmp	r2, r3
 800a598:	d302      	bcc.n	800a5a0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800a59a:	683b      	ldr	r3, [r7, #0]
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d113      	bne.n	800a5c8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a5a4:	f043 0220 	orr.w	r2, r3, #32
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	2220      	movs	r2, #32
 800a5b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	2200      	movs	r2, #0
 800a5b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	2200      	movs	r2, #0
 800a5c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800a5c4:	2301      	movs	r3, #1
 800a5c6:	e00f      	b.n	800a5e8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	699a      	ldr	r2, [r3, #24]
 800a5ce:	68bb      	ldr	r3, [r7, #8]
 800a5d0:	4013      	ands	r3, r2
 800a5d2:	68ba      	ldr	r2, [r7, #8]
 800a5d4:	429a      	cmp	r2, r3
 800a5d6:	bf0c      	ite	eq
 800a5d8:	2301      	moveq	r3, #1
 800a5da:	2300      	movne	r3, #0
 800a5dc:	b2db      	uxtb	r3, r3
 800a5de:	461a      	mov	r2, r3
 800a5e0:	79fb      	ldrb	r3, [r7, #7]
 800a5e2:	429a      	cmp	r2, r3
 800a5e4:	d0cd      	beq.n	800a582 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a5e6:	2300      	movs	r3, #0
}
 800a5e8:	4618      	mov	r0, r3
 800a5ea:	3710      	adds	r7, #16
 800a5ec:	46bd      	mov	sp, r7
 800a5ee:	bd80      	pop	{r7, pc}

0800a5f0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a5f0:	b580      	push	{r7, lr}
 800a5f2:	b084      	sub	sp, #16
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	60f8      	str	r0, [r7, #12]
 800a5f8:	60b9      	str	r1, [r7, #8]
 800a5fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a5fc:	e02c      	b.n	800a658 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800a5fe:	687a      	ldr	r2, [r7, #4]
 800a600:	68b9      	ldr	r1, [r7, #8]
 800a602:	68f8      	ldr	r0, [r7, #12]
 800a604:	f000 f870 	bl	800a6e8 <I2C_IsAcknowledgeFailed>
 800a608:	4603      	mov	r3, r0
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d001      	beq.n	800a612 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a60e:	2301      	movs	r3, #1
 800a610:	e02a      	b.n	800a668 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a612:	68bb      	ldr	r3, [r7, #8]
 800a614:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a618:	d01e      	beq.n	800a658 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a61a:	f7fd fd47 	bl	80080ac <HAL_GetTick>
 800a61e:	4602      	mov	r2, r0
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	1ad3      	subs	r3, r2, r3
 800a624:	68ba      	ldr	r2, [r7, #8]
 800a626:	429a      	cmp	r2, r3
 800a628:	d302      	bcc.n	800a630 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800a62a:	68bb      	ldr	r3, [r7, #8]
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d113      	bne.n	800a658 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a634:	f043 0220 	orr.w	r2, r3, #32
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	2220      	movs	r2, #32
 800a640:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	2200      	movs	r2, #0
 800a648:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	2200      	movs	r2, #0
 800a650:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800a654:	2301      	movs	r3, #1
 800a656:	e007      	b.n	800a668 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	699b      	ldr	r3, [r3, #24]
 800a65e:	f003 0302 	and.w	r3, r3, #2
 800a662:	2b02      	cmp	r3, #2
 800a664:	d1cb      	bne.n	800a5fe <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a666:	2300      	movs	r3, #0
}
 800a668:	4618      	mov	r0, r3
 800a66a:	3710      	adds	r7, #16
 800a66c:	46bd      	mov	sp, r7
 800a66e:	bd80      	pop	{r7, pc}

0800a670 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a670:	b580      	push	{r7, lr}
 800a672:	b084      	sub	sp, #16
 800a674:	af00      	add	r7, sp, #0
 800a676:	60f8      	str	r0, [r7, #12]
 800a678:	60b9      	str	r1, [r7, #8]
 800a67a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a67c:	e028      	b.n	800a6d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800a67e:	687a      	ldr	r2, [r7, #4]
 800a680:	68b9      	ldr	r1, [r7, #8]
 800a682:	68f8      	ldr	r0, [r7, #12]
 800a684:	f000 f830 	bl	800a6e8 <I2C_IsAcknowledgeFailed>
 800a688:	4603      	mov	r3, r0
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d001      	beq.n	800a692 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a68e:	2301      	movs	r3, #1
 800a690:	e026      	b.n	800a6e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a692:	f7fd fd0b 	bl	80080ac <HAL_GetTick>
 800a696:	4602      	mov	r2, r0
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	1ad3      	subs	r3, r2, r3
 800a69c:	68ba      	ldr	r2, [r7, #8]
 800a69e:	429a      	cmp	r2, r3
 800a6a0:	d302      	bcc.n	800a6a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800a6a2:	68bb      	ldr	r3, [r7, #8]
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d113      	bne.n	800a6d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a6ac:	f043 0220 	orr.w	r2, r3, #32
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	2220      	movs	r2, #32
 800a6b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	2200      	movs	r2, #0
 800a6c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	2200      	movs	r2, #0
 800a6c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800a6cc:	2301      	movs	r3, #1
 800a6ce:	e007      	b.n	800a6e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	699b      	ldr	r3, [r3, #24]
 800a6d6:	f003 0320 	and.w	r3, r3, #32
 800a6da:	2b20      	cmp	r3, #32
 800a6dc:	d1cf      	bne.n	800a67e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800a6de:	2300      	movs	r3, #0
}
 800a6e0:	4618      	mov	r0, r3
 800a6e2:	3710      	adds	r7, #16
 800a6e4:	46bd      	mov	sp, r7
 800a6e6:	bd80      	pop	{r7, pc}

0800a6e8 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a6e8:	b580      	push	{r7, lr}
 800a6ea:	b084      	sub	sp, #16
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	60f8      	str	r0, [r7, #12]
 800a6f0:	60b9      	str	r1, [r7, #8]
 800a6f2:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	699b      	ldr	r3, [r3, #24]
 800a6fa:	f003 0310 	and.w	r3, r3, #16
 800a6fe:	2b10      	cmp	r3, #16
 800a700:	d151      	bne.n	800a7a6 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a702:	e022      	b.n	800a74a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800a704:	68bb      	ldr	r3, [r7, #8]
 800a706:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a70a:	d01e      	beq.n	800a74a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a70c:	f7fd fcce 	bl	80080ac <HAL_GetTick>
 800a710:	4602      	mov	r2, r0
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	1ad3      	subs	r3, r2, r3
 800a716:	68ba      	ldr	r2, [r7, #8]
 800a718:	429a      	cmp	r2, r3
 800a71a:	d302      	bcc.n	800a722 <I2C_IsAcknowledgeFailed+0x3a>
 800a71c:	68bb      	ldr	r3, [r7, #8]
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d113      	bne.n	800a74a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a726:	f043 0220 	orr.w	r2, r3, #32
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	2220      	movs	r2, #32
 800a732:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	2200      	movs	r2, #0
 800a73a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	2200      	movs	r2, #0
 800a742:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800a746:	2301      	movs	r3, #1
 800a748:	e02e      	b.n	800a7a8 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	699b      	ldr	r3, [r3, #24]
 800a750:	f003 0320 	and.w	r3, r3, #32
 800a754:	2b20      	cmp	r3, #32
 800a756:	d1d5      	bne.n	800a704 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	2210      	movs	r2, #16
 800a75e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	2220      	movs	r2, #32
 800a766:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800a768:	68f8      	ldr	r0, [r7, #12]
 800a76a:	f7ff fedd 	bl	800a528 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	6859      	ldr	r1, [r3, #4]
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	681a      	ldr	r2, [r3, #0]
 800a778:	4b0d      	ldr	r3, [pc, #52]	; (800a7b0 <I2C_IsAcknowledgeFailed+0xc8>)
 800a77a:	400b      	ands	r3, r1
 800a77c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a782:	f043 0204 	orr.w	r2, r3, #4
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	2220      	movs	r2, #32
 800a78e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	2200      	movs	r2, #0
 800a796:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	2200      	movs	r2, #0
 800a79e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800a7a2:	2301      	movs	r3, #1
 800a7a4:	e000      	b.n	800a7a8 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800a7a6:	2300      	movs	r3, #0
}
 800a7a8:	4618      	mov	r0, r3
 800a7aa:	3710      	adds	r7, #16
 800a7ac:	46bd      	mov	sp, r7
 800a7ae:	bd80      	pop	{r7, pc}
 800a7b0:	fe00e800 	.word	0xfe00e800

0800a7b4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 800a7b4:	b480      	push	{r7}
 800a7b6:	b085      	sub	sp, #20
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	60f8      	str	r0, [r7, #12]
 800a7bc:	607b      	str	r3, [r7, #4]
 800a7be:	460b      	mov	r3, r1
 800a7c0:	817b      	strh	r3, [r7, #10]
 800a7c2:	4613      	mov	r3, r2
 800a7c4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	685a      	ldr	r2, [r3, #4]
 800a7cc:	69bb      	ldr	r3, [r7, #24]
 800a7ce:	0d5b      	lsrs	r3, r3, #21
 800a7d0:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800a7d4:	4b0d      	ldr	r3, [pc, #52]	; (800a80c <I2C_TransferConfig+0x58>)
 800a7d6:	430b      	orrs	r3, r1
 800a7d8:	43db      	mvns	r3, r3
 800a7da:	ea02 0103 	and.w	r1, r2, r3
 800a7de:	897b      	ldrh	r3, [r7, #10]
 800a7e0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800a7e4:	7a7b      	ldrb	r3, [r7, #9]
 800a7e6:	041b      	lsls	r3, r3, #16
 800a7e8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a7ec:	431a      	orrs	r2, r3
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	431a      	orrs	r2, r3
 800a7f2:	69bb      	ldr	r3, [r7, #24]
 800a7f4:	431a      	orrs	r2, r3
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	430a      	orrs	r2, r1
 800a7fc:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800a7fe:	bf00      	nop
 800a800:	3714      	adds	r7, #20
 800a802:	46bd      	mov	sp, r7
 800a804:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a808:	4770      	bx	lr
 800a80a:	bf00      	nop
 800a80c:	03ff63ff 	.word	0x03ff63ff

0800a810 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800a810:	b480      	push	{r7}
 800a812:	b083      	sub	sp, #12
 800a814:	af00      	add	r7, sp, #0
 800a816:	6078      	str	r0, [r7, #4]
 800a818:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a820:	b2db      	uxtb	r3, r3
 800a822:	2b20      	cmp	r3, #32
 800a824:	d138      	bne.n	800a898 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a82c:	2b01      	cmp	r3, #1
 800a82e:	d101      	bne.n	800a834 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800a830:	2302      	movs	r3, #2
 800a832:	e032      	b.n	800a89a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	2201      	movs	r2, #1
 800a838:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	2224      	movs	r2, #36	; 0x24
 800a840:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	681a      	ldr	r2, [r3, #0]
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	f022 0201 	bic.w	r2, r2, #1
 800a852:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	681a      	ldr	r2, [r3, #0]
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a862:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	6819      	ldr	r1, [r3, #0]
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	683a      	ldr	r2, [r7, #0]
 800a870:	430a      	orrs	r2, r1
 800a872:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	681a      	ldr	r2, [r3, #0]
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	f042 0201 	orr.w	r2, r2, #1
 800a882:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	2220      	movs	r2, #32
 800a888:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	2200      	movs	r2, #0
 800a890:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a894:	2300      	movs	r3, #0
 800a896:	e000      	b.n	800a89a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a898:	2302      	movs	r3, #2
  }
}
 800a89a:	4618      	mov	r0, r3
 800a89c:	370c      	adds	r7, #12
 800a89e:	46bd      	mov	sp, r7
 800a8a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a4:	4770      	bx	lr

0800a8a6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800a8a6:	b480      	push	{r7}
 800a8a8:	b085      	sub	sp, #20
 800a8aa:	af00      	add	r7, sp, #0
 800a8ac:	6078      	str	r0, [r7, #4]
 800a8ae:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a8b6:	b2db      	uxtb	r3, r3
 800a8b8:	2b20      	cmp	r3, #32
 800a8ba:	d139      	bne.n	800a930 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a8c2:	2b01      	cmp	r3, #1
 800a8c4:	d101      	bne.n	800a8ca <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800a8c6:	2302      	movs	r3, #2
 800a8c8:	e033      	b.n	800a932 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	2201      	movs	r2, #1
 800a8ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	2224      	movs	r2, #36	; 0x24
 800a8d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	681a      	ldr	r2, [r3, #0]
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	f022 0201 	bic.w	r2, r2, #1
 800a8e8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800a8f8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800a8fa:	683b      	ldr	r3, [r7, #0]
 800a8fc:	021b      	lsls	r3, r3, #8
 800a8fe:	68fa      	ldr	r2, [r7, #12]
 800a900:	4313      	orrs	r3, r2
 800a902:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	68fa      	ldr	r2, [r7, #12]
 800a90a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	681a      	ldr	r2, [r3, #0]
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	f042 0201 	orr.w	r2, r2, #1
 800a91a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	2220      	movs	r2, #32
 800a920:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	2200      	movs	r2, #0
 800a928:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a92c:	2300      	movs	r3, #0
 800a92e:	e000      	b.n	800a932 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800a930:	2302      	movs	r3, #2
  }
}
 800a932:	4618      	mov	r0, r3
 800a934:	3714      	adds	r7, #20
 800a936:	46bd      	mov	sp, r7
 800a938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a93c:	4770      	bx	lr
	...

0800a940 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800a940:	b480      	push	{r7}
 800a942:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800a944:	4b04      	ldr	r3, [pc, #16]	; (800a958 <HAL_PWREx_GetVoltageRange+0x18>)
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800a94c:	4618      	mov	r0, r3
 800a94e:	46bd      	mov	sp, r7
 800a950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a954:	4770      	bx	lr
 800a956:	bf00      	nop
 800a958:	40007000 	.word	0x40007000

0800a95c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800a95c:	b480      	push	{r7}
 800a95e:	b085      	sub	sp, #20
 800a960:	af00      	add	r7, sp, #0
 800a962:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a96a:	d130      	bne.n	800a9ce <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800a96c:	4b23      	ldr	r3, [pc, #140]	; (800a9fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a974:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a978:	d038      	beq.n	800a9ec <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800a97a:	4b20      	ldr	r3, [pc, #128]	; (800a9fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800a982:	4a1e      	ldr	r2, [pc, #120]	; (800a9fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a984:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a988:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800a98a:	4b1d      	ldr	r3, [pc, #116]	; (800aa00 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	2232      	movs	r2, #50	; 0x32
 800a990:	fb02 f303 	mul.w	r3, r2, r3
 800a994:	4a1b      	ldr	r2, [pc, #108]	; (800aa04 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800a996:	fba2 2303 	umull	r2, r3, r2, r3
 800a99a:	0c9b      	lsrs	r3, r3, #18
 800a99c:	3301      	adds	r3, #1
 800a99e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a9a0:	e002      	b.n	800a9a8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	3b01      	subs	r3, #1
 800a9a6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a9a8:	4b14      	ldr	r3, [pc, #80]	; (800a9fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a9aa:	695b      	ldr	r3, [r3, #20]
 800a9ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a9b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a9b4:	d102      	bne.n	800a9bc <HAL_PWREx_ControlVoltageScaling+0x60>
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d1f2      	bne.n	800a9a2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800a9bc:	4b0f      	ldr	r3, [pc, #60]	; (800a9fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a9be:	695b      	ldr	r3, [r3, #20]
 800a9c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a9c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a9c8:	d110      	bne.n	800a9ec <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800a9ca:	2303      	movs	r3, #3
 800a9cc:	e00f      	b.n	800a9ee <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800a9ce:	4b0b      	ldr	r3, [pc, #44]	; (800a9fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a9d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a9da:	d007      	beq.n	800a9ec <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800a9dc:	4b07      	ldr	r3, [pc, #28]	; (800a9fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800a9e4:	4a05      	ldr	r2, [pc, #20]	; (800a9fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a9e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a9ea:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800a9ec:	2300      	movs	r3, #0
}
 800a9ee:	4618      	mov	r0, r3
 800a9f0:	3714      	adds	r7, #20
 800a9f2:	46bd      	mov	sp, r7
 800a9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f8:	4770      	bx	lr
 800a9fa:	bf00      	nop
 800a9fc:	40007000 	.word	0x40007000
 800aa00:	20000000 	.word	0x20000000
 800aa04:	431bde83 	.word	0x431bde83

0800aa08 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800aa08:	b580      	push	{r7, lr}
 800aa0a:	b088      	sub	sp, #32
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d102      	bne.n	800aa1c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800aa16:	2301      	movs	r3, #1
 800aa18:	f000 bc11 	b.w	800b23e <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800aa1c:	4ba0      	ldr	r3, [pc, #640]	; (800aca0 <HAL_RCC_OscConfig+0x298>)
 800aa1e:	689b      	ldr	r3, [r3, #8]
 800aa20:	f003 030c 	and.w	r3, r3, #12
 800aa24:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800aa26:	4b9e      	ldr	r3, [pc, #632]	; (800aca0 <HAL_RCC_OscConfig+0x298>)
 800aa28:	68db      	ldr	r3, [r3, #12]
 800aa2a:	f003 0303 	and.w	r3, r3, #3
 800aa2e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	f003 0310 	and.w	r3, r3, #16
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	f000 80e4 	beq.w	800ac06 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800aa3e:	69bb      	ldr	r3, [r7, #24]
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d007      	beq.n	800aa54 <HAL_RCC_OscConfig+0x4c>
 800aa44:	69bb      	ldr	r3, [r7, #24]
 800aa46:	2b0c      	cmp	r3, #12
 800aa48:	f040 808b 	bne.w	800ab62 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800aa4c:	697b      	ldr	r3, [r7, #20]
 800aa4e:	2b01      	cmp	r3, #1
 800aa50:	f040 8087 	bne.w	800ab62 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800aa54:	4b92      	ldr	r3, [pc, #584]	; (800aca0 <HAL_RCC_OscConfig+0x298>)
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	f003 0302 	and.w	r3, r3, #2
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d005      	beq.n	800aa6c <HAL_RCC_OscConfig+0x64>
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	699b      	ldr	r3, [r3, #24]
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d101      	bne.n	800aa6c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800aa68:	2301      	movs	r3, #1
 800aa6a:	e3e8      	b.n	800b23e <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	6a1a      	ldr	r2, [r3, #32]
 800aa70:	4b8b      	ldr	r3, [pc, #556]	; (800aca0 <HAL_RCC_OscConfig+0x298>)
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	f003 0308 	and.w	r3, r3, #8
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d004      	beq.n	800aa86 <HAL_RCC_OscConfig+0x7e>
 800aa7c:	4b88      	ldr	r3, [pc, #544]	; (800aca0 <HAL_RCC_OscConfig+0x298>)
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800aa84:	e005      	b.n	800aa92 <HAL_RCC_OscConfig+0x8a>
 800aa86:	4b86      	ldr	r3, [pc, #536]	; (800aca0 <HAL_RCC_OscConfig+0x298>)
 800aa88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800aa8c:	091b      	lsrs	r3, r3, #4
 800aa8e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800aa92:	4293      	cmp	r3, r2
 800aa94:	d223      	bcs.n	800aade <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	6a1b      	ldr	r3, [r3, #32]
 800aa9a:	4618      	mov	r0, r3
 800aa9c:	f000 fd78 	bl	800b590 <RCC_SetFlashLatencyFromMSIRange>
 800aaa0:	4603      	mov	r3, r0
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d001      	beq.n	800aaaa <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800aaa6:	2301      	movs	r3, #1
 800aaa8:	e3c9      	b.n	800b23e <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800aaaa:	4b7d      	ldr	r3, [pc, #500]	; (800aca0 <HAL_RCC_OscConfig+0x298>)
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	4a7c      	ldr	r2, [pc, #496]	; (800aca0 <HAL_RCC_OscConfig+0x298>)
 800aab0:	f043 0308 	orr.w	r3, r3, #8
 800aab4:	6013      	str	r3, [r2, #0]
 800aab6:	4b7a      	ldr	r3, [pc, #488]	; (800aca0 <HAL_RCC_OscConfig+0x298>)
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	6a1b      	ldr	r3, [r3, #32]
 800aac2:	4977      	ldr	r1, [pc, #476]	; (800aca0 <HAL_RCC_OscConfig+0x298>)
 800aac4:	4313      	orrs	r3, r2
 800aac6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800aac8:	4b75      	ldr	r3, [pc, #468]	; (800aca0 <HAL_RCC_OscConfig+0x298>)
 800aaca:	685b      	ldr	r3, [r3, #4]
 800aacc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	69db      	ldr	r3, [r3, #28]
 800aad4:	021b      	lsls	r3, r3, #8
 800aad6:	4972      	ldr	r1, [pc, #456]	; (800aca0 <HAL_RCC_OscConfig+0x298>)
 800aad8:	4313      	orrs	r3, r2
 800aada:	604b      	str	r3, [r1, #4]
 800aadc:	e025      	b.n	800ab2a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800aade:	4b70      	ldr	r3, [pc, #448]	; (800aca0 <HAL_RCC_OscConfig+0x298>)
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	4a6f      	ldr	r2, [pc, #444]	; (800aca0 <HAL_RCC_OscConfig+0x298>)
 800aae4:	f043 0308 	orr.w	r3, r3, #8
 800aae8:	6013      	str	r3, [r2, #0]
 800aaea:	4b6d      	ldr	r3, [pc, #436]	; (800aca0 <HAL_RCC_OscConfig+0x298>)
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	6a1b      	ldr	r3, [r3, #32]
 800aaf6:	496a      	ldr	r1, [pc, #424]	; (800aca0 <HAL_RCC_OscConfig+0x298>)
 800aaf8:	4313      	orrs	r3, r2
 800aafa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800aafc:	4b68      	ldr	r3, [pc, #416]	; (800aca0 <HAL_RCC_OscConfig+0x298>)
 800aafe:	685b      	ldr	r3, [r3, #4]
 800ab00:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	69db      	ldr	r3, [r3, #28]
 800ab08:	021b      	lsls	r3, r3, #8
 800ab0a:	4965      	ldr	r1, [pc, #404]	; (800aca0 <HAL_RCC_OscConfig+0x298>)
 800ab0c:	4313      	orrs	r3, r2
 800ab0e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800ab10:	69bb      	ldr	r3, [r7, #24]
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d109      	bne.n	800ab2a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	6a1b      	ldr	r3, [r3, #32]
 800ab1a:	4618      	mov	r0, r3
 800ab1c:	f000 fd38 	bl	800b590 <RCC_SetFlashLatencyFromMSIRange>
 800ab20:	4603      	mov	r3, r0
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d001      	beq.n	800ab2a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800ab26:	2301      	movs	r3, #1
 800ab28:	e389      	b.n	800b23e <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800ab2a:	f000 fc6f 	bl	800b40c <HAL_RCC_GetSysClockFreq>
 800ab2e:	4601      	mov	r1, r0
 800ab30:	4b5b      	ldr	r3, [pc, #364]	; (800aca0 <HAL_RCC_OscConfig+0x298>)
 800ab32:	689b      	ldr	r3, [r3, #8]
 800ab34:	091b      	lsrs	r3, r3, #4
 800ab36:	f003 030f 	and.w	r3, r3, #15
 800ab3a:	4a5a      	ldr	r2, [pc, #360]	; (800aca4 <HAL_RCC_OscConfig+0x29c>)
 800ab3c:	5cd3      	ldrb	r3, [r2, r3]
 800ab3e:	f003 031f 	and.w	r3, r3, #31
 800ab42:	fa21 f303 	lsr.w	r3, r1, r3
 800ab46:	4a58      	ldr	r2, [pc, #352]	; (800aca8 <HAL_RCC_OscConfig+0x2a0>)
 800ab48:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800ab4a:	4b58      	ldr	r3, [pc, #352]	; (800acac <HAL_RCC_OscConfig+0x2a4>)
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	4618      	mov	r0, r3
 800ab50:	f7fd fa60 	bl	8008014 <HAL_InitTick>
 800ab54:	4603      	mov	r3, r0
 800ab56:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800ab58:	7bfb      	ldrb	r3, [r7, #15]
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d052      	beq.n	800ac04 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800ab5e:	7bfb      	ldrb	r3, [r7, #15]
 800ab60:	e36d      	b.n	800b23e <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	699b      	ldr	r3, [r3, #24]
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d032      	beq.n	800abd0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800ab6a:	4b4d      	ldr	r3, [pc, #308]	; (800aca0 <HAL_RCC_OscConfig+0x298>)
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	4a4c      	ldr	r2, [pc, #304]	; (800aca0 <HAL_RCC_OscConfig+0x298>)
 800ab70:	f043 0301 	orr.w	r3, r3, #1
 800ab74:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800ab76:	f7fd fa99 	bl	80080ac <HAL_GetTick>
 800ab7a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800ab7c:	e008      	b.n	800ab90 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800ab7e:	f7fd fa95 	bl	80080ac <HAL_GetTick>
 800ab82:	4602      	mov	r2, r0
 800ab84:	693b      	ldr	r3, [r7, #16]
 800ab86:	1ad3      	subs	r3, r2, r3
 800ab88:	2b02      	cmp	r3, #2
 800ab8a:	d901      	bls.n	800ab90 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800ab8c:	2303      	movs	r3, #3
 800ab8e:	e356      	b.n	800b23e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800ab90:	4b43      	ldr	r3, [pc, #268]	; (800aca0 <HAL_RCC_OscConfig+0x298>)
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	f003 0302 	and.w	r3, r3, #2
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d0f0      	beq.n	800ab7e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800ab9c:	4b40      	ldr	r3, [pc, #256]	; (800aca0 <HAL_RCC_OscConfig+0x298>)
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	4a3f      	ldr	r2, [pc, #252]	; (800aca0 <HAL_RCC_OscConfig+0x298>)
 800aba2:	f043 0308 	orr.w	r3, r3, #8
 800aba6:	6013      	str	r3, [r2, #0]
 800aba8:	4b3d      	ldr	r3, [pc, #244]	; (800aca0 <HAL_RCC_OscConfig+0x298>)
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	6a1b      	ldr	r3, [r3, #32]
 800abb4:	493a      	ldr	r1, [pc, #232]	; (800aca0 <HAL_RCC_OscConfig+0x298>)
 800abb6:	4313      	orrs	r3, r2
 800abb8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800abba:	4b39      	ldr	r3, [pc, #228]	; (800aca0 <HAL_RCC_OscConfig+0x298>)
 800abbc:	685b      	ldr	r3, [r3, #4]
 800abbe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	69db      	ldr	r3, [r3, #28]
 800abc6:	021b      	lsls	r3, r3, #8
 800abc8:	4935      	ldr	r1, [pc, #212]	; (800aca0 <HAL_RCC_OscConfig+0x298>)
 800abca:	4313      	orrs	r3, r2
 800abcc:	604b      	str	r3, [r1, #4]
 800abce:	e01a      	b.n	800ac06 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800abd0:	4b33      	ldr	r3, [pc, #204]	; (800aca0 <HAL_RCC_OscConfig+0x298>)
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	4a32      	ldr	r2, [pc, #200]	; (800aca0 <HAL_RCC_OscConfig+0x298>)
 800abd6:	f023 0301 	bic.w	r3, r3, #1
 800abda:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800abdc:	f7fd fa66 	bl	80080ac <HAL_GetTick>
 800abe0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800abe2:	e008      	b.n	800abf6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800abe4:	f7fd fa62 	bl	80080ac <HAL_GetTick>
 800abe8:	4602      	mov	r2, r0
 800abea:	693b      	ldr	r3, [r7, #16]
 800abec:	1ad3      	subs	r3, r2, r3
 800abee:	2b02      	cmp	r3, #2
 800abf0:	d901      	bls.n	800abf6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800abf2:	2303      	movs	r3, #3
 800abf4:	e323      	b.n	800b23e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800abf6:	4b2a      	ldr	r3, [pc, #168]	; (800aca0 <HAL_RCC_OscConfig+0x298>)
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	f003 0302 	and.w	r3, r3, #2
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d1f0      	bne.n	800abe4 <HAL_RCC_OscConfig+0x1dc>
 800ac02:	e000      	b.n	800ac06 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800ac04:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	f003 0301 	and.w	r3, r3, #1
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d073      	beq.n	800acfa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800ac12:	69bb      	ldr	r3, [r7, #24]
 800ac14:	2b08      	cmp	r3, #8
 800ac16:	d005      	beq.n	800ac24 <HAL_RCC_OscConfig+0x21c>
 800ac18:	69bb      	ldr	r3, [r7, #24]
 800ac1a:	2b0c      	cmp	r3, #12
 800ac1c:	d10e      	bne.n	800ac3c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800ac1e:	697b      	ldr	r3, [r7, #20]
 800ac20:	2b03      	cmp	r3, #3
 800ac22:	d10b      	bne.n	800ac3c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ac24:	4b1e      	ldr	r3, [pc, #120]	; (800aca0 <HAL_RCC_OscConfig+0x298>)
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d063      	beq.n	800acf8 <HAL_RCC_OscConfig+0x2f0>
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	685b      	ldr	r3, [r3, #4]
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d15f      	bne.n	800acf8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800ac38:	2301      	movs	r3, #1
 800ac3a:	e300      	b.n	800b23e <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	685b      	ldr	r3, [r3, #4]
 800ac40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ac44:	d106      	bne.n	800ac54 <HAL_RCC_OscConfig+0x24c>
 800ac46:	4b16      	ldr	r3, [pc, #88]	; (800aca0 <HAL_RCC_OscConfig+0x298>)
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	4a15      	ldr	r2, [pc, #84]	; (800aca0 <HAL_RCC_OscConfig+0x298>)
 800ac4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ac50:	6013      	str	r3, [r2, #0]
 800ac52:	e01d      	b.n	800ac90 <HAL_RCC_OscConfig+0x288>
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	685b      	ldr	r3, [r3, #4]
 800ac58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ac5c:	d10c      	bne.n	800ac78 <HAL_RCC_OscConfig+0x270>
 800ac5e:	4b10      	ldr	r3, [pc, #64]	; (800aca0 <HAL_RCC_OscConfig+0x298>)
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	4a0f      	ldr	r2, [pc, #60]	; (800aca0 <HAL_RCC_OscConfig+0x298>)
 800ac64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ac68:	6013      	str	r3, [r2, #0]
 800ac6a:	4b0d      	ldr	r3, [pc, #52]	; (800aca0 <HAL_RCC_OscConfig+0x298>)
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	4a0c      	ldr	r2, [pc, #48]	; (800aca0 <HAL_RCC_OscConfig+0x298>)
 800ac70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ac74:	6013      	str	r3, [r2, #0]
 800ac76:	e00b      	b.n	800ac90 <HAL_RCC_OscConfig+0x288>
 800ac78:	4b09      	ldr	r3, [pc, #36]	; (800aca0 <HAL_RCC_OscConfig+0x298>)
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	4a08      	ldr	r2, [pc, #32]	; (800aca0 <HAL_RCC_OscConfig+0x298>)
 800ac7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ac82:	6013      	str	r3, [r2, #0]
 800ac84:	4b06      	ldr	r3, [pc, #24]	; (800aca0 <HAL_RCC_OscConfig+0x298>)
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	4a05      	ldr	r2, [pc, #20]	; (800aca0 <HAL_RCC_OscConfig+0x298>)
 800ac8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ac8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	685b      	ldr	r3, [r3, #4]
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d01b      	beq.n	800acd0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ac98:	f7fd fa08 	bl	80080ac <HAL_GetTick>
 800ac9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800ac9e:	e010      	b.n	800acc2 <HAL_RCC_OscConfig+0x2ba>
 800aca0:	40021000 	.word	0x40021000
 800aca4:	080118ac 	.word	0x080118ac
 800aca8:	20000000 	.word	0x20000000
 800acac:	200000dc 	.word	0x200000dc
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800acb0:	f7fd f9fc 	bl	80080ac <HAL_GetTick>
 800acb4:	4602      	mov	r2, r0
 800acb6:	693b      	ldr	r3, [r7, #16]
 800acb8:	1ad3      	subs	r3, r2, r3
 800acba:	2b64      	cmp	r3, #100	; 0x64
 800acbc:	d901      	bls.n	800acc2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800acbe:	2303      	movs	r3, #3
 800acc0:	e2bd      	b.n	800b23e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800acc2:	4baf      	ldr	r3, [pc, #700]	; (800af80 <HAL_RCC_OscConfig+0x578>)
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800acca:	2b00      	cmp	r3, #0
 800accc:	d0f0      	beq.n	800acb0 <HAL_RCC_OscConfig+0x2a8>
 800acce:	e014      	b.n	800acfa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800acd0:	f7fd f9ec 	bl	80080ac <HAL_GetTick>
 800acd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800acd6:	e008      	b.n	800acea <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800acd8:	f7fd f9e8 	bl	80080ac <HAL_GetTick>
 800acdc:	4602      	mov	r2, r0
 800acde:	693b      	ldr	r3, [r7, #16]
 800ace0:	1ad3      	subs	r3, r2, r3
 800ace2:	2b64      	cmp	r3, #100	; 0x64
 800ace4:	d901      	bls.n	800acea <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800ace6:	2303      	movs	r3, #3
 800ace8:	e2a9      	b.n	800b23e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800acea:	4ba5      	ldr	r3, [pc, #660]	; (800af80 <HAL_RCC_OscConfig+0x578>)
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d1f0      	bne.n	800acd8 <HAL_RCC_OscConfig+0x2d0>
 800acf6:	e000      	b.n	800acfa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800acf8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	f003 0302 	and.w	r3, r3, #2
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d060      	beq.n	800adc8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800ad06:	69bb      	ldr	r3, [r7, #24]
 800ad08:	2b04      	cmp	r3, #4
 800ad0a:	d005      	beq.n	800ad18 <HAL_RCC_OscConfig+0x310>
 800ad0c:	69bb      	ldr	r3, [r7, #24]
 800ad0e:	2b0c      	cmp	r3, #12
 800ad10:	d119      	bne.n	800ad46 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800ad12:	697b      	ldr	r3, [r7, #20]
 800ad14:	2b02      	cmp	r3, #2
 800ad16:	d116      	bne.n	800ad46 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800ad18:	4b99      	ldr	r3, [pc, #612]	; (800af80 <HAL_RCC_OscConfig+0x578>)
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d005      	beq.n	800ad30 <HAL_RCC_OscConfig+0x328>
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	68db      	ldr	r3, [r3, #12]
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d101      	bne.n	800ad30 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800ad2c:	2301      	movs	r3, #1
 800ad2e:	e286      	b.n	800b23e <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ad30:	4b93      	ldr	r3, [pc, #588]	; (800af80 <HAL_RCC_OscConfig+0x578>)
 800ad32:	685b      	ldr	r3, [r3, #4]
 800ad34:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	691b      	ldr	r3, [r3, #16]
 800ad3c:	061b      	lsls	r3, r3, #24
 800ad3e:	4990      	ldr	r1, [pc, #576]	; (800af80 <HAL_RCC_OscConfig+0x578>)
 800ad40:	4313      	orrs	r3, r2
 800ad42:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800ad44:	e040      	b.n	800adc8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	68db      	ldr	r3, [r3, #12]
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d023      	beq.n	800ad96 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800ad4e:	4b8c      	ldr	r3, [pc, #560]	; (800af80 <HAL_RCC_OscConfig+0x578>)
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	4a8b      	ldr	r2, [pc, #556]	; (800af80 <HAL_RCC_OscConfig+0x578>)
 800ad54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ad58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ad5a:	f7fd f9a7 	bl	80080ac <HAL_GetTick>
 800ad5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800ad60:	e008      	b.n	800ad74 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ad62:	f7fd f9a3 	bl	80080ac <HAL_GetTick>
 800ad66:	4602      	mov	r2, r0
 800ad68:	693b      	ldr	r3, [r7, #16]
 800ad6a:	1ad3      	subs	r3, r2, r3
 800ad6c:	2b02      	cmp	r3, #2
 800ad6e:	d901      	bls.n	800ad74 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800ad70:	2303      	movs	r3, #3
 800ad72:	e264      	b.n	800b23e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800ad74:	4b82      	ldr	r3, [pc, #520]	; (800af80 <HAL_RCC_OscConfig+0x578>)
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d0f0      	beq.n	800ad62 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ad80:	4b7f      	ldr	r3, [pc, #508]	; (800af80 <HAL_RCC_OscConfig+0x578>)
 800ad82:	685b      	ldr	r3, [r3, #4]
 800ad84:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	691b      	ldr	r3, [r3, #16]
 800ad8c:	061b      	lsls	r3, r3, #24
 800ad8e:	497c      	ldr	r1, [pc, #496]	; (800af80 <HAL_RCC_OscConfig+0x578>)
 800ad90:	4313      	orrs	r3, r2
 800ad92:	604b      	str	r3, [r1, #4]
 800ad94:	e018      	b.n	800adc8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800ad96:	4b7a      	ldr	r3, [pc, #488]	; (800af80 <HAL_RCC_OscConfig+0x578>)
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	4a79      	ldr	r2, [pc, #484]	; (800af80 <HAL_RCC_OscConfig+0x578>)
 800ad9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ada0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ada2:	f7fd f983 	bl	80080ac <HAL_GetTick>
 800ada6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800ada8:	e008      	b.n	800adbc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800adaa:	f7fd f97f 	bl	80080ac <HAL_GetTick>
 800adae:	4602      	mov	r2, r0
 800adb0:	693b      	ldr	r3, [r7, #16]
 800adb2:	1ad3      	subs	r3, r2, r3
 800adb4:	2b02      	cmp	r3, #2
 800adb6:	d901      	bls.n	800adbc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800adb8:	2303      	movs	r3, #3
 800adba:	e240      	b.n	800b23e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800adbc:	4b70      	ldr	r3, [pc, #448]	; (800af80 <HAL_RCC_OscConfig+0x578>)
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d1f0      	bne.n	800adaa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	f003 0308 	and.w	r3, r3, #8
 800add0:	2b00      	cmp	r3, #0
 800add2:	d03c      	beq.n	800ae4e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	695b      	ldr	r3, [r3, #20]
 800add8:	2b00      	cmp	r3, #0
 800adda:	d01c      	beq.n	800ae16 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800addc:	4b68      	ldr	r3, [pc, #416]	; (800af80 <HAL_RCC_OscConfig+0x578>)
 800adde:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ade2:	4a67      	ldr	r2, [pc, #412]	; (800af80 <HAL_RCC_OscConfig+0x578>)
 800ade4:	f043 0301 	orr.w	r3, r3, #1
 800ade8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800adec:	f7fd f95e 	bl	80080ac <HAL_GetTick>
 800adf0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800adf2:	e008      	b.n	800ae06 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800adf4:	f7fd f95a 	bl	80080ac <HAL_GetTick>
 800adf8:	4602      	mov	r2, r0
 800adfa:	693b      	ldr	r3, [r7, #16]
 800adfc:	1ad3      	subs	r3, r2, r3
 800adfe:	2b02      	cmp	r3, #2
 800ae00:	d901      	bls.n	800ae06 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800ae02:	2303      	movs	r3, #3
 800ae04:	e21b      	b.n	800b23e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800ae06:	4b5e      	ldr	r3, [pc, #376]	; (800af80 <HAL_RCC_OscConfig+0x578>)
 800ae08:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ae0c:	f003 0302 	and.w	r3, r3, #2
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d0ef      	beq.n	800adf4 <HAL_RCC_OscConfig+0x3ec>
 800ae14:	e01b      	b.n	800ae4e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ae16:	4b5a      	ldr	r3, [pc, #360]	; (800af80 <HAL_RCC_OscConfig+0x578>)
 800ae18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ae1c:	4a58      	ldr	r2, [pc, #352]	; (800af80 <HAL_RCC_OscConfig+0x578>)
 800ae1e:	f023 0301 	bic.w	r3, r3, #1
 800ae22:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ae26:	f7fd f941 	bl	80080ac <HAL_GetTick>
 800ae2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800ae2c:	e008      	b.n	800ae40 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ae2e:	f7fd f93d 	bl	80080ac <HAL_GetTick>
 800ae32:	4602      	mov	r2, r0
 800ae34:	693b      	ldr	r3, [r7, #16]
 800ae36:	1ad3      	subs	r3, r2, r3
 800ae38:	2b02      	cmp	r3, #2
 800ae3a:	d901      	bls.n	800ae40 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800ae3c:	2303      	movs	r3, #3
 800ae3e:	e1fe      	b.n	800b23e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800ae40:	4b4f      	ldr	r3, [pc, #316]	; (800af80 <HAL_RCC_OscConfig+0x578>)
 800ae42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ae46:	f003 0302 	and.w	r3, r3, #2
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d1ef      	bne.n	800ae2e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	f003 0304 	and.w	r3, r3, #4
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	f000 80a6 	beq.w	800afa8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ae5c:	2300      	movs	r3, #0
 800ae5e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800ae60:	4b47      	ldr	r3, [pc, #284]	; (800af80 <HAL_RCC_OscConfig+0x578>)
 800ae62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d10d      	bne.n	800ae88 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ae6c:	4b44      	ldr	r3, [pc, #272]	; (800af80 <HAL_RCC_OscConfig+0x578>)
 800ae6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae70:	4a43      	ldr	r2, [pc, #268]	; (800af80 <HAL_RCC_OscConfig+0x578>)
 800ae72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ae76:	6593      	str	r3, [r2, #88]	; 0x58
 800ae78:	4b41      	ldr	r3, [pc, #260]	; (800af80 <HAL_RCC_OscConfig+0x578>)
 800ae7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ae80:	60bb      	str	r3, [r7, #8]
 800ae82:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800ae84:	2301      	movs	r3, #1
 800ae86:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ae88:	4b3e      	ldr	r3, [pc, #248]	; (800af84 <HAL_RCC_OscConfig+0x57c>)
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d118      	bne.n	800aec6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ae94:	4b3b      	ldr	r3, [pc, #236]	; (800af84 <HAL_RCC_OscConfig+0x57c>)
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	4a3a      	ldr	r2, [pc, #232]	; (800af84 <HAL_RCC_OscConfig+0x57c>)
 800ae9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ae9e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800aea0:	f7fd f904 	bl	80080ac <HAL_GetTick>
 800aea4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800aea6:	e008      	b.n	800aeba <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800aea8:	f7fd f900 	bl	80080ac <HAL_GetTick>
 800aeac:	4602      	mov	r2, r0
 800aeae:	693b      	ldr	r3, [r7, #16]
 800aeb0:	1ad3      	subs	r3, r2, r3
 800aeb2:	2b02      	cmp	r3, #2
 800aeb4:	d901      	bls.n	800aeba <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800aeb6:	2303      	movs	r3, #3
 800aeb8:	e1c1      	b.n	800b23e <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800aeba:	4b32      	ldr	r3, [pc, #200]	; (800af84 <HAL_RCC_OscConfig+0x57c>)
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d0f0      	beq.n	800aea8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	689b      	ldr	r3, [r3, #8]
 800aeca:	2b01      	cmp	r3, #1
 800aecc:	d108      	bne.n	800aee0 <HAL_RCC_OscConfig+0x4d8>
 800aece:	4b2c      	ldr	r3, [pc, #176]	; (800af80 <HAL_RCC_OscConfig+0x578>)
 800aed0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aed4:	4a2a      	ldr	r2, [pc, #168]	; (800af80 <HAL_RCC_OscConfig+0x578>)
 800aed6:	f043 0301 	orr.w	r3, r3, #1
 800aeda:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800aede:	e024      	b.n	800af2a <HAL_RCC_OscConfig+0x522>
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	689b      	ldr	r3, [r3, #8]
 800aee4:	2b05      	cmp	r3, #5
 800aee6:	d110      	bne.n	800af0a <HAL_RCC_OscConfig+0x502>
 800aee8:	4b25      	ldr	r3, [pc, #148]	; (800af80 <HAL_RCC_OscConfig+0x578>)
 800aeea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aeee:	4a24      	ldr	r2, [pc, #144]	; (800af80 <HAL_RCC_OscConfig+0x578>)
 800aef0:	f043 0304 	orr.w	r3, r3, #4
 800aef4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800aef8:	4b21      	ldr	r3, [pc, #132]	; (800af80 <HAL_RCC_OscConfig+0x578>)
 800aefa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aefe:	4a20      	ldr	r2, [pc, #128]	; (800af80 <HAL_RCC_OscConfig+0x578>)
 800af00:	f043 0301 	orr.w	r3, r3, #1
 800af04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800af08:	e00f      	b.n	800af2a <HAL_RCC_OscConfig+0x522>
 800af0a:	4b1d      	ldr	r3, [pc, #116]	; (800af80 <HAL_RCC_OscConfig+0x578>)
 800af0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800af10:	4a1b      	ldr	r2, [pc, #108]	; (800af80 <HAL_RCC_OscConfig+0x578>)
 800af12:	f023 0301 	bic.w	r3, r3, #1
 800af16:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800af1a:	4b19      	ldr	r3, [pc, #100]	; (800af80 <HAL_RCC_OscConfig+0x578>)
 800af1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800af20:	4a17      	ldr	r2, [pc, #92]	; (800af80 <HAL_RCC_OscConfig+0x578>)
 800af22:	f023 0304 	bic.w	r3, r3, #4
 800af26:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	689b      	ldr	r3, [r3, #8]
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d016      	beq.n	800af60 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800af32:	f7fd f8bb 	bl	80080ac <HAL_GetTick>
 800af36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800af38:	e00a      	b.n	800af50 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800af3a:	f7fd f8b7 	bl	80080ac <HAL_GetTick>
 800af3e:	4602      	mov	r2, r0
 800af40:	693b      	ldr	r3, [r7, #16]
 800af42:	1ad3      	subs	r3, r2, r3
 800af44:	f241 3288 	movw	r2, #5000	; 0x1388
 800af48:	4293      	cmp	r3, r2
 800af4a:	d901      	bls.n	800af50 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800af4c:	2303      	movs	r3, #3
 800af4e:	e176      	b.n	800b23e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800af50:	4b0b      	ldr	r3, [pc, #44]	; (800af80 <HAL_RCC_OscConfig+0x578>)
 800af52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800af56:	f003 0302 	and.w	r3, r3, #2
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d0ed      	beq.n	800af3a <HAL_RCC_OscConfig+0x532>
 800af5e:	e01a      	b.n	800af96 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800af60:	f7fd f8a4 	bl	80080ac <HAL_GetTick>
 800af64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800af66:	e00f      	b.n	800af88 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800af68:	f7fd f8a0 	bl	80080ac <HAL_GetTick>
 800af6c:	4602      	mov	r2, r0
 800af6e:	693b      	ldr	r3, [r7, #16]
 800af70:	1ad3      	subs	r3, r2, r3
 800af72:	f241 3288 	movw	r2, #5000	; 0x1388
 800af76:	4293      	cmp	r3, r2
 800af78:	d906      	bls.n	800af88 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800af7a:	2303      	movs	r3, #3
 800af7c:	e15f      	b.n	800b23e <HAL_RCC_OscConfig+0x836>
 800af7e:	bf00      	nop
 800af80:	40021000 	.word	0x40021000
 800af84:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800af88:	4baa      	ldr	r3, [pc, #680]	; (800b234 <HAL_RCC_OscConfig+0x82c>)
 800af8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800af8e:	f003 0302 	and.w	r3, r3, #2
 800af92:	2b00      	cmp	r3, #0
 800af94:	d1e8      	bne.n	800af68 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800af96:	7ffb      	ldrb	r3, [r7, #31]
 800af98:	2b01      	cmp	r3, #1
 800af9a:	d105      	bne.n	800afa8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800af9c:	4ba5      	ldr	r3, [pc, #660]	; (800b234 <HAL_RCC_OscConfig+0x82c>)
 800af9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800afa0:	4aa4      	ldr	r2, [pc, #656]	; (800b234 <HAL_RCC_OscConfig+0x82c>)
 800afa2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800afa6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	f003 0320 	and.w	r3, r3, #32
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d03c      	beq.n	800b02e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d01c      	beq.n	800aff6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800afbc:	4b9d      	ldr	r3, [pc, #628]	; (800b234 <HAL_RCC_OscConfig+0x82c>)
 800afbe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800afc2:	4a9c      	ldr	r2, [pc, #624]	; (800b234 <HAL_RCC_OscConfig+0x82c>)
 800afc4:	f043 0301 	orr.w	r3, r3, #1
 800afc8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800afcc:	f7fd f86e 	bl	80080ac <HAL_GetTick>
 800afd0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800afd2:	e008      	b.n	800afe6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800afd4:	f7fd f86a 	bl	80080ac <HAL_GetTick>
 800afd8:	4602      	mov	r2, r0
 800afda:	693b      	ldr	r3, [r7, #16]
 800afdc:	1ad3      	subs	r3, r2, r3
 800afde:	2b02      	cmp	r3, #2
 800afe0:	d901      	bls.n	800afe6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800afe2:	2303      	movs	r3, #3
 800afe4:	e12b      	b.n	800b23e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800afe6:	4b93      	ldr	r3, [pc, #588]	; (800b234 <HAL_RCC_OscConfig+0x82c>)
 800afe8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800afec:	f003 0302 	and.w	r3, r3, #2
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d0ef      	beq.n	800afd4 <HAL_RCC_OscConfig+0x5cc>
 800aff4:	e01b      	b.n	800b02e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800aff6:	4b8f      	ldr	r3, [pc, #572]	; (800b234 <HAL_RCC_OscConfig+0x82c>)
 800aff8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800affc:	4a8d      	ldr	r2, [pc, #564]	; (800b234 <HAL_RCC_OscConfig+0x82c>)
 800affe:	f023 0301 	bic.w	r3, r3, #1
 800b002:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b006:	f7fd f851 	bl	80080ac <HAL_GetTick>
 800b00a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800b00c:	e008      	b.n	800b020 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b00e:	f7fd f84d 	bl	80080ac <HAL_GetTick>
 800b012:	4602      	mov	r2, r0
 800b014:	693b      	ldr	r3, [r7, #16]
 800b016:	1ad3      	subs	r3, r2, r3
 800b018:	2b02      	cmp	r3, #2
 800b01a:	d901      	bls.n	800b020 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800b01c:	2303      	movs	r3, #3
 800b01e:	e10e      	b.n	800b23e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800b020:	4b84      	ldr	r3, [pc, #528]	; (800b234 <HAL_RCC_OscConfig+0x82c>)
 800b022:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b026:	f003 0302 	and.w	r3, r3, #2
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d1ef      	bne.n	800b00e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b032:	2b00      	cmp	r3, #0
 800b034:	f000 8102 	beq.w	800b23c <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b03c:	2b02      	cmp	r3, #2
 800b03e:	f040 80c5 	bne.w	800b1cc <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800b042:	4b7c      	ldr	r3, [pc, #496]	; (800b234 <HAL_RCC_OscConfig+0x82c>)
 800b044:	68db      	ldr	r3, [r3, #12]
 800b046:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800b048:	697b      	ldr	r3, [r7, #20]
 800b04a:	f003 0203 	and.w	r2, r3, #3
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b052:	429a      	cmp	r2, r3
 800b054:	d12c      	bne.n	800b0b0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800b056:	697b      	ldr	r3, [r7, #20]
 800b058:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b060:	3b01      	subs	r3, #1
 800b062:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800b064:	429a      	cmp	r2, r3
 800b066:	d123      	bne.n	800b0b0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800b068:	697b      	ldr	r3, [r7, #20]
 800b06a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b072:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800b074:	429a      	cmp	r2, r3
 800b076:	d11b      	bne.n	800b0b0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800b078:	697b      	ldr	r3, [r7, #20]
 800b07a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b082:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800b084:	429a      	cmp	r2, r3
 800b086:	d113      	bne.n	800b0b0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b088:	697b      	ldr	r3, [r7, #20]
 800b08a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b092:	085b      	lsrs	r3, r3, #1
 800b094:	3b01      	subs	r3, #1
 800b096:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800b098:	429a      	cmp	r2, r3
 800b09a:	d109      	bne.n	800b0b0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800b09c:	697b      	ldr	r3, [r7, #20]
 800b09e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0a6:	085b      	lsrs	r3, r3, #1
 800b0a8:	3b01      	subs	r3, #1
 800b0aa:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b0ac:	429a      	cmp	r2, r3
 800b0ae:	d067      	beq.n	800b180 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800b0b0:	69bb      	ldr	r3, [r7, #24]
 800b0b2:	2b0c      	cmp	r3, #12
 800b0b4:	d062      	beq.n	800b17c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800b0b6:	4b5f      	ldr	r3, [pc, #380]	; (800b234 <HAL_RCC_OscConfig+0x82c>)
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d001      	beq.n	800b0c6 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800b0c2:	2301      	movs	r3, #1
 800b0c4:	e0bb      	b.n	800b23e <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800b0c6:	4b5b      	ldr	r3, [pc, #364]	; (800b234 <HAL_RCC_OscConfig+0x82c>)
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	4a5a      	ldr	r2, [pc, #360]	; (800b234 <HAL_RCC_OscConfig+0x82c>)
 800b0cc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b0d0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800b0d2:	f7fc ffeb 	bl	80080ac <HAL_GetTick>
 800b0d6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b0d8:	e008      	b.n	800b0ec <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b0da:	f7fc ffe7 	bl	80080ac <HAL_GetTick>
 800b0de:	4602      	mov	r2, r0
 800b0e0:	693b      	ldr	r3, [r7, #16]
 800b0e2:	1ad3      	subs	r3, r2, r3
 800b0e4:	2b02      	cmp	r3, #2
 800b0e6:	d901      	bls.n	800b0ec <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800b0e8:	2303      	movs	r3, #3
 800b0ea:	e0a8      	b.n	800b23e <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b0ec:	4b51      	ldr	r3, [pc, #324]	; (800b234 <HAL_RCC_OscConfig+0x82c>)
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d1f0      	bne.n	800b0da <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b0f8:	4b4e      	ldr	r3, [pc, #312]	; (800b234 <HAL_RCC_OscConfig+0x82c>)
 800b0fa:	68da      	ldr	r2, [r3, #12]
 800b0fc:	4b4e      	ldr	r3, [pc, #312]	; (800b238 <HAL_RCC_OscConfig+0x830>)
 800b0fe:	4013      	ands	r3, r2
 800b100:	687a      	ldr	r2, [r7, #4]
 800b102:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800b104:	687a      	ldr	r2, [r7, #4]
 800b106:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800b108:	3a01      	subs	r2, #1
 800b10a:	0112      	lsls	r2, r2, #4
 800b10c:	4311      	orrs	r1, r2
 800b10e:	687a      	ldr	r2, [r7, #4]
 800b110:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800b112:	0212      	lsls	r2, r2, #8
 800b114:	4311      	orrs	r1, r2
 800b116:	687a      	ldr	r2, [r7, #4]
 800b118:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800b11a:	0852      	lsrs	r2, r2, #1
 800b11c:	3a01      	subs	r2, #1
 800b11e:	0552      	lsls	r2, r2, #21
 800b120:	4311      	orrs	r1, r2
 800b122:	687a      	ldr	r2, [r7, #4]
 800b124:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800b126:	0852      	lsrs	r2, r2, #1
 800b128:	3a01      	subs	r2, #1
 800b12a:	0652      	lsls	r2, r2, #25
 800b12c:	4311      	orrs	r1, r2
 800b12e:	687a      	ldr	r2, [r7, #4]
 800b130:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800b132:	06d2      	lsls	r2, r2, #27
 800b134:	430a      	orrs	r2, r1
 800b136:	493f      	ldr	r1, [pc, #252]	; (800b234 <HAL_RCC_OscConfig+0x82c>)
 800b138:	4313      	orrs	r3, r2
 800b13a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800b13c:	4b3d      	ldr	r3, [pc, #244]	; (800b234 <HAL_RCC_OscConfig+0x82c>)
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	4a3c      	ldr	r2, [pc, #240]	; (800b234 <HAL_RCC_OscConfig+0x82c>)
 800b142:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b146:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800b148:	4b3a      	ldr	r3, [pc, #232]	; (800b234 <HAL_RCC_OscConfig+0x82c>)
 800b14a:	68db      	ldr	r3, [r3, #12]
 800b14c:	4a39      	ldr	r2, [pc, #228]	; (800b234 <HAL_RCC_OscConfig+0x82c>)
 800b14e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b152:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800b154:	f7fc ffaa 	bl	80080ac <HAL_GetTick>
 800b158:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b15a:	e008      	b.n	800b16e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b15c:	f7fc ffa6 	bl	80080ac <HAL_GetTick>
 800b160:	4602      	mov	r2, r0
 800b162:	693b      	ldr	r3, [r7, #16]
 800b164:	1ad3      	subs	r3, r2, r3
 800b166:	2b02      	cmp	r3, #2
 800b168:	d901      	bls.n	800b16e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800b16a:	2303      	movs	r3, #3
 800b16c:	e067      	b.n	800b23e <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b16e:	4b31      	ldr	r3, [pc, #196]	; (800b234 <HAL_RCC_OscConfig+0x82c>)
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b176:	2b00      	cmp	r3, #0
 800b178:	d0f0      	beq.n	800b15c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800b17a:	e05f      	b.n	800b23c <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800b17c:	2301      	movs	r3, #1
 800b17e:	e05e      	b.n	800b23e <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b180:	4b2c      	ldr	r3, [pc, #176]	; (800b234 <HAL_RCC_OscConfig+0x82c>)
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d157      	bne.n	800b23c <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800b18c:	4b29      	ldr	r3, [pc, #164]	; (800b234 <HAL_RCC_OscConfig+0x82c>)
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	4a28      	ldr	r2, [pc, #160]	; (800b234 <HAL_RCC_OscConfig+0x82c>)
 800b192:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b196:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800b198:	4b26      	ldr	r3, [pc, #152]	; (800b234 <HAL_RCC_OscConfig+0x82c>)
 800b19a:	68db      	ldr	r3, [r3, #12]
 800b19c:	4a25      	ldr	r2, [pc, #148]	; (800b234 <HAL_RCC_OscConfig+0x82c>)
 800b19e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b1a2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800b1a4:	f7fc ff82 	bl	80080ac <HAL_GetTick>
 800b1a8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b1aa:	e008      	b.n	800b1be <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b1ac:	f7fc ff7e 	bl	80080ac <HAL_GetTick>
 800b1b0:	4602      	mov	r2, r0
 800b1b2:	693b      	ldr	r3, [r7, #16]
 800b1b4:	1ad3      	subs	r3, r2, r3
 800b1b6:	2b02      	cmp	r3, #2
 800b1b8:	d901      	bls.n	800b1be <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 800b1ba:	2303      	movs	r3, #3
 800b1bc:	e03f      	b.n	800b23e <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b1be:	4b1d      	ldr	r3, [pc, #116]	; (800b234 <HAL_RCC_OscConfig+0x82c>)
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d0f0      	beq.n	800b1ac <HAL_RCC_OscConfig+0x7a4>
 800b1ca:	e037      	b.n	800b23c <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800b1cc:	69bb      	ldr	r3, [r7, #24]
 800b1ce:	2b0c      	cmp	r3, #12
 800b1d0:	d02d      	beq.n	800b22e <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b1d2:	4b18      	ldr	r3, [pc, #96]	; (800b234 <HAL_RCC_OscConfig+0x82c>)
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	4a17      	ldr	r2, [pc, #92]	; (800b234 <HAL_RCC_OscConfig+0x82c>)
 800b1d8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b1dc:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800b1de:	4b15      	ldr	r3, [pc, #84]	; (800b234 <HAL_RCC_OscConfig+0x82c>)
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d105      	bne.n	800b1f6 <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800b1ea:	4b12      	ldr	r3, [pc, #72]	; (800b234 <HAL_RCC_OscConfig+0x82c>)
 800b1ec:	68db      	ldr	r3, [r3, #12]
 800b1ee:	4a11      	ldr	r2, [pc, #68]	; (800b234 <HAL_RCC_OscConfig+0x82c>)
 800b1f0:	f023 0303 	bic.w	r3, r3, #3
 800b1f4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800b1f6:	4b0f      	ldr	r3, [pc, #60]	; (800b234 <HAL_RCC_OscConfig+0x82c>)
 800b1f8:	68db      	ldr	r3, [r3, #12]
 800b1fa:	4a0e      	ldr	r2, [pc, #56]	; (800b234 <HAL_RCC_OscConfig+0x82c>)
 800b1fc:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800b200:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b204:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b206:	f7fc ff51 	bl	80080ac <HAL_GetTick>
 800b20a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b20c:	e008      	b.n	800b220 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b20e:	f7fc ff4d 	bl	80080ac <HAL_GetTick>
 800b212:	4602      	mov	r2, r0
 800b214:	693b      	ldr	r3, [r7, #16]
 800b216:	1ad3      	subs	r3, r2, r3
 800b218:	2b02      	cmp	r3, #2
 800b21a:	d901      	bls.n	800b220 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 800b21c:	2303      	movs	r3, #3
 800b21e:	e00e      	b.n	800b23e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b220:	4b04      	ldr	r3, [pc, #16]	; (800b234 <HAL_RCC_OscConfig+0x82c>)
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d1f0      	bne.n	800b20e <HAL_RCC_OscConfig+0x806>
 800b22c:	e006      	b.n	800b23c <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800b22e:	2301      	movs	r3, #1
 800b230:	e005      	b.n	800b23e <HAL_RCC_OscConfig+0x836>
 800b232:	bf00      	nop
 800b234:	40021000 	.word	0x40021000
 800b238:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 800b23c:	2300      	movs	r3, #0
}
 800b23e:	4618      	mov	r0, r3
 800b240:	3720      	adds	r7, #32
 800b242:	46bd      	mov	sp, r7
 800b244:	bd80      	pop	{r7, pc}
 800b246:	bf00      	nop

0800b248 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b248:	b580      	push	{r7, lr}
 800b24a:	b084      	sub	sp, #16
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	6078      	str	r0, [r7, #4]
 800b250:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	2b00      	cmp	r3, #0
 800b256:	d101      	bne.n	800b25c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b258:	2301      	movs	r3, #1
 800b25a:	e0c8      	b.n	800b3ee <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800b25c:	4b66      	ldr	r3, [pc, #408]	; (800b3f8 <HAL_RCC_ClockConfig+0x1b0>)
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	f003 0307 	and.w	r3, r3, #7
 800b264:	683a      	ldr	r2, [r7, #0]
 800b266:	429a      	cmp	r2, r3
 800b268:	d910      	bls.n	800b28c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b26a:	4b63      	ldr	r3, [pc, #396]	; (800b3f8 <HAL_RCC_ClockConfig+0x1b0>)
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	f023 0207 	bic.w	r2, r3, #7
 800b272:	4961      	ldr	r1, [pc, #388]	; (800b3f8 <HAL_RCC_ClockConfig+0x1b0>)
 800b274:	683b      	ldr	r3, [r7, #0]
 800b276:	4313      	orrs	r3, r2
 800b278:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b27a:	4b5f      	ldr	r3, [pc, #380]	; (800b3f8 <HAL_RCC_ClockConfig+0x1b0>)
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	f003 0307 	and.w	r3, r3, #7
 800b282:	683a      	ldr	r2, [r7, #0]
 800b284:	429a      	cmp	r2, r3
 800b286:	d001      	beq.n	800b28c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800b288:	2301      	movs	r3, #1
 800b28a:	e0b0      	b.n	800b3ee <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	f003 0301 	and.w	r3, r3, #1
 800b294:	2b00      	cmp	r3, #0
 800b296:	d04c      	beq.n	800b332 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	685b      	ldr	r3, [r3, #4]
 800b29c:	2b03      	cmp	r3, #3
 800b29e:	d107      	bne.n	800b2b0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b2a0:	4b56      	ldr	r3, [pc, #344]	; (800b3fc <HAL_RCC_ClockConfig+0x1b4>)
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d121      	bne.n	800b2f0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800b2ac:	2301      	movs	r3, #1
 800b2ae:	e09e      	b.n	800b3ee <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	685b      	ldr	r3, [r3, #4]
 800b2b4:	2b02      	cmp	r3, #2
 800b2b6:	d107      	bne.n	800b2c8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b2b8:	4b50      	ldr	r3, [pc, #320]	; (800b3fc <HAL_RCC_ClockConfig+0x1b4>)
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d115      	bne.n	800b2f0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800b2c4:	2301      	movs	r3, #1
 800b2c6:	e092      	b.n	800b3ee <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	685b      	ldr	r3, [r3, #4]
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d107      	bne.n	800b2e0 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800b2d0:	4b4a      	ldr	r3, [pc, #296]	; (800b3fc <HAL_RCC_ClockConfig+0x1b4>)
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	f003 0302 	and.w	r3, r3, #2
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d109      	bne.n	800b2f0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800b2dc:	2301      	movs	r3, #1
 800b2de:	e086      	b.n	800b3ee <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b2e0:	4b46      	ldr	r3, [pc, #280]	; (800b3fc <HAL_RCC_ClockConfig+0x1b4>)
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d101      	bne.n	800b2f0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800b2ec:	2301      	movs	r3, #1
 800b2ee:	e07e      	b.n	800b3ee <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b2f0:	4b42      	ldr	r3, [pc, #264]	; (800b3fc <HAL_RCC_ClockConfig+0x1b4>)
 800b2f2:	689b      	ldr	r3, [r3, #8]
 800b2f4:	f023 0203 	bic.w	r2, r3, #3
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	685b      	ldr	r3, [r3, #4]
 800b2fc:	493f      	ldr	r1, [pc, #252]	; (800b3fc <HAL_RCC_ClockConfig+0x1b4>)
 800b2fe:	4313      	orrs	r3, r2
 800b300:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b302:	f7fc fed3 	bl	80080ac <HAL_GetTick>
 800b306:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b308:	e00a      	b.n	800b320 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b30a:	f7fc fecf 	bl	80080ac <HAL_GetTick>
 800b30e:	4602      	mov	r2, r0
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	1ad3      	subs	r3, r2, r3
 800b314:	f241 3288 	movw	r2, #5000	; 0x1388
 800b318:	4293      	cmp	r3, r2
 800b31a:	d901      	bls.n	800b320 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800b31c:	2303      	movs	r3, #3
 800b31e:	e066      	b.n	800b3ee <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b320:	4b36      	ldr	r3, [pc, #216]	; (800b3fc <HAL_RCC_ClockConfig+0x1b4>)
 800b322:	689b      	ldr	r3, [r3, #8]
 800b324:	f003 020c 	and.w	r2, r3, #12
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	685b      	ldr	r3, [r3, #4]
 800b32c:	009b      	lsls	r3, r3, #2
 800b32e:	429a      	cmp	r2, r3
 800b330:	d1eb      	bne.n	800b30a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	f003 0302 	and.w	r3, r3, #2
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d008      	beq.n	800b350 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b33e:	4b2f      	ldr	r3, [pc, #188]	; (800b3fc <HAL_RCC_ClockConfig+0x1b4>)
 800b340:	689b      	ldr	r3, [r3, #8]
 800b342:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	689b      	ldr	r3, [r3, #8]
 800b34a:	492c      	ldr	r1, [pc, #176]	; (800b3fc <HAL_RCC_ClockConfig+0x1b4>)
 800b34c:	4313      	orrs	r3, r2
 800b34e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800b350:	4b29      	ldr	r3, [pc, #164]	; (800b3f8 <HAL_RCC_ClockConfig+0x1b0>)
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	f003 0307 	and.w	r3, r3, #7
 800b358:	683a      	ldr	r2, [r7, #0]
 800b35a:	429a      	cmp	r2, r3
 800b35c:	d210      	bcs.n	800b380 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b35e:	4b26      	ldr	r3, [pc, #152]	; (800b3f8 <HAL_RCC_ClockConfig+0x1b0>)
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	f023 0207 	bic.w	r2, r3, #7
 800b366:	4924      	ldr	r1, [pc, #144]	; (800b3f8 <HAL_RCC_ClockConfig+0x1b0>)
 800b368:	683b      	ldr	r3, [r7, #0]
 800b36a:	4313      	orrs	r3, r2
 800b36c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b36e:	4b22      	ldr	r3, [pc, #136]	; (800b3f8 <HAL_RCC_ClockConfig+0x1b0>)
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	f003 0307 	and.w	r3, r3, #7
 800b376:	683a      	ldr	r2, [r7, #0]
 800b378:	429a      	cmp	r2, r3
 800b37a:	d001      	beq.n	800b380 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800b37c:	2301      	movs	r3, #1
 800b37e:	e036      	b.n	800b3ee <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	f003 0304 	and.w	r3, r3, #4
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d008      	beq.n	800b39e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b38c:	4b1b      	ldr	r3, [pc, #108]	; (800b3fc <HAL_RCC_ClockConfig+0x1b4>)
 800b38e:	689b      	ldr	r3, [r3, #8]
 800b390:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	68db      	ldr	r3, [r3, #12]
 800b398:	4918      	ldr	r1, [pc, #96]	; (800b3fc <HAL_RCC_ClockConfig+0x1b4>)
 800b39a:	4313      	orrs	r3, r2
 800b39c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	f003 0308 	and.w	r3, r3, #8
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d009      	beq.n	800b3be <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800b3aa:	4b14      	ldr	r3, [pc, #80]	; (800b3fc <HAL_RCC_ClockConfig+0x1b4>)
 800b3ac:	689b      	ldr	r3, [r3, #8]
 800b3ae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	691b      	ldr	r3, [r3, #16]
 800b3b6:	00db      	lsls	r3, r3, #3
 800b3b8:	4910      	ldr	r1, [pc, #64]	; (800b3fc <HAL_RCC_ClockConfig+0x1b4>)
 800b3ba:	4313      	orrs	r3, r2
 800b3bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800b3be:	f000 f825 	bl	800b40c <HAL_RCC_GetSysClockFreq>
 800b3c2:	4601      	mov	r1, r0
 800b3c4:	4b0d      	ldr	r3, [pc, #52]	; (800b3fc <HAL_RCC_ClockConfig+0x1b4>)
 800b3c6:	689b      	ldr	r3, [r3, #8]
 800b3c8:	091b      	lsrs	r3, r3, #4
 800b3ca:	f003 030f 	and.w	r3, r3, #15
 800b3ce:	4a0c      	ldr	r2, [pc, #48]	; (800b400 <HAL_RCC_ClockConfig+0x1b8>)
 800b3d0:	5cd3      	ldrb	r3, [r2, r3]
 800b3d2:	f003 031f 	and.w	r3, r3, #31
 800b3d6:	fa21 f303 	lsr.w	r3, r1, r3
 800b3da:	4a0a      	ldr	r2, [pc, #40]	; (800b404 <HAL_RCC_ClockConfig+0x1bc>)
 800b3dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800b3de:	4b0a      	ldr	r3, [pc, #40]	; (800b408 <HAL_RCC_ClockConfig+0x1c0>)
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	4618      	mov	r0, r3
 800b3e4:	f7fc fe16 	bl	8008014 <HAL_InitTick>
 800b3e8:	4603      	mov	r3, r0
 800b3ea:	72fb      	strb	r3, [r7, #11]

  return status;
 800b3ec:	7afb      	ldrb	r3, [r7, #11]
}
 800b3ee:	4618      	mov	r0, r3
 800b3f0:	3710      	adds	r7, #16
 800b3f2:	46bd      	mov	sp, r7
 800b3f4:	bd80      	pop	{r7, pc}
 800b3f6:	bf00      	nop
 800b3f8:	40022000 	.word	0x40022000
 800b3fc:	40021000 	.word	0x40021000
 800b400:	080118ac 	.word	0x080118ac
 800b404:	20000000 	.word	0x20000000
 800b408:	200000dc 	.word	0x200000dc

0800b40c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b40c:	b480      	push	{r7}
 800b40e:	b089      	sub	sp, #36	; 0x24
 800b410:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800b412:	2300      	movs	r3, #0
 800b414:	61fb      	str	r3, [r7, #28]
 800b416:	2300      	movs	r3, #0
 800b418:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b41a:	4b3d      	ldr	r3, [pc, #244]	; (800b510 <HAL_RCC_GetSysClockFreq+0x104>)
 800b41c:	689b      	ldr	r3, [r3, #8]
 800b41e:	f003 030c 	and.w	r3, r3, #12
 800b422:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b424:	4b3a      	ldr	r3, [pc, #232]	; (800b510 <HAL_RCC_GetSysClockFreq+0x104>)
 800b426:	68db      	ldr	r3, [r3, #12]
 800b428:	f003 0303 	and.w	r3, r3, #3
 800b42c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800b42e:	693b      	ldr	r3, [r7, #16]
 800b430:	2b00      	cmp	r3, #0
 800b432:	d005      	beq.n	800b440 <HAL_RCC_GetSysClockFreq+0x34>
 800b434:	693b      	ldr	r3, [r7, #16]
 800b436:	2b0c      	cmp	r3, #12
 800b438:	d121      	bne.n	800b47e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	2b01      	cmp	r3, #1
 800b43e:	d11e      	bne.n	800b47e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800b440:	4b33      	ldr	r3, [pc, #204]	; (800b510 <HAL_RCC_GetSysClockFreq+0x104>)
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	f003 0308 	and.w	r3, r3, #8
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d107      	bne.n	800b45c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800b44c:	4b30      	ldr	r3, [pc, #192]	; (800b510 <HAL_RCC_GetSysClockFreq+0x104>)
 800b44e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b452:	0a1b      	lsrs	r3, r3, #8
 800b454:	f003 030f 	and.w	r3, r3, #15
 800b458:	61fb      	str	r3, [r7, #28]
 800b45a:	e005      	b.n	800b468 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800b45c:	4b2c      	ldr	r3, [pc, #176]	; (800b510 <HAL_RCC_GetSysClockFreq+0x104>)
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	091b      	lsrs	r3, r3, #4
 800b462:	f003 030f 	and.w	r3, r3, #15
 800b466:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800b468:	4a2a      	ldr	r2, [pc, #168]	; (800b514 <HAL_RCC_GetSysClockFreq+0x108>)
 800b46a:	69fb      	ldr	r3, [r7, #28]
 800b46c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b470:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800b472:	693b      	ldr	r3, [r7, #16]
 800b474:	2b00      	cmp	r3, #0
 800b476:	d10d      	bne.n	800b494 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800b478:	69fb      	ldr	r3, [r7, #28]
 800b47a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800b47c:	e00a      	b.n	800b494 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800b47e:	693b      	ldr	r3, [r7, #16]
 800b480:	2b04      	cmp	r3, #4
 800b482:	d102      	bne.n	800b48a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800b484:	4b24      	ldr	r3, [pc, #144]	; (800b518 <HAL_RCC_GetSysClockFreq+0x10c>)
 800b486:	61bb      	str	r3, [r7, #24]
 800b488:	e004      	b.n	800b494 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800b48a:	693b      	ldr	r3, [r7, #16]
 800b48c:	2b08      	cmp	r3, #8
 800b48e:	d101      	bne.n	800b494 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800b490:	4b22      	ldr	r3, [pc, #136]	; (800b51c <HAL_RCC_GetSysClockFreq+0x110>)
 800b492:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800b494:	693b      	ldr	r3, [r7, #16]
 800b496:	2b0c      	cmp	r3, #12
 800b498:	d133      	bne.n	800b502 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800b49a:	4b1d      	ldr	r3, [pc, #116]	; (800b510 <HAL_RCC_GetSysClockFreq+0x104>)
 800b49c:	68db      	ldr	r3, [r3, #12]
 800b49e:	f003 0303 	and.w	r3, r3, #3
 800b4a2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800b4a4:	68bb      	ldr	r3, [r7, #8]
 800b4a6:	2b02      	cmp	r3, #2
 800b4a8:	d002      	beq.n	800b4b0 <HAL_RCC_GetSysClockFreq+0xa4>
 800b4aa:	2b03      	cmp	r3, #3
 800b4ac:	d003      	beq.n	800b4b6 <HAL_RCC_GetSysClockFreq+0xaa>
 800b4ae:	e005      	b.n	800b4bc <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800b4b0:	4b19      	ldr	r3, [pc, #100]	; (800b518 <HAL_RCC_GetSysClockFreq+0x10c>)
 800b4b2:	617b      	str	r3, [r7, #20]
      break;
 800b4b4:	e005      	b.n	800b4c2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800b4b6:	4b19      	ldr	r3, [pc, #100]	; (800b51c <HAL_RCC_GetSysClockFreq+0x110>)
 800b4b8:	617b      	str	r3, [r7, #20]
      break;
 800b4ba:	e002      	b.n	800b4c2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800b4bc:	69fb      	ldr	r3, [r7, #28]
 800b4be:	617b      	str	r3, [r7, #20]
      break;
 800b4c0:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800b4c2:	4b13      	ldr	r3, [pc, #76]	; (800b510 <HAL_RCC_GetSysClockFreq+0x104>)
 800b4c4:	68db      	ldr	r3, [r3, #12]
 800b4c6:	091b      	lsrs	r3, r3, #4
 800b4c8:	f003 0307 	and.w	r3, r3, #7
 800b4cc:	3301      	adds	r3, #1
 800b4ce:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800b4d0:	4b0f      	ldr	r3, [pc, #60]	; (800b510 <HAL_RCC_GetSysClockFreq+0x104>)
 800b4d2:	68db      	ldr	r3, [r3, #12]
 800b4d4:	0a1b      	lsrs	r3, r3, #8
 800b4d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b4da:	697a      	ldr	r2, [r7, #20]
 800b4dc:	fb02 f203 	mul.w	r2, r2, r3
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	fbb2 f3f3 	udiv	r3, r2, r3
 800b4e6:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800b4e8:	4b09      	ldr	r3, [pc, #36]	; (800b510 <HAL_RCC_GetSysClockFreq+0x104>)
 800b4ea:	68db      	ldr	r3, [r3, #12]
 800b4ec:	0e5b      	lsrs	r3, r3, #25
 800b4ee:	f003 0303 	and.w	r3, r3, #3
 800b4f2:	3301      	adds	r3, #1
 800b4f4:	005b      	lsls	r3, r3, #1
 800b4f6:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800b4f8:	697a      	ldr	r2, [r7, #20]
 800b4fa:	683b      	ldr	r3, [r7, #0]
 800b4fc:	fbb2 f3f3 	udiv	r3, r2, r3
 800b500:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800b502:	69bb      	ldr	r3, [r7, #24]
}
 800b504:	4618      	mov	r0, r3
 800b506:	3724      	adds	r7, #36	; 0x24
 800b508:	46bd      	mov	sp, r7
 800b50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b50e:	4770      	bx	lr
 800b510:	40021000 	.word	0x40021000
 800b514:	080118c4 	.word	0x080118c4
 800b518:	00f42400 	.word	0x00f42400
 800b51c:	007a1200 	.word	0x007a1200

0800b520 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b520:	b480      	push	{r7}
 800b522:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b524:	4b03      	ldr	r3, [pc, #12]	; (800b534 <HAL_RCC_GetHCLKFreq+0x14>)
 800b526:	681b      	ldr	r3, [r3, #0]
}
 800b528:	4618      	mov	r0, r3
 800b52a:	46bd      	mov	sp, r7
 800b52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b530:	4770      	bx	lr
 800b532:	bf00      	nop
 800b534:	20000000 	.word	0x20000000

0800b538 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b538:	b580      	push	{r7, lr}
 800b53a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800b53c:	f7ff fff0 	bl	800b520 <HAL_RCC_GetHCLKFreq>
 800b540:	4601      	mov	r1, r0
 800b542:	4b06      	ldr	r3, [pc, #24]	; (800b55c <HAL_RCC_GetPCLK1Freq+0x24>)
 800b544:	689b      	ldr	r3, [r3, #8]
 800b546:	0a1b      	lsrs	r3, r3, #8
 800b548:	f003 0307 	and.w	r3, r3, #7
 800b54c:	4a04      	ldr	r2, [pc, #16]	; (800b560 <HAL_RCC_GetPCLK1Freq+0x28>)
 800b54e:	5cd3      	ldrb	r3, [r2, r3]
 800b550:	f003 031f 	and.w	r3, r3, #31
 800b554:	fa21 f303 	lsr.w	r3, r1, r3
}
 800b558:	4618      	mov	r0, r3
 800b55a:	bd80      	pop	{r7, pc}
 800b55c:	40021000 	.word	0x40021000
 800b560:	080118bc 	.word	0x080118bc

0800b564 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b564:	b580      	push	{r7, lr}
 800b566:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800b568:	f7ff ffda 	bl	800b520 <HAL_RCC_GetHCLKFreq>
 800b56c:	4601      	mov	r1, r0
 800b56e:	4b06      	ldr	r3, [pc, #24]	; (800b588 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b570:	689b      	ldr	r3, [r3, #8]
 800b572:	0adb      	lsrs	r3, r3, #11
 800b574:	f003 0307 	and.w	r3, r3, #7
 800b578:	4a04      	ldr	r2, [pc, #16]	; (800b58c <HAL_RCC_GetPCLK2Freq+0x28>)
 800b57a:	5cd3      	ldrb	r3, [r2, r3]
 800b57c:	f003 031f 	and.w	r3, r3, #31
 800b580:	fa21 f303 	lsr.w	r3, r1, r3
}
 800b584:	4618      	mov	r0, r3
 800b586:	bd80      	pop	{r7, pc}
 800b588:	40021000 	.word	0x40021000
 800b58c:	080118bc 	.word	0x080118bc

0800b590 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800b590:	b580      	push	{r7, lr}
 800b592:	b086      	sub	sp, #24
 800b594:	af00      	add	r7, sp, #0
 800b596:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800b598:	2300      	movs	r3, #0
 800b59a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800b59c:	4b2a      	ldr	r3, [pc, #168]	; (800b648 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800b59e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b5a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d003      	beq.n	800b5b0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800b5a8:	f7ff f9ca 	bl	800a940 <HAL_PWREx_GetVoltageRange>
 800b5ac:	6178      	str	r0, [r7, #20]
 800b5ae:	e014      	b.n	800b5da <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800b5b0:	4b25      	ldr	r3, [pc, #148]	; (800b648 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800b5b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b5b4:	4a24      	ldr	r2, [pc, #144]	; (800b648 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800b5b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b5ba:	6593      	str	r3, [r2, #88]	; 0x58
 800b5bc:	4b22      	ldr	r3, [pc, #136]	; (800b648 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800b5be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b5c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b5c4:	60fb      	str	r3, [r7, #12]
 800b5c6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800b5c8:	f7ff f9ba 	bl	800a940 <HAL_PWREx_GetVoltageRange>
 800b5cc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800b5ce:	4b1e      	ldr	r3, [pc, #120]	; (800b648 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800b5d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b5d2:	4a1d      	ldr	r2, [pc, #116]	; (800b648 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800b5d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b5d8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800b5da:	697b      	ldr	r3, [r7, #20]
 800b5dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b5e0:	d10b      	bne.n	800b5fa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	2b80      	cmp	r3, #128	; 0x80
 800b5e6:	d919      	bls.n	800b61c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	2ba0      	cmp	r3, #160	; 0xa0
 800b5ec:	d902      	bls.n	800b5f4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800b5ee:	2302      	movs	r3, #2
 800b5f0:	613b      	str	r3, [r7, #16]
 800b5f2:	e013      	b.n	800b61c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800b5f4:	2301      	movs	r3, #1
 800b5f6:	613b      	str	r3, [r7, #16]
 800b5f8:	e010      	b.n	800b61c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	2b80      	cmp	r3, #128	; 0x80
 800b5fe:	d902      	bls.n	800b606 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800b600:	2303      	movs	r3, #3
 800b602:	613b      	str	r3, [r7, #16]
 800b604:	e00a      	b.n	800b61c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	2b80      	cmp	r3, #128	; 0x80
 800b60a:	d102      	bne.n	800b612 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800b60c:	2302      	movs	r3, #2
 800b60e:	613b      	str	r3, [r7, #16]
 800b610:	e004      	b.n	800b61c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	2b70      	cmp	r3, #112	; 0x70
 800b616:	d101      	bne.n	800b61c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800b618:	2301      	movs	r3, #1
 800b61a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800b61c:	4b0b      	ldr	r3, [pc, #44]	; (800b64c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	f023 0207 	bic.w	r2, r3, #7
 800b624:	4909      	ldr	r1, [pc, #36]	; (800b64c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800b626:	693b      	ldr	r3, [r7, #16]
 800b628:	4313      	orrs	r3, r2
 800b62a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800b62c:	4b07      	ldr	r3, [pc, #28]	; (800b64c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	f003 0307 	and.w	r3, r3, #7
 800b634:	693a      	ldr	r2, [r7, #16]
 800b636:	429a      	cmp	r2, r3
 800b638:	d001      	beq.n	800b63e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800b63a:	2301      	movs	r3, #1
 800b63c:	e000      	b.n	800b640 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800b63e:	2300      	movs	r3, #0
}
 800b640:	4618      	mov	r0, r3
 800b642:	3718      	adds	r7, #24
 800b644:	46bd      	mov	sp, r7
 800b646:	bd80      	pop	{r7, pc}
 800b648:	40021000 	.word	0x40021000
 800b64c:	40022000 	.word	0x40022000

0800b650 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b650:	b580      	push	{r7, lr}
 800b652:	b086      	sub	sp, #24
 800b654:	af00      	add	r7, sp, #0
 800b656:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b658:	2300      	movs	r3, #0
 800b65a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b65c:	2300      	movs	r3, #0
 800b65e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d02f      	beq.n	800b6cc <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b670:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b674:	d005      	beq.n	800b682 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800b676:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800b67a:	d015      	beq.n	800b6a8 <HAL_RCCEx_PeriphCLKConfig+0x58>
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d007      	beq.n	800b690 <HAL_RCCEx_PeriphCLKConfig+0x40>
 800b680:	e00f      	b.n	800b6a2 <HAL_RCCEx_PeriphCLKConfig+0x52>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800b682:	4b5d      	ldr	r3, [pc, #372]	; (800b7f8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800b684:	68db      	ldr	r3, [r3, #12]
 800b686:	4a5c      	ldr	r2, [pc, #368]	; (800b7f8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800b688:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b68c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800b68e:	e00c      	b.n	800b6aa <HAL_RCCEx_PeriphCLKConfig+0x5a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	3304      	adds	r3, #4
 800b694:	2100      	movs	r1, #0
 800b696:	4618      	mov	r0, r3
 800b698:	f000 fa1e 	bl	800bad8 <RCCEx_PLLSAI1_Config>
 800b69c:	4603      	mov	r3, r0
 800b69e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800b6a0:	e003      	b.n	800b6aa <HAL_RCCEx_PeriphCLKConfig+0x5a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b6a2:	2301      	movs	r3, #1
 800b6a4:	74fb      	strb	r3, [r7, #19]
      break;
 800b6a6:	e000      	b.n	800b6aa <HAL_RCCEx_PeriphCLKConfig+0x5a>
      break;
 800b6a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b6aa:	7cfb      	ldrb	r3, [r7, #19]
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d10b      	bne.n	800b6c8 <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b6b0:	4b51      	ldr	r3, [pc, #324]	; (800b7f8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800b6b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b6b6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b6be:	494e      	ldr	r1, [pc, #312]	; (800b7f8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800b6c0:	4313      	orrs	r3, r2
 800b6c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800b6c6:	e001      	b.n	800b6cc <HAL_RCCEx_PeriphCLKConfig+0x7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b6c8:	7cfb      	ldrb	r3, [r7, #19]
 800b6ca:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	f000 809e 	beq.w	800b816 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b6da:	2300      	movs	r3, #0
 800b6dc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800b6de:	4b46      	ldr	r3, [pc, #280]	; (800b7f8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800b6e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b6e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d101      	bne.n	800b6ee <HAL_RCCEx_PeriphCLKConfig+0x9e>
 800b6ea:	2301      	movs	r3, #1
 800b6ec:	e000      	b.n	800b6f0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 800b6ee:	2300      	movs	r3, #0
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d00d      	beq.n	800b710 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b6f4:	4b40      	ldr	r3, [pc, #256]	; (800b7f8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800b6f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b6f8:	4a3f      	ldr	r2, [pc, #252]	; (800b7f8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800b6fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b6fe:	6593      	str	r3, [r2, #88]	; 0x58
 800b700:	4b3d      	ldr	r3, [pc, #244]	; (800b7f8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800b702:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b704:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b708:	60bb      	str	r3, [r7, #8]
 800b70a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b70c:	2301      	movs	r3, #1
 800b70e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b710:	4b3a      	ldr	r3, [pc, #232]	; (800b7fc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	4a39      	ldr	r2, [pc, #228]	; (800b7fc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800b716:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b71a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b71c:	f7fc fcc6 	bl	80080ac <HAL_GetTick>
 800b720:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800b722:	e009      	b.n	800b738 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b724:	f7fc fcc2 	bl	80080ac <HAL_GetTick>
 800b728:	4602      	mov	r2, r0
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	1ad3      	subs	r3, r2, r3
 800b72e:	2b02      	cmp	r3, #2
 800b730:	d902      	bls.n	800b738 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        ret = HAL_TIMEOUT;
 800b732:	2303      	movs	r3, #3
 800b734:	74fb      	strb	r3, [r7, #19]
        break;
 800b736:	e005      	b.n	800b744 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800b738:	4b30      	ldr	r3, [pc, #192]	; (800b7fc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b740:	2b00      	cmp	r3, #0
 800b742:	d0ef      	beq.n	800b724 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      }
    }

    if(ret == HAL_OK)
 800b744:	7cfb      	ldrb	r3, [r7, #19]
 800b746:	2b00      	cmp	r3, #0
 800b748:	d15a      	bne.n	800b800 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800b74a:	4b2b      	ldr	r3, [pc, #172]	; (800b7f8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800b74c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b750:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b754:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800b756:	697b      	ldr	r3, [r7, #20]
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d01e      	beq.n	800b79a <HAL_RCCEx_PeriphCLKConfig+0x14a>
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b760:	697a      	ldr	r2, [r7, #20]
 800b762:	429a      	cmp	r2, r3
 800b764:	d019      	beq.n	800b79a <HAL_RCCEx_PeriphCLKConfig+0x14a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800b766:	4b24      	ldr	r3, [pc, #144]	; (800b7f8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800b768:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b76c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b770:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b772:	4b21      	ldr	r3, [pc, #132]	; (800b7f8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800b774:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b778:	4a1f      	ldr	r2, [pc, #124]	; (800b7f8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800b77a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b77e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b782:	4b1d      	ldr	r3, [pc, #116]	; (800b7f8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800b784:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b788:	4a1b      	ldr	r2, [pc, #108]	; (800b7f8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800b78a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b78e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800b792:	4a19      	ldr	r2, [pc, #100]	; (800b7f8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800b794:	697b      	ldr	r3, [r7, #20]
 800b796:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800b79a:	697b      	ldr	r3, [r7, #20]
 800b79c:	f003 0301 	and.w	r3, r3, #1
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d016      	beq.n	800b7d2 <HAL_RCCEx_PeriphCLKConfig+0x182>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b7a4:	f7fc fc82 	bl	80080ac <HAL_GetTick>
 800b7a8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b7aa:	e00b      	b.n	800b7c4 <HAL_RCCEx_PeriphCLKConfig+0x174>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b7ac:	f7fc fc7e 	bl	80080ac <HAL_GetTick>
 800b7b0:	4602      	mov	r2, r0
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	1ad3      	subs	r3, r2, r3
 800b7b6:	f241 3288 	movw	r2, #5000	; 0x1388
 800b7ba:	4293      	cmp	r3, r2
 800b7bc:	d902      	bls.n	800b7c4 <HAL_RCCEx_PeriphCLKConfig+0x174>
          {
            ret = HAL_TIMEOUT;
 800b7be:	2303      	movs	r3, #3
 800b7c0:	74fb      	strb	r3, [r7, #19]
            break;
 800b7c2:	e006      	b.n	800b7d2 <HAL_RCCEx_PeriphCLKConfig+0x182>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b7c4:	4b0c      	ldr	r3, [pc, #48]	; (800b7f8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800b7c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b7ca:	f003 0302 	and.w	r3, r3, #2
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d0ec      	beq.n	800b7ac <HAL_RCCEx_PeriphCLKConfig+0x15c>
          }
        }
      }

      if(ret == HAL_OK)
 800b7d2:	7cfb      	ldrb	r3, [r7, #19]
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d10b      	bne.n	800b7f0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b7d8:	4b07      	ldr	r3, [pc, #28]	; (800b7f8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800b7da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b7de:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b7e6:	4904      	ldr	r1, [pc, #16]	; (800b7f8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800b7e8:	4313      	orrs	r3, r2
 800b7ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800b7ee:	e009      	b.n	800b804 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b7f0:	7cfb      	ldrb	r3, [r7, #19]
 800b7f2:	74bb      	strb	r3, [r7, #18]
 800b7f4:	e006      	b.n	800b804 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800b7f6:	bf00      	nop
 800b7f8:	40021000 	.word	0x40021000
 800b7fc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b800:	7cfb      	ldrb	r3, [r7, #19]
 800b802:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800b804:	7c7b      	ldrb	r3, [r7, #17]
 800b806:	2b01      	cmp	r3, #1
 800b808:	d105      	bne.n	800b816 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b80a:	4bb2      	ldr	r3, [pc, #712]	; (800bad4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800b80c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b80e:	4ab1      	ldr	r2, [pc, #708]	; (800bad4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800b810:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b814:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	f003 0301 	and.w	r3, r3, #1
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d00a      	beq.n	800b838 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800b822:	4bac      	ldr	r3, [pc, #688]	; (800bad4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800b824:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b828:	f023 0203 	bic.w	r2, r3, #3
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	6a1b      	ldr	r3, [r3, #32]
 800b830:	49a8      	ldr	r1, [pc, #672]	; (800bad4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800b832:	4313      	orrs	r3, r2
 800b834:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	f003 0302 	and.w	r3, r3, #2
 800b840:	2b00      	cmp	r3, #0
 800b842:	d00a      	beq.n	800b85a <HAL_RCCEx_PeriphCLKConfig+0x20a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800b844:	4ba3      	ldr	r3, [pc, #652]	; (800bad4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800b846:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b84a:	f023 020c 	bic.w	r2, r3, #12
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b852:	49a0      	ldr	r1, [pc, #640]	; (800bad4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800b854:	4313      	orrs	r3, r2
 800b856:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	f003 0304 	and.w	r3, r3, #4
 800b862:	2b00      	cmp	r3, #0
 800b864:	d00a      	beq.n	800b87c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800b866:	4b9b      	ldr	r3, [pc, #620]	; (800bad4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800b868:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b86c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b874:	4997      	ldr	r1, [pc, #604]	; (800bad4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800b876:	4313      	orrs	r3, r2
 800b878:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	f003 0320 	and.w	r3, r3, #32
 800b884:	2b00      	cmp	r3, #0
 800b886:	d00a      	beq.n	800b89e <HAL_RCCEx_PeriphCLKConfig+0x24e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b888:	4b92      	ldr	r3, [pc, #584]	; (800bad4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800b88a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b88e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b896:	498f      	ldr	r1, [pc, #572]	; (800bad4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800b898:	4313      	orrs	r3, r2
 800b89a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d00a      	beq.n	800b8c0 <HAL_RCCEx_PeriphCLKConfig+0x270>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b8aa:	4b8a      	ldr	r3, [pc, #552]	; (800bad4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800b8ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b8b0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b8b8:	4986      	ldr	r1, [pc, #536]	; (800bad4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800b8ba:	4313      	orrs	r3, r2
 800b8bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d00a      	beq.n	800b8e2 <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b8cc:	4b81      	ldr	r3, [pc, #516]	; (800bad4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800b8ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b8d2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8da:	497e      	ldr	r1, [pc, #504]	; (800bad4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800b8dc:	4313      	orrs	r3, r2
 800b8de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d00a      	beq.n	800b904 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800b8ee:	4b79      	ldr	r3, [pc, #484]	; (800bad4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800b8f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b8f4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8fc:	4975      	ldr	r1, [pc, #468]	; (800bad4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800b8fe:	4313      	orrs	r3, r2
 800b900:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d00a      	beq.n	800b926 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800b910:	4b70      	ldr	r3, [pc, #448]	; (800bad4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800b912:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b916:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b91e:	496d      	ldr	r1, [pc, #436]	; (800bad4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800b920:	4313      	orrs	r3, r2
 800b922:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d00a      	beq.n	800b948 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800b932:	4b68      	ldr	r3, [pc, #416]	; (800bad4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800b934:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b938:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b940:	4964      	ldr	r1, [pc, #400]	; (800bad4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800b942:	4313      	orrs	r3, r2
 800b944:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b950:	2b00      	cmp	r3, #0
 800b952:	d028      	beq.n	800b9a6 <HAL_RCCEx_PeriphCLKConfig+0x356>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b954:	4b5f      	ldr	r3, [pc, #380]	; (800bad4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800b956:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b95a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b962:	495c      	ldr	r1, [pc, #368]	; (800bad4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800b964:	4313      	orrs	r3, r2
 800b966:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b96e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b972:	d106      	bne.n	800b982 <HAL_RCCEx_PeriphCLKConfig+0x332>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b974:	4b57      	ldr	r3, [pc, #348]	; (800bad4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800b976:	68db      	ldr	r3, [r3, #12]
 800b978:	4a56      	ldr	r2, [pc, #344]	; (800bad4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800b97a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b97e:	60d3      	str	r3, [r2, #12]
 800b980:	e011      	b.n	800b9a6 <HAL_RCCEx_PeriphCLKConfig+0x356>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b986:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b98a:	d10c      	bne.n	800b9a6 <HAL_RCCEx_PeriphCLKConfig+0x356>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	3304      	adds	r3, #4
 800b990:	2101      	movs	r1, #1
 800b992:	4618      	mov	r0, r3
 800b994:	f000 f8a0 	bl	800bad8 <RCCEx_PLLSAI1_Config>
 800b998:	4603      	mov	r3, r0
 800b99a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800b99c:	7cfb      	ldrb	r3, [r7, #19]
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d001      	beq.n	800b9a6 <HAL_RCCEx_PeriphCLKConfig+0x356>
        {
          /* set overall return value */
          status = ret;
 800b9a2:	7cfb      	ldrb	r3, [r7, #19]
 800b9a4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d028      	beq.n	800ba04 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800b9b2:	4b48      	ldr	r3, [pc, #288]	; (800bad4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800b9b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b9b8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b9c0:	4944      	ldr	r1, [pc, #272]	; (800bad4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800b9c2:	4313      	orrs	r3, r2
 800b9c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b9cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b9d0:	d106      	bne.n	800b9e0 <HAL_RCCEx_PeriphCLKConfig+0x390>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b9d2:	4b40      	ldr	r3, [pc, #256]	; (800bad4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800b9d4:	68db      	ldr	r3, [r3, #12]
 800b9d6:	4a3f      	ldr	r2, [pc, #252]	; (800bad4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800b9d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b9dc:	60d3      	str	r3, [r2, #12]
 800b9de:	e011      	b.n	800ba04 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b9e4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b9e8:	d10c      	bne.n	800ba04 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	3304      	adds	r3, #4
 800b9ee:	2101      	movs	r1, #1
 800b9f0:	4618      	mov	r0, r3
 800b9f2:	f000 f871 	bl	800bad8 <RCCEx_PLLSAI1_Config>
 800b9f6:	4603      	mov	r3, r0
 800b9f8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800b9fa:	7cfb      	ldrb	r3, [r7, #19]
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d001      	beq.n	800ba04 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
      {
        /* set overall return value */
        status = ret;
 800ba00:	7cfb      	ldrb	r3, [r7, #19]
 800ba02:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d028      	beq.n	800ba62 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800ba10:	4b30      	ldr	r3, [pc, #192]	; (800bad4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800ba12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ba16:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba1e:	492d      	ldr	r1, [pc, #180]	; (800bad4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800ba20:	4313      	orrs	r3, r2
 800ba22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba2a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ba2e:	d106      	bne.n	800ba3e <HAL_RCCEx_PeriphCLKConfig+0x3ee>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800ba30:	4b28      	ldr	r3, [pc, #160]	; (800bad4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800ba32:	68db      	ldr	r3, [r3, #12]
 800ba34:	4a27      	ldr	r2, [pc, #156]	; (800bad4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800ba36:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ba3a:	60d3      	str	r3, [r2, #12]
 800ba3c:	e011      	b.n	800ba62 <HAL_RCCEx_PeriphCLKConfig+0x412>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba42:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ba46:	d10c      	bne.n	800ba62 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	3304      	adds	r3, #4
 800ba4c:	2101      	movs	r1, #1
 800ba4e:	4618      	mov	r0, r3
 800ba50:	f000 f842 	bl	800bad8 <RCCEx_PLLSAI1_Config>
 800ba54:	4603      	mov	r3, r0
 800ba56:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800ba58:	7cfb      	ldrb	r3, [r7, #19]
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d001      	beq.n	800ba62 <HAL_RCCEx_PeriphCLKConfig+0x412>
      {
        /* set overall return value */
        status = ret;
 800ba5e:	7cfb      	ldrb	r3, [r7, #19]
 800ba60:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d01c      	beq.n	800baa8 <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800ba6e:	4b19      	ldr	r3, [pc, #100]	; (800bad4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800ba70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ba74:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba7c:	4915      	ldr	r1, [pc, #84]	; (800bad4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800ba7e:	4313      	orrs	r3, r2
 800ba80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba88:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ba8c:	d10c      	bne.n	800baa8 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	3304      	adds	r3, #4
 800ba92:	2102      	movs	r1, #2
 800ba94:	4618      	mov	r0, r3
 800ba96:	f000 f81f 	bl	800bad8 <RCCEx_PLLSAI1_Config>
 800ba9a:	4603      	mov	r3, r0
 800ba9c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800ba9e:	7cfb      	ldrb	r3, [r7, #19]
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d001      	beq.n	800baa8 <HAL_RCCEx_PeriphCLKConfig+0x458>
      {
        /* set overall return value */
        status = ret;
 800baa4:	7cfb      	ldrb	r3, [r7, #19]
 800baa6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d00a      	beq.n	800baca <HAL_RCCEx_PeriphCLKConfig+0x47a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800bab4:	4b07      	ldr	r3, [pc, #28]	; (800bad4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800bab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800baba:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bac2:	4904      	ldr	r1, [pc, #16]	; (800bad4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800bac4:	4313      	orrs	r3, r2
 800bac6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800baca:	7cbb      	ldrb	r3, [r7, #18]
}
 800bacc:	4618      	mov	r0, r3
 800bace:	3718      	adds	r7, #24
 800bad0:	46bd      	mov	sp, r7
 800bad2:	bd80      	pop	{r7, pc}
 800bad4:	40021000 	.word	0x40021000

0800bad8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800bad8:	b580      	push	{r7, lr}
 800bada:	b084      	sub	sp, #16
 800badc:	af00      	add	r7, sp, #0
 800bade:	6078      	str	r0, [r7, #4]
 800bae0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800bae2:	2300      	movs	r3, #0
 800bae4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800bae6:	4b73      	ldr	r3, [pc, #460]	; (800bcb4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800bae8:	68db      	ldr	r3, [r3, #12]
 800baea:	f003 0303 	and.w	r3, r3, #3
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d018      	beq.n	800bb24 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800baf2:	4b70      	ldr	r3, [pc, #448]	; (800bcb4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800baf4:	68db      	ldr	r3, [r3, #12]
 800baf6:	f003 0203 	and.w	r2, r3, #3
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	429a      	cmp	r2, r3
 800bb00:	d10d      	bne.n	800bb1e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	681b      	ldr	r3, [r3, #0]
       ||
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d009      	beq.n	800bb1e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800bb0a:	4b6a      	ldr	r3, [pc, #424]	; (800bcb4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800bb0c:	68db      	ldr	r3, [r3, #12]
 800bb0e:	091b      	lsrs	r3, r3, #4
 800bb10:	f003 0307 	and.w	r3, r3, #7
 800bb14:	1c5a      	adds	r2, r3, #1
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	685b      	ldr	r3, [r3, #4]
       ||
 800bb1a:	429a      	cmp	r2, r3
 800bb1c:	d044      	beq.n	800bba8 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800bb1e:	2301      	movs	r3, #1
 800bb20:	73fb      	strb	r3, [r7, #15]
 800bb22:	e041      	b.n	800bba8 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	2b02      	cmp	r3, #2
 800bb2a:	d00c      	beq.n	800bb46 <RCCEx_PLLSAI1_Config+0x6e>
 800bb2c:	2b03      	cmp	r3, #3
 800bb2e:	d013      	beq.n	800bb58 <RCCEx_PLLSAI1_Config+0x80>
 800bb30:	2b01      	cmp	r3, #1
 800bb32:	d120      	bne.n	800bb76 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800bb34:	4b5f      	ldr	r3, [pc, #380]	; (800bcb4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	f003 0302 	and.w	r3, r3, #2
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d11d      	bne.n	800bb7c <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 800bb40:	2301      	movs	r3, #1
 800bb42:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800bb44:	e01a      	b.n	800bb7c <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800bb46:	4b5b      	ldr	r3, [pc, #364]	; (800bcb4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d116      	bne.n	800bb80 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 800bb52:	2301      	movs	r3, #1
 800bb54:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800bb56:	e013      	b.n	800bb80 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800bb58:	4b56      	ldr	r3, [pc, #344]	; (800bcb4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d10f      	bne.n	800bb84 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800bb64:	4b53      	ldr	r3, [pc, #332]	; (800bcb4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d109      	bne.n	800bb84 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 800bb70:	2301      	movs	r3, #1
 800bb72:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800bb74:	e006      	b.n	800bb84 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 800bb76:	2301      	movs	r3, #1
 800bb78:	73fb      	strb	r3, [r7, #15]
      break;
 800bb7a:	e004      	b.n	800bb86 <RCCEx_PLLSAI1_Config+0xae>
      break;
 800bb7c:	bf00      	nop
 800bb7e:	e002      	b.n	800bb86 <RCCEx_PLLSAI1_Config+0xae>
      break;
 800bb80:	bf00      	nop
 800bb82:	e000      	b.n	800bb86 <RCCEx_PLLSAI1_Config+0xae>
      break;
 800bb84:	bf00      	nop
    }

    if(status == HAL_OK)
 800bb86:	7bfb      	ldrb	r3, [r7, #15]
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d10d      	bne.n	800bba8 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800bb8c:	4b49      	ldr	r3, [pc, #292]	; (800bcb4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800bb8e:	68db      	ldr	r3, [r3, #12]
 800bb90:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	6819      	ldr	r1, [r3, #0]
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	685b      	ldr	r3, [r3, #4]
 800bb9c:	3b01      	subs	r3, #1
 800bb9e:	011b      	lsls	r3, r3, #4
 800bba0:	430b      	orrs	r3, r1
 800bba2:	4944      	ldr	r1, [pc, #272]	; (800bcb4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800bba4:	4313      	orrs	r3, r2
 800bba6:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800bba8:	7bfb      	ldrb	r3, [r7, #15]
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d17c      	bne.n	800bca8 <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800bbae:	4b41      	ldr	r3, [pc, #260]	; (800bcb4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	4a40      	ldr	r2, [pc, #256]	; (800bcb4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800bbb4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800bbb8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bbba:	f7fc fa77 	bl	80080ac <HAL_GetTick>
 800bbbe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800bbc0:	e009      	b.n	800bbd6 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800bbc2:	f7fc fa73 	bl	80080ac <HAL_GetTick>
 800bbc6:	4602      	mov	r2, r0
 800bbc8:	68bb      	ldr	r3, [r7, #8]
 800bbca:	1ad3      	subs	r3, r2, r3
 800bbcc:	2b02      	cmp	r3, #2
 800bbce:	d902      	bls.n	800bbd6 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 800bbd0:	2303      	movs	r3, #3
 800bbd2:	73fb      	strb	r3, [r7, #15]
        break;
 800bbd4:	e005      	b.n	800bbe2 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800bbd6:	4b37      	ldr	r3, [pc, #220]	; (800bcb4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d1ef      	bne.n	800bbc2 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800bbe2:	7bfb      	ldrb	r3, [r7, #15]
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d15f      	bne.n	800bca8 <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800bbe8:	683b      	ldr	r3, [r7, #0]
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d110      	bne.n	800bc10 <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800bbee:	4b31      	ldr	r3, [pc, #196]	; (800bcb4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800bbf0:	691b      	ldr	r3, [r3, #16]
 800bbf2:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800bbf6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800bbfa:	687a      	ldr	r2, [r7, #4]
 800bbfc:	6892      	ldr	r2, [r2, #8]
 800bbfe:	0211      	lsls	r1, r2, #8
 800bc00:	687a      	ldr	r2, [r7, #4]
 800bc02:	68d2      	ldr	r2, [r2, #12]
 800bc04:	06d2      	lsls	r2, r2, #27
 800bc06:	430a      	orrs	r2, r1
 800bc08:	492a      	ldr	r1, [pc, #168]	; (800bcb4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800bc0a:	4313      	orrs	r3, r2
 800bc0c:	610b      	str	r3, [r1, #16]
 800bc0e:	e027      	b.n	800bc60 <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800bc10:	683b      	ldr	r3, [r7, #0]
 800bc12:	2b01      	cmp	r3, #1
 800bc14:	d112      	bne.n	800bc3c <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800bc16:	4b27      	ldr	r3, [pc, #156]	; (800bcb4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800bc18:	691b      	ldr	r3, [r3, #16]
 800bc1a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800bc1e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800bc22:	687a      	ldr	r2, [r7, #4]
 800bc24:	6892      	ldr	r2, [r2, #8]
 800bc26:	0211      	lsls	r1, r2, #8
 800bc28:	687a      	ldr	r2, [r7, #4]
 800bc2a:	6912      	ldr	r2, [r2, #16]
 800bc2c:	0852      	lsrs	r2, r2, #1
 800bc2e:	3a01      	subs	r2, #1
 800bc30:	0552      	lsls	r2, r2, #21
 800bc32:	430a      	orrs	r2, r1
 800bc34:	491f      	ldr	r1, [pc, #124]	; (800bcb4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800bc36:	4313      	orrs	r3, r2
 800bc38:	610b      	str	r3, [r1, #16]
 800bc3a:	e011      	b.n	800bc60 <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800bc3c:	4b1d      	ldr	r3, [pc, #116]	; (800bcb4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800bc3e:	691b      	ldr	r3, [r3, #16]
 800bc40:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800bc44:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800bc48:	687a      	ldr	r2, [r7, #4]
 800bc4a:	6892      	ldr	r2, [r2, #8]
 800bc4c:	0211      	lsls	r1, r2, #8
 800bc4e:	687a      	ldr	r2, [r7, #4]
 800bc50:	6952      	ldr	r2, [r2, #20]
 800bc52:	0852      	lsrs	r2, r2, #1
 800bc54:	3a01      	subs	r2, #1
 800bc56:	0652      	lsls	r2, r2, #25
 800bc58:	430a      	orrs	r2, r1
 800bc5a:	4916      	ldr	r1, [pc, #88]	; (800bcb4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800bc5c:	4313      	orrs	r3, r2
 800bc5e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800bc60:	4b14      	ldr	r3, [pc, #80]	; (800bcb4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	4a13      	ldr	r2, [pc, #76]	; (800bcb4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800bc66:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800bc6a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bc6c:	f7fc fa1e 	bl	80080ac <HAL_GetTick>
 800bc70:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800bc72:	e009      	b.n	800bc88 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800bc74:	f7fc fa1a 	bl	80080ac <HAL_GetTick>
 800bc78:	4602      	mov	r2, r0
 800bc7a:	68bb      	ldr	r3, [r7, #8]
 800bc7c:	1ad3      	subs	r3, r2, r3
 800bc7e:	2b02      	cmp	r3, #2
 800bc80:	d902      	bls.n	800bc88 <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 800bc82:	2303      	movs	r3, #3
 800bc84:	73fb      	strb	r3, [r7, #15]
          break;
 800bc86:	e005      	b.n	800bc94 <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800bc88:	4b0a      	ldr	r3, [pc, #40]	; (800bcb4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d0ef      	beq.n	800bc74 <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 800bc94:	7bfb      	ldrb	r3, [r7, #15]
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d106      	bne.n	800bca8 <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800bc9a:	4b06      	ldr	r3, [pc, #24]	; (800bcb4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800bc9c:	691a      	ldr	r2, [r3, #16]
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	699b      	ldr	r3, [r3, #24]
 800bca2:	4904      	ldr	r1, [pc, #16]	; (800bcb4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800bca4:	4313      	orrs	r3, r2
 800bca6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800bca8:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcaa:	4618      	mov	r0, r3
 800bcac:	3710      	adds	r7, #16
 800bcae:	46bd      	mov	sp, r7
 800bcb0:	bd80      	pop	{r7, pc}
 800bcb2:	bf00      	nop
 800bcb4:	40021000 	.word	0x40021000

0800bcb8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bcb8:	b480      	push	{r7}
 800bcba:	b085      	sub	sp, #20
 800bcbc:	af00      	add	r7, sp, #0
 800bcbe:	6078      	str	r0, [r7, #4]
 800bcc0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bcc8:	2b01      	cmp	r3, #1
 800bcca:	d101      	bne.n	800bcd0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bccc:	2302      	movs	r3, #2
 800bcce:	e04f      	b.n	800bd70 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	2201      	movs	r2, #1
 800bcd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	2202      	movs	r2, #2
 800bcdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	685b      	ldr	r3, [r3, #4]
 800bce6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	689b      	ldr	r3, [r3, #8]
 800bcee:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	4a21      	ldr	r2, [pc, #132]	; (800bd7c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800bcf6:	4293      	cmp	r3, r2
 800bcf8:	d108      	bne.n	800bd0c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800bd00:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800bd02:	683b      	ldr	r3, [r7, #0]
 800bd04:	685b      	ldr	r3, [r3, #4]
 800bd06:	68fa      	ldr	r2, [r7, #12]
 800bd08:	4313      	orrs	r3, r2
 800bd0a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bd12:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bd14:	683b      	ldr	r3, [r7, #0]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	68fa      	ldr	r2, [r7, #12]
 800bd1a:	4313      	orrs	r3, r2
 800bd1c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	68fa      	ldr	r2, [r7, #12]
 800bd24:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	4a14      	ldr	r2, [pc, #80]	; (800bd7c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800bd2c:	4293      	cmp	r3, r2
 800bd2e:	d009      	beq.n	800bd44 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bd38:	d004      	beq.n	800bd44 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	4a10      	ldr	r2, [pc, #64]	; (800bd80 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800bd40:	4293      	cmp	r3, r2
 800bd42:	d10c      	bne.n	800bd5e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bd44:	68bb      	ldr	r3, [r7, #8]
 800bd46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bd4a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bd4c:	683b      	ldr	r3, [r7, #0]
 800bd4e:	689b      	ldr	r3, [r3, #8]
 800bd50:	68ba      	ldr	r2, [r7, #8]
 800bd52:	4313      	orrs	r3, r2
 800bd54:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	68ba      	ldr	r2, [r7, #8]
 800bd5c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	2201      	movs	r2, #1
 800bd62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	2200      	movs	r2, #0
 800bd6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bd6e:	2300      	movs	r3, #0
}
 800bd70:	4618      	mov	r0, r3
 800bd72:	3714      	adds	r7, #20
 800bd74:	46bd      	mov	sp, r7
 800bd76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd7a:	4770      	bx	lr
 800bd7c:	40012c00 	.word	0x40012c00
 800bd80:	40014000 	.word	0x40014000

0800bd84 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bd84:	b580      	push	{r7, lr}
 800bd86:	b082      	sub	sp, #8
 800bd88:	af00      	add	r7, sp, #0
 800bd8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d101      	bne.n	800bd96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bd92:	2301      	movs	r3, #1
 800bd94:	e040      	b.n	800be18 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d106      	bne.n	800bdac <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	2200      	movs	r2, #0
 800bda2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bda6:	6878      	ldr	r0, [r7, #4]
 800bda8:	f7f6 f8b2 	bl	8001f10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	2224      	movs	r2, #36	; 0x24
 800bdb0:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	681a      	ldr	r2, [r3, #0]
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	f022 0201 	bic.w	r2, r2, #1
 800bdc0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800bdc2:	6878      	ldr	r0, [r7, #4]
 800bdc4:	f000 f82c 	bl	800be20 <UART_SetConfig>
 800bdc8:	4603      	mov	r3, r0
 800bdca:	2b01      	cmp	r3, #1
 800bdcc:	d101      	bne.n	800bdd2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800bdce:	2301      	movs	r3, #1
 800bdd0:	e022      	b.n	800be18 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d002      	beq.n	800bde0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800bdda:	6878      	ldr	r0, [r7, #4]
 800bddc:	f000 fb34 	bl	800c448 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	685a      	ldr	r2, [r3, #4]
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800bdee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	689a      	ldr	r2, [r3, #8]
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800bdfe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	681a      	ldr	r2, [r3, #0]
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	f042 0201 	orr.w	r2, r2, #1
 800be0e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800be10:	6878      	ldr	r0, [r7, #4]
 800be12:	f000 fbbb 	bl	800c58c <UART_CheckIdleState>
 800be16:	4603      	mov	r3, r0
}
 800be18:	4618      	mov	r0, r3
 800be1a:	3708      	adds	r7, #8
 800be1c:	46bd      	mov	sp, r7
 800be1e:	bd80      	pop	{r7, pc}

0800be20 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800be20:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800be24:	b08a      	sub	sp, #40	; 0x28
 800be26:	af00      	add	r7, sp, #0
 800be28:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800be2a:	2300      	movs	r3, #0
 800be2c:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 800be2e:	2300      	movs	r3, #0
 800be30:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 800be32:	2300      	movs	r3, #0
 800be34:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	689a      	ldr	r2, [r3, #8]
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	691b      	ldr	r3, [r3, #16]
 800be3e:	431a      	orrs	r2, r3
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	695b      	ldr	r3, [r3, #20]
 800be44:	431a      	orrs	r2, r3
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	69db      	ldr	r3, [r3, #28]
 800be4a:	4313      	orrs	r3, r2
 800be4c:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	681a      	ldr	r2, [r3, #0]
 800be54:	4bbc      	ldr	r3, [pc, #752]	; (800c148 <UART_SetConfig+0x328>)
 800be56:	4013      	ands	r3, r2
 800be58:	687a      	ldr	r2, [r7, #4]
 800be5a:	6812      	ldr	r2, [r2, #0]
 800be5c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800be5e:	430b      	orrs	r3, r1
 800be60:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	685b      	ldr	r3, [r3, #4]
 800be68:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	68da      	ldr	r2, [r3, #12]
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	430a      	orrs	r2, r1
 800be76:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	699b      	ldr	r3, [r3, #24]
 800be7c:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	4ab2      	ldr	r2, [pc, #712]	; (800c14c <UART_SetConfig+0x32c>)
 800be84:	4293      	cmp	r3, r2
 800be86:	d004      	beq.n	800be92 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	6a1b      	ldr	r3, [r3, #32]
 800be8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be8e:	4313      	orrs	r3, r2
 800be90:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	689b      	ldr	r3, [r3, #8]
 800be98:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bea2:	430a      	orrs	r2, r1
 800bea4:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	4aa9      	ldr	r2, [pc, #676]	; (800c150 <UART_SetConfig+0x330>)
 800beac:	4293      	cmp	r3, r2
 800beae:	d126      	bne.n	800befe <UART_SetConfig+0xde>
 800beb0:	4ba8      	ldr	r3, [pc, #672]	; (800c154 <UART_SetConfig+0x334>)
 800beb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800beb6:	f003 0303 	and.w	r3, r3, #3
 800beba:	2b03      	cmp	r3, #3
 800bebc:	d81a      	bhi.n	800bef4 <UART_SetConfig+0xd4>
 800bebe:	a201      	add	r2, pc, #4	; (adr r2, 800bec4 <UART_SetConfig+0xa4>)
 800bec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bec4:	0800bed5 	.word	0x0800bed5
 800bec8:	0800bee5 	.word	0x0800bee5
 800becc:	0800bedd 	.word	0x0800bedd
 800bed0:	0800beed 	.word	0x0800beed
 800bed4:	2301      	movs	r3, #1
 800bed6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800beda:	e0ab      	b.n	800c034 <UART_SetConfig+0x214>
 800bedc:	2302      	movs	r3, #2
 800bede:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bee2:	e0a7      	b.n	800c034 <UART_SetConfig+0x214>
 800bee4:	2304      	movs	r3, #4
 800bee6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800beea:	e0a3      	b.n	800c034 <UART_SetConfig+0x214>
 800beec:	2308      	movs	r3, #8
 800beee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bef2:	e09f      	b.n	800c034 <UART_SetConfig+0x214>
 800bef4:	2310      	movs	r3, #16
 800bef6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800befa:	bf00      	nop
 800befc:	e09a      	b.n	800c034 <UART_SetConfig+0x214>
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	4a95      	ldr	r2, [pc, #596]	; (800c158 <UART_SetConfig+0x338>)
 800bf04:	4293      	cmp	r3, r2
 800bf06:	d138      	bne.n	800bf7a <UART_SetConfig+0x15a>
 800bf08:	4b92      	ldr	r3, [pc, #584]	; (800c154 <UART_SetConfig+0x334>)
 800bf0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bf0e:	f003 030c 	and.w	r3, r3, #12
 800bf12:	2b0c      	cmp	r3, #12
 800bf14:	d82c      	bhi.n	800bf70 <UART_SetConfig+0x150>
 800bf16:	a201      	add	r2, pc, #4	; (adr r2, 800bf1c <UART_SetConfig+0xfc>)
 800bf18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf1c:	0800bf51 	.word	0x0800bf51
 800bf20:	0800bf71 	.word	0x0800bf71
 800bf24:	0800bf71 	.word	0x0800bf71
 800bf28:	0800bf71 	.word	0x0800bf71
 800bf2c:	0800bf61 	.word	0x0800bf61
 800bf30:	0800bf71 	.word	0x0800bf71
 800bf34:	0800bf71 	.word	0x0800bf71
 800bf38:	0800bf71 	.word	0x0800bf71
 800bf3c:	0800bf59 	.word	0x0800bf59
 800bf40:	0800bf71 	.word	0x0800bf71
 800bf44:	0800bf71 	.word	0x0800bf71
 800bf48:	0800bf71 	.word	0x0800bf71
 800bf4c:	0800bf69 	.word	0x0800bf69
 800bf50:	2300      	movs	r3, #0
 800bf52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bf56:	e06d      	b.n	800c034 <UART_SetConfig+0x214>
 800bf58:	2302      	movs	r3, #2
 800bf5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bf5e:	e069      	b.n	800c034 <UART_SetConfig+0x214>
 800bf60:	2304      	movs	r3, #4
 800bf62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bf66:	e065      	b.n	800c034 <UART_SetConfig+0x214>
 800bf68:	2308      	movs	r3, #8
 800bf6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bf6e:	e061      	b.n	800c034 <UART_SetConfig+0x214>
 800bf70:	2310      	movs	r3, #16
 800bf72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bf76:	bf00      	nop
 800bf78:	e05c      	b.n	800c034 <UART_SetConfig+0x214>
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	4a77      	ldr	r2, [pc, #476]	; (800c15c <UART_SetConfig+0x33c>)
 800bf80:	4293      	cmp	r3, r2
 800bf82:	d125      	bne.n	800bfd0 <UART_SetConfig+0x1b0>
 800bf84:	4b73      	ldr	r3, [pc, #460]	; (800c154 <UART_SetConfig+0x334>)
 800bf86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bf8a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800bf8e:	2b10      	cmp	r3, #16
 800bf90:	d011      	beq.n	800bfb6 <UART_SetConfig+0x196>
 800bf92:	2b10      	cmp	r3, #16
 800bf94:	d802      	bhi.n	800bf9c <UART_SetConfig+0x17c>
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d005      	beq.n	800bfa6 <UART_SetConfig+0x186>
 800bf9a:	e014      	b.n	800bfc6 <UART_SetConfig+0x1a6>
 800bf9c:	2b20      	cmp	r3, #32
 800bf9e:	d006      	beq.n	800bfae <UART_SetConfig+0x18e>
 800bfa0:	2b30      	cmp	r3, #48	; 0x30
 800bfa2:	d00c      	beq.n	800bfbe <UART_SetConfig+0x19e>
 800bfa4:	e00f      	b.n	800bfc6 <UART_SetConfig+0x1a6>
 800bfa6:	2300      	movs	r3, #0
 800bfa8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bfac:	e042      	b.n	800c034 <UART_SetConfig+0x214>
 800bfae:	2302      	movs	r3, #2
 800bfb0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bfb4:	e03e      	b.n	800c034 <UART_SetConfig+0x214>
 800bfb6:	2304      	movs	r3, #4
 800bfb8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bfbc:	e03a      	b.n	800c034 <UART_SetConfig+0x214>
 800bfbe:	2308      	movs	r3, #8
 800bfc0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bfc4:	e036      	b.n	800c034 <UART_SetConfig+0x214>
 800bfc6:	2310      	movs	r3, #16
 800bfc8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bfcc:	bf00      	nop
 800bfce:	e031      	b.n	800c034 <UART_SetConfig+0x214>
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	4a5d      	ldr	r2, [pc, #372]	; (800c14c <UART_SetConfig+0x32c>)
 800bfd6:	4293      	cmp	r3, r2
 800bfd8:	d129      	bne.n	800c02e <UART_SetConfig+0x20e>
 800bfda:	4b5e      	ldr	r3, [pc, #376]	; (800c154 <UART_SetConfig+0x334>)
 800bfdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bfe0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800bfe4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bfe8:	d014      	beq.n	800c014 <UART_SetConfig+0x1f4>
 800bfea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bfee:	d802      	bhi.n	800bff6 <UART_SetConfig+0x1d6>
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d007      	beq.n	800c004 <UART_SetConfig+0x1e4>
 800bff4:	e016      	b.n	800c024 <UART_SetConfig+0x204>
 800bff6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bffa:	d007      	beq.n	800c00c <UART_SetConfig+0x1ec>
 800bffc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c000:	d00c      	beq.n	800c01c <UART_SetConfig+0x1fc>
 800c002:	e00f      	b.n	800c024 <UART_SetConfig+0x204>
 800c004:	2300      	movs	r3, #0
 800c006:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c00a:	e013      	b.n	800c034 <UART_SetConfig+0x214>
 800c00c:	2302      	movs	r3, #2
 800c00e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c012:	e00f      	b.n	800c034 <UART_SetConfig+0x214>
 800c014:	2304      	movs	r3, #4
 800c016:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c01a:	e00b      	b.n	800c034 <UART_SetConfig+0x214>
 800c01c:	2308      	movs	r3, #8
 800c01e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c022:	e007      	b.n	800c034 <UART_SetConfig+0x214>
 800c024:	2310      	movs	r3, #16
 800c026:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c02a:	bf00      	nop
 800c02c:	e002      	b.n	800c034 <UART_SetConfig+0x214>
 800c02e:	2310      	movs	r3, #16
 800c030:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	4a44      	ldr	r2, [pc, #272]	; (800c14c <UART_SetConfig+0x32c>)
 800c03a:	4293      	cmp	r3, r2
 800c03c:	f040 80fb 	bne.w	800c236 <UART_SetConfig+0x416>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c040:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c044:	2b08      	cmp	r3, #8
 800c046:	d824      	bhi.n	800c092 <UART_SetConfig+0x272>
 800c048:	a201      	add	r2, pc, #4	; (adr r2, 800c050 <UART_SetConfig+0x230>)
 800c04a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c04e:	bf00      	nop
 800c050:	0800c075 	.word	0x0800c075
 800c054:	0800c093 	.word	0x0800c093
 800c058:	0800c07d 	.word	0x0800c07d
 800c05c:	0800c093 	.word	0x0800c093
 800c060:	0800c083 	.word	0x0800c083
 800c064:	0800c093 	.word	0x0800c093
 800c068:	0800c093 	.word	0x0800c093
 800c06c:	0800c093 	.word	0x0800c093
 800c070:	0800c08b 	.word	0x0800c08b
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 800c074:	f7ff fa60 	bl	800b538 <HAL_RCC_GetPCLK1Freq>
 800c078:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800c07a:	e00d      	b.n	800c098 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 800c07c:	4b38      	ldr	r3, [pc, #224]	; (800c160 <UART_SetConfig+0x340>)
 800c07e:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800c080:	e00a      	b.n	800c098 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 800c082:	f7ff f9c3 	bl	800b40c <HAL_RCC_GetSysClockFreq>
 800c086:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800c088:	e006      	b.n	800c098 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 800c08a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c08e:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800c090:	e002      	b.n	800c098 <UART_SetConfig+0x278>
      default:
        ret = HAL_ERROR;
 800c092:	2301      	movs	r3, #1
 800c094:	76fb      	strb	r3, [r7, #27]
        break;
 800c096:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800c098:	697b      	ldr	r3, [r7, #20]
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	f000 81c8 	beq.w	800c430 <UART_SetConfig+0x610>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	685a      	ldr	r2, [r3, #4]
 800c0a4:	4613      	mov	r3, r2
 800c0a6:	005b      	lsls	r3, r3, #1
 800c0a8:	4413      	add	r3, r2
 800c0aa:	697a      	ldr	r2, [r7, #20]
 800c0ac:	429a      	cmp	r2, r3
 800c0ae:	d305      	bcc.n	800c0bc <UART_SetConfig+0x29c>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	685b      	ldr	r3, [r3, #4]
 800c0b4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c0b6:	697a      	ldr	r2, [r7, #20]
 800c0b8:	429a      	cmp	r2, r3
 800c0ba:	d902      	bls.n	800c0c2 <UART_SetConfig+0x2a2>
      {
        ret = HAL_ERROR;
 800c0bc:	2301      	movs	r3, #1
 800c0be:	76fb      	strb	r3, [r7, #27]
 800c0c0:	e1b6      	b.n	800c430 <UART_SetConfig+0x610>
      }
      else
      {
        switch (clocksource)
 800c0c2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c0c6:	2b08      	cmp	r3, #8
 800c0c8:	f200 80a2 	bhi.w	800c210 <UART_SetConfig+0x3f0>
 800c0cc:	a201      	add	r2, pc, #4	; (adr r2, 800c0d4 <UART_SetConfig+0x2b4>)
 800c0ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0d2:	bf00      	nop
 800c0d4:	0800c0f9 	.word	0x0800c0f9
 800c0d8:	0800c211 	.word	0x0800c211
 800c0dc:	0800c165 	.word	0x0800c165
 800c0e0:	0800c211 	.word	0x0800c211
 800c0e4:	0800c199 	.word	0x0800c199
 800c0e8:	0800c211 	.word	0x0800c211
 800c0ec:	0800c211 	.word	0x0800c211
 800c0f0:	0800c211 	.word	0x0800c211
 800c0f4:	0800c1e7 	.word	0x0800c1e7
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 800c0f8:	f7ff fa1e 	bl	800b538 <HAL_RCC_GetPCLK1Freq>
 800c0fc:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800c0fe:	693b      	ldr	r3, [r7, #16]
 800c100:	4619      	mov	r1, r3
 800c102:	f04f 0200 	mov.w	r2, #0
 800c106:	f04f 0300 	mov.w	r3, #0
 800c10a:	f04f 0400 	mov.w	r4, #0
 800c10e:	0214      	lsls	r4, r2, #8
 800c110:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800c114:	020b      	lsls	r3, r1, #8
 800c116:	687a      	ldr	r2, [r7, #4]
 800c118:	6852      	ldr	r2, [r2, #4]
 800c11a:	0852      	lsrs	r2, r2, #1
 800c11c:	4611      	mov	r1, r2
 800c11e:	f04f 0200 	mov.w	r2, #0
 800c122:	eb13 0b01 	adds.w	fp, r3, r1
 800c126:	eb44 0c02 	adc.w	ip, r4, r2
 800c12a:	4658      	mov	r0, fp
 800c12c:	4661      	mov	r1, ip
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	685b      	ldr	r3, [r3, #4]
 800c132:	f04f 0400 	mov.w	r4, #0
 800c136:	461a      	mov	r2, r3
 800c138:	4623      	mov	r3, r4
 800c13a:	f7f4 fdb5 	bl	8000ca8 <__aeabi_uldivmod>
 800c13e:	4603      	mov	r3, r0
 800c140:	460c      	mov	r4, r1
 800c142:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 800c144:	e067      	b.n	800c216 <UART_SetConfig+0x3f6>
 800c146:	bf00      	nop
 800c148:	efff69f3 	.word	0xefff69f3
 800c14c:	40008000 	.word	0x40008000
 800c150:	40013800 	.word	0x40013800
 800c154:	40021000 	.word	0x40021000
 800c158:	40004400 	.word	0x40004400
 800c15c:	40004800 	.word	0x40004800
 800c160:	00f42400 	.word	0x00f42400
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	685b      	ldr	r3, [r3, #4]
 800c168:	085b      	lsrs	r3, r3, #1
 800c16a:	f04f 0400 	mov.w	r4, #0
 800c16e:	49ae      	ldr	r1, [pc, #696]	; (800c428 <UART_SetConfig+0x608>)
 800c170:	f04f 0200 	mov.w	r2, #0
 800c174:	eb13 0b01 	adds.w	fp, r3, r1
 800c178:	eb44 0c02 	adc.w	ip, r4, r2
 800c17c:	4658      	mov	r0, fp
 800c17e:	4661      	mov	r1, ip
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	685b      	ldr	r3, [r3, #4]
 800c184:	f04f 0400 	mov.w	r4, #0
 800c188:	461a      	mov	r2, r3
 800c18a:	4623      	mov	r3, r4
 800c18c:	f7f4 fd8c 	bl	8000ca8 <__aeabi_uldivmod>
 800c190:	4603      	mov	r3, r0
 800c192:	460c      	mov	r4, r1
 800c194:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 800c196:	e03e      	b.n	800c216 <UART_SetConfig+0x3f6>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 800c198:	f7ff f938 	bl	800b40c <HAL_RCC_GetSysClockFreq>
 800c19c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800c19e:	693b      	ldr	r3, [r7, #16]
 800c1a0:	4619      	mov	r1, r3
 800c1a2:	f04f 0200 	mov.w	r2, #0
 800c1a6:	f04f 0300 	mov.w	r3, #0
 800c1aa:	f04f 0400 	mov.w	r4, #0
 800c1ae:	0214      	lsls	r4, r2, #8
 800c1b0:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800c1b4:	020b      	lsls	r3, r1, #8
 800c1b6:	687a      	ldr	r2, [r7, #4]
 800c1b8:	6852      	ldr	r2, [r2, #4]
 800c1ba:	0852      	lsrs	r2, r2, #1
 800c1bc:	4611      	mov	r1, r2
 800c1be:	f04f 0200 	mov.w	r2, #0
 800c1c2:	eb13 0b01 	adds.w	fp, r3, r1
 800c1c6:	eb44 0c02 	adc.w	ip, r4, r2
 800c1ca:	4658      	mov	r0, fp
 800c1cc:	4661      	mov	r1, ip
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	685b      	ldr	r3, [r3, #4]
 800c1d2:	f04f 0400 	mov.w	r4, #0
 800c1d6:	461a      	mov	r2, r3
 800c1d8:	4623      	mov	r3, r4
 800c1da:	f7f4 fd65 	bl	8000ca8 <__aeabi_uldivmod>
 800c1de:	4603      	mov	r3, r0
 800c1e0:	460c      	mov	r4, r1
 800c1e2:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 800c1e4:	e017      	b.n	800c216 <UART_SetConfig+0x3f6>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	685b      	ldr	r3, [r3, #4]
 800c1ea:	085b      	lsrs	r3, r3, #1
 800c1ec:	f04f 0400 	mov.w	r4, #0
 800c1f0:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 800c1f4:	f144 0100 	adc.w	r1, r4, #0
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	685b      	ldr	r3, [r3, #4]
 800c1fc:	f04f 0400 	mov.w	r4, #0
 800c200:	461a      	mov	r2, r3
 800c202:	4623      	mov	r3, r4
 800c204:	f7f4 fd50 	bl	8000ca8 <__aeabi_uldivmod>
 800c208:	4603      	mov	r3, r0
 800c20a:	460c      	mov	r4, r1
 800c20c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 800c20e:	e002      	b.n	800c216 <UART_SetConfig+0x3f6>
          default:
            ret = HAL_ERROR;
 800c210:	2301      	movs	r3, #1
 800c212:	76fb      	strb	r3, [r7, #27]
            break;
 800c214:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c216:	69fb      	ldr	r3, [r7, #28]
 800c218:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c21c:	d308      	bcc.n	800c230 <UART_SetConfig+0x410>
 800c21e:	69fb      	ldr	r3, [r7, #28]
 800c220:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c224:	d204      	bcs.n	800c230 <UART_SetConfig+0x410>
        {
          huart->Instance->BRR = usartdiv;
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	69fa      	ldr	r2, [r7, #28]
 800c22c:	60da      	str	r2, [r3, #12]
 800c22e:	e0ff      	b.n	800c430 <UART_SetConfig+0x610>
        }
        else
        {
          ret = HAL_ERROR;
 800c230:	2301      	movs	r3, #1
 800c232:	76fb      	strb	r3, [r7, #27]
 800c234:	e0fc      	b.n	800c430 <UART_SetConfig+0x610>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	69db      	ldr	r3, [r3, #28]
 800c23a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c23e:	f040 8083 	bne.w	800c348 <UART_SetConfig+0x528>
  {
    switch (clocksource)
 800c242:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c246:	2b08      	cmp	r3, #8
 800c248:	d85e      	bhi.n	800c308 <UART_SetConfig+0x4e8>
 800c24a:	a201      	add	r2, pc, #4	; (adr r2, 800c250 <UART_SetConfig+0x430>)
 800c24c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c250:	0800c275 	.word	0x0800c275
 800c254:	0800c295 	.word	0x0800c295
 800c258:	0800c2b5 	.word	0x0800c2b5
 800c25c:	0800c309 	.word	0x0800c309
 800c260:	0800c2d1 	.word	0x0800c2d1
 800c264:	0800c309 	.word	0x0800c309
 800c268:	0800c309 	.word	0x0800c309
 800c26c:	0800c309 	.word	0x0800c309
 800c270:	0800c2f1 	.word	0x0800c2f1
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c274:	f7ff f960 	bl	800b538 <HAL_RCC_GetPCLK1Freq>
 800c278:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800c27a:	693b      	ldr	r3, [r7, #16]
 800c27c:	005a      	lsls	r2, r3, #1
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	685b      	ldr	r3, [r3, #4]
 800c282:	085b      	lsrs	r3, r3, #1
 800c284:	441a      	add	r2, r3
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	685b      	ldr	r3, [r3, #4]
 800c28a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c28e:	b29b      	uxth	r3, r3
 800c290:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800c292:	e03c      	b.n	800c30e <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c294:	f7ff f966 	bl	800b564 <HAL_RCC_GetPCLK2Freq>
 800c298:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800c29a:	693b      	ldr	r3, [r7, #16]
 800c29c:	005a      	lsls	r2, r3, #1
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	685b      	ldr	r3, [r3, #4]
 800c2a2:	085b      	lsrs	r3, r3, #1
 800c2a4:	441a      	add	r2, r3
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	685b      	ldr	r3, [r3, #4]
 800c2aa:	fbb2 f3f3 	udiv	r3, r2, r3
 800c2ae:	b29b      	uxth	r3, r3
 800c2b0:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800c2b2:	e02c      	b.n	800c30e <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	685b      	ldr	r3, [r3, #4]
 800c2b8:	085b      	lsrs	r3, r3, #1
 800c2ba:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 800c2be:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 800c2c2:	687a      	ldr	r2, [r7, #4]
 800c2c4:	6852      	ldr	r2, [r2, #4]
 800c2c6:	fbb3 f3f2 	udiv	r3, r3, r2
 800c2ca:	b29b      	uxth	r3, r3
 800c2cc:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800c2ce:	e01e      	b.n	800c30e <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c2d0:	f7ff f89c 	bl	800b40c <HAL_RCC_GetSysClockFreq>
 800c2d4:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800c2d6:	693b      	ldr	r3, [r7, #16]
 800c2d8:	005a      	lsls	r2, r3, #1
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	685b      	ldr	r3, [r3, #4]
 800c2de:	085b      	lsrs	r3, r3, #1
 800c2e0:	441a      	add	r2, r3
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	685b      	ldr	r3, [r3, #4]
 800c2e6:	fbb2 f3f3 	udiv	r3, r2, r3
 800c2ea:	b29b      	uxth	r3, r3
 800c2ec:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800c2ee:	e00e      	b.n	800c30e <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	685b      	ldr	r3, [r3, #4]
 800c2f4:	085b      	lsrs	r3, r3, #1
 800c2f6:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	685b      	ldr	r3, [r3, #4]
 800c2fe:	fbb2 f3f3 	udiv	r3, r2, r3
 800c302:	b29b      	uxth	r3, r3
 800c304:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800c306:	e002      	b.n	800c30e <UART_SetConfig+0x4ee>
      default:
        ret = HAL_ERROR;
 800c308:	2301      	movs	r3, #1
 800c30a:	76fb      	strb	r3, [r7, #27]
        break;
 800c30c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c30e:	69fb      	ldr	r3, [r7, #28]
 800c310:	2b0f      	cmp	r3, #15
 800c312:	d916      	bls.n	800c342 <UART_SetConfig+0x522>
 800c314:	69fb      	ldr	r3, [r7, #28]
 800c316:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c31a:	d212      	bcs.n	800c342 <UART_SetConfig+0x522>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c31c:	69fb      	ldr	r3, [r7, #28]
 800c31e:	b29b      	uxth	r3, r3
 800c320:	f023 030f 	bic.w	r3, r3, #15
 800c324:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c326:	69fb      	ldr	r3, [r7, #28]
 800c328:	085b      	lsrs	r3, r3, #1
 800c32a:	b29b      	uxth	r3, r3
 800c32c:	f003 0307 	and.w	r3, r3, #7
 800c330:	b29a      	uxth	r2, r3
 800c332:	89fb      	ldrh	r3, [r7, #14]
 800c334:	4313      	orrs	r3, r2
 800c336:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	89fa      	ldrh	r2, [r7, #14]
 800c33e:	60da      	str	r2, [r3, #12]
 800c340:	e076      	b.n	800c430 <UART_SetConfig+0x610>
    }
    else
    {
      ret = HAL_ERROR;
 800c342:	2301      	movs	r3, #1
 800c344:	76fb      	strb	r3, [r7, #27]
 800c346:	e073      	b.n	800c430 <UART_SetConfig+0x610>
    }
  }
  else
  {
    switch (clocksource)
 800c348:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c34c:	2b08      	cmp	r3, #8
 800c34e:	d85c      	bhi.n	800c40a <UART_SetConfig+0x5ea>
 800c350:	a201      	add	r2, pc, #4	; (adr r2, 800c358 <UART_SetConfig+0x538>)
 800c352:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c356:	bf00      	nop
 800c358:	0800c37d 	.word	0x0800c37d
 800c35c:	0800c39b 	.word	0x0800c39b
 800c360:	0800c3b9 	.word	0x0800c3b9
 800c364:	0800c40b 	.word	0x0800c40b
 800c368:	0800c3d5 	.word	0x0800c3d5
 800c36c:	0800c40b 	.word	0x0800c40b
 800c370:	0800c40b 	.word	0x0800c40b
 800c374:	0800c40b 	.word	0x0800c40b
 800c378:	0800c3f3 	.word	0x0800c3f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c37c:	f7ff f8dc 	bl	800b538 <HAL_RCC_GetPCLK1Freq>
 800c380:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	685b      	ldr	r3, [r3, #4]
 800c386:	085a      	lsrs	r2, r3, #1
 800c388:	693b      	ldr	r3, [r7, #16]
 800c38a:	441a      	add	r2, r3
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	685b      	ldr	r3, [r3, #4]
 800c390:	fbb2 f3f3 	udiv	r3, r2, r3
 800c394:	b29b      	uxth	r3, r3
 800c396:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800c398:	e03a      	b.n	800c410 <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c39a:	f7ff f8e3 	bl	800b564 <HAL_RCC_GetPCLK2Freq>
 800c39e:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	685b      	ldr	r3, [r3, #4]
 800c3a4:	085a      	lsrs	r2, r3, #1
 800c3a6:	693b      	ldr	r3, [r7, #16]
 800c3a8:	441a      	add	r2, r3
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	685b      	ldr	r3, [r3, #4]
 800c3ae:	fbb2 f3f3 	udiv	r3, r2, r3
 800c3b2:	b29b      	uxth	r3, r3
 800c3b4:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800c3b6:	e02b      	b.n	800c410 <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	685b      	ldr	r3, [r3, #4]
 800c3bc:	085b      	lsrs	r3, r3, #1
 800c3be:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800c3c2:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800c3c6:	687a      	ldr	r2, [r7, #4]
 800c3c8:	6852      	ldr	r2, [r2, #4]
 800c3ca:	fbb3 f3f2 	udiv	r3, r3, r2
 800c3ce:	b29b      	uxth	r3, r3
 800c3d0:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800c3d2:	e01d      	b.n	800c410 <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c3d4:	f7ff f81a 	bl	800b40c <HAL_RCC_GetSysClockFreq>
 800c3d8:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	685b      	ldr	r3, [r3, #4]
 800c3de:	085a      	lsrs	r2, r3, #1
 800c3e0:	693b      	ldr	r3, [r7, #16]
 800c3e2:	441a      	add	r2, r3
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	685b      	ldr	r3, [r3, #4]
 800c3e8:	fbb2 f3f3 	udiv	r3, r2, r3
 800c3ec:	b29b      	uxth	r3, r3
 800c3ee:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800c3f0:	e00e      	b.n	800c410 <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	685b      	ldr	r3, [r3, #4]
 800c3f6:	085b      	lsrs	r3, r3, #1
 800c3f8:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	685b      	ldr	r3, [r3, #4]
 800c400:	fbb2 f3f3 	udiv	r3, r2, r3
 800c404:	b29b      	uxth	r3, r3
 800c406:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800c408:	e002      	b.n	800c410 <UART_SetConfig+0x5f0>
      default:
        ret = HAL_ERROR;
 800c40a:	2301      	movs	r3, #1
 800c40c:	76fb      	strb	r3, [r7, #27]
        break;
 800c40e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c410:	69fb      	ldr	r3, [r7, #28]
 800c412:	2b0f      	cmp	r3, #15
 800c414:	d90a      	bls.n	800c42c <UART_SetConfig+0x60c>
 800c416:	69fb      	ldr	r3, [r7, #28]
 800c418:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c41c:	d206      	bcs.n	800c42c <UART_SetConfig+0x60c>
    {
      huart->Instance->BRR = usartdiv;
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	69fa      	ldr	r2, [r7, #28]
 800c424:	60da      	str	r2, [r3, #12]
 800c426:	e003      	b.n	800c430 <UART_SetConfig+0x610>
 800c428:	f4240000 	.word	0xf4240000
    }
    else
    {
      ret = HAL_ERROR;
 800c42c:	2301      	movs	r3, #1
 800c42e:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	2200      	movs	r2, #0
 800c434:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	2200      	movs	r2, #0
 800c43a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800c43c:	7efb      	ldrb	r3, [r7, #27]
}
 800c43e:	4618      	mov	r0, r3
 800c440:	3728      	adds	r7, #40	; 0x28
 800c442:	46bd      	mov	sp, r7
 800c444:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0800c448 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c448:	b480      	push	{r7}
 800c44a:	b083      	sub	sp, #12
 800c44c:	af00      	add	r7, sp, #0
 800c44e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c454:	f003 0301 	and.w	r3, r3, #1
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d00a      	beq.n	800c472 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	685b      	ldr	r3, [r3, #4]
 800c462:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	430a      	orrs	r2, r1
 800c470:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c476:	f003 0302 	and.w	r3, r3, #2
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d00a      	beq.n	800c494 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	685b      	ldr	r3, [r3, #4]
 800c484:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	430a      	orrs	r2, r1
 800c492:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c498:	f003 0304 	and.w	r3, r3, #4
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d00a      	beq.n	800c4b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	685b      	ldr	r3, [r3, #4]
 800c4a6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	430a      	orrs	r2, r1
 800c4b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4ba:	f003 0308 	and.w	r3, r3, #8
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d00a      	beq.n	800c4d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	685b      	ldr	r3, [r3, #4]
 800c4c8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	430a      	orrs	r2, r1
 800c4d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4dc:	f003 0310 	and.w	r3, r3, #16
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d00a      	beq.n	800c4fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	689b      	ldr	r3, [r3, #8]
 800c4ea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	430a      	orrs	r2, r1
 800c4f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4fe:	f003 0320 	and.w	r3, r3, #32
 800c502:	2b00      	cmp	r3, #0
 800c504:	d00a      	beq.n	800c51c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	689b      	ldr	r3, [r3, #8]
 800c50c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	430a      	orrs	r2, r1
 800c51a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c520:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c524:	2b00      	cmp	r3, #0
 800c526:	d01a      	beq.n	800c55e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	685b      	ldr	r3, [r3, #4]
 800c52e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	430a      	orrs	r2, r1
 800c53c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c542:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c546:	d10a      	bne.n	800c55e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	685b      	ldr	r3, [r3, #4]
 800c54e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	430a      	orrs	r2, r1
 800c55c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c562:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c566:	2b00      	cmp	r3, #0
 800c568:	d00a      	beq.n	800c580 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	685b      	ldr	r3, [r3, #4]
 800c570:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	430a      	orrs	r2, r1
 800c57e:	605a      	str	r2, [r3, #4]
  }
}
 800c580:	bf00      	nop
 800c582:	370c      	adds	r7, #12
 800c584:	46bd      	mov	sp, r7
 800c586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c58a:	4770      	bx	lr

0800c58c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c58c:	b580      	push	{r7, lr}
 800c58e:	b086      	sub	sp, #24
 800c590:	af02      	add	r7, sp, #8
 800c592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	2200      	movs	r2, #0
 800c598:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800c59a:	f7fb fd87 	bl	80080ac <HAL_GetTick>
 800c59e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	f003 0308 	and.w	r3, r3, #8
 800c5aa:	2b08      	cmp	r3, #8
 800c5ac:	d10e      	bne.n	800c5cc <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c5ae:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c5b2:	9300      	str	r3, [sp, #0]
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	2200      	movs	r2, #0
 800c5b8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c5bc:	6878      	ldr	r0, [r7, #4]
 800c5be:	f000 f82a 	bl	800c616 <UART_WaitOnFlagUntilTimeout>
 800c5c2:	4603      	mov	r3, r0
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d001      	beq.n	800c5cc <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c5c8:	2303      	movs	r3, #3
 800c5ca:	e020      	b.n	800c60e <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	f003 0304 	and.w	r3, r3, #4
 800c5d6:	2b04      	cmp	r3, #4
 800c5d8:	d10e      	bne.n	800c5f8 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c5da:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c5de:	9300      	str	r3, [sp, #0]
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	2200      	movs	r2, #0
 800c5e4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c5e8:	6878      	ldr	r0, [r7, #4]
 800c5ea:	f000 f814 	bl	800c616 <UART_WaitOnFlagUntilTimeout>
 800c5ee:	4603      	mov	r3, r0
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d001      	beq.n	800c5f8 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c5f4:	2303      	movs	r3, #3
 800c5f6:	e00a      	b.n	800c60e <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	2220      	movs	r2, #32
 800c5fc:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	2220      	movs	r2, #32
 800c602:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	2200      	movs	r2, #0
 800c608:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800c60c:	2300      	movs	r3, #0
}
 800c60e:	4618      	mov	r0, r3
 800c610:	3710      	adds	r7, #16
 800c612:	46bd      	mov	sp, r7
 800c614:	bd80      	pop	{r7, pc}

0800c616 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c616:	b580      	push	{r7, lr}
 800c618:	b084      	sub	sp, #16
 800c61a:	af00      	add	r7, sp, #0
 800c61c:	60f8      	str	r0, [r7, #12]
 800c61e:	60b9      	str	r1, [r7, #8]
 800c620:	603b      	str	r3, [r7, #0]
 800c622:	4613      	mov	r3, r2
 800c624:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c626:	e05d      	b.n	800c6e4 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c628:	69bb      	ldr	r3, [r7, #24]
 800c62a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c62e:	d059      	beq.n	800c6e4 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c630:	f7fb fd3c 	bl	80080ac <HAL_GetTick>
 800c634:	4602      	mov	r2, r0
 800c636:	683b      	ldr	r3, [r7, #0]
 800c638:	1ad3      	subs	r3, r2, r3
 800c63a:	69ba      	ldr	r2, [r7, #24]
 800c63c:	429a      	cmp	r2, r3
 800c63e:	d302      	bcc.n	800c646 <UART_WaitOnFlagUntilTimeout+0x30>
 800c640:	69bb      	ldr	r3, [r7, #24]
 800c642:	2b00      	cmp	r3, #0
 800c644:	d11b      	bne.n	800c67e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	681a      	ldr	r2, [r3, #0]
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c654:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	689a      	ldr	r2, [r3, #8]
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	f022 0201 	bic.w	r2, r2, #1
 800c664:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	2220      	movs	r2, #32
 800c66a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	2220      	movs	r2, #32
 800c670:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	2200      	movs	r2, #0
 800c676:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800c67a:	2303      	movs	r3, #3
 800c67c:	e042      	b.n	800c704 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	f003 0304 	and.w	r3, r3, #4
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d02b      	beq.n	800c6e4 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	69db      	ldr	r3, [r3, #28]
 800c692:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c696:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c69a:	d123      	bne.n	800c6e4 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c6a4:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	681a      	ldr	r2, [r3, #0]
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c6b4:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	689a      	ldr	r2, [r3, #8]
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	f022 0201 	bic.w	r2, r2, #1
 800c6c4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	2220      	movs	r2, #32
 800c6ca:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	2220      	movs	r2, #32
 800c6d0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c6d2:	68fb      	ldr	r3, [r7, #12]
 800c6d4:	2220      	movs	r2, #32
 800c6d6:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	2200      	movs	r2, #0
 800c6dc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800c6e0:	2303      	movs	r3, #3
 800c6e2:	e00f      	b.n	800c704 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	69da      	ldr	r2, [r3, #28]
 800c6ea:	68bb      	ldr	r3, [r7, #8]
 800c6ec:	4013      	ands	r3, r2
 800c6ee:	68ba      	ldr	r2, [r7, #8]
 800c6f0:	429a      	cmp	r2, r3
 800c6f2:	bf0c      	ite	eq
 800c6f4:	2301      	moveq	r3, #1
 800c6f6:	2300      	movne	r3, #0
 800c6f8:	b2db      	uxtb	r3, r3
 800c6fa:	461a      	mov	r2, r3
 800c6fc:	79fb      	ldrb	r3, [r7, #7]
 800c6fe:	429a      	cmp	r2, r3
 800c700:	d092      	beq.n	800c628 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c702:	2300      	movs	r3, #0
}
 800c704:	4618      	mov	r0, r3
 800c706:	3710      	adds	r7, #16
 800c708:	46bd      	mov	sp, r7
 800c70a:	bd80      	pop	{r7, pc}

0800c70c <atof>:
 800c70c:	2100      	movs	r1, #0
 800c70e:	f001 b933 	b.w	800d978 <strtod>
	...

0800c714 <clock>:
 800c714:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c716:	4b08      	ldr	r3, [pc, #32]	; (800c738 <clock+0x24>)
 800c718:	4669      	mov	r1, sp
 800c71a:	6818      	ldr	r0, [r3, #0]
 800c71c:	f002 fb6b 	bl	800edf6 <_times_r>
 800c720:	1c43      	adds	r3, r0, #1
 800c722:	d006      	beq.n	800c732 <clock+0x1e>
 800c724:	e9dd 0300 	ldrd	r0, r3, [sp]
 800c728:	4418      	add	r0, r3
 800c72a:	9b02      	ldr	r3, [sp, #8]
 800c72c:	4418      	add	r0, r3
 800c72e:	9b03      	ldr	r3, [sp, #12]
 800c730:	4418      	add	r0, r3
 800c732:	b005      	add	sp, #20
 800c734:	f85d fb04 	ldr.w	pc, [sp], #4
 800c738:	200000e4 	.word	0x200000e4

0800c73c <gcvt>:
 800c73c:	b530      	push	{r4, r5, lr}
 800c73e:	ed2d 8b02 	vpush	{d8}
 800c742:	eeb0 8a40 	vmov.f32	s16, s0
 800c746:	eef0 8a60 	vmov.f32	s17, s1
 800c74a:	460c      	mov	r4, r1
 800c74c:	2200      	movs	r2, #0
 800c74e:	b083      	sub	sp, #12
 800c750:	4605      	mov	r5, r0
 800c752:	2300      	movs	r3, #0
 800c754:	ec51 0b10 	vmov	r0, r1, d0
 800c758:	f7f4 f9d0 	bl	8000afc <__aeabi_dcmplt>
 800c75c:	4622      	mov	r2, r4
 800c75e:	b118      	cbz	r0, 800c768 <gcvt+0x2c>
 800c760:	232d      	movs	r3, #45	; 0x2d
 800c762:	f802 3b01 	strb.w	r3, [r2], #1
 800c766:	3d01      	subs	r5, #1
 800c768:	2300      	movs	r3, #0
 800c76a:	4809      	ldr	r0, [pc, #36]	; (800c790 <gcvt+0x54>)
 800c76c:	9300      	str	r3, [sp, #0]
 800c76e:	4629      	mov	r1, r5
 800c770:	2367      	movs	r3, #103	; 0x67
 800c772:	eeb0 0a48 	vmov.f32	s0, s16
 800c776:	eef0 0a68 	vmov.f32	s1, s17
 800c77a:	6800      	ldr	r0, [r0, #0]
 800c77c:	f003 f9f8 	bl	800fb70 <_gcvt>
 800c780:	2800      	cmp	r0, #0
 800c782:	bf14      	ite	ne
 800c784:	4620      	movne	r0, r4
 800c786:	2000      	moveq	r0, #0
 800c788:	b003      	add	sp, #12
 800c78a:	ecbd 8b02 	vpop	{d8}
 800c78e:	bd30      	pop	{r4, r5, pc}
 800c790:	200000e4 	.word	0x200000e4

0800c794 <__errno>:
 800c794:	4b01      	ldr	r3, [pc, #4]	; (800c79c <__errno+0x8>)
 800c796:	6818      	ldr	r0, [r3, #0]
 800c798:	4770      	bx	lr
 800c79a:	bf00      	nop
 800c79c:	200000e4 	.word	0x200000e4

0800c7a0 <__libc_init_array>:
 800c7a0:	b570      	push	{r4, r5, r6, lr}
 800c7a2:	4e0d      	ldr	r6, [pc, #52]	; (800c7d8 <__libc_init_array+0x38>)
 800c7a4:	4c0d      	ldr	r4, [pc, #52]	; (800c7dc <__libc_init_array+0x3c>)
 800c7a6:	1ba4      	subs	r4, r4, r6
 800c7a8:	10a4      	asrs	r4, r4, #2
 800c7aa:	2500      	movs	r5, #0
 800c7ac:	42a5      	cmp	r5, r4
 800c7ae:	d109      	bne.n	800c7c4 <__libc_init_array+0x24>
 800c7b0:	4e0b      	ldr	r6, [pc, #44]	; (800c7e0 <__libc_init_array+0x40>)
 800c7b2:	4c0c      	ldr	r4, [pc, #48]	; (800c7e4 <__libc_init_array+0x44>)
 800c7b4:	f004 fe7a 	bl	80114ac <_init>
 800c7b8:	1ba4      	subs	r4, r4, r6
 800c7ba:	10a4      	asrs	r4, r4, #2
 800c7bc:	2500      	movs	r5, #0
 800c7be:	42a5      	cmp	r5, r4
 800c7c0:	d105      	bne.n	800c7ce <__libc_init_array+0x2e>
 800c7c2:	bd70      	pop	{r4, r5, r6, pc}
 800c7c4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c7c8:	4798      	blx	r3
 800c7ca:	3501      	adds	r5, #1
 800c7cc:	e7ee      	b.n	800c7ac <__libc_init_array+0xc>
 800c7ce:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c7d2:	4798      	blx	r3
 800c7d4:	3501      	adds	r5, #1
 800c7d6:	e7f2      	b.n	800c7be <__libc_init_array+0x1e>
 800c7d8:	08011dbc 	.word	0x08011dbc
 800c7dc:	08011dbc 	.word	0x08011dbc
 800c7e0:	08011dbc 	.word	0x08011dbc
 800c7e4:	08011dc4 	.word	0x08011dc4

0800c7e8 <malloc>:
 800c7e8:	4b02      	ldr	r3, [pc, #8]	; (800c7f4 <malloc+0xc>)
 800c7ea:	4601      	mov	r1, r0
 800c7ec:	6818      	ldr	r0, [r3, #0]
 800c7ee:	f000 b80b 	b.w	800c808 <_malloc_r>
 800c7f2:	bf00      	nop
 800c7f4:	200000e4 	.word	0x200000e4

0800c7f8 <free>:
 800c7f8:	4b02      	ldr	r3, [pc, #8]	; (800c804 <free+0xc>)
 800c7fa:	4601      	mov	r1, r0
 800c7fc:	6818      	ldr	r0, [r3, #0]
 800c7fe:	f003 bae9 	b.w	800fdd4 <_free_r>
 800c802:	bf00      	nop
 800c804:	200000e4 	.word	0x200000e4

0800c808 <_malloc_r>:
 800c808:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c80c:	f101 050b 	add.w	r5, r1, #11
 800c810:	2d16      	cmp	r5, #22
 800c812:	4606      	mov	r6, r0
 800c814:	d906      	bls.n	800c824 <_malloc_r+0x1c>
 800c816:	f035 0507 	bics.w	r5, r5, #7
 800c81a:	d504      	bpl.n	800c826 <_malloc_r+0x1e>
 800c81c:	230c      	movs	r3, #12
 800c81e:	6033      	str	r3, [r6, #0]
 800c820:	2400      	movs	r4, #0
 800c822:	e1a8      	b.n	800cb76 <_malloc_r+0x36e>
 800c824:	2510      	movs	r5, #16
 800c826:	428d      	cmp	r5, r1
 800c828:	d3f8      	bcc.n	800c81c <_malloc_r+0x14>
 800c82a:	4630      	mov	r0, r6
 800c82c:	f000 fa2a 	bl	800cc84 <__malloc_lock>
 800c830:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
 800c834:	4fc0      	ldr	r7, [pc, #768]	; (800cb38 <_malloc_r+0x330>)
 800c836:	d238      	bcs.n	800c8aa <_malloc_r+0xa2>
 800c838:	f105 0208 	add.w	r2, r5, #8
 800c83c:	443a      	add	r2, r7
 800c83e:	f1a2 0108 	sub.w	r1, r2, #8
 800c842:	6854      	ldr	r4, [r2, #4]
 800c844:	428c      	cmp	r4, r1
 800c846:	ea4f 03d5 	mov.w	r3, r5, lsr #3
 800c84a:	d102      	bne.n	800c852 <_malloc_r+0x4a>
 800c84c:	68d4      	ldr	r4, [r2, #12]
 800c84e:	42a2      	cmp	r2, r4
 800c850:	d010      	beq.n	800c874 <_malloc_r+0x6c>
 800c852:	6863      	ldr	r3, [r4, #4]
 800c854:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 800c858:	f023 0303 	bic.w	r3, r3, #3
 800c85c:	60ca      	str	r2, [r1, #12]
 800c85e:	4423      	add	r3, r4
 800c860:	6091      	str	r1, [r2, #8]
 800c862:	685a      	ldr	r2, [r3, #4]
 800c864:	f042 0201 	orr.w	r2, r2, #1
 800c868:	605a      	str	r2, [r3, #4]
 800c86a:	4630      	mov	r0, r6
 800c86c:	f000 fa10 	bl	800cc90 <__malloc_unlock>
 800c870:	3408      	adds	r4, #8
 800c872:	e180      	b.n	800cb76 <_malloc_r+0x36e>
 800c874:	3302      	adds	r3, #2
 800c876:	4ab1      	ldr	r2, [pc, #708]	; (800cb3c <_malloc_r+0x334>)
 800c878:	693c      	ldr	r4, [r7, #16]
 800c87a:	4294      	cmp	r4, r2
 800c87c:	4611      	mov	r1, r2
 800c87e:	d075      	beq.n	800c96c <_malloc_r+0x164>
 800c880:	6860      	ldr	r0, [r4, #4]
 800c882:	f020 0c03 	bic.w	ip, r0, #3
 800c886:	ebac 0005 	sub.w	r0, ip, r5
 800c88a:	280f      	cmp	r0, #15
 800c88c:	dd48      	ble.n	800c920 <_malloc_r+0x118>
 800c88e:	1963      	adds	r3, r4, r5
 800c890:	f045 0501 	orr.w	r5, r5, #1
 800c894:	6065      	str	r5, [r4, #4]
 800c896:	e9c7 3304 	strd	r3, r3, [r7, #16]
 800c89a:	e9c3 2202 	strd	r2, r2, [r3, #8]
 800c89e:	f040 0201 	orr.w	r2, r0, #1
 800c8a2:	605a      	str	r2, [r3, #4]
 800c8a4:	f844 000c 	str.w	r0, [r4, ip]
 800c8a8:	e7df      	b.n	800c86a <_malloc_r+0x62>
 800c8aa:	0a6b      	lsrs	r3, r5, #9
 800c8ac:	d02a      	beq.n	800c904 <_malloc_r+0xfc>
 800c8ae:	2b04      	cmp	r3, #4
 800c8b0:	d812      	bhi.n	800c8d8 <_malloc_r+0xd0>
 800c8b2:	09ab      	lsrs	r3, r5, #6
 800c8b4:	3338      	adds	r3, #56	; 0x38
 800c8b6:	1c5a      	adds	r2, r3, #1
 800c8b8:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
 800c8bc:	f1a2 0c08 	sub.w	ip, r2, #8
 800c8c0:	6854      	ldr	r4, [r2, #4]
 800c8c2:	4564      	cmp	r4, ip
 800c8c4:	d006      	beq.n	800c8d4 <_malloc_r+0xcc>
 800c8c6:	6862      	ldr	r2, [r4, #4]
 800c8c8:	f022 0203 	bic.w	r2, r2, #3
 800c8cc:	1b50      	subs	r0, r2, r5
 800c8ce:	280f      	cmp	r0, #15
 800c8d0:	dd1c      	ble.n	800c90c <_malloc_r+0x104>
 800c8d2:	3b01      	subs	r3, #1
 800c8d4:	3301      	adds	r3, #1
 800c8d6:	e7ce      	b.n	800c876 <_malloc_r+0x6e>
 800c8d8:	2b14      	cmp	r3, #20
 800c8da:	d801      	bhi.n	800c8e0 <_malloc_r+0xd8>
 800c8dc:	335b      	adds	r3, #91	; 0x5b
 800c8de:	e7ea      	b.n	800c8b6 <_malloc_r+0xae>
 800c8e0:	2b54      	cmp	r3, #84	; 0x54
 800c8e2:	d802      	bhi.n	800c8ea <_malloc_r+0xe2>
 800c8e4:	0b2b      	lsrs	r3, r5, #12
 800c8e6:	336e      	adds	r3, #110	; 0x6e
 800c8e8:	e7e5      	b.n	800c8b6 <_malloc_r+0xae>
 800c8ea:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 800c8ee:	d802      	bhi.n	800c8f6 <_malloc_r+0xee>
 800c8f0:	0beb      	lsrs	r3, r5, #15
 800c8f2:	3377      	adds	r3, #119	; 0x77
 800c8f4:	e7df      	b.n	800c8b6 <_malloc_r+0xae>
 800c8f6:	f240 5254 	movw	r2, #1364	; 0x554
 800c8fa:	4293      	cmp	r3, r2
 800c8fc:	d804      	bhi.n	800c908 <_malloc_r+0x100>
 800c8fe:	0cab      	lsrs	r3, r5, #18
 800c900:	337c      	adds	r3, #124	; 0x7c
 800c902:	e7d8      	b.n	800c8b6 <_malloc_r+0xae>
 800c904:	233f      	movs	r3, #63	; 0x3f
 800c906:	e7d6      	b.n	800c8b6 <_malloc_r+0xae>
 800c908:	237e      	movs	r3, #126	; 0x7e
 800c90a:	e7d4      	b.n	800c8b6 <_malloc_r+0xae>
 800c90c:	2800      	cmp	r0, #0
 800c90e:	68e1      	ldr	r1, [r4, #12]
 800c910:	db04      	blt.n	800c91c <_malloc_r+0x114>
 800c912:	68a3      	ldr	r3, [r4, #8]
 800c914:	60d9      	str	r1, [r3, #12]
 800c916:	608b      	str	r3, [r1, #8]
 800c918:	18a3      	adds	r3, r4, r2
 800c91a:	e7a2      	b.n	800c862 <_malloc_r+0x5a>
 800c91c:	460c      	mov	r4, r1
 800c91e:	e7d0      	b.n	800c8c2 <_malloc_r+0xba>
 800c920:	2800      	cmp	r0, #0
 800c922:	e9c7 2204 	strd	r2, r2, [r7, #16]
 800c926:	db07      	blt.n	800c938 <_malloc_r+0x130>
 800c928:	44a4      	add	ip, r4
 800c92a:	f8dc 3004 	ldr.w	r3, [ip, #4]
 800c92e:	f043 0301 	orr.w	r3, r3, #1
 800c932:	f8cc 3004 	str.w	r3, [ip, #4]
 800c936:	e798      	b.n	800c86a <_malloc_r+0x62>
 800c938:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 800c93c:	6878      	ldr	r0, [r7, #4]
 800c93e:	f080 8099 	bcs.w	800ca74 <_malloc_r+0x26c>
 800c942:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 800c946:	ea4f 0eac 	mov.w	lr, ip, asr #2
 800c94a:	2201      	movs	r2, #1
 800c94c:	f10c 0c01 	add.w	ip, ip, #1
 800c950:	fa02 f20e 	lsl.w	r2, r2, lr
 800c954:	4310      	orrs	r0, r2
 800c956:	6078      	str	r0, [r7, #4]
 800c958:	eb07 02cc 	add.w	r2, r7, ip, lsl #3
 800c95c:	f857 003c 	ldr.w	r0, [r7, ip, lsl #3]
 800c960:	3a08      	subs	r2, #8
 800c962:	e9c4 0202 	strd	r0, r2, [r4, #8]
 800c966:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
 800c96a:	60c4      	str	r4, [r0, #12]
 800c96c:	2001      	movs	r0, #1
 800c96e:	109a      	asrs	r2, r3, #2
 800c970:	fa00 f202 	lsl.w	r2, r0, r2
 800c974:	6878      	ldr	r0, [r7, #4]
 800c976:	4290      	cmp	r0, r2
 800c978:	d326      	bcc.n	800c9c8 <_malloc_r+0x1c0>
 800c97a:	4210      	tst	r0, r2
 800c97c:	d106      	bne.n	800c98c <_malloc_r+0x184>
 800c97e:	f023 0303 	bic.w	r3, r3, #3
 800c982:	0052      	lsls	r2, r2, #1
 800c984:	4210      	tst	r0, r2
 800c986:	f103 0304 	add.w	r3, r3, #4
 800c98a:	d0fa      	beq.n	800c982 <_malloc_r+0x17a>
 800c98c:	eb07 0cc3 	add.w	ip, r7, r3, lsl #3
 800c990:	46e1      	mov	r9, ip
 800c992:	4698      	mov	r8, r3
 800c994:	f8d9 400c 	ldr.w	r4, [r9, #12]
 800c998:	454c      	cmp	r4, r9
 800c99a:	f040 80af 	bne.w	800cafc <_malloc_r+0x2f4>
 800c99e:	f108 0801 	add.w	r8, r8, #1
 800c9a2:	f018 0f03 	tst.w	r8, #3
 800c9a6:	f109 0908 	add.w	r9, r9, #8
 800c9aa:	d1f3      	bne.n	800c994 <_malloc_r+0x18c>
 800c9ac:	0798      	lsls	r0, r3, #30
 800c9ae:	f040 80e8 	bne.w	800cb82 <_malloc_r+0x37a>
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	ea23 0302 	bic.w	r3, r3, r2
 800c9b8:	607b      	str	r3, [r7, #4]
 800c9ba:	6878      	ldr	r0, [r7, #4]
 800c9bc:	0052      	lsls	r2, r2, #1
 800c9be:	4290      	cmp	r0, r2
 800c9c0:	d302      	bcc.n	800c9c8 <_malloc_r+0x1c0>
 800c9c2:	2a00      	cmp	r2, #0
 800c9c4:	f040 80ec 	bne.w	800cba0 <_malloc_r+0x398>
 800c9c8:	f8d7 a008 	ldr.w	sl, [r7, #8]
 800c9cc:	f8da 4004 	ldr.w	r4, [sl, #4]
 800c9d0:	f024 0203 	bic.w	r2, r4, #3
 800c9d4:	42aa      	cmp	r2, r5
 800c9d6:	d303      	bcc.n	800c9e0 <_malloc_r+0x1d8>
 800c9d8:	1b53      	subs	r3, r2, r5
 800c9da:	2b0f      	cmp	r3, #15
 800c9dc:	f300 8140 	bgt.w	800cc60 <_malloc_r+0x458>
 800c9e0:	4b57      	ldr	r3, [pc, #348]	; (800cb40 <_malloc_r+0x338>)
 800c9e2:	9200      	str	r2, [sp, #0]
 800c9e4:	2008      	movs	r0, #8
 800c9e6:	681c      	ldr	r4, [r3, #0]
 800c9e8:	f002 f9f8 	bl	800eddc <sysconf>
 800c9ec:	4b55      	ldr	r3, [pc, #340]	; (800cb44 <_malloc_r+0x33c>)
 800c9ee:	9a00      	ldr	r2, [sp, #0]
 800c9f0:	6819      	ldr	r1, [r3, #0]
 800c9f2:	3410      	adds	r4, #16
 800c9f4:	3101      	adds	r1, #1
 800c9f6:	442c      	add	r4, r5
 800c9f8:	bf1f      	itttt	ne
 800c9fa:	f104 34ff 	addne.w	r4, r4, #4294967295
 800c9fe:	1824      	addne	r4, r4, r0
 800ca00:	4241      	negne	r1, r0
 800ca02:	400c      	andne	r4, r1
 800ca04:	4680      	mov	r8, r0
 800ca06:	4621      	mov	r1, r4
 800ca08:	4630      	mov	r0, r6
 800ca0a:	e9cd 2300 	strd	r2, r3, [sp]
 800ca0e:	f000 f945 	bl	800cc9c <_sbrk_r>
 800ca12:	f1b0 3fff 	cmp.w	r0, #4294967295
 800ca16:	4683      	mov	fp, r0
 800ca18:	f000 80fb 	beq.w	800cc12 <_malloc_r+0x40a>
 800ca1c:	9a00      	ldr	r2, [sp, #0]
 800ca1e:	9b01      	ldr	r3, [sp, #4]
 800ca20:	eb0a 0102 	add.w	r1, sl, r2
 800ca24:	4281      	cmp	r1, r0
 800ca26:	d902      	bls.n	800ca2e <_malloc_r+0x226>
 800ca28:	45ba      	cmp	sl, r7
 800ca2a:	f040 80f2 	bne.w	800cc12 <_malloc_r+0x40a>
 800ca2e:	f8df 9120 	ldr.w	r9, [pc, #288]	; 800cb50 <_malloc_r+0x348>
 800ca32:	f8d9 0000 	ldr.w	r0, [r9]
 800ca36:	4559      	cmp	r1, fp
 800ca38:	eb00 0e04 	add.w	lr, r0, r4
 800ca3c:	f8c9 e000 	str.w	lr, [r9]
 800ca40:	f108 3cff 	add.w	ip, r8, #4294967295
 800ca44:	f040 80ae 	bne.w	800cba4 <_malloc_r+0x39c>
 800ca48:	ea11 0f0c 	tst.w	r1, ip
 800ca4c:	f040 80aa 	bne.w	800cba4 <_malloc_r+0x39c>
 800ca50:	68bb      	ldr	r3, [r7, #8]
 800ca52:	4414      	add	r4, r2
 800ca54:	f044 0401 	orr.w	r4, r4, #1
 800ca58:	605c      	str	r4, [r3, #4]
 800ca5a:	4a3b      	ldr	r2, [pc, #236]	; (800cb48 <_malloc_r+0x340>)
 800ca5c:	f8d9 3000 	ldr.w	r3, [r9]
 800ca60:	6811      	ldr	r1, [r2, #0]
 800ca62:	428b      	cmp	r3, r1
 800ca64:	bf88      	it	hi
 800ca66:	6013      	strhi	r3, [r2, #0]
 800ca68:	4a38      	ldr	r2, [pc, #224]	; (800cb4c <_malloc_r+0x344>)
 800ca6a:	6811      	ldr	r1, [r2, #0]
 800ca6c:	428b      	cmp	r3, r1
 800ca6e:	bf88      	it	hi
 800ca70:	6013      	strhi	r3, [r2, #0]
 800ca72:	e0ce      	b.n	800cc12 <_malloc_r+0x40a>
 800ca74:	ea4f 225c 	mov.w	r2, ip, lsr #9
 800ca78:	2a04      	cmp	r2, #4
 800ca7a:	d818      	bhi.n	800caae <_malloc_r+0x2a6>
 800ca7c:	ea4f 129c 	mov.w	r2, ip, lsr #6
 800ca80:	3238      	adds	r2, #56	; 0x38
 800ca82:	f102 0e01 	add.w	lr, r2, #1
 800ca86:	eb07 08c2 	add.w	r8, r7, r2, lsl #3
 800ca8a:	f857 e03e 	ldr.w	lr, [r7, lr, lsl #3]
 800ca8e:	45f0      	cmp	r8, lr
 800ca90:	d12b      	bne.n	800caea <_malloc_r+0x2e2>
 800ca92:	1092      	asrs	r2, r2, #2
 800ca94:	f04f 0c01 	mov.w	ip, #1
 800ca98:	fa0c f202 	lsl.w	r2, ip, r2
 800ca9c:	4310      	orrs	r0, r2
 800ca9e:	6078      	str	r0, [r7, #4]
 800caa0:	e9c4 e802 	strd	lr, r8, [r4, #8]
 800caa4:	f8c8 4008 	str.w	r4, [r8, #8]
 800caa8:	f8ce 400c 	str.w	r4, [lr, #12]
 800caac:	e75e      	b.n	800c96c <_malloc_r+0x164>
 800caae:	2a14      	cmp	r2, #20
 800cab0:	d801      	bhi.n	800cab6 <_malloc_r+0x2ae>
 800cab2:	325b      	adds	r2, #91	; 0x5b
 800cab4:	e7e5      	b.n	800ca82 <_malloc_r+0x27a>
 800cab6:	2a54      	cmp	r2, #84	; 0x54
 800cab8:	d803      	bhi.n	800cac2 <_malloc_r+0x2ba>
 800caba:	ea4f 321c 	mov.w	r2, ip, lsr #12
 800cabe:	326e      	adds	r2, #110	; 0x6e
 800cac0:	e7df      	b.n	800ca82 <_malloc_r+0x27a>
 800cac2:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800cac6:	d803      	bhi.n	800cad0 <_malloc_r+0x2c8>
 800cac8:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 800cacc:	3277      	adds	r2, #119	; 0x77
 800cace:	e7d8      	b.n	800ca82 <_malloc_r+0x27a>
 800cad0:	f240 5e54 	movw	lr, #1364	; 0x554
 800cad4:	4572      	cmp	r2, lr
 800cad6:	bf9a      	itte	ls
 800cad8:	ea4f 429c 	movls.w	r2, ip, lsr #18
 800cadc:	327c      	addls	r2, #124	; 0x7c
 800cade:	227e      	movhi	r2, #126	; 0x7e
 800cae0:	e7cf      	b.n	800ca82 <_malloc_r+0x27a>
 800cae2:	f8de e008 	ldr.w	lr, [lr, #8]
 800cae6:	45f0      	cmp	r8, lr
 800cae8:	d005      	beq.n	800caf6 <_malloc_r+0x2ee>
 800caea:	f8de 2004 	ldr.w	r2, [lr, #4]
 800caee:	f022 0203 	bic.w	r2, r2, #3
 800caf2:	4562      	cmp	r2, ip
 800caf4:	d8f5      	bhi.n	800cae2 <_malloc_r+0x2da>
 800caf6:	f8de 800c 	ldr.w	r8, [lr, #12]
 800cafa:	e7d1      	b.n	800caa0 <_malloc_r+0x298>
 800cafc:	6860      	ldr	r0, [r4, #4]
 800cafe:	f8d4 e00c 	ldr.w	lr, [r4, #12]
 800cb02:	f020 0003 	bic.w	r0, r0, #3
 800cb06:	eba0 0a05 	sub.w	sl, r0, r5
 800cb0a:	f1ba 0f0f 	cmp.w	sl, #15
 800cb0e:	dd21      	ble.n	800cb54 <_malloc_r+0x34c>
 800cb10:	68a2      	ldr	r2, [r4, #8]
 800cb12:	1963      	adds	r3, r4, r5
 800cb14:	f045 0501 	orr.w	r5, r5, #1
 800cb18:	6065      	str	r5, [r4, #4]
 800cb1a:	f8c2 e00c 	str.w	lr, [r2, #12]
 800cb1e:	f8ce 2008 	str.w	r2, [lr, #8]
 800cb22:	f04a 0201 	orr.w	r2, sl, #1
 800cb26:	e9c7 3304 	strd	r3, r3, [r7, #16]
 800cb2a:	e9c3 1102 	strd	r1, r1, [r3, #8]
 800cb2e:	605a      	str	r2, [r3, #4]
 800cb30:	f844 a000 	str.w	sl, [r4, r0]
 800cb34:	e699      	b.n	800c86a <_malloc_r+0x62>
 800cb36:	bf00      	nop
 800cb38:	20000510 	.word	0x20000510
 800cb3c:	20000518 	.word	0x20000518
 800cb40:	20000b50 	.word	0x20000b50
 800cb44:	20000918 	.word	0x20000918
 800cb48:	20000b48 	.word	0x20000b48
 800cb4c:	20000b4c 	.word	0x20000b4c
 800cb50:	20000b20 	.word	0x20000b20
 800cb54:	f1ba 0f00 	cmp.w	sl, #0
 800cb58:	db11      	blt.n	800cb7e <_malloc_r+0x376>
 800cb5a:	4420      	add	r0, r4
 800cb5c:	6843      	ldr	r3, [r0, #4]
 800cb5e:	f043 0301 	orr.w	r3, r3, #1
 800cb62:	6043      	str	r3, [r0, #4]
 800cb64:	f854 3f08 	ldr.w	r3, [r4, #8]!
 800cb68:	4630      	mov	r0, r6
 800cb6a:	f8c3 e00c 	str.w	lr, [r3, #12]
 800cb6e:	f8ce 3008 	str.w	r3, [lr, #8]
 800cb72:	f000 f88d 	bl	800cc90 <__malloc_unlock>
 800cb76:	4620      	mov	r0, r4
 800cb78:	b003      	add	sp, #12
 800cb7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb7e:	4674      	mov	r4, lr
 800cb80:	e70a      	b.n	800c998 <_malloc_r+0x190>
 800cb82:	f1ac 0008 	sub.w	r0, ip, #8
 800cb86:	f8dc c000 	ldr.w	ip, [ip]
 800cb8a:	4584      	cmp	ip, r0
 800cb8c:	f103 33ff 	add.w	r3, r3, #4294967295
 800cb90:	f43f af0c 	beq.w	800c9ac <_malloc_r+0x1a4>
 800cb94:	e711      	b.n	800c9ba <_malloc_r+0x1b2>
 800cb96:	3304      	adds	r3, #4
 800cb98:	0052      	lsls	r2, r2, #1
 800cb9a:	4210      	tst	r0, r2
 800cb9c:	d0fb      	beq.n	800cb96 <_malloc_r+0x38e>
 800cb9e:	e6f5      	b.n	800c98c <_malloc_r+0x184>
 800cba0:	4643      	mov	r3, r8
 800cba2:	e7fa      	b.n	800cb9a <_malloc_r+0x392>
 800cba4:	6818      	ldr	r0, [r3, #0]
 800cba6:	9200      	str	r2, [sp, #0]
 800cba8:	3001      	adds	r0, #1
 800cbaa:	bf1b      	ittet	ne
 800cbac:	ebab 0101 	subne.w	r1, fp, r1
 800cbb0:	4471      	addne	r1, lr
 800cbb2:	f8c3 b000 	streq.w	fp, [r3]
 800cbb6:	f8c9 1000 	strne.w	r1, [r9]
 800cbba:	f01b 0307 	ands.w	r3, fp, #7
 800cbbe:	bf1c      	itt	ne
 800cbc0:	f1c3 0308 	rsbne	r3, r3, #8
 800cbc4:	449b      	addne	fp, r3
 800cbc6:	445c      	add	r4, fp
 800cbc8:	4498      	add	r8, r3
 800cbca:	ea04 030c 	and.w	r3, r4, ip
 800cbce:	eba8 0803 	sub.w	r8, r8, r3
 800cbd2:	4641      	mov	r1, r8
 800cbd4:	4630      	mov	r0, r6
 800cbd6:	f000 f861 	bl	800cc9c <_sbrk_r>
 800cbda:	1c43      	adds	r3, r0, #1
 800cbdc:	bf04      	itt	eq
 800cbde:	4658      	moveq	r0, fp
 800cbe0:	f04f 0800 	moveq.w	r8, #0
 800cbe4:	f8d9 3000 	ldr.w	r3, [r9]
 800cbe8:	f8c7 b008 	str.w	fp, [r7, #8]
 800cbec:	eba0 000b 	sub.w	r0, r0, fp
 800cbf0:	4440      	add	r0, r8
 800cbf2:	4443      	add	r3, r8
 800cbf4:	f040 0001 	orr.w	r0, r0, #1
 800cbf8:	45ba      	cmp	sl, r7
 800cbfa:	9a00      	ldr	r2, [sp, #0]
 800cbfc:	f8c9 3000 	str.w	r3, [r9]
 800cc00:	f8cb 0004 	str.w	r0, [fp, #4]
 800cc04:	f43f af29 	beq.w	800ca5a <_malloc_r+0x252>
 800cc08:	2a0f      	cmp	r2, #15
 800cc0a:	d810      	bhi.n	800cc2e <_malloc_r+0x426>
 800cc0c:	2301      	movs	r3, #1
 800cc0e:	f8cb 3004 	str.w	r3, [fp, #4]
 800cc12:	68bb      	ldr	r3, [r7, #8]
 800cc14:	685a      	ldr	r2, [r3, #4]
 800cc16:	f022 0203 	bic.w	r2, r2, #3
 800cc1a:	42aa      	cmp	r2, r5
 800cc1c:	eba2 0305 	sub.w	r3, r2, r5
 800cc20:	d301      	bcc.n	800cc26 <_malloc_r+0x41e>
 800cc22:	2b0f      	cmp	r3, #15
 800cc24:	dc1c      	bgt.n	800cc60 <_malloc_r+0x458>
 800cc26:	4630      	mov	r0, r6
 800cc28:	f000 f832 	bl	800cc90 <__malloc_unlock>
 800cc2c:	e5f8      	b.n	800c820 <_malloc_r+0x18>
 800cc2e:	f8da 3004 	ldr.w	r3, [sl, #4]
 800cc32:	f1a2 040c 	sub.w	r4, r2, #12
 800cc36:	f024 0407 	bic.w	r4, r4, #7
 800cc3a:	f003 0301 	and.w	r3, r3, #1
 800cc3e:	4323      	orrs	r3, r4
 800cc40:	f8ca 3004 	str.w	r3, [sl, #4]
 800cc44:	2205      	movs	r2, #5
 800cc46:	eb0a 0304 	add.w	r3, sl, r4
 800cc4a:	2c0f      	cmp	r4, #15
 800cc4c:	e9c3 2201 	strd	r2, r2, [r3, #4]
 800cc50:	f67f af03 	bls.w	800ca5a <_malloc_r+0x252>
 800cc54:	f10a 0108 	add.w	r1, sl, #8
 800cc58:	4630      	mov	r0, r6
 800cc5a:	f003 f8bb 	bl	800fdd4 <_free_r>
 800cc5e:	e6fc      	b.n	800ca5a <_malloc_r+0x252>
 800cc60:	68bc      	ldr	r4, [r7, #8]
 800cc62:	f045 0201 	orr.w	r2, r5, #1
 800cc66:	4425      	add	r5, r4
 800cc68:	f043 0301 	orr.w	r3, r3, #1
 800cc6c:	6062      	str	r2, [r4, #4]
 800cc6e:	60bd      	str	r5, [r7, #8]
 800cc70:	606b      	str	r3, [r5, #4]
 800cc72:	e5fa      	b.n	800c86a <_malloc_r+0x62>

0800cc74 <memset>:
 800cc74:	4402      	add	r2, r0
 800cc76:	4603      	mov	r3, r0
 800cc78:	4293      	cmp	r3, r2
 800cc7a:	d100      	bne.n	800cc7e <memset+0xa>
 800cc7c:	4770      	bx	lr
 800cc7e:	f803 1b01 	strb.w	r1, [r3], #1
 800cc82:	e7f9      	b.n	800cc78 <memset+0x4>

0800cc84 <__malloc_lock>:
 800cc84:	4801      	ldr	r0, [pc, #4]	; (800cc8c <__malloc_lock+0x8>)
 800cc86:	f003 bc97 	b.w	80105b8 <__retarget_lock_acquire_recursive>
 800cc8a:	bf00      	nop
 800cc8c:	20001178 	.word	0x20001178

0800cc90 <__malloc_unlock>:
 800cc90:	4801      	ldr	r0, [pc, #4]	; (800cc98 <__malloc_unlock+0x8>)
 800cc92:	f003 bc92 	b.w	80105ba <__retarget_lock_release_recursive>
 800cc96:	bf00      	nop
 800cc98:	20001178 	.word	0x20001178

0800cc9c <_sbrk_r>:
 800cc9c:	b538      	push	{r3, r4, r5, lr}
 800cc9e:	4c06      	ldr	r4, [pc, #24]	; (800ccb8 <_sbrk_r+0x1c>)
 800cca0:	2300      	movs	r3, #0
 800cca2:	4605      	mov	r5, r0
 800cca4:	4608      	mov	r0, r1
 800cca6:	6023      	str	r3, [r4, #0]
 800cca8:	f7f6 fbe2 	bl	8003470 <_sbrk>
 800ccac:	1c43      	adds	r3, r0, #1
 800ccae:	d102      	bne.n	800ccb6 <_sbrk_r+0x1a>
 800ccb0:	6823      	ldr	r3, [r4, #0]
 800ccb2:	b103      	cbz	r3, 800ccb6 <_sbrk_r+0x1a>
 800ccb4:	602b      	str	r3, [r5, #0]
 800ccb6:	bd38      	pop	{r3, r4, r5, pc}
 800ccb8:	20001180 	.word	0x20001180

0800ccbc <sprintf>:
 800ccbc:	b40e      	push	{r1, r2, r3}
 800ccbe:	b500      	push	{lr}
 800ccc0:	b09c      	sub	sp, #112	; 0x70
 800ccc2:	ab1d      	add	r3, sp, #116	; 0x74
 800ccc4:	9002      	str	r0, [sp, #8]
 800ccc6:	9006      	str	r0, [sp, #24]
 800ccc8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800cccc:	4809      	ldr	r0, [pc, #36]	; (800ccf4 <sprintf+0x38>)
 800ccce:	9107      	str	r1, [sp, #28]
 800ccd0:	9104      	str	r1, [sp, #16]
 800ccd2:	4909      	ldr	r1, [pc, #36]	; (800ccf8 <sprintf+0x3c>)
 800ccd4:	f853 2b04 	ldr.w	r2, [r3], #4
 800ccd8:	9105      	str	r1, [sp, #20]
 800ccda:	6800      	ldr	r0, [r0, #0]
 800ccdc:	9301      	str	r3, [sp, #4]
 800ccde:	a902      	add	r1, sp, #8
 800cce0:	f000 fe5e 	bl	800d9a0 <_svfprintf_r>
 800cce4:	9b02      	ldr	r3, [sp, #8]
 800cce6:	2200      	movs	r2, #0
 800cce8:	701a      	strb	r2, [r3, #0]
 800ccea:	b01c      	add	sp, #112	; 0x70
 800ccec:	f85d eb04 	ldr.w	lr, [sp], #4
 800ccf0:	b003      	add	sp, #12
 800ccf2:	4770      	bx	lr
 800ccf4:	200000e4 	.word	0x200000e4
 800ccf8:	ffff0208 	.word	0xffff0208

0800ccfc <strcat>:
 800ccfc:	b510      	push	{r4, lr}
 800ccfe:	4603      	mov	r3, r0
 800cd00:	781a      	ldrb	r2, [r3, #0]
 800cd02:	1c5c      	adds	r4, r3, #1
 800cd04:	b93a      	cbnz	r2, 800cd16 <strcat+0x1a>
 800cd06:	3b01      	subs	r3, #1
 800cd08:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cd0c:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cd10:	2a00      	cmp	r2, #0
 800cd12:	d1f9      	bne.n	800cd08 <strcat+0xc>
 800cd14:	bd10      	pop	{r4, pc}
 800cd16:	4623      	mov	r3, r4
 800cd18:	e7f2      	b.n	800cd00 <strcat+0x4>

0800cd1a <strcpy>:
 800cd1a:	4603      	mov	r3, r0
 800cd1c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cd20:	f803 2b01 	strb.w	r2, [r3], #1
 800cd24:	2a00      	cmp	r2, #0
 800cd26:	d1f9      	bne.n	800cd1c <strcpy+0x2>
 800cd28:	4770      	bx	lr

0800cd2a <strncpy>:
 800cd2a:	b570      	push	{r4, r5, r6, lr}
 800cd2c:	3901      	subs	r1, #1
 800cd2e:	4604      	mov	r4, r0
 800cd30:	b902      	cbnz	r2, 800cd34 <strncpy+0xa>
 800cd32:	bd70      	pop	{r4, r5, r6, pc}
 800cd34:	4623      	mov	r3, r4
 800cd36:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 800cd3a:	f803 5b01 	strb.w	r5, [r3], #1
 800cd3e:	1e56      	subs	r6, r2, #1
 800cd40:	b92d      	cbnz	r5, 800cd4e <strncpy+0x24>
 800cd42:	4414      	add	r4, r2
 800cd44:	42a3      	cmp	r3, r4
 800cd46:	d0f4      	beq.n	800cd32 <strncpy+0x8>
 800cd48:	f803 5b01 	strb.w	r5, [r3], #1
 800cd4c:	e7fa      	b.n	800cd44 <strncpy+0x1a>
 800cd4e:	461c      	mov	r4, r3
 800cd50:	4632      	mov	r2, r6
 800cd52:	e7ed      	b.n	800cd30 <strncpy+0x6>

0800cd54 <sulp>:
 800cd54:	b570      	push	{r4, r5, r6, lr}
 800cd56:	4604      	mov	r4, r0
 800cd58:	460d      	mov	r5, r1
 800cd5a:	ec45 4b10 	vmov	d0, r4, r5
 800cd5e:	4616      	mov	r6, r2
 800cd60:	f003 feea 	bl	8010b38 <__ulp>
 800cd64:	ec51 0b10 	vmov	r0, r1, d0
 800cd68:	b17e      	cbz	r6, 800cd8a <sulp+0x36>
 800cd6a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800cd6e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	dd09      	ble.n	800cd8a <sulp+0x36>
 800cd76:	051b      	lsls	r3, r3, #20
 800cd78:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800cd7c:	2400      	movs	r4, #0
 800cd7e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800cd82:	4622      	mov	r2, r4
 800cd84:	462b      	mov	r3, r5
 800cd86:	f7f3 fc47 	bl	8000618 <__aeabi_dmul>
 800cd8a:	bd70      	pop	{r4, r5, r6, pc}
 800cd8c:	0000      	movs	r0, r0
	...

0800cd90 <_strtod_l>:
 800cd90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd94:	461f      	mov	r7, r3
 800cd96:	b0a1      	sub	sp, #132	; 0x84
 800cd98:	2300      	movs	r3, #0
 800cd9a:	4681      	mov	r9, r0
 800cd9c:	4638      	mov	r0, r7
 800cd9e:	460e      	mov	r6, r1
 800cda0:	9217      	str	r2, [sp, #92]	; 0x5c
 800cda2:	931c      	str	r3, [sp, #112]	; 0x70
 800cda4:	f003 fbf8 	bl	8010598 <__localeconv_l>
 800cda8:	4680      	mov	r8, r0
 800cdaa:	6800      	ldr	r0, [r0, #0]
 800cdac:	f7f3 fa1a 	bl	80001e4 <strlen>
 800cdb0:	f04f 0a00 	mov.w	sl, #0
 800cdb4:	4604      	mov	r4, r0
 800cdb6:	f04f 0b00 	mov.w	fp, #0
 800cdba:	961b      	str	r6, [sp, #108]	; 0x6c
 800cdbc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800cdbe:	781a      	ldrb	r2, [r3, #0]
 800cdc0:	2a0d      	cmp	r2, #13
 800cdc2:	d832      	bhi.n	800ce2a <_strtod_l+0x9a>
 800cdc4:	2a09      	cmp	r2, #9
 800cdc6:	d236      	bcs.n	800ce36 <_strtod_l+0xa6>
 800cdc8:	2a00      	cmp	r2, #0
 800cdca:	d03e      	beq.n	800ce4a <_strtod_l+0xba>
 800cdcc:	2300      	movs	r3, #0
 800cdce:	930d      	str	r3, [sp, #52]	; 0x34
 800cdd0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800cdd2:	782b      	ldrb	r3, [r5, #0]
 800cdd4:	2b30      	cmp	r3, #48	; 0x30
 800cdd6:	f040 80ac 	bne.w	800cf32 <_strtod_l+0x1a2>
 800cdda:	786b      	ldrb	r3, [r5, #1]
 800cddc:	2b58      	cmp	r3, #88	; 0x58
 800cdde:	d001      	beq.n	800cde4 <_strtod_l+0x54>
 800cde0:	2b78      	cmp	r3, #120	; 0x78
 800cde2:	d167      	bne.n	800ceb4 <_strtod_l+0x124>
 800cde4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cde6:	9301      	str	r3, [sp, #4]
 800cde8:	ab1c      	add	r3, sp, #112	; 0x70
 800cdea:	9300      	str	r3, [sp, #0]
 800cdec:	9702      	str	r7, [sp, #8]
 800cdee:	ab1d      	add	r3, sp, #116	; 0x74
 800cdf0:	4a88      	ldr	r2, [pc, #544]	; (800d014 <_strtod_l+0x284>)
 800cdf2:	a91b      	add	r1, sp, #108	; 0x6c
 800cdf4:	4648      	mov	r0, r9
 800cdf6:	f003 f8f8 	bl	800ffea <__gethex>
 800cdfa:	f010 0407 	ands.w	r4, r0, #7
 800cdfe:	4606      	mov	r6, r0
 800ce00:	d005      	beq.n	800ce0e <_strtod_l+0x7e>
 800ce02:	2c06      	cmp	r4, #6
 800ce04:	d12b      	bne.n	800ce5e <_strtod_l+0xce>
 800ce06:	3501      	adds	r5, #1
 800ce08:	2300      	movs	r3, #0
 800ce0a:	951b      	str	r5, [sp, #108]	; 0x6c
 800ce0c:	930d      	str	r3, [sp, #52]	; 0x34
 800ce0e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	f040 859a 	bne.w	800d94a <_strtod_l+0xbba>
 800ce16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ce18:	b1e3      	cbz	r3, 800ce54 <_strtod_l+0xc4>
 800ce1a:	4652      	mov	r2, sl
 800ce1c:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800ce20:	ec43 2b10 	vmov	d0, r2, r3
 800ce24:	b021      	add	sp, #132	; 0x84
 800ce26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce2a:	2a2b      	cmp	r2, #43	; 0x2b
 800ce2c:	d015      	beq.n	800ce5a <_strtod_l+0xca>
 800ce2e:	2a2d      	cmp	r2, #45	; 0x2d
 800ce30:	d004      	beq.n	800ce3c <_strtod_l+0xac>
 800ce32:	2a20      	cmp	r2, #32
 800ce34:	d1ca      	bne.n	800cdcc <_strtod_l+0x3c>
 800ce36:	3301      	adds	r3, #1
 800ce38:	931b      	str	r3, [sp, #108]	; 0x6c
 800ce3a:	e7bf      	b.n	800cdbc <_strtod_l+0x2c>
 800ce3c:	2201      	movs	r2, #1
 800ce3e:	920d      	str	r2, [sp, #52]	; 0x34
 800ce40:	1c5a      	adds	r2, r3, #1
 800ce42:	921b      	str	r2, [sp, #108]	; 0x6c
 800ce44:	785b      	ldrb	r3, [r3, #1]
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d1c2      	bne.n	800cdd0 <_strtod_l+0x40>
 800ce4a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ce4c:	961b      	str	r6, [sp, #108]	; 0x6c
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	f040 8579 	bne.w	800d946 <_strtod_l+0xbb6>
 800ce54:	4652      	mov	r2, sl
 800ce56:	465b      	mov	r3, fp
 800ce58:	e7e2      	b.n	800ce20 <_strtod_l+0x90>
 800ce5a:	2200      	movs	r2, #0
 800ce5c:	e7ef      	b.n	800ce3e <_strtod_l+0xae>
 800ce5e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800ce60:	b13a      	cbz	r2, 800ce72 <_strtod_l+0xe2>
 800ce62:	2135      	movs	r1, #53	; 0x35
 800ce64:	a81e      	add	r0, sp, #120	; 0x78
 800ce66:	f003 ff7d 	bl	8010d64 <__copybits>
 800ce6a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800ce6c:	4648      	mov	r0, r9
 800ce6e:	f003 fbe7 	bl	8010640 <_Bfree>
 800ce72:	3c01      	subs	r4, #1
 800ce74:	2c04      	cmp	r4, #4
 800ce76:	d806      	bhi.n	800ce86 <_strtod_l+0xf6>
 800ce78:	e8df f004 	tbb	[pc, r4]
 800ce7c:	1714030a 	.word	0x1714030a
 800ce80:	0a          	.byte	0x0a
 800ce81:	00          	.byte	0x00
 800ce82:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 800ce86:	0730      	lsls	r0, r6, #28
 800ce88:	d5c1      	bpl.n	800ce0e <_strtod_l+0x7e>
 800ce8a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800ce8e:	e7be      	b.n	800ce0e <_strtod_l+0x7e>
 800ce90:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 800ce94:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800ce96:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800ce9a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800ce9e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800cea2:	e7f0      	b.n	800ce86 <_strtod_l+0xf6>
 800cea4:	f8df b170 	ldr.w	fp, [pc, #368]	; 800d018 <_strtod_l+0x288>
 800cea8:	e7ed      	b.n	800ce86 <_strtod_l+0xf6>
 800ceaa:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800ceae:	f04f 3aff 	mov.w	sl, #4294967295
 800ceb2:	e7e8      	b.n	800ce86 <_strtod_l+0xf6>
 800ceb4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ceb6:	1c5a      	adds	r2, r3, #1
 800ceb8:	921b      	str	r2, [sp, #108]	; 0x6c
 800ceba:	785b      	ldrb	r3, [r3, #1]
 800cebc:	2b30      	cmp	r3, #48	; 0x30
 800cebe:	d0f9      	beq.n	800ceb4 <_strtod_l+0x124>
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d0a4      	beq.n	800ce0e <_strtod_l+0x7e>
 800cec4:	2301      	movs	r3, #1
 800cec6:	2500      	movs	r5, #0
 800cec8:	9306      	str	r3, [sp, #24]
 800ceca:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800cecc:	9308      	str	r3, [sp, #32]
 800cece:	9507      	str	r5, [sp, #28]
 800ced0:	9505      	str	r5, [sp, #20]
 800ced2:	220a      	movs	r2, #10
 800ced4:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800ced6:	7807      	ldrb	r7, [r0, #0]
 800ced8:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800cedc:	b2d9      	uxtb	r1, r3
 800cede:	2909      	cmp	r1, #9
 800cee0:	d929      	bls.n	800cf36 <_strtod_l+0x1a6>
 800cee2:	4622      	mov	r2, r4
 800cee4:	f8d8 1000 	ldr.w	r1, [r8]
 800cee8:	f004 f956 	bl	8011198 <strncmp>
 800ceec:	2800      	cmp	r0, #0
 800ceee:	d031      	beq.n	800cf54 <_strtod_l+0x1c4>
 800cef0:	2000      	movs	r0, #0
 800cef2:	9c05      	ldr	r4, [sp, #20]
 800cef4:	9004      	str	r0, [sp, #16]
 800cef6:	463b      	mov	r3, r7
 800cef8:	4602      	mov	r2, r0
 800cefa:	2b65      	cmp	r3, #101	; 0x65
 800cefc:	d001      	beq.n	800cf02 <_strtod_l+0x172>
 800cefe:	2b45      	cmp	r3, #69	; 0x45
 800cf00:	d114      	bne.n	800cf2c <_strtod_l+0x19c>
 800cf02:	b924      	cbnz	r4, 800cf0e <_strtod_l+0x17e>
 800cf04:	b910      	cbnz	r0, 800cf0c <_strtod_l+0x17c>
 800cf06:	9b06      	ldr	r3, [sp, #24]
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d09e      	beq.n	800ce4a <_strtod_l+0xba>
 800cf0c:	2400      	movs	r4, #0
 800cf0e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800cf10:	1c73      	adds	r3, r6, #1
 800cf12:	931b      	str	r3, [sp, #108]	; 0x6c
 800cf14:	7873      	ldrb	r3, [r6, #1]
 800cf16:	2b2b      	cmp	r3, #43	; 0x2b
 800cf18:	d078      	beq.n	800d00c <_strtod_l+0x27c>
 800cf1a:	2b2d      	cmp	r3, #45	; 0x2d
 800cf1c:	d070      	beq.n	800d000 <_strtod_l+0x270>
 800cf1e:	f04f 0c00 	mov.w	ip, #0
 800cf22:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800cf26:	2f09      	cmp	r7, #9
 800cf28:	d97c      	bls.n	800d024 <_strtod_l+0x294>
 800cf2a:	961b      	str	r6, [sp, #108]	; 0x6c
 800cf2c:	f04f 0e00 	mov.w	lr, #0
 800cf30:	e09a      	b.n	800d068 <_strtod_l+0x2d8>
 800cf32:	2300      	movs	r3, #0
 800cf34:	e7c7      	b.n	800cec6 <_strtod_l+0x136>
 800cf36:	9905      	ldr	r1, [sp, #20]
 800cf38:	2908      	cmp	r1, #8
 800cf3a:	bfdd      	ittte	le
 800cf3c:	9907      	ldrle	r1, [sp, #28]
 800cf3e:	fb02 3301 	mlale	r3, r2, r1, r3
 800cf42:	9307      	strle	r3, [sp, #28]
 800cf44:	fb02 3505 	mlagt	r5, r2, r5, r3
 800cf48:	9b05      	ldr	r3, [sp, #20]
 800cf4a:	3001      	adds	r0, #1
 800cf4c:	3301      	adds	r3, #1
 800cf4e:	9305      	str	r3, [sp, #20]
 800cf50:	901b      	str	r0, [sp, #108]	; 0x6c
 800cf52:	e7bf      	b.n	800ced4 <_strtod_l+0x144>
 800cf54:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800cf56:	191a      	adds	r2, r3, r4
 800cf58:	921b      	str	r2, [sp, #108]	; 0x6c
 800cf5a:	9a05      	ldr	r2, [sp, #20]
 800cf5c:	5d1b      	ldrb	r3, [r3, r4]
 800cf5e:	2a00      	cmp	r2, #0
 800cf60:	d037      	beq.n	800cfd2 <_strtod_l+0x242>
 800cf62:	9c05      	ldr	r4, [sp, #20]
 800cf64:	4602      	mov	r2, r0
 800cf66:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800cf6a:	2909      	cmp	r1, #9
 800cf6c:	d913      	bls.n	800cf96 <_strtod_l+0x206>
 800cf6e:	2101      	movs	r1, #1
 800cf70:	9104      	str	r1, [sp, #16]
 800cf72:	e7c2      	b.n	800cefa <_strtod_l+0x16a>
 800cf74:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800cf76:	1c5a      	adds	r2, r3, #1
 800cf78:	921b      	str	r2, [sp, #108]	; 0x6c
 800cf7a:	785b      	ldrb	r3, [r3, #1]
 800cf7c:	3001      	adds	r0, #1
 800cf7e:	2b30      	cmp	r3, #48	; 0x30
 800cf80:	d0f8      	beq.n	800cf74 <_strtod_l+0x1e4>
 800cf82:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800cf86:	2a08      	cmp	r2, #8
 800cf88:	f200 84e4 	bhi.w	800d954 <_strtod_l+0xbc4>
 800cf8c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800cf8e:	9208      	str	r2, [sp, #32]
 800cf90:	4602      	mov	r2, r0
 800cf92:	2000      	movs	r0, #0
 800cf94:	4604      	mov	r4, r0
 800cf96:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800cf9a:	f100 0101 	add.w	r1, r0, #1
 800cf9e:	d012      	beq.n	800cfc6 <_strtod_l+0x236>
 800cfa0:	440a      	add	r2, r1
 800cfa2:	eb00 0c04 	add.w	ip, r0, r4
 800cfa6:	4621      	mov	r1, r4
 800cfa8:	270a      	movs	r7, #10
 800cfaa:	458c      	cmp	ip, r1
 800cfac:	d113      	bne.n	800cfd6 <_strtod_l+0x246>
 800cfae:	1821      	adds	r1, r4, r0
 800cfb0:	2908      	cmp	r1, #8
 800cfb2:	f104 0401 	add.w	r4, r4, #1
 800cfb6:	4404      	add	r4, r0
 800cfb8:	dc19      	bgt.n	800cfee <_strtod_l+0x25e>
 800cfba:	9b07      	ldr	r3, [sp, #28]
 800cfbc:	210a      	movs	r1, #10
 800cfbe:	fb01 e303 	mla	r3, r1, r3, lr
 800cfc2:	9307      	str	r3, [sp, #28]
 800cfc4:	2100      	movs	r1, #0
 800cfc6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800cfc8:	1c58      	adds	r0, r3, #1
 800cfca:	901b      	str	r0, [sp, #108]	; 0x6c
 800cfcc:	785b      	ldrb	r3, [r3, #1]
 800cfce:	4608      	mov	r0, r1
 800cfd0:	e7c9      	b.n	800cf66 <_strtod_l+0x1d6>
 800cfd2:	9805      	ldr	r0, [sp, #20]
 800cfd4:	e7d3      	b.n	800cf7e <_strtod_l+0x1ee>
 800cfd6:	2908      	cmp	r1, #8
 800cfd8:	f101 0101 	add.w	r1, r1, #1
 800cfdc:	dc03      	bgt.n	800cfe6 <_strtod_l+0x256>
 800cfde:	9b07      	ldr	r3, [sp, #28]
 800cfe0:	437b      	muls	r3, r7
 800cfe2:	9307      	str	r3, [sp, #28]
 800cfe4:	e7e1      	b.n	800cfaa <_strtod_l+0x21a>
 800cfe6:	2910      	cmp	r1, #16
 800cfe8:	bfd8      	it	le
 800cfea:	437d      	mulle	r5, r7
 800cfec:	e7dd      	b.n	800cfaa <_strtod_l+0x21a>
 800cfee:	2c10      	cmp	r4, #16
 800cff0:	bfdc      	itt	le
 800cff2:	210a      	movle	r1, #10
 800cff4:	fb01 e505 	mlale	r5, r1, r5, lr
 800cff8:	e7e4      	b.n	800cfc4 <_strtod_l+0x234>
 800cffa:	2301      	movs	r3, #1
 800cffc:	9304      	str	r3, [sp, #16]
 800cffe:	e781      	b.n	800cf04 <_strtod_l+0x174>
 800d000:	f04f 0c01 	mov.w	ip, #1
 800d004:	1cb3      	adds	r3, r6, #2
 800d006:	931b      	str	r3, [sp, #108]	; 0x6c
 800d008:	78b3      	ldrb	r3, [r6, #2]
 800d00a:	e78a      	b.n	800cf22 <_strtod_l+0x192>
 800d00c:	f04f 0c00 	mov.w	ip, #0
 800d010:	e7f8      	b.n	800d004 <_strtod_l+0x274>
 800d012:	bf00      	nop
 800d014:	08011aec 	.word	0x08011aec
 800d018:	7ff00000 	.word	0x7ff00000
 800d01c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d01e:	1c5f      	adds	r7, r3, #1
 800d020:	971b      	str	r7, [sp, #108]	; 0x6c
 800d022:	785b      	ldrb	r3, [r3, #1]
 800d024:	2b30      	cmp	r3, #48	; 0x30
 800d026:	d0f9      	beq.n	800d01c <_strtod_l+0x28c>
 800d028:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800d02c:	2f08      	cmp	r7, #8
 800d02e:	f63f af7d 	bhi.w	800cf2c <_strtod_l+0x19c>
 800d032:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800d036:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d038:	930a      	str	r3, [sp, #40]	; 0x28
 800d03a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d03c:	1c5f      	adds	r7, r3, #1
 800d03e:	971b      	str	r7, [sp, #108]	; 0x6c
 800d040:	785b      	ldrb	r3, [r3, #1]
 800d042:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800d046:	f1b8 0f09 	cmp.w	r8, #9
 800d04a:	d937      	bls.n	800d0bc <_strtod_l+0x32c>
 800d04c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800d04e:	1a7f      	subs	r7, r7, r1
 800d050:	2f08      	cmp	r7, #8
 800d052:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800d056:	dc37      	bgt.n	800d0c8 <_strtod_l+0x338>
 800d058:	45be      	cmp	lr, r7
 800d05a:	bfa8      	it	ge
 800d05c:	46be      	movge	lr, r7
 800d05e:	f1bc 0f00 	cmp.w	ip, #0
 800d062:	d001      	beq.n	800d068 <_strtod_l+0x2d8>
 800d064:	f1ce 0e00 	rsb	lr, lr, #0
 800d068:	2c00      	cmp	r4, #0
 800d06a:	d151      	bne.n	800d110 <_strtod_l+0x380>
 800d06c:	2800      	cmp	r0, #0
 800d06e:	f47f aece 	bne.w	800ce0e <_strtod_l+0x7e>
 800d072:	9a06      	ldr	r2, [sp, #24]
 800d074:	2a00      	cmp	r2, #0
 800d076:	f47f aeca 	bne.w	800ce0e <_strtod_l+0x7e>
 800d07a:	9a04      	ldr	r2, [sp, #16]
 800d07c:	2a00      	cmp	r2, #0
 800d07e:	f47f aee4 	bne.w	800ce4a <_strtod_l+0xba>
 800d082:	2b4e      	cmp	r3, #78	; 0x4e
 800d084:	d027      	beq.n	800d0d6 <_strtod_l+0x346>
 800d086:	dc21      	bgt.n	800d0cc <_strtod_l+0x33c>
 800d088:	2b49      	cmp	r3, #73	; 0x49
 800d08a:	f47f aede 	bne.w	800ce4a <_strtod_l+0xba>
 800d08e:	49a0      	ldr	r1, [pc, #640]	; (800d310 <_strtod_l+0x580>)
 800d090:	a81b      	add	r0, sp, #108	; 0x6c
 800d092:	f003 f9dd 	bl	8010450 <__match>
 800d096:	2800      	cmp	r0, #0
 800d098:	f43f aed7 	beq.w	800ce4a <_strtod_l+0xba>
 800d09c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d09e:	499d      	ldr	r1, [pc, #628]	; (800d314 <_strtod_l+0x584>)
 800d0a0:	3b01      	subs	r3, #1
 800d0a2:	a81b      	add	r0, sp, #108	; 0x6c
 800d0a4:	931b      	str	r3, [sp, #108]	; 0x6c
 800d0a6:	f003 f9d3 	bl	8010450 <__match>
 800d0aa:	b910      	cbnz	r0, 800d0b2 <_strtod_l+0x322>
 800d0ac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d0ae:	3301      	adds	r3, #1
 800d0b0:	931b      	str	r3, [sp, #108]	; 0x6c
 800d0b2:	f8df b274 	ldr.w	fp, [pc, #628]	; 800d328 <_strtod_l+0x598>
 800d0b6:	f04f 0a00 	mov.w	sl, #0
 800d0ba:	e6a8      	b.n	800ce0e <_strtod_l+0x7e>
 800d0bc:	210a      	movs	r1, #10
 800d0be:	fb01 3e0e 	mla	lr, r1, lr, r3
 800d0c2:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800d0c6:	e7b8      	b.n	800d03a <_strtod_l+0x2aa>
 800d0c8:	46be      	mov	lr, r7
 800d0ca:	e7c8      	b.n	800d05e <_strtod_l+0x2ce>
 800d0cc:	2b69      	cmp	r3, #105	; 0x69
 800d0ce:	d0de      	beq.n	800d08e <_strtod_l+0x2fe>
 800d0d0:	2b6e      	cmp	r3, #110	; 0x6e
 800d0d2:	f47f aeba 	bne.w	800ce4a <_strtod_l+0xba>
 800d0d6:	4990      	ldr	r1, [pc, #576]	; (800d318 <_strtod_l+0x588>)
 800d0d8:	a81b      	add	r0, sp, #108	; 0x6c
 800d0da:	f003 f9b9 	bl	8010450 <__match>
 800d0de:	2800      	cmp	r0, #0
 800d0e0:	f43f aeb3 	beq.w	800ce4a <_strtod_l+0xba>
 800d0e4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d0e6:	781b      	ldrb	r3, [r3, #0]
 800d0e8:	2b28      	cmp	r3, #40	; 0x28
 800d0ea:	d10e      	bne.n	800d10a <_strtod_l+0x37a>
 800d0ec:	aa1e      	add	r2, sp, #120	; 0x78
 800d0ee:	498b      	ldr	r1, [pc, #556]	; (800d31c <_strtod_l+0x58c>)
 800d0f0:	a81b      	add	r0, sp, #108	; 0x6c
 800d0f2:	f003 f9c1 	bl	8010478 <__hexnan>
 800d0f6:	2805      	cmp	r0, #5
 800d0f8:	d107      	bne.n	800d10a <_strtod_l+0x37a>
 800d0fa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d0fc:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 800d100:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800d104:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800d108:	e681      	b.n	800ce0e <_strtod_l+0x7e>
 800d10a:	f8df b224 	ldr.w	fp, [pc, #548]	; 800d330 <_strtod_l+0x5a0>
 800d10e:	e7d2      	b.n	800d0b6 <_strtod_l+0x326>
 800d110:	ebae 0302 	sub.w	r3, lr, r2
 800d114:	9306      	str	r3, [sp, #24]
 800d116:	9b05      	ldr	r3, [sp, #20]
 800d118:	9807      	ldr	r0, [sp, #28]
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	bf08      	it	eq
 800d11e:	4623      	moveq	r3, r4
 800d120:	2c10      	cmp	r4, #16
 800d122:	9305      	str	r3, [sp, #20]
 800d124:	46a0      	mov	r8, r4
 800d126:	bfa8      	it	ge
 800d128:	f04f 0810 	movge.w	r8, #16
 800d12c:	f7f3 f9fa 	bl	8000524 <__aeabi_ui2d>
 800d130:	2c09      	cmp	r4, #9
 800d132:	4682      	mov	sl, r0
 800d134:	468b      	mov	fp, r1
 800d136:	dc13      	bgt.n	800d160 <_strtod_l+0x3d0>
 800d138:	9b06      	ldr	r3, [sp, #24]
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	f43f ae67 	beq.w	800ce0e <_strtod_l+0x7e>
 800d140:	9b06      	ldr	r3, [sp, #24]
 800d142:	dd7a      	ble.n	800d23a <_strtod_l+0x4aa>
 800d144:	2b16      	cmp	r3, #22
 800d146:	dc61      	bgt.n	800d20c <_strtod_l+0x47c>
 800d148:	4a75      	ldr	r2, [pc, #468]	; (800d320 <_strtod_l+0x590>)
 800d14a:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800d14e:	e9de 0100 	ldrd	r0, r1, [lr]
 800d152:	4652      	mov	r2, sl
 800d154:	465b      	mov	r3, fp
 800d156:	f7f3 fa5f 	bl	8000618 <__aeabi_dmul>
 800d15a:	4682      	mov	sl, r0
 800d15c:	468b      	mov	fp, r1
 800d15e:	e656      	b.n	800ce0e <_strtod_l+0x7e>
 800d160:	4b6f      	ldr	r3, [pc, #444]	; (800d320 <_strtod_l+0x590>)
 800d162:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800d166:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800d16a:	f7f3 fa55 	bl	8000618 <__aeabi_dmul>
 800d16e:	4606      	mov	r6, r0
 800d170:	4628      	mov	r0, r5
 800d172:	460f      	mov	r7, r1
 800d174:	f7f3 f9d6 	bl	8000524 <__aeabi_ui2d>
 800d178:	4602      	mov	r2, r0
 800d17a:	460b      	mov	r3, r1
 800d17c:	4630      	mov	r0, r6
 800d17e:	4639      	mov	r1, r7
 800d180:	f7f3 f894 	bl	80002ac <__adddf3>
 800d184:	2c0f      	cmp	r4, #15
 800d186:	4682      	mov	sl, r0
 800d188:	468b      	mov	fp, r1
 800d18a:	ddd5      	ble.n	800d138 <_strtod_l+0x3a8>
 800d18c:	9b06      	ldr	r3, [sp, #24]
 800d18e:	eba4 0808 	sub.w	r8, r4, r8
 800d192:	4498      	add	r8, r3
 800d194:	f1b8 0f00 	cmp.w	r8, #0
 800d198:	f340 8096 	ble.w	800d2c8 <_strtod_l+0x538>
 800d19c:	f018 030f 	ands.w	r3, r8, #15
 800d1a0:	d00a      	beq.n	800d1b8 <_strtod_l+0x428>
 800d1a2:	495f      	ldr	r1, [pc, #380]	; (800d320 <_strtod_l+0x590>)
 800d1a4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d1a8:	4652      	mov	r2, sl
 800d1aa:	465b      	mov	r3, fp
 800d1ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d1b0:	f7f3 fa32 	bl	8000618 <__aeabi_dmul>
 800d1b4:	4682      	mov	sl, r0
 800d1b6:	468b      	mov	fp, r1
 800d1b8:	f038 080f 	bics.w	r8, r8, #15
 800d1bc:	d073      	beq.n	800d2a6 <_strtod_l+0x516>
 800d1be:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800d1c2:	dd47      	ble.n	800d254 <_strtod_l+0x4c4>
 800d1c4:	2400      	movs	r4, #0
 800d1c6:	46a0      	mov	r8, r4
 800d1c8:	9407      	str	r4, [sp, #28]
 800d1ca:	9405      	str	r4, [sp, #20]
 800d1cc:	2322      	movs	r3, #34	; 0x22
 800d1ce:	f8df b158 	ldr.w	fp, [pc, #344]	; 800d328 <_strtod_l+0x598>
 800d1d2:	f8c9 3000 	str.w	r3, [r9]
 800d1d6:	f04f 0a00 	mov.w	sl, #0
 800d1da:	9b07      	ldr	r3, [sp, #28]
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	f43f ae16 	beq.w	800ce0e <_strtod_l+0x7e>
 800d1e2:	991c      	ldr	r1, [sp, #112]	; 0x70
 800d1e4:	4648      	mov	r0, r9
 800d1e6:	f003 fa2b 	bl	8010640 <_Bfree>
 800d1ea:	9905      	ldr	r1, [sp, #20]
 800d1ec:	4648      	mov	r0, r9
 800d1ee:	f003 fa27 	bl	8010640 <_Bfree>
 800d1f2:	4641      	mov	r1, r8
 800d1f4:	4648      	mov	r0, r9
 800d1f6:	f003 fa23 	bl	8010640 <_Bfree>
 800d1fa:	9907      	ldr	r1, [sp, #28]
 800d1fc:	4648      	mov	r0, r9
 800d1fe:	f003 fa1f 	bl	8010640 <_Bfree>
 800d202:	4621      	mov	r1, r4
 800d204:	4648      	mov	r0, r9
 800d206:	f003 fa1b 	bl	8010640 <_Bfree>
 800d20a:	e600      	b.n	800ce0e <_strtod_l+0x7e>
 800d20c:	9a06      	ldr	r2, [sp, #24]
 800d20e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800d212:	4293      	cmp	r3, r2
 800d214:	dbba      	blt.n	800d18c <_strtod_l+0x3fc>
 800d216:	4d42      	ldr	r5, [pc, #264]	; (800d320 <_strtod_l+0x590>)
 800d218:	f1c4 040f 	rsb	r4, r4, #15
 800d21c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800d220:	4652      	mov	r2, sl
 800d222:	465b      	mov	r3, fp
 800d224:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d228:	f7f3 f9f6 	bl	8000618 <__aeabi_dmul>
 800d22c:	9b06      	ldr	r3, [sp, #24]
 800d22e:	1b1c      	subs	r4, r3, r4
 800d230:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800d234:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d238:	e78d      	b.n	800d156 <_strtod_l+0x3c6>
 800d23a:	f113 0f16 	cmn.w	r3, #22
 800d23e:	dba5      	blt.n	800d18c <_strtod_l+0x3fc>
 800d240:	4a37      	ldr	r2, [pc, #220]	; (800d320 <_strtod_l+0x590>)
 800d242:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800d246:	e9d2 2300 	ldrd	r2, r3, [r2]
 800d24a:	4650      	mov	r0, sl
 800d24c:	4659      	mov	r1, fp
 800d24e:	f7f3 fb0d 	bl	800086c <__aeabi_ddiv>
 800d252:	e782      	b.n	800d15a <_strtod_l+0x3ca>
 800d254:	2300      	movs	r3, #0
 800d256:	4e33      	ldr	r6, [pc, #204]	; (800d324 <_strtod_l+0x594>)
 800d258:	ea4f 1828 	mov.w	r8, r8, asr #4
 800d25c:	4650      	mov	r0, sl
 800d25e:	4659      	mov	r1, fp
 800d260:	461d      	mov	r5, r3
 800d262:	f1b8 0f01 	cmp.w	r8, #1
 800d266:	dc21      	bgt.n	800d2ac <_strtod_l+0x51c>
 800d268:	b10b      	cbz	r3, 800d26e <_strtod_l+0x4de>
 800d26a:	4682      	mov	sl, r0
 800d26c:	468b      	mov	fp, r1
 800d26e:	4b2d      	ldr	r3, [pc, #180]	; (800d324 <_strtod_l+0x594>)
 800d270:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800d274:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800d278:	4652      	mov	r2, sl
 800d27a:	465b      	mov	r3, fp
 800d27c:	e9d5 0100 	ldrd	r0, r1, [r5]
 800d280:	f7f3 f9ca 	bl	8000618 <__aeabi_dmul>
 800d284:	4b28      	ldr	r3, [pc, #160]	; (800d328 <_strtod_l+0x598>)
 800d286:	460a      	mov	r2, r1
 800d288:	400b      	ands	r3, r1
 800d28a:	4928      	ldr	r1, [pc, #160]	; (800d32c <_strtod_l+0x59c>)
 800d28c:	428b      	cmp	r3, r1
 800d28e:	4682      	mov	sl, r0
 800d290:	d898      	bhi.n	800d1c4 <_strtod_l+0x434>
 800d292:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800d296:	428b      	cmp	r3, r1
 800d298:	bf86      	itte	hi
 800d29a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800d334 <_strtod_l+0x5a4>
 800d29e:	f04f 3aff 	movhi.w	sl, #4294967295
 800d2a2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800d2a6:	2300      	movs	r3, #0
 800d2a8:	9304      	str	r3, [sp, #16]
 800d2aa:	e077      	b.n	800d39c <_strtod_l+0x60c>
 800d2ac:	f018 0f01 	tst.w	r8, #1
 800d2b0:	d006      	beq.n	800d2c0 <_strtod_l+0x530>
 800d2b2:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800d2b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2ba:	f7f3 f9ad 	bl	8000618 <__aeabi_dmul>
 800d2be:	2301      	movs	r3, #1
 800d2c0:	3501      	adds	r5, #1
 800d2c2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800d2c6:	e7cc      	b.n	800d262 <_strtod_l+0x4d2>
 800d2c8:	d0ed      	beq.n	800d2a6 <_strtod_l+0x516>
 800d2ca:	f1c8 0800 	rsb	r8, r8, #0
 800d2ce:	f018 020f 	ands.w	r2, r8, #15
 800d2d2:	d00a      	beq.n	800d2ea <_strtod_l+0x55a>
 800d2d4:	4b12      	ldr	r3, [pc, #72]	; (800d320 <_strtod_l+0x590>)
 800d2d6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d2da:	4650      	mov	r0, sl
 800d2dc:	4659      	mov	r1, fp
 800d2de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2e2:	f7f3 fac3 	bl	800086c <__aeabi_ddiv>
 800d2e6:	4682      	mov	sl, r0
 800d2e8:	468b      	mov	fp, r1
 800d2ea:	ea5f 1828 	movs.w	r8, r8, asr #4
 800d2ee:	d0da      	beq.n	800d2a6 <_strtod_l+0x516>
 800d2f0:	f1b8 0f1f 	cmp.w	r8, #31
 800d2f4:	dd20      	ble.n	800d338 <_strtod_l+0x5a8>
 800d2f6:	2400      	movs	r4, #0
 800d2f8:	46a0      	mov	r8, r4
 800d2fa:	9407      	str	r4, [sp, #28]
 800d2fc:	9405      	str	r4, [sp, #20]
 800d2fe:	2322      	movs	r3, #34	; 0x22
 800d300:	f04f 0a00 	mov.w	sl, #0
 800d304:	f04f 0b00 	mov.w	fp, #0
 800d308:	f8c9 3000 	str.w	r3, [r9]
 800d30c:	e765      	b.n	800d1da <_strtod_l+0x44a>
 800d30e:	bf00      	nop
 800d310:	08011b45 	.word	0x08011b45
 800d314:	08011b97 	.word	0x08011b97
 800d318:	08011b4d 	.word	0x08011b4d
 800d31c:	08011b00 	.word	0x08011b00
 800d320:	08011bd8 	.word	0x08011bd8
 800d324:	08011bb0 	.word	0x08011bb0
 800d328:	7ff00000 	.word	0x7ff00000
 800d32c:	7ca00000 	.word	0x7ca00000
 800d330:	fff80000 	.word	0xfff80000
 800d334:	7fefffff 	.word	0x7fefffff
 800d338:	f018 0310 	ands.w	r3, r8, #16
 800d33c:	bf18      	it	ne
 800d33e:	236a      	movne	r3, #106	; 0x6a
 800d340:	4da0      	ldr	r5, [pc, #640]	; (800d5c4 <_strtod_l+0x834>)
 800d342:	9304      	str	r3, [sp, #16]
 800d344:	4650      	mov	r0, sl
 800d346:	4659      	mov	r1, fp
 800d348:	2300      	movs	r3, #0
 800d34a:	f1b8 0f00 	cmp.w	r8, #0
 800d34e:	f300 810a 	bgt.w	800d566 <_strtod_l+0x7d6>
 800d352:	b10b      	cbz	r3, 800d358 <_strtod_l+0x5c8>
 800d354:	4682      	mov	sl, r0
 800d356:	468b      	mov	fp, r1
 800d358:	9b04      	ldr	r3, [sp, #16]
 800d35a:	b1bb      	cbz	r3, 800d38c <_strtod_l+0x5fc>
 800d35c:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800d360:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d364:	2b00      	cmp	r3, #0
 800d366:	4659      	mov	r1, fp
 800d368:	dd10      	ble.n	800d38c <_strtod_l+0x5fc>
 800d36a:	2b1f      	cmp	r3, #31
 800d36c:	f340 8107 	ble.w	800d57e <_strtod_l+0x7ee>
 800d370:	2b34      	cmp	r3, #52	; 0x34
 800d372:	bfde      	ittt	le
 800d374:	3b20      	suble	r3, #32
 800d376:	f04f 32ff 	movle.w	r2, #4294967295
 800d37a:	fa02 f303 	lslle.w	r3, r2, r3
 800d37e:	f04f 0a00 	mov.w	sl, #0
 800d382:	bfcc      	ite	gt
 800d384:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800d388:	ea03 0b01 	andle.w	fp, r3, r1
 800d38c:	2200      	movs	r2, #0
 800d38e:	2300      	movs	r3, #0
 800d390:	4650      	mov	r0, sl
 800d392:	4659      	mov	r1, fp
 800d394:	f7f3 fba8 	bl	8000ae8 <__aeabi_dcmpeq>
 800d398:	2800      	cmp	r0, #0
 800d39a:	d1ac      	bne.n	800d2f6 <_strtod_l+0x566>
 800d39c:	9b07      	ldr	r3, [sp, #28]
 800d39e:	9300      	str	r3, [sp, #0]
 800d3a0:	9a05      	ldr	r2, [sp, #20]
 800d3a2:	9908      	ldr	r1, [sp, #32]
 800d3a4:	4623      	mov	r3, r4
 800d3a6:	4648      	mov	r0, r9
 800d3a8:	f003 f98e 	bl	80106c8 <__s2b>
 800d3ac:	9007      	str	r0, [sp, #28]
 800d3ae:	2800      	cmp	r0, #0
 800d3b0:	f43f af08 	beq.w	800d1c4 <_strtod_l+0x434>
 800d3b4:	9a06      	ldr	r2, [sp, #24]
 800d3b6:	9b06      	ldr	r3, [sp, #24]
 800d3b8:	2a00      	cmp	r2, #0
 800d3ba:	f1c3 0300 	rsb	r3, r3, #0
 800d3be:	bfa8      	it	ge
 800d3c0:	2300      	movge	r3, #0
 800d3c2:	930e      	str	r3, [sp, #56]	; 0x38
 800d3c4:	2400      	movs	r4, #0
 800d3c6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800d3ca:	9316      	str	r3, [sp, #88]	; 0x58
 800d3cc:	46a0      	mov	r8, r4
 800d3ce:	9b07      	ldr	r3, [sp, #28]
 800d3d0:	4648      	mov	r0, r9
 800d3d2:	6859      	ldr	r1, [r3, #4]
 800d3d4:	f003 f90f 	bl	80105f6 <_Balloc>
 800d3d8:	9005      	str	r0, [sp, #20]
 800d3da:	2800      	cmp	r0, #0
 800d3dc:	f43f aef6 	beq.w	800d1cc <_strtod_l+0x43c>
 800d3e0:	9b07      	ldr	r3, [sp, #28]
 800d3e2:	691a      	ldr	r2, [r3, #16]
 800d3e4:	3202      	adds	r2, #2
 800d3e6:	f103 010c 	add.w	r1, r3, #12
 800d3ea:	0092      	lsls	r2, r2, #2
 800d3ec:	300c      	adds	r0, #12
 800d3ee:	f003 f8f7 	bl	80105e0 <memcpy>
 800d3f2:	aa1e      	add	r2, sp, #120	; 0x78
 800d3f4:	a91d      	add	r1, sp, #116	; 0x74
 800d3f6:	ec4b ab10 	vmov	d0, sl, fp
 800d3fa:	4648      	mov	r0, r9
 800d3fc:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800d400:	f003 fc10 	bl	8010c24 <__d2b>
 800d404:	901c      	str	r0, [sp, #112]	; 0x70
 800d406:	2800      	cmp	r0, #0
 800d408:	f43f aee0 	beq.w	800d1cc <_strtod_l+0x43c>
 800d40c:	2101      	movs	r1, #1
 800d40e:	4648      	mov	r0, r9
 800d410:	f003 f9e6 	bl	80107e0 <__i2b>
 800d414:	4680      	mov	r8, r0
 800d416:	2800      	cmp	r0, #0
 800d418:	f43f aed8 	beq.w	800d1cc <_strtod_l+0x43c>
 800d41c:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800d41e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800d420:	2e00      	cmp	r6, #0
 800d422:	bfab      	itete	ge
 800d424:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800d426:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800d428:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800d42a:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 800d42c:	bfac      	ite	ge
 800d42e:	18f7      	addge	r7, r6, r3
 800d430:	1b9d      	sublt	r5, r3, r6
 800d432:	9b04      	ldr	r3, [sp, #16]
 800d434:	1af6      	subs	r6, r6, r3
 800d436:	4416      	add	r6, r2
 800d438:	4b63      	ldr	r3, [pc, #396]	; (800d5c8 <_strtod_l+0x838>)
 800d43a:	3e01      	subs	r6, #1
 800d43c:	429e      	cmp	r6, r3
 800d43e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800d442:	f280 80af 	bge.w	800d5a4 <_strtod_l+0x814>
 800d446:	1b9b      	subs	r3, r3, r6
 800d448:	2b1f      	cmp	r3, #31
 800d44a:	eba2 0203 	sub.w	r2, r2, r3
 800d44e:	f04f 0101 	mov.w	r1, #1
 800d452:	f300 809b 	bgt.w	800d58c <_strtod_l+0x7fc>
 800d456:	fa01 f303 	lsl.w	r3, r1, r3
 800d45a:	930f      	str	r3, [sp, #60]	; 0x3c
 800d45c:	2300      	movs	r3, #0
 800d45e:	930a      	str	r3, [sp, #40]	; 0x28
 800d460:	18be      	adds	r6, r7, r2
 800d462:	9b04      	ldr	r3, [sp, #16]
 800d464:	42b7      	cmp	r7, r6
 800d466:	4415      	add	r5, r2
 800d468:	441d      	add	r5, r3
 800d46a:	463b      	mov	r3, r7
 800d46c:	bfa8      	it	ge
 800d46e:	4633      	movge	r3, r6
 800d470:	42ab      	cmp	r3, r5
 800d472:	bfa8      	it	ge
 800d474:	462b      	movge	r3, r5
 800d476:	2b00      	cmp	r3, #0
 800d478:	bfc2      	ittt	gt
 800d47a:	1af6      	subgt	r6, r6, r3
 800d47c:	1aed      	subgt	r5, r5, r3
 800d47e:	1aff      	subgt	r7, r7, r3
 800d480:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d482:	b1bb      	cbz	r3, 800d4b4 <_strtod_l+0x724>
 800d484:	4641      	mov	r1, r8
 800d486:	461a      	mov	r2, r3
 800d488:	4648      	mov	r0, r9
 800d48a:	f003 fa49 	bl	8010920 <__pow5mult>
 800d48e:	4680      	mov	r8, r0
 800d490:	2800      	cmp	r0, #0
 800d492:	f43f ae9b 	beq.w	800d1cc <_strtod_l+0x43c>
 800d496:	4601      	mov	r1, r0
 800d498:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800d49a:	4648      	mov	r0, r9
 800d49c:	f003 f9a9 	bl	80107f2 <__multiply>
 800d4a0:	900c      	str	r0, [sp, #48]	; 0x30
 800d4a2:	2800      	cmp	r0, #0
 800d4a4:	f43f ae92 	beq.w	800d1cc <_strtod_l+0x43c>
 800d4a8:	991c      	ldr	r1, [sp, #112]	; 0x70
 800d4aa:	4648      	mov	r0, r9
 800d4ac:	f003 f8c8 	bl	8010640 <_Bfree>
 800d4b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d4b2:	931c      	str	r3, [sp, #112]	; 0x70
 800d4b4:	2e00      	cmp	r6, #0
 800d4b6:	dc7a      	bgt.n	800d5ae <_strtod_l+0x81e>
 800d4b8:	9b06      	ldr	r3, [sp, #24]
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	dd08      	ble.n	800d4d0 <_strtod_l+0x740>
 800d4be:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800d4c0:	9905      	ldr	r1, [sp, #20]
 800d4c2:	4648      	mov	r0, r9
 800d4c4:	f003 fa2c 	bl	8010920 <__pow5mult>
 800d4c8:	9005      	str	r0, [sp, #20]
 800d4ca:	2800      	cmp	r0, #0
 800d4cc:	f43f ae7e 	beq.w	800d1cc <_strtod_l+0x43c>
 800d4d0:	2d00      	cmp	r5, #0
 800d4d2:	dd08      	ble.n	800d4e6 <_strtod_l+0x756>
 800d4d4:	462a      	mov	r2, r5
 800d4d6:	9905      	ldr	r1, [sp, #20]
 800d4d8:	4648      	mov	r0, r9
 800d4da:	f003 fa61 	bl	80109a0 <__lshift>
 800d4de:	9005      	str	r0, [sp, #20]
 800d4e0:	2800      	cmp	r0, #0
 800d4e2:	f43f ae73 	beq.w	800d1cc <_strtod_l+0x43c>
 800d4e6:	2f00      	cmp	r7, #0
 800d4e8:	dd08      	ble.n	800d4fc <_strtod_l+0x76c>
 800d4ea:	4641      	mov	r1, r8
 800d4ec:	463a      	mov	r2, r7
 800d4ee:	4648      	mov	r0, r9
 800d4f0:	f003 fa56 	bl	80109a0 <__lshift>
 800d4f4:	4680      	mov	r8, r0
 800d4f6:	2800      	cmp	r0, #0
 800d4f8:	f43f ae68 	beq.w	800d1cc <_strtod_l+0x43c>
 800d4fc:	9a05      	ldr	r2, [sp, #20]
 800d4fe:	991c      	ldr	r1, [sp, #112]	; 0x70
 800d500:	4648      	mov	r0, r9
 800d502:	f003 fabb 	bl	8010a7c <__mdiff>
 800d506:	4604      	mov	r4, r0
 800d508:	2800      	cmp	r0, #0
 800d50a:	f43f ae5f 	beq.w	800d1cc <_strtod_l+0x43c>
 800d50e:	68c3      	ldr	r3, [r0, #12]
 800d510:	930c      	str	r3, [sp, #48]	; 0x30
 800d512:	2300      	movs	r3, #0
 800d514:	60c3      	str	r3, [r0, #12]
 800d516:	4641      	mov	r1, r8
 800d518:	f003 fa96 	bl	8010a48 <__mcmp>
 800d51c:	2800      	cmp	r0, #0
 800d51e:	da55      	bge.n	800d5cc <_strtod_l+0x83c>
 800d520:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d522:	b9e3      	cbnz	r3, 800d55e <_strtod_l+0x7ce>
 800d524:	f1ba 0f00 	cmp.w	sl, #0
 800d528:	d119      	bne.n	800d55e <_strtod_l+0x7ce>
 800d52a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d52e:	b9b3      	cbnz	r3, 800d55e <_strtod_l+0x7ce>
 800d530:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d534:	0d1b      	lsrs	r3, r3, #20
 800d536:	051b      	lsls	r3, r3, #20
 800d538:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800d53c:	d90f      	bls.n	800d55e <_strtod_l+0x7ce>
 800d53e:	6963      	ldr	r3, [r4, #20]
 800d540:	b913      	cbnz	r3, 800d548 <_strtod_l+0x7b8>
 800d542:	6923      	ldr	r3, [r4, #16]
 800d544:	2b01      	cmp	r3, #1
 800d546:	dd0a      	ble.n	800d55e <_strtod_l+0x7ce>
 800d548:	4621      	mov	r1, r4
 800d54a:	2201      	movs	r2, #1
 800d54c:	4648      	mov	r0, r9
 800d54e:	f003 fa27 	bl	80109a0 <__lshift>
 800d552:	4641      	mov	r1, r8
 800d554:	4604      	mov	r4, r0
 800d556:	f003 fa77 	bl	8010a48 <__mcmp>
 800d55a:	2800      	cmp	r0, #0
 800d55c:	dc67      	bgt.n	800d62e <_strtod_l+0x89e>
 800d55e:	9b04      	ldr	r3, [sp, #16]
 800d560:	2b00      	cmp	r3, #0
 800d562:	d171      	bne.n	800d648 <_strtod_l+0x8b8>
 800d564:	e63d      	b.n	800d1e2 <_strtod_l+0x452>
 800d566:	f018 0f01 	tst.w	r8, #1
 800d56a:	d004      	beq.n	800d576 <_strtod_l+0x7e6>
 800d56c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d570:	f7f3 f852 	bl	8000618 <__aeabi_dmul>
 800d574:	2301      	movs	r3, #1
 800d576:	ea4f 0868 	mov.w	r8, r8, asr #1
 800d57a:	3508      	adds	r5, #8
 800d57c:	e6e5      	b.n	800d34a <_strtod_l+0x5ba>
 800d57e:	f04f 32ff 	mov.w	r2, #4294967295
 800d582:	fa02 f303 	lsl.w	r3, r2, r3
 800d586:	ea03 0a0a 	and.w	sl, r3, sl
 800d58a:	e6ff      	b.n	800d38c <_strtod_l+0x5fc>
 800d58c:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800d590:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800d594:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800d598:	36e2      	adds	r6, #226	; 0xe2
 800d59a:	fa01 f306 	lsl.w	r3, r1, r6
 800d59e:	930a      	str	r3, [sp, #40]	; 0x28
 800d5a0:	910f      	str	r1, [sp, #60]	; 0x3c
 800d5a2:	e75d      	b.n	800d460 <_strtod_l+0x6d0>
 800d5a4:	2300      	movs	r3, #0
 800d5a6:	930a      	str	r3, [sp, #40]	; 0x28
 800d5a8:	2301      	movs	r3, #1
 800d5aa:	930f      	str	r3, [sp, #60]	; 0x3c
 800d5ac:	e758      	b.n	800d460 <_strtod_l+0x6d0>
 800d5ae:	4632      	mov	r2, r6
 800d5b0:	991c      	ldr	r1, [sp, #112]	; 0x70
 800d5b2:	4648      	mov	r0, r9
 800d5b4:	f003 f9f4 	bl	80109a0 <__lshift>
 800d5b8:	901c      	str	r0, [sp, #112]	; 0x70
 800d5ba:	2800      	cmp	r0, #0
 800d5bc:	f47f af7c 	bne.w	800d4b8 <_strtod_l+0x728>
 800d5c0:	e604      	b.n	800d1cc <_strtod_l+0x43c>
 800d5c2:	bf00      	nop
 800d5c4:	08011b18 	.word	0x08011b18
 800d5c8:	fffffc02 	.word	0xfffffc02
 800d5cc:	465d      	mov	r5, fp
 800d5ce:	f040 8086 	bne.w	800d6de <_strtod_l+0x94e>
 800d5d2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d5d4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d5d8:	b32a      	cbz	r2, 800d626 <_strtod_l+0x896>
 800d5da:	4aaf      	ldr	r2, [pc, #700]	; (800d898 <_strtod_l+0xb08>)
 800d5dc:	4293      	cmp	r3, r2
 800d5de:	d153      	bne.n	800d688 <_strtod_l+0x8f8>
 800d5e0:	9b04      	ldr	r3, [sp, #16]
 800d5e2:	4650      	mov	r0, sl
 800d5e4:	b1d3      	cbz	r3, 800d61c <_strtod_l+0x88c>
 800d5e6:	4aad      	ldr	r2, [pc, #692]	; (800d89c <_strtod_l+0xb0c>)
 800d5e8:	402a      	ands	r2, r5
 800d5ea:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800d5ee:	f04f 31ff 	mov.w	r1, #4294967295
 800d5f2:	d816      	bhi.n	800d622 <_strtod_l+0x892>
 800d5f4:	0d12      	lsrs	r2, r2, #20
 800d5f6:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800d5fa:	fa01 f303 	lsl.w	r3, r1, r3
 800d5fe:	4298      	cmp	r0, r3
 800d600:	d142      	bne.n	800d688 <_strtod_l+0x8f8>
 800d602:	4ba7      	ldr	r3, [pc, #668]	; (800d8a0 <_strtod_l+0xb10>)
 800d604:	429d      	cmp	r5, r3
 800d606:	d102      	bne.n	800d60e <_strtod_l+0x87e>
 800d608:	3001      	adds	r0, #1
 800d60a:	f43f addf 	beq.w	800d1cc <_strtod_l+0x43c>
 800d60e:	4ba3      	ldr	r3, [pc, #652]	; (800d89c <_strtod_l+0xb0c>)
 800d610:	402b      	ands	r3, r5
 800d612:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800d616:	f04f 0a00 	mov.w	sl, #0
 800d61a:	e7a0      	b.n	800d55e <_strtod_l+0x7ce>
 800d61c:	f04f 33ff 	mov.w	r3, #4294967295
 800d620:	e7ed      	b.n	800d5fe <_strtod_l+0x86e>
 800d622:	460b      	mov	r3, r1
 800d624:	e7eb      	b.n	800d5fe <_strtod_l+0x86e>
 800d626:	bb7b      	cbnz	r3, 800d688 <_strtod_l+0x8f8>
 800d628:	f1ba 0f00 	cmp.w	sl, #0
 800d62c:	d12c      	bne.n	800d688 <_strtod_l+0x8f8>
 800d62e:	9904      	ldr	r1, [sp, #16]
 800d630:	4a9a      	ldr	r2, [pc, #616]	; (800d89c <_strtod_l+0xb0c>)
 800d632:	465b      	mov	r3, fp
 800d634:	b1f1      	cbz	r1, 800d674 <_strtod_l+0x8e4>
 800d636:	ea02 010b 	and.w	r1, r2, fp
 800d63a:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800d63e:	dc19      	bgt.n	800d674 <_strtod_l+0x8e4>
 800d640:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800d644:	f77f ae5b 	ble.w	800d2fe <_strtod_l+0x56e>
 800d648:	4a96      	ldr	r2, [pc, #600]	; (800d8a4 <_strtod_l+0xb14>)
 800d64a:	2300      	movs	r3, #0
 800d64c:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800d650:	4650      	mov	r0, sl
 800d652:	4659      	mov	r1, fp
 800d654:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800d658:	f7f2 ffde 	bl	8000618 <__aeabi_dmul>
 800d65c:	4682      	mov	sl, r0
 800d65e:	468b      	mov	fp, r1
 800d660:	2900      	cmp	r1, #0
 800d662:	f47f adbe 	bne.w	800d1e2 <_strtod_l+0x452>
 800d666:	2800      	cmp	r0, #0
 800d668:	f47f adbb 	bne.w	800d1e2 <_strtod_l+0x452>
 800d66c:	2322      	movs	r3, #34	; 0x22
 800d66e:	f8c9 3000 	str.w	r3, [r9]
 800d672:	e5b6      	b.n	800d1e2 <_strtod_l+0x452>
 800d674:	4013      	ands	r3, r2
 800d676:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800d67a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800d67e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800d682:	f04f 3aff 	mov.w	sl, #4294967295
 800d686:	e76a      	b.n	800d55e <_strtod_l+0x7ce>
 800d688:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d68a:	b193      	cbz	r3, 800d6b2 <_strtod_l+0x922>
 800d68c:	422b      	tst	r3, r5
 800d68e:	f43f af66 	beq.w	800d55e <_strtod_l+0x7ce>
 800d692:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d694:	9a04      	ldr	r2, [sp, #16]
 800d696:	4650      	mov	r0, sl
 800d698:	4659      	mov	r1, fp
 800d69a:	b173      	cbz	r3, 800d6ba <_strtod_l+0x92a>
 800d69c:	f7ff fb5a 	bl	800cd54 <sulp>
 800d6a0:	4602      	mov	r2, r0
 800d6a2:	460b      	mov	r3, r1
 800d6a4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d6a8:	f7f2 fe00 	bl	80002ac <__adddf3>
 800d6ac:	4682      	mov	sl, r0
 800d6ae:	468b      	mov	fp, r1
 800d6b0:	e755      	b.n	800d55e <_strtod_l+0x7ce>
 800d6b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d6b4:	ea13 0f0a 	tst.w	r3, sl
 800d6b8:	e7e9      	b.n	800d68e <_strtod_l+0x8fe>
 800d6ba:	f7ff fb4b 	bl	800cd54 <sulp>
 800d6be:	4602      	mov	r2, r0
 800d6c0:	460b      	mov	r3, r1
 800d6c2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d6c6:	f7f2 fdef 	bl	80002a8 <__aeabi_dsub>
 800d6ca:	2200      	movs	r2, #0
 800d6cc:	2300      	movs	r3, #0
 800d6ce:	4682      	mov	sl, r0
 800d6d0:	468b      	mov	fp, r1
 800d6d2:	f7f3 fa09 	bl	8000ae8 <__aeabi_dcmpeq>
 800d6d6:	2800      	cmp	r0, #0
 800d6d8:	f47f ae11 	bne.w	800d2fe <_strtod_l+0x56e>
 800d6dc:	e73f      	b.n	800d55e <_strtod_l+0x7ce>
 800d6de:	4641      	mov	r1, r8
 800d6e0:	4620      	mov	r0, r4
 800d6e2:	f003 faee 	bl	8010cc2 <__ratio>
 800d6e6:	ec57 6b10 	vmov	r6, r7, d0
 800d6ea:	2200      	movs	r2, #0
 800d6ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d6f0:	ee10 0a10 	vmov	r0, s0
 800d6f4:	4639      	mov	r1, r7
 800d6f6:	f7f3 fa0b 	bl	8000b10 <__aeabi_dcmple>
 800d6fa:	2800      	cmp	r0, #0
 800d6fc:	d077      	beq.n	800d7ee <_strtod_l+0xa5e>
 800d6fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d700:	2b00      	cmp	r3, #0
 800d702:	d04a      	beq.n	800d79a <_strtod_l+0xa0a>
 800d704:	4b68      	ldr	r3, [pc, #416]	; (800d8a8 <_strtod_l+0xb18>)
 800d706:	2200      	movs	r2, #0
 800d708:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800d70c:	4f66      	ldr	r7, [pc, #408]	; (800d8a8 <_strtod_l+0xb18>)
 800d70e:	2600      	movs	r6, #0
 800d710:	4b62      	ldr	r3, [pc, #392]	; (800d89c <_strtod_l+0xb0c>)
 800d712:	402b      	ands	r3, r5
 800d714:	930f      	str	r3, [sp, #60]	; 0x3c
 800d716:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d718:	4b64      	ldr	r3, [pc, #400]	; (800d8ac <_strtod_l+0xb1c>)
 800d71a:	429a      	cmp	r2, r3
 800d71c:	f040 80ce 	bne.w	800d8bc <_strtod_l+0xb2c>
 800d720:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800d724:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800d728:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 800d72c:	ec4b ab10 	vmov	d0, sl, fp
 800d730:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800d734:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800d738:	f003 f9fe 	bl	8010b38 <__ulp>
 800d73c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800d740:	ec53 2b10 	vmov	r2, r3, d0
 800d744:	f7f2 ff68 	bl	8000618 <__aeabi_dmul>
 800d748:	4652      	mov	r2, sl
 800d74a:	465b      	mov	r3, fp
 800d74c:	f7f2 fdae 	bl	80002ac <__adddf3>
 800d750:	460b      	mov	r3, r1
 800d752:	4952      	ldr	r1, [pc, #328]	; (800d89c <_strtod_l+0xb0c>)
 800d754:	4a56      	ldr	r2, [pc, #344]	; (800d8b0 <_strtod_l+0xb20>)
 800d756:	4019      	ands	r1, r3
 800d758:	4291      	cmp	r1, r2
 800d75a:	4682      	mov	sl, r0
 800d75c:	d95b      	bls.n	800d816 <_strtod_l+0xa86>
 800d75e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d760:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800d764:	4293      	cmp	r3, r2
 800d766:	d103      	bne.n	800d770 <_strtod_l+0x9e0>
 800d768:	9b08      	ldr	r3, [sp, #32]
 800d76a:	3301      	adds	r3, #1
 800d76c:	f43f ad2e 	beq.w	800d1cc <_strtod_l+0x43c>
 800d770:	f8df b12c 	ldr.w	fp, [pc, #300]	; 800d8a0 <_strtod_l+0xb10>
 800d774:	f04f 3aff 	mov.w	sl, #4294967295
 800d778:	991c      	ldr	r1, [sp, #112]	; 0x70
 800d77a:	4648      	mov	r0, r9
 800d77c:	f002 ff60 	bl	8010640 <_Bfree>
 800d780:	9905      	ldr	r1, [sp, #20]
 800d782:	4648      	mov	r0, r9
 800d784:	f002 ff5c 	bl	8010640 <_Bfree>
 800d788:	4641      	mov	r1, r8
 800d78a:	4648      	mov	r0, r9
 800d78c:	f002 ff58 	bl	8010640 <_Bfree>
 800d790:	4621      	mov	r1, r4
 800d792:	4648      	mov	r0, r9
 800d794:	f002 ff54 	bl	8010640 <_Bfree>
 800d798:	e619      	b.n	800d3ce <_strtod_l+0x63e>
 800d79a:	f1ba 0f00 	cmp.w	sl, #0
 800d79e:	d11a      	bne.n	800d7d6 <_strtod_l+0xa46>
 800d7a0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d7a4:	b9eb      	cbnz	r3, 800d7e2 <_strtod_l+0xa52>
 800d7a6:	2200      	movs	r2, #0
 800d7a8:	4b3f      	ldr	r3, [pc, #252]	; (800d8a8 <_strtod_l+0xb18>)
 800d7aa:	4630      	mov	r0, r6
 800d7ac:	4639      	mov	r1, r7
 800d7ae:	f7f3 f9a5 	bl	8000afc <__aeabi_dcmplt>
 800d7b2:	b9c8      	cbnz	r0, 800d7e8 <_strtod_l+0xa58>
 800d7b4:	4630      	mov	r0, r6
 800d7b6:	4639      	mov	r1, r7
 800d7b8:	2200      	movs	r2, #0
 800d7ba:	4b3e      	ldr	r3, [pc, #248]	; (800d8b4 <_strtod_l+0xb24>)
 800d7bc:	f7f2 ff2c 	bl	8000618 <__aeabi_dmul>
 800d7c0:	4606      	mov	r6, r0
 800d7c2:	460f      	mov	r7, r1
 800d7c4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800d7c8:	9618      	str	r6, [sp, #96]	; 0x60
 800d7ca:	9319      	str	r3, [sp, #100]	; 0x64
 800d7cc:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800d7d0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800d7d4:	e79c      	b.n	800d710 <_strtod_l+0x980>
 800d7d6:	f1ba 0f01 	cmp.w	sl, #1
 800d7da:	d102      	bne.n	800d7e2 <_strtod_l+0xa52>
 800d7dc:	2d00      	cmp	r5, #0
 800d7de:	f43f ad8e 	beq.w	800d2fe <_strtod_l+0x56e>
 800d7e2:	2200      	movs	r2, #0
 800d7e4:	4b34      	ldr	r3, [pc, #208]	; (800d8b8 <_strtod_l+0xb28>)
 800d7e6:	e78f      	b.n	800d708 <_strtod_l+0x978>
 800d7e8:	2600      	movs	r6, #0
 800d7ea:	4f32      	ldr	r7, [pc, #200]	; (800d8b4 <_strtod_l+0xb24>)
 800d7ec:	e7ea      	b.n	800d7c4 <_strtod_l+0xa34>
 800d7ee:	4b31      	ldr	r3, [pc, #196]	; (800d8b4 <_strtod_l+0xb24>)
 800d7f0:	4630      	mov	r0, r6
 800d7f2:	4639      	mov	r1, r7
 800d7f4:	2200      	movs	r2, #0
 800d7f6:	f7f2 ff0f 	bl	8000618 <__aeabi_dmul>
 800d7fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d7fc:	4606      	mov	r6, r0
 800d7fe:	460f      	mov	r7, r1
 800d800:	b933      	cbnz	r3, 800d810 <_strtod_l+0xa80>
 800d802:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d806:	9010      	str	r0, [sp, #64]	; 0x40
 800d808:	9311      	str	r3, [sp, #68]	; 0x44
 800d80a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d80e:	e7df      	b.n	800d7d0 <_strtod_l+0xa40>
 800d810:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800d814:	e7f9      	b.n	800d80a <_strtod_l+0xa7a>
 800d816:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800d81a:	9b04      	ldr	r3, [sp, #16]
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d1ab      	bne.n	800d778 <_strtod_l+0x9e8>
 800d820:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d824:	0d1b      	lsrs	r3, r3, #20
 800d826:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d828:	051b      	lsls	r3, r3, #20
 800d82a:	429a      	cmp	r2, r3
 800d82c:	465d      	mov	r5, fp
 800d82e:	d1a3      	bne.n	800d778 <_strtod_l+0x9e8>
 800d830:	4639      	mov	r1, r7
 800d832:	4630      	mov	r0, r6
 800d834:	f7f3 f9a0 	bl	8000b78 <__aeabi_d2iz>
 800d838:	f7f2 fe84 	bl	8000544 <__aeabi_i2d>
 800d83c:	460b      	mov	r3, r1
 800d83e:	4602      	mov	r2, r0
 800d840:	4639      	mov	r1, r7
 800d842:	4630      	mov	r0, r6
 800d844:	f7f2 fd30 	bl	80002a8 <__aeabi_dsub>
 800d848:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d84a:	4606      	mov	r6, r0
 800d84c:	460f      	mov	r7, r1
 800d84e:	b933      	cbnz	r3, 800d85e <_strtod_l+0xace>
 800d850:	f1ba 0f00 	cmp.w	sl, #0
 800d854:	d103      	bne.n	800d85e <_strtod_l+0xace>
 800d856:	f3cb 0513 	ubfx	r5, fp, #0, #20
 800d85a:	2d00      	cmp	r5, #0
 800d85c:	d06d      	beq.n	800d93a <_strtod_l+0xbaa>
 800d85e:	a30a      	add	r3, pc, #40	; (adr r3, 800d888 <_strtod_l+0xaf8>)
 800d860:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d864:	4630      	mov	r0, r6
 800d866:	4639      	mov	r1, r7
 800d868:	f7f3 f948 	bl	8000afc <__aeabi_dcmplt>
 800d86c:	2800      	cmp	r0, #0
 800d86e:	f47f acb8 	bne.w	800d1e2 <_strtod_l+0x452>
 800d872:	a307      	add	r3, pc, #28	; (adr r3, 800d890 <_strtod_l+0xb00>)
 800d874:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d878:	4630      	mov	r0, r6
 800d87a:	4639      	mov	r1, r7
 800d87c:	f7f3 f95c 	bl	8000b38 <__aeabi_dcmpgt>
 800d880:	2800      	cmp	r0, #0
 800d882:	f43f af79 	beq.w	800d778 <_strtod_l+0x9e8>
 800d886:	e4ac      	b.n	800d1e2 <_strtod_l+0x452>
 800d888:	94a03595 	.word	0x94a03595
 800d88c:	3fdfffff 	.word	0x3fdfffff
 800d890:	35afe535 	.word	0x35afe535
 800d894:	3fe00000 	.word	0x3fe00000
 800d898:	000fffff 	.word	0x000fffff
 800d89c:	7ff00000 	.word	0x7ff00000
 800d8a0:	7fefffff 	.word	0x7fefffff
 800d8a4:	39500000 	.word	0x39500000
 800d8a8:	3ff00000 	.word	0x3ff00000
 800d8ac:	7fe00000 	.word	0x7fe00000
 800d8b0:	7c9fffff 	.word	0x7c9fffff
 800d8b4:	3fe00000 	.word	0x3fe00000
 800d8b8:	bff00000 	.word	0xbff00000
 800d8bc:	9b04      	ldr	r3, [sp, #16]
 800d8be:	b333      	cbz	r3, 800d90e <_strtod_l+0xb7e>
 800d8c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d8c2:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800d8c6:	d822      	bhi.n	800d90e <_strtod_l+0xb7e>
 800d8c8:	a327      	add	r3, pc, #156	; (adr r3, 800d968 <_strtod_l+0xbd8>)
 800d8ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8ce:	4630      	mov	r0, r6
 800d8d0:	4639      	mov	r1, r7
 800d8d2:	f7f3 f91d 	bl	8000b10 <__aeabi_dcmple>
 800d8d6:	b1a0      	cbz	r0, 800d902 <_strtod_l+0xb72>
 800d8d8:	4639      	mov	r1, r7
 800d8da:	4630      	mov	r0, r6
 800d8dc:	f7f3 f974 	bl	8000bc8 <__aeabi_d2uiz>
 800d8e0:	2800      	cmp	r0, #0
 800d8e2:	bf08      	it	eq
 800d8e4:	2001      	moveq	r0, #1
 800d8e6:	f7f2 fe1d 	bl	8000524 <__aeabi_ui2d>
 800d8ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d8ec:	4606      	mov	r6, r0
 800d8ee:	460f      	mov	r7, r1
 800d8f0:	bb03      	cbnz	r3, 800d934 <_strtod_l+0xba4>
 800d8f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d8f6:	9012      	str	r0, [sp, #72]	; 0x48
 800d8f8:	9313      	str	r3, [sp, #76]	; 0x4c
 800d8fa:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800d8fe:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800d902:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d904:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d906:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800d90a:	1a9b      	subs	r3, r3, r2
 800d90c:	930b      	str	r3, [sp, #44]	; 0x2c
 800d90e:	ed9d 0b08 	vldr	d0, [sp, #32]
 800d912:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 800d916:	f003 f90f 	bl	8010b38 <__ulp>
 800d91a:	4650      	mov	r0, sl
 800d91c:	ec53 2b10 	vmov	r2, r3, d0
 800d920:	4659      	mov	r1, fp
 800d922:	f7f2 fe79 	bl	8000618 <__aeabi_dmul>
 800d926:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800d92a:	f7f2 fcbf 	bl	80002ac <__adddf3>
 800d92e:	4682      	mov	sl, r0
 800d930:	468b      	mov	fp, r1
 800d932:	e772      	b.n	800d81a <_strtod_l+0xa8a>
 800d934:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 800d938:	e7df      	b.n	800d8fa <_strtod_l+0xb6a>
 800d93a:	a30d      	add	r3, pc, #52	; (adr r3, 800d970 <_strtod_l+0xbe0>)
 800d93c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d940:	f7f3 f8dc 	bl	8000afc <__aeabi_dcmplt>
 800d944:	e79c      	b.n	800d880 <_strtod_l+0xaf0>
 800d946:	2300      	movs	r3, #0
 800d948:	930d      	str	r3, [sp, #52]	; 0x34
 800d94a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d94c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d94e:	6013      	str	r3, [r2, #0]
 800d950:	f7ff ba61 	b.w	800ce16 <_strtod_l+0x86>
 800d954:	2b65      	cmp	r3, #101	; 0x65
 800d956:	f04f 0200 	mov.w	r2, #0
 800d95a:	f43f ab4e 	beq.w	800cffa <_strtod_l+0x26a>
 800d95e:	2101      	movs	r1, #1
 800d960:	4614      	mov	r4, r2
 800d962:	9104      	str	r1, [sp, #16]
 800d964:	f7ff bacb 	b.w	800cefe <_strtod_l+0x16e>
 800d968:	ffc00000 	.word	0xffc00000
 800d96c:	41dfffff 	.word	0x41dfffff
 800d970:	94a03595 	.word	0x94a03595
 800d974:	3fcfffff 	.word	0x3fcfffff

0800d978 <strtod>:
 800d978:	4b07      	ldr	r3, [pc, #28]	; (800d998 <strtod+0x20>)
 800d97a:	4a08      	ldr	r2, [pc, #32]	; (800d99c <strtod+0x24>)
 800d97c:	b410      	push	{r4}
 800d97e:	681c      	ldr	r4, [r3, #0]
 800d980:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d982:	2b00      	cmp	r3, #0
 800d984:	bf08      	it	eq
 800d986:	4613      	moveq	r3, r2
 800d988:	460a      	mov	r2, r1
 800d98a:	4601      	mov	r1, r0
 800d98c:	4620      	mov	r0, r4
 800d98e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d992:	f7ff b9fd 	b.w	800cd90 <_strtod_l>
 800d996:	bf00      	nop
 800d998:	200000e4 	.word	0x200000e4
 800d99c:	20000924 	.word	0x20000924

0800d9a0 <_svfprintf_r>:
 800d9a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9a4:	b0d3      	sub	sp, #332	; 0x14c
 800d9a6:	4688      	mov	r8, r1
 800d9a8:	4693      	mov	fp, r2
 800d9aa:	461e      	mov	r6, r3
 800d9ac:	9003      	str	r0, [sp, #12]
 800d9ae:	f002 fdf5 	bl	801059c <_localeconv_r>
 800d9b2:	6803      	ldr	r3, [r0, #0]
 800d9b4:	9316      	str	r3, [sp, #88]	; 0x58
 800d9b6:	4618      	mov	r0, r3
 800d9b8:	f7f2 fc14 	bl	80001e4 <strlen>
 800d9bc:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 800d9c0:	900d      	str	r0, [sp, #52]	; 0x34
 800d9c2:	0618      	lsls	r0, r3, #24
 800d9c4:	d518      	bpl.n	800d9f8 <_svfprintf_r+0x58>
 800d9c6:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800d9ca:	b9ab      	cbnz	r3, 800d9f8 <_svfprintf_r+0x58>
 800d9cc:	2140      	movs	r1, #64	; 0x40
 800d9ce:	9803      	ldr	r0, [sp, #12]
 800d9d0:	f7fe ff1a 	bl	800c808 <_malloc_r>
 800d9d4:	f8c8 0000 	str.w	r0, [r8]
 800d9d8:	f8c8 0010 	str.w	r0, [r8, #16]
 800d9dc:	b948      	cbnz	r0, 800d9f2 <_svfprintf_r+0x52>
 800d9de:	9a03      	ldr	r2, [sp, #12]
 800d9e0:	230c      	movs	r3, #12
 800d9e2:	6013      	str	r3, [r2, #0]
 800d9e4:	f04f 33ff 	mov.w	r3, #4294967295
 800d9e8:	930e      	str	r3, [sp, #56]	; 0x38
 800d9ea:	980e      	ldr	r0, [sp, #56]	; 0x38
 800d9ec:	b053      	add	sp, #332	; 0x14c
 800d9ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d9f2:	2340      	movs	r3, #64	; 0x40
 800d9f4:	f8c8 3014 	str.w	r3, [r8, #20]
 800d9f8:	ed9f 7bc9 	vldr	d7, [pc, #804]	; 800dd20 <_svfprintf_r+0x380>
 800d9fc:	2300      	movs	r3, #0
 800d9fe:	e9cd 3327 	strd	r3, r3, [sp, #156]	; 0x9c
 800da02:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800da06:	e9cd 3317 	strd	r3, r3, [sp, #92]	; 0x5c
 800da0a:	ac29      	add	r4, sp, #164	; 0xa4
 800da0c:	9426      	str	r4, [sp, #152]	; 0x98
 800da0e:	9304      	str	r3, [sp, #16]
 800da10:	9309      	str	r3, [sp, #36]	; 0x24
 800da12:	9312      	str	r3, [sp, #72]	; 0x48
 800da14:	9319      	str	r3, [sp, #100]	; 0x64
 800da16:	930e      	str	r3, [sp, #56]	; 0x38
 800da18:	465d      	mov	r5, fp
 800da1a:	462b      	mov	r3, r5
 800da1c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800da20:	b112      	cbz	r2, 800da28 <_svfprintf_r+0x88>
 800da22:	2a25      	cmp	r2, #37	; 0x25
 800da24:	f040 80e4 	bne.w	800dbf0 <_svfprintf_r+0x250>
 800da28:	ebb5 070b 	subs.w	r7, r5, fp
 800da2c:	d00e      	beq.n	800da4c <_svfprintf_r+0xac>
 800da2e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800da30:	443b      	add	r3, r7
 800da32:	9328      	str	r3, [sp, #160]	; 0xa0
 800da34:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800da36:	3301      	adds	r3, #1
 800da38:	2b07      	cmp	r3, #7
 800da3a:	e9c4 b700 	strd	fp, r7, [r4]
 800da3e:	9327      	str	r3, [sp, #156]	; 0x9c
 800da40:	f300 80d8 	bgt.w	800dbf4 <_svfprintf_r+0x254>
 800da44:	3408      	adds	r4, #8
 800da46:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800da48:	443b      	add	r3, r7
 800da4a:	930e      	str	r3, [sp, #56]	; 0x38
 800da4c:	782b      	ldrb	r3, [r5, #0]
 800da4e:	2b00      	cmp	r3, #0
 800da50:	f001 81b4 	beq.w	800edbc <_svfprintf_r+0x141c>
 800da54:	1c6b      	adds	r3, r5, #1
 800da56:	930c      	str	r3, [sp, #48]	; 0x30
 800da58:	2300      	movs	r3, #0
 800da5a:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 800da5e:	f04f 35ff 	mov.w	r5, #4294967295
 800da62:	930f      	str	r3, [sp, #60]	; 0x3c
 800da64:	469a      	mov	sl, r3
 800da66:	270a      	movs	r7, #10
 800da68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800da6a:	781b      	ldrb	r3, [r3, #0]
 800da6c:	9306      	str	r3, [sp, #24]
 800da6e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800da70:	3301      	adds	r3, #1
 800da72:	930c      	str	r3, [sp, #48]	; 0x30
 800da74:	9b06      	ldr	r3, [sp, #24]
 800da76:	3b20      	subs	r3, #32
 800da78:	2b5a      	cmp	r3, #90	; 0x5a
 800da7a:	f200 8624 	bhi.w	800e6c6 <_svfprintf_r+0xd26>
 800da7e:	a201      	add	r2, pc, #4	; (adr r2, 800da84 <_svfprintf_r+0xe4>)
 800da80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da84:	0800dc87 	.word	0x0800dc87
 800da88:	0800e6c7 	.word	0x0800e6c7
 800da8c:	0800e6c7 	.word	0x0800e6c7
 800da90:	0800dc99 	.word	0x0800dc99
 800da94:	0800e6c7 	.word	0x0800e6c7
 800da98:	0800e6c7 	.word	0x0800e6c7
 800da9c:	0800e6c7 	.word	0x0800e6c7
 800daa0:	0800dc4d 	.word	0x0800dc4d
 800daa4:	0800e6c7 	.word	0x0800e6c7
 800daa8:	0800e6c7 	.word	0x0800e6c7
 800daac:	0800dc9f 	.word	0x0800dc9f
 800dab0:	0800dcb7 	.word	0x0800dcb7
 800dab4:	0800e6c7 	.word	0x0800e6c7
 800dab8:	0800dcb1 	.word	0x0800dcb1
 800dabc:	0800dcbb 	.word	0x0800dcbb
 800dac0:	0800e6c7 	.word	0x0800e6c7
 800dac4:	0800dcef 	.word	0x0800dcef
 800dac8:	0800dcf5 	.word	0x0800dcf5
 800dacc:	0800dcf5 	.word	0x0800dcf5
 800dad0:	0800dcf5 	.word	0x0800dcf5
 800dad4:	0800dcf5 	.word	0x0800dcf5
 800dad8:	0800dcf5 	.word	0x0800dcf5
 800dadc:	0800dcf5 	.word	0x0800dcf5
 800dae0:	0800dcf5 	.word	0x0800dcf5
 800dae4:	0800dcf5 	.word	0x0800dcf5
 800dae8:	0800dcf5 	.word	0x0800dcf5
 800daec:	0800e6c7 	.word	0x0800e6c7
 800daf0:	0800e6c7 	.word	0x0800e6c7
 800daf4:	0800e6c7 	.word	0x0800e6c7
 800daf8:	0800e6c7 	.word	0x0800e6c7
 800dafc:	0800e6c7 	.word	0x0800e6c7
 800db00:	0800e6c7 	.word	0x0800e6c7
 800db04:	0800e6c7 	.word	0x0800e6c7
 800db08:	0800ddf7 	.word	0x0800ddf7
 800db0c:	0800e6c7 	.word	0x0800e6c7
 800db10:	0800dd61 	.word	0x0800dd61
 800db14:	0800dd83 	.word	0x0800dd83
 800db18:	0800ddf7 	.word	0x0800ddf7
 800db1c:	0800ddf7 	.word	0x0800ddf7
 800db20:	0800ddf7 	.word	0x0800ddf7
 800db24:	0800e6c7 	.word	0x0800e6c7
 800db28:	0800e6c7 	.word	0x0800e6c7
 800db2c:	0800e6c7 	.word	0x0800e6c7
 800db30:	0800e6c7 	.word	0x0800e6c7
 800db34:	0800dd15 	.word	0x0800dd15
 800db38:	0800e6c7 	.word	0x0800e6c7
 800db3c:	0800e6c7 	.word	0x0800e6c7
 800db40:	0800e2c9 	.word	0x0800e2c9
 800db44:	0800e6c7 	.word	0x0800e6c7
 800db48:	0800e6c7 	.word	0x0800e6c7
 800db4c:	0800e6c7 	.word	0x0800e6c7
 800db50:	0800e355 	.word	0x0800e355
 800db54:	0800e6c7 	.word	0x0800e6c7
 800db58:	0800e537 	.word	0x0800e537
 800db5c:	0800e6c7 	.word	0x0800e6c7
 800db60:	0800e6c7 	.word	0x0800e6c7
 800db64:	0800dc0d 	.word	0x0800dc0d
 800db68:	0800e6c7 	.word	0x0800e6c7
 800db6c:	0800e6c7 	.word	0x0800e6c7
 800db70:	0800e6c7 	.word	0x0800e6c7
 800db74:	0800e6c7 	.word	0x0800e6c7
 800db78:	0800e6c7 	.word	0x0800e6c7
 800db7c:	0800e6c7 	.word	0x0800e6c7
 800db80:	0800e6c7 	.word	0x0800e6c7
 800db84:	0800e6c7 	.word	0x0800e6c7
 800db88:	0800ddf7 	.word	0x0800ddf7
 800db8c:	0800e6c7 	.word	0x0800e6c7
 800db90:	0800dd61 	.word	0x0800dd61
 800db94:	0800dd87 	.word	0x0800dd87
 800db98:	0800ddf7 	.word	0x0800ddf7
 800db9c:	0800ddf7 	.word	0x0800ddf7
 800dba0:	0800ddf7 	.word	0x0800ddf7
 800dba4:	0800dd2d 	.word	0x0800dd2d
 800dba8:	0800dd87 	.word	0x0800dd87
 800dbac:	0800dd55 	.word	0x0800dd55
 800dbb0:	0800e6c7 	.word	0x0800e6c7
 800dbb4:	0800dd47 	.word	0x0800dd47
 800dbb8:	0800e6c7 	.word	0x0800e6c7
 800dbbc:	0800e283 	.word	0x0800e283
 800dbc0:	0800e2cd 	.word	0x0800e2cd
 800dbc4:	0800e335 	.word	0x0800e335
 800dbc8:	0800dd55 	.word	0x0800dd55
 800dbcc:	0800e6c7 	.word	0x0800e6c7
 800dbd0:	0800e355 	.word	0x0800e355
 800dbd4:	0800da69 	.word	0x0800da69
 800dbd8:	0800e53b 	.word	0x0800e53b
 800dbdc:	0800e6c7 	.word	0x0800e6c7
 800dbe0:	0800e6c7 	.word	0x0800e6c7
 800dbe4:	0800e579 	.word	0x0800e579
 800dbe8:	0800e6c7 	.word	0x0800e6c7
 800dbec:	0800da69 	.word	0x0800da69
 800dbf0:	461d      	mov	r5, r3
 800dbf2:	e712      	b.n	800da1a <_svfprintf_r+0x7a>
 800dbf4:	aa26      	add	r2, sp, #152	; 0x98
 800dbf6:	4641      	mov	r1, r8
 800dbf8:	9803      	ldr	r0, [sp, #12]
 800dbfa:	f003 fadf 	bl	80111bc <__ssprint_r>
 800dbfe:	2800      	cmp	r0, #0
 800dc00:	f040 8166 	bne.w	800ded0 <_svfprintf_r+0x530>
 800dc04:	ac29      	add	r4, sp, #164	; 0xa4
 800dc06:	e71e      	b.n	800da46 <_svfprintf_r+0xa6>
 800dc08:	461e      	mov	r6, r3
 800dc0a:	e72d      	b.n	800da68 <_svfprintf_r+0xc8>
 800dc0c:	4b46      	ldr	r3, [pc, #280]	; (800dd28 <_svfprintf_r+0x388>)
 800dc0e:	9318      	str	r3, [sp, #96]	; 0x60
 800dc10:	f01a 0f20 	tst.w	sl, #32
 800dc14:	f000 84b3 	beq.w	800e57e <_svfprintf_r+0xbde>
 800dc18:	3607      	adds	r6, #7
 800dc1a:	f026 0607 	bic.w	r6, r6, #7
 800dc1e:	f106 0308 	add.w	r3, r6, #8
 800dc22:	e9d6 6700 	ldrd	r6, r7, [r6]
 800dc26:	9308      	str	r3, [sp, #32]
 800dc28:	f01a 0f01 	tst.w	sl, #1
 800dc2c:	d00a      	beq.n	800dc44 <_svfprintf_r+0x2a4>
 800dc2e:	ea56 0307 	orrs.w	r3, r6, r7
 800dc32:	d007      	beq.n	800dc44 <_svfprintf_r+0x2a4>
 800dc34:	2330      	movs	r3, #48	; 0x30
 800dc36:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 800dc3a:	9b06      	ldr	r3, [sp, #24]
 800dc3c:	f88d 307d 	strb.w	r3, [sp, #125]	; 0x7d
 800dc40:	f04a 0a02 	orr.w	sl, sl, #2
 800dc44:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 800dc48:	2302      	movs	r3, #2
 800dc4a:	e34d      	b.n	800e2e8 <_svfprintf_r+0x948>
 800dc4c:	9803      	ldr	r0, [sp, #12]
 800dc4e:	f002 fca5 	bl	801059c <_localeconv_r>
 800dc52:	6843      	ldr	r3, [r0, #4]
 800dc54:	9319      	str	r3, [sp, #100]	; 0x64
 800dc56:	4618      	mov	r0, r3
 800dc58:	f7f2 fac4 	bl	80001e4 <strlen>
 800dc5c:	9012      	str	r0, [sp, #72]	; 0x48
 800dc5e:	9803      	ldr	r0, [sp, #12]
 800dc60:	f002 fc9c 	bl	801059c <_localeconv_r>
 800dc64:	6883      	ldr	r3, [r0, #8]
 800dc66:	9309      	str	r3, [sp, #36]	; 0x24
 800dc68:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	f43f aefc 	beq.w	800da68 <_svfprintf_r+0xc8>
 800dc70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	f43f aef8 	beq.w	800da68 <_svfprintf_r+0xc8>
 800dc78:	781b      	ldrb	r3, [r3, #0]
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	f43f aef4 	beq.w	800da68 <_svfprintf_r+0xc8>
 800dc80:	f44a 6a80 	orr.w	sl, sl, #1024	; 0x400
 800dc84:	e6f0      	b.n	800da68 <_svfprintf_r+0xc8>
 800dc86:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	f47f aeec 	bne.w	800da68 <_svfprintf_r+0xc8>
 800dc90:	2320      	movs	r3, #32
 800dc92:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 800dc96:	e6e7      	b.n	800da68 <_svfprintf_r+0xc8>
 800dc98:	f04a 0a01 	orr.w	sl, sl, #1
 800dc9c:	e6e4      	b.n	800da68 <_svfprintf_r+0xc8>
 800dc9e:	6832      	ldr	r2, [r6, #0]
 800dca0:	920f      	str	r2, [sp, #60]	; 0x3c
 800dca2:	2a00      	cmp	r2, #0
 800dca4:	f106 0304 	add.w	r3, r6, #4
 800dca8:	daae      	bge.n	800dc08 <_svfprintf_r+0x268>
 800dcaa:	4252      	negs	r2, r2
 800dcac:	920f      	str	r2, [sp, #60]	; 0x3c
 800dcae:	461e      	mov	r6, r3
 800dcb0:	f04a 0a04 	orr.w	sl, sl, #4
 800dcb4:	e6d8      	b.n	800da68 <_svfprintf_r+0xc8>
 800dcb6:	232b      	movs	r3, #43	; 0x2b
 800dcb8:	e7eb      	b.n	800dc92 <_svfprintf_r+0x2f2>
 800dcba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800dcbc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dcbe:	7812      	ldrb	r2, [r2, #0]
 800dcc0:	9206      	str	r2, [sp, #24]
 800dcc2:	2a2a      	cmp	r2, #42	; 0x2a
 800dcc4:	f103 0301 	add.w	r3, r3, #1
 800dcc8:	d10f      	bne.n	800dcea <_svfprintf_r+0x34a>
 800dcca:	6835      	ldr	r5, [r6, #0]
 800dccc:	930c      	str	r3, [sp, #48]	; 0x30
 800dcce:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
 800dcd2:	3604      	adds	r6, #4
 800dcd4:	e6c8      	b.n	800da68 <_svfprintf_r+0xc8>
 800dcd6:	fb07 2505 	mla	r5, r7, r5, r2
 800dcda:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dcde:	9206      	str	r2, [sp, #24]
 800dce0:	9a06      	ldr	r2, [sp, #24]
 800dce2:	3a30      	subs	r2, #48	; 0x30
 800dce4:	2a09      	cmp	r2, #9
 800dce6:	d9f6      	bls.n	800dcd6 <_svfprintf_r+0x336>
 800dce8:	e6c3      	b.n	800da72 <_svfprintf_r+0xd2>
 800dcea:	2500      	movs	r5, #0
 800dcec:	e7f8      	b.n	800dce0 <_svfprintf_r+0x340>
 800dcee:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
 800dcf2:	e6b9      	b.n	800da68 <_svfprintf_r+0xc8>
 800dcf4:	2200      	movs	r2, #0
 800dcf6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dcf8:	920f      	str	r2, [sp, #60]	; 0x3c
 800dcfa:	9a06      	ldr	r2, [sp, #24]
 800dcfc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800dcfe:	3a30      	subs	r2, #48	; 0x30
 800dd00:	fb07 2201 	mla	r2, r7, r1, r2
 800dd04:	920f      	str	r2, [sp, #60]	; 0x3c
 800dd06:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dd0a:	9206      	str	r2, [sp, #24]
 800dd0c:	3a30      	subs	r2, #48	; 0x30
 800dd0e:	2a09      	cmp	r2, #9
 800dd10:	d9f3      	bls.n	800dcfa <_svfprintf_r+0x35a>
 800dd12:	e6ae      	b.n	800da72 <_svfprintf_r+0xd2>
 800dd14:	f04a 0a08 	orr.w	sl, sl, #8
 800dd18:	e6a6      	b.n	800da68 <_svfprintf_r+0xc8>
 800dd1a:	bf00      	nop
 800dd1c:	f3af 8000 	nop.w
	...
 800dd28:	08011b61 	.word	0x08011b61
 800dd2c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dd2e:	781b      	ldrb	r3, [r3, #0]
 800dd30:	2b68      	cmp	r3, #104	; 0x68
 800dd32:	bf01      	itttt	eq
 800dd34:	9b0c      	ldreq	r3, [sp, #48]	; 0x30
 800dd36:	3301      	addeq	r3, #1
 800dd38:	930c      	streq	r3, [sp, #48]	; 0x30
 800dd3a:	f44a 7a00 	orreq.w	sl, sl, #512	; 0x200
 800dd3e:	bf18      	it	ne
 800dd40:	f04a 0a40 	orrne.w	sl, sl, #64	; 0x40
 800dd44:	e690      	b.n	800da68 <_svfprintf_r+0xc8>
 800dd46:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dd48:	781b      	ldrb	r3, [r3, #0]
 800dd4a:	2b6c      	cmp	r3, #108	; 0x6c
 800dd4c:	d105      	bne.n	800dd5a <_svfprintf_r+0x3ba>
 800dd4e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dd50:	3301      	adds	r3, #1
 800dd52:	930c      	str	r3, [sp, #48]	; 0x30
 800dd54:	f04a 0a20 	orr.w	sl, sl, #32
 800dd58:	e686      	b.n	800da68 <_svfprintf_r+0xc8>
 800dd5a:	f04a 0a10 	orr.w	sl, sl, #16
 800dd5e:	e683      	b.n	800da68 <_svfprintf_r+0xc8>
 800dd60:	1d33      	adds	r3, r6, #4
 800dd62:	9308      	str	r3, [sp, #32]
 800dd64:	2000      	movs	r0, #0
 800dd66:	6833      	ldr	r3, [r6, #0]
 800dd68:	f88d 30e4 	strb.w	r3, [sp, #228]	; 0xe4
 800dd6c:	f88d 007b 	strb.w	r0, [sp, #123]	; 0x7b
 800dd70:	4681      	mov	r9, r0
 800dd72:	2501      	movs	r5, #1
 800dd74:	9010      	str	r0, [sp, #64]	; 0x40
 800dd76:	4607      	mov	r7, r0
 800dd78:	9007      	str	r0, [sp, #28]
 800dd7a:	4606      	mov	r6, r0
 800dd7c:	f10d 0be4 	add.w	fp, sp, #228	; 0xe4
 800dd80:	e301      	b.n	800e386 <_svfprintf_r+0x9e6>
 800dd82:	f04a 0a10 	orr.w	sl, sl, #16
 800dd86:	f01a 0f20 	tst.w	sl, #32
 800dd8a:	d021      	beq.n	800ddd0 <_svfprintf_r+0x430>
 800dd8c:	3607      	adds	r6, #7
 800dd8e:	f026 0607 	bic.w	r6, r6, #7
 800dd92:	f106 0308 	add.w	r3, r6, #8
 800dd96:	e9d6 6700 	ldrd	r6, r7, [r6]
 800dd9a:	9308      	str	r3, [sp, #32]
 800dd9c:	2e00      	cmp	r6, #0
 800dd9e:	f177 0300 	sbcs.w	r3, r7, #0
 800dda2:	da06      	bge.n	800ddb2 <_svfprintf_r+0x412>
 800dda4:	4276      	negs	r6, r6
 800dda6:	f04f 032d 	mov.w	r3, #45	; 0x2d
 800ddaa:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 800ddae:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 800ddb2:	1c6b      	adds	r3, r5, #1
 800ddb4:	f040 83f6 	bne.w	800e5a4 <_svfprintf_r+0xc04>
 800ddb8:	2f00      	cmp	r7, #0
 800ddba:	bf08      	it	eq
 800ddbc:	2e0a      	cmpeq	r6, #10
 800ddbe:	f080 8427 	bcs.w	800e610 <_svfprintf_r+0xc70>
 800ddc2:	f50d 7ba4 	add.w	fp, sp, #328	; 0x148
 800ddc6:	3630      	adds	r6, #48	; 0x30
 800ddc8:	f80b 6d01 	strb.w	r6, [fp, #-1]!
 800ddcc:	f000 bc0d 	b.w	800e5ea <_svfprintf_r+0xc4a>
 800ddd0:	1d33      	adds	r3, r6, #4
 800ddd2:	f01a 0f10 	tst.w	sl, #16
 800ddd6:	9308      	str	r3, [sp, #32]
 800ddd8:	d002      	beq.n	800dde0 <_svfprintf_r+0x440>
 800ddda:	6836      	ldr	r6, [r6, #0]
 800dddc:	17f7      	asrs	r7, r6, #31
 800ddde:	e7dd      	b.n	800dd9c <_svfprintf_r+0x3fc>
 800dde0:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800dde4:	6836      	ldr	r6, [r6, #0]
 800dde6:	d001      	beq.n	800ddec <_svfprintf_r+0x44c>
 800dde8:	b236      	sxth	r6, r6
 800ddea:	e7f7      	b.n	800dddc <_svfprintf_r+0x43c>
 800ddec:	f41a 7f00 	tst.w	sl, #512	; 0x200
 800ddf0:	bf18      	it	ne
 800ddf2:	b276      	sxtbne	r6, r6
 800ddf4:	e7f2      	b.n	800dddc <_svfprintf_r+0x43c>
 800ddf6:	3607      	adds	r6, #7
 800ddf8:	f026 0607 	bic.w	r6, r6, #7
 800ddfc:	ed96 7b00 	vldr	d7, [r6]
 800de00:	f106 0308 	add.w	r3, r6, #8
 800de04:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800de08:	9308      	str	r3, [sp, #32]
 800de0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800de0c:	931a      	str	r3, [sp, #104]	; 0x68
 800de0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800de10:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800de14:	931b      	str	r3, [sp, #108]	; 0x6c
 800de16:	f04f 32ff 	mov.w	r2, #4294967295
 800de1a:	4bb2      	ldr	r3, [pc, #712]	; (800e0e4 <_svfprintf_r+0x744>)
 800de1c:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 800de20:	f7f2 fe94 	bl	8000b4c <__aeabi_dcmpun>
 800de24:	bb00      	cbnz	r0, 800de68 <_svfprintf_r+0x4c8>
 800de26:	f04f 32ff 	mov.w	r2, #4294967295
 800de2a:	4bae      	ldr	r3, [pc, #696]	; (800e0e4 <_svfprintf_r+0x744>)
 800de2c:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 800de30:	f7f2 fe6e 	bl	8000b10 <__aeabi_dcmple>
 800de34:	b9c0      	cbnz	r0, 800de68 <_svfprintf_r+0x4c8>
 800de36:	2200      	movs	r2, #0
 800de38:	2300      	movs	r3, #0
 800de3a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800de3e:	f7f2 fe5d 	bl	8000afc <__aeabi_dcmplt>
 800de42:	b110      	cbz	r0, 800de4a <_svfprintf_r+0x4aa>
 800de44:	232d      	movs	r3, #45	; 0x2d
 800de46:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 800de4a:	4aa7      	ldr	r2, [pc, #668]	; (800e0e8 <_svfprintf_r+0x748>)
 800de4c:	4ba7      	ldr	r3, [pc, #668]	; (800e0ec <_svfprintf_r+0x74c>)
 800de4e:	9906      	ldr	r1, [sp, #24]
 800de50:	f02a 0a80 	bic.w	sl, sl, #128	; 0x80
 800de54:	2947      	cmp	r1, #71	; 0x47
 800de56:	bfcc      	ite	gt
 800de58:	4693      	movgt	fp, r2
 800de5a:	469b      	movle	fp, r3
 800de5c:	f04f 0900 	mov.w	r9, #0
 800de60:	2503      	movs	r5, #3
 800de62:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
 800de66:	e3c6      	b.n	800e5f6 <_svfprintf_r+0xc56>
 800de68:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800de6c:	4610      	mov	r0, r2
 800de6e:	4619      	mov	r1, r3
 800de70:	f7f2 fe6c 	bl	8000b4c <__aeabi_dcmpun>
 800de74:	4681      	mov	r9, r0
 800de76:	b140      	cbz	r0, 800de8a <_svfprintf_r+0x4ea>
 800de78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800de7a:	4a9d      	ldr	r2, [pc, #628]	; (800e0f0 <_svfprintf_r+0x750>)
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	bfbc      	itt	lt
 800de80:	232d      	movlt	r3, #45	; 0x2d
 800de82:	f88d 307b 	strblt.w	r3, [sp, #123]	; 0x7b
 800de86:	4b9b      	ldr	r3, [pc, #620]	; (800e0f4 <_svfprintf_r+0x754>)
 800de88:	e7e1      	b.n	800de4e <_svfprintf_r+0x4ae>
 800de8a:	9b06      	ldr	r3, [sp, #24]
 800de8c:	f023 0320 	bic.w	r3, r3, #32
 800de90:	2b41      	cmp	r3, #65	; 0x41
 800de92:	9307      	str	r3, [sp, #28]
 800de94:	d125      	bne.n	800dee2 <_svfprintf_r+0x542>
 800de96:	2330      	movs	r3, #48	; 0x30
 800de98:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 800de9c:	9b06      	ldr	r3, [sp, #24]
 800de9e:	2b61      	cmp	r3, #97	; 0x61
 800dea0:	bf14      	ite	ne
 800dea2:	2358      	movne	r3, #88	; 0x58
 800dea4:	2378      	moveq	r3, #120	; 0x78
 800dea6:	2d63      	cmp	r5, #99	; 0x63
 800dea8:	f88d 307d 	strb.w	r3, [sp, #125]	; 0x7d
 800deac:	f04a 0a02 	orr.w	sl, sl, #2
 800deb0:	f340 8108 	ble.w	800e0c4 <_svfprintf_r+0x724>
 800deb4:	1c69      	adds	r1, r5, #1
 800deb6:	9803      	ldr	r0, [sp, #12]
 800deb8:	f7fe fca6 	bl	800c808 <_malloc_r>
 800debc:	4683      	mov	fp, r0
 800debe:	2800      	cmp	r0, #0
 800dec0:	f040 8103 	bne.w	800e0ca <_svfprintf_r+0x72a>
 800dec4:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 800dec8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800decc:	f8a8 300c 	strh.w	r3, [r8, #12]
 800ded0:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 800ded4:	f013 0f40 	tst.w	r3, #64	; 0x40
 800ded8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800deda:	bf18      	it	ne
 800dedc:	f04f 33ff 	movne.w	r3, #4294967295
 800dee0:	e582      	b.n	800d9e8 <_svfprintf_r+0x48>
 800dee2:	1c69      	adds	r1, r5, #1
 800dee4:	f000 80f3 	beq.w	800e0ce <_svfprintf_r+0x72e>
 800dee8:	9b07      	ldr	r3, [sp, #28]
 800deea:	2b47      	cmp	r3, #71	; 0x47
 800deec:	d102      	bne.n	800def4 <_svfprintf_r+0x554>
 800deee:	2d00      	cmp	r5, #0
 800def0:	f000 80ef 	beq.w	800e0d2 <_svfprintf_r+0x732>
 800def4:	f44a 7380 	orr.w	r3, sl, #256	; 0x100
 800def8:	9310      	str	r3, [sp, #64]	; 0x40
 800defa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800defc:	2b00      	cmp	r3, #0
 800defe:	f280 80eb 	bge.w	800e0d8 <_svfprintf_r+0x738>
 800df02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800df04:	9314      	str	r3, [sp, #80]	; 0x50
 800df06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800df08:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800df0c:	9315      	str	r3, [sp, #84]	; 0x54
 800df0e:	232d      	movs	r3, #45	; 0x2d
 800df10:	9313      	str	r3, [sp, #76]	; 0x4c
 800df12:	9b07      	ldr	r3, [sp, #28]
 800df14:	2b41      	cmp	r3, #65	; 0x41
 800df16:	f040 8105 	bne.w	800e124 <_svfprintf_r+0x784>
 800df1a:	a820      	add	r0, sp, #128	; 0x80
 800df1c:	ed9d 0b14 	vldr	d0, [sp, #80]	; 0x50
 800df20:	f003 f904 	bl	801112c <frexp>
 800df24:	2200      	movs	r2, #0
 800df26:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800df2a:	ec51 0b10 	vmov	r0, r1, d0
 800df2e:	f7f2 fb73 	bl	8000618 <__aeabi_dmul>
 800df32:	2200      	movs	r2, #0
 800df34:	2300      	movs	r3, #0
 800df36:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800df3a:	f7f2 fdd5 	bl	8000ae8 <__aeabi_dcmpeq>
 800df3e:	b108      	cbz	r0, 800df44 <_svfprintf_r+0x5a4>
 800df40:	2301      	movs	r3, #1
 800df42:	9320      	str	r3, [sp, #128]	; 0x80
 800df44:	4f6c      	ldr	r7, [pc, #432]	; (800e0f8 <_svfprintf_r+0x758>)
 800df46:	4b6d      	ldr	r3, [pc, #436]	; (800e0fc <_svfprintf_r+0x75c>)
 800df48:	9a06      	ldr	r2, [sp, #24]
 800df4a:	2a61      	cmp	r2, #97	; 0x61
 800df4c:	bf08      	it	eq
 800df4e:	461f      	moveq	r7, r3
 800df50:	9711      	str	r7, [sp, #68]	; 0x44
 800df52:	465e      	mov	r6, fp
 800df54:	1e6f      	subs	r7, r5, #1
 800df56:	2200      	movs	r2, #0
 800df58:	4b69      	ldr	r3, [pc, #420]	; (800e100 <_svfprintf_r+0x760>)
 800df5a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800df5e:	f7f2 fb5b 	bl	8000618 <__aeabi_dmul>
 800df62:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800df66:	f7f2 fe07 	bl	8000b78 <__aeabi_d2iz>
 800df6a:	901c      	str	r0, [sp, #112]	; 0x70
 800df6c:	f7f2 faea 	bl	8000544 <__aeabi_i2d>
 800df70:	4602      	mov	r2, r0
 800df72:	460b      	mov	r3, r1
 800df74:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800df78:	f7f2 f996 	bl	80002a8 <__aeabi_dsub>
 800df7c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800df7e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800df80:	971d      	str	r7, [sp, #116]	; 0x74
 800df82:	5c9b      	ldrb	r3, [r3, r2]
 800df84:	f806 3b01 	strb.w	r3, [r6], #1
 800df88:	1c7a      	adds	r2, r7, #1
 800df8a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800df8e:	d006      	beq.n	800df9e <_svfprintf_r+0x5fe>
 800df90:	2200      	movs	r2, #0
 800df92:	2300      	movs	r3, #0
 800df94:	3f01      	subs	r7, #1
 800df96:	f7f2 fda7 	bl	8000ae8 <__aeabi_dcmpeq>
 800df9a:	2800      	cmp	r0, #0
 800df9c:	d0db      	beq.n	800df56 <_svfprintf_r+0x5b6>
 800df9e:	2200      	movs	r2, #0
 800dfa0:	4b58      	ldr	r3, [pc, #352]	; (800e104 <_svfprintf_r+0x764>)
 800dfa2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800dfa6:	f7f2 fdc7 	bl	8000b38 <__aeabi_dcmpgt>
 800dfaa:	b960      	cbnz	r0, 800dfc6 <_svfprintf_r+0x626>
 800dfac:	2200      	movs	r2, #0
 800dfae:	4b55      	ldr	r3, [pc, #340]	; (800e104 <_svfprintf_r+0x764>)
 800dfb0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800dfb4:	f7f2 fd98 	bl	8000ae8 <__aeabi_dcmpeq>
 800dfb8:	2800      	cmp	r0, #0
 800dfba:	f000 80ae 	beq.w	800e11a <_svfprintf_r+0x77a>
 800dfbe:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800dfc0:	07db      	lsls	r3, r3, #31
 800dfc2:	f140 80aa 	bpl.w	800e11a <_svfprintf_r+0x77a>
 800dfc6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800dfc8:	9624      	str	r6, [sp, #144]	; 0x90
 800dfca:	7bd9      	ldrb	r1, [r3, #15]
 800dfcc:	2030      	movs	r0, #48	; 0x30
 800dfce:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800dfd0:	1e53      	subs	r3, r2, #1
 800dfd2:	9324      	str	r3, [sp, #144]	; 0x90
 800dfd4:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 800dfd8:	428b      	cmp	r3, r1
 800dfda:	f000 8095 	beq.w	800e108 <_svfprintf_r+0x768>
 800dfde:	2b39      	cmp	r3, #57	; 0x39
 800dfe0:	bf0b      	itete	eq
 800dfe2:	9b11      	ldreq	r3, [sp, #68]	; 0x44
 800dfe4:	3301      	addne	r3, #1
 800dfe6:	7a9b      	ldrbeq	r3, [r3, #10]
 800dfe8:	b2db      	uxtbne	r3, r3
 800dfea:	f802 3c01 	strb.w	r3, [r2, #-1]
 800dfee:	4633      	mov	r3, r6
 800dff0:	eba3 030b 	sub.w	r3, r3, fp
 800dff4:	9304      	str	r3, [sp, #16]
 800dff6:	9b07      	ldr	r3, [sp, #28]
 800dff8:	9e20      	ldr	r6, [sp, #128]	; 0x80
 800dffa:	2b47      	cmp	r3, #71	; 0x47
 800dffc:	f040 80d7 	bne.w	800e1ae <_svfprintf_r+0x80e>
 800e000:	1cf7      	adds	r7, r6, #3
 800e002:	db02      	blt.n	800e00a <_svfprintf_r+0x66a>
 800e004:	42b5      	cmp	r5, r6
 800e006:	f280 80fd 	bge.w	800e204 <_svfprintf_r+0x864>
 800e00a:	9b06      	ldr	r3, [sp, #24]
 800e00c:	3b02      	subs	r3, #2
 800e00e:	9306      	str	r3, [sp, #24]
 800e010:	9906      	ldr	r1, [sp, #24]
 800e012:	f89d 2018 	ldrb.w	r2, [sp, #24]
 800e016:	f021 0120 	bic.w	r1, r1, #32
 800e01a:	2941      	cmp	r1, #65	; 0x41
 800e01c:	bf08      	it	eq
 800e01e:	320f      	addeq	r2, #15
 800e020:	f106 33ff 	add.w	r3, r6, #4294967295
 800e024:	bf06      	itte	eq
 800e026:	b2d2      	uxtbeq	r2, r2
 800e028:	2101      	moveq	r1, #1
 800e02a:	2100      	movne	r1, #0
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	9320      	str	r3, [sp, #128]	; 0x80
 800e030:	bfb8      	it	lt
 800e032:	f1c6 0301 	rsblt	r3, r6, #1
 800e036:	f88d 2088 	strb.w	r2, [sp, #136]	; 0x88
 800e03a:	bfb4      	ite	lt
 800e03c:	222d      	movlt	r2, #45	; 0x2d
 800e03e:	222b      	movge	r2, #43	; 0x2b
 800e040:	2b09      	cmp	r3, #9
 800e042:	f88d 2089 	strb.w	r2, [sp, #137]	; 0x89
 800e046:	f340 80c9 	ble.w	800e1dc <_svfprintf_r+0x83c>
 800e04a:	f10d 0297 	add.w	r2, sp, #151	; 0x97
 800e04e:	250a      	movs	r5, #10
 800e050:	fb93 f0f5 	sdiv	r0, r3, r5
 800e054:	fb05 3310 	mls	r3, r5, r0, r3
 800e058:	3330      	adds	r3, #48	; 0x30
 800e05a:	2809      	cmp	r0, #9
 800e05c:	f802 3c01 	strb.w	r3, [r2, #-1]
 800e060:	f102 31ff 	add.w	r1, r2, #4294967295
 800e064:	4603      	mov	r3, r0
 800e066:	f300 80b2 	bgt.w	800e1ce <_svfprintf_r+0x82e>
 800e06a:	3330      	adds	r3, #48	; 0x30
 800e06c:	f801 3c01 	strb.w	r3, [r1, #-1]
 800e070:	3a02      	subs	r2, #2
 800e072:	f10d 038a 	add.w	r3, sp, #138	; 0x8a
 800e076:	f10d 0097 	add.w	r0, sp, #151	; 0x97
 800e07a:	4282      	cmp	r2, r0
 800e07c:	4619      	mov	r1, r3
 800e07e:	f0c0 80a8 	bcc.w	800e1d2 <_svfprintf_r+0x832>
 800e082:	9a04      	ldr	r2, [sp, #16]
 800e084:	ab22      	add	r3, sp, #136	; 0x88
 800e086:	1acb      	subs	r3, r1, r3
 800e088:	2a01      	cmp	r2, #1
 800e08a:	9317      	str	r3, [sp, #92]	; 0x5c
 800e08c:	eb03 0502 	add.w	r5, r3, r2
 800e090:	dc02      	bgt.n	800e098 <_svfprintf_r+0x6f8>
 800e092:	f01a 0f01 	tst.w	sl, #1
 800e096:	d001      	beq.n	800e09c <_svfprintf_r+0x6fc>
 800e098:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e09a:	441d      	add	r5, r3
 800e09c:	f42a 6380 	bic.w	r3, sl, #1024	; 0x400
 800e0a0:	2700      	movs	r7, #0
 800e0a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e0a6:	9310      	str	r3, [sp, #64]	; 0x40
 800e0a8:	9707      	str	r7, [sp, #28]
 800e0aa:	463e      	mov	r6, r7
 800e0ac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	f000 8315 	beq.w	800e6de <_svfprintf_r+0xd3e>
 800e0b4:	232d      	movs	r3, #45	; 0x2d
 800e0b6:	f8dd a040 	ldr.w	sl, [sp, #64]	; 0x40
 800e0ba:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 800e0be:	2300      	movs	r3, #0
 800e0c0:	9310      	str	r3, [sp, #64]	; 0x40
 800e0c2:	e160      	b.n	800e386 <_svfprintf_r+0x9e6>
 800e0c4:	f10d 0be4 	add.w	fp, sp, #228	; 0xe4
 800e0c8:	e714      	b.n	800def4 <_svfprintf_r+0x554>
 800e0ca:	4681      	mov	r9, r0
 800e0cc:	e712      	b.n	800def4 <_svfprintf_r+0x554>
 800e0ce:	2506      	movs	r5, #6
 800e0d0:	e710      	b.n	800def4 <_svfprintf_r+0x554>
 800e0d2:	46a9      	mov	r9, r5
 800e0d4:	2501      	movs	r5, #1
 800e0d6:	e70d      	b.n	800def4 <_svfprintf_r+0x554>
 800e0d8:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 800e0dc:	2300      	movs	r3, #0
 800e0de:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 800e0e2:	e715      	b.n	800df10 <_svfprintf_r+0x570>
 800e0e4:	7fefffff 	.word	0x7fefffff
 800e0e8:	08011b44 	.word	0x08011b44
 800e0ec:	08011b40 	.word	0x08011b40
 800e0f0:	08011b4c 	.word	0x08011b4c
 800e0f4:	08011b48 	.word	0x08011b48
 800e0f8:	08011b61 	.word	0x08011b61
 800e0fc:	08011b50 	.word	0x08011b50
 800e100:	40300000 	.word	0x40300000
 800e104:	3fe00000 	.word	0x3fe00000
 800e108:	f802 0c01 	strb.w	r0, [r2, #-1]
 800e10c:	e75f      	b.n	800dfce <_svfprintf_r+0x62e>
 800e10e:	f803 1b01 	strb.w	r1, [r3], #1
 800e112:	1af2      	subs	r2, r6, r3
 800e114:	2a00      	cmp	r2, #0
 800e116:	dafa      	bge.n	800e10e <_svfprintf_r+0x76e>
 800e118:	e76a      	b.n	800dff0 <_svfprintf_r+0x650>
 800e11a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800e11c:	4633      	mov	r3, r6
 800e11e:	2130      	movs	r1, #48	; 0x30
 800e120:	4416      	add	r6, r2
 800e122:	e7f6      	b.n	800e112 <_svfprintf_r+0x772>
 800e124:	9b07      	ldr	r3, [sp, #28]
 800e126:	2b46      	cmp	r3, #70	; 0x46
 800e128:	d004      	beq.n	800e134 <_svfprintf_r+0x794>
 800e12a:	2b45      	cmp	r3, #69	; 0x45
 800e12c:	d13a      	bne.n	800e1a4 <_svfprintf_r+0x804>
 800e12e:	1c6e      	adds	r6, r5, #1
 800e130:	2102      	movs	r1, #2
 800e132:	e001      	b.n	800e138 <_svfprintf_r+0x798>
 800e134:	462e      	mov	r6, r5
 800e136:	2103      	movs	r1, #3
 800e138:	ab24      	add	r3, sp, #144	; 0x90
 800e13a:	9301      	str	r3, [sp, #4]
 800e13c:	ab21      	add	r3, sp, #132	; 0x84
 800e13e:	9300      	str	r3, [sp, #0]
 800e140:	4632      	mov	r2, r6
 800e142:	ab20      	add	r3, sp, #128	; 0x80
 800e144:	ed9d 0b14 	vldr	d0, [sp, #80]	; 0x50
 800e148:	9803      	ldr	r0, [sp, #12]
 800e14a:	f000 fef5 	bl	800ef38 <_dtoa_r>
 800e14e:	9b07      	ldr	r3, [sp, #28]
 800e150:	2b47      	cmp	r3, #71	; 0x47
 800e152:	4683      	mov	fp, r0
 800e154:	d102      	bne.n	800e15c <_svfprintf_r+0x7bc>
 800e156:	f01a 0f01 	tst.w	sl, #1
 800e15a:	d026      	beq.n	800e1aa <_svfprintf_r+0x80a>
 800e15c:	9b07      	ldr	r3, [sp, #28]
 800e15e:	2b46      	cmp	r3, #70	; 0x46
 800e160:	eb0b 0706 	add.w	r7, fp, r6
 800e164:	d10f      	bne.n	800e186 <_svfprintf_r+0x7e6>
 800e166:	f89b 3000 	ldrb.w	r3, [fp]
 800e16a:	2b30      	cmp	r3, #48	; 0x30
 800e16c:	d109      	bne.n	800e182 <_svfprintf_r+0x7e2>
 800e16e:	2200      	movs	r2, #0
 800e170:	2300      	movs	r3, #0
 800e172:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 800e176:	f7f2 fcb7 	bl	8000ae8 <__aeabi_dcmpeq>
 800e17a:	b910      	cbnz	r0, 800e182 <_svfprintf_r+0x7e2>
 800e17c:	f1c6 0601 	rsb	r6, r6, #1
 800e180:	9620      	str	r6, [sp, #128]	; 0x80
 800e182:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800e184:	441f      	add	r7, r3
 800e186:	2200      	movs	r2, #0
 800e188:	2300      	movs	r3, #0
 800e18a:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 800e18e:	f7f2 fcab 	bl	8000ae8 <__aeabi_dcmpeq>
 800e192:	b948      	cbnz	r0, 800e1a8 <_svfprintf_r+0x808>
 800e194:	2230      	movs	r2, #48	; 0x30
 800e196:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800e198:	429f      	cmp	r7, r3
 800e19a:	d906      	bls.n	800e1aa <_svfprintf_r+0x80a>
 800e19c:	1c59      	adds	r1, r3, #1
 800e19e:	9124      	str	r1, [sp, #144]	; 0x90
 800e1a0:	701a      	strb	r2, [r3, #0]
 800e1a2:	e7f8      	b.n	800e196 <_svfprintf_r+0x7f6>
 800e1a4:	462e      	mov	r6, r5
 800e1a6:	e7c3      	b.n	800e130 <_svfprintf_r+0x790>
 800e1a8:	9724      	str	r7, [sp, #144]	; 0x90
 800e1aa:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800e1ac:	e720      	b.n	800dff0 <_svfprintf_r+0x650>
 800e1ae:	9b07      	ldr	r3, [sp, #28]
 800e1b0:	2b46      	cmp	r3, #70	; 0x46
 800e1b2:	f47f af2d 	bne.w	800e010 <_svfprintf_r+0x670>
 800e1b6:	2e00      	cmp	r6, #0
 800e1b8:	dd1d      	ble.n	800e1f6 <_svfprintf_r+0x856>
 800e1ba:	b915      	cbnz	r5, 800e1c2 <_svfprintf_r+0x822>
 800e1bc:	f01a 0f01 	tst.w	sl, #1
 800e1c0:	d034      	beq.n	800e22c <_svfprintf_r+0x88c>
 800e1c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e1c4:	18f3      	adds	r3, r6, r3
 800e1c6:	441d      	add	r5, r3
 800e1c8:	2366      	movs	r3, #102	; 0x66
 800e1ca:	9306      	str	r3, [sp, #24]
 800e1cc:	e033      	b.n	800e236 <_svfprintf_r+0x896>
 800e1ce:	460a      	mov	r2, r1
 800e1d0:	e73e      	b.n	800e050 <_svfprintf_r+0x6b0>
 800e1d2:	f812 1b01 	ldrb.w	r1, [r2], #1
 800e1d6:	f803 1b01 	strb.w	r1, [r3], #1
 800e1da:	e74e      	b.n	800e07a <_svfprintf_r+0x6da>
 800e1dc:	b941      	cbnz	r1, 800e1f0 <_svfprintf_r+0x850>
 800e1de:	2230      	movs	r2, #48	; 0x30
 800e1e0:	f88d 208a 	strb.w	r2, [sp, #138]	; 0x8a
 800e1e4:	f10d 028b 	add.w	r2, sp, #139	; 0x8b
 800e1e8:	3330      	adds	r3, #48	; 0x30
 800e1ea:	1c51      	adds	r1, r2, #1
 800e1ec:	7013      	strb	r3, [r2, #0]
 800e1ee:	e748      	b.n	800e082 <_svfprintf_r+0x6e2>
 800e1f0:	f10d 028a 	add.w	r2, sp, #138	; 0x8a
 800e1f4:	e7f8      	b.n	800e1e8 <_svfprintf_r+0x848>
 800e1f6:	b915      	cbnz	r5, 800e1fe <_svfprintf_r+0x85e>
 800e1f8:	f01a 0f01 	tst.w	sl, #1
 800e1fc:	d018      	beq.n	800e230 <_svfprintf_r+0x890>
 800e1fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e200:	3301      	adds	r3, #1
 800e202:	e7e0      	b.n	800e1c6 <_svfprintf_r+0x826>
 800e204:	9b04      	ldr	r3, [sp, #16]
 800e206:	42b3      	cmp	r3, r6
 800e208:	dc06      	bgt.n	800e218 <_svfprintf_r+0x878>
 800e20a:	f01a 0f01 	tst.w	sl, #1
 800e20e:	d025      	beq.n	800e25c <_svfprintf_r+0x8bc>
 800e210:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e212:	18f5      	adds	r5, r6, r3
 800e214:	2367      	movs	r3, #103	; 0x67
 800e216:	e7d8      	b.n	800e1ca <_svfprintf_r+0x82a>
 800e218:	9b04      	ldr	r3, [sp, #16]
 800e21a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e21c:	2e00      	cmp	r6, #0
 800e21e:	eb03 0502 	add.w	r5, r3, r2
 800e222:	dcf7      	bgt.n	800e214 <_svfprintf_r+0x874>
 800e224:	f1c6 0301 	rsb	r3, r6, #1
 800e228:	441d      	add	r5, r3
 800e22a:	e7f3      	b.n	800e214 <_svfprintf_r+0x874>
 800e22c:	4635      	mov	r5, r6
 800e22e:	e7cb      	b.n	800e1c8 <_svfprintf_r+0x828>
 800e230:	2366      	movs	r3, #102	; 0x66
 800e232:	9306      	str	r3, [sp, #24]
 800e234:	2501      	movs	r5, #1
 800e236:	f41a 6380 	ands.w	r3, sl, #1024	; 0x400
 800e23a:	9307      	str	r3, [sp, #28]
 800e23c:	d01f      	beq.n	800e27e <_svfprintf_r+0x8de>
 800e23e:	2700      	movs	r7, #0
 800e240:	2e00      	cmp	r6, #0
 800e242:	9707      	str	r7, [sp, #28]
 800e244:	f77f af32 	ble.w	800e0ac <_svfprintf_r+0x70c>
 800e248:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e24a:	781b      	ldrb	r3, [r3, #0]
 800e24c:	2bff      	cmp	r3, #255	; 0xff
 800e24e:	d107      	bne.n	800e260 <_svfprintf_r+0x8c0>
 800e250:	9b07      	ldr	r3, [sp, #28]
 800e252:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e254:	443b      	add	r3, r7
 800e256:	fb02 5503 	mla	r5, r2, r3, r5
 800e25a:	e727      	b.n	800e0ac <_svfprintf_r+0x70c>
 800e25c:	4635      	mov	r5, r6
 800e25e:	e7d9      	b.n	800e214 <_svfprintf_r+0x874>
 800e260:	42b3      	cmp	r3, r6
 800e262:	daf5      	bge.n	800e250 <_svfprintf_r+0x8b0>
 800e264:	1af6      	subs	r6, r6, r3
 800e266:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e268:	785b      	ldrb	r3, [r3, #1]
 800e26a:	b133      	cbz	r3, 800e27a <_svfprintf_r+0x8da>
 800e26c:	9b07      	ldr	r3, [sp, #28]
 800e26e:	3301      	adds	r3, #1
 800e270:	9307      	str	r3, [sp, #28]
 800e272:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e274:	3301      	adds	r3, #1
 800e276:	9309      	str	r3, [sp, #36]	; 0x24
 800e278:	e7e6      	b.n	800e248 <_svfprintf_r+0x8a8>
 800e27a:	3701      	adds	r7, #1
 800e27c:	e7e4      	b.n	800e248 <_svfprintf_r+0x8a8>
 800e27e:	9f07      	ldr	r7, [sp, #28]
 800e280:	e714      	b.n	800e0ac <_svfprintf_r+0x70c>
 800e282:	4632      	mov	r2, r6
 800e284:	f01a 0f20 	tst.w	sl, #32
 800e288:	f852 3b04 	ldr.w	r3, [r2], #4
 800e28c:	9208      	str	r2, [sp, #32]
 800e28e:	d009      	beq.n	800e2a4 <_svfprintf_r+0x904>
 800e290:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e292:	4610      	mov	r0, r2
 800e294:	17d1      	asrs	r1, r2, #31
 800e296:	e9c3 0100 	strd	r0, r1, [r3]
 800e29a:	9e08      	ldr	r6, [sp, #32]
 800e29c:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
 800e2a0:	f7ff bbba 	b.w	800da18 <_svfprintf_r+0x78>
 800e2a4:	f01a 0f10 	tst.w	sl, #16
 800e2a8:	d002      	beq.n	800e2b0 <_svfprintf_r+0x910>
 800e2aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e2ac:	601a      	str	r2, [r3, #0]
 800e2ae:	e7f4      	b.n	800e29a <_svfprintf_r+0x8fa>
 800e2b0:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800e2b4:	d002      	beq.n	800e2bc <_svfprintf_r+0x91c>
 800e2b6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e2b8:	801a      	strh	r2, [r3, #0]
 800e2ba:	e7ee      	b.n	800e29a <_svfprintf_r+0x8fa>
 800e2bc:	f41a 7f00 	tst.w	sl, #512	; 0x200
 800e2c0:	d0f3      	beq.n	800e2aa <_svfprintf_r+0x90a>
 800e2c2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e2c4:	701a      	strb	r2, [r3, #0]
 800e2c6:	e7e8      	b.n	800e29a <_svfprintf_r+0x8fa>
 800e2c8:	f04a 0a10 	orr.w	sl, sl, #16
 800e2cc:	f01a 0f20 	tst.w	sl, #32
 800e2d0:	d01e      	beq.n	800e310 <_svfprintf_r+0x970>
 800e2d2:	3607      	adds	r6, #7
 800e2d4:	f026 0607 	bic.w	r6, r6, #7
 800e2d8:	f106 0308 	add.w	r3, r6, #8
 800e2dc:	e9d6 6700 	ldrd	r6, r7, [r6]
 800e2e0:	9308      	str	r3, [sp, #32]
 800e2e2:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 800e2e6:	2300      	movs	r3, #0
 800e2e8:	2200      	movs	r2, #0
 800e2ea:	1c69      	adds	r1, r5, #1
 800e2ec:	f88d 207b 	strb.w	r2, [sp, #123]	; 0x7b
 800e2f0:	f000 815b 	beq.w	800e5aa <_svfprintf_r+0xc0a>
 800e2f4:	4652      	mov	r2, sl
 800e2f6:	ea56 0107 	orrs.w	r1, r6, r7
 800e2fa:	f02a 0a80 	bic.w	sl, sl, #128	; 0x80
 800e2fe:	f040 8154 	bne.w	800e5aa <_svfprintf_r+0xc0a>
 800e302:	2d00      	cmp	r5, #0
 800e304:	f000 81d5 	beq.w	800e6b2 <_svfprintf_r+0xd12>
 800e308:	2b01      	cmp	r3, #1
 800e30a:	f040 8151 	bne.w	800e5b0 <_svfprintf_r+0xc10>
 800e30e:	e558      	b.n	800ddc2 <_svfprintf_r+0x422>
 800e310:	1d33      	adds	r3, r6, #4
 800e312:	f01a 0f10 	tst.w	sl, #16
 800e316:	9308      	str	r3, [sp, #32]
 800e318:	d001      	beq.n	800e31e <_svfprintf_r+0x97e>
 800e31a:	6836      	ldr	r6, [r6, #0]
 800e31c:	e003      	b.n	800e326 <_svfprintf_r+0x986>
 800e31e:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800e322:	d002      	beq.n	800e32a <_svfprintf_r+0x98a>
 800e324:	8836      	ldrh	r6, [r6, #0]
 800e326:	2700      	movs	r7, #0
 800e328:	e7db      	b.n	800e2e2 <_svfprintf_r+0x942>
 800e32a:	f41a 7f00 	tst.w	sl, #512	; 0x200
 800e32e:	d0f4      	beq.n	800e31a <_svfprintf_r+0x97a>
 800e330:	7836      	ldrb	r6, [r6, #0]
 800e332:	e7f8      	b.n	800e326 <_svfprintf_r+0x986>
 800e334:	1d33      	adds	r3, r6, #4
 800e336:	9308      	str	r3, [sp, #32]
 800e338:	f647 0330 	movw	r3, #30768	; 0x7830
 800e33c:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
 800e340:	2278      	movs	r2, #120	; 0x78
 800e342:	4bb0      	ldr	r3, [pc, #704]	; (800e604 <_svfprintf_r+0xc64>)
 800e344:	9318      	str	r3, [sp, #96]	; 0x60
 800e346:	6836      	ldr	r6, [r6, #0]
 800e348:	9206      	str	r2, [sp, #24]
 800e34a:	2700      	movs	r7, #0
 800e34c:	f04a 0a02 	orr.w	sl, sl, #2
 800e350:	2302      	movs	r3, #2
 800e352:	e7c9      	b.n	800e2e8 <_svfprintf_r+0x948>
 800e354:	1d33      	adds	r3, r6, #4
 800e356:	f8d6 b000 	ldr.w	fp, [r6]
 800e35a:	9308      	str	r3, [sp, #32]
 800e35c:	2600      	movs	r6, #0
 800e35e:	1c68      	adds	r0, r5, #1
 800e360:	f88d 607b 	strb.w	r6, [sp, #123]	; 0x7b
 800e364:	f000 80e1 	beq.w	800e52a <_svfprintf_r+0xb8a>
 800e368:	462a      	mov	r2, r5
 800e36a:	4631      	mov	r1, r6
 800e36c:	4658      	mov	r0, fp
 800e36e:	f7f1 ff47 	bl	8000200 <memchr>
 800e372:	4681      	mov	r9, r0
 800e374:	2800      	cmp	r0, #0
 800e376:	f43f ad74 	beq.w	800de62 <_svfprintf_r+0x4c2>
 800e37a:	eba0 050b 	sub.w	r5, r0, fp
 800e37e:	46b1      	mov	r9, r6
 800e380:	9610      	str	r6, [sp, #64]	; 0x40
 800e382:	4637      	mov	r7, r6
 800e384:	9607      	str	r6, [sp, #28]
 800e386:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e388:	42ab      	cmp	r3, r5
 800e38a:	bfb8      	it	lt
 800e38c:	462b      	movlt	r3, r5
 800e38e:	9311      	str	r3, [sp, #68]	; 0x44
 800e390:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 800e394:	b113      	cbz	r3, 800e39c <_svfprintf_r+0x9fc>
 800e396:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e398:	3301      	adds	r3, #1
 800e39a:	9311      	str	r3, [sp, #68]	; 0x44
 800e39c:	f01a 0302 	ands.w	r3, sl, #2
 800e3a0:	931c      	str	r3, [sp, #112]	; 0x70
 800e3a2:	bf1e      	ittt	ne
 800e3a4:	9b11      	ldrne	r3, [sp, #68]	; 0x44
 800e3a6:	3302      	addne	r3, #2
 800e3a8:	9311      	strne	r3, [sp, #68]	; 0x44
 800e3aa:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
 800e3ae:	931d      	str	r3, [sp, #116]	; 0x74
 800e3b0:	d122      	bne.n	800e3f8 <_svfprintf_r+0xa58>
 800e3b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e3b4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e3b6:	1a9b      	subs	r3, r3, r2
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	9313      	str	r3, [sp, #76]	; 0x4c
 800e3bc:	dd1c      	ble.n	800e3f8 <_svfprintf_r+0xa58>
 800e3be:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800e3c0:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	; 0x9c
 800e3c4:	2810      	cmp	r0, #16
 800e3c6:	4890      	ldr	r0, [pc, #576]	; (800e608 <_svfprintf_r+0xc68>)
 800e3c8:	6020      	str	r0, [r4, #0]
 800e3ca:	f102 0201 	add.w	r2, r2, #1
 800e3ce:	f104 0108 	add.w	r1, r4, #8
 800e3d2:	f300 8188 	bgt.w	800e6e6 <_svfprintf_r+0xd46>
 800e3d6:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800e3d8:	6060      	str	r0, [r4, #4]
 800e3da:	4403      	add	r3, r0
 800e3dc:	2a07      	cmp	r2, #7
 800e3de:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 800e3e2:	f340 8195 	ble.w	800e710 <_svfprintf_r+0xd70>
 800e3e6:	aa26      	add	r2, sp, #152	; 0x98
 800e3e8:	4641      	mov	r1, r8
 800e3ea:	9803      	ldr	r0, [sp, #12]
 800e3ec:	f002 fee6 	bl	80111bc <__ssprint_r>
 800e3f0:	2800      	cmp	r0, #0
 800e3f2:	f040 84c1 	bne.w	800ed78 <_svfprintf_r+0x13d8>
 800e3f6:	ac29      	add	r4, sp, #164	; 0xa4
 800e3f8:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 800e3fc:	b173      	cbz	r3, 800e41c <_svfprintf_r+0xa7c>
 800e3fe:	f10d 037b 	add.w	r3, sp, #123	; 0x7b
 800e402:	6023      	str	r3, [r4, #0]
 800e404:	2301      	movs	r3, #1
 800e406:	6063      	str	r3, [r4, #4]
 800e408:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800e40a:	3301      	adds	r3, #1
 800e40c:	9328      	str	r3, [sp, #160]	; 0xa0
 800e40e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800e410:	3301      	adds	r3, #1
 800e412:	2b07      	cmp	r3, #7
 800e414:	9327      	str	r3, [sp, #156]	; 0x9c
 800e416:	f300 817d 	bgt.w	800e714 <_svfprintf_r+0xd74>
 800e41a:	3408      	adds	r4, #8
 800e41c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800e41e:	b16b      	cbz	r3, 800e43c <_svfprintf_r+0xa9c>
 800e420:	ab1f      	add	r3, sp, #124	; 0x7c
 800e422:	6023      	str	r3, [r4, #0]
 800e424:	2302      	movs	r3, #2
 800e426:	6063      	str	r3, [r4, #4]
 800e428:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800e42a:	3302      	adds	r3, #2
 800e42c:	9328      	str	r3, [sp, #160]	; 0xa0
 800e42e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800e430:	3301      	adds	r3, #1
 800e432:	2b07      	cmp	r3, #7
 800e434:	9327      	str	r3, [sp, #156]	; 0x9c
 800e436:	f300 8177 	bgt.w	800e728 <_svfprintf_r+0xd88>
 800e43a:	3408      	adds	r4, #8
 800e43c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e43e:	2b80      	cmp	r3, #128	; 0x80
 800e440:	d122      	bne.n	800e488 <_svfprintf_r+0xae8>
 800e442:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e444:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e446:	1a9b      	subs	r3, r3, r2
 800e448:	2b00      	cmp	r3, #0
 800e44a:	9313      	str	r3, [sp, #76]	; 0x4c
 800e44c:	dd1c      	ble.n	800e488 <_svfprintf_r+0xae8>
 800e44e:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800e450:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	; 0x9c
 800e454:	2810      	cmp	r0, #16
 800e456:	486d      	ldr	r0, [pc, #436]	; (800e60c <_svfprintf_r+0xc6c>)
 800e458:	6020      	str	r0, [r4, #0]
 800e45a:	f102 0201 	add.w	r2, r2, #1
 800e45e:	f104 0108 	add.w	r1, r4, #8
 800e462:	f300 816b 	bgt.w	800e73c <_svfprintf_r+0xd9c>
 800e466:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800e468:	6060      	str	r0, [r4, #4]
 800e46a:	4403      	add	r3, r0
 800e46c:	2a07      	cmp	r2, #7
 800e46e:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 800e472:	f340 8178 	ble.w	800e766 <_svfprintf_r+0xdc6>
 800e476:	aa26      	add	r2, sp, #152	; 0x98
 800e478:	4641      	mov	r1, r8
 800e47a:	9803      	ldr	r0, [sp, #12]
 800e47c:	f002 fe9e 	bl	80111bc <__ssprint_r>
 800e480:	2800      	cmp	r0, #0
 800e482:	f040 8479 	bne.w	800ed78 <_svfprintf_r+0x13d8>
 800e486:	ac29      	add	r4, sp, #164	; 0xa4
 800e488:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e48a:	1b5b      	subs	r3, r3, r5
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	9310      	str	r3, [sp, #64]	; 0x40
 800e490:	dd1c      	ble.n	800e4cc <_svfprintf_r+0xb2c>
 800e492:	9810      	ldr	r0, [sp, #64]	; 0x40
 800e494:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	; 0x9c
 800e498:	2810      	cmp	r0, #16
 800e49a:	485c      	ldr	r0, [pc, #368]	; (800e60c <_svfprintf_r+0xc6c>)
 800e49c:	6020      	str	r0, [r4, #0]
 800e49e:	f102 0201 	add.w	r2, r2, #1
 800e4a2:	f104 0108 	add.w	r1, r4, #8
 800e4a6:	f300 8160 	bgt.w	800e76a <_svfprintf_r+0xdca>
 800e4aa:	9810      	ldr	r0, [sp, #64]	; 0x40
 800e4ac:	6060      	str	r0, [r4, #4]
 800e4ae:	4403      	add	r3, r0
 800e4b0:	2a07      	cmp	r2, #7
 800e4b2:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 800e4b6:	f340 816d 	ble.w	800e794 <_svfprintf_r+0xdf4>
 800e4ba:	aa26      	add	r2, sp, #152	; 0x98
 800e4bc:	4641      	mov	r1, r8
 800e4be:	9803      	ldr	r0, [sp, #12]
 800e4c0:	f002 fe7c 	bl	80111bc <__ssprint_r>
 800e4c4:	2800      	cmp	r0, #0
 800e4c6:	f040 8457 	bne.w	800ed78 <_svfprintf_r+0x13d8>
 800e4ca:	ac29      	add	r4, sp, #164	; 0xa4
 800e4cc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800e4ce:	9310      	str	r3, [sp, #64]	; 0x40
 800e4d0:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800e4d4:	f040 8160 	bne.w	800e798 <_svfprintf_r+0xdf8>
 800e4d8:	e9c4 b500 	strd	fp, r5, [r4]
 800e4dc:	441d      	add	r5, r3
 800e4de:	9528      	str	r5, [sp, #160]	; 0xa0
 800e4e0:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800e4e2:	3301      	adds	r3, #1
 800e4e4:	2b07      	cmp	r3, #7
 800e4e6:	9327      	str	r3, [sp, #156]	; 0x9c
 800e4e8:	f300 819c 	bgt.w	800e824 <_svfprintf_r+0xe84>
 800e4ec:	3408      	adds	r4, #8
 800e4ee:	f01a 0f04 	tst.w	sl, #4
 800e4f2:	f040 8423 	bne.w	800ed3c <_svfprintf_r+0x139c>
 800e4f6:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 800e4fa:	9911      	ldr	r1, [sp, #68]	; 0x44
 800e4fc:	428a      	cmp	r2, r1
 800e4fe:	bfac      	ite	ge
 800e500:	189b      	addge	r3, r3, r2
 800e502:	185b      	addlt	r3, r3, r1
 800e504:	930e      	str	r3, [sp, #56]	; 0x38
 800e506:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800e508:	b13b      	cbz	r3, 800e51a <_svfprintf_r+0xb7a>
 800e50a:	aa26      	add	r2, sp, #152	; 0x98
 800e50c:	4641      	mov	r1, r8
 800e50e:	9803      	ldr	r0, [sp, #12]
 800e510:	f002 fe54 	bl	80111bc <__ssprint_r>
 800e514:	2800      	cmp	r0, #0
 800e516:	f040 842f 	bne.w	800ed78 <_svfprintf_r+0x13d8>
 800e51a:	2300      	movs	r3, #0
 800e51c:	9327      	str	r3, [sp, #156]	; 0x9c
 800e51e:	f1b9 0f00 	cmp.w	r9, #0
 800e522:	f040 8445 	bne.w	800edb0 <_svfprintf_r+0x1410>
 800e526:	ac29      	add	r4, sp, #164	; 0xa4
 800e528:	e6b7      	b.n	800e29a <_svfprintf_r+0x8fa>
 800e52a:	4658      	mov	r0, fp
 800e52c:	f7f1 fe5a 	bl	80001e4 <strlen>
 800e530:	46b1      	mov	r9, r6
 800e532:	4605      	mov	r5, r0
 800e534:	e495      	b.n	800de62 <_svfprintf_r+0x4c2>
 800e536:	f04a 0a10 	orr.w	sl, sl, #16
 800e53a:	f01a 0f20 	tst.w	sl, #32
 800e53e:	d009      	beq.n	800e554 <_svfprintf_r+0xbb4>
 800e540:	3607      	adds	r6, #7
 800e542:	f026 0607 	bic.w	r6, r6, #7
 800e546:	f106 0308 	add.w	r3, r6, #8
 800e54a:	e9d6 6700 	ldrd	r6, r7, [r6]
 800e54e:	9308      	str	r3, [sp, #32]
 800e550:	2301      	movs	r3, #1
 800e552:	e6c9      	b.n	800e2e8 <_svfprintf_r+0x948>
 800e554:	1d33      	adds	r3, r6, #4
 800e556:	f01a 0f10 	tst.w	sl, #16
 800e55a:	9308      	str	r3, [sp, #32]
 800e55c:	d001      	beq.n	800e562 <_svfprintf_r+0xbc2>
 800e55e:	6836      	ldr	r6, [r6, #0]
 800e560:	e003      	b.n	800e56a <_svfprintf_r+0xbca>
 800e562:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800e566:	d002      	beq.n	800e56e <_svfprintf_r+0xbce>
 800e568:	8836      	ldrh	r6, [r6, #0]
 800e56a:	2700      	movs	r7, #0
 800e56c:	e7f0      	b.n	800e550 <_svfprintf_r+0xbb0>
 800e56e:	f41a 7f00 	tst.w	sl, #512	; 0x200
 800e572:	d0f4      	beq.n	800e55e <_svfprintf_r+0xbbe>
 800e574:	7836      	ldrb	r6, [r6, #0]
 800e576:	e7f8      	b.n	800e56a <_svfprintf_r+0xbca>
 800e578:	4b22      	ldr	r3, [pc, #136]	; (800e604 <_svfprintf_r+0xc64>)
 800e57a:	f7ff bb48 	b.w	800dc0e <_svfprintf_r+0x26e>
 800e57e:	1d33      	adds	r3, r6, #4
 800e580:	f01a 0f10 	tst.w	sl, #16
 800e584:	9308      	str	r3, [sp, #32]
 800e586:	d001      	beq.n	800e58c <_svfprintf_r+0xbec>
 800e588:	6836      	ldr	r6, [r6, #0]
 800e58a:	e003      	b.n	800e594 <_svfprintf_r+0xbf4>
 800e58c:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800e590:	d003      	beq.n	800e59a <_svfprintf_r+0xbfa>
 800e592:	8836      	ldrh	r6, [r6, #0]
 800e594:	2700      	movs	r7, #0
 800e596:	f7ff bb47 	b.w	800dc28 <_svfprintf_r+0x288>
 800e59a:	f41a 7f00 	tst.w	sl, #512	; 0x200
 800e59e:	d0f3      	beq.n	800e588 <_svfprintf_r+0xbe8>
 800e5a0:	7836      	ldrb	r6, [r6, #0]
 800e5a2:	e7f7      	b.n	800e594 <_svfprintf_r+0xbf4>
 800e5a4:	4652      	mov	r2, sl
 800e5a6:	2301      	movs	r3, #1
 800e5a8:	e6a5      	b.n	800e2f6 <_svfprintf_r+0x956>
 800e5aa:	2b01      	cmp	r3, #1
 800e5ac:	f43f ac04 	beq.w	800ddb8 <_svfprintf_r+0x418>
 800e5b0:	2b02      	cmp	r3, #2
 800e5b2:	d06c      	beq.n	800e68e <_svfprintf_r+0xcee>
 800e5b4:	ab52      	add	r3, sp, #328	; 0x148
 800e5b6:	08f1      	lsrs	r1, r6, #3
 800e5b8:	ea41 7147 	orr.w	r1, r1, r7, lsl #29
 800e5bc:	08f8      	lsrs	r0, r7, #3
 800e5be:	f006 0207 	and.w	r2, r6, #7
 800e5c2:	4607      	mov	r7, r0
 800e5c4:	460e      	mov	r6, r1
 800e5c6:	3230      	adds	r2, #48	; 0x30
 800e5c8:	ea56 0107 	orrs.w	r1, r6, r7
 800e5cc:	f103 3bff 	add.w	fp, r3, #4294967295
 800e5d0:	f803 2c01 	strb.w	r2, [r3, #-1]
 800e5d4:	d114      	bne.n	800e600 <_svfprintf_r+0xc60>
 800e5d6:	f01a 0f01 	tst.w	sl, #1
 800e5da:	d006      	beq.n	800e5ea <_svfprintf_r+0xc4a>
 800e5dc:	2a30      	cmp	r2, #48	; 0x30
 800e5de:	d004      	beq.n	800e5ea <_svfprintf_r+0xc4a>
 800e5e0:	2230      	movs	r2, #48	; 0x30
 800e5e2:	f80b 2c01 	strb.w	r2, [fp, #-1]
 800e5e6:	f1a3 0b02 	sub.w	fp, r3, #2
 800e5ea:	ab52      	add	r3, sp, #328	; 0x148
 800e5ec:	9510      	str	r5, [sp, #64]	; 0x40
 800e5ee:	f04f 0900 	mov.w	r9, #0
 800e5f2:	eba3 050b 	sub.w	r5, r3, fp
 800e5f6:	464f      	mov	r7, r9
 800e5f8:	f8cd 901c 	str.w	r9, [sp, #28]
 800e5fc:	464e      	mov	r6, r9
 800e5fe:	e6c2      	b.n	800e386 <_svfprintf_r+0x9e6>
 800e600:	465b      	mov	r3, fp
 800e602:	e7d8      	b.n	800e5b6 <_svfprintf_r+0xc16>
 800e604:	08011b50 	.word	0x08011b50
 800e608:	08011b74 	.word	0x08011b74
 800e60c:	08011b84 	.word	0x08011b84
 800e610:	2300      	movs	r3, #0
 800e612:	9304      	str	r3, [sp, #16]
 800e614:	f40a 6380 	and.w	r3, sl, #1024	; 0x400
 800e618:	f50d 79a4 	add.w	r9, sp, #328	; 0x148
 800e61c:	9307      	str	r3, [sp, #28]
 800e61e:	220a      	movs	r2, #10
 800e620:	2300      	movs	r3, #0
 800e622:	4630      	mov	r0, r6
 800e624:	4639      	mov	r1, r7
 800e626:	f7f2 fb3f 	bl	8000ca8 <__aeabi_uldivmod>
 800e62a:	9b04      	ldr	r3, [sp, #16]
 800e62c:	3301      	adds	r3, #1
 800e62e:	9304      	str	r3, [sp, #16]
 800e630:	9b07      	ldr	r3, [sp, #28]
 800e632:	3230      	adds	r2, #48	; 0x30
 800e634:	f109 3bff 	add.w	fp, r9, #4294967295
 800e638:	f809 2c01 	strb.w	r2, [r9, #-1]
 800e63c:	b1d3      	cbz	r3, 800e674 <_svfprintf_r+0xcd4>
 800e63e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e640:	9a04      	ldr	r2, [sp, #16]
 800e642:	781b      	ldrb	r3, [r3, #0]
 800e644:	429a      	cmp	r2, r3
 800e646:	d115      	bne.n	800e674 <_svfprintf_r+0xcd4>
 800e648:	2aff      	cmp	r2, #255	; 0xff
 800e64a:	d013      	beq.n	800e674 <_svfprintf_r+0xcd4>
 800e64c:	2f00      	cmp	r7, #0
 800e64e:	bf08      	it	eq
 800e650:	2e0a      	cmpeq	r6, #10
 800e652:	d30f      	bcc.n	800e674 <_svfprintf_r+0xcd4>
 800e654:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e656:	9919      	ldr	r1, [sp, #100]	; 0x64
 800e658:	ebab 0b03 	sub.w	fp, fp, r3
 800e65c:	461a      	mov	r2, r3
 800e65e:	4658      	mov	r0, fp
 800e660:	f7fe fb63 	bl	800cd2a <strncpy>
 800e664:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e666:	785b      	ldrb	r3, [r3, #1]
 800e668:	b11b      	cbz	r3, 800e672 <_svfprintf_r+0xcd2>
 800e66a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e66c:	3301      	adds	r3, #1
 800e66e:	9309      	str	r3, [sp, #36]	; 0x24
 800e670:	2300      	movs	r3, #0
 800e672:	9304      	str	r3, [sp, #16]
 800e674:	2300      	movs	r3, #0
 800e676:	4630      	mov	r0, r6
 800e678:	4639      	mov	r1, r7
 800e67a:	220a      	movs	r2, #10
 800e67c:	f7f2 fb14 	bl	8000ca8 <__aeabi_uldivmod>
 800e680:	4606      	mov	r6, r0
 800e682:	460f      	mov	r7, r1
 800e684:	ea56 0307 	orrs.w	r3, r6, r7
 800e688:	d0af      	beq.n	800e5ea <_svfprintf_r+0xc4a>
 800e68a:	46d9      	mov	r9, fp
 800e68c:	e7c7      	b.n	800e61e <_svfprintf_r+0xc7e>
 800e68e:	f50d 7ba4 	add.w	fp, sp, #328	; 0x148
 800e692:	f006 030f 	and.w	r3, r6, #15
 800e696:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800e698:	5cd3      	ldrb	r3, [r2, r3]
 800e69a:	f80b 3d01 	strb.w	r3, [fp, #-1]!
 800e69e:	0933      	lsrs	r3, r6, #4
 800e6a0:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 800e6a4:	093a      	lsrs	r2, r7, #4
 800e6a6:	461e      	mov	r6, r3
 800e6a8:	4617      	mov	r7, r2
 800e6aa:	ea56 0307 	orrs.w	r3, r6, r7
 800e6ae:	d1f0      	bne.n	800e692 <_svfprintf_r+0xcf2>
 800e6b0:	e79b      	b.n	800e5ea <_svfprintf_r+0xc4a>
 800e6b2:	f50d 7ba4 	add.w	fp, sp, #328	; 0x148
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d197      	bne.n	800e5ea <_svfprintf_r+0xc4a>
 800e6ba:	07d2      	lsls	r2, r2, #31
 800e6bc:	bf44      	itt	mi
 800e6be:	2330      	movmi	r3, #48	; 0x30
 800e6c0:	f80b 3d01 	strbmi.w	r3, [fp, #-1]!
 800e6c4:	e791      	b.n	800e5ea <_svfprintf_r+0xc4a>
 800e6c6:	9b06      	ldr	r3, [sp, #24]
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	f000 8377 	beq.w	800edbc <_svfprintf_r+0x141c>
 800e6ce:	2000      	movs	r0, #0
 800e6d0:	f88d 30e4 	strb.w	r3, [sp, #228]	; 0xe4
 800e6d4:	f88d 007b 	strb.w	r0, [sp, #123]	; 0x7b
 800e6d8:	9608      	str	r6, [sp, #32]
 800e6da:	f7ff bb49 	b.w	800dd70 <_svfprintf_r+0x3d0>
 800e6de:	f8dd a040 	ldr.w	sl, [sp, #64]	; 0x40
 800e6e2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e6e4:	e4ec      	b.n	800e0c0 <_svfprintf_r+0x720>
 800e6e6:	2010      	movs	r0, #16
 800e6e8:	4403      	add	r3, r0
 800e6ea:	2a07      	cmp	r2, #7
 800e6ec:	6060      	str	r0, [r4, #4]
 800e6ee:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 800e6f2:	dd08      	ble.n	800e706 <_svfprintf_r+0xd66>
 800e6f4:	aa26      	add	r2, sp, #152	; 0x98
 800e6f6:	4641      	mov	r1, r8
 800e6f8:	9803      	ldr	r0, [sp, #12]
 800e6fa:	f002 fd5f 	bl	80111bc <__ssprint_r>
 800e6fe:	2800      	cmp	r0, #0
 800e700:	f040 833a 	bne.w	800ed78 <_svfprintf_r+0x13d8>
 800e704:	a929      	add	r1, sp, #164	; 0xa4
 800e706:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e708:	3b10      	subs	r3, #16
 800e70a:	9313      	str	r3, [sp, #76]	; 0x4c
 800e70c:	460c      	mov	r4, r1
 800e70e:	e656      	b.n	800e3be <_svfprintf_r+0xa1e>
 800e710:	460c      	mov	r4, r1
 800e712:	e671      	b.n	800e3f8 <_svfprintf_r+0xa58>
 800e714:	aa26      	add	r2, sp, #152	; 0x98
 800e716:	4641      	mov	r1, r8
 800e718:	9803      	ldr	r0, [sp, #12]
 800e71a:	f002 fd4f 	bl	80111bc <__ssprint_r>
 800e71e:	2800      	cmp	r0, #0
 800e720:	f040 832a 	bne.w	800ed78 <_svfprintf_r+0x13d8>
 800e724:	ac29      	add	r4, sp, #164	; 0xa4
 800e726:	e679      	b.n	800e41c <_svfprintf_r+0xa7c>
 800e728:	aa26      	add	r2, sp, #152	; 0x98
 800e72a:	4641      	mov	r1, r8
 800e72c:	9803      	ldr	r0, [sp, #12]
 800e72e:	f002 fd45 	bl	80111bc <__ssprint_r>
 800e732:	2800      	cmp	r0, #0
 800e734:	f040 8320 	bne.w	800ed78 <_svfprintf_r+0x13d8>
 800e738:	ac29      	add	r4, sp, #164	; 0xa4
 800e73a:	e67f      	b.n	800e43c <_svfprintf_r+0xa9c>
 800e73c:	2010      	movs	r0, #16
 800e73e:	4403      	add	r3, r0
 800e740:	2a07      	cmp	r2, #7
 800e742:	6060      	str	r0, [r4, #4]
 800e744:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 800e748:	dd08      	ble.n	800e75c <_svfprintf_r+0xdbc>
 800e74a:	aa26      	add	r2, sp, #152	; 0x98
 800e74c:	4641      	mov	r1, r8
 800e74e:	9803      	ldr	r0, [sp, #12]
 800e750:	f002 fd34 	bl	80111bc <__ssprint_r>
 800e754:	2800      	cmp	r0, #0
 800e756:	f040 830f 	bne.w	800ed78 <_svfprintf_r+0x13d8>
 800e75a:	a929      	add	r1, sp, #164	; 0xa4
 800e75c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e75e:	3b10      	subs	r3, #16
 800e760:	9313      	str	r3, [sp, #76]	; 0x4c
 800e762:	460c      	mov	r4, r1
 800e764:	e673      	b.n	800e44e <_svfprintf_r+0xaae>
 800e766:	460c      	mov	r4, r1
 800e768:	e68e      	b.n	800e488 <_svfprintf_r+0xae8>
 800e76a:	2010      	movs	r0, #16
 800e76c:	4403      	add	r3, r0
 800e76e:	2a07      	cmp	r2, #7
 800e770:	6060      	str	r0, [r4, #4]
 800e772:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 800e776:	dd08      	ble.n	800e78a <_svfprintf_r+0xdea>
 800e778:	aa26      	add	r2, sp, #152	; 0x98
 800e77a:	4641      	mov	r1, r8
 800e77c:	9803      	ldr	r0, [sp, #12]
 800e77e:	f002 fd1d 	bl	80111bc <__ssprint_r>
 800e782:	2800      	cmp	r0, #0
 800e784:	f040 82f8 	bne.w	800ed78 <_svfprintf_r+0x13d8>
 800e788:	a929      	add	r1, sp, #164	; 0xa4
 800e78a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e78c:	3b10      	subs	r3, #16
 800e78e:	9310      	str	r3, [sp, #64]	; 0x40
 800e790:	460c      	mov	r4, r1
 800e792:	e67e      	b.n	800e492 <_svfprintf_r+0xaf2>
 800e794:	460c      	mov	r4, r1
 800e796:	e699      	b.n	800e4cc <_svfprintf_r+0xb2c>
 800e798:	9b06      	ldr	r3, [sp, #24]
 800e79a:	2b65      	cmp	r3, #101	; 0x65
 800e79c:	f340 8234 	ble.w	800ec08 <_svfprintf_r+0x1268>
 800e7a0:	2200      	movs	r2, #0
 800e7a2:	2300      	movs	r3, #0
 800e7a4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800e7a8:	f7f2 f99e 	bl	8000ae8 <__aeabi_dcmpeq>
 800e7ac:	2800      	cmp	r0, #0
 800e7ae:	d069      	beq.n	800e884 <_svfprintf_r+0xee4>
 800e7b0:	4b6e      	ldr	r3, [pc, #440]	; (800e96c <_svfprintf_r+0xfcc>)
 800e7b2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800e7b4:	6023      	str	r3, [r4, #0]
 800e7b6:	2301      	movs	r3, #1
 800e7b8:	441d      	add	r5, r3
 800e7ba:	6063      	str	r3, [r4, #4]
 800e7bc:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800e7be:	9528      	str	r5, [sp, #160]	; 0xa0
 800e7c0:	3301      	adds	r3, #1
 800e7c2:	2b07      	cmp	r3, #7
 800e7c4:	9327      	str	r3, [sp, #156]	; 0x9c
 800e7c6:	dc37      	bgt.n	800e838 <_svfprintf_r+0xe98>
 800e7c8:	3408      	adds	r4, #8
 800e7ca:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800e7cc:	9a04      	ldr	r2, [sp, #16]
 800e7ce:	4293      	cmp	r3, r2
 800e7d0:	db03      	blt.n	800e7da <_svfprintf_r+0xe3a>
 800e7d2:	f01a 0f01 	tst.w	sl, #1
 800e7d6:	f43f ae8a 	beq.w	800e4ee <_svfprintf_r+0xb4e>
 800e7da:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800e7dc:	6023      	str	r3, [r4, #0]
 800e7de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e7e0:	6063      	str	r3, [r4, #4]
 800e7e2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e7e4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800e7e6:	4413      	add	r3, r2
 800e7e8:	9328      	str	r3, [sp, #160]	; 0xa0
 800e7ea:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800e7ec:	3301      	adds	r3, #1
 800e7ee:	2b07      	cmp	r3, #7
 800e7f0:	9327      	str	r3, [sp, #156]	; 0x9c
 800e7f2:	dc2b      	bgt.n	800e84c <_svfprintf_r+0xeac>
 800e7f4:	3408      	adds	r4, #8
 800e7f6:	9b04      	ldr	r3, [sp, #16]
 800e7f8:	1e5d      	subs	r5, r3, #1
 800e7fa:	2d00      	cmp	r5, #0
 800e7fc:	f77f ae77 	ble.w	800e4ee <_svfprintf_r+0xb4e>
 800e800:	4e5b      	ldr	r6, [pc, #364]	; (800e970 <_svfprintf_r+0xfd0>)
 800e802:	2710      	movs	r7, #16
 800e804:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 800e808:	2d10      	cmp	r5, #16
 800e80a:	f103 0301 	add.w	r3, r3, #1
 800e80e:	f104 0108 	add.w	r1, r4, #8
 800e812:	6026      	str	r6, [r4, #0]
 800e814:	dc24      	bgt.n	800e860 <_svfprintf_r+0xec0>
 800e816:	6065      	str	r5, [r4, #4]
 800e818:	2b07      	cmp	r3, #7
 800e81a:	4415      	add	r5, r2
 800e81c:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 800e820:	f340 8289 	ble.w	800ed36 <_svfprintf_r+0x1396>
 800e824:	aa26      	add	r2, sp, #152	; 0x98
 800e826:	4641      	mov	r1, r8
 800e828:	9803      	ldr	r0, [sp, #12]
 800e82a:	f002 fcc7 	bl	80111bc <__ssprint_r>
 800e82e:	2800      	cmp	r0, #0
 800e830:	f040 82a2 	bne.w	800ed78 <_svfprintf_r+0x13d8>
 800e834:	ac29      	add	r4, sp, #164	; 0xa4
 800e836:	e65a      	b.n	800e4ee <_svfprintf_r+0xb4e>
 800e838:	aa26      	add	r2, sp, #152	; 0x98
 800e83a:	4641      	mov	r1, r8
 800e83c:	9803      	ldr	r0, [sp, #12]
 800e83e:	f002 fcbd 	bl	80111bc <__ssprint_r>
 800e842:	2800      	cmp	r0, #0
 800e844:	f040 8298 	bne.w	800ed78 <_svfprintf_r+0x13d8>
 800e848:	ac29      	add	r4, sp, #164	; 0xa4
 800e84a:	e7be      	b.n	800e7ca <_svfprintf_r+0xe2a>
 800e84c:	aa26      	add	r2, sp, #152	; 0x98
 800e84e:	4641      	mov	r1, r8
 800e850:	9803      	ldr	r0, [sp, #12]
 800e852:	f002 fcb3 	bl	80111bc <__ssprint_r>
 800e856:	2800      	cmp	r0, #0
 800e858:	f040 828e 	bne.w	800ed78 <_svfprintf_r+0x13d8>
 800e85c:	ac29      	add	r4, sp, #164	; 0xa4
 800e85e:	e7ca      	b.n	800e7f6 <_svfprintf_r+0xe56>
 800e860:	3210      	adds	r2, #16
 800e862:	2b07      	cmp	r3, #7
 800e864:	6067      	str	r7, [r4, #4]
 800e866:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 800e86a:	dd08      	ble.n	800e87e <_svfprintf_r+0xede>
 800e86c:	aa26      	add	r2, sp, #152	; 0x98
 800e86e:	4641      	mov	r1, r8
 800e870:	9803      	ldr	r0, [sp, #12]
 800e872:	f002 fca3 	bl	80111bc <__ssprint_r>
 800e876:	2800      	cmp	r0, #0
 800e878:	f040 827e 	bne.w	800ed78 <_svfprintf_r+0x13d8>
 800e87c:	a929      	add	r1, sp, #164	; 0xa4
 800e87e:	3d10      	subs	r5, #16
 800e880:	460c      	mov	r4, r1
 800e882:	e7bf      	b.n	800e804 <_svfprintf_r+0xe64>
 800e884:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800e886:	2b00      	cmp	r3, #0
 800e888:	dc74      	bgt.n	800e974 <_svfprintf_r+0xfd4>
 800e88a:	4b38      	ldr	r3, [pc, #224]	; (800e96c <_svfprintf_r+0xfcc>)
 800e88c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800e88e:	6023      	str	r3, [r4, #0]
 800e890:	2301      	movs	r3, #1
 800e892:	441d      	add	r5, r3
 800e894:	6063      	str	r3, [r4, #4]
 800e896:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800e898:	9528      	str	r5, [sp, #160]	; 0xa0
 800e89a:	3301      	adds	r3, #1
 800e89c:	2b07      	cmp	r3, #7
 800e89e:	9327      	str	r3, [sp, #156]	; 0x9c
 800e8a0:	dc3e      	bgt.n	800e920 <_svfprintf_r+0xf80>
 800e8a2:	3408      	adds	r4, #8
 800e8a4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800e8a6:	b92b      	cbnz	r3, 800e8b4 <_svfprintf_r+0xf14>
 800e8a8:	9b04      	ldr	r3, [sp, #16]
 800e8aa:	b91b      	cbnz	r3, 800e8b4 <_svfprintf_r+0xf14>
 800e8ac:	f01a 0f01 	tst.w	sl, #1
 800e8b0:	f43f ae1d 	beq.w	800e4ee <_svfprintf_r+0xb4e>
 800e8b4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800e8b6:	6023      	str	r3, [r4, #0]
 800e8b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e8ba:	6063      	str	r3, [r4, #4]
 800e8bc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e8be:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800e8c0:	4413      	add	r3, r2
 800e8c2:	9328      	str	r3, [sp, #160]	; 0xa0
 800e8c4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800e8c6:	3301      	adds	r3, #1
 800e8c8:	2b07      	cmp	r3, #7
 800e8ca:	9327      	str	r3, [sp, #156]	; 0x9c
 800e8cc:	dc32      	bgt.n	800e934 <_svfprintf_r+0xf94>
 800e8ce:	3408      	adds	r4, #8
 800e8d0:	9d20      	ldr	r5, [sp, #128]	; 0x80
 800e8d2:	2d00      	cmp	r5, #0
 800e8d4:	da1b      	bge.n	800e90e <_svfprintf_r+0xf6e>
 800e8d6:	4e26      	ldr	r6, [pc, #152]	; (800e970 <_svfprintf_r+0xfd0>)
 800e8d8:	426d      	negs	r5, r5
 800e8da:	4623      	mov	r3, r4
 800e8dc:	2710      	movs	r7, #16
 800e8de:	e9dd 2127 	ldrd	r2, r1, [sp, #156]	; 0x9c
 800e8e2:	2d10      	cmp	r5, #16
 800e8e4:	f102 0201 	add.w	r2, r2, #1
 800e8e8:	f104 0408 	add.w	r4, r4, #8
 800e8ec:	601e      	str	r6, [r3, #0]
 800e8ee:	dc2b      	bgt.n	800e948 <_svfprintf_r+0xfa8>
 800e8f0:	605d      	str	r5, [r3, #4]
 800e8f2:	2a07      	cmp	r2, #7
 800e8f4:	440d      	add	r5, r1
 800e8f6:	e9cd 2527 	strd	r2, r5, [sp, #156]	; 0x9c
 800e8fa:	dd08      	ble.n	800e90e <_svfprintf_r+0xf6e>
 800e8fc:	aa26      	add	r2, sp, #152	; 0x98
 800e8fe:	4641      	mov	r1, r8
 800e900:	9803      	ldr	r0, [sp, #12]
 800e902:	f002 fc5b 	bl	80111bc <__ssprint_r>
 800e906:	2800      	cmp	r0, #0
 800e908:	f040 8236 	bne.w	800ed78 <_svfprintf_r+0x13d8>
 800e90c:	ac29      	add	r4, sp, #164	; 0xa4
 800e90e:	9b04      	ldr	r3, [sp, #16]
 800e910:	6063      	str	r3, [r4, #4]
 800e912:	9a04      	ldr	r2, [sp, #16]
 800e914:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800e916:	f8c4 b000 	str.w	fp, [r4]
 800e91a:	4413      	add	r3, r2
 800e91c:	9328      	str	r3, [sp, #160]	; 0xa0
 800e91e:	e5df      	b.n	800e4e0 <_svfprintf_r+0xb40>
 800e920:	aa26      	add	r2, sp, #152	; 0x98
 800e922:	4641      	mov	r1, r8
 800e924:	9803      	ldr	r0, [sp, #12]
 800e926:	f002 fc49 	bl	80111bc <__ssprint_r>
 800e92a:	2800      	cmp	r0, #0
 800e92c:	f040 8224 	bne.w	800ed78 <_svfprintf_r+0x13d8>
 800e930:	ac29      	add	r4, sp, #164	; 0xa4
 800e932:	e7b7      	b.n	800e8a4 <_svfprintf_r+0xf04>
 800e934:	aa26      	add	r2, sp, #152	; 0x98
 800e936:	4641      	mov	r1, r8
 800e938:	9803      	ldr	r0, [sp, #12]
 800e93a:	f002 fc3f 	bl	80111bc <__ssprint_r>
 800e93e:	2800      	cmp	r0, #0
 800e940:	f040 821a 	bne.w	800ed78 <_svfprintf_r+0x13d8>
 800e944:	ac29      	add	r4, sp, #164	; 0xa4
 800e946:	e7c3      	b.n	800e8d0 <_svfprintf_r+0xf30>
 800e948:	3110      	adds	r1, #16
 800e94a:	2a07      	cmp	r2, #7
 800e94c:	605f      	str	r7, [r3, #4]
 800e94e:	e9cd 2127 	strd	r2, r1, [sp, #156]	; 0x9c
 800e952:	dd08      	ble.n	800e966 <_svfprintf_r+0xfc6>
 800e954:	aa26      	add	r2, sp, #152	; 0x98
 800e956:	4641      	mov	r1, r8
 800e958:	9803      	ldr	r0, [sp, #12]
 800e95a:	f002 fc2f 	bl	80111bc <__ssprint_r>
 800e95e:	2800      	cmp	r0, #0
 800e960:	f040 820a 	bne.w	800ed78 <_svfprintf_r+0x13d8>
 800e964:	ac29      	add	r4, sp, #164	; 0xa4
 800e966:	3d10      	subs	r5, #16
 800e968:	4623      	mov	r3, r4
 800e96a:	e7b8      	b.n	800e8de <_svfprintf_r+0xf3e>
 800e96c:	08011b72 	.word	0x08011b72
 800e970:	08011b84 	.word	0x08011b84
 800e974:	9b04      	ldr	r3, [sp, #16]
 800e976:	42b3      	cmp	r3, r6
 800e978:	bfa8      	it	ge
 800e97a:	4633      	movge	r3, r6
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	461d      	mov	r5, r3
 800e980:	dd0b      	ble.n	800e99a <_svfprintf_r+0xffa>
 800e982:	e9c4 b300 	strd	fp, r3, [r4]
 800e986:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e988:	442b      	add	r3, r5
 800e98a:	9328      	str	r3, [sp, #160]	; 0xa0
 800e98c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800e98e:	3301      	adds	r3, #1
 800e990:	2b07      	cmp	r3, #7
 800e992:	9327      	str	r3, [sp, #156]	; 0x9c
 800e994:	f300 8086 	bgt.w	800eaa4 <_svfprintf_r+0x1104>
 800e998:	3408      	adds	r4, #8
 800e99a:	2d00      	cmp	r5, #0
 800e99c:	bfac      	ite	ge
 800e99e:	1b75      	subge	r5, r6, r5
 800e9a0:	4635      	movlt	r5, r6
 800e9a2:	2d00      	cmp	r5, #0
 800e9a4:	dd19      	ble.n	800e9da <_svfprintf_r+0x103a>
 800e9a6:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 800e9aa:	4896      	ldr	r0, [pc, #600]	; (800ec04 <_svfprintf_r+0x1264>)
 800e9ac:	6020      	str	r0, [r4, #0]
 800e9ae:	2d10      	cmp	r5, #16
 800e9b0:	f103 0301 	add.w	r3, r3, #1
 800e9b4:	f104 0108 	add.w	r1, r4, #8
 800e9b8:	dc7e      	bgt.n	800eab8 <_svfprintf_r+0x1118>
 800e9ba:	6065      	str	r5, [r4, #4]
 800e9bc:	2b07      	cmp	r3, #7
 800e9be:	4415      	add	r5, r2
 800e9c0:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 800e9c4:	f340 808b 	ble.w	800eade <_svfprintf_r+0x113e>
 800e9c8:	aa26      	add	r2, sp, #152	; 0x98
 800e9ca:	4641      	mov	r1, r8
 800e9cc:	9803      	ldr	r0, [sp, #12]
 800e9ce:	f002 fbf5 	bl	80111bc <__ssprint_r>
 800e9d2:	2800      	cmp	r0, #0
 800e9d4:	f040 81d0 	bne.w	800ed78 <_svfprintf_r+0x13d8>
 800e9d8:	ac29      	add	r4, sp, #164	; 0xa4
 800e9da:	f41a 6f80 	tst.w	sl, #1024	; 0x400
 800e9de:	445e      	add	r6, fp
 800e9e0:	d009      	beq.n	800e9f6 <_svfprintf_r+0x1056>
 800e9e2:	9b07      	ldr	r3, [sp, #28]
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	d17c      	bne.n	800eae2 <_svfprintf_r+0x1142>
 800e9e8:	2f00      	cmp	r7, #0
 800e9ea:	d17c      	bne.n	800eae6 <_svfprintf_r+0x1146>
 800e9ec:	9b04      	ldr	r3, [sp, #16]
 800e9ee:	445b      	add	r3, fp
 800e9f0:	429e      	cmp	r6, r3
 800e9f2:	bf28      	it	cs
 800e9f4:	461e      	movcs	r6, r3
 800e9f6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800e9f8:	9a04      	ldr	r2, [sp, #16]
 800e9fa:	4293      	cmp	r3, r2
 800e9fc:	db02      	blt.n	800ea04 <_svfprintf_r+0x1064>
 800e9fe:	f01a 0f01 	tst.w	sl, #1
 800ea02:	d00e      	beq.n	800ea22 <_svfprintf_r+0x1082>
 800ea04:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800ea06:	6023      	str	r3, [r4, #0]
 800ea08:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ea0a:	6063      	str	r3, [r4, #4]
 800ea0c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ea0e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800ea10:	4413      	add	r3, r2
 800ea12:	9328      	str	r3, [sp, #160]	; 0xa0
 800ea14:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800ea16:	3301      	adds	r3, #1
 800ea18:	2b07      	cmp	r3, #7
 800ea1a:	9327      	str	r3, [sp, #156]	; 0x9c
 800ea1c:	f300 80dd 	bgt.w	800ebda <_svfprintf_r+0x123a>
 800ea20:	3408      	adds	r4, #8
 800ea22:	9b04      	ldr	r3, [sp, #16]
 800ea24:	9a04      	ldr	r2, [sp, #16]
 800ea26:	eb0b 0503 	add.w	r5, fp, r3
 800ea2a:	1bab      	subs	r3, r5, r6
 800ea2c:	9d20      	ldr	r5, [sp, #128]	; 0x80
 800ea2e:	1b55      	subs	r5, r2, r5
 800ea30:	429d      	cmp	r5, r3
 800ea32:	bfa8      	it	ge
 800ea34:	461d      	movge	r5, r3
 800ea36:	2d00      	cmp	r5, #0
 800ea38:	dd0b      	ble.n	800ea52 <_svfprintf_r+0x10b2>
 800ea3a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800ea3c:	442b      	add	r3, r5
 800ea3e:	9328      	str	r3, [sp, #160]	; 0xa0
 800ea40:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800ea42:	3301      	adds	r3, #1
 800ea44:	2b07      	cmp	r3, #7
 800ea46:	e9c4 6500 	strd	r6, r5, [r4]
 800ea4a:	9327      	str	r3, [sp, #156]	; 0x9c
 800ea4c:	f300 80cf 	bgt.w	800ebee <_svfprintf_r+0x124e>
 800ea50:	3408      	adds	r4, #8
 800ea52:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800ea54:	9a04      	ldr	r2, [sp, #16]
 800ea56:	2d00      	cmp	r5, #0
 800ea58:	eba2 0303 	sub.w	r3, r2, r3
 800ea5c:	bfac      	ite	ge
 800ea5e:	1b5d      	subge	r5, r3, r5
 800ea60:	461d      	movlt	r5, r3
 800ea62:	2d00      	cmp	r5, #0
 800ea64:	f77f ad43 	ble.w	800e4ee <_svfprintf_r+0xb4e>
 800ea68:	4e66      	ldr	r6, [pc, #408]	; (800ec04 <_svfprintf_r+0x1264>)
 800ea6a:	2710      	movs	r7, #16
 800ea6c:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 800ea70:	2d10      	cmp	r5, #16
 800ea72:	f103 0301 	add.w	r3, r3, #1
 800ea76:	f104 0108 	add.w	r1, r4, #8
 800ea7a:	6026      	str	r6, [r4, #0]
 800ea7c:	f77f aecb 	ble.w	800e816 <_svfprintf_r+0xe76>
 800ea80:	3210      	adds	r2, #16
 800ea82:	2b07      	cmp	r3, #7
 800ea84:	6067      	str	r7, [r4, #4]
 800ea86:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 800ea8a:	dd08      	ble.n	800ea9e <_svfprintf_r+0x10fe>
 800ea8c:	aa26      	add	r2, sp, #152	; 0x98
 800ea8e:	4641      	mov	r1, r8
 800ea90:	9803      	ldr	r0, [sp, #12]
 800ea92:	f002 fb93 	bl	80111bc <__ssprint_r>
 800ea96:	2800      	cmp	r0, #0
 800ea98:	f040 816e 	bne.w	800ed78 <_svfprintf_r+0x13d8>
 800ea9c:	a929      	add	r1, sp, #164	; 0xa4
 800ea9e:	3d10      	subs	r5, #16
 800eaa0:	460c      	mov	r4, r1
 800eaa2:	e7e3      	b.n	800ea6c <_svfprintf_r+0x10cc>
 800eaa4:	aa26      	add	r2, sp, #152	; 0x98
 800eaa6:	4641      	mov	r1, r8
 800eaa8:	9803      	ldr	r0, [sp, #12]
 800eaaa:	f002 fb87 	bl	80111bc <__ssprint_r>
 800eaae:	2800      	cmp	r0, #0
 800eab0:	f040 8162 	bne.w	800ed78 <_svfprintf_r+0x13d8>
 800eab4:	ac29      	add	r4, sp, #164	; 0xa4
 800eab6:	e770      	b.n	800e99a <_svfprintf_r+0xffa>
 800eab8:	2010      	movs	r0, #16
 800eaba:	4402      	add	r2, r0
 800eabc:	2b07      	cmp	r3, #7
 800eabe:	6060      	str	r0, [r4, #4]
 800eac0:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 800eac4:	dd08      	ble.n	800ead8 <_svfprintf_r+0x1138>
 800eac6:	aa26      	add	r2, sp, #152	; 0x98
 800eac8:	4641      	mov	r1, r8
 800eaca:	9803      	ldr	r0, [sp, #12]
 800eacc:	f002 fb76 	bl	80111bc <__ssprint_r>
 800ead0:	2800      	cmp	r0, #0
 800ead2:	f040 8151 	bne.w	800ed78 <_svfprintf_r+0x13d8>
 800ead6:	a929      	add	r1, sp, #164	; 0xa4
 800ead8:	3d10      	subs	r5, #16
 800eada:	460c      	mov	r4, r1
 800eadc:	e763      	b.n	800e9a6 <_svfprintf_r+0x1006>
 800eade:	460c      	mov	r4, r1
 800eae0:	e77b      	b.n	800e9da <_svfprintf_r+0x103a>
 800eae2:	2f00      	cmp	r7, #0
 800eae4:	d049      	beq.n	800eb7a <_svfprintf_r+0x11da>
 800eae6:	3f01      	subs	r7, #1
 800eae8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800eaea:	6023      	str	r3, [r4, #0]
 800eaec:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800eaee:	6063      	str	r3, [r4, #4]
 800eaf0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800eaf2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800eaf4:	4413      	add	r3, r2
 800eaf6:	9328      	str	r3, [sp, #160]	; 0xa0
 800eaf8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800eafa:	3301      	adds	r3, #1
 800eafc:	2b07      	cmp	r3, #7
 800eafe:	9327      	str	r3, [sp, #156]	; 0x9c
 800eb00:	dc42      	bgt.n	800eb88 <_svfprintf_r+0x11e8>
 800eb02:	3408      	adds	r4, #8
 800eb04:	9b04      	ldr	r3, [sp, #16]
 800eb06:	445b      	add	r3, fp
 800eb08:	1b9a      	subs	r2, r3, r6
 800eb0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eb0c:	781b      	ldrb	r3, [r3, #0]
 800eb0e:	4293      	cmp	r3, r2
 800eb10:	bfa8      	it	ge
 800eb12:	4613      	movge	r3, r2
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	461d      	mov	r5, r3
 800eb18:	dd0a      	ble.n	800eb30 <_svfprintf_r+0x1190>
 800eb1a:	e9c4 6300 	strd	r6, r3, [r4]
 800eb1e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800eb20:	442b      	add	r3, r5
 800eb22:	9328      	str	r3, [sp, #160]	; 0xa0
 800eb24:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800eb26:	3301      	adds	r3, #1
 800eb28:	2b07      	cmp	r3, #7
 800eb2a:	9327      	str	r3, [sp, #156]	; 0x9c
 800eb2c:	dc36      	bgt.n	800eb9c <_svfprintf_r+0x11fc>
 800eb2e:	3408      	adds	r4, #8
 800eb30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eb32:	781b      	ldrb	r3, [r3, #0]
 800eb34:	2d00      	cmp	r5, #0
 800eb36:	bfac      	ite	ge
 800eb38:	1b5d      	subge	r5, r3, r5
 800eb3a:	461d      	movlt	r5, r3
 800eb3c:	2d00      	cmp	r5, #0
 800eb3e:	dd18      	ble.n	800eb72 <_svfprintf_r+0x11d2>
 800eb40:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	; 0x9c
 800eb44:	482f      	ldr	r0, [pc, #188]	; (800ec04 <_svfprintf_r+0x1264>)
 800eb46:	6020      	str	r0, [r4, #0]
 800eb48:	2d10      	cmp	r5, #16
 800eb4a:	f102 0201 	add.w	r2, r2, #1
 800eb4e:	f104 0108 	add.w	r1, r4, #8
 800eb52:	dc2d      	bgt.n	800ebb0 <_svfprintf_r+0x1210>
 800eb54:	442b      	add	r3, r5
 800eb56:	2a07      	cmp	r2, #7
 800eb58:	6065      	str	r5, [r4, #4]
 800eb5a:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 800eb5e:	dd3a      	ble.n	800ebd6 <_svfprintf_r+0x1236>
 800eb60:	aa26      	add	r2, sp, #152	; 0x98
 800eb62:	4641      	mov	r1, r8
 800eb64:	9803      	ldr	r0, [sp, #12]
 800eb66:	f002 fb29 	bl	80111bc <__ssprint_r>
 800eb6a:	2800      	cmp	r0, #0
 800eb6c:	f040 8104 	bne.w	800ed78 <_svfprintf_r+0x13d8>
 800eb70:	ac29      	add	r4, sp, #164	; 0xa4
 800eb72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eb74:	781b      	ldrb	r3, [r3, #0]
 800eb76:	441e      	add	r6, r3
 800eb78:	e733      	b.n	800e9e2 <_svfprintf_r+0x1042>
 800eb7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eb7c:	3b01      	subs	r3, #1
 800eb7e:	9309      	str	r3, [sp, #36]	; 0x24
 800eb80:	9b07      	ldr	r3, [sp, #28]
 800eb82:	3b01      	subs	r3, #1
 800eb84:	9307      	str	r3, [sp, #28]
 800eb86:	e7af      	b.n	800eae8 <_svfprintf_r+0x1148>
 800eb88:	aa26      	add	r2, sp, #152	; 0x98
 800eb8a:	4641      	mov	r1, r8
 800eb8c:	9803      	ldr	r0, [sp, #12]
 800eb8e:	f002 fb15 	bl	80111bc <__ssprint_r>
 800eb92:	2800      	cmp	r0, #0
 800eb94:	f040 80f0 	bne.w	800ed78 <_svfprintf_r+0x13d8>
 800eb98:	ac29      	add	r4, sp, #164	; 0xa4
 800eb9a:	e7b3      	b.n	800eb04 <_svfprintf_r+0x1164>
 800eb9c:	aa26      	add	r2, sp, #152	; 0x98
 800eb9e:	4641      	mov	r1, r8
 800eba0:	9803      	ldr	r0, [sp, #12]
 800eba2:	f002 fb0b 	bl	80111bc <__ssprint_r>
 800eba6:	2800      	cmp	r0, #0
 800eba8:	f040 80e6 	bne.w	800ed78 <_svfprintf_r+0x13d8>
 800ebac:	ac29      	add	r4, sp, #164	; 0xa4
 800ebae:	e7bf      	b.n	800eb30 <_svfprintf_r+0x1190>
 800ebb0:	2010      	movs	r0, #16
 800ebb2:	4403      	add	r3, r0
 800ebb4:	2a07      	cmp	r2, #7
 800ebb6:	6060      	str	r0, [r4, #4]
 800ebb8:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 800ebbc:	dd08      	ble.n	800ebd0 <_svfprintf_r+0x1230>
 800ebbe:	aa26      	add	r2, sp, #152	; 0x98
 800ebc0:	4641      	mov	r1, r8
 800ebc2:	9803      	ldr	r0, [sp, #12]
 800ebc4:	f002 fafa 	bl	80111bc <__ssprint_r>
 800ebc8:	2800      	cmp	r0, #0
 800ebca:	f040 80d5 	bne.w	800ed78 <_svfprintf_r+0x13d8>
 800ebce:	a929      	add	r1, sp, #164	; 0xa4
 800ebd0:	3d10      	subs	r5, #16
 800ebd2:	460c      	mov	r4, r1
 800ebd4:	e7b4      	b.n	800eb40 <_svfprintf_r+0x11a0>
 800ebd6:	460c      	mov	r4, r1
 800ebd8:	e7cb      	b.n	800eb72 <_svfprintf_r+0x11d2>
 800ebda:	aa26      	add	r2, sp, #152	; 0x98
 800ebdc:	4641      	mov	r1, r8
 800ebde:	9803      	ldr	r0, [sp, #12]
 800ebe0:	f002 faec 	bl	80111bc <__ssprint_r>
 800ebe4:	2800      	cmp	r0, #0
 800ebe6:	f040 80c7 	bne.w	800ed78 <_svfprintf_r+0x13d8>
 800ebea:	ac29      	add	r4, sp, #164	; 0xa4
 800ebec:	e719      	b.n	800ea22 <_svfprintf_r+0x1082>
 800ebee:	aa26      	add	r2, sp, #152	; 0x98
 800ebf0:	4641      	mov	r1, r8
 800ebf2:	9803      	ldr	r0, [sp, #12]
 800ebf4:	f002 fae2 	bl	80111bc <__ssprint_r>
 800ebf8:	2800      	cmp	r0, #0
 800ebfa:	f040 80bd 	bne.w	800ed78 <_svfprintf_r+0x13d8>
 800ebfe:	ac29      	add	r4, sp, #164	; 0xa4
 800ec00:	e727      	b.n	800ea52 <_svfprintf_r+0x10b2>
 800ec02:	bf00      	nop
 800ec04:	08011b84 	.word	0x08011b84
 800ec08:	9a04      	ldr	r2, [sp, #16]
 800ec0a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800ec0c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800ec0e:	2a01      	cmp	r2, #1
 800ec10:	f105 0501 	add.w	r5, r5, #1
 800ec14:	f103 0301 	add.w	r3, r3, #1
 800ec18:	f104 0608 	add.w	r6, r4, #8
 800ec1c:	dc02      	bgt.n	800ec24 <_svfprintf_r+0x1284>
 800ec1e:	f01a 0f01 	tst.w	sl, #1
 800ec22:	d07d      	beq.n	800ed20 <_svfprintf_r+0x1380>
 800ec24:	2201      	movs	r2, #1
 800ec26:	2b07      	cmp	r3, #7
 800ec28:	f8c4 b000 	str.w	fp, [r4]
 800ec2c:	6062      	str	r2, [r4, #4]
 800ec2e:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 800ec32:	dd08      	ble.n	800ec46 <_svfprintf_r+0x12a6>
 800ec34:	aa26      	add	r2, sp, #152	; 0x98
 800ec36:	4641      	mov	r1, r8
 800ec38:	9803      	ldr	r0, [sp, #12]
 800ec3a:	f002 fabf 	bl	80111bc <__ssprint_r>
 800ec3e:	2800      	cmp	r0, #0
 800ec40:	f040 809a 	bne.w	800ed78 <_svfprintf_r+0x13d8>
 800ec44:	ae29      	add	r6, sp, #164	; 0xa4
 800ec46:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800ec48:	6033      	str	r3, [r6, #0]
 800ec4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ec4c:	6073      	str	r3, [r6, #4]
 800ec4e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ec50:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800ec52:	4413      	add	r3, r2
 800ec54:	9328      	str	r3, [sp, #160]	; 0xa0
 800ec56:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800ec58:	3301      	adds	r3, #1
 800ec5a:	2b07      	cmp	r3, #7
 800ec5c:	9327      	str	r3, [sp, #156]	; 0x9c
 800ec5e:	dc31      	bgt.n	800ecc4 <_svfprintf_r+0x1324>
 800ec60:	3608      	adds	r6, #8
 800ec62:	9b04      	ldr	r3, [sp, #16]
 800ec64:	2200      	movs	r2, #0
 800ec66:	1e5c      	subs	r4, r3, #1
 800ec68:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ec6c:	2300      	movs	r3, #0
 800ec6e:	f7f1 ff3b 	bl	8000ae8 <__aeabi_dcmpeq>
 800ec72:	2800      	cmp	r0, #0
 800ec74:	d12f      	bne.n	800ecd6 <_svfprintf_r+0x1336>
 800ec76:	f10b 0301 	add.w	r3, fp, #1
 800ec7a:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 800ec7c:	9904      	ldr	r1, [sp, #16]
 800ec7e:	e9c6 3400 	strd	r3, r4, [r6]
 800ec82:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800ec84:	3201      	adds	r2, #1
 800ec86:	3b01      	subs	r3, #1
 800ec88:	440b      	add	r3, r1
 800ec8a:	2a07      	cmp	r2, #7
 800ec8c:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 800ec90:	dd4f      	ble.n	800ed32 <_svfprintf_r+0x1392>
 800ec92:	aa26      	add	r2, sp, #152	; 0x98
 800ec94:	4641      	mov	r1, r8
 800ec96:	9803      	ldr	r0, [sp, #12]
 800ec98:	f002 fa90 	bl	80111bc <__ssprint_r>
 800ec9c:	2800      	cmp	r0, #0
 800ec9e:	d16b      	bne.n	800ed78 <_svfprintf_r+0x13d8>
 800eca0:	ae29      	add	r6, sp, #164	; 0xa4
 800eca2:	ab22      	add	r3, sp, #136	; 0x88
 800eca4:	6033      	str	r3, [r6, #0]
 800eca6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800eca8:	6073      	str	r3, [r6, #4]
 800ecaa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ecac:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800ecae:	4413      	add	r3, r2
 800ecb0:	9328      	str	r3, [sp, #160]	; 0xa0
 800ecb2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800ecb4:	3301      	adds	r3, #1
 800ecb6:	2b07      	cmp	r3, #7
 800ecb8:	9327      	str	r3, [sp, #156]	; 0x9c
 800ecba:	f73f adb3 	bgt.w	800e824 <_svfprintf_r+0xe84>
 800ecbe:	f106 0408 	add.w	r4, r6, #8
 800ecc2:	e414      	b.n	800e4ee <_svfprintf_r+0xb4e>
 800ecc4:	aa26      	add	r2, sp, #152	; 0x98
 800ecc6:	4641      	mov	r1, r8
 800ecc8:	9803      	ldr	r0, [sp, #12]
 800ecca:	f002 fa77 	bl	80111bc <__ssprint_r>
 800ecce:	2800      	cmp	r0, #0
 800ecd0:	d152      	bne.n	800ed78 <_svfprintf_r+0x13d8>
 800ecd2:	ae29      	add	r6, sp, #164	; 0xa4
 800ecd4:	e7c5      	b.n	800ec62 <_svfprintf_r+0x12c2>
 800ecd6:	2c00      	cmp	r4, #0
 800ecd8:	dde3      	ble.n	800eca2 <_svfprintf_r+0x1302>
 800ecda:	4d3e      	ldr	r5, [pc, #248]	; (800edd4 <_svfprintf_r+0x1434>)
 800ecdc:	2710      	movs	r7, #16
 800ecde:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 800ece2:	2c10      	cmp	r4, #16
 800ece4:	f103 0301 	add.w	r3, r3, #1
 800ece8:	f106 0108 	add.w	r1, r6, #8
 800ecec:	6035      	str	r5, [r6, #0]
 800ecee:	dc07      	bgt.n	800ed00 <_svfprintf_r+0x1360>
 800ecf0:	6074      	str	r4, [r6, #4]
 800ecf2:	2b07      	cmp	r3, #7
 800ecf4:	4414      	add	r4, r2
 800ecf6:	e9cd 3427 	strd	r3, r4, [sp, #156]	; 0x9c
 800ecfa:	dcca      	bgt.n	800ec92 <_svfprintf_r+0x12f2>
 800ecfc:	460e      	mov	r6, r1
 800ecfe:	e7d0      	b.n	800eca2 <_svfprintf_r+0x1302>
 800ed00:	3210      	adds	r2, #16
 800ed02:	2b07      	cmp	r3, #7
 800ed04:	6077      	str	r7, [r6, #4]
 800ed06:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 800ed0a:	dd06      	ble.n	800ed1a <_svfprintf_r+0x137a>
 800ed0c:	aa26      	add	r2, sp, #152	; 0x98
 800ed0e:	4641      	mov	r1, r8
 800ed10:	9803      	ldr	r0, [sp, #12]
 800ed12:	f002 fa53 	bl	80111bc <__ssprint_r>
 800ed16:	bb78      	cbnz	r0, 800ed78 <_svfprintf_r+0x13d8>
 800ed18:	a929      	add	r1, sp, #164	; 0xa4
 800ed1a:	3c10      	subs	r4, #16
 800ed1c:	460e      	mov	r6, r1
 800ed1e:	e7de      	b.n	800ecde <_svfprintf_r+0x133e>
 800ed20:	2201      	movs	r2, #1
 800ed22:	2b07      	cmp	r3, #7
 800ed24:	f8c4 b000 	str.w	fp, [r4]
 800ed28:	6062      	str	r2, [r4, #4]
 800ed2a:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 800ed2e:	ddb8      	ble.n	800eca2 <_svfprintf_r+0x1302>
 800ed30:	e7af      	b.n	800ec92 <_svfprintf_r+0x12f2>
 800ed32:	3608      	adds	r6, #8
 800ed34:	e7b5      	b.n	800eca2 <_svfprintf_r+0x1302>
 800ed36:	460c      	mov	r4, r1
 800ed38:	f7ff bbd9 	b.w	800e4ee <_svfprintf_r+0xb4e>
 800ed3c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ed3e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800ed40:	1a9d      	subs	r5, r3, r2
 800ed42:	2d00      	cmp	r5, #0
 800ed44:	f77f abd7 	ble.w	800e4f6 <_svfprintf_r+0xb56>
 800ed48:	4e23      	ldr	r6, [pc, #140]	; (800edd8 <_svfprintf_r+0x1438>)
 800ed4a:	2710      	movs	r7, #16
 800ed4c:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 800ed50:	2d10      	cmp	r5, #16
 800ed52:	f103 0301 	add.w	r3, r3, #1
 800ed56:	6026      	str	r6, [r4, #0]
 800ed58:	dc18      	bgt.n	800ed8c <_svfprintf_r+0x13ec>
 800ed5a:	6065      	str	r5, [r4, #4]
 800ed5c:	2b07      	cmp	r3, #7
 800ed5e:	4415      	add	r5, r2
 800ed60:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 800ed64:	f77f abc7 	ble.w	800e4f6 <_svfprintf_r+0xb56>
 800ed68:	aa26      	add	r2, sp, #152	; 0x98
 800ed6a:	4641      	mov	r1, r8
 800ed6c:	9803      	ldr	r0, [sp, #12]
 800ed6e:	f002 fa25 	bl	80111bc <__ssprint_r>
 800ed72:	2800      	cmp	r0, #0
 800ed74:	f43f abbf 	beq.w	800e4f6 <_svfprintf_r+0xb56>
 800ed78:	f1b9 0f00 	cmp.w	r9, #0
 800ed7c:	f43f a8a8 	beq.w	800ded0 <_svfprintf_r+0x530>
 800ed80:	4649      	mov	r1, r9
 800ed82:	9803      	ldr	r0, [sp, #12]
 800ed84:	f001 f826 	bl	800fdd4 <_free_r>
 800ed88:	f7ff b8a2 	b.w	800ded0 <_svfprintf_r+0x530>
 800ed8c:	3210      	adds	r2, #16
 800ed8e:	2b07      	cmp	r3, #7
 800ed90:	6067      	str	r7, [r4, #4]
 800ed92:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 800ed96:	dc02      	bgt.n	800ed9e <_svfprintf_r+0x13fe>
 800ed98:	3408      	adds	r4, #8
 800ed9a:	3d10      	subs	r5, #16
 800ed9c:	e7d6      	b.n	800ed4c <_svfprintf_r+0x13ac>
 800ed9e:	aa26      	add	r2, sp, #152	; 0x98
 800eda0:	4641      	mov	r1, r8
 800eda2:	9803      	ldr	r0, [sp, #12]
 800eda4:	f002 fa0a 	bl	80111bc <__ssprint_r>
 800eda8:	2800      	cmp	r0, #0
 800edaa:	d1e5      	bne.n	800ed78 <_svfprintf_r+0x13d8>
 800edac:	ac29      	add	r4, sp, #164	; 0xa4
 800edae:	e7f4      	b.n	800ed9a <_svfprintf_r+0x13fa>
 800edb0:	4649      	mov	r1, r9
 800edb2:	9803      	ldr	r0, [sp, #12]
 800edb4:	f001 f80e 	bl	800fdd4 <_free_r>
 800edb8:	f7ff bbb5 	b.w	800e526 <_svfprintf_r+0xb86>
 800edbc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	f43f a886 	beq.w	800ded0 <_svfprintf_r+0x530>
 800edc4:	aa26      	add	r2, sp, #152	; 0x98
 800edc6:	4641      	mov	r1, r8
 800edc8:	9803      	ldr	r0, [sp, #12]
 800edca:	f002 f9f7 	bl	80111bc <__ssprint_r>
 800edce:	f7ff b87f 	b.w	800ded0 <_svfprintf_r+0x530>
 800edd2:	bf00      	nop
 800edd4:	08011b84 	.word	0x08011b84
 800edd8:	08011b74 	.word	0x08011b74

0800eddc <sysconf>:
 800eddc:	2808      	cmp	r0, #8
 800edde:	b508      	push	{r3, lr}
 800ede0:	d006      	beq.n	800edf0 <sysconf+0x14>
 800ede2:	f7fd fcd7 	bl	800c794 <__errno>
 800ede6:	2316      	movs	r3, #22
 800ede8:	6003      	str	r3, [r0, #0]
 800edea:	f04f 30ff 	mov.w	r0, #4294967295
 800edee:	bd08      	pop	{r3, pc}
 800edf0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800edf4:	e7fb      	b.n	800edee <sysconf+0x12>

0800edf6 <_times_r>:
 800edf6:	4608      	mov	r0, r1
 800edf8:	f7f4 bb2e 	b.w	8003458 <_times>

0800edfc <register_fini>:
 800edfc:	4b02      	ldr	r3, [pc, #8]	; (800ee08 <register_fini+0xc>)
 800edfe:	b113      	cbz	r3, 800ee06 <register_fini+0xa>
 800ee00:	4802      	ldr	r0, [pc, #8]	; (800ee0c <register_fini+0x10>)
 800ee02:	f000 b805 	b.w	800ee10 <atexit>
 800ee06:	4770      	bx	lr
 800ee08:	00000000 	.word	0x00000000
 800ee0c:	0800fd05 	.word	0x0800fd05

0800ee10 <atexit>:
 800ee10:	2300      	movs	r3, #0
 800ee12:	4601      	mov	r1, r0
 800ee14:	461a      	mov	r2, r3
 800ee16:	4618      	mov	r0, r3
 800ee18:	f002 ba56 	b.w	80112c8 <__register_exitproc>

0800ee1c <quorem>:
 800ee1c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee20:	6903      	ldr	r3, [r0, #16]
 800ee22:	690c      	ldr	r4, [r1, #16]
 800ee24:	42a3      	cmp	r3, r4
 800ee26:	4680      	mov	r8, r0
 800ee28:	f2c0 8082 	blt.w	800ef30 <quorem+0x114>
 800ee2c:	3c01      	subs	r4, #1
 800ee2e:	f101 0714 	add.w	r7, r1, #20
 800ee32:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800ee36:	f100 0614 	add.w	r6, r0, #20
 800ee3a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800ee3e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800ee42:	eb06 030c 	add.w	r3, r6, ip
 800ee46:	3501      	adds	r5, #1
 800ee48:	eb07 090c 	add.w	r9, r7, ip
 800ee4c:	9301      	str	r3, [sp, #4]
 800ee4e:	fbb0 f5f5 	udiv	r5, r0, r5
 800ee52:	b395      	cbz	r5, 800eeba <quorem+0x9e>
 800ee54:	f04f 0a00 	mov.w	sl, #0
 800ee58:	4638      	mov	r0, r7
 800ee5a:	46b6      	mov	lr, r6
 800ee5c:	46d3      	mov	fp, sl
 800ee5e:	f850 2b04 	ldr.w	r2, [r0], #4
 800ee62:	b293      	uxth	r3, r2
 800ee64:	fb05 a303 	mla	r3, r5, r3, sl
 800ee68:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ee6c:	b29b      	uxth	r3, r3
 800ee6e:	ebab 0303 	sub.w	r3, fp, r3
 800ee72:	0c12      	lsrs	r2, r2, #16
 800ee74:	f8de b000 	ldr.w	fp, [lr]
 800ee78:	fb05 a202 	mla	r2, r5, r2, sl
 800ee7c:	fa13 f38b 	uxtah	r3, r3, fp
 800ee80:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800ee84:	fa1f fb82 	uxth.w	fp, r2
 800ee88:	f8de 2000 	ldr.w	r2, [lr]
 800ee8c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800ee90:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ee94:	b29b      	uxth	r3, r3
 800ee96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ee9a:	4581      	cmp	r9, r0
 800ee9c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800eea0:	f84e 3b04 	str.w	r3, [lr], #4
 800eea4:	d2db      	bcs.n	800ee5e <quorem+0x42>
 800eea6:	f856 300c 	ldr.w	r3, [r6, ip]
 800eeaa:	b933      	cbnz	r3, 800eeba <quorem+0x9e>
 800eeac:	9b01      	ldr	r3, [sp, #4]
 800eeae:	3b04      	subs	r3, #4
 800eeb0:	429e      	cmp	r6, r3
 800eeb2:	461a      	mov	r2, r3
 800eeb4:	d330      	bcc.n	800ef18 <quorem+0xfc>
 800eeb6:	f8c8 4010 	str.w	r4, [r8, #16]
 800eeba:	4640      	mov	r0, r8
 800eebc:	f001 fdc4 	bl	8010a48 <__mcmp>
 800eec0:	2800      	cmp	r0, #0
 800eec2:	db25      	blt.n	800ef10 <quorem+0xf4>
 800eec4:	3501      	adds	r5, #1
 800eec6:	4630      	mov	r0, r6
 800eec8:	f04f 0c00 	mov.w	ip, #0
 800eecc:	f857 2b04 	ldr.w	r2, [r7], #4
 800eed0:	f8d0 e000 	ldr.w	lr, [r0]
 800eed4:	b293      	uxth	r3, r2
 800eed6:	ebac 0303 	sub.w	r3, ip, r3
 800eeda:	0c12      	lsrs	r2, r2, #16
 800eedc:	fa13 f38e 	uxtah	r3, r3, lr
 800eee0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800eee4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800eee8:	b29b      	uxth	r3, r3
 800eeea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800eeee:	45b9      	cmp	r9, r7
 800eef0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800eef4:	f840 3b04 	str.w	r3, [r0], #4
 800eef8:	d2e8      	bcs.n	800eecc <quorem+0xb0>
 800eefa:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800eefe:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800ef02:	b92a      	cbnz	r2, 800ef10 <quorem+0xf4>
 800ef04:	3b04      	subs	r3, #4
 800ef06:	429e      	cmp	r6, r3
 800ef08:	461a      	mov	r2, r3
 800ef0a:	d30b      	bcc.n	800ef24 <quorem+0x108>
 800ef0c:	f8c8 4010 	str.w	r4, [r8, #16]
 800ef10:	4628      	mov	r0, r5
 800ef12:	b003      	add	sp, #12
 800ef14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef18:	6812      	ldr	r2, [r2, #0]
 800ef1a:	3b04      	subs	r3, #4
 800ef1c:	2a00      	cmp	r2, #0
 800ef1e:	d1ca      	bne.n	800eeb6 <quorem+0x9a>
 800ef20:	3c01      	subs	r4, #1
 800ef22:	e7c5      	b.n	800eeb0 <quorem+0x94>
 800ef24:	6812      	ldr	r2, [r2, #0]
 800ef26:	3b04      	subs	r3, #4
 800ef28:	2a00      	cmp	r2, #0
 800ef2a:	d1ef      	bne.n	800ef0c <quorem+0xf0>
 800ef2c:	3c01      	subs	r4, #1
 800ef2e:	e7ea      	b.n	800ef06 <quorem+0xea>
 800ef30:	2000      	movs	r0, #0
 800ef32:	e7ee      	b.n	800ef12 <quorem+0xf6>
 800ef34:	0000      	movs	r0, r0
	...

0800ef38 <_dtoa_r>:
 800ef38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef3c:	b097      	sub	sp, #92	; 0x5c
 800ef3e:	ec57 6b10 	vmov	r6, r7, d0
 800ef42:	9106      	str	r1, [sp, #24]
 800ef44:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800ef46:	920b      	str	r2, [sp, #44]	; 0x2c
 800ef48:	4604      	mov	r4, r0
 800ef4a:	9312      	str	r3, [sp, #72]	; 0x48
 800ef4c:	9d20      	ldr	r5, [sp, #128]	; 0x80
 800ef4e:	e9cd 6700 	strd	r6, r7, [sp]
 800ef52:	b141      	cbz	r1, 800ef66 <_dtoa_r+0x2e>
 800ef54:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ef56:	604a      	str	r2, [r1, #4]
 800ef58:	2301      	movs	r3, #1
 800ef5a:	4093      	lsls	r3, r2
 800ef5c:	608b      	str	r3, [r1, #8]
 800ef5e:	f001 fb6f 	bl	8010640 <_Bfree>
 800ef62:	2300      	movs	r3, #0
 800ef64:	6423      	str	r3, [r4, #64]	; 0x40
 800ef66:	1e3b      	subs	r3, r7, #0
 800ef68:	bfb9      	ittee	lt
 800ef6a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800ef6e:	9301      	strlt	r3, [sp, #4]
 800ef70:	2300      	movge	r3, #0
 800ef72:	602b      	strge	r3, [r5, #0]
 800ef74:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800ef78:	4baf      	ldr	r3, [pc, #700]	; (800f238 <_dtoa_r+0x300>)
 800ef7a:	bfbc      	itt	lt
 800ef7c:	2201      	movlt	r2, #1
 800ef7e:	602a      	strlt	r2, [r5, #0]
 800ef80:	ea33 0308 	bics.w	r3, r3, r8
 800ef84:	d116      	bne.n	800efb4 <_dtoa_r+0x7c>
 800ef86:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ef88:	f242 730f 	movw	r3, #9999	; 0x270f
 800ef8c:	6013      	str	r3, [r2, #0]
 800ef8e:	9b00      	ldr	r3, [sp, #0]
 800ef90:	b923      	cbnz	r3, 800ef9c <_dtoa_r+0x64>
 800ef92:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800ef96:	2800      	cmp	r0, #0
 800ef98:	f000 8543 	beq.w	800fa22 <_dtoa_r+0xaea>
 800ef9c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ef9e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800f24c <_dtoa_r+0x314>
 800efa2:	b11b      	cbz	r3, 800efac <_dtoa_r+0x74>
 800efa4:	f10b 0303 	add.w	r3, fp, #3
 800efa8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800efaa:	6013      	str	r3, [r2, #0]
 800efac:	4658      	mov	r0, fp
 800efae:	b017      	add	sp, #92	; 0x5c
 800efb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800efb4:	e9dd 6700 	ldrd	r6, r7, [sp]
 800efb8:	2200      	movs	r2, #0
 800efba:	2300      	movs	r3, #0
 800efbc:	4630      	mov	r0, r6
 800efbe:	4639      	mov	r1, r7
 800efc0:	f7f1 fd92 	bl	8000ae8 <__aeabi_dcmpeq>
 800efc4:	4681      	mov	r9, r0
 800efc6:	b160      	cbz	r0, 800efe2 <_dtoa_r+0xaa>
 800efc8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800efca:	2301      	movs	r3, #1
 800efcc:	6013      	str	r3, [r2, #0]
 800efce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800efd0:	2b00      	cmp	r3, #0
 800efd2:	f000 8522 	beq.w	800fa1a <_dtoa_r+0xae2>
 800efd6:	4b99      	ldr	r3, [pc, #612]	; (800f23c <_dtoa_r+0x304>)
 800efd8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800efda:	f103 3bff 	add.w	fp, r3, #4294967295
 800efde:	6013      	str	r3, [r2, #0]
 800efe0:	e7e4      	b.n	800efac <_dtoa_r+0x74>
 800efe2:	aa14      	add	r2, sp, #80	; 0x50
 800efe4:	a915      	add	r1, sp, #84	; 0x54
 800efe6:	ec47 6b10 	vmov	d0, r6, r7
 800efea:	4620      	mov	r0, r4
 800efec:	f001 fe1a 	bl	8010c24 <__d2b>
 800eff0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800eff4:	9004      	str	r0, [sp, #16]
 800eff6:	2d00      	cmp	r5, #0
 800eff8:	d07c      	beq.n	800f0f4 <_dtoa_r+0x1bc>
 800effa:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800effe:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800f002:	46b2      	mov	sl, r6
 800f004:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800f008:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800f00c:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800f010:	2200      	movs	r2, #0
 800f012:	4b8b      	ldr	r3, [pc, #556]	; (800f240 <_dtoa_r+0x308>)
 800f014:	4650      	mov	r0, sl
 800f016:	4659      	mov	r1, fp
 800f018:	f7f1 f946 	bl	80002a8 <__aeabi_dsub>
 800f01c:	a380      	add	r3, pc, #512	; (adr r3, 800f220 <_dtoa_r+0x2e8>)
 800f01e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f022:	f7f1 faf9 	bl	8000618 <__aeabi_dmul>
 800f026:	a380      	add	r3, pc, #512	; (adr r3, 800f228 <_dtoa_r+0x2f0>)
 800f028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f02c:	f7f1 f93e 	bl	80002ac <__adddf3>
 800f030:	4606      	mov	r6, r0
 800f032:	4628      	mov	r0, r5
 800f034:	460f      	mov	r7, r1
 800f036:	f7f1 fa85 	bl	8000544 <__aeabi_i2d>
 800f03a:	a37d      	add	r3, pc, #500	; (adr r3, 800f230 <_dtoa_r+0x2f8>)
 800f03c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f040:	f7f1 faea 	bl	8000618 <__aeabi_dmul>
 800f044:	4602      	mov	r2, r0
 800f046:	460b      	mov	r3, r1
 800f048:	4630      	mov	r0, r6
 800f04a:	4639      	mov	r1, r7
 800f04c:	f7f1 f92e 	bl	80002ac <__adddf3>
 800f050:	4606      	mov	r6, r0
 800f052:	460f      	mov	r7, r1
 800f054:	f7f1 fd90 	bl	8000b78 <__aeabi_d2iz>
 800f058:	2200      	movs	r2, #0
 800f05a:	4682      	mov	sl, r0
 800f05c:	2300      	movs	r3, #0
 800f05e:	4630      	mov	r0, r6
 800f060:	4639      	mov	r1, r7
 800f062:	f7f1 fd4b 	bl	8000afc <__aeabi_dcmplt>
 800f066:	b148      	cbz	r0, 800f07c <_dtoa_r+0x144>
 800f068:	4650      	mov	r0, sl
 800f06a:	f7f1 fa6b 	bl	8000544 <__aeabi_i2d>
 800f06e:	4632      	mov	r2, r6
 800f070:	463b      	mov	r3, r7
 800f072:	f7f1 fd39 	bl	8000ae8 <__aeabi_dcmpeq>
 800f076:	b908      	cbnz	r0, 800f07c <_dtoa_r+0x144>
 800f078:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f07c:	f1ba 0f16 	cmp.w	sl, #22
 800f080:	d859      	bhi.n	800f136 <_dtoa_r+0x1fe>
 800f082:	4970      	ldr	r1, [pc, #448]	; (800f244 <_dtoa_r+0x30c>)
 800f084:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800f088:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f08c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f090:	f7f1 fd52 	bl	8000b38 <__aeabi_dcmpgt>
 800f094:	2800      	cmp	r0, #0
 800f096:	d050      	beq.n	800f13a <_dtoa_r+0x202>
 800f098:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f09c:	2300      	movs	r3, #0
 800f09e:	930f      	str	r3, [sp, #60]	; 0x3c
 800f0a0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f0a2:	1b5d      	subs	r5, r3, r5
 800f0a4:	f1b5 0801 	subs.w	r8, r5, #1
 800f0a8:	bf49      	itett	mi
 800f0aa:	f1c5 0301 	rsbmi	r3, r5, #1
 800f0ae:	2300      	movpl	r3, #0
 800f0b0:	9305      	strmi	r3, [sp, #20]
 800f0b2:	f04f 0800 	movmi.w	r8, #0
 800f0b6:	bf58      	it	pl
 800f0b8:	9305      	strpl	r3, [sp, #20]
 800f0ba:	f1ba 0f00 	cmp.w	sl, #0
 800f0be:	db3e      	blt.n	800f13e <_dtoa_r+0x206>
 800f0c0:	2300      	movs	r3, #0
 800f0c2:	44d0      	add	r8, sl
 800f0c4:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800f0c8:	9307      	str	r3, [sp, #28]
 800f0ca:	9b06      	ldr	r3, [sp, #24]
 800f0cc:	2b09      	cmp	r3, #9
 800f0ce:	f200 808d 	bhi.w	800f1ec <_dtoa_r+0x2b4>
 800f0d2:	2b05      	cmp	r3, #5
 800f0d4:	bfc4      	itt	gt
 800f0d6:	3b04      	subgt	r3, #4
 800f0d8:	9306      	strgt	r3, [sp, #24]
 800f0da:	9b06      	ldr	r3, [sp, #24]
 800f0dc:	f1a3 0302 	sub.w	r3, r3, #2
 800f0e0:	bfcc      	ite	gt
 800f0e2:	2500      	movgt	r5, #0
 800f0e4:	2501      	movle	r5, #1
 800f0e6:	2b03      	cmp	r3, #3
 800f0e8:	f200 808c 	bhi.w	800f204 <_dtoa_r+0x2cc>
 800f0ec:	e8df f003 	tbb	[pc, r3]
 800f0f0:	6e317c7a 	.word	0x6e317c7a
 800f0f4:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800f0f8:	441d      	add	r5, r3
 800f0fa:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800f0fe:	2820      	cmp	r0, #32
 800f100:	dd13      	ble.n	800f12a <_dtoa_r+0x1f2>
 800f102:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800f106:	9b00      	ldr	r3, [sp, #0]
 800f108:	fa08 f800 	lsl.w	r8, r8, r0
 800f10c:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800f110:	fa23 f000 	lsr.w	r0, r3, r0
 800f114:	ea48 0000 	orr.w	r0, r8, r0
 800f118:	f7f1 fa04 	bl	8000524 <__aeabi_ui2d>
 800f11c:	2301      	movs	r3, #1
 800f11e:	4682      	mov	sl, r0
 800f120:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800f124:	3d01      	subs	r5, #1
 800f126:	9313      	str	r3, [sp, #76]	; 0x4c
 800f128:	e772      	b.n	800f010 <_dtoa_r+0xd8>
 800f12a:	9b00      	ldr	r3, [sp, #0]
 800f12c:	f1c0 0020 	rsb	r0, r0, #32
 800f130:	fa03 f000 	lsl.w	r0, r3, r0
 800f134:	e7f0      	b.n	800f118 <_dtoa_r+0x1e0>
 800f136:	2301      	movs	r3, #1
 800f138:	e7b1      	b.n	800f09e <_dtoa_r+0x166>
 800f13a:	900f      	str	r0, [sp, #60]	; 0x3c
 800f13c:	e7b0      	b.n	800f0a0 <_dtoa_r+0x168>
 800f13e:	9b05      	ldr	r3, [sp, #20]
 800f140:	eba3 030a 	sub.w	r3, r3, sl
 800f144:	9305      	str	r3, [sp, #20]
 800f146:	f1ca 0300 	rsb	r3, sl, #0
 800f14a:	9307      	str	r3, [sp, #28]
 800f14c:	2300      	movs	r3, #0
 800f14e:	930e      	str	r3, [sp, #56]	; 0x38
 800f150:	e7bb      	b.n	800f0ca <_dtoa_r+0x192>
 800f152:	2301      	movs	r3, #1
 800f154:	930a      	str	r3, [sp, #40]	; 0x28
 800f156:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f158:	2b00      	cmp	r3, #0
 800f15a:	dd56      	ble.n	800f20a <_dtoa_r+0x2d2>
 800f15c:	9302      	str	r3, [sp, #8]
 800f15e:	4699      	mov	r9, r3
 800f160:	2200      	movs	r2, #0
 800f162:	6462      	str	r2, [r4, #68]	; 0x44
 800f164:	2204      	movs	r2, #4
 800f166:	f102 0014 	add.w	r0, r2, #20
 800f16a:	4298      	cmp	r0, r3
 800f16c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800f16e:	d951      	bls.n	800f214 <_dtoa_r+0x2dc>
 800f170:	4620      	mov	r0, r4
 800f172:	f001 fa40 	bl	80105f6 <_Balloc>
 800f176:	f1b9 0f0e 	cmp.w	r9, #14
 800f17a:	4683      	mov	fp, r0
 800f17c:	6420      	str	r0, [r4, #64]	; 0x40
 800f17e:	f200 80e8 	bhi.w	800f352 <_dtoa_r+0x41a>
 800f182:	2d00      	cmp	r5, #0
 800f184:	f000 80e5 	beq.w	800f352 <_dtoa_r+0x41a>
 800f188:	ed9d 7b00 	vldr	d7, [sp]
 800f18c:	f1ba 0f00 	cmp.w	sl, #0
 800f190:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800f194:	dd76      	ble.n	800f284 <_dtoa_r+0x34c>
 800f196:	4a2b      	ldr	r2, [pc, #172]	; (800f244 <_dtoa_r+0x30c>)
 800f198:	f00a 030f 	and.w	r3, sl, #15
 800f19c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800f1a0:	ed93 7b00 	vldr	d7, [r3]
 800f1a4:	ea4f 162a 	mov.w	r6, sl, asr #4
 800f1a8:	06f0      	lsls	r0, r6, #27
 800f1aa:	ed8d 7b08 	vstr	d7, [sp, #32]
 800f1ae:	d567      	bpl.n	800f280 <_dtoa_r+0x348>
 800f1b0:	4b25      	ldr	r3, [pc, #148]	; (800f248 <_dtoa_r+0x310>)
 800f1b2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800f1b6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f1ba:	f7f1 fb57 	bl	800086c <__aeabi_ddiv>
 800f1be:	e9cd 0100 	strd	r0, r1, [sp]
 800f1c2:	f006 060f 	and.w	r6, r6, #15
 800f1c6:	2503      	movs	r5, #3
 800f1c8:	4f1f      	ldr	r7, [pc, #124]	; (800f248 <_dtoa_r+0x310>)
 800f1ca:	e04e      	b.n	800f26a <_dtoa_r+0x332>
 800f1cc:	2301      	movs	r3, #1
 800f1ce:	930a      	str	r3, [sp, #40]	; 0x28
 800f1d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f1d2:	4453      	add	r3, sl
 800f1d4:	f103 0901 	add.w	r9, r3, #1
 800f1d8:	9302      	str	r3, [sp, #8]
 800f1da:	464b      	mov	r3, r9
 800f1dc:	2b01      	cmp	r3, #1
 800f1de:	bfb8      	it	lt
 800f1e0:	2301      	movlt	r3, #1
 800f1e2:	e7bd      	b.n	800f160 <_dtoa_r+0x228>
 800f1e4:	2300      	movs	r3, #0
 800f1e6:	e7b5      	b.n	800f154 <_dtoa_r+0x21c>
 800f1e8:	2300      	movs	r3, #0
 800f1ea:	e7f0      	b.n	800f1ce <_dtoa_r+0x296>
 800f1ec:	2501      	movs	r5, #1
 800f1ee:	2300      	movs	r3, #0
 800f1f0:	9306      	str	r3, [sp, #24]
 800f1f2:	950a      	str	r5, [sp, #40]	; 0x28
 800f1f4:	f04f 33ff 	mov.w	r3, #4294967295
 800f1f8:	9302      	str	r3, [sp, #8]
 800f1fa:	4699      	mov	r9, r3
 800f1fc:	2200      	movs	r2, #0
 800f1fe:	2312      	movs	r3, #18
 800f200:	920b      	str	r2, [sp, #44]	; 0x2c
 800f202:	e7ad      	b.n	800f160 <_dtoa_r+0x228>
 800f204:	2301      	movs	r3, #1
 800f206:	930a      	str	r3, [sp, #40]	; 0x28
 800f208:	e7f4      	b.n	800f1f4 <_dtoa_r+0x2bc>
 800f20a:	2301      	movs	r3, #1
 800f20c:	9302      	str	r3, [sp, #8]
 800f20e:	4699      	mov	r9, r3
 800f210:	461a      	mov	r2, r3
 800f212:	e7f5      	b.n	800f200 <_dtoa_r+0x2c8>
 800f214:	3101      	adds	r1, #1
 800f216:	6461      	str	r1, [r4, #68]	; 0x44
 800f218:	0052      	lsls	r2, r2, #1
 800f21a:	e7a4      	b.n	800f166 <_dtoa_r+0x22e>
 800f21c:	f3af 8000 	nop.w
 800f220:	636f4361 	.word	0x636f4361
 800f224:	3fd287a7 	.word	0x3fd287a7
 800f228:	8b60c8b3 	.word	0x8b60c8b3
 800f22c:	3fc68a28 	.word	0x3fc68a28
 800f230:	509f79fb 	.word	0x509f79fb
 800f234:	3fd34413 	.word	0x3fd34413
 800f238:	7ff00000 	.word	0x7ff00000
 800f23c:	08011b73 	.word	0x08011b73
 800f240:	3ff80000 	.word	0x3ff80000
 800f244:	08011bd8 	.word	0x08011bd8
 800f248:	08011bb0 	.word	0x08011bb0
 800f24c:	08011b9d 	.word	0x08011b9d
 800f250:	07f1      	lsls	r1, r6, #31
 800f252:	d508      	bpl.n	800f266 <_dtoa_r+0x32e>
 800f254:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800f258:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f25c:	f7f1 f9dc 	bl	8000618 <__aeabi_dmul>
 800f260:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800f264:	3501      	adds	r5, #1
 800f266:	1076      	asrs	r6, r6, #1
 800f268:	3708      	adds	r7, #8
 800f26a:	2e00      	cmp	r6, #0
 800f26c:	d1f0      	bne.n	800f250 <_dtoa_r+0x318>
 800f26e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800f272:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f276:	f7f1 faf9 	bl	800086c <__aeabi_ddiv>
 800f27a:	e9cd 0100 	strd	r0, r1, [sp]
 800f27e:	e01a      	b.n	800f2b6 <_dtoa_r+0x37e>
 800f280:	2502      	movs	r5, #2
 800f282:	e7a1      	b.n	800f1c8 <_dtoa_r+0x290>
 800f284:	f000 80a0 	beq.w	800f3c8 <_dtoa_r+0x490>
 800f288:	f1ca 0600 	rsb	r6, sl, #0
 800f28c:	4b9f      	ldr	r3, [pc, #636]	; (800f50c <_dtoa_r+0x5d4>)
 800f28e:	4fa0      	ldr	r7, [pc, #640]	; (800f510 <_dtoa_r+0x5d8>)
 800f290:	f006 020f 	and.w	r2, r6, #15
 800f294:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f29c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800f2a0:	f7f1 f9ba 	bl	8000618 <__aeabi_dmul>
 800f2a4:	e9cd 0100 	strd	r0, r1, [sp]
 800f2a8:	1136      	asrs	r6, r6, #4
 800f2aa:	2300      	movs	r3, #0
 800f2ac:	2502      	movs	r5, #2
 800f2ae:	2e00      	cmp	r6, #0
 800f2b0:	d17f      	bne.n	800f3b2 <_dtoa_r+0x47a>
 800f2b2:	2b00      	cmp	r3, #0
 800f2b4:	d1e1      	bne.n	800f27a <_dtoa_r+0x342>
 800f2b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	f000 8087 	beq.w	800f3cc <_dtoa_r+0x494>
 800f2be:	e9dd 6700 	ldrd	r6, r7, [sp]
 800f2c2:	2200      	movs	r2, #0
 800f2c4:	4b93      	ldr	r3, [pc, #588]	; (800f514 <_dtoa_r+0x5dc>)
 800f2c6:	4630      	mov	r0, r6
 800f2c8:	4639      	mov	r1, r7
 800f2ca:	f7f1 fc17 	bl	8000afc <__aeabi_dcmplt>
 800f2ce:	2800      	cmp	r0, #0
 800f2d0:	d07c      	beq.n	800f3cc <_dtoa_r+0x494>
 800f2d2:	f1b9 0f00 	cmp.w	r9, #0
 800f2d6:	d079      	beq.n	800f3cc <_dtoa_r+0x494>
 800f2d8:	9b02      	ldr	r3, [sp, #8]
 800f2da:	2b00      	cmp	r3, #0
 800f2dc:	dd35      	ble.n	800f34a <_dtoa_r+0x412>
 800f2de:	f10a 33ff 	add.w	r3, sl, #4294967295
 800f2e2:	9308      	str	r3, [sp, #32]
 800f2e4:	4639      	mov	r1, r7
 800f2e6:	2200      	movs	r2, #0
 800f2e8:	4b8b      	ldr	r3, [pc, #556]	; (800f518 <_dtoa_r+0x5e0>)
 800f2ea:	4630      	mov	r0, r6
 800f2ec:	f7f1 f994 	bl	8000618 <__aeabi_dmul>
 800f2f0:	e9cd 0100 	strd	r0, r1, [sp]
 800f2f4:	9f02      	ldr	r7, [sp, #8]
 800f2f6:	3501      	adds	r5, #1
 800f2f8:	4628      	mov	r0, r5
 800f2fa:	f7f1 f923 	bl	8000544 <__aeabi_i2d>
 800f2fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f302:	f7f1 f989 	bl	8000618 <__aeabi_dmul>
 800f306:	2200      	movs	r2, #0
 800f308:	4b84      	ldr	r3, [pc, #528]	; (800f51c <_dtoa_r+0x5e4>)
 800f30a:	f7f0 ffcf 	bl	80002ac <__adddf3>
 800f30e:	4605      	mov	r5, r0
 800f310:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800f314:	2f00      	cmp	r7, #0
 800f316:	d15d      	bne.n	800f3d4 <_dtoa_r+0x49c>
 800f318:	2200      	movs	r2, #0
 800f31a:	4b81      	ldr	r3, [pc, #516]	; (800f520 <_dtoa_r+0x5e8>)
 800f31c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f320:	f7f0 ffc2 	bl	80002a8 <__aeabi_dsub>
 800f324:	462a      	mov	r2, r5
 800f326:	4633      	mov	r3, r6
 800f328:	e9cd 0100 	strd	r0, r1, [sp]
 800f32c:	f7f1 fc04 	bl	8000b38 <__aeabi_dcmpgt>
 800f330:	2800      	cmp	r0, #0
 800f332:	f040 8288 	bne.w	800f846 <_dtoa_r+0x90e>
 800f336:	462a      	mov	r2, r5
 800f338:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800f33c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f340:	f7f1 fbdc 	bl	8000afc <__aeabi_dcmplt>
 800f344:	2800      	cmp	r0, #0
 800f346:	f040 827c 	bne.w	800f842 <_dtoa_r+0x90a>
 800f34a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800f34e:	e9cd 2300 	strd	r2, r3, [sp]
 800f352:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f354:	2b00      	cmp	r3, #0
 800f356:	f2c0 8150 	blt.w	800f5fa <_dtoa_r+0x6c2>
 800f35a:	f1ba 0f0e 	cmp.w	sl, #14
 800f35e:	f300 814c 	bgt.w	800f5fa <_dtoa_r+0x6c2>
 800f362:	4b6a      	ldr	r3, [pc, #424]	; (800f50c <_dtoa_r+0x5d4>)
 800f364:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800f368:	ed93 7b00 	vldr	d7, [r3]
 800f36c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f36e:	2b00      	cmp	r3, #0
 800f370:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f374:	f280 80d8 	bge.w	800f528 <_dtoa_r+0x5f0>
 800f378:	f1b9 0f00 	cmp.w	r9, #0
 800f37c:	f300 80d4 	bgt.w	800f528 <_dtoa_r+0x5f0>
 800f380:	f040 825e 	bne.w	800f840 <_dtoa_r+0x908>
 800f384:	2200      	movs	r2, #0
 800f386:	4b66      	ldr	r3, [pc, #408]	; (800f520 <_dtoa_r+0x5e8>)
 800f388:	ec51 0b17 	vmov	r0, r1, d7
 800f38c:	f7f1 f944 	bl	8000618 <__aeabi_dmul>
 800f390:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f394:	f7f1 fbc6 	bl	8000b24 <__aeabi_dcmpge>
 800f398:	464f      	mov	r7, r9
 800f39a:	464e      	mov	r6, r9
 800f39c:	2800      	cmp	r0, #0
 800f39e:	f040 8234 	bne.w	800f80a <_dtoa_r+0x8d2>
 800f3a2:	2331      	movs	r3, #49	; 0x31
 800f3a4:	f10b 0501 	add.w	r5, fp, #1
 800f3a8:	f88b 3000 	strb.w	r3, [fp]
 800f3ac:	f10a 0a01 	add.w	sl, sl, #1
 800f3b0:	e22f      	b.n	800f812 <_dtoa_r+0x8da>
 800f3b2:	07f2      	lsls	r2, r6, #31
 800f3b4:	d505      	bpl.n	800f3c2 <_dtoa_r+0x48a>
 800f3b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f3ba:	f7f1 f92d 	bl	8000618 <__aeabi_dmul>
 800f3be:	3501      	adds	r5, #1
 800f3c0:	2301      	movs	r3, #1
 800f3c2:	1076      	asrs	r6, r6, #1
 800f3c4:	3708      	adds	r7, #8
 800f3c6:	e772      	b.n	800f2ae <_dtoa_r+0x376>
 800f3c8:	2502      	movs	r5, #2
 800f3ca:	e774      	b.n	800f2b6 <_dtoa_r+0x37e>
 800f3cc:	f8cd a020 	str.w	sl, [sp, #32]
 800f3d0:	464f      	mov	r7, r9
 800f3d2:	e791      	b.n	800f2f8 <_dtoa_r+0x3c0>
 800f3d4:	4b4d      	ldr	r3, [pc, #308]	; (800f50c <_dtoa_r+0x5d4>)
 800f3d6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800f3da:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800f3de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f3e0:	2b00      	cmp	r3, #0
 800f3e2:	d047      	beq.n	800f474 <_dtoa_r+0x53c>
 800f3e4:	4602      	mov	r2, r0
 800f3e6:	460b      	mov	r3, r1
 800f3e8:	2000      	movs	r0, #0
 800f3ea:	494e      	ldr	r1, [pc, #312]	; (800f524 <_dtoa_r+0x5ec>)
 800f3ec:	f7f1 fa3e 	bl	800086c <__aeabi_ddiv>
 800f3f0:	462a      	mov	r2, r5
 800f3f2:	4633      	mov	r3, r6
 800f3f4:	f7f0 ff58 	bl	80002a8 <__aeabi_dsub>
 800f3f8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800f3fc:	465d      	mov	r5, fp
 800f3fe:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f402:	f7f1 fbb9 	bl	8000b78 <__aeabi_d2iz>
 800f406:	4606      	mov	r6, r0
 800f408:	f7f1 f89c 	bl	8000544 <__aeabi_i2d>
 800f40c:	4602      	mov	r2, r0
 800f40e:	460b      	mov	r3, r1
 800f410:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f414:	f7f0 ff48 	bl	80002a8 <__aeabi_dsub>
 800f418:	3630      	adds	r6, #48	; 0x30
 800f41a:	f805 6b01 	strb.w	r6, [r5], #1
 800f41e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800f422:	e9cd 0100 	strd	r0, r1, [sp]
 800f426:	f7f1 fb69 	bl	8000afc <__aeabi_dcmplt>
 800f42a:	2800      	cmp	r0, #0
 800f42c:	d163      	bne.n	800f4f6 <_dtoa_r+0x5be>
 800f42e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f432:	2000      	movs	r0, #0
 800f434:	4937      	ldr	r1, [pc, #220]	; (800f514 <_dtoa_r+0x5dc>)
 800f436:	f7f0 ff37 	bl	80002a8 <__aeabi_dsub>
 800f43a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800f43e:	f7f1 fb5d 	bl	8000afc <__aeabi_dcmplt>
 800f442:	2800      	cmp	r0, #0
 800f444:	f040 80b7 	bne.w	800f5b6 <_dtoa_r+0x67e>
 800f448:	eba5 030b 	sub.w	r3, r5, fp
 800f44c:	429f      	cmp	r7, r3
 800f44e:	f77f af7c 	ble.w	800f34a <_dtoa_r+0x412>
 800f452:	2200      	movs	r2, #0
 800f454:	4b30      	ldr	r3, [pc, #192]	; (800f518 <_dtoa_r+0x5e0>)
 800f456:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f45a:	f7f1 f8dd 	bl	8000618 <__aeabi_dmul>
 800f45e:	2200      	movs	r2, #0
 800f460:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800f464:	4b2c      	ldr	r3, [pc, #176]	; (800f518 <_dtoa_r+0x5e0>)
 800f466:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f46a:	f7f1 f8d5 	bl	8000618 <__aeabi_dmul>
 800f46e:	e9cd 0100 	strd	r0, r1, [sp]
 800f472:	e7c4      	b.n	800f3fe <_dtoa_r+0x4c6>
 800f474:	462a      	mov	r2, r5
 800f476:	4633      	mov	r3, r6
 800f478:	f7f1 f8ce 	bl	8000618 <__aeabi_dmul>
 800f47c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800f480:	eb0b 0507 	add.w	r5, fp, r7
 800f484:	465e      	mov	r6, fp
 800f486:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f48a:	f7f1 fb75 	bl	8000b78 <__aeabi_d2iz>
 800f48e:	4607      	mov	r7, r0
 800f490:	f7f1 f858 	bl	8000544 <__aeabi_i2d>
 800f494:	3730      	adds	r7, #48	; 0x30
 800f496:	4602      	mov	r2, r0
 800f498:	460b      	mov	r3, r1
 800f49a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f49e:	f7f0 ff03 	bl	80002a8 <__aeabi_dsub>
 800f4a2:	f806 7b01 	strb.w	r7, [r6], #1
 800f4a6:	42ae      	cmp	r6, r5
 800f4a8:	e9cd 0100 	strd	r0, r1, [sp]
 800f4ac:	f04f 0200 	mov.w	r2, #0
 800f4b0:	d126      	bne.n	800f500 <_dtoa_r+0x5c8>
 800f4b2:	4b1c      	ldr	r3, [pc, #112]	; (800f524 <_dtoa_r+0x5ec>)
 800f4b4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f4b8:	f7f0 fef8 	bl	80002ac <__adddf3>
 800f4bc:	4602      	mov	r2, r0
 800f4be:	460b      	mov	r3, r1
 800f4c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f4c4:	f7f1 fb38 	bl	8000b38 <__aeabi_dcmpgt>
 800f4c8:	2800      	cmp	r0, #0
 800f4ca:	d174      	bne.n	800f5b6 <_dtoa_r+0x67e>
 800f4cc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800f4d0:	2000      	movs	r0, #0
 800f4d2:	4914      	ldr	r1, [pc, #80]	; (800f524 <_dtoa_r+0x5ec>)
 800f4d4:	f7f0 fee8 	bl	80002a8 <__aeabi_dsub>
 800f4d8:	4602      	mov	r2, r0
 800f4da:	460b      	mov	r3, r1
 800f4dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f4e0:	f7f1 fb0c 	bl	8000afc <__aeabi_dcmplt>
 800f4e4:	2800      	cmp	r0, #0
 800f4e6:	f43f af30 	beq.w	800f34a <_dtoa_r+0x412>
 800f4ea:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800f4ee:	2b30      	cmp	r3, #48	; 0x30
 800f4f0:	f105 32ff 	add.w	r2, r5, #4294967295
 800f4f4:	d002      	beq.n	800f4fc <_dtoa_r+0x5c4>
 800f4f6:	f8dd a020 	ldr.w	sl, [sp, #32]
 800f4fa:	e04a      	b.n	800f592 <_dtoa_r+0x65a>
 800f4fc:	4615      	mov	r5, r2
 800f4fe:	e7f4      	b.n	800f4ea <_dtoa_r+0x5b2>
 800f500:	4b05      	ldr	r3, [pc, #20]	; (800f518 <_dtoa_r+0x5e0>)
 800f502:	f7f1 f889 	bl	8000618 <__aeabi_dmul>
 800f506:	e9cd 0100 	strd	r0, r1, [sp]
 800f50a:	e7bc      	b.n	800f486 <_dtoa_r+0x54e>
 800f50c:	08011bd8 	.word	0x08011bd8
 800f510:	08011bb0 	.word	0x08011bb0
 800f514:	3ff00000 	.word	0x3ff00000
 800f518:	40240000 	.word	0x40240000
 800f51c:	401c0000 	.word	0x401c0000
 800f520:	40140000 	.word	0x40140000
 800f524:	3fe00000 	.word	0x3fe00000
 800f528:	e9dd 6700 	ldrd	r6, r7, [sp]
 800f52c:	465d      	mov	r5, fp
 800f52e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f532:	4630      	mov	r0, r6
 800f534:	4639      	mov	r1, r7
 800f536:	f7f1 f999 	bl	800086c <__aeabi_ddiv>
 800f53a:	f7f1 fb1d 	bl	8000b78 <__aeabi_d2iz>
 800f53e:	4680      	mov	r8, r0
 800f540:	f7f1 f800 	bl	8000544 <__aeabi_i2d>
 800f544:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f548:	f7f1 f866 	bl	8000618 <__aeabi_dmul>
 800f54c:	4602      	mov	r2, r0
 800f54e:	460b      	mov	r3, r1
 800f550:	4630      	mov	r0, r6
 800f552:	4639      	mov	r1, r7
 800f554:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800f558:	f7f0 fea6 	bl	80002a8 <__aeabi_dsub>
 800f55c:	f805 6b01 	strb.w	r6, [r5], #1
 800f560:	eba5 060b 	sub.w	r6, r5, fp
 800f564:	45b1      	cmp	r9, r6
 800f566:	4602      	mov	r2, r0
 800f568:	460b      	mov	r3, r1
 800f56a:	d139      	bne.n	800f5e0 <_dtoa_r+0x6a8>
 800f56c:	f7f0 fe9e 	bl	80002ac <__adddf3>
 800f570:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f574:	4606      	mov	r6, r0
 800f576:	460f      	mov	r7, r1
 800f578:	f7f1 fade 	bl	8000b38 <__aeabi_dcmpgt>
 800f57c:	b9c8      	cbnz	r0, 800f5b2 <_dtoa_r+0x67a>
 800f57e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f582:	4630      	mov	r0, r6
 800f584:	4639      	mov	r1, r7
 800f586:	f7f1 faaf 	bl	8000ae8 <__aeabi_dcmpeq>
 800f58a:	b110      	cbz	r0, 800f592 <_dtoa_r+0x65a>
 800f58c:	f018 0f01 	tst.w	r8, #1
 800f590:	d10f      	bne.n	800f5b2 <_dtoa_r+0x67a>
 800f592:	9904      	ldr	r1, [sp, #16]
 800f594:	4620      	mov	r0, r4
 800f596:	f001 f853 	bl	8010640 <_Bfree>
 800f59a:	2300      	movs	r3, #0
 800f59c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f59e:	702b      	strb	r3, [r5, #0]
 800f5a0:	f10a 0301 	add.w	r3, sl, #1
 800f5a4:	6013      	str	r3, [r2, #0]
 800f5a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	f43f acff 	beq.w	800efac <_dtoa_r+0x74>
 800f5ae:	601d      	str	r5, [r3, #0]
 800f5b0:	e4fc      	b.n	800efac <_dtoa_r+0x74>
 800f5b2:	f8cd a020 	str.w	sl, [sp, #32]
 800f5b6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800f5ba:	2a39      	cmp	r2, #57	; 0x39
 800f5bc:	f105 33ff 	add.w	r3, r5, #4294967295
 800f5c0:	d108      	bne.n	800f5d4 <_dtoa_r+0x69c>
 800f5c2:	459b      	cmp	fp, r3
 800f5c4:	d10a      	bne.n	800f5dc <_dtoa_r+0x6a4>
 800f5c6:	9b08      	ldr	r3, [sp, #32]
 800f5c8:	3301      	adds	r3, #1
 800f5ca:	9308      	str	r3, [sp, #32]
 800f5cc:	2330      	movs	r3, #48	; 0x30
 800f5ce:	f88b 3000 	strb.w	r3, [fp]
 800f5d2:	465b      	mov	r3, fp
 800f5d4:	781a      	ldrb	r2, [r3, #0]
 800f5d6:	3201      	adds	r2, #1
 800f5d8:	701a      	strb	r2, [r3, #0]
 800f5da:	e78c      	b.n	800f4f6 <_dtoa_r+0x5be>
 800f5dc:	461d      	mov	r5, r3
 800f5de:	e7ea      	b.n	800f5b6 <_dtoa_r+0x67e>
 800f5e0:	2200      	movs	r2, #0
 800f5e2:	4b9b      	ldr	r3, [pc, #620]	; (800f850 <_dtoa_r+0x918>)
 800f5e4:	f7f1 f818 	bl	8000618 <__aeabi_dmul>
 800f5e8:	2200      	movs	r2, #0
 800f5ea:	2300      	movs	r3, #0
 800f5ec:	4606      	mov	r6, r0
 800f5ee:	460f      	mov	r7, r1
 800f5f0:	f7f1 fa7a 	bl	8000ae8 <__aeabi_dcmpeq>
 800f5f4:	2800      	cmp	r0, #0
 800f5f6:	d09a      	beq.n	800f52e <_dtoa_r+0x5f6>
 800f5f8:	e7cb      	b.n	800f592 <_dtoa_r+0x65a>
 800f5fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f5fc:	2a00      	cmp	r2, #0
 800f5fe:	f000 808b 	beq.w	800f718 <_dtoa_r+0x7e0>
 800f602:	9a06      	ldr	r2, [sp, #24]
 800f604:	2a01      	cmp	r2, #1
 800f606:	dc6e      	bgt.n	800f6e6 <_dtoa_r+0x7ae>
 800f608:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800f60a:	2a00      	cmp	r2, #0
 800f60c:	d067      	beq.n	800f6de <_dtoa_r+0x7a6>
 800f60e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800f612:	9f07      	ldr	r7, [sp, #28]
 800f614:	9d05      	ldr	r5, [sp, #20]
 800f616:	9a05      	ldr	r2, [sp, #20]
 800f618:	2101      	movs	r1, #1
 800f61a:	441a      	add	r2, r3
 800f61c:	4620      	mov	r0, r4
 800f61e:	9205      	str	r2, [sp, #20]
 800f620:	4498      	add	r8, r3
 800f622:	f001 f8dd 	bl	80107e0 <__i2b>
 800f626:	4606      	mov	r6, r0
 800f628:	2d00      	cmp	r5, #0
 800f62a:	dd0c      	ble.n	800f646 <_dtoa_r+0x70e>
 800f62c:	f1b8 0f00 	cmp.w	r8, #0
 800f630:	dd09      	ble.n	800f646 <_dtoa_r+0x70e>
 800f632:	4545      	cmp	r5, r8
 800f634:	9a05      	ldr	r2, [sp, #20]
 800f636:	462b      	mov	r3, r5
 800f638:	bfa8      	it	ge
 800f63a:	4643      	movge	r3, r8
 800f63c:	1ad2      	subs	r2, r2, r3
 800f63e:	9205      	str	r2, [sp, #20]
 800f640:	1aed      	subs	r5, r5, r3
 800f642:	eba8 0803 	sub.w	r8, r8, r3
 800f646:	9b07      	ldr	r3, [sp, #28]
 800f648:	b1eb      	cbz	r3, 800f686 <_dtoa_r+0x74e>
 800f64a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f64c:	2b00      	cmp	r3, #0
 800f64e:	d067      	beq.n	800f720 <_dtoa_r+0x7e8>
 800f650:	b18f      	cbz	r7, 800f676 <_dtoa_r+0x73e>
 800f652:	4631      	mov	r1, r6
 800f654:	463a      	mov	r2, r7
 800f656:	4620      	mov	r0, r4
 800f658:	f001 f962 	bl	8010920 <__pow5mult>
 800f65c:	9a04      	ldr	r2, [sp, #16]
 800f65e:	4601      	mov	r1, r0
 800f660:	4606      	mov	r6, r0
 800f662:	4620      	mov	r0, r4
 800f664:	f001 f8c5 	bl	80107f2 <__multiply>
 800f668:	9904      	ldr	r1, [sp, #16]
 800f66a:	9008      	str	r0, [sp, #32]
 800f66c:	4620      	mov	r0, r4
 800f66e:	f000 ffe7 	bl	8010640 <_Bfree>
 800f672:	9b08      	ldr	r3, [sp, #32]
 800f674:	9304      	str	r3, [sp, #16]
 800f676:	9b07      	ldr	r3, [sp, #28]
 800f678:	1bda      	subs	r2, r3, r7
 800f67a:	d004      	beq.n	800f686 <_dtoa_r+0x74e>
 800f67c:	9904      	ldr	r1, [sp, #16]
 800f67e:	4620      	mov	r0, r4
 800f680:	f001 f94e 	bl	8010920 <__pow5mult>
 800f684:	9004      	str	r0, [sp, #16]
 800f686:	2101      	movs	r1, #1
 800f688:	4620      	mov	r0, r4
 800f68a:	f001 f8a9 	bl	80107e0 <__i2b>
 800f68e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f690:	4607      	mov	r7, r0
 800f692:	2b00      	cmp	r3, #0
 800f694:	f000 81cf 	beq.w	800fa36 <_dtoa_r+0xafe>
 800f698:	461a      	mov	r2, r3
 800f69a:	4601      	mov	r1, r0
 800f69c:	4620      	mov	r0, r4
 800f69e:	f001 f93f 	bl	8010920 <__pow5mult>
 800f6a2:	9b06      	ldr	r3, [sp, #24]
 800f6a4:	2b01      	cmp	r3, #1
 800f6a6:	4607      	mov	r7, r0
 800f6a8:	dc40      	bgt.n	800f72c <_dtoa_r+0x7f4>
 800f6aa:	9b00      	ldr	r3, [sp, #0]
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	d139      	bne.n	800f724 <_dtoa_r+0x7ec>
 800f6b0:	9b01      	ldr	r3, [sp, #4]
 800f6b2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f6b6:	2b00      	cmp	r3, #0
 800f6b8:	d136      	bne.n	800f728 <_dtoa_r+0x7f0>
 800f6ba:	9b01      	ldr	r3, [sp, #4]
 800f6bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f6c0:	0d1b      	lsrs	r3, r3, #20
 800f6c2:	051b      	lsls	r3, r3, #20
 800f6c4:	b12b      	cbz	r3, 800f6d2 <_dtoa_r+0x79a>
 800f6c6:	9b05      	ldr	r3, [sp, #20]
 800f6c8:	3301      	adds	r3, #1
 800f6ca:	9305      	str	r3, [sp, #20]
 800f6cc:	f108 0801 	add.w	r8, r8, #1
 800f6d0:	2301      	movs	r3, #1
 800f6d2:	9307      	str	r3, [sp, #28]
 800f6d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f6d6:	2b00      	cmp	r3, #0
 800f6d8:	d12a      	bne.n	800f730 <_dtoa_r+0x7f8>
 800f6da:	2001      	movs	r0, #1
 800f6dc:	e030      	b.n	800f740 <_dtoa_r+0x808>
 800f6de:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f6e0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800f6e4:	e795      	b.n	800f612 <_dtoa_r+0x6da>
 800f6e6:	9b07      	ldr	r3, [sp, #28]
 800f6e8:	f109 37ff 	add.w	r7, r9, #4294967295
 800f6ec:	42bb      	cmp	r3, r7
 800f6ee:	bfbf      	itttt	lt
 800f6f0:	9b07      	ldrlt	r3, [sp, #28]
 800f6f2:	9707      	strlt	r7, [sp, #28]
 800f6f4:	1afa      	sublt	r2, r7, r3
 800f6f6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800f6f8:	bfbb      	ittet	lt
 800f6fa:	189b      	addlt	r3, r3, r2
 800f6fc:	930e      	strlt	r3, [sp, #56]	; 0x38
 800f6fe:	1bdf      	subge	r7, r3, r7
 800f700:	2700      	movlt	r7, #0
 800f702:	f1b9 0f00 	cmp.w	r9, #0
 800f706:	bfb5      	itete	lt
 800f708:	9b05      	ldrlt	r3, [sp, #20]
 800f70a:	9d05      	ldrge	r5, [sp, #20]
 800f70c:	eba3 0509 	sublt.w	r5, r3, r9
 800f710:	464b      	movge	r3, r9
 800f712:	bfb8      	it	lt
 800f714:	2300      	movlt	r3, #0
 800f716:	e77e      	b.n	800f616 <_dtoa_r+0x6de>
 800f718:	9f07      	ldr	r7, [sp, #28]
 800f71a:	9d05      	ldr	r5, [sp, #20]
 800f71c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800f71e:	e783      	b.n	800f628 <_dtoa_r+0x6f0>
 800f720:	9a07      	ldr	r2, [sp, #28]
 800f722:	e7ab      	b.n	800f67c <_dtoa_r+0x744>
 800f724:	2300      	movs	r3, #0
 800f726:	e7d4      	b.n	800f6d2 <_dtoa_r+0x79a>
 800f728:	9b00      	ldr	r3, [sp, #0]
 800f72a:	e7d2      	b.n	800f6d2 <_dtoa_r+0x79a>
 800f72c:	2300      	movs	r3, #0
 800f72e:	9307      	str	r3, [sp, #28]
 800f730:	693b      	ldr	r3, [r7, #16]
 800f732:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800f736:	6918      	ldr	r0, [r3, #16]
 800f738:	f001 f804 	bl	8010744 <__hi0bits>
 800f73c:	f1c0 0020 	rsb	r0, r0, #32
 800f740:	4440      	add	r0, r8
 800f742:	f010 001f 	ands.w	r0, r0, #31
 800f746:	d047      	beq.n	800f7d8 <_dtoa_r+0x8a0>
 800f748:	f1c0 0320 	rsb	r3, r0, #32
 800f74c:	2b04      	cmp	r3, #4
 800f74e:	dd3b      	ble.n	800f7c8 <_dtoa_r+0x890>
 800f750:	9b05      	ldr	r3, [sp, #20]
 800f752:	f1c0 001c 	rsb	r0, r0, #28
 800f756:	4403      	add	r3, r0
 800f758:	9305      	str	r3, [sp, #20]
 800f75a:	4405      	add	r5, r0
 800f75c:	4480      	add	r8, r0
 800f75e:	9b05      	ldr	r3, [sp, #20]
 800f760:	2b00      	cmp	r3, #0
 800f762:	dd05      	ble.n	800f770 <_dtoa_r+0x838>
 800f764:	461a      	mov	r2, r3
 800f766:	9904      	ldr	r1, [sp, #16]
 800f768:	4620      	mov	r0, r4
 800f76a:	f001 f919 	bl	80109a0 <__lshift>
 800f76e:	9004      	str	r0, [sp, #16]
 800f770:	f1b8 0f00 	cmp.w	r8, #0
 800f774:	dd05      	ble.n	800f782 <_dtoa_r+0x84a>
 800f776:	4639      	mov	r1, r7
 800f778:	4642      	mov	r2, r8
 800f77a:	4620      	mov	r0, r4
 800f77c:	f001 f910 	bl	80109a0 <__lshift>
 800f780:	4607      	mov	r7, r0
 800f782:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f784:	b353      	cbz	r3, 800f7dc <_dtoa_r+0x8a4>
 800f786:	4639      	mov	r1, r7
 800f788:	9804      	ldr	r0, [sp, #16]
 800f78a:	f001 f95d 	bl	8010a48 <__mcmp>
 800f78e:	2800      	cmp	r0, #0
 800f790:	da24      	bge.n	800f7dc <_dtoa_r+0x8a4>
 800f792:	2300      	movs	r3, #0
 800f794:	220a      	movs	r2, #10
 800f796:	9904      	ldr	r1, [sp, #16]
 800f798:	4620      	mov	r0, r4
 800f79a:	f000 ff5a 	bl	8010652 <__multadd>
 800f79e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f7a0:	9004      	str	r0, [sp, #16]
 800f7a2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f7a6:	2b00      	cmp	r3, #0
 800f7a8:	f000 814c 	beq.w	800fa44 <_dtoa_r+0xb0c>
 800f7ac:	2300      	movs	r3, #0
 800f7ae:	4631      	mov	r1, r6
 800f7b0:	220a      	movs	r2, #10
 800f7b2:	4620      	mov	r0, r4
 800f7b4:	f000 ff4d 	bl	8010652 <__multadd>
 800f7b8:	9b02      	ldr	r3, [sp, #8]
 800f7ba:	2b00      	cmp	r3, #0
 800f7bc:	4606      	mov	r6, r0
 800f7be:	dc4f      	bgt.n	800f860 <_dtoa_r+0x928>
 800f7c0:	9b06      	ldr	r3, [sp, #24]
 800f7c2:	2b02      	cmp	r3, #2
 800f7c4:	dd4c      	ble.n	800f860 <_dtoa_r+0x928>
 800f7c6:	e011      	b.n	800f7ec <_dtoa_r+0x8b4>
 800f7c8:	d0c9      	beq.n	800f75e <_dtoa_r+0x826>
 800f7ca:	9a05      	ldr	r2, [sp, #20]
 800f7cc:	331c      	adds	r3, #28
 800f7ce:	441a      	add	r2, r3
 800f7d0:	9205      	str	r2, [sp, #20]
 800f7d2:	441d      	add	r5, r3
 800f7d4:	4498      	add	r8, r3
 800f7d6:	e7c2      	b.n	800f75e <_dtoa_r+0x826>
 800f7d8:	4603      	mov	r3, r0
 800f7da:	e7f6      	b.n	800f7ca <_dtoa_r+0x892>
 800f7dc:	f1b9 0f00 	cmp.w	r9, #0
 800f7e0:	dc38      	bgt.n	800f854 <_dtoa_r+0x91c>
 800f7e2:	9b06      	ldr	r3, [sp, #24]
 800f7e4:	2b02      	cmp	r3, #2
 800f7e6:	dd35      	ble.n	800f854 <_dtoa_r+0x91c>
 800f7e8:	f8cd 9008 	str.w	r9, [sp, #8]
 800f7ec:	9b02      	ldr	r3, [sp, #8]
 800f7ee:	b963      	cbnz	r3, 800f80a <_dtoa_r+0x8d2>
 800f7f0:	4639      	mov	r1, r7
 800f7f2:	2205      	movs	r2, #5
 800f7f4:	4620      	mov	r0, r4
 800f7f6:	f000 ff2c 	bl	8010652 <__multadd>
 800f7fa:	4601      	mov	r1, r0
 800f7fc:	4607      	mov	r7, r0
 800f7fe:	9804      	ldr	r0, [sp, #16]
 800f800:	f001 f922 	bl	8010a48 <__mcmp>
 800f804:	2800      	cmp	r0, #0
 800f806:	f73f adcc 	bgt.w	800f3a2 <_dtoa_r+0x46a>
 800f80a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f80c:	465d      	mov	r5, fp
 800f80e:	ea6f 0a03 	mvn.w	sl, r3
 800f812:	f04f 0900 	mov.w	r9, #0
 800f816:	4639      	mov	r1, r7
 800f818:	4620      	mov	r0, r4
 800f81a:	f000 ff11 	bl	8010640 <_Bfree>
 800f81e:	2e00      	cmp	r6, #0
 800f820:	f43f aeb7 	beq.w	800f592 <_dtoa_r+0x65a>
 800f824:	f1b9 0f00 	cmp.w	r9, #0
 800f828:	d005      	beq.n	800f836 <_dtoa_r+0x8fe>
 800f82a:	45b1      	cmp	r9, r6
 800f82c:	d003      	beq.n	800f836 <_dtoa_r+0x8fe>
 800f82e:	4649      	mov	r1, r9
 800f830:	4620      	mov	r0, r4
 800f832:	f000 ff05 	bl	8010640 <_Bfree>
 800f836:	4631      	mov	r1, r6
 800f838:	4620      	mov	r0, r4
 800f83a:	f000 ff01 	bl	8010640 <_Bfree>
 800f83e:	e6a8      	b.n	800f592 <_dtoa_r+0x65a>
 800f840:	2700      	movs	r7, #0
 800f842:	463e      	mov	r6, r7
 800f844:	e7e1      	b.n	800f80a <_dtoa_r+0x8d2>
 800f846:	f8dd a020 	ldr.w	sl, [sp, #32]
 800f84a:	463e      	mov	r6, r7
 800f84c:	e5a9      	b.n	800f3a2 <_dtoa_r+0x46a>
 800f84e:	bf00      	nop
 800f850:	40240000 	.word	0x40240000
 800f854:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f856:	f8cd 9008 	str.w	r9, [sp, #8]
 800f85a:	2b00      	cmp	r3, #0
 800f85c:	f000 80f9 	beq.w	800fa52 <_dtoa_r+0xb1a>
 800f860:	2d00      	cmp	r5, #0
 800f862:	dd05      	ble.n	800f870 <_dtoa_r+0x938>
 800f864:	4631      	mov	r1, r6
 800f866:	462a      	mov	r2, r5
 800f868:	4620      	mov	r0, r4
 800f86a:	f001 f899 	bl	80109a0 <__lshift>
 800f86e:	4606      	mov	r6, r0
 800f870:	9b07      	ldr	r3, [sp, #28]
 800f872:	2b00      	cmp	r3, #0
 800f874:	d04c      	beq.n	800f910 <_dtoa_r+0x9d8>
 800f876:	6871      	ldr	r1, [r6, #4]
 800f878:	4620      	mov	r0, r4
 800f87a:	f000 febc 	bl	80105f6 <_Balloc>
 800f87e:	6932      	ldr	r2, [r6, #16]
 800f880:	3202      	adds	r2, #2
 800f882:	4605      	mov	r5, r0
 800f884:	0092      	lsls	r2, r2, #2
 800f886:	f106 010c 	add.w	r1, r6, #12
 800f88a:	300c      	adds	r0, #12
 800f88c:	f000 fea8 	bl	80105e0 <memcpy>
 800f890:	2201      	movs	r2, #1
 800f892:	4629      	mov	r1, r5
 800f894:	4620      	mov	r0, r4
 800f896:	f001 f883 	bl	80109a0 <__lshift>
 800f89a:	9b00      	ldr	r3, [sp, #0]
 800f89c:	f8cd b014 	str.w	fp, [sp, #20]
 800f8a0:	f003 0301 	and.w	r3, r3, #1
 800f8a4:	46b1      	mov	r9, r6
 800f8a6:	9307      	str	r3, [sp, #28]
 800f8a8:	4606      	mov	r6, r0
 800f8aa:	4639      	mov	r1, r7
 800f8ac:	9804      	ldr	r0, [sp, #16]
 800f8ae:	f7ff fab5 	bl	800ee1c <quorem>
 800f8b2:	4649      	mov	r1, r9
 800f8b4:	4605      	mov	r5, r0
 800f8b6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800f8ba:	9804      	ldr	r0, [sp, #16]
 800f8bc:	f001 f8c4 	bl	8010a48 <__mcmp>
 800f8c0:	4632      	mov	r2, r6
 800f8c2:	9000      	str	r0, [sp, #0]
 800f8c4:	4639      	mov	r1, r7
 800f8c6:	4620      	mov	r0, r4
 800f8c8:	f001 f8d8 	bl	8010a7c <__mdiff>
 800f8cc:	68c3      	ldr	r3, [r0, #12]
 800f8ce:	4602      	mov	r2, r0
 800f8d0:	bb03      	cbnz	r3, 800f914 <_dtoa_r+0x9dc>
 800f8d2:	4601      	mov	r1, r0
 800f8d4:	9008      	str	r0, [sp, #32]
 800f8d6:	9804      	ldr	r0, [sp, #16]
 800f8d8:	f001 f8b6 	bl	8010a48 <__mcmp>
 800f8dc:	9a08      	ldr	r2, [sp, #32]
 800f8de:	4603      	mov	r3, r0
 800f8e0:	4611      	mov	r1, r2
 800f8e2:	4620      	mov	r0, r4
 800f8e4:	9308      	str	r3, [sp, #32]
 800f8e6:	f000 feab 	bl	8010640 <_Bfree>
 800f8ea:	9b08      	ldr	r3, [sp, #32]
 800f8ec:	b9a3      	cbnz	r3, 800f918 <_dtoa_r+0x9e0>
 800f8ee:	9a06      	ldr	r2, [sp, #24]
 800f8f0:	b992      	cbnz	r2, 800f918 <_dtoa_r+0x9e0>
 800f8f2:	9a07      	ldr	r2, [sp, #28]
 800f8f4:	b982      	cbnz	r2, 800f918 <_dtoa_r+0x9e0>
 800f8f6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800f8fa:	d029      	beq.n	800f950 <_dtoa_r+0xa18>
 800f8fc:	9b00      	ldr	r3, [sp, #0]
 800f8fe:	2b00      	cmp	r3, #0
 800f900:	dd01      	ble.n	800f906 <_dtoa_r+0x9ce>
 800f902:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800f906:	9b05      	ldr	r3, [sp, #20]
 800f908:	1c5d      	adds	r5, r3, #1
 800f90a:	f883 8000 	strb.w	r8, [r3]
 800f90e:	e782      	b.n	800f816 <_dtoa_r+0x8de>
 800f910:	4630      	mov	r0, r6
 800f912:	e7c2      	b.n	800f89a <_dtoa_r+0x962>
 800f914:	2301      	movs	r3, #1
 800f916:	e7e3      	b.n	800f8e0 <_dtoa_r+0x9a8>
 800f918:	9a00      	ldr	r2, [sp, #0]
 800f91a:	2a00      	cmp	r2, #0
 800f91c:	db04      	blt.n	800f928 <_dtoa_r+0x9f0>
 800f91e:	d125      	bne.n	800f96c <_dtoa_r+0xa34>
 800f920:	9a06      	ldr	r2, [sp, #24]
 800f922:	bb1a      	cbnz	r2, 800f96c <_dtoa_r+0xa34>
 800f924:	9a07      	ldr	r2, [sp, #28]
 800f926:	bb0a      	cbnz	r2, 800f96c <_dtoa_r+0xa34>
 800f928:	2b00      	cmp	r3, #0
 800f92a:	ddec      	ble.n	800f906 <_dtoa_r+0x9ce>
 800f92c:	2201      	movs	r2, #1
 800f92e:	9904      	ldr	r1, [sp, #16]
 800f930:	4620      	mov	r0, r4
 800f932:	f001 f835 	bl	80109a0 <__lshift>
 800f936:	4639      	mov	r1, r7
 800f938:	9004      	str	r0, [sp, #16]
 800f93a:	f001 f885 	bl	8010a48 <__mcmp>
 800f93e:	2800      	cmp	r0, #0
 800f940:	dc03      	bgt.n	800f94a <_dtoa_r+0xa12>
 800f942:	d1e0      	bne.n	800f906 <_dtoa_r+0x9ce>
 800f944:	f018 0f01 	tst.w	r8, #1
 800f948:	d0dd      	beq.n	800f906 <_dtoa_r+0x9ce>
 800f94a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800f94e:	d1d8      	bne.n	800f902 <_dtoa_r+0x9ca>
 800f950:	9b05      	ldr	r3, [sp, #20]
 800f952:	9a05      	ldr	r2, [sp, #20]
 800f954:	1c5d      	adds	r5, r3, #1
 800f956:	2339      	movs	r3, #57	; 0x39
 800f958:	7013      	strb	r3, [r2, #0]
 800f95a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800f95e:	2b39      	cmp	r3, #57	; 0x39
 800f960:	f105 32ff 	add.w	r2, r5, #4294967295
 800f964:	d04f      	beq.n	800fa06 <_dtoa_r+0xace>
 800f966:	3301      	adds	r3, #1
 800f968:	7013      	strb	r3, [r2, #0]
 800f96a:	e754      	b.n	800f816 <_dtoa_r+0x8de>
 800f96c:	9a05      	ldr	r2, [sp, #20]
 800f96e:	2b00      	cmp	r3, #0
 800f970:	f102 0501 	add.w	r5, r2, #1
 800f974:	dd06      	ble.n	800f984 <_dtoa_r+0xa4c>
 800f976:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800f97a:	d0e9      	beq.n	800f950 <_dtoa_r+0xa18>
 800f97c:	f108 0801 	add.w	r8, r8, #1
 800f980:	9b05      	ldr	r3, [sp, #20]
 800f982:	e7c2      	b.n	800f90a <_dtoa_r+0x9d2>
 800f984:	9a02      	ldr	r2, [sp, #8]
 800f986:	f805 8c01 	strb.w	r8, [r5, #-1]
 800f98a:	eba5 030b 	sub.w	r3, r5, fp
 800f98e:	4293      	cmp	r3, r2
 800f990:	d021      	beq.n	800f9d6 <_dtoa_r+0xa9e>
 800f992:	2300      	movs	r3, #0
 800f994:	220a      	movs	r2, #10
 800f996:	9904      	ldr	r1, [sp, #16]
 800f998:	4620      	mov	r0, r4
 800f99a:	f000 fe5a 	bl	8010652 <__multadd>
 800f99e:	45b1      	cmp	r9, r6
 800f9a0:	9004      	str	r0, [sp, #16]
 800f9a2:	f04f 0300 	mov.w	r3, #0
 800f9a6:	f04f 020a 	mov.w	r2, #10
 800f9aa:	4649      	mov	r1, r9
 800f9ac:	4620      	mov	r0, r4
 800f9ae:	d105      	bne.n	800f9bc <_dtoa_r+0xa84>
 800f9b0:	f000 fe4f 	bl	8010652 <__multadd>
 800f9b4:	4681      	mov	r9, r0
 800f9b6:	4606      	mov	r6, r0
 800f9b8:	9505      	str	r5, [sp, #20]
 800f9ba:	e776      	b.n	800f8aa <_dtoa_r+0x972>
 800f9bc:	f000 fe49 	bl	8010652 <__multadd>
 800f9c0:	4631      	mov	r1, r6
 800f9c2:	4681      	mov	r9, r0
 800f9c4:	2300      	movs	r3, #0
 800f9c6:	220a      	movs	r2, #10
 800f9c8:	4620      	mov	r0, r4
 800f9ca:	f000 fe42 	bl	8010652 <__multadd>
 800f9ce:	4606      	mov	r6, r0
 800f9d0:	e7f2      	b.n	800f9b8 <_dtoa_r+0xa80>
 800f9d2:	f04f 0900 	mov.w	r9, #0
 800f9d6:	2201      	movs	r2, #1
 800f9d8:	9904      	ldr	r1, [sp, #16]
 800f9da:	4620      	mov	r0, r4
 800f9dc:	f000 ffe0 	bl	80109a0 <__lshift>
 800f9e0:	4639      	mov	r1, r7
 800f9e2:	9004      	str	r0, [sp, #16]
 800f9e4:	f001 f830 	bl	8010a48 <__mcmp>
 800f9e8:	2800      	cmp	r0, #0
 800f9ea:	dcb6      	bgt.n	800f95a <_dtoa_r+0xa22>
 800f9ec:	d102      	bne.n	800f9f4 <_dtoa_r+0xabc>
 800f9ee:	f018 0f01 	tst.w	r8, #1
 800f9f2:	d1b2      	bne.n	800f95a <_dtoa_r+0xa22>
 800f9f4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800f9f8:	2b30      	cmp	r3, #48	; 0x30
 800f9fa:	f105 32ff 	add.w	r2, r5, #4294967295
 800f9fe:	f47f af0a 	bne.w	800f816 <_dtoa_r+0x8de>
 800fa02:	4615      	mov	r5, r2
 800fa04:	e7f6      	b.n	800f9f4 <_dtoa_r+0xabc>
 800fa06:	4593      	cmp	fp, r2
 800fa08:	d105      	bne.n	800fa16 <_dtoa_r+0xade>
 800fa0a:	2331      	movs	r3, #49	; 0x31
 800fa0c:	f10a 0a01 	add.w	sl, sl, #1
 800fa10:	f88b 3000 	strb.w	r3, [fp]
 800fa14:	e6ff      	b.n	800f816 <_dtoa_r+0x8de>
 800fa16:	4615      	mov	r5, r2
 800fa18:	e79f      	b.n	800f95a <_dtoa_r+0xa22>
 800fa1a:	f8df b064 	ldr.w	fp, [pc, #100]	; 800fa80 <_dtoa_r+0xb48>
 800fa1e:	f7ff bac5 	b.w	800efac <_dtoa_r+0x74>
 800fa22:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fa24:	f8df b05c 	ldr.w	fp, [pc, #92]	; 800fa84 <_dtoa_r+0xb4c>
 800fa28:	2b00      	cmp	r3, #0
 800fa2a:	f43f aabf 	beq.w	800efac <_dtoa_r+0x74>
 800fa2e:	f10b 0308 	add.w	r3, fp, #8
 800fa32:	f7ff bab9 	b.w	800efa8 <_dtoa_r+0x70>
 800fa36:	9b06      	ldr	r3, [sp, #24]
 800fa38:	2b01      	cmp	r3, #1
 800fa3a:	f77f ae36 	ble.w	800f6aa <_dtoa_r+0x772>
 800fa3e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fa40:	9307      	str	r3, [sp, #28]
 800fa42:	e64a      	b.n	800f6da <_dtoa_r+0x7a2>
 800fa44:	9b02      	ldr	r3, [sp, #8]
 800fa46:	2b00      	cmp	r3, #0
 800fa48:	dc03      	bgt.n	800fa52 <_dtoa_r+0xb1a>
 800fa4a:	9b06      	ldr	r3, [sp, #24]
 800fa4c:	2b02      	cmp	r3, #2
 800fa4e:	f73f aecd 	bgt.w	800f7ec <_dtoa_r+0x8b4>
 800fa52:	465d      	mov	r5, fp
 800fa54:	4639      	mov	r1, r7
 800fa56:	9804      	ldr	r0, [sp, #16]
 800fa58:	f7ff f9e0 	bl	800ee1c <quorem>
 800fa5c:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800fa60:	f805 8b01 	strb.w	r8, [r5], #1
 800fa64:	9a02      	ldr	r2, [sp, #8]
 800fa66:	eba5 030b 	sub.w	r3, r5, fp
 800fa6a:	429a      	cmp	r2, r3
 800fa6c:	ddb1      	ble.n	800f9d2 <_dtoa_r+0xa9a>
 800fa6e:	2300      	movs	r3, #0
 800fa70:	220a      	movs	r2, #10
 800fa72:	9904      	ldr	r1, [sp, #16]
 800fa74:	4620      	mov	r0, r4
 800fa76:	f000 fdec 	bl	8010652 <__multadd>
 800fa7a:	9004      	str	r0, [sp, #16]
 800fa7c:	e7ea      	b.n	800fa54 <_dtoa_r+0xb1c>
 800fa7e:	bf00      	nop
 800fa80:	08011b72 	.word	0x08011b72
 800fa84:	08011b94 	.word	0x08011b94

0800fa88 <print_e>:
 800fa88:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fa8a:	b087      	sub	sp, #28
 800fa8c:	ec43 2b10 	vmov	d0, r2, r3
 800fa90:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800fa92:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 800fa96:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800fa98:	ab04      	add	r3, sp, #16
 800fa9a:	9301      	str	r3, [sp, #4]
 800fa9c:	ab03      	add	r3, sp, #12
 800fa9e:	9300      	str	r3, [sp, #0]
 800faa0:	460f      	mov	r7, r1
 800faa2:	ab05      	add	r3, sp, #20
 800faa4:	2102      	movs	r1, #2
 800faa6:	1c62      	adds	r2, r4, #1
 800faa8:	f7ff fa46 	bl	800ef38 <_dtoa_r>
 800faac:	4601      	mov	r1, r0
 800faae:	9805      	ldr	r0, [sp, #20]
 800fab0:	f242 730f 	movw	r3, #9999	; 0x270f
 800fab4:	4298      	cmp	r0, r3
 800fab6:	d104      	bne.n	800fac2 <print_e+0x3a>
 800fab8:	4638      	mov	r0, r7
 800faba:	f7fd f92e 	bl	800cd1a <strcpy>
 800fabe:	b007      	add	sp, #28
 800fac0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fac2:	780b      	ldrb	r3, [r1, #0]
 800fac4:	703b      	strb	r3, [r7, #0]
 800fac6:	2d00      	cmp	r5, #0
 800fac8:	d143      	bne.n	800fb52 <print_e+0xca>
 800faca:	2c00      	cmp	r4, #0
 800facc:	d141      	bne.n	800fb52 <print_e+0xca>
 800face:	1c7b      	adds	r3, r7, #1
 800fad0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800fad4:	b10a      	cbz	r2, 800fada <print_e+0x52>
 800fad6:	2c00      	cmp	r4, #0
 800fad8:	dc3f      	bgt.n	800fb5a <print_e+0xd2>
 800fada:	2e67      	cmp	r6, #103	; 0x67
 800fadc:	d044      	beq.n	800fb68 <print_e+0xe0>
 800fade:	2e47      	cmp	r6, #71	; 0x47
 800fae0:	d044      	beq.n	800fb6c <print_e+0xe4>
 800fae2:	461a      	mov	r2, r3
 800fae4:	191d      	adds	r5, r3, r4
 800fae6:	2730      	movs	r7, #48	; 0x30
 800fae8:	1aa9      	subs	r1, r5, r2
 800faea:	2900      	cmp	r1, #0
 800faec:	dc39      	bgt.n	800fb62 <print_e+0xda>
 800faee:	2c00      	cmp	r4, #0
 800faf0:	bfa8      	it	ge
 800faf2:	191b      	addge	r3, r3, r4
 800faf4:	1e41      	subs	r1, r0, #1
 800faf6:	2900      	cmp	r1, #0
 800faf8:	bfb8      	it	lt
 800fafa:	f1c0 0001 	rsblt	r0, r0, #1
 800fafe:	9105      	str	r1, [sp, #20]
 800fb00:	bfb8      	it	lt
 800fb02:	9005      	strlt	r0, [sp, #20]
 800fb04:	461a      	mov	r2, r3
 800fb06:	9805      	ldr	r0, [sp, #20]
 800fb08:	f802 6b02 	strb.w	r6, [r2], #2
 800fb0c:	bfb5      	itete	lt
 800fb0e:	212d      	movlt	r1, #45	; 0x2d
 800fb10:	212b      	movge	r1, #43	; 0x2b
 800fb12:	7059      	strblt	r1, [r3, #1]
 800fb14:	7059      	strbge	r1, [r3, #1]
 800fb16:	2863      	cmp	r0, #99	; 0x63
 800fb18:	dd0b      	ble.n	800fb32 <print_e+0xaa>
 800fb1a:	2164      	movs	r1, #100	; 0x64
 800fb1c:	fb90 f1f1 	sdiv	r1, r0, r1
 800fb20:	f101 0430 	add.w	r4, r1, #48	; 0x30
 800fb24:	1cda      	adds	r2, r3, #3
 800fb26:	709c      	strb	r4, [r3, #2]
 800fb28:	f06f 0363 	mvn.w	r3, #99	; 0x63
 800fb2c:	fb03 0101 	mla	r1, r3, r1, r0
 800fb30:	9105      	str	r1, [sp, #20]
 800fb32:	9905      	ldr	r1, [sp, #20]
 800fb34:	230a      	movs	r3, #10
 800fb36:	fb91 f3f3 	sdiv	r3, r1, r3
 800fb3a:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800fb3e:	7010      	strb	r0, [r2, #0]
 800fb40:	f06f 0009 	mvn.w	r0, #9
 800fb44:	fb00 1303 	mla	r3, r0, r3, r1
 800fb48:	3330      	adds	r3, #48	; 0x30
 800fb4a:	7053      	strb	r3, [r2, #1]
 800fb4c:	2300      	movs	r3, #0
 800fb4e:	7093      	strb	r3, [r2, #2]
 800fb50:	e7b5      	b.n	800fabe <print_e+0x36>
 800fb52:	222e      	movs	r2, #46	; 0x2e
 800fb54:	1cbb      	adds	r3, r7, #2
 800fb56:	707a      	strb	r2, [r7, #1]
 800fb58:	e7ba      	b.n	800fad0 <print_e+0x48>
 800fb5a:	f803 2b01 	strb.w	r2, [r3], #1
 800fb5e:	3c01      	subs	r4, #1
 800fb60:	e7b6      	b.n	800fad0 <print_e+0x48>
 800fb62:	f802 7b01 	strb.w	r7, [r2], #1
 800fb66:	e7bf      	b.n	800fae8 <print_e+0x60>
 800fb68:	2665      	movs	r6, #101	; 0x65
 800fb6a:	e7c3      	b.n	800faf4 <print_e+0x6c>
 800fb6c:	2645      	movs	r6, #69	; 0x45
 800fb6e:	e7c1      	b.n	800faf4 <print_e+0x6c>

0800fb70 <_gcvt>:
 800fb70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fb74:	ec55 4b10 	vmov	r4, r5, d0
 800fb78:	b088      	sub	sp, #32
 800fb7a:	4681      	mov	r9, r0
 800fb7c:	460f      	mov	r7, r1
 800fb7e:	4616      	mov	r6, r2
 800fb80:	469a      	mov	sl, r3
 800fb82:	2200      	movs	r2, #0
 800fb84:	2300      	movs	r3, #0
 800fb86:	ee10 0a10 	vmov	r0, s0
 800fb8a:	4629      	mov	r1, r5
 800fb8c:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 800fb90:	f7f0 ffb4 	bl	8000afc <__aeabi_dcmplt>
 800fb94:	b110      	cbz	r0, 800fb9c <_gcvt+0x2c>
 800fb96:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800fb9a:	461d      	mov	r5, r3
 800fb9c:	2200      	movs	r2, #0
 800fb9e:	2300      	movs	r3, #0
 800fba0:	4620      	mov	r0, r4
 800fba2:	4629      	mov	r1, r5
 800fba4:	f7f0 ffa0 	bl	8000ae8 <__aeabi_dcmpeq>
 800fba8:	b138      	cbz	r0, 800fbba <_gcvt+0x4a>
 800fbaa:	2330      	movs	r3, #48	; 0x30
 800fbac:	7033      	strb	r3, [r6, #0]
 800fbae:	2300      	movs	r3, #0
 800fbb0:	7073      	strb	r3, [r6, #1]
 800fbb2:	4630      	mov	r0, r6
 800fbb4:	b008      	add	sp, #32
 800fbb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fbba:	a350      	add	r3, pc, #320	; (adr r3, 800fcfc <_gcvt+0x18c>)
 800fbbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbc0:	4620      	mov	r0, r4
 800fbc2:	4629      	mov	r1, r5
 800fbc4:	f7f0 ffa4 	bl	8000b10 <__aeabi_dcmple>
 800fbc8:	b150      	cbz	r0, 800fbe0 <_gcvt+0x70>
 800fbca:	3f01      	subs	r7, #1
 800fbcc:	e9cd a801 	strd	sl, r8, [sp, #4]
 800fbd0:	9700      	str	r7, [sp, #0]
 800fbd2:	4622      	mov	r2, r4
 800fbd4:	462b      	mov	r3, r5
 800fbd6:	4631      	mov	r1, r6
 800fbd8:	4648      	mov	r0, r9
 800fbda:	f7ff ff55 	bl	800fa88 <print_e>
 800fbde:	e7e8      	b.n	800fbb2 <_gcvt+0x42>
 800fbe0:	4638      	mov	r0, r7
 800fbe2:	f001 f8a1 	bl	8010d28 <_mprec_log10>
 800fbe6:	4622      	mov	r2, r4
 800fbe8:	462b      	mov	r3, r5
 800fbea:	ec51 0b10 	vmov	r0, r1, d0
 800fbee:	f7f0 ff8f 	bl	8000b10 <__aeabi_dcmple>
 800fbf2:	2800      	cmp	r0, #0
 800fbf4:	d1e9      	bne.n	800fbca <_gcvt+0x5a>
 800fbf6:	2200      	movs	r2, #0
 800fbf8:	4b3f      	ldr	r3, [pc, #252]	; (800fcf8 <_gcvt+0x188>)
 800fbfa:	4620      	mov	r0, r4
 800fbfc:	4629      	mov	r1, r5
 800fbfe:	f7f0 ff7d 	bl	8000afc <__aeabi_dcmplt>
 800fc02:	aa07      	add	r2, sp, #28
 800fc04:	ab06      	add	r3, sp, #24
 800fc06:	e9cd 3200 	strd	r3, r2, [sp]
 800fc0a:	ab05      	add	r3, sp, #20
 800fc0c:	463a      	mov	r2, r7
 800fc0e:	b360      	cbz	r0, 800fc6a <_gcvt+0xfa>
 800fc10:	2103      	movs	r1, #3
 800fc12:	ec45 4b10 	vmov	d0, r4, r5
 800fc16:	4648      	mov	r0, r9
 800fc18:	f7ff f98e 	bl	800ef38 <_dtoa_r>
 800fc1c:	9a05      	ldr	r2, [sp, #20]
 800fc1e:	f242 730f 	movw	r3, #9999	; 0x270f
 800fc22:	429a      	cmp	r2, r3
 800fc24:	d023      	beq.n	800fc6e <_gcvt+0xfe>
 800fc26:	4633      	mov	r3, r6
 800fc28:	4437      	add	r7, r6
 800fc2a:	4601      	mov	r1, r0
 800fc2c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fc30:	9d05      	ldr	r5, [sp, #20]
 800fc32:	1afc      	subs	r4, r7, r3
 800fc34:	b32a      	cbz	r2, 800fc82 <_gcvt+0x112>
 800fc36:	2d00      	cmp	r5, #0
 800fc38:	dc1e      	bgt.n	800fc78 <_gcvt+0x108>
 800fc3a:	f1b8 0f00 	cmp.w	r8, #0
 800fc3e:	d102      	bne.n	800fc46 <_gcvt+0xd6>
 800fc40:	780a      	ldrb	r2, [r1, #0]
 800fc42:	2a00      	cmp	r2, #0
 800fc44:	d045      	beq.n	800fcd2 <_gcvt+0x162>
 800fc46:	429e      	cmp	r6, r3
 800fc48:	bf02      	ittt	eq
 800fc4a:	1c73      	addeq	r3, r6, #1
 800fc4c:	2230      	moveq	r2, #48	; 0x30
 800fc4e:	7032      	strbeq	r2, [r6, #0]
 800fc50:	222e      	movs	r2, #46	; 0x2e
 800fc52:	701a      	strb	r2, [r3, #0]
 800fc54:	9a05      	ldr	r2, [sp, #20]
 800fc56:	3301      	adds	r3, #1
 800fc58:	2000      	movs	r0, #0
 800fc5a:	2730      	movs	r7, #48	; 0x30
 800fc5c:	2a00      	cmp	r2, #0
 800fc5e:	4615      	mov	r5, r2
 800fc60:	db24      	blt.n	800fcac <_gcvt+0x13c>
 800fc62:	b100      	cbz	r0, 800fc66 <_gcvt+0xf6>
 800fc64:	9205      	str	r2, [sp, #20]
 800fc66:	1e4a      	subs	r2, r1, #1
 800fc68:	e02b      	b.n	800fcc2 <_gcvt+0x152>
 800fc6a:	2102      	movs	r1, #2
 800fc6c:	e7d1      	b.n	800fc12 <_gcvt+0xa2>
 800fc6e:	4601      	mov	r1, r0
 800fc70:	4630      	mov	r0, r6
 800fc72:	f7fd f852 	bl	800cd1a <strcpy>
 800fc76:	e79c      	b.n	800fbb2 <_gcvt+0x42>
 800fc78:	3d01      	subs	r5, #1
 800fc7a:	f803 2b01 	strb.w	r2, [r3], #1
 800fc7e:	9505      	str	r5, [sp, #20]
 800fc80:	e7d3      	b.n	800fc2a <_gcvt+0xba>
 800fc82:	1b2d      	subs	r5, r5, r4
 800fc84:	2730      	movs	r7, #48	; 0x30
 800fc86:	e005      	b.n	800fc94 <_gcvt+0x124>
 800fc88:	2c00      	cmp	r4, #0
 800fc8a:	dd06      	ble.n	800fc9a <_gcvt+0x12a>
 800fc8c:	f803 7b01 	strb.w	r7, [r3], #1
 800fc90:	3c01      	subs	r4, #1
 800fc92:	2201      	movs	r2, #1
 800fc94:	1928      	adds	r0, r5, r4
 800fc96:	2800      	cmp	r0, #0
 800fc98:	dcf6      	bgt.n	800fc88 <_gcvt+0x118>
 800fc9a:	2a00      	cmp	r2, #0
 800fc9c:	d0cd      	beq.n	800fc3a <_gcvt+0xca>
 800fc9e:	9005      	str	r0, [sp, #20]
 800fca0:	e7cb      	b.n	800fc3a <_gcvt+0xca>
 800fca2:	f803 7b01 	strb.w	r7, [r3], #1
 800fca6:	3c01      	subs	r4, #1
 800fca8:	2001      	movs	r0, #1
 800fcaa:	e7d7      	b.n	800fc5c <_gcvt+0xec>
 800fcac:	2c00      	cmp	r4, #0
 800fcae:	f102 0201 	add.w	r2, r2, #1
 800fcb2:	dcf6      	bgt.n	800fca2 <_gcvt+0x132>
 800fcb4:	2800      	cmp	r0, #0
 800fcb6:	d0d6      	beq.n	800fc66 <_gcvt+0xf6>
 800fcb8:	9505      	str	r5, [sp, #20]
 800fcba:	e7d4      	b.n	800fc66 <_gcvt+0xf6>
 800fcbc:	f803 1b01 	strb.w	r1, [r3], #1
 800fcc0:	3c01      	subs	r4, #1
 800fcc2:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 800fcc6:	b109      	cbz	r1, 800fccc <_gcvt+0x15c>
 800fcc8:	2c00      	cmp	r4, #0
 800fcca:	dcf7      	bgt.n	800fcbc <_gcvt+0x14c>
 800fccc:	f1b8 0f00 	cmp.w	r8, #0
 800fcd0:	d10b      	bne.n	800fcea <_gcvt+0x17a>
 800fcd2:	2200      	movs	r2, #0
 800fcd4:	701a      	strb	r2, [r3, #0]
 800fcd6:	e76c      	b.n	800fbb2 <_gcvt+0x42>
 800fcd8:	f802 5b01 	strb.w	r5, [r2], #1
 800fcdc:	1a81      	subs	r1, r0, r2
 800fcde:	2900      	cmp	r1, #0
 800fce0:	dcfa      	bgt.n	800fcd8 <_gcvt+0x168>
 800fce2:	2c00      	cmp	r4, #0
 800fce4:	bfa8      	it	ge
 800fce6:	191b      	addge	r3, r3, r4
 800fce8:	e7f3      	b.n	800fcd2 <_gcvt+0x162>
 800fcea:	461a      	mov	r2, r3
 800fcec:	1918      	adds	r0, r3, r4
 800fcee:	2530      	movs	r5, #48	; 0x30
 800fcf0:	e7f4      	b.n	800fcdc <_gcvt+0x16c>
 800fcf2:	bf00      	nop
 800fcf4:	f3af 8000 	nop.w
 800fcf8:	3ff00000 	.word	0x3ff00000
 800fcfc:	eb1c432d 	.word	0xeb1c432d
 800fd00:	3f1a36e2 	.word	0x3f1a36e2

0800fd04 <__libc_fini_array>:
 800fd04:	b538      	push	{r3, r4, r5, lr}
 800fd06:	4d07      	ldr	r5, [pc, #28]	; (800fd24 <__libc_fini_array+0x20>)
 800fd08:	4c07      	ldr	r4, [pc, #28]	; (800fd28 <__libc_fini_array+0x24>)
 800fd0a:	1b64      	subs	r4, r4, r5
 800fd0c:	10a4      	asrs	r4, r4, #2
 800fd0e:	b91c      	cbnz	r4, 800fd18 <__libc_fini_array+0x14>
 800fd10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fd14:	f001 bbd0 	b.w	80114b8 <_fini>
 800fd18:	3c01      	subs	r4, #1
 800fd1a:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800fd1e:	4798      	blx	r3
 800fd20:	e7f5      	b.n	800fd0e <__libc_fini_array+0xa>
 800fd22:	bf00      	nop
 800fd24:	08011dc4 	.word	0x08011dc4
 800fd28:	08011dc8 	.word	0x08011dc8

0800fd2c <_malloc_trim_r>:
 800fd2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd30:	4605      	mov	r5, r0
 800fd32:	2008      	movs	r0, #8
 800fd34:	460c      	mov	r4, r1
 800fd36:	f7ff f851 	bl	800eddc <sysconf>
 800fd3a:	4f23      	ldr	r7, [pc, #140]	; (800fdc8 <_malloc_trim_r+0x9c>)
 800fd3c:	4680      	mov	r8, r0
 800fd3e:	4628      	mov	r0, r5
 800fd40:	f7fc ffa0 	bl	800cc84 <__malloc_lock>
 800fd44:	68bb      	ldr	r3, [r7, #8]
 800fd46:	685e      	ldr	r6, [r3, #4]
 800fd48:	f026 0603 	bic.w	r6, r6, #3
 800fd4c:	1b34      	subs	r4, r6, r4
 800fd4e:	3c11      	subs	r4, #17
 800fd50:	4444      	add	r4, r8
 800fd52:	fbb4 f4f8 	udiv	r4, r4, r8
 800fd56:	3c01      	subs	r4, #1
 800fd58:	fb08 f404 	mul.w	r4, r8, r4
 800fd5c:	45a0      	cmp	r8, r4
 800fd5e:	dd05      	ble.n	800fd6c <_malloc_trim_r+0x40>
 800fd60:	4628      	mov	r0, r5
 800fd62:	f7fc ff95 	bl	800cc90 <__malloc_unlock>
 800fd66:	2000      	movs	r0, #0
 800fd68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd6c:	2100      	movs	r1, #0
 800fd6e:	4628      	mov	r0, r5
 800fd70:	f7fc ff94 	bl	800cc9c <_sbrk_r>
 800fd74:	68bb      	ldr	r3, [r7, #8]
 800fd76:	4433      	add	r3, r6
 800fd78:	4298      	cmp	r0, r3
 800fd7a:	d1f1      	bne.n	800fd60 <_malloc_trim_r+0x34>
 800fd7c:	4261      	negs	r1, r4
 800fd7e:	4628      	mov	r0, r5
 800fd80:	f7fc ff8c 	bl	800cc9c <_sbrk_r>
 800fd84:	3001      	adds	r0, #1
 800fd86:	d110      	bne.n	800fdaa <_malloc_trim_r+0x7e>
 800fd88:	2100      	movs	r1, #0
 800fd8a:	4628      	mov	r0, r5
 800fd8c:	f7fc ff86 	bl	800cc9c <_sbrk_r>
 800fd90:	68ba      	ldr	r2, [r7, #8]
 800fd92:	1a83      	subs	r3, r0, r2
 800fd94:	2b0f      	cmp	r3, #15
 800fd96:	dde3      	ble.n	800fd60 <_malloc_trim_r+0x34>
 800fd98:	490c      	ldr	r1, [pc, #48]	; (800fdcc <_malloc_trim_r+0xa0>)
 800fd9a:	6809      	ldr	r1, [r1, #0]
 800fd9c:	1a40      	subs	r0, r0, r1
 800fd9e:	490c      	ldr	r1, [pc, #48]	; (800fdd0 <_malloc_trim_r+0xa4>)
 800fda0:	f043 0301 	orr.w	r3, r3, #1
 800fda4:	6008      	str	r0, [r1, #0]
 800fda6:	6053      	str	r3, [r2, #4]
 800fda8:	e7da      	b.n	800fd60 <_malloc_trim_r+0x34>
 800fdaa:	68bb      	ldr	r3, [r7, #8]
 800fdac:	4a08      	ldr	r2, [pc, #32]	; (800fdd0 <_malloc_trim_r+0xa4>)
 800fdae:	1b36      	subs	r6, r6, r4
 800fdb0:	f046 0601 	orr.w	r6, r6, #1
 800fdb4:	605e      	str	r6, [r3, #4]
 800fdb6:	6813      	ldr	r3, [r2, #0]
 800fdb8:	4628      	mov	r0, r5
 800fdba:	1b1c      	subs	r4, r3, r4
 800fdbc:	6014      	str	r4, [r2, #0]
 800fdbe:	f7fc ff67 	bl	800cc90 <__malloc_unlock>
 800fdc2:	2001      	movs	r0, #1
 800fdc4:	e7d0      	b.n	800fd68 <_malloc_trim_r+0x3c>
 800fdc6:	bf00      	nop
 800fdc8:	20000510 	.word	0x20000510
 800fdcc:	20000918 	.word	0x20000918
 800fdd0:	20000b20 	.word	0x20000b20

0800fdd4 <_free_r>:
 800fdd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fdd8:	4604      	mov	r4, r0
 800fdda:	4688      	mov	r8, r1
 800fddc:	2900      	cmp	r1, #0
 800fdde:	f000 80ab 	beq.w	800ff38 <_free_r+0x164>
 800fde2:	f7fc ff4f 	bl	800cc84 <__malloc_lock>
 800fde6:	f858 2c04 	ldr.w	r2, [r8, #-4]
 800fdea:	4d54      	ldr	r5, [pc, #336]	; (800ff3c <_free_r+0x168>)
 800fdec:	f022 0001 	bic.w	r0, r2, #1
 800fdf0:	f1a8 0308 	sub.w	r3, r8, #8
 800fdf4:	181f      	adds	r7, r3, r0
 800fdf6:	68a9      	ldr	r1, [r5, #8]
 800fdf8:	687e      	ldr	r6, [r7, #4]
 800fdfa:	42b9      	cmp	r1, r7
 800fdfc:	f026 0603 	bic.w	r6, r6, #3
 800fe00:	f002 0201 	and.w	r2, r2, #1
 800fe04:	d11b      	bne.n	800fe3e <_free_r+0x6a>
 800fe06:	4430      	add	r0, r6
 800fe08:	b93a      	cbnz	r2, 800fe1a <_free_r+0x46>
 800fe0a:	f858 2c08 	ldr.w	r2, [r8, #-8]
 800fe0e:	1a9b      	subs	r3, r3, r2
 800fe10:	4410      	add	r0, r2
 800fe12:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 800fe16:	60ca      	str	r2, [r1, #12]
 800fe18:	6091      	str	r1, [r2, #8]
 800fe1a:	f040 0201 	orr.w	r2, r0, #1
 800fe1e:	605a      	str	r2, [r3, #4]
 800fe20:	60ab      	str	r3, [r5, #8]
 800fe22:	4b47      	ldr	r3, [pc, #284]	; (800ff40 <_free_r+0x16c>)
 800fe24:	681b      	ldr	r3, [r3, #0]
 800fe26:	4283      	cmp	r3, r0
 800fe28:	d804      	bhi.n	800fe34 <_free_r+0x60>
 800fe2a:	4b46      	ldr	r3, [pc, #280]	; (800ff44 <_free_r+0x170>)
 800fe2c:	4620      	mov	r0, r4
 800fe2e:	6819      	ldr	r1, [r3, #0]
 800fe30:	f7ff ff7c 	bl	800fd2c <_malloc_trim_r>
 800fe34:	4620      	mov	r0, r4
 800fe36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fe3a:	f7fc bf29 	b.w	800cc90 <__malloc_unlock>
 800fe3e:	607e      	str	r6, [r7, #4]
 800fe40:	2a00      	cmp	r2, #0
 800fe42:	d139      	bne.n	800feb8 <_free_r+0xe4>
 800fe44:	f858 1c08 	ldr.w	r1, [r8, #-8]
 800fe48:	1a5b      	subs	r3, r3, r1
 800fe4a:	4408      	add	r0, r1
 800fe4c:	6899      	ldr	r1, [r3, #8]
 800fe4e:	f105 0c08 	add.w	ip, r5, #8
 800fe52:	4561      	cmp	r1, ip
 800fe54:	d032      	beq.n	800febc <_free_r+0xe8>
 800fe56:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 800fe5a:	f8c1 c00c 	str.w	ip, [r1, #12]
 800fe5e:	f8cc 1008 	str.w	r1, [ip, #8]
 800fe62:	19b9      	adds	r1, r7, r6
 800fe64:	6849      	ldr	r1, [r1, #4]
 800fe66:	07c9      	lsls	r1, r1, #31
 800fe68:	d40a      	bmi.n	800fe80 <_free_r+0xac>
 800fe6a:	4430      	add	r0, r6
 800fe6c:	68b9      	ldr	r1, [r7, #8]
 800fe6e:	bb3a      	cbnz	r2, 800fec0 <_free_r+0xec>
 800fe70:	4e35      	ldr	r6, [pc, #212]	; (800ff48 <_free_r+0x174>)
 800fe72:	42b1      	cmp	r1, r6
 800fe74:	d124      	bne.n	800fec0 <_free_r+0xec>
 800fe76:	e9c5 3304 	strd	r3, r3, [r5, #16]
 800fe7a:	e9c3 1102 	strd	r1, r1, [r3, #8]
 800fe7e:	2201      	movs	r2, #1
 800fe80:	f040 0101 	orr.w	r1, r0, #1
 800fe84:	6059      	str	r1, [r3, #4]
 800fe86:	5018      	str	r0, [r3, r0]
 800fe88:	2a00      	cmp	r2, #0
 800fe8a:	d1d3      	bne.n	800fe34 <_free_r+0x60>
 800fe8c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800fe90:	d21a      	bcs.n	800fec8 <_free_r+0xf4>
 800fe92:	08c0      	lsrs	r0, r0, #3
 800fe94:	1081      	asrs	r1, r0, #2
 800fe96:	2201      	movs	r2, #1
 800fe98:	408a      	lsls	r2, r1
 800fe9a:	6869      	ldr	r1, [r5, #4]
 800fe9c:	3001      	adds	r0, #1
 800fe9e:	430a      	orrs	r2, r1
 800fea0:	606a      	str	r2, [r5, #4]
 800fea2:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 800fea6:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 800feaa:	3a08      	subs	r2, #8
 800feac:	e9c3 1202 	strd	r1, r2, [r3, #8]
 800feb0:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 800feb4:	60cb      	str	r3, [r1, #12]
 800feb6:	e7bd      	b.n	800fe34 <_free_r+0x60>
 800feb8:	2200      	movs	r2, #0
 800feba:	e7d2      	b.n	800fe62 <_free_r+0x8e>
 800febc:	2201      	movs	r2, #1
 800febe:	e7d0      	b.n	800fe62 <_free_r+0x8e>
 800fec0:	68fe      	ldr	r6, [r7, #12]
 800fec2:	60ce      	str	r6, [r1, #12]
 800fec4:	60b1      	str	r1, [r6, #8]
 800fec6:	e7db      	b.n	800fe80 <_free_r+0xac>
 800fec8:	0a42      	lsrs	r2, r0, #9
 800feca:	2a04      	cmp	r2, #4
 800fecc:	d813      	bhi.n	800fef6 <_free_r+0x122>
 800fece:	0982      	lsrs	r2, r0, #6
 800fed0:	3238      	adds	r2, #56	; 0x38
 800fed2:	1c51      	adds	r1, r2, #1
 800fed4:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 800fed8:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 800fedc:	428e      	cmp	r6, r1
 800fede:	d124      	bne.n	800ff2a <_free_r+0x156>
 800fee0:	2001      	movs	r0, #1
 800fee2:	1092      	asrs	r2, r2, #2
 800fee4:	fa00 f202 	lsl.w	r2, r0, r2
 800fee8:	6868      	ldr	r0, [r5, #4]
 800feea:	4302      	orrs	r2, r0
 800feec:	606a      	str	r2, [r5, #4]
 800feee:	e9c3 1602 	strd	r1, r6, [r3, #8]
 800fef2:	60b3      	str	r3, [r6, #8]
 800fef4:	e7de      	b.n	800feb4 <_free_r+0xe0>
 800fef6:	2a14      	cmp	r2, #20
 800fef8:	d801      	bhi.n	800fefe <_free_r+0x12a>
 800fefa:	325b      	adds	r2, #91	; 0x5b
 800fefc:	e7e9      	b.n	800fed2 <_free_r+0xfe>
 800fefe:	2a54      	cmp	r2, #84	; 0x54
 800ff00:	d802      	bhi.n	800ff08 <_free_r+0x134>
 800ff02:	0b02      	lsrs	r2, r0, #12
 800ff04:	326e      	adds	r2, #110	; 0x6e
 800ff06:	e7e4      	b.n	800fed2 <_free_r+0xfe>
 800ff08:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800ff0c:	d802      	bhi.n	800ff14 <_free_r+0x140>
 800ff0e:	0bc2      	lsrs	r2, r0, #15
 800ff10:	3277      	adds	r2, #119	; 0x77
 800ff12:	e7de      	b.n	800fed2 <_free_r+0xfe>
 800ff14:	f240 5154 	movw	r1, #1364	; 0x554
 800ff18:	428a      	cmp	r2, r1
 800ff1a:	bf9a      	itte	ls
 800ff1c:	0c82      	lsrls	r2, r0, #18
 800ff1e:	327c      	addls	r2, #124	; 0x7c
 800ff20:	227e      	movhi	r2, #126	; 0x7e
 800ff22:	e7d6      	b.n	800fed2 <_free_r+0xfe>
 800ff24:	6889      	ldr	r1, [r1, #8]
 800ff26:	428e      	cmp	r6, r1
 800ff28:	d004      	beq.n	800ff34 <_free_r+0x160>
 800ff2a:	684a      	ldr	r2, [r1, #4]
 800ff2c:	f022 0203 	bic.w	r2, r2, #3
 800ff30:	4282      	cmp	r2, r0
 800ff32:	d8f7      	bhi.n	800ff24 <_free_r+0x150>
 800ff34:	68ce      	ldr	r6, [r1, #12]
 800ff36:	e7da      	b.n	800feee <_free_r+0x11a>
 800ff38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff3c:	20000510 	.word	0x20000510
 800ff40:	2000091c 	.word	0x2000091c
 800ff44:	20000b50 	.word	0x20000b50
 800ff48:	20000518 	.word	0x20000518

0800ff4c <rshift>:
 800ff4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ff4e:	6906      	ldr	r6, [r0, #16]
 800ff50:	114b      	asrs	r3, r1, #5
 800ff52:	429e      	cmp	r6, r3
 800ff54:	f100 0414 	add.w	r4, r0, #20
 800ff58:	dd30      	ble.n	800ffbc <rshift+0x70>
 800ff5a:	f011 011f 	ands.w	r1, r1, #31
 800ff5e:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800ff62:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800ff66:	d108      	bne.n	800ff7a <rshift+0x2e>
 800ff68:	4621      	mov	r1, r4
 800ff6a:	42b2      	cmp	r2, r6
 800ff6c:	460b      	mov	r3, r1
 800ff6e:	d211      	bcs.n	800ff94 <rshift+0x48>
 800ff70:	f852 3b04 	ldr.w	r3, [r2], #4
 800ff74:	f841 3b04 	str.w	r3, [r1], #4
 800ff78:	e7f7      	b.n	800ff6a <rshift+0x1e>
 800ff7a:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800ff7e:	f1c1 0c20 	rsb	ip, r1, #32
 800ff82:	40cd      	lsrs	r5, r1
 800ff84:	3204      	adds	r2, #4
 800ff86:	4623      	mov	r3, r4
 800ff88:	42b2      	cmp	r2, r6
 800ff8a:	4617      	mov	r7, r2
 800ff8c:	d30c      	bcc.n	800ffa8 <rshift+0x5c>
 800ff8e:	601d      	str	r5, [r3, #0]
 800ff90:	b105      	cbz	r5, 800ff94 <rshift+0x48>
 800ff92:	3304      	adds	r3, #4
 800ff94:	1b1a      	subs	r2, r3, r4
 800ff96:	42a3      	cmp	r3, r4
 800ff98:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ff9c:	bf08      	it	eq
 800ff9e:	2300      	moveq	r3, #0
 800ffa0:	6102      	str	r2, [r0, #16]
 800ffa2:	bf08      	it	eq
 800ffa4:	6143      	streq	r3, [r0, #20]
 800ffa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ffa8:	683f      	ldr	r7, [r7, #0]
 800ffaa:	fa07 f70c 	lsl.w	r7, r7, ip
 800ffae:	433d      	orrs	r5, r7
 800ffb0:	f843 5b04 	str.w	r5, [r3], #4
 800ffb4:	f852 5b04 	ldr.w	r5, [r2], #4
 800ffb8:	40cd      	lsrs	r5, r1
 800ffba:	e7e5      	b.n	800ff88 <rshift+0x3c>
 800ffbc:	4623      	mov	r3, r4
 800ffbe:	e7e9      	b.n	800ff94 <rshift+0x48>

0800ffc0 <__hexdig_fun>:
 800ffc0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800ffc4:	2b09      	cmp	r3, #9
 800ffc6:	d802      	bhi.n	800ffce <__hexdig_fun+0xe>
 800ffc8:	3820      	subs	r0, #32
 800ffca:	b2c0      	uxtb	r0, r0
 800ffcc:	4770      	bx	lr
 800ffce:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800ffd2:	2b05      	cmp	r3, #5
 800ffd4:	d801      	bhi.n	800ffda <__hexdig_fun+0x1a>
 800ffd6:	3847      	subs	r0, #71	; 0x47
 800ffd8:	e7f7      	b.n	800ffca <__hexdig_fun+0xa>
 800ffda:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800ffde:	2b05      	cmp	r3, #5
 800ffe0:	d801      	bhi.n	800ffe6 <__hexdig_fun+0x26>
 800ffe2:	3827      	subs	r0, #39	; 0x27
 800ffe4:	e7f1      	b.n	800ffca <__hexdig_fun+0xa>
 800ffe6:	2000      	movs	r0, #0
 800ffe8:	4770      	bx	lr

0800ffea <__gethex>:
 800ffea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ffee:	b08b      	sub	sp, #44	; 0x2c
 800fff0:	468a      	mov	sl, r1
 800fff2:	9002      	str	r0, [sp, #8]
 800fff4:	9816      	ldr	r0, [sp, #88]	; 0x58
 800fff6:	9306      	str	r3, [sp, #24]
 800fff8:	4690      	mov	r8, r2
 800fffa:	f000 facd 	bl	8010598 <__localeconv_l>
 800fffe:	6803      	ldr	r3, [r0, #0]
 8010000:	9303      	str	r3, [sp, #12]
 8010002:	4618      	mov	r0, r3
 8010004:	f7f0 f8ee 	bl	80001e4 <strlen>
 8010008:	9b03      	ldr	r3, [sp, #12]
 801000a:	9001      	str	r0, [sp, #4]
 801000c:	4403      	add	r3, r0
 801000e:	f04f 0b00 	mov.w	fp, #0
 8010012:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8010016:	9307      	str	r3, [sp, #28]
 8010018:	f8da 3000 	ldr.w	r3, [sl]
 801001c:	3302      	adds	r3, #2
 801001e:	461f      	mov	r7, r3
 8010020:	f813 0b01 	ldrb.w	r0, [r3], #1
 8010024:	2830      	cmp	r0, #48	; 0x30
 8010026:	d06c      	beq.n	8010102 <__gethex+0x118>
 8010028:	f7ff ffca 	bl	800ffc0 <__hexdig_fun>
 801002c:	4604      	mov	r4, r0
 801002e:	2800      	cmp	r0, #0
 8010030:	d16a      	bne.n	8010108 <__gethex+0x11e>
 8010032:	9a01      	ldr	r2, [sp, #4]
 8010034:	9903      	ldr	r1, [sp, #12]
 8010036:	4638      	mov	r0, r7
 8010038:	f001 f8ae 	bl	8011198 <strncmp>
 801003c:	2800      	cmp	r0, #0
 801003e:	d166      	bne.n	801010e <__gethex+0x124>
 8010040:	9b01      	ldr	r3, [sp, #4]
 8010042:	5cf8      	ldrb	r0, [r7, r3]
 8010044:	18fe      	adds	r6, r7, r3
 8010046:	f7ff ffbb 	bl	800ffc0 <__hexdig_fun>
 801004a:	2800      	cmp	r0, #0
 801004c:	d062      	beq.n	8010114 <__gethex+0x12a>
 801004e:	4633      	mov	r3, r6
 8010050:	7818      	ldrb	r0, [r3, #0]
 8010052:	2830      	cmp	r0, #48	; 0x30
 8010054:	461f      	mov	r7, r3
 8010056:	f103 0301 	add.w	r3, r3, #1
 801005a:	d0f9      	beq.n	8010050 <__gethex+0x66>
 801005c:	f7ff ffb0 	bl	800ffc0 <__hexdig_fun>
 8010060:	fab0 f580 	clz	r5, r0
 8010064:	096d      	lsrs	r5, r5, #5
 8010066:	4634      	mov	r4, r6
 8010068:	f04f 0b01 	mov.w	fp, #1
 801006c:	463a      	mov	r2, r7
 801006e:	4616      	mov	r6, r2
 8010070:	3201      	adds	r2, #1
 8010072:	7830      	ldrb	r0, [r6, #0]
 8010074:	f7ff ffa4 	bl	800ffc0 <__hexdig_fun>
 8010078:	2800      	cmp	r0, #0
 801007a:	d1f8      	bne.n	801006e <__gethex+0x84>
 801007c:	9a01      	ldr	r2, [sp, #4]
 801007e:	9903      	ldr	r1, [sp, #12]
 8010080:	4630      	mov	r0, r6
 8010082:	f001 f889 	bl	8011198 <strncmp>
 8010086:	b950      	cbnz	r0, 801009e <__gethex+0xb4>
 8010088:	b954      	cbnz	r4, 80100a0 <__gethex+0xb6>
 801008a:	9b01      	ldr	r3, [sp, #4]
 801008c:	18f4      	adds	r4, r6, r3
 801008e:	4622      	mov	r2, r4
 8010090:	4616      	mov	r6, r2
 8010092:	3201      	adds	r2, #1
 8010094:	7830      	ldrb	r0, [r6, #0]
 8010096:	f7ff ff93 	bl	800ffc0 <__hexdig_fun>
 801009a:	2800      	cmp	r0, #0
 801009c:	d1f8      	bne.n	8010090 <__gethex+0xa6>
 801009e:	b10c      	cbz	r4, 80100a4 <__gethex+0xba>
 80100a0:	1ba4      	subs	r4, r4, r6
 80100a2:	00a4      	lsls	r4, r4, #2
 80100a4:	7833      	ldrb	r3, [r6, #0]
 80100a6:	2b50      	cmp	r3, #80	; 0x50
 80100a8:	d001      	beq.n	80100ae <__gethex+0xc4>
 80100aa:	2b70      	cmp	r3, #112	; 0x70
 80100ac:	d140      	bne.n	8010130 <__gethex+0x146>
 80100ae:	7873      	ldrb	r3, [r6, #1]
 80100b0:	2b2b      	cmp	r3, #43	; 0x2b
 80100b2:	d031      	beq.n	8010118 <__gethex+0x12e>
 80100b4:	2b2d      	cmp	r3, #45	; 0x2d
 80100b6:	d033      	beq.n	8010120 <__gethex+0x136>
 80100b8:	1c71      	adds	r1, r6, #1
 80100ba:	f04f 0900 	mov.w	r9, #0
 80100be:	7808      	ldrb	r0, [r1, #0]
 80100c0:	f7ff ff7e 	bl	800ffc0 <__hexdig_fun>
 80100c4:	1e43      	subs	r3, r0, #1
 80100c6:	b2db      	uxtb	r3, r3
 80100c8:	2b18      	cmp	r3, #24
 80100ca:	d831      	bhi.n	8010130 <__gethex+0x146>
 80100cc:	f1a0 0210 	sub.w	r2, r0, #16
 80100d0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80100d4:	f7ff ff74 	bl	800ffc0 <__hexdig_fun>
 80100d8:	1e43      	subs	r3, r0, #1
 80100da:	b2db      	uxtb	r3, r3
 80100dc:	2b18      	cmp	r3, #24
 80100de:	d922      	bls.n	8010126 <__gethex+0x13c>
 80100e0:	f1b9 0f00 	cmp.w	r9, #0
 80100e4:	d000      	beq.n	80100e8 <__gethex+0xfe>
 80100e6:	4252      	negs	r2, r2
 80100e8:	4414      	add	r4, r2
 80100ea:	f8ca 1000 	str.w	r1, [sl]
 80100ee:	b30d      	cbz	r5, 8010134 <__gethex+0x14a>
 80100f0:	f1bb 0f00 	cmp.w	fp, #0
 80100f4:	bf0c      	ite	eq
 80100f6:	2706      	moveq	r7, #6
 80100f8:	2700      	movne	r7, #0
 80100fa:	4638      	mov	r0, r7
 80100fc:	b00b      	add	sp, #44	; 0x2c
 80100fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010102:	f10b 0b01 	add.w	fp, fp, #1
 8010106:	e78a      	b.n	801001e <__gethex+0x34>
 8010108:	2500      	movs	r5, #0
 801010a:	462c      	mov	r4, r5
 801010c:	e7ae      	b.n	801006c <__gethex+0x82>
 801010e:	463e      	mov	r6, r7
 8010110:	2501      	movs	r5, #1
 8010112:	e7c7      	b.n	80100a4 <__gethex+0xba>
 8010114:	4604      	mov	r4, r0
 8010116:	e7fb      	b.n	8010110 <__gethex+0x126>
 8010118:	f04f 0900 	mov.w	r9, #0
 801011c:	1cb1      	adds	r1, r6, #2
 801011e:	e7ce      	b.n	80100be <__gethex+0xd4>
 8010120:	f04f 0901 	mov.w	r9, #1
 8010124:	e7fa      	b.n	801011c <__gethex+0x132>
 8010126:	230a      	movs	r3, #10
 8010128:	fb03 0202 	mla	r2, r3, r2, r0
 801012c:	3a10      	subs	r2, #16
 801012e:	e7cf      	b.n	80100d0 <__gethex+0xe6>
 8010130:	4631      	mov	r1, r6
 8010132:	e7da      	b.n	80100ea <__gethex+0x100>
 8010134:	1bf3      	subs	r3, r6, r7
 8010136:	3b01      	subs	r3, #1
 8010138:	4629      	mov	r1, r5
 801013a:	2b07      	cmp	r3, #7
 801013c:	dc49      	bgt.n	80101d2 <__gethex+0x1e8>
 801013e:	9802      	ldr	r0, [sp, #8]
 8010140:	f000 fa59 	bl	80105f6 <_Balloc>
 8010144:	9b01      	ldr	r3, [sp, #4]
 8010146:	f100 0914 	add.w	r9, r0, #20
 801014a:	f04f 0b00 	mov.w	fp, #0
 801014e:	f1c3 0301 	rsb	r3, r3, #1
 8010152:	4605      	mov	r5, r0
 8010154:	f8cd 9010 	str.w	r9, [sp, #16]
 8010158:	46da      	mov	sl, fp
 801015a:	9308      	str	r3, [sp, #32]
 801015c:	42b7      	cmp	r7, r6
 801015e:	d33b      	bcc.n	80101d8 <__gethex+0x1ee>
 8010160:	9804      	ldr	r0, [sp, #16]
 8010162:	f840 ab04 	str.w	sl, [r0], #4
 8010166:	eba0 0009 	sub.w	r0, r0, r9
 801016a:	1080      	asrs	r0, r0, #2
 801016c:	6128      	str	r0, [r5, #16]
 801016e:	0147      	lsls	r7, r0, #5
 8010170:	4650      	mov	r0, sl
 8010172:	f000 fae7 	bl	8010744 <__hi0bits>
 8010176:	f8d8 6000 	ldr.w	r6, [r8]
 801017a:	1a3f      	subs	r7, r7, r0
 801017c:	42b7      	cmp	r7, r6
 801017e:	dd64      	ble.n	801024a <__gethex+0x260>
 8010180:	1bbf      	subs	r7, r7, r6
 8010182:	4639      	mov	r1, r7
 8010184:	4628      	mov	r0, r5
 8010186:	f000 fe07 	bl	8010d98 <__any_on>
 801018a:	4682      	mov	sl, r0
 801018c:	b178      	cbz	r0, 80101ae <__gethex+0x1c4>
 801018e:	1e7b      	subs	r3, r7, #1
 8010190:	1159      	asrs	r1, r3, #5
 8010192:	f003 021f 	and.w	r2, r3, #31
 8010196:	f04f 0a01 	mov.w	sl, #1
 801019a:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801019e:	fa0a f202 	lsl.w	r2, sl, r2
 80101a2:	420a      	tst	r2, r1
 80101a4:	d003      	beq.n	80101ae <__gethex+0x1c4>
 80101a6:	4553      	cmp	r3, sl
 80101a8:	dc46      	bgt.n	8010238 <__gethex+0x24e>
 80101aa:	f04f 0a02 	mov.w	sl, #2
 80101ae:	4639      	mov	r1, r7
 80101b0:	4628      	mov	r0, r5
 80101b2:	f7ff fecb 	bl	800ff4c <rshift>
 80101b6:	443c      	add	r4, r7
 80101b8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80101bc:	42a3      	cmp	r3, r4
 80101be:	da52      	bge.n	8010266 <__gethex+0x27c>
 80101c0:	4629      	mov	r1, r5
 80101c2:	9802      	ldr	r0, [sp, #8]
 80101c4:	f000 fa3c 	bl	8010640 <_Bfree>
 80101c8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80101ca:	2300      	movs	r3, #0
 80101cc:	6013      	str	r3, [r2, #0]
 80101ce:	27a3      	movs	r7, #163	; 0xa3
 80101d0:	e793      	b.n	80100fa <__gethex+0x110>
 80101d2:	3101      	adds	r1, #1
 80101d4:	105b      	asrs	r3, r3, #1
 80101d6:	e7b0      	b.n	801013a <__gethex+0x150>
 80101d8:	1e73      	subs	r3, r6, #1
 80101da:	9305      	str	r3, [sp, #20]
 80101dc:	9a07      	ldr	r2, [sp, #28]
 80101de:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80101e2:	4293      	cmp	r3, r2
 80101e4:	d018      	beq.n	8010218 <__gethex+0x22e>
 80101e6:	f1bb 0f20 	cmp.w	fp, #32
 80101ea:	d107      	bne.n	80101fc <__gethex+0x212>
 80101ec:	9b04      	ldr	r3, [sp, #16]
 80101ee:	f8c3 a000 	str.w	sl, [r3]
 80101f2:	3304      	adds	r3, #4
 80101f4:	f04f 0a00 	mov.w	sl, #0
 80101f8:	9304      	str	r3, [sp, #16]
 80101fa:	46d3      	mov	fp, sl
 80101fc:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8010200:	f7ff fede 	bl	800ffc0 <__hexdig_fun>
 8010204:	f000 000f 	and.w	r0, r0, #15
 8010208:	fa00 f00b 	lsl.w	r0, r0, fp
 801020c:	ea4a 0a00 	orr.w	sl, sl, r0
 8010210:	f10b 0b04 	add.w	fp, fp, #4
 8010214:	9b05      	ldr	r3, [sp, #20]
 8010216:	e00d      	b.n	8010234 <__gethex+0x24a>
 8010218:	9b05      	ldr	r3, [sp, #20]
 801021a:	9a08      	ldr	r2, [sp, #32]
 801021c:	4413      	add	r3, r2
 801021e:	42bb      	cmp	r3, r7
 8010220:	d3e1      	bcc.n	80101e6 <__gethex+0x1fc>
 8010222:	4618      	mov	r0, r3
 8010224:	9a01      	ldr	r2, [sp, #4]
 8010226:	9903      	ldr	r1, [sp, #12]
 8010228:	9309      	str	r3, [sp, #36]	; 0x24
 801022a:	f000 ffb5 	bl	8011198 <strncmp>
 801022e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010230:	2800      	cmp	r0, #0
 8010232:	d1d8      	bne.n	80101e6 <__gethex+0x1fc>
 8010234:	461e      	mov	r6, r3
 8010236:	e791      	b.n	801015c <__gethex+0x172>
 8010238:	1eb9      	subs	r1, r7, #2
 801023a:	4628      	mov	r0, r5
 801023c:	f000 fdac 	bl	8010d98 <__any_on>
 8010240:	2800      	cmp	r0, #0
 8010242:	d0b2      	beq.n	80101aa <__gethex+0x1c0>
 8010244:	f04f 0a03 	mov.w	sl, #3
 8010248:	e7b1      	b.n	80101ae <__gethex+0x1c4>
 801024a:	da09      	bge.n	8010260 <__gethex+0x276>
 801024c:	1bf7      	subs	r7, r6, r7
 801024e:	4629      	mov	r1, r5
 8010250:	463a      	mov	r2, r7
 8010252:	9802      	ldr	r0, [sp, #8]
 8010254:	f000 fba4 	bl	80109a0 <__lshift>
 8010258:	1be4      	subs	r4, r4, r7
 801025a:	4605      	mov	r5, r0
 801025c:	f100 0914 	add.w	r9, r0, #20
 8010260:	f04f 0a00 	mov.w	sl, #0
 8010264:	e7a8      	b.n	80101b8 <__gethex+0x1ce>
 8010266:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801026a:	42a0      	cmp	r0, r4
 801026c:	dd6a      	ble.n	8010344 <__gethex+0x35a>
 801026e:	1b04      	subs	r4, r0, r4
 8010270:	42a6      	cmp	r6, r4
 8010272:	dc2e      	bgt.n	80102d2 <__gethex+0x2e8>
 8010274:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010278:	2b02      	cmp	r3, #2
 801027a:	d022      	beq.n	80102c2 <__gethex+0x2d8>
 801027c:	2b03      	cmp	r3, #3
 801027e:	d024      	beq.n	80102ca <__gethex+0x2e0>
 8010280:	2b01      	cmp	r3, #1
 8010282:	d115      	bne.n	80102b0 <__gethex+0x2c6>
 8010284:	42a6      	cmp	r6, r4
 8010286:	d113      	bne.n	80102b0 <__gethex+0x2c6>
 8010288:	2e01      	cmp	r6, #1
 801028a:	dc0b      	bgt.n	80102a4 <__gethex+0x2ba>
 801028c:	9a06      	ldr	r2, [sp, #24]
 801028e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010292:	6013      	str	r3, [r2, #0]
 8010294:	2301      	movs	r3, #1
 8010296:	612b      	str	r3, [r5, #16]
 8010298:	f8c9 3000 	str.w	r3, [r9]
 801029c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801029e:	2762      	movs	r7, #98	; 0x62
 80102a0:	601d      	str	r5, [r3, #0]
 80102a2:	e72a      	b.n	80100fa <__gethex+0x110>
 80102a4:	1e71      	subs	r1, r6, #1
 80102a6:	4628      	mov	r0, r5
 80102a8:	f000 fd76 	bl	8010d98 <__any_on>
 80102ac:	2800      	cmp	r0, #0
 80102ae:	d1ed      	bne.n	801028c <__gethex+0x2a2>
 80102b0:	4629      	mov	r1, r5
 80102b2:	9802      	ldr	r0, [sp, #8]
 80102b4:	f000 f9c4 	bl	8010640 <_Bfree>
 80102b8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80102ba:	2300      	movs	r3, #0
 80102bc:	6013      	str	r3, [r2, #0]
 80102be:	2750      	movs	r7, #80	; 0x50
 80102c0:	e71b      	b.n	80100fa <__gethex+0x110>
 80102c2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80102c4:	2b00      	cmp	r3, #0
 80102c6:	d0e1      	beq.n	801028c <__gethex+0x2a2>
 80102c8:	e7f2      	b.n	80102b0 <__gethex+0x2c6>
 80102ca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80102cc:	2b00      	cmp	r3, #0
 80102ce:	d1dd      	bne.n	801028c <__gethex+0x2a2>
 80102d0:	e7ee      	b.n	80102b0 <__gethex+0x2c6>
 80102d2:	1e67      	subs	r7, r4, #1
 80102d4:	f1ba 0f00 	cmp.w	sl, #0
 80102d8:	d131      	bne.n	801033e <__gethex+0x354>
 80102da:	b127      	cbz	r7, 80102e6 <__gethex+0x2fc>
 80102dc:	4639      	mov	r1, r7
 80102de:	4628      	mov	r0, r5
 80102e0:	f000 fd5a 	bl	8010d98 <__any_on>
 80102e4:	4682      	mov	sl, r0
 80102e6:	117a      	asrs	r2, r7, #5
 80102e8:	2301      	movs	r3, #1
 80102ea:	f007 071f 	and.w	r7, r7, #31
 80102ee:	fa03 f707 	lsl.w	r7, r3, r7
 80102f2:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 80102f6:	4621      	mov	r1, r4
 80102f8:	421f      	tst	r7, r3
 80102fa:	4628      	mov	r0, r5
 80102fc:	bf18      	it	ne
 80102fe:	f04a 0a02 	orrne.w	sl, sl, #2
 8010302:	1b36      	subs	r6, r6, r4
 8010304:	f7ff fe22 	bl	800ff4c <rshift>
 8010308:	f8d8 4004 	ldr.w	r4, [r8, #4]
 801030c:	2702      	movs	r7, #2
 801030e:	f1ba 0f00 	cmp.w	sl, #0
 8010312:	d048      	beq.n	80103a6 <__gethex+0x3bc>
 8010314:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010318:	2b02      	cmp	r3, #2
 801031a:	d015      	beq.n	8010348 <__gethex+0x35e>
 801031c:	2b03      	cmp	r3, #3
 801031e:	d017      	beq.n	8010350 <__gethex+0x366>
 8010320:	2b01      	cmp	r3, #1
 8010322:	d109      	bne.n	8010338 <__gethex+0x34e>
 8010324:	f01a 0f02 	tst.w	sl, #2
 8010328:	d006      	beq.n	8010338 <__gethex+0x34e>
 801032a:	f8d9 3000 	ldr.w	r3, [r9]
 801032e:	ea4a 0a03 	orr.w	sl, sl, r3
 8010332:	f01a 0f01 	tst.w	sl, #1
 8010336:	d10e      	bne.n	8010356 <__gethex+0x36c>
 8010338:	f047 0710 	orr.w	r7, r7, #16
 801033c:	e033      	b.n	80103a6 <__gethex+0x3bc>
 801033e:	f04f 0a01 	mov.w	sl, #1
 8010342:	e7d0      	b.n	80102e6 <__gethex+0x2fc>
 8010344:	2701      	movs	r7, #1
 8010346:	e7e2      	b.n	801030e <__gethex+0x324>
 8010348:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801034a:	f1c3 0301 	rsb	r3, r3, #1
 801034e:	9315      	str	r3, [sp, #84]	; 0x54
 8010350:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010352:	2b00      	cmp	r3, #0
 8010354:	d0f0      	beq.n	8010338 <__gethex+0x34e>
 8010356:	f8d5 9010 	ldr.w	r9, [r5, #16]
 801035a:	f105 0314 	add.w	r3, r5, #20
 801035e:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8010362:	eb03 010a 	add.w	r1, r3, sl
 8010366:	f04f 0c00 	mov.w	ip, #0
 801036a:	4618      	mov	r0, r3
 801036c:	f853 2b04 	ldr.w	r2, [r3], #4
 8010370:	f1b2 3fff 	cmp.w	r2, #4294967295
 8010374:	d01c      	beq.n	80103b0 <__gethex+0x3c6>
 8010376:	3201      	adds	r2, #1
 8010378:	6002      	str	r2, [r0, #0]
 801037a:	2f02      	cmp	r7, #2
 801037c:	f105 0314 	add.w	r3, r5, #20
 8010380:	d138      	bne.n	80103f4 <__gethex+0x40a>
 8010382:	f8d8 2000 	ldr.w	r2, [r8]
 8010386:	3a01      	subs	r2, #1
 8010388:	42b2      	cmp	r2, r6
 801038a:	d10a      	bne.n	80103a2 <__gethex+0x3b8>
 801038c:	1171      	asrs	r1, r6, #5
 801038e:	2201      	movs	r2, #1
 8010390:	f006 061f 	and.w	r6, r6, #31
 8010394:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010398:	fa02 f606 	lsl.w	r6, r2, r6
 801039c:	421e      	tst	r6, r3
 801039e:	bf18      	it	ne
 80103a0:	4617      	movne	r7, r2
 80103a2:	f047 0720 	orr.w	r7, r7, #32
 80103a6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80103a8:	601d      	str	r5, [r3, #0]
 80103aa:	9b06      	ldr	r3, [sp, #24]
 80103ac:	601c      	str	r4, [r3, #0]
 80103ae:	e6a4      	b.n	80100fa <__gethex+0x110>
 80103b0:	4299      	cmp	r1, r3
 80103b2:	f843 cc04 	str.w	ip, [r3, #-4]
 80103b6:	d8d8      	bhi.n	801036a <__gethex+0x380>
 80103b8:	68ab      	ldr	r3, [r5, #8]
 80103ba:	4599      	cmp	r9, r3
 80103bc:	db12      	blt.n	80103e4 <__gethex+0x3fa>
 80103be:	6869      	ldr	r1, [r5, #4]
 80103c0:	9802      	ldr	r0, [sp, #8]
 80103c2:	3101      	adds	r1, #1
 80103c4:	f000 f917 	bl	80105f6 <_Balloc>
 80103c8:	692a      	ldr	r2, [r5, #16]
 80103ca:	3202      	adds	r2, #2
 80103cc:	f105 010c 	add.w	r1, r5, #12
 80103d0:	4683      	mov	fp, r0
 80103d2:	0092      	lsls	r2, r2, #2
 80103d4:	300c      	adds	r0, #12
 80103d6:	f000 f903 	bl	80105e0 <memcpy>
 80103da:	4629      	mov	r1, r5
 80103dc:	9802      	ldr	r0, [sp, #8]
 80103de:	f000 f92f 	bl	8010640 <_Bfree>
 80103e2:	465d      	mov	r5, fp
 80103e4:	692b      	ldr	r3, [r5, #16]
 80103e6:	1c5a      	adds	r2, r3, #1
 80103e8:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80103ec:	612a      	str	r2, [r5, #16]
 80103ee:	2201      	movs	r2, #1
 80103f0:	615a      	str	r2, [r3, #20]
 80103f2:	e7c2      	b.n	801037a <__gethex+0x390>
 80103f4:	692a      	ldr	r2, [r5, #16]
 80103f6:	454a      	cmp	r2, r9
 80103f8:	dd0b      	ble.n	8010412 <__gethex+0x428>
 80103fa:	2101      	movs	r1, #1
 80103fc:	4628      	mov	r0, r5
 80103fe:	f7ff fda5 	bl	800ff4c <rshift>
 8010402:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010406:	3401      	adds	r4, #1
 8010408:	42a3      	cmp	r3, r4
 801040a:	f6ff aed9 	blt.w	80101c0 <__gethex+0x1d6>
 801040e:	2701      	movs	r7, #1
 8010410:	e7c7      	b.n	80103a2 <__gethex+0x3b8>
 8010412:	f016 061f 	ands.w	r6, r6, #31
 8010416:	d0fa      	beq.n	801040e <__gethex+0x424>
 8010418:	449a      	add	sl, r3
 801041a:	f1c6 0620 	rsb	r6, r6, #32
 801041e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8010422:	f000 f98f 	bl	8010744 <__hi0bits>
 8010426:	42b0      	cmp	r0, r6
 8010428:	dbe7      	blt.n	80103fa <__gethex+0x410>
 801042a:	e7f0      	b.n	801040e <__gethex+0x424>

0801042c <L_shift>:
 801042c:	f1c2 0208 	rsb	r2, r2, #8
 8010430:	0092      	lsls	r2, r2, #2
 8010432:	b570      	push	{r4, r5, r6, lr}
 8010434:	f1c2 0620 	rsb	r6, r2, #32
 8010438:	6843      	ldr	r3, [r0, #4]
 801043a:	6804      	ldr	r4, [r0, #0]
 801043c:	fa03 f506 	lsl.w	r5, r3, r6
 8010440:	432c      	orrs	r4, r5
 8010442:	40d3      	lsrs	r3, r2
 8010444:	6004      	str	r4, [r0, #0]
 8010446:	f840 3f04 	str.w	r3, [r0, #4]!
 801044a:	4288      	cmp	r0, r1
 801044c:	d3f4      	bcc.n	8010438 <L_shift+0xc>
 801044e:	bd70      	pop	{r4, r5, r6, pc}

08010450 <__match>:
 8010450:	b530      	push	{r4, r5, lr}
 8010452:	6803      	ldr	r3, [r0, #0]
 8010454:	3301      	adds	r3, #1
 8010456:	f811 4b01 	ldrb.w	r4, [r1], #1
 801045a:	b914      	cbnz	r4, 8010462 <__match+0x12>
 801045c:	6003      	str	r3, [r0, #0]
 801045e:	2001      	movs	r0, #1
 8010460:	bd30      	pop	{r4, r5, pc}
 8010462:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010466:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801046a:	2d19      	cmp	r5, #25
 801046c:	bf98      	it	ls
 801046e:	3220      	addls	r2, #32
 8010470:	42a2      	cmp	r2, r4
 8010472:	d0f0      	beq.n	8010456 <__match+0x6>
 8010474:	2000      	movs	r0, #0
 8010476:	e7f3      	b.n	8010460 <__match+0x10>

08010478 <__hexnan>:
 8010478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801047c:	680b      	ldr	r3, [r1, #0]
 801047e:	6801      	ldr	r1, [r0, #0]
 8010480:	115f      	asrs	r7, r3, #5
 8010482:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8010486:	f013 031f 	ands.w	r3, r3, #31
 801048a:	b087      	sub	sp, #28
 801048c:	bf18      	it	ne
 801048e:	3704      	addne	r7, #4
 8010490:	2500      	movs	r5, #0
 8010492:	1f3e      	subs	r6, r7, #4
 8010494:	4682      	mov	sl, r0
 8010496:	4690      	mov	r8, r2
 8010498:	9301      	str	r3, [sp, #4]
 801049a:	f847 5c04 	str.w	r5, [r7, #-4]
 801049e:	46b1      	mov	r9, r6
 80104a0:	4634      	mov	r4, r6
 80104a2:	9502      	str	r5, [sp, #8]
 80104a4:	46ab      	mov	fp, r5
 80104a6:	784a      	ldrb	r2, [r1, #1]
 80104a8:	1c4b      	adds	r3, r1, #1
 80104aa:	9303      	str	r3, [sp, #12]
 80104ac:	b342      	cbz	r2, 8010500 <__hexnan+0x88>
 80104ae:	4610      	mov	r0, r2
 80104b0:	9105      	str	r1, [sp, #20]
 80104b2:	9204      	str	r2, [sp, #16]
 80104b4:	f7ff fd84 	bl	800ffc0 <__hexdig_fun>
 80104b8:	2800      	cmp	r0, #0
 80104ba:	d143      	bne.n	8010544 <__hexnan+0xcc>
 80104bc:	9a04      	ldr	r2, [sp, #16]
 80104be:	9905      	ldr	r1, [sp, #20]
 80104c0:	2a20      	cmp	r2, #32
 80104c2:	d818      	bhi.n	80104f6 <__hexnan+0x7e>
 80104c4:	9b02      	ldr	r3, [sp, #8]
 80104c6:	459b      	cmp	fp, r3
 80104c8:	dd13      	ble.n	80104f2 <__hexnan+0x7a>
 80104ca:	454c      	cmp	r4, r9
 80104cc:	d206      	bcs.n	80104dc <__hexnan+0x64>
 80104ce:	2d07      	cmp	r5, #7
 80104d0:	dc04      	bgt.n	80104dc <__hexnan+0x64>
 80104d2:	462a      	mov	r2, r5
 80104d4:	4649      	mov	r1, r9
 80104d6:	4620      	mov	r0, r4
 80104d8:	f7ff ffa8 	bl	801042c <L_shift>
 80104dc:	4544      	cmp	r4, r8
 80104de:	d944      	bls.n	801056a <__hexnan+0xf2>
 80104e0:	2300      	movs	r3, #0
 80104e2:	f1a4 0904 	sub.w	r9, r4, #4
 80104e6:	f844 3c04 	str.w	r3, [r4, #-4]
 80104ea:	f8cd b008 	str.w	fp, [sp, #8]
 80104ee:	464c      	mov	r4, r9
 80104f0:	461d      	mov	r5, r3
 80104f2:	9903      	ldr	r1, [sp, #12]
 80104f4:	e7d7      	b.n	80104a6 <__hexnan+0x2e>
 80104f6:	2a29      	cmp	r2, #41	; 0x29
 80104f8:	d14a      	bne.n	8010590 <__hexnan+0x118>
 80104fa:	3102      	adds	r1, #2
 80104fc:	f8ca 1000 	str.w	r1, [sl]
 8010500:	f1bb 0f00 	cmp.w	fp, #0
 8010504:	d044      	beq.n	8010590 <__hexnan+0x118>
 8010506:	454c      	cmp	r4, r9
 8010508:	d206      	bcs.n	8010518 <__hexnan+0xa0>
 801050a:	2d07      	cmp	r5, #7
 801050c:	dc04      	bgt.n	8010518 <__hexnan+0xa0>
 801050e:	462a      	mov	r2, r5
 8010510:	4649      	mov	r1, r9
 8010512:	4620      	mov	r0, r4
 8010514:	f7ff ff8a 	bl	801042c <L_shift>
 8010518:	4544      	cmp	r4, r8
 801051a:	d928      	bls.n	801056e <__hexnan+0xf6>
 801051c:	4643      	mov	r3, r8
 801051e:	f854 2b04 	ldr.w	r2, [r4], #4
 8010522:	f843 2b04 	str.w	r2, [r3], #4
 8010526:	42a6      	cmp	r6, r4
 8010528:	d2f9      	bcs.n	801051e <__hexnan+0xa6>
 801052a:	2200      	movs	r2, #0
 801052c:	f843 2b04 	str.w	r2, [r3], #4
 8010530:	429e      	cmp	r6, r3
 8010532:	d2fb      	bcs.n	801052c <__hexnan+0xb4>
 8010534:	6833      	ldr	r3, [r6, #0]
 8010536:	b91b      	cbnz	r3, 8010540 <__hexnan+0xc8>
 8010538:	4546      	cmp	r6, r8
 801053a:	d127      	bne.n	801058c <__hexnan+0x114>
 801053c:	2301      	movs	r3, #1
 801053e:	6033      	str	r3, [r6, #0]
 8010540:	2005      	movs	r0, #5
 8010542:	e026      	b.n	8010592 <__hexnan+0x11a>
 8010544:	3501      	adds	r5, #1
 8010546:	2d08      	cmp	r5, #8
 8010548:	f10b 0b01 	add.w	fp, fp, #1
 801054c:	dd06      	ble.n	801055c <__hexnan+0xe4>
 801054e:	4544      	cmp	r4, r8
 8010550:	d9cf      	bls.n	80104f2 <__hexnan+0x7a>
 8010552:	2300      	movs	r3, #0
 8010554:	f844 3c04 	str.w	r3, [r4, #-4]
 8010558:	2501      	movs	r5, #1
 801055a:	3c04      	subs	r4, #4
 801055c:	6822      	ldr	r2, [r4, #0]
 801055e:	f000 000f 	and.w	r0, r0, #15
 8010562:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8010566:	6020      	str	r0, [r4, #0]
 8010568:	e7c3      	b.n	80104f2 <__hexnan+0x7a>
 801056a:	2508      	movs	r5, #8
 801056c:	e7c1      	b.n	80104f2 <__hexnan+0x7a>
 801056e:	9b01      	ldr	r3, [sp, #4]
 8010570:	2b00      	cmp	r3, #0
 8010572:	d0df      	beq.n	8010534 <__hexnan+0xbc>
 8010574:	f04f 32ff 	mov.w	r2, #4294967295
 8010578:	f1c3 0320 	rsb	r3, r3, #32
 801057c:	fa22 f303 	lsr.w	r3, r2, r3
 8010580:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8010584:	401a      	ands	r2, r3
 8010586:	f847 2c04 	str.w	r2, [r7, #-4]
 801058a:	e7d3      	b.n	8010534 <__hexnan+0xbc>
 801058c:	3e04      	subs	r6, #4
 801058e:	e7d1      	b.n	8010534 <__hexnan+0xbc>
 8010590:	2004      	movs	r0, #4
 8010592:	b007      	add	sp, #28
 8010594:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010598 <__localeconv_l>:
 8010598:	30f0      	adds	r0, #240	; 0xf0
 801059a:	4770      	bx	lr

0801059c <_localeconv_r>:
 801059c:	4b04      	ldr	r3, [pc, #16]	; (80105b0 <_localeconv_r+0x14>)
 801059e:	681b      	ldr	r3, [r3, #0]
 80105a0:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80105a2:	4b04      	ldr	r3, [pc, #16]	; (80105b4 <_localeconv_r+0x18>)
 80105a4:	2800      	cmp	r0, #0
 80105a6:	bf08      	it	eq
 80105a8:	4618      	moveq	r0, r3
 80105aa:	30f0      	adds	r0, #240	; 0xf0
 80105ac:	4770      	bx	lr
 80105ae:	bf00      	nop
 80105b0:	200000e4 	.word	0x200000e4
 80105b4:	20000924 	.word	0x20000924

080105b8 <__retarget_lock_acquire_recursive>:
 80105b8:	4770      	bx	lr

080105ba <__retarget_lock_release_recursive>:
 80105ba:	4770      	bx	lr

080105bc <__ascii_mbtowc>:
 80105bc:	b082      	sub	sp, #8
 80105be:	b901      	cbnz	r1, 80105c2 <__ascii_mbtowc+0x6>
 80105c0:	a901      	add	r1, sp, #4
 80105c2:	b142      	cbz	r2, 80105d6 <__ascii_mbtowc+0x1a>
 80105c4:	b14b      	cbz	r3, 80105da <__ascii_mbtowc+0x1e>
 80105c6:	7813      	ldrb	r3, [r2, #0]
 80105c8:	600b      	str	r3, [r1, #0]
 80105ca:	7812      	ldrb	r2, [r2, #0]
 80105cc:	1c10      	adds	r0, r2, #0
 80105ce:	bf18      	it	ne
 80105d0:	2001      	movne	r0, #1
 80105d2:	b002      	add	sp, #8
 80105d4:	4770      	bx	lr
 80105d6:	4610      	mov	r0, r2
 80105d8:	e7fb      	b.n	80105d2 <__ascii_mbtowc+0x16>
 80105da:	f06f 0001 	mvn.w	r0, #1
 80105de:	e7f8      	b.n	80105d2 <__ascii_mbtowc+0x16>

080105e0 <memcpy>:
 80105e0:	b510      	push	{r4, lr}
 80105e2:	1e43      	subs	r3, r0, #1
 80105e4:	440a      	add	r2, r1
 80105e6:	4291      	cmp	r1, r2
 80105e8:	d100      	bne.n	80105ec <memcpy+0xc>
 80105ea:	bd10      	pop	{r4, pc}
 80105ec:	f811 4b01 	ldrb.w	r4, [r1], #1
 80105f0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80105f4:	e7f7      	b.n	80105e6 <memcpy+0x6>

080105f6 <_Balloc>:
 80105f6:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80105f8:	b570      	push	{r4, r5, r6, lr}
 80105fa:	4605      	mov	r5, r0
 80105fc:	460c      	mov	r4, r1
 80105fe:	b17b      	cbz	r3, 8010620 <_Balloc+0x2a>
 8010600:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8010602:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8010606:	b9a0      	cbnz	r0, 8010632 <_Balloc+0x3c>
 8010608:	2101      	movs	r1, #1
 801060a:	fa01 f604 	lsl.w	r6, r1, r4
 801060e:	1d72      	adds	r2, r6, #5
 8010610:	0092      	lsls	r2, r2, #2
 8010612:	4628      	mov	r0, r5
 8010614:	f000 feae 	bl	8011374 <_calloc_r>
 8010618:	b148      	cbz	r0, 801062e <_Balloc+0x38>
 801061a:	e9c0 4601 	strd	r4, r6, [r0, #4]
 801061e:	e00b      	b.n	8010638 <_Balloc+0x42>
 8010620:	2221      	movs	r2, #33	; 0x21
 8010622:	2104      	movs	r1, #4
 8010624:	f000 fea6 	bl	8011374 <_calloc_r>
 8010628:	64e8      	str	r0, [r5, #76]	; 0x4c
 801062a:	2800      	cmp	r0, #0
 801062c:	d1e8      	bne.n	8010600 <_Balloc+0xa>
 801062e:	2000      	movs	r0, #0
 8010630:	bd70      	pop	{r4, r5, r6, pc}
 8010632:	6802      	ldr	r2, [r0, #0]
 8010634:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 8010638:	2300      	movs	r3, #0
 801063a:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801063e:	e7f7      	b.n	8010630 <_Balloc+0x3a>

08010640 <_Bfree>:
 8010640:	b131      	cbz	r1, 8010650 <_Bfree+0x10>
 8010642:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8010644:	684a      	ldr	r2, [r1, #4]
 8010646:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801064a:	6008      	str	r0, [r1, #0]
 801064c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8010650:	4770      	bx	lr

08010652 <__multadd>:
 8010652:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010656:	690d      	ldr	r5, [r1, #16]
 8010658:	461f      	mov	r7, r3
 801065a:	4606      	mov	r6, r0
 801065c:	460c      	mov	r4, r1
 801065e:	f101 0c14 	add.w	ip, r1, #20
 8010662:	2300      	movs	r3, #0
 8010664:	f8dc 0000 	ldr.w	r0, [ip]
 8010668:	b281      	uxth	r1, r0
 801066a:	fb02 7101 	mla	r1, r2, r1, r7
 801066e:	0c0f      	lsrs	r7, r1, #16
 8010670:	0c00      	lsrs	r0, r0, #16
 8010672:	fb02 7000 	mla	r0, r2, r0, r7
 8010676:	b289      	uxth	r1, r1
 8010678:	3301      	adds	r3, #1
 801067a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 801067e:	429d      	cmp	r5, r3
 8010680:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8010684:	f84c 1b04 	str.w	r1, [ip], #4
 8010688:	dcec      	bgt.n	8010664 <__multadd+0x12>
 801068a:	b1d7      	cbz	r7, 80106c2 <__multadd+0x70>
 801068c:	68a3      	ldr	r3, [r4, #8]
 801068e:	42ab      	cmp	r3, r5
 8010690:	dc12      	bgt.n	80106b8 <__multadd+0x66>
 8010692:	6861      	ldr	r1, [r4, #4]
 8010694:	4630      	mov	r0, r6
 8010696:	3101      	adds	r1, #1
 8010698:	f7ff ffad 	bl	80105f6 <_Balloc>
 801069c:	6922      	ldr	r2, [r4, #16]
 801069e:	3202      	adds	r2, #2
 80106a0:	f104 010c 	add.w	r1, r4, #12
 80106a4:	4680      	mov	r8, r0
 80106a6:	0092      	lsls	r2, r2, #2
 80106a8:	300c      	adds	r0, #12
 80106aa:	f7ff ff99 	bl	80105e0 <memcpy>
 80106ae:	4621      	mov	r1, r4
 80106b0:	4630      	mov	r0, r6
 80106b2:	f7ff ffc5 	bl	8010640 <_Bfree>
 80106b6:	4644      	mov	r4, r8
 80106b8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80106bc:	3501      	adds	r5, #1
 80106be:	615f      	str	r7, [r3, #20]
 80106c0:	6125      	str	r5, [r4, #16]
 80106c2:	4620      	mov	r0, r4
 80106c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080106c8 <__s2b>:
 80106c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80106cc:	460c      	mov	r4, r1
 80106ce:	4615      	mov	r5, r2
 80106d0:	461f      	mov	r7, r3
 80106d2:	2209      	movs	r2, #9
 80106d4:	3308      	adds	r3, #8
 80106d6:	4606      	mov	r6, r0
 80106d8:	fb93 f3f2 	sdiv	r3, r3, r2
 80106dc:	2100      	movs	r1, #0
 80106de:	2201      	movs	r2, #1
 80106e0:	429a      	cmp	r2, r3
 80106e2:	db20      	blt.n	8010726 <__s2b+0x5e>
 80106e4:	4630      	mov	r0, r6
 80106e6:	f7ff ff86 	bl	80105f6 <_Balloc>
 80106ea:	9b08      	ldr	r3, [sp, #32]
 80106ec:	6143      	str	r3, [r0, #20]
 80106ee:	2d09      	cmp	r5, #9
 80106f0:	f04f 0301 	mov.w	r3, #1
 80106f4:	6103      	str	r3, [r0, #16]
 80106f6:	dd19      	ble.n	801072c <__s2b+0x64>
 80106f8:	f104 0809 	add.w	r8, r4, #9
 80106fc:	46c1      	mov	r9, r8
 80106fe:	442c      	add	r4, r5
 8010700:	f819 3b01 	ldrb.w	r3, [r9], #1
 8010704:	4601      	mov	r1, r0
 8010706:	3b30      	subs	r3, #48	; 0x30
 8010708:	220a      	movs	r2, #10
 801070a:	4630      	mov	r0, r6
 801070c:	f7ff ffa1 	bl	8010652 <__multadd>
 8010710:	45a1      	cmp	r9, r4
 8010712:	d1f5      	bne.n	8010700 <__s2b+0x38>
 8010714:	eb08 0405 	add.w	r4, r8, r5
 8010718:	3c08      	subs	r4, #8
 801071a:	1b2d      	subs	r5, r5, r4
 801071c:	1963      	adds	r3, r4, r5
 801071e:	42bb      	cmp	r3, r7
 8010720:	db07      	blt.n	8010732 <__s2b+0x6a>
 8010722:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010726:	0052      	lsls	r2, r2, #1
 8010728:	3101      	adds	r1, #1
 801072a:	e7d9      	b.n	80106e0 <__s2b+0x18>
 801072c:	340a      	adds	r4, #10
 801072e:	2509      	movs	r5, #9
 8010730:	e7f3      	b.n	801071a <__s2b+0x52>
 8010732:	f814 3b01 	ldrb.w	r3, [r4], #1
 8010736:	4601      	mov	r1, r0
 8010738:	3b30      	subs	r3, #48	; 0x30
 801073a:	220a      	movs	r2, #10
 801073c:	4630      	mov	r0, r6
 801073e:	f7ff ff88 	bl	8010652 <__multadd>
 8010742:	e7eb      	b.n	801071c <__s2b+0x54>

08010744 <__hi0bits>:
 8010744:	0c02      	lsrs	r2, r0, #16
 8010746:	0412      	lsls	r2, r2, #16
 8010748:	4603      	mov	r3, r0
 801074a:	b9b2      	cbnz	r2, 801077a <__hi0bits+0x36>
 801074c:	0403      	lsls	r3, r0, #16
 801074e:	2010      	movs	r0, #16
 8010750:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8010754:	bf04      	itt	eq
 8010756:	021b      	lsleq	r3, r3, #8
 8010758:	3008      	addeq	r0, #8
 801075a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801075e:	bf04      	itt	eq
 8010760:	011b      	lsleq	r3, r3, #4
 8010762:	3004      	addeq	r0, #4
 8010764:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8010768:	bf04      	itt	eq
 801076a:	009b      	lsleq	r3, r3, #2
 801076c:	3002      	addeq	r0, #2
 801076e:	2b00      	cmp	r3, #0
 8010770:	db06      	blt.n	8010780 <__hi0bits+0x3c>
 8010772:	005b      	lsls	r3, r3, #1
 8010774:	d503      	bpl.n	801077e <__hi0bits+0x3a>
 8010776:	3001      	adds	r0, #1
 8010778:	4770      	bx	lr
 801077a:	2000      	movs	r0, #0
 801077c:	e7e8      	b.n	8010750 <__hi0bits+0xc>
 801077e:	2020      	movs	r0, #32
 8010780:	4770      	bx	lr

08010782 <__lo0bits>:
 8010782:	6803      	ldr	r3, [r0, #0]
 8010784:	f013 0207 	ands.w	r2, r3, #7
 8010788:	4601      	mov	r1, r0
 801078a:	d00b      	beq.n	80107a4 <__lo0bits+0x22>
 801078c:	07da      	lsls	r2, r3, #31
 801078e:	d423      	bmi.n	80107d8 <__lo0bits+0x56>
 8010790:	0798      	lsls	r0, r3, #30
 8010792:	bf49      	itett	mi
 8010794:	085b      	lsrmi	r3, r3, #1
 8010796:	089b      	lsrpl	r3, r3, #2
 8010798:	2001      	movmi	r0, #1
 801079a:	600b      	strmi	r3, [r1, #0]
 801079c:	bf5c      	itt	pl
 801079e:	600b      	strpl	r3, [r1, #0]
 80107a0:	2002      	movpl	r0, #2
 80107a2:	4770      	bx	lr
 80107a4:	b298      	uxth	r0, r3
 80107a6:	b9a8      	cbnz	r0, 80107d4 <__lo0bits+0x52>
 80107a8:	0c1b      	lsrs	r3, r3, #16
 80107aa:	2010      	movs	r0, #16
 80107ac:	f013 0fff 	tst.w	r3, #255	; 0xff
 80107b0:	bf04      	itt	eq
 80107b2:	0a1b      	lsreq	r3, r3, #8
 80107b4:	3008      	addeq	r0, #8
 80107b6:	071a      	lsls	r2, r3, #28
 80107b8:	bf04      	itt	eq
 80107ba:	091b      	lsreq	r3, r3, #4
 80107bc:	3004      	addeq	r0, #4
 80107be:	079a      	lsls	r2, r3, #30
 80107c0:	bf04      	itt	eq
 80107c2:	089b      	lsreq	r3, r3, #2
 80107c4:	3002      	addeq	r0, #2
 80107c6:	07da      	lsls	r2, r3, #31
 80107c8:	d402      	bmi.n	80107d0 <__lo0bits+0x4e>
 80107ca:	085b      	lsrs	r3, r3, #1
 80107cc:	d006      	beq.n	80107dc <__lo0bits+0x5a>
 80107ce:	3001      	adds	r0, #1
 80107d0:	600b      	str	r3, [r1, #0]
 80107d2:	4770      	bx	lr
 80107d4:	4610      	mov	r0, r2
 80107d6:	e7e9      	b.n	80107ac <__lo0bits+0x2a>
 80107d8:	2000      	movs	r0, #0
 80107da:	4770      	bx	lr
 80107dc:	2020      	movs	r0, #32
 80107de:	4770      	bx	lr

080107e0 <__i2b>:
 80107e0:	b510      	push	{r4, lr}
 80107e2:	460c      	mov	r4, r1
 80107e4:	2101      	movs	r1, #1
 80107e6:	f7ff ff06 	bl	80105f6 <_Balloc>
 80107ea:	2201      	movs	r2, #1
 80107ec:	6144      	str	r4, [r0, #20]
 80107ee:	6102      	str	r2, [r0, #16]
 80107f0:	bd10      	pop	{r4, pc}

080107f2 <__multiply>:
 80107f2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107f6:	4614      	mov	r4, r2
 80107f8:	690a      	ldr	r2, [r1, #16]
 80107fa:	6923      	ldr	r3, [r4, #16]
 80107fc:	429a      	cmp	r2, r3
 80107fe:	bfb8      	it	lt
 8010800:	460b      	movlt	r3, r1
 8010802:	4688      	mov	r8, r1
 8010804:	bfbc      	itt	lt
 8010806:	46a0      	movlt	r8, r4
 8010808:	461c      	movlt	r4, r3
 801080a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801080e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8010812:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010816:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801081a:	eb07 0609 	add.w	r6, r7, r9
 801081e:	42b3      	cmp	r3, r6
 8010820:	bfb8      	it	lt
 8010822:	3101      	addlt	r1, #1
 8010824:	f7ff fee7 	bl	80105f6 <_Balloc>
 8010828:	f100 0514 	add.w	r5, r0, #20
 801082c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8010830:	462b      	mov	r3, r5
 8010832:	2200      	movs	r2, #0
 8010834:	4573      	cmp	r3, lr
 8010836:	d316      	bcc.n	8010866 <__multiply+0x74>
 8010838:	f104 0214 	add.w	r2, r4, #20
 801083c:	f108 0114 	add.w	r1, r8, #20
 8010840:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8010844:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8010848:	9300      	str	r3, [sp, #0]
 801084a:	9b00      	ldr	r3, [sp, #0]
 801084c:	9201      	str	r2, [sp, #4]
 801084e:	4293      	cmp	r3, r2
 8010850:	d80c      	bhi.n	801086c <__multiply+0x7a>
 8010852:	2e00      	cmp	r6, #0
 8010854:	dd03      	ble.n	801085e <__multiply+0x6c>
 8010856:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 801085a:	2b00      	cmp	r3, #0
 801085c:	d05d      	beq.n	801091a <__multiply+0x128>
 801085e:	6106      	str	r6, [r0, #16]
 8010860:	b003      	add	sp, #12
 8010862:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010866:	f843 2b04 	str.w	r2, [r3], #4
 801086a:	e7e3      	b.n	8010834 <__multiply+0x42>
 801086c:	f8b2 b000 	ldrh.w	fp, [r2]
 8010870:	f1bb 0f00 	cmp.w	fp, #0
 8010874:	d023      	beq.n	80108be <__multiply+0xcc>
 8010876:	4689      	mov	r9, r1
 8010878:	46ac      	mov	ip, r5
 801087a:	f04f 0800 	mov.w	r8, #0
 801087e:	f859 4b04 	ldr.w	r4, [r9], #4
 8010882:	f8dc a000 	ldr.w	sl, [ip]
 8010886:	b2a3      	uxth	r3, r4
 8010888:	fa1f fa8a 	uxth.w	sl, sl
 801088c:	fb0b a303 	mla	r3, fp, r3, sl
 8010890:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8010894:	f8dc 4000 	ldr.w	r4, [ip]
 8010898:	4443      	add	r3, r8
 801089a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801089e:	fb0b 840a 	mla	r4, fp, sl, r8
 80108a2:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80108a6:	46e2      	mov	sl, ip
 80108a8:	b29b      	uxth	r3, r3
 80108aa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80108ae:	454f      	cmp	r7, r9
 80108b0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80108b4:	f84a 3b04 	str.w	r3, [sl], #4
 80108b8:	d82b      	bhi.n	8010912 <__multiply+0x120>
 80108ba:	f8cc 8004 	str.w	r8, [ip, #4]
 80108be:	9b01      	ldr	r3, [sp, #4]
 80108c0:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80108c4:	3204      	adds	r2, #4
 80108c6:	f1ba 0f00 	cmp.w	sl, #0
 80108ca:	d020      	beq.n	801090e <__multiply+0x11c>
 80108cc:	682b      	ldr	r3, [r5, #0]
 80108ce:	4689      	mov	r9, r1
 80108d0:	46a8      	mov	r8, r5
 80108d2:	f04f 0b00 	mov.w	fp, #0
 80108d6:	f8b9 c000 	ldrh.w	ip, [r9]
 80108da:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80108de:	fb0a 440c 	mla	r4, sl, ip, r4
 80108e2:	445c      	add	r4, fp
 80108e4:	46c4      	mov	ip, r8
 80108e6:	b29b      	uxth	r3, r3
 80108e8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80108ec:	f84c 3b04 	str.w	r3, [ip], #4
 80108f0:	f859 3b04 	ldr.w	r3, [r9], #4
 80108f4:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80108f8:	0c1b      	lsrs	r3, r3, #16
 80108fa:	fb0a b303 	mla	r3, sl, r3, fp
 80108fe:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8010902:	454f      	cmp	r7, r9
 8010904:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8010908:	d805      	bhi.n	8010916 <__multiply+0x124>
 801090a:	f8c8 3004 	str.w	r3, [r8, #4]
 801090e:	3504      	adds	r5, #4
 8010910:	e79b      	b.n	801084a <__multiply+0x58>
 8010912:	46d4      	mov	ip, sl
 8010914:	e7b3      	b.n	801087e <__multiply+0x8c>
 8010916:	46e0      	mov	r8, ip
 8010918:	e7dd      	b.n	80108d6 <__multiply+0xe4>
 801091a:	3e01      	subs	r6, #1
 801091c:	e799      	b.n	8010852 <__multiply+0x60>
	...

08010920 <__pow5mult>:
 8010920:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010924:	4615      	mov	r5, r2
 8010926:	f012 0203 	ands.w	r2, r2, #3
 801092a:	4606      	mov	r6, r0
 801092c:	460f      	mov	r7, r1
 801092e:	d007      	beq.n	8010940 <__pow5mult+0x20>
 8010930:	3a01      	subs	r2, #1
 8010932:	4c1a      	ldr	r4, [pc, #104]	; (801099c <__pow5mult+0x7c>)
 8010934:	2300      	movs	r3, #0
 8010936:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801093a:	f7ff fe8a 	bl	8010652 <__multadd>
 801093e:	4607      	mov	r7, r0
 8010940:	10ad      	asrs	r5, r5, #2
 8010942:	d027      	beq.n	8010994 <__pow5mult+0x74>
 8010944:	6cb4      	ldr	r4, [r6, #72]	; 0x48
 8010946:	b944      	cbnz	r4, 801095a <__pow5mult+0x3a>
 8010948:	f240 2171 	movw	r1, #625	; 0x271
 801094c:	4630      	mov	r0, r6
 801094e:	f7ff ff47 	bl	80107e0 <__i2b>
 8010952:	2300      	movs	r3, #0
 8010954:	64b0      	str	r0, [r6, #72]	; 0x48
 8010956:	4604      	mov	r4, r0
 8010958:	6003      	str	r3, [r0, #0]
 801095a:	f04f 0800 	mov.w	r8, #0
 801095e:	07eb      	lsls	r3, r5, #31
 8010960:	d50a      	bpl.n	8010978 <__pow5mult+0x58>
 8010962:	4639      	mov	r1, r7
 8010964:	4622      	mov	r2, r4
 8010966:	4630      	mov	r0, r6
 8010968:	f7ff ff43 	bl	80107f2 <__multiply>
 801096c:	4639      	mov	r1, r7
 801096e:	4681      	mov	r9, r0
 8010970:	4630      	mov	r0, r6
 8010972:	f7ff fe65 	bl	8010640 <_Bfree>
 8010976:	464f      	mov	r7, r9
 8010978:	106d      	asrs	r5, r5, #1
 801097a:	d00b      	beq.n	8010994 <__pow5mult+0x74>
 801097c:	6820      	ldr	r0, [r4, #0]
 801097e:	b938      	cbnz	r0, 8010990 <__pow5mult+0x70>
 8010980:	4622      	mov	r2, r4
 8010982:	4621      	mov	r1, r4
 8010984:	4630      	mov	r0, r6
 8010986:	f7ff ff34 	bl	80107f2 <__multiply>
 801098a:	6020      	str	r0, [r4, #0]
 801098c:	f8c0 8000 	str.w	r8, [r0]
 8010990:	4604      	mov	r4, r0
 8010992:	e7e4      	b.n	801095e <__pow5mult+0x3e>
 8010994:	4638      	mov	r0, r7
 8010996:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801099a:	bf00      	nop
 801099c:	08011ca0 	.word	0x08011ca0

080109a0 <__lshift>:
 80109a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80109a4:	460c      	mov	r4, r1
 80109a6:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80109aa:	6923      	ldr	r3, [r4, #16]
 80109ac:	6849      	ldr	r1, [r1, #4]
 80109ae:	eb0a 0903 	add.w	r9, sl, r3
 80109b2:	68a3      	ldr	r3, [r4, #8]
 80109b4:	4607      	mov	r7, r0
 80109b6:	4616      	mov	r6, r2
 80109b8:	f109 0501 	add.w	r5, r9, #1
 80109bc:	42ab      	cmp	r3, r5
 80109be:	db32      	blt.n	8010a26 <__lshift+0x86>
 80109c0:	4638      	mov	r0, r7
 80109c2:	f7ff fe18 	bl	80105f6 <_Balloc>
 80109c6:	2300      	movs	r3, #0
 80109c8:	4680      	mov	r8, r0
 80109ca:	f100 0114 	add.w	r1, r0, #20
 80109ce:	461a      	mov	r2, r3
 80109d0:	4553      	cmp	r3, sl
 80109d2:	db2b      	blt.n	8010a2c <__lshift+0x8c>
 80109d4:	6920      	ldr	r0, [r4, #16]
 80109d6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80109da:	f104 0314 	add.w	r3, r4, #20
 80109de:	f016 021f 	ands.w	r2, r6, #31
 80109e2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80109e6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80109ea:	d025      	beq.n	8010a38 <__lshift+0x98>
 80109ec:	f1c2 0e20 	rsb	lr, r2, #32
 80109f0:	2000      	movs	r0, #0
 80109f2:	681e      	ldr	r6, [r3, #0]
 80109f4:	468a      	mov	sl, r1
 80109f6:	4096      	lsls	r6, r2
 80109f8:	4330      	orrs	r0, r6
 80109fa:	f84a 0b04 	str.w	r0, [sl], #4
 80109fe:	f853 0b04 	ldr.w	r0, [r3], #4
 8010a02:	459c      	cmp	ip, r3
 8010a04:	fa20 f00e 	lsr.w	r0, r0, lr
 8010a08:	d814      	bhi.n	8010a34 <__lshift+0x94>
 8010a0a:	6048      	str	r0, [r1, #4]
 8010a0c:	b108      	cbz	r0, 8010a12 <__lshift+0x72>
 8010a0e:	f109 0502 	add.w	r5, r9, #2
 8010a12:	3d01      	subs	r5, #1
 8010a14:	4638      	mov	r0, r7
 8010a16:	f8c8 5010 	str.w	r5, [r8, #16]
 8010a1a:	4621      	mov	r1, r4
 8010a1c:	f7ff fe10 	bl	8010640 <_Bfree>
 8010a20:	4640      	mov	r0, r8
 8010a22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010a26:	3101      	adds	r1, #1
 8010a28:	005b      	lsls	r3, r3, #1
 8010a2a:	e7c7      	b.n	80109bc <__lshift+0x1c>
 8010a2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8010a30:	3301      	adds	r3, #1
 8010a32:	e7cd      	b.n	80109d0 <__lshift+0x30>
 8010a34:	4651      	mov	r1, sl
 8010a36:	e7dc      	b.n	80109f2 <__lshift+0x52>
 8010a38:	3904      	subs	r1, #4
 8010a3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8010a3e:	f841 2f04 	str.w	r2, [r1, #4]!
 8010a42:	459c      	cmp	ip, r3
 8010a44:	d8f9      	bhi.n	8010a3a <__lshift+0x9a>
 8010a46:	e7e4      	b.n	8010a12 <__lshift+0x72>

08010a48 <__mcmp>:
 8010a48:	6903      	ldr	r3, [r0, #16]
 8010a4a:	690a      	ldr	r2, [r1, #16]
 8010a4c:	1a9b      	subs	r3, r3, r2
 8010a4e:	b530      	push	{r4, r5, lr}
 8010a50:	d10c      	bne.n	8010a6c <__mcmp+0x24>
 8010a52:	0092      	lsls	r2, r2, #2
 8010a54:	3014      	adds	r0, #20
 8010a56:	3114      	adds	r1, #20
 8010a58:	1884      	adds	r4, r0, r2
 8010a5a:	4411      	add	r1, r2
 8010a5c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8010a60:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8010a64:	4295      	cmp	r5, r2
 8010a66:	d003      	beq.n	8010a70 <__mcmp+0x28>
 8010a68:	d305      	bcc.n	8010a76 <__mcmp+0x2e>
 8010a6a:	2301      	movs	r3, #1
 8010a6c:	4618      	mov	r0, r3
 8010a6e:	bd30      	pop	{r4, r5, pc}
 8010a70:	42a0      	cmp	r0, r4
 8010a72:	d3f3      	bcc.n	8010a5c <__mcmp+0x14>
 8010a74:	e7fa      	b.n	8010a6c <__mcmp+0x24>
 8010a76:	f04f 33ff 	mov.w	r3, #4294967295
 8010a7a:	e7f7      	b.n	8010a6c <__mcmp+0x24>

08010a7c <__mdiff>:
 8010a7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010a80:	460d      	mov	r5, r1
 8010a82:	4607      	mov	r7, r0
 8010a84:	4611      	mov	r1, r2
 8010a86:	4628      	mov	r0, r5
 8010a88:	4614      	mov	r4, r2
 8010a8a:	f7ff ffdd 	bl	8010a48 <__mcmp>
 8010a8e:	1e06      	subs	r6, r0, #0
 8010a90:	d108      	bne.n	8010aa4 <__mdiff+0x28>
 8010a92:	4631      	mov	r1, r6
 8010a94:	4638      	mov	r0, r7
 8010a96:	f7ff fdae 	bl	80105f6 <_Balloc>
 8010a9a:	2301      	movs	r3, #1
 8010a9c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8010aa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010aa4:	bfa4      	itt	ge
 8010aa6:	4623      	movge	r3, r4
 8010aa8:	462c      	movge	r4, r5
 8010aaa:	4638      	mov	r0, r7
 8010aac:	6861      	ldr	r1, [r4, #4]
 8010aae:	bfa6      	itte	ge
 8010ab0:	461d      	movge	r5, r3
 8010ab2:	2600      	movge	r6, #0
 8010ab4:	2601      	movlt	r6, #1
 8010ab6:	f7ff fd9e 	bl	80105f6 <_Balloc>
 8010aba:	692b      	ldr	r3, [r5, #16]
 8010abc:	60c6      	str	r6, [r0, #12]
 8010abe:	6926      	ldr	r6, [r4, #16]
 8010ac0:	f105 0914 	add.w	r9, r5, #20
 8010ac4:	f104 0214 	add.w	r2, r4, #20
 8010ac8:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8010acc:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8010ad0:	f100 0514 	add.w	r5, r0, #20
 8010ad4:	f04f 0e00 	mov.w	lr, #0
 8010ad8:	f852 ab04 	ldr.w	sl, [r2], #4
 8010adc:	f859 4b04 	ldr.w	r4, [r9], #4
 8010ae0:	fa1e f18a 	uxtah	r1, lr, sl
 8010ae4:	b2a3      	uxth	r3, r4
 8010ae6:	1ac9      	subs	r1, r1, r3
 8010ae8:	0c23      	lsrs	r3, r4, #16
 8010aea:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8010aee:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8010af2:	b289      	uxth	r1, r1
 8010af4:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8010af8:	45c8      	cmp	r8, r9
 8010afa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8010afe:	4694      	mov	ip, r2
 8010b00:	f845 3b04 	str.w	r3, [r5], #4
 8010b04:	d8e8      	bhi.n	8010ad8 <__mdiff+0x5c>
 8010b06:	45bc      	cmp	ip, r7
 8010b08:	d304      	bcc.n	8010b14 <__mdiff+0x98>
 8010b0a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8010b0e:	b183      	cbz	r3, 8010b32 <__mdiff+0xb6>
 8010b10:	6106      	str	r6, [r0, #16]
 8010b12:	e7c5      	b.n	8010aa0 <__mdiff+0x24>
 8010b14:	f85c 1b04 	ldr.w	r1, [ip], #4
 8010b18:	fa1e f381 	uxtah	r3, lr, r1
 8010b1c:	141a      	asrs	r2, r3, #16
 8010b1e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8010b22:	b29b      	uxth	r3, r3
 8010b24:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010b28:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8010b2c:	f845 3b04 	str.w	r3, [r5], #4
 8010b30:	e7e9      	b.n	8010b06 <__mdiff+0x8a>
 8010b32:	3e01      	subs	r6, #1
 8010b34:	e7e9      	b.n	8010b0a <__mdiff+0x8e>
	...

08010b38 <__ulp>:
 8010b38:	4b12      	ldr	r3, [pc, #72]	; (8010b84 <__ulp+0x4c>)
 8010b3a:	ee10 2a90 	vmov	r2, s1
 8010b3e:	401a      	ands	r2, r3
 8010b40:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8010b44:	2b00      	cmp	r3, #0
 8010b46:	dd04      	ble.n	8010b52 <__ulp+0x1a>
 8010b48:	2000      	movs	r0, #0
 8010b4a:	4619      	mov	r1, r3
 8010b4c:	ec41 0b10 	vmov	d0, r0, r1
 8010b50:	4770      	bx	lr
 8010b52:	425b      	negs	r3, r3
 8010b54:	151b      	asrs	r3, r3, #20
 8010b56:	2b13      	cmp	r3, #19
 8010b58:	f04f 0000 	mov.w	r0, #0
 8010b5c:	f04f 0100 	mov.w	r1, #0
 8010b60:	dc04      	bgt.n	8010b6c <__ulp+0x34>
 8010b62:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8010b66:	fa42 f103 	asr.w	r1, r2, r3
 8010b6a:	e7ef      	b.n	8010b4c <__ulp+0x14>
 8010b6c:	3b14      	subs	r3, #20
 8010b6e:	2b1e      	cmp	r3, #30
 8010b70:	f04f 0201 	mov.w	r2, #1
 8010b74:	bfda      	itte	le
 8010b76:	f1c3 031f 	rsble	r3, r3, #31
 8010b7a:	fa02 f303 	lslle.w	r3, r2, r3
 8010b7e:	4613      	movgt	r3, r2
 8010b80:	4618      	mov	r0, r3
 8010b82:	e7e3      	b.n	8010b4c <__ulp+0x14>
 8010b84:	7ff00000 	.word	0x7ff00000

08010b88 <__b2d>:
 8010b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b8a:	6905      	ldr	r5, [r0, #16]
 8010b8c:	f100 0714 	add.w	r7, r0, #20
 8010b90:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8010b94:	1f2e      	subs	r6, r5, #4
 8010b96:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8010b9a:	4620      	mov	r0, r4
 8010b9c:	f7ff fdd2 	bl	8010744 <__hi0bits>
 8010ba0:	f1c0 0320 	rsb	r3, r0, #32
 8010ba4:	280a      	cmp	r0, #10
 8010ba6:	600b      	str	r3, [r1, #0]
 8010ba8:	f8df c074 	ldr.w	ip, [pc, #116]	; 8010c20 <__b2d+0x98>
 8010bac:	dc14      	bgt.n	8010bd8 <__b2d+0x50>
 8010bae:	f1c0 0e0b 	rsb	lr, r0, #11
 8010bb2:	fa24 f10e 	lsr.w	r1, r4, lr
 8010bb6:	42b7      	cmp	r7, r6
 8010bb8:	ea41 030c 	orr.w	r3, r1, ip
 8010bbc:	bf34      	ite	cc
 8010bbe:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8010bc2:	2100      	movcs	r1, #0
 8010bc4:	3015      	adds	r0, #21
 8010bc6:	fa04 f000 	lsl.w	r0, r4, r0
 8010bca:	fa21 f10e 	lsr.w	r1, r1, lr
 8010bce:	ea40 0201 	orr.w	r2, r0, r1
 8010bd2:	ec43 2b10 	vmov	d0, r2, r3
 8010bd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010bd8:	42b7      	cmp	r7, r6
 8010bda:	bf3a      	itte	cc
 8010bdc:	f1a5 0608 	subcc.w	r6, r5, #8
 8010be0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8010be4:	2100      	movcs	r1, #0
 8010be6:	380b      	subs	r0, #11
 8010be8:	d015      	beq.n	8010c16 <__b2d+0x8e>
 8010bea:	4084      	lsls	r4, r0
 8010bec:	f1c0 0520 	rsb	r5, r0, #32
 8010bf0:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8010bf4:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8010bf8:	42be      	cmp	r6, r7
 8010bfa:	fa21 fc05 	lsr.w	ip, r1, r5
 8010bfe:	ea44 030c 	orr.w	r3, r4, ip
 8010c02:	bf8c      	ite	hi
 8010c04:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8010c08:	2400      	movls	r4, #0
 8010c0a:	fa01 f000 	lsl.w	r0, r1, r0
 8010c0e:	40ec      	lsrs	r4, r5
 8010c10:	ea40 0204 	orr.w	r2, r0, r4
 8010c14:	e7dd      	b.n	8010bd2 <__b2d+0x4a>
 8010c16:	ea44 030c 	orr.w	r3, r4, ip
 8010c1a:	460a      	mov	r2, r1
 8010c1c:	e7d9      	b.n	8010bd2 <__b2d+0x4a>
 8010c1e:	bf00      	nop
 8010c20:	3ff00000 	.word	0x3ff00000

08010c24 <__d2b>:
 8010c24:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010c28:	460e      	mov	r6, r1
 8010c2a:	2101      	movs	r1, #1
 8010c2c:	ec59 8b10 	vmov	r8, r9, d0
 8010c30:	4615      	mov	r5, r2
 8010c32:	f7ff fce0 	bl	80105f6 <_Balloc>
 8010c36:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8010c3a:	4607      	mov	r7, r0
 8010c3c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010c40:	bb34      	cbnz	r4, 8010c90 <__d2b+0x6c>
 8010c42:	9301      	str	r3, [sp, #4]
 8010c44:	f1b8 0300 	subs.w	r3, r8, #0
 8010c48:	d027      	beq.n	8010c9a <__d2b+0x76>
 8010c4a:	a802      	add	r0, sp, #8
 8010c4c:	f840 3d08 	str.w	r3, [r0, #-8]!
 8010c50:	f7ff fd97 	bl	8010782 <__lo0bits>
 8010c54:	9900      	ldr	r1, [sp, #0]
 8010c56:	b1f0      	cbz	r0, 8010c96 <__d2b+0x72>
 8010c58:	9a01      	ldr	r2, [sp, #4]
 8010c5a:	f1c0 0320 	rsb	r3, r0, #32
 8010c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8010c62:	430b      	orrs	r3, r1
 8010c64:	40c2      	lsrs	r2, r0
 8010c66:	617b      	str	r3, [r7, #20]
 8010c68:	9201      	str	r2, [sp, #4]
 8010c6a:	9b01      	ldr	r3, [sp, #4]
 8010c6c:	61bb      	str	r3, [r7, #24]
 8010c6e:	2b00      	cmp	r3, #0
 8010c70:	bf14      	ite	ne
 8010c72:	2102      	movne	r1, #2
 8010c74:	2101      	moveq	r1, #1
 8010c76:	6139      	str	r1, [r7, #16]
 8010c78:	b1c4      	cbz	r4, 8010cac <__d2b+0x88>
 8010c7a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8010c7e:	4404      	add	r4, r0
 8010c80:	6034      	str	r4, [r6, #0]
 8010c82:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8010c86:	6028      	str	r0, [r5, #0]
 8010c88:	4638      	mov	r0, r7
 8010c8a:	b003      	add	sp, #12
 8010c8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010c90:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010c94:	e7d5      	b.n	8010c42 <__d2b+0x1e>
 8010c96:	6179      	str	r1, [r7, #20]
 8010c98:	e7e7      	b.n	8010c6a <__d2b+0x46>
 8010c9a:	a801      	add	r0, sp, #4
 8010c9c:	f7ff fd71 	bl	8010782 <__lo0bits>
 8010ca0:	9b01      	ldr	r3, [sp, #4]
 8010ca2:	617b      	str	r3, [r7, #20]
 8010ca4:	2101      	movs	r1, #1
 8010ca6:	6139      	str	r1, [r7, #16]
 8010ca8:	3020      	adds	r0, #32
 8010caa:	e7e5      	b.n	8010c78 <__d2b+0x54>
 8010cac:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8010cb0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8010cb4:	6030      	str	r0, [r6, #0]
 8010cb6:	6918      	ldr	r0, [r3, #16]
 8010cb8:	f7ff fd44 	bl	8010744 <__hi0bits>
 8010cbc:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8010cc0:	e7e1      	b.n	8010c86 <__d2b+0x62>

08010cc2 <__ratio>:
 8010cc2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010cc6:	4688      	mov	r8, r1
 8010cc8:	4669      	mov	r1, sp
 8010cca:	4681      	mov	r9, r0
 8010ccc:	f7ff ff5c 	bl	8010b88 <__b2d>
 8010cd0:	a901      	add	r1, sp, #4
 8010cd2:	4640      	mov	r0, r8
 8010cd4:	ec57 6b10 	vmov	r6, r7, d0
 8010cd8:	f7ff ff56 	bl	8010b88 <__b2d>
 8010cdc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010ce0:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8010ce4:	eba3 0c02 	sub.w	ip, r3, r2
 8010ce8:	e9dd 3200 	ldrd	r3, r2, [sp]
 8010cec:	1a9b      	subs	r3, r3, r2
 8010cee:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8010cf2:	ec5b ab10 	vmov	sl, fp, d0
 8010cf6:	2b00      	cmp	r3, #0
 8010cf8:	bfce      	itee	gt
 8010cfa:	463a      	movgt	r2, r7
 8010cfc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8010d00:	465a      	movle	r2, fp
 8010d02:	4659      	mov	r1, fp
 8010d04:	463d      	mov	r5, r7
 8010d06:	bfd4      	ite	le
 8010d08:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8010d0c:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8010d10:	4630      	mov	r0, r6
 8010d12:	ee10 2a10 	vmov	r2, s0
 8010d16:	460b      	mov	r3, r1
 8010d18:	4629      	mov	r1, r5
 8010d1a:	f7ef fda7 	bl	800086c <__aeabi_ddiv>
 8010d1e:	ec41 0b10 	vmov	d0, r0, r1
 8010d22:	b003      	add	sp, #12
 8010d24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010d28 <_mprec_log10>:
 8010d28:	2817      	cmp	r0, #23
 8010d2a:	b5d0      	push	{r4, r6, r7, lr}
 8010d2c:	4604      	mov	r4, r0
 8010d2e:	dc07      	bgt.n	8010d40 <_mprec_log10+0x18>
 8010d30:	4b09      	ldr	r3, [pc, #36]	; (8010d58 <_mprec_log10+0x30>)
 8010d32:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
 8010d36:	e9d4 0100 	ldrd	r0, r1, [r4]
 8010d3a:	ec41 0b10 	vmov	d0, r0, r1
 8010d3e:	bdd0      	pop	{r4, r6, r7, pc}
 8010d40:	4906      	ldr	r1, [pc, #24]	; (8010d5c <_mprec_log10+0x34>)
 8010d42:	4f07      	ldr	r7, [pc, #28]	; (8010d60 <_mprec_log10+0x38>)
 8010d44:	2000      	movs	r0, #0
 8010d46:	2600      	movs	r6, #0
 8010d48:	4632      	mov	r2, r6
 8010d4a:	463b      	mov	r3, r7
 8010d4c:	f7ef fc64 	bl	8000618 <__aeabi_dmul>
 8010d50:	3c01      	subs	r4, #1
 8010d52:	d1f9      	bne.n	8010d48 <_mprec_log10+0x20>
 8010d54:	e7f1      	b.n	8010d3a <_mprec_log10+0x12>
 8010d56:	bf00      	nop
 8010d58:	08011bd8 	.word	0x08011bd8
 8010d5c:	3ff00000 	.word	0x3ff00000
 8010d60:	40240000 	.word	0x40240000

08010d64 <__copybits>:
 8010d64:	3901      	subs	r1, #1
 8010d66:	b510      	push	{r4, lr}
 8010d68:	1149      	asrs	r1, r1, #5
 8010d6a:	6914      	ldr	r4, [r2, #16]
 8010d6c:	3101      	adds	r1, #1
 8010d6e:	f102 0314 	add.w	r3, r2, #20
 8010d72:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8010d76:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8010d7a:	42a3      	cmp	r3, r4
 8010d7c:	4602      	mov	r2, r0
 8010d7e:	d303      	bcc.n	8010d88 <__copybits+0x24>
 8010d80:	2300      	movs	r3, #0
 8010d82:	428a      	cmp	r2, r1
 8010d84:	d305      	bcc.n	8010d92 <__copybits+0x2e>
 8010d86:	bd10      	pop	{r4, pc}
 8010d88:	f853 2b04 	ldr.w	r2, [r3], #4
 8010d8c:	f840 2b04 	str.w	r2, [r0], #4
 8010d90:	e7f3      	b.n	8010d7a <__copybits+0x16>
 8010d92:	f842 3b04 	str.w	r3, [r2], #4
 8010d96:	e7f4      	b.n	8010d82 <__copybits+0x1e>

08010d98 <__any_on>:
 8010d98:	f100 0214 	add.w	r2, r0, #20
 8010d9c:	6900      	ldr	r0, [r0, #16]
 8010d9e:	114b      	asrs	r3, r1, #5
 8010da0:	4298      	cmp	r0, r3
 8010da2:	b510      	push	{r4, lr}
 8010da4:	db11      	blt.n	8010dca <__any_on+0x32>
 8010da6:	dd0a      	ble.n	8010dbe <__any_on+0x26>
 8010da8:	f011 011f 	ands.w	r1, r1, #31
 8010dac:	d007      	beq.n	8010dbe <__any_on+0x26>
 8010dae:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8010db2:	fa24 f001 	lsr.w	r0, r4, r1
 8010db6:	fa00 f101 	lsl.w	r1, r0, r1
 8010dba:	428c      	cmp	r4, r1
 8010dbc:	d10b      	bne.n	8010dd6 <__any_on+0x3e>
 8010dbe:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010dc2:	4293      	cmp	r3, r2
 8010dc4:	d803      	bhi.n	8010dce <__any_on+0x36>
 8010dc6:	2000      	movs	r0, #0
 8010dc8:	bd10      	pop	{r4, pc}
 8010dca:	4603      	mov	r3, r0
 8010dcc:	e7f7      	b.n	8010dbe <__any_on+0x26>
 8010dce:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010dd2:	2900      	cmp	r1, #0
 8010dd4:	d0f5      	beq.n	8010dc2 <__any_on+0x2a>
 8010dd6:	2001      	movs	r0, #1
 8010dd8:	e7f6      	b.n	8010dc8 <__any_on+0x30>
	...

08010ddc <_realloc_r>:
 8010ddc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010de0:	4682      	mov	sl, r0
 8010de2:	460c      	mov	r4, r1
 8010de4:	b929      	cbnz	r1, 8010df2 <_realloc_r+0x16>
 8010de6:	4611      	mov	r1, r2
 8010de8:	b003      	add	sp, #12
 8010dea:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010dee:	f7fb bd0b 	b.w	800c808 <_malloc_r>
 8010df2:	9201      	str	r2, [sp, #4]
 8010df4:	f7fb ff46 	bl	800cc84 <__malloc_lock>
 8010df8:	9a01      	ldr	r2, [sp, #4]
 8010dfa:	f854 5c04 	ldr.w	r5, [r4, #-4]
 8010dfe:	f102 080b 	add.w	r8, r2, #11
 8010e02:	f1b8 0f16 	cmp.w	r8, #22
 8010e06:	f1a4 0908 	sub.w	r9, r4, #8
 8010e0a:	f025 0603 	bic.w	r6, r5, #3
 8010e0e:	d90b      	bls.n	8010e28 <_realloc_r+0x4c>
 8010e10:	f038 0807 	bics.w	r8, r8, #7
 8010e14:	d50a      	bpl.n	8010e2c <_realloc_r+0x50>
 8010e16:	230c      	movs	r3, #12
 8010e18:	f8ca 3000 	str.w	r3, [sl]
 8010e1c:	f04f 0b00 	mov.w	fp, #0
 8010e20:	4658      	mov	r0, fp
 8010e22:	b003      	add	sp, #12
 8010e24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e28:	f04f 0810 	mov.w	r8, #16
 8010e2c:	4590      	cmp	r8, r2
 8010e2e:	d3f2      	bcc.n	8010e16 <_realloc_r+0x3a>
 8010e30:	45b0      	cmp	r8, r6
 8010e32:	f340 8170 	ble.w	8011116 <_realloc_r+0x33a>
 8010e36:	49a9      	ldr	r1, [pc, #676]	; (80110dc <_realloc_r+0x300>)
 8010e38:	9101      	str	r1, [sp, #4]
 8010e3a:	f8d1 c008 	ldr.w	ip, [r1, #8]
 8010e3e:	eb09 0306 	add.w	r3, r9, r6
 8010e42:	459c      	cmp	ip, r3
 8010e44:	6858      	ldr	r0, [r3, #4]
 8010e46:	d005      	beq.n	8010e54 <_realloc_r+0x78>
 8010e48:	f020 0101 	bic.w	r1, r0, #1
 8010e4c:	4419      	add	r1, r3
 8010e4e:	6849      	ldr	r1, [r1, #4]
 8010e50:	07cf      	lsls	r7, r1, #31
 8010e52:	d447      	bmi.n	8010ee4 <_realloc_r+0x108>
 8010e54:	f020 0003 	bic.w	r0, r0, #3
 8010e58:	459c      	cmp	ip, r3
 8010e5a:	eb06 0700 	add.w	r7, r6, r0
 8010e5e:	d119      	bne.n	8010e94 <_realloc_r+0xb8>
 8010e60:	f108 0110 	add.w	r1, r8, #16
 8010e64:	42b9      	cmp	r1, r7
 8010e66:	dc3f      	bgt.n	8010ee8 <_realloc_r+0x10c>
 8010e68:	eb09 0308 	add.w	r3, r9, r8
 8010e6c:	9a01      	ldr	r2, [sp, #4]
 8010e6e:	eba7 0708 	sub.w	r7, r7, r8
 8010e72:	f047 0701 	orr.w	r7, r7, #1
 8010e76:	6093      	str	r3, [r2, #8]
 8010e78:	605f      	str	r7, [r3, #4]
 8010e7a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8010e7e:	f003 0301 	and.w	r3, r3, #1
 8010e82:	ea43 0308 	orr.w	r3, r3, r8
 8010e86:	f844 3c04 	str.w	r3, [r4, #-4]
 8010e8a:	4650      	mov	r0, sl
 8010e8c:	f7fb ff00 	bl	800cc90 <__malloc_unlock>
 8010e90:	46a3      	mov	fp, r4
 8010e92:	e7c5      	b.n	8010e20 <_realloc_r+0x44>
 8010e94:	45b8      	cmp	r8, r7
 8010e96:	dc27      	bgt.n	8010ee8 <_realloc_r+0x10c>
 8010e98:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 8010e9c:	60da      	str	r2, [r3, #12]
 8010e9e:	6093      	str	r3, [r2, #8]
 8010ea0:	eba7 0008 	sub.w	r0, r7, r8
 8010ea4:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8010ea8:	280f      	cmp	r0, #15
 8010eaa:	f002 0201 	and.w	r2, r2, #1
 8010eae:	eb09 0307 	add.w	r3, r9, r7
 8010eb2:	f240 8132 	bls.w	801111a <_realloc_r+0x33e>
 8010eb6:	eb09 0108 	add.w	r1, r9, r8
 8010eba:	ea48 0202 	orr.w	r2, r8, r2
 8010ebe:	f040 0001 	orr.w	r0, r0, #1
 8010ec2:	f8c9 2004 	str.w	r2, [r9, #4]
 8010ec6:	6048      	str	r0, [r1, #4]
 8010ec8:	685a      	ldr	r2, [r3, #4]
 8010eca:	f042 0201 	orr.w	r2, r2, #1
 8010ece:	605a      	str	r2, [r3, #4]
 8010ed0:	3108      	adds	r1, #8
 8010ed2:	4650      	mov	r0, sl
 8010ed4:	f7fe ff7e 	bl	800fdd4 <_free_r>
 8010ed8:	4650      	mov	r0, sl
 8010eda:	f7fb fed9 	bl	800cc90 <__malloc_unlock>
 8010ede:	f109 0b08 	add.w	fp, r9, #8
 8010ee2:	e79d      	b.n	8010e20 <_realloc_r+0x44>
 8010ee4:	2000      	movs	r0, #0
 8010ee6:	4603      	mov	r3, r0
 8010ee8:	07e9      	lsls	r1, r5, #31
 8010eea:	f100 80c6 	bmi.w	801107a <_realloc_r+0x29e>
 8010eee:	f854 5c08 	ldr.w	r5, [r4, #-8]
 8010ef2:	eba9 0505 	sub.w	r5, r9, r5
 8010ef6:	6869      	ldr	r1, [r5, #4]
 8010ef8:	f021 0103 	bic.w	r1, r1, #3
 8010efc:	eb01 0b06 	add.w	fp, r1, r6
 8010f00:	2b00      	cmp	r3, #0
 8010f02:	f000 8086 	beq.w	8011012 <_realloc_r+0x236>
 8010f06:	459c      	cmp	ip, r3
 8010f08:	eb00 070b 	add.w	r7, r0, fp
 8010f0c:	d149      	bne.n	8010fa2 <_realloc_r+0x1c6>
 8010f0e:	f108 0310 	add.w	r3, r8, #16
 8010f12:	42bb      	cmp	r3, r7
 8010f14:	dc7d      	bgt.n	8011012 <_realloc_r+0x236>
 8010f16:	46ab      	mov	fp, r5
 8010f18:	68eb      	ldr	r3, [r5, #12]
 8010f1a:	f85b 2f08 	ldr.w	r2, [fp, #8]!
 8010f1e:	60d3      	str	r3, [r2, #12]
 8010f20:	609a      	str	r2, [r3, #8]
 8010f22:	1f32      	subs	r2, r6, #4
 8010f24:	2a24      	cmp	r2, #36	; 0x24
 8010f26:	d837      	bhi.n	8010f98 <_realloc_r+0x1bc>
 8010f28:	2a13      	cmp	r2, #19
 8010f2a:	d933      	bls.n	8010f94 <_realloc_r+0x1b8>
 8010f2c:	6823      	ldr	r3, [r4, #0]
 8010f2e:	60ab      	str	r3, [r5, #8]
 8010f30:	6863      	ldr	r3, [r4, #4]
 8010f32:	60eb      	str	r3, [r5, #12]
 8010f34:	2a1b      	cmp	r2, #27
 8010f36:	d81b      	bhi.n	8010f70 <_realloc_r+0x194>
 8010f38:	3408      	adds	r4, #8
 8010f3a:	f105 0310 	add.w	r3, r5, #16
 8010f3e:	6822      	ldr	r2, [r4, #0]
 8010f40:	601a      	str	r2, [r3, #0]
 8010f42:	6862      	ldr	r2, [r4, #4]
 8010f44:	605a      	str	r2, [r3, #4]
 8010f46:	68a2      	ldr	r2, [r4, #8]
 8010f48:	609a      	str	r2, [r3, #8]
 8010f4a:	eb05 0308 	add.w	r3, r5, r8
 8010f4e:	9a01      	ldr	r2, [sp, #4]
 8010f50:	eba7 0708 	sub.w	r7, r7, r8
 8010f54:	f047 0701 	orr.w	r7, r7, #1
 8010f58:	6093      	str	r3, [r2, #8]
 8010f5a:	605f      	str	r7, [r3, #4]
 8010f5c:	686b      	ldr	r3, [r5, #4]
 8010f5e:	f003 0301 	and.w	r3, r3, #1
 8010f62:	ea43 0308 	orr.w	r3, r3, r8
 8010f66:	606b      	str	r3, [r5, #4]
 8010f68:	4650      	mov	r0, sl
 8010f6a:	f7fb fe91 	bl	800cc90 <__malloc_unlock>
 8010f6e:	e757      	b.n	8010e20 <_realloc_r+0x44>
 8010f70:	68a3      	ldr	r3, [r4, #8]
 8010f72:	612b      	str	r3, [r5, #16]
 8010f74:	68e3      	ldr	r3, [r4, #12]
 8010f76:	616b      	str	r3, [r5, #20]
 8010f78:	2a24      	cmp	r2, #36	; 0x24
 8010f7a:	bf01      	itttt	eq
 8010f7c:	6923      	ldreq	r3, [r4, #16]
 8010f7e:	61ab      	streq	r3, [r5, #24]
 8010f80:	6962      	ldreq	r2, [r4, #20]
 8010f82:	61ea      	streq	r2, [r5, #28]
 8010f84:	bf19      	ittee	ne
 8010f86:	3410      	addne	r4, #16
 8010f88:	f105 0318 	addne.w	r3, r5, #24
 8010f8c:	f105 0320 	addeq.w	r3, r5, #32
 8010f90:	3418      	addeq	r4, #24
 8010f92:	e7d4      	b.n	8010f3e <_realloc_r+0x162>
 8010f94:	465b      	mov	r3, fp
 8010f96:	e7d2      	b.n	8010f3e <_realloc_r+0x162>
 8010f98:	4621      	mov	r1, r4
 8010f9a:	4658      	mov	r0, fp
 8010f9c:	f000 fa17 	bl	80113ce <memmove>
 8010fa0:	e7d3      	b.n	8010f4a <_realloc_r+0x16e>
 8010fa2:	45b8      	cmp	r8, r7
 8010fa4:	dc35      	bgt.n	8011012 <_realloc_r+0x236>
 8010fa6:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 8010faa:	4628      	mov	r0, r5
 8010fac:	60da      	str	r2, [r3, #12]
 8010fae:	6093      	str	r3, [r2, #8]
 8010fb0:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8010fb4:	68eb      	ldr	r3, [r5, #12]
 8010fb6:	60d3      	str	r3, [r2, #12]
 8010fb8:	609a      	str	r2, [r3, #8]
 8010fba:	1f32      	subs	r2, r6, #4
 8010fbc:	2a24      	cmp	r2, #36	; 0x24
 8010fbe:	d824      	bhi.n	801100a <_realloc_r+0x22e>
 8010fc0:	2a13      	cmp	r2, #19
 8010fc2:	d908      	bls.n	8010fd6 <_realloc_r+0x1fa>
 8010fc4:	6823      	ldr	r3, [r4, #0]
 8010fc6:	60ab      	str	r3, [r5, #8]
 8010fc8:	6863      	ldr	r3, [r4, #4]
 8010fca:	60eb      	str	r3, [r5, #12]
 8010fcc:	2a1b      	cmp	r2, #27
 8010fce:	d80a      	bhi.n	8010fe6 <_realloc_r+0x20a>
 8010fd0:	3408      	adds	r4, #8
 8010fd2:	f105 0010 	add.w	r0, r5, #16
 8010fd6:	6823      	ldr	r3, [r4, #0]
 8010fd8:	6003      	str	r3, [r0, #0]
 8010fda:	6863      	ldr	r3, [r4, #4]
 8010fdc:	6043      	str	r3, [r0, #4]
 8010fde:	68a3      	ldr	r3, [r4, #8]
 8010fe0:	6083      	str	r3, [r0, #8]
 8010fe2:	46a9      	mov	r9, r5
 8010fe4:	e75c      	b.n	8010ea0 <_realloc_r+0xc4>
 8010fe6:	68a3      	ldr	r3, [r4, #8]
 8010fe8:	612b      	str	r3, [r5, #16]
 8010fea:	68e3      	ldr	r3, [r4, #12]
 8010fec:	616b      	str	r3, [r5, #20]
 8010fee:	2a24      	cmp	r2, #36	; 0x24
 8010ff0:	bf01      	itttt	eq
 8010ff2:	6923      	ldreq	r3, [r4, #16]
 8010ff4:	61ab      	streq	r3, [r5, #24]
 8010ff6:	6963      	ldreq	r3, [r4, #20]
 8010ff8:	61eb      	streq	r3, [r5, #28]
 8010ffa:	bf19      	ittee	ne
 8010ffc:	3410      	addne	r4, #16
 8010ffe:	f105 0018 	addne.w	r0, r5, #24
 8011002:	f105 0020 	addeq.w	r0, r5, #32
 8011006:	3418      	addeq	r4, #24
 8011008:	e7e5      	b.n	8010fd6 <_realloc_r+0x1fa>
 801100a:	4621      	mov	r1, r4
 801100c:	f000 f9df 	bl	80113ce <memmove>
 8011010:	e7e7      	b.n	8010fe2 <_realloc_r+0x206>
 8011012:	45d8      	cmp	r8, fp
 8011014:	dc31      	bgt.n	801107a <_realloc_r+0x29e>
 8011016:	4628      	mov	r0, r5
 8011018:	68eb      	ldr	r3, [r5, #12]
 801101a:	f850 2f08 	ldr.w	r2, [r0, #8]!
 801101e:	60d3      	str	r3, [r2, #12]
 8011020:	609a      	str	r2, [r3, #8]
 8011022:	1f32      	subs	r2, r6, #4
 8011024:	2a24      	cmp	r2, #36	; 0x24
 8011026:	d824      	bhi.n	8011072 <_realloc_r+0x296>
 8011028:	2a13      	cmp	r2, #19
 801102a:	d908      	bls.n	801103e <_realloc_r+0x262>
 801102c:	6823      	ldr	r3, [r4, #0]
 801102e:	60ab      	str	r3, [r5, #8]
 8011030:	6863      	ldr	r3, [r4, #4]
 8011032:	60eb      	str	r3, [r5, #12]
 8011034:	2a1b      	cmp	r2, #27
 8011036:	d80a      	bhi.n	801104e <_realloc_r+0x272>
 8011038:	3408      	adds	r4, #8
 801103a:	f105 0010 	add.w	r0, r5, #16
 801103e:	6823      	ldr	r3, [r4, #0]
 8011040:	6003      	str	r3, [r0, #0]
 8011042:	6863      	ldr	r3, [r4, #4]
 8011044:	6043      	str	r3, [r0, #4]
 8011046:	68a3      	ldr	r3, [r4, #8]
 8011048:	6083      	str	r3, [r0, #8]
 801104a:	465f      	mov	r7, fp
 801104c:	e7c9      	b.n	8010fe2 <_realloc_r+0x206>
 801104e:	68a3      	ldr	r3, [r4, #8]
 8011050:	612b      	str	r3, [r5, #16]
 8011052:	68e3      	ldr	r3, [r4, #12]
 8011054:	616b      	str	r3, [r5, #20]
 8011056:	2a24      	cmp	r2, #36	; 0x24
 8011058:	bf01      	itttt	eq
 801105a:	6923      	ldreq	r3, [r4, #16]
 801105c:	61ab      	streq	r3, [r5, #24]
 801105e:	6963      	ldreq	r3, [r4, #20]
 8011060:	61eb      	streq	r3, [r5, #28]
 8011062:	bf19      	ittee	ne
 8011064:	3410      	addne	r4, #16
 8011066:	f105 0018 	addne.w	r0, r5, #24
 801106a:	f105 0020 	addeq.w	r0, r5, #32
 801106e:	3418      	addeq	r4, #24
 8011070:	e7e5      	b.n	801103e <_realloc_r+0x262>
 8011072:	4621      	mov	r1, r4
 8011074:	f000 f9ab 	bl	80113ce <memmove>
 8011078:	e7e7      	b.n	801104a <_realloc_r+0x26e>
 801107a:	4611      	mov	r1, r2
 801107c:	4650      	mov	r0, sl
 801107e:	f7fb fbc3 	bl	800c808 <_malloc_r>
 8011082:	4683      	mov	fp, r0
 8011084:	2800      	cmp	r0, #0
 8011086:	f43f af6f 	beq.w	8010f68 <_realloc_r+0x18c>
 801108a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801108e:	f023 0301 	bic.w	r3, r3, #1
 8011092:	444b      	add	r3, r9
 8011094:	f1a0 0208 	sub.w	r2, r0, #8
 8011098:	4293      	cmp	r3, r2
 801109a:	d105      	bne.n	80110a8 <_realloc_r+0x2cc>
 801109c:	f850 7c04 	ldr.w	r7, [r0, #-4]
 80110a0:	f027 0703 	bic.w	r7, r7, #3
 80110a4:	4437      	add	r7, r6
 80110a6:	e6fb      	b.n	8010ea0 <_realloc_r+0xc4>
 80110a8:	1f32      	subs	r2, r6, #4
 80110aa:	2a24      	cmp	r2, #36	; 0x24
 80110ac:	d82f      	bhi.n	801110e <_realloc_r+0x332>
 80110ae:	2a13      	cmp	r2, #19
 80110b0:	d92a      	bls.n	8011108 <_realloc_r+0x32c>
 80110b2:	6823      	ldr	r3, [r4, #0]
 80110b4:	6003      	str	r3, [r0, #0]
 80110b6:	6863      	ldr	r3, [r4, #4]
 80110b8:	6043      	str	r3, [r0, #4]
 80110ba:	2a1b      	cmp	r2, #27
 80110bc:	d810      	bhi.n	80110e0 <_realloc_r+0x304>
 80110be:	f104 0208 	add.w	r2, r4, #8
 80110c2:	f100 0308 	add.w	r3, r0, #8
 80110c6:	6811      	ldr	r1, [r2, #0]
 80110c8:	6019      	str	r1, [r3, #0]
 80110ca:	6851      	ldr	r1, [r2, #4]
 80110cc:	6059      	str	r1, [r3, #4]
 80110ce:	6892      	ldr	r2, [r2, #8]
 80110d0:	609a      	str	r2, [r3, #8]
 80110d2:	4621      	mov	r1, r4
 80110d4:	4650      	mov	r0, sl
 80110d6:	f7fe fe7d 	bl	800fdd4 <_free_r>
 80110da:	e745      	b.n	8010f68 <_realloc_r+0x18c>
 80110dc:	20000510 	.word	0x20000510
 80110e0:	68a3      	ldr	r3, [r4, #8]
 80110e2:	6083      	str	r3, [r0, #8]
 80110e4:	68e3      	ldr	r3, [r4, #12]
 80110e6:	60c3      	str	r3, [r0, #12]
 80110e8:	2a24      	cmp	r2, #36	; 0x24
 80110ea:	bf01      	itttt	eq
 80110ec:	6923      	ldreq	r3, [r4, #16]
 80110ee:	6103      	streq	r3, [r0, #16]
 80110f0:	6961      	ldreq	r1, [r4, #20]
 80110f2:	6141      	streq	r1, [r0, #20]
 80110f4:	bf19      	ittee	ne
 80110f6:	f104 0210 	addne.w	r2, r4, #16
 80110fa:	f100 0310 	addne.w	r3, r0, #16
 80110fe:	f104 0218 	addeq.w	r2, r4, #24
 8011102:	f100 0318 	addeq.w	r3, r0, #24
 8011106:	e7de      	b.n	80110c6 <_realloc_r+0x2ea>
 8011108:	4603      	mov	r3, r0
 801110a:	4622      	mov	r2, r4
 801110c:	e7db      	b.n	80110c6 <_realloc_r+0x2ea>
 801110e:	4621      	mov	r1, r4
 8011110:	f000 f95d 	bl	80113ce <memmove>
 8011114:	e7dd      	b.n	80110d2 <_realloc_r+0x2f6>
 8011116:	4637      	mov	r7, r6
 8011118:	e6c2      	b.n	8010ea0 <_realloc_r+0xc4>
 801111a:	4317      	orrs	r7, r2
 801111c:	f8c9 7004 	str.w	r7, [r9, #4]
 8011120:	685a      	ldr	r2, [r3, #4]
 8011122:	f042 0201 	orr.w	r2, r2, #1
 8011126:	605a      	str	r2, [r3, #4]
 8011128:	e6d6      	b.n	8010ed8 <_realloc_r+0xfc>
 801112a:	bf00      	nop

0801112c <frexp>:
 801112c:	b570      	push	{r4, r5, r6, lr}
 801112e:	2100      	movs	r1, #0
 8011130:	ec55 4b10 	vmov	r4, r5, d0
 8011134:	6001      	str	r1, [r0, #0]
 8011136:	4916      	ldr	r1, [pc, #88]	; (8011190 <frexp+0x64>)
 8011138:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801113c:	428b      	cmp	r3, r1
 801113e:	4606      	mov	r6, r0
 8011140:	462a      	mov	r2, r5
 8011142:	dc22      	bgt.n	801118a <frexp+0x5e>
 8011144:	ee10 1a10 	vmov	r1, s0
 8011148:	4319      	orrs	r1, r3
 801114a:	d01e      	beq.n	801118a <frexp+0x5e>
 801114c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011150:	da0d      	bge.n	801116e <frexp+0x42>
 8011152:	2200      	movs	r2, #0
 8011154:	4b0f      	ldr	r3, [pc, #60]	; (8011194 <frexp+0x68>)
 8011156:	ee10 0a10 	vmov	r0, s0
 801115a:	4629      	mov	r1, r5
 801115c:	f7ef fa5c 	bl	8000618 <__aeabi_dmul>
 8011160:	460a      	mov	r2, r1
 8011162:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011166:	f06f 0135 	mvn.w	r1, #53	; 0x35
 801116a:	4604      	mov	r4, r0
 801116c:	6031      	str	r1, [r6, #0]
 801116e:	6831      	ldr	r1, [r6, #0]
 8011170:	151b      	asrs	r3, r3, #20
 8011172:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8011176:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801117a:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 801117e:	440b      	add	r3, r1
 8011180:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8011184:	6033      	str	r3, [r6, #0]
 8011186:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 801118a:	ec45 4b10 	vmov	d0, r4, r5
 801118e:	bd70      	pop	{r4, r5, r6, pc}
 8011190:	7fefffff 	.word	0x7fefffff
 8011194:	43500000 	.word	0x43500000

08011198 <strncmp>:
 8011198:	b510      	push	{r4, lr}
 801119a:	b16a      	cbz	r2, 80111b8 <strncmp+0x20>
 801119c:	3901      	subs	r1, #1
 801119e:	1884      	adds	r4, r0, r2
 80111a0:	f810 3b01 	ldrb.w	r3, [r0], #1
 80111a4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80111a8:	4293      	cmp	r3, r2
 80111aa:	d103      	bne.n	80111b4 <strncmp+0x1c>
 80111ac:	42a0      	cmp	r0, r4
 80111ae:	d001      	beq.n	80111b4 <strncmp+0x1c>
 80111b0:	2b00      	cmp	r3, #0
 80111b2:	d1f5      	bne.n	80111a0 <strncmp+0x8>
 80111b4:	1a98      	subs	r0, r3, r2
 80111b6:	bd10      	pop	{r4, pc}
 80111b8:	4610      	mov	r0, r2
 80111ba:	e7fc      	b.n	80111b6 <strncmp+0x1e>

080111bc <__ssprint_r>:
 80111bc:	6893      	ldr	r3, [r2, #8]
 80111be:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80111c2:	4681      	mov	r9, r0
 80111c4:	460c      	mov	r4, r1
 80111c6:	4616      	mov	r6, r2
 80111c8:	2b00      	cmp	r3, #0
 80111ca:	d05e      	beq.n	801128a <__ssprint_r+0xce>
 80111cc:	f04f 0b00 	mov.w	fp, #0
 80111d0:	f8d2 a000 	ldr.w	sl, [r2]
 80111d4:	465f      	mov	r7, fp
 80111d6:	b357      	cbz	r7, 801122e <__ssprint_r+0x72>
 80111d8:	68a3      	ldr	r3, [r4, #8]
 80111da:	429f      	cmp	r7, r3
 80111dc:	d340      	bcc.n	8011260 <__ssprint_r+0xa4>
 80111de:	89a2      	ldrh	r2, [r4, #12]
 80111e0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80111e4:	d03c      	beq.n	8011260 <__ssprint_r+0xa4>
 80111e6:	6825      	ldr	r5, [r4, #0]
 80111e8:	6921      	ldr	r1, [r4, #16]
 80111ea:	eba5 0801 	sub.w	r8, r5, r1
 80111ee:	6965      	ldr	r5, [r4, #20]
 80111f0:	2302      	movs	r3, #2
 80111f2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80111f6:	fb95 f5f3 	sdiv	r5, r5, r3
 80111fa:	f108 0301 	add.w	r3, r8, #1
 80111fe:	443b      	add	r3, r7
 8011200:	429d      	cmp	r5, r3
 8011202:	bf38      	it	cc
 8011204:	461d      	movcc	r5, r3
 8011206:	0553      	lsls	r3, r2, #21
 8011208:	d544      	bpl.n	8011294 <__ssprint_r+0xd8>
 801120a:	4629      	mov	r1, r5
 801120c:	4648      	mov	r0, r9
 801120e:	f7fb fafb 	bl	800c808 <_malloc_r>
 8011212:	b988      	cbnz	r0, 8011238 <__ssprint_r+0x7c>
 8011214:	230c      	movs	r3, #12
 8011216:	f8c9 3000 	str.w	r3, [r9]
 801121a:	89a3      	ldrh	r3, [r4, #12]
 801121c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011220:	81a3      	strh	r3, [r4, #12]
 8011222:	2300      	movs	r3, #0
 8011224:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8011228:	f04f 30ff 	mov.w	r0, #4294967295
 801122c:	e02f      	b.n	801128e <__ssprint_r+0xd2>
 801122e:	e9da b700 	ldrd	fp, r7, [sl]
 8011232:	f10a 0a08 	add.w	sl, sl, #8
 8011236:	e7ce      	b.n	80111d6 <__ssprint_r+0x1a>
 8011238:	4642      	mov	r2, r8
 801123a:	6921      	ldr	r1, [r4, #16]
 801123c:	9001      	str	r0, [sp, #4]
 801123e:	f7ff f9cf 	bl	80105e0 <memcpy>
 8011242:	89a2      	ldrh	r2, [r4, #12]
 8011244:	9b01      	ldr	r3, [sp, #4]
 8011246:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 801124a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 801124e:	81a2      	strh	r2, [r4, #12]
 8011250:	6123      	str	r3, [r4, #16]
 8011252:	6165      	str	r5, [r4, #20]
 8011254:	4443      	add	r3, r8
 8011256:	eba5 0508 	sub.w	r5, r5, r8
 801125a:	6023      	str	r3, [r4, #0]
 801125c:	60a5      	str	r5, [r4, #8]
 801125e:	463b      	mov	r3, r7
 8011260:	42bb      	cmp	r3, r7
 8011262:	bf28      	it	cs
 8011264:	463b      	movcs	r3, r7
 8011266:	461a      	mov	r2, r3
 8011268:	4659      	mov	r1, fp
 801126a:	6820      	ldr	r0, [r4, #0]
 801126c:	9301      	str	r3, [sp, #4]
 801126e:	f000 f8ae 	bl	80113ce <memmove>
 8011272:	68a2      	ldr	r2, [r4, #8]
 8011274:	9b01      	ldr	r3, [sp, #4]
 8011276:	1ad2      	subs	r2, r2, r3
 8011278:	60a2      	str	r2, [r4, #8]
 801127a:	6822      	ldr	r2, [r4, #0]
 801127c:	4413      	add	r3, r2
 801127e:	6023      	str	r3, [r4, #0]
 8011280:	68b3      	ldr	r3, [r6, #8]
 8011282:	1bdf      	subs	r7, r3, r7
 8011284:	60b7      	str	r7, [r6, #8]
 8011286:	2f00      	cmp	r7, #0
 8011288:	d1d1      	bne.n	801122e <__ssprint_r+0x72>
 801128a:	2000      	movs	r0, #0
 801128c:	6070      	str	r0, [r6, #4]
 801128e:	b003      	add	sp, #12
 8011290:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011294:	462a      	mov	r2, r5
 8011296:	4648      	mov	r0, r9
 8011298:	f7ff fda0 	bl	8010ddc <_realloc_r>
 801129c:	4603      	mov	r3, r0
 801129e:	2800      	cmp	r0, #0
 80112a0:	d1d6      	bne.n	8011250 <__ssprint_r+0x94>
 80112a2:	6921      	ldr	r1, [r4, #16]
 80112a4:	4648      	mov	r0, r9
 80112a6:	f7fe fd95 	bl	800fdd4 <_free_r>
 80112aa:	e7b3      	b.n	8011214 <__ssprint_r+0x58>

080112ac <__ascii_wctomb>:
 80112ac:	b149      	cbz	r1, 80112c2 <__ascii_wctomb+0x16>
 80112ae:	2aff      	cmp	r2, #255	; 0xff
 80112b0:	bf85      	ittet	hi
 80112b2:	238a      	movhi	r3, #138	; 0x8a
 80112b4:	6003      	strhi	r3, [r0, #0]
 80112b6:	700a      	strbls	r2, [r1, #0]
 80112b8:	f04f 30ff 	movhi.w	r0, #4294967295
 80112bc:	bf98      	it	ls
 80112be:	2001      	movls	r0, #1
 80112c0:	4770      	bx	lr
 80112c2:	4608      	mov	r0, r1
 80112c4:	4770      	bx	lr
	...

080112c8 <__register_exitproc>:
 80112c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80112cc:	4c26      	ldr	r4, [pc, #152]	; (8011368 <__register_exitproc+0xa0>)
 80112ce:	4606      	mov	r6, r0
 80112d0:	6820      	ldr	r0, [r4, #0]
 80112d2:	4698      	mov	r8, r3
 80112d4:	460f      	mov	r7, r1
 80112d6:	4691      	mov	r9, r2
 80112d8:	f7ff f96e 	bl	80105b8 <__retarget_lock_acquire_recursive>
 80112dc:	4b23      	ldr	r3, [pc, #140]	; (801136c <__register_exitproc+0xa4>)
 80112de:	681d      	ldr	r5, [r3, #0]
 80112e0:	f8d5 0148 	ldr.w	r0, [r5, #328]	; 0x148
 80112e4:	b918      	cbnz	r0, 80112ee <__register_exitproc+0x26>
 80112e6:	f505 70a6 	add.w	r0, r5, #332	; 0x14c
 80112ea:	f8c5 0148 	str.w	r0, [r5, #328]	; 0x148
 80112ee:	6843      	ldr	r3, [r0, #4]
 80112f0:	2b1f      	cmp	r3, #31
 80112f2:	dd19      	ble.n	8011328 <__register_exitproc+0x60>
 80112f4:	4b1e      	ldr	r3, [pc, #120]	; (8011370 <__register_exitproc+0xa8>)
 80112f6:	b933      	cbnz	r3, 8011306 <__register_exitproc+0x3e>
 80112f8:	6820      	ldr	r0, [r4, #0]
 80112fa:	f7ff f95e 	bl	80105ba <__retarget_lock_release_recursive>
 80112fe:	f04f 30ff 	mov.w	r0, #4294967295
 8011302:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011306:	f44f 70c8 	mov.w	r0, #400	; 0x190
 801130a:	f7fb fa6d 	bl	800c7e8 <malloc>
 801130e:	2800      	cmp	r0, #0
 8011310:	d0f2      	beq.n	80112f8 <__register_exitproc+0x30>
 8011312:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
 8011316:	6003      	str	r3, [r0, #0]
 8011318:	2200      	movs	r2, #0
 801131a:	6042      	str	r2, [r0, #4]
 801131c:	f8c5 0148 	str.w	r0, [r5, #328]	; 0x148
 8011320:	f8c0 2188 	str.w	r2, [r0, #392]	; 0x188
 8011324:	f8c0 218c 	str.w	r2, [r0, #396]	; 0x18c
 8011328:	6843      	ldr	r3, [r0, #4]
 801132a:	b19e      	cbz	r6, 8011354 <__register_exitproc+0x8c>
 801132c:	eb00 0583 	add.w	r5, r0, r3, lsl #2
 8011330:	2201      	movs	r2, #1
 8011332:	f8c5 9088 	str.w	r9, [r5, #136]	; 0x88
 8011336:	f8d0 1188 	ldr.w	r1, [r0, #392]	; 0x188
 801133a:	409a      	lsls	r2, r3
 801133c:	4311      	orrs	r1, r2
 801133e:	2e02      	cmp	r6, #2
 8011340:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
 8011344:	f8c5 8108 	str.w	r8, [r5, #264]	; 0x108
 8011348:	bf02      	ittt	eq
 801134a:	f8d0 118c 	ldreq.w	r1, [r0, #396]	; 0x18c
 801134e:	430a      	orreq	r2, r1
 8011350:	f8c0 218c 	streq.w	r2, [r0, #396]	; 0x18c
 8011354:	1c5a      	adds	r2, r3, #1
 8011356:	3302      	adds	r3, #2
 8011358:	6042      	str	r2, [r0, #4]
 801135a:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
 801135e:	6820      	ldr	r0, [r4, #0]
 8011360:	f7ff f92b 	bl	80105ba <__retarget_lock_release_recursive>
 8011364:	2000      	movs	r0, #0
 8011366:	e7cc      	b.n	8011302 <__register_exitproc+0x3a>
 8011368:	20000920 	.word	0x20000920
 801136c:	08011ae8 	.word	0x08011ae8
 8011370:	0800c7e9 	.word	0x0800c7e9

08011374 <_calloc_r>:
 8011374:	b510      	push	{r4, lr}
 8011376:	4351      	muls	r1, r2
 8011378:	f7fb fa46 	bl	800c808 <_malloc_r>
 801137c:	4604      	mov	r4, r0
 801137e:	b198      	cbz	r0, 80113a8 <_calloc_r+0x34>
 8011380:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8011384:	f022 0203 	bic.w	r2, r2, #3
 8011388:	3a04      	subs	r2, #4
 801138a:	2a24      	cmp	r2, #36	; 0x24
 801138c:	d81b      	bhi.n	80113c6 <_calloc_r+0x52>
 801138e:	2a13      	cmp	r2, #19
 8011390:	d917      	bls.n	80113c2 <_calloc_r+0x4e>
 8011392:	2100      	movs	r1, #0
 8011394:	2a1b      	cmp	r2, #27
 8011396:	e9c0 1100 	strd	r1, r1, [r0]
 801139a:	d807      	bhi.n	80113ac <_calloc_r+0x38>
 801139c:	f100 0308 	add.w	r3, r0, #8
 80113a0:	2200      	movs	r2, #0
 80113a2:	e9c3 2200 	strd	r2, r2, [r3]
 80113a6:	609a      	str	r2, [r3, #8]
 80113a8:	4620      	mov	r0, r4
 80113aa:	bd10      	pop	{r4, pc}
 80113ac:	2a24      	cmp	r2, #36	; 0x24
 80113ae:	e9c0 1102 	strd	r1, r1, [r0, #8]
 80113b2:	bf11      	iteee	ne
 80113b4:	f100 0310 	addne.w	r3, r0, #16
 80113b8:	6101      	streq	r1, [r0, #16]
 80113ba:	f100 0318 	addeq.w	r3, r0, #24
 80113be:	6141      	streq	r1, [r0, #20]
 80113c0:	e7ee      	b.n	80113a0 <_calloc_r+0x2c>
 80113c2:	4603      	mov	r3, r0
 80113c4:	e7ec      	b.n	80113a0 <_calloc_r+0x2c>
 80113c6:	2100      	movs	r1, #0
 80113c8:	f7fb fc54 	bl	800cc74 <memset>
 80113cc:	e7ec      	b.n	80113a8 <_calloc_r+0x34>

080113ce <memmove>:
 80113ce:	4288      	cmp	r0, r1
 80113d0:	b510      	push	{r4, lr}
 80113d2:	eb01 0302 	add.w	r3, r1, r2
 80113d6:	d807      	bhi.n	80113e8 <memmove+0x1a>
 80113d8:	1e42      	subs	r2, r0, #1
 80113da:	4299      	cmp	r1, r3
 80113dc:	d00a      	beq.n	80113f4 <memmove+0x26>
 80113de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80113e2:	f802 4f01 	strb.w	r4, [r2, #1]!
 80113e6:	e7f8      	b.n	80113da <memmove+0xc>
 80113e8:	4283      	cmp	r3, r0
 80113ea:	d9f5      	bls.n	80113d8 <memmove+0xa>
 80113ec:	1881      	adds	r1, r0, r2
 80113ee:	1ad2      	subs	r2, r2, r3
 80113f0:	42d3      	cmn	r3, r2
 80113f2:	d100      	bne.n	80113f6 <memmove+0x28>
 80113f4:	bd10      	pop	{r4, pc}
 80113f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80113fa:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80113fe:	e7f7      	b.n	80113f0 <memmove+0x22>

08011400 <sqrtf>:
 8011400:	b510      	push	{r4, lr}
 8011402:	ed2d 8b02 	vpush	{d8}
 8011406:	b08a      	sub	sp, #40	; 0x28
 8011408:	eeb0 8a40 	vmov.f32	s16, s0
 801140c:	f000 f848 	bl	80114a0 <__ieee754_sqrtf>
 8011410:	4b21      	ldr	r3, [pc, #132]	; (8011498 <sqrtf+0x98>)
 8011412:	f993 4000 	ldrsb.w	r4, [r3]
 8011416:	1c63      	adds	r3, r4, #1
 8011418:	d02c      	beq.n	8011474 <sqrtf+0x74>
 801141a:	eeb4 8a48 	vcmp.f32	s16, s16
 801141e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011422:	d627      	bvs.n	8011474 <sqrtf+0x74>
 8011424:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8011428:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801142c:	d522      	bpl.n	8011474 <sqrtf+0x74>
 801142e:	2301      	movs	r3, #1
 8011430:	9300      	str	r3, [sp, #0]
 8011432:	4b1a      	ldr	r3, [pc, #104]	; (801149c <sqrtf+0x9c>)
 8011434:	9301      	str	r3, [sp, #4]
 8011436:	ee18 0a10 	vmov	r0, s16
 801143a:	2300      	movs	r3, #0
 801143c:	9308      	str	r3, [sp, #32]
 801143e:	f7ef f893 	bl	8000568 <__aeabi_f2d>
 8011442:	2200      	movs	r2, #0
 8011444:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011448:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801144c:	2300      	movs	r3, #0
 801144e:	b9ac      	cbnz	r4, 801147c <sqrtf+0x7c>
 8011450:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8011454:	4668      	mov	r0, sp
 8011456:	f000 f826 	bl	80114a6 <matherr>
 801145a:	b1b8      	cbz	r0, 801148c <sqrtf+0x8c>
 801145c:	9b08      	ldr	r3, [sp, #32]
 801145e:	b11b      	cbz	r3, 8011468 <sqrtf+0x68>
 8011460:	f7fb f998 	bl	800c794 <__errno>
 8011464:	9b08      	ldr	r3, [sp, #32]
 8011466:	6003      	str	r3, [r0, #0]
 8011468:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801146c:	f7ef fbcc 	bl	8000c08 <__aeabi_d2f>
 8011470:	ee00 0a10 	vmov	s0, r0
 8011474:	b00a      	add	sp, #40	; 0x28
 8011476:	ecbd 8b02 	vpop	{d8}
 801147a:	bd10      	pop	{r4, pc}
 801147c:	4610      	mov	r0, r2
 801147e:	4619      	mov	r1, r3
 8011480:	f7ef f9f4 	bl	800086c <__aeabi_ddiv>
 8011484:	2c02      	cmp	r4, #2
 8011486:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801148a:	d1e3      	bne.n	8011454 <sqrtf+0x54>
 801148c:	f7fb f982 	bl	800c794 <__errno>
 8011490:	2321      	movs	r3, #33	; 0x21
 8011492:	6003      	str	r3, [r0, #0]
 8011494:	e7e2      	b.n	801145c <sqrtf+0x5c>
 8011496:	bf00      	nop
 8011498:	20000a90 	.word	0x20000a90
 801149c:	08011dad 	.word	0x08011dad

080114a0 <__ieee754_sqrtf>:
 80114a0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80114a4:	4770      	bx	lr

080114a6 <matherr>:
 80114a6:	2000      	movs	r0, #0
 80114a8:	4770      	bx	lr
	...

080114ac <_init>:
 80114ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80114ae:	bf00      	nop
 80114b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80114b2:	bc08      	pop	{r3}
 80114b4:	469e      	mov	lr, r3
 80114b6:	4770      	bx	lr

080114b8 <_fini>:
 80114b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80114ba:	bf00      	nop
 80114bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80114be:	bc08      	pop	{r3}
 80114c0:	469e      	mov	lr, r3
 80114c2:	4770      	bx	lr
