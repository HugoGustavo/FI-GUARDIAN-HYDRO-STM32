
ESP8266MQTT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000076d0  08000190  08000190  00010190  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003cc  08007860  08007860  00017860  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007c2c  08007c2c  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08007c2c  08007c2c  00017c2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007c34  08007c34  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007c34  08007c34  00017c34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007c38  08007c38  00017c38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08007c3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005d0  20000078  08007cb4  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000648  08007cb4  00020648  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001956d  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000340e  00000000  00000000  00039615  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000012a0  00000000  00000000  0003ca28  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001108  00000000  00000000  0003dcc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000040d4  00000000  00000000  0003edd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010af6  00000000  00000000  00042ea4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000deebc  00000000  00000000  0005399a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00132856  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000055a0  00000000  00000000  001328d4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007848 	.word	0x08007848

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08007848 	.word	0x08007848

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_drsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001e4:	e002      	b.n	80001ec <__adddf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_dsub>:
 80001e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001ec <__adddf3>:
 80001ec:	b530      	push	{r4, r5, lr}
 80001ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f6:	ea94 0f05 	teq	r4, r5
 80001fa:	bf08      	it	eq
 80001fc:	ea90 0f02 	teqeq	r0, r2
 8000200:	bf1f      	itttt	ne
 8000202:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000206:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000212:	f000 80e2 	beq.w	80003da <__adddf3+0x1ee>
 8000216:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021e:	bfb8      	it	lt
 8000220:	426d      	neglt	r5, r5
 8000222:	dd0c      	ble.n	800023e <__adddf3+0x52>
 8000224:	442c      	add	r4, r5
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	ea82 0000 	eor.w	r0, r2, r0
 8000232:	ea83 0101 	eor.w	r1, r3, r1
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	2d36      	cmp	r5, #54	; 0x36
 8000240:	bf88      	it	hi
 8000242:	bd30      	pophi	{r4, r5, pc}
 8000244:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800024c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000250:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x70>
 8000256:	4240      	negs	r0, r0
 8000258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000264:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x84>
 800026a:	4252      	negs	r2, r2
 800026c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000270:	ea94 0f05 	teq	r4, r5
 8000274:	f000 80a7 	beq.w	80003c6 <__adddf3+0x1da>
 8000278:	f1a4 0401 	sub.w	r4, r4, #1
 800027c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000280:	db0d      	blt.n	800029e <__adddf3+0xb2>
 8000282:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000286:	fa22 f205 	lsr.w	r2, r2, r5
 800028a:	1880      	adds	r0, r0, r2
 800028c:	f141 0100 	adc.w	r1, r1, #0
 8000290:	fa03 f20e 	lsl.w	r2, r3, lr
 8000294:	1880      	adds	r0, r0, r2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	4159      	adcs	r1, r3
 800029c:	e00e      	b.n	80002bc <__adddf3+0xd0>
 800029e:	f1a5 0520 	sub.w	r5, r5, #32
 80002a2:	f10e 0e20 	add.w	lr, lr, #32
 80002a6:	2a01      	cmp	r2, #1
 80002a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ac:	bf28      	it	cs
 80002ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	18c0      	adds	r0, r0, r3
 80002b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c0:	d507      	bpl.n	80002d2 <__adddf3+0xe6>
 80002c2:	f04f 0e00 	mov.w	lr, #0
 80002c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002d6:	d31b      	bcc.n	8000310 <__adddf3+0x124>
 80002d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002dc:	d30c      	bcc.n	80002f8 <__adddf3+0x10c>
 80002de:	0849      	lsrs	r1, r1, #1
 80002e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e8:	f104 0401 	add.w	r4, r4, #1
 80002ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002f4:	f080 809a 	bcs.w	800042c <__adddf3+0x240>
 80002f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002fc:	bf08      	it	eq
 80002fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000302:	f150 0000 	adcs.w	r0, r0, #0
 8000306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030a:	ea41 0105 	orr.w	r1, r1, r5
 800030e:	bd30      	pop	{r4, r5, pc}
 8000310:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000314:	4140      	adcs	r0, r0
 8000316:	eb41 0101 	adc.w	r1, r1, r1
 800031a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800031e:	f1a4 0401 	sub.w	r4, r4, #1
 8000322:	d1e9      	bne.n	80002f8 <__adddf3+0x10c>
 8000324:	f091 0f00 	teq	r1, #0
 8000328:	bf04      	itt	eq
 800032a:	4601      	moveq	r1, r0
 800032c:	2000      	moveq	r0, #0
 800032e:	fab1 f381 	clz	r3, r1
 8000332:	bf08      	it	eq
 8000334:	3320      	addeq	r3, #32
 8000336:	f1a3 030b 	sub.w	r3, r3, #11
 800033a:	f1b3 0220 	subs.w	r2, r3, #32
 800033e:	da0c      	bge.n	800035a <__adddf3+0x16e>
 8000340:	320c      	adds	r2, #12
 8000342:	dd08      	ble.n	8000356 <__adddf3+0x16a>
 8000344:	f102 0c14 	add.w	ip, r2, #20
 8000348:	f1c2 020c 	rsb	r2, r2, #12
 800034c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000350:	fa21 f102 	lsr.w	r1, r1, r2
 8000354:	e00c      	b.n	8000370 <__adddf3+0x184>
 8000356:	f102 0214 	add.w	r2, r2, #20
 800035a:	bfd8      	it	le
 800035c:	f1c2 0c20 	rsble	ip, r2, #32
 8000360:	fa01 f102 	lsl.w	r1, r1, r2
 8000364:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000368:	bfdc      	itt	le
 800036a:	ea41 010c 	orrle.w	r1, r1, ip
 800036e:	4090      	lslle	r0, r2
 8000370:	1ae4      	subs	r4, r4, r3
 8000372:	bfa2      	ittt	ge
 8000374:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000378:	4329      	orrge	r1, r5
 800037a:	bd30      	popge	{r4, r5, pc}
 800037c:	ea6f 0404 	mvn.w	r4, r4
 8000380:	3c1f      	subs	r4, #31
 8000382:	da1c      	bge.n	80003be <__adddf3+0x1d2>
 8000384:	340c      	adds	r4, #12
 8000386:	dc0e      	bgt.n	80003a6 <__adddf3+0x1ba>
 8000388:	f104 0414 	add.w	r4, r4, #20
 800038c:	f1c4 0220 	rsb	r2, r4, #32
 8000390:	fa20 f004 	lsr.w	r0, r0, r4
 8000394:	fa01 f302 	lsl.w	r3, r1, r2
 8000398:	ea40 0003 	orr.w	r0, r0, r3
 800039c:	fa21 f304 	lsr.w	r3, r1, r4
 80003a0:	ea45 0103 	orr.w	r1, r5, r3
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	f1c4 040c 	rsb	r4, r4, #12
 80003aa:	f1c4 0220 	rsb	r2, r4, #32
 80003ae:	fa20 f002 	lsr.w	r0, r0, r2
 80003b2:	fa01 f304 	lsl.w	r3, r1, r4
 80003b6:	ea40 0003 	orr.w	r0, r0, r3
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	fa21 f004 	lsr.w	r0, r1, r4
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f094 0f00 	teq	r4, #0
 80003ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ce:	bf06      	itte	eq
 80003d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003d4:	3401      	addeq	r4, #1
 80003d6:	3d01      	subne	r5, #1
 80003d8:	e74e      	b.n	8000278 <__adddf3+0x8c>
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf18      	it	ne
 80003e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e4:	d029      	beq.n	800043a <__adddf3+0x24e>
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	d005      	beq.n	80003fe <__adddf3+0x212>
 80003f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f6:	bf04      	itt	eq
 80003f8:	4619      	moveq	r1, r3
 80003fa:	4610      	moveq	r0, r2
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea91 0f03 	teq	r1, r3
 8000402:	bf1e      	ittt	ne
 8000404:	2100      	movne	r1, #0
 8000406:	2000      	movne	r0, #0
 8000408:	bd30      	popne	{r4, r5, pc}
 800040a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040e:	d105      	bne.n	800041c <__adddf3+0x230>
 8000410:	0040      	lsls	r0, r0, #1
 8000412:	4149      	adcs	r1, r1
 8000414:	bf28      	it	cs
 8000416:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800041a:	bd30      	pop	{r4, r5, pc}
 800041c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000420:	bf3c      	itt	cc
 8000422:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000426:	bd30      	popcc	{r4, r5, pc}
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800042c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf1a      	itte	ne
 8000440:	4619      	movne	r1, r3
 8000442:	4610      	movne	r0, r2
 8000444:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000448:	bf1c      	itt	ne
 800044a:	460b      	movne	r3, r1
 800044c:	4602      	movne	r2, r0
 800044e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000452:	bf06      	itte	eq
 8000454:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000458:	ea91 0f03 	teqeq	r1, r3
 800045c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	bf00      	nop

08000464 <__aeabi_ui2d>:
 8000464:	f090 0f00 	teq	r0, #0
 8000468:	bf04      	itt	eq
 800046a:	2100      	moveq	r1, #0
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000474:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000478:	f04f 0500 	mov.w	r5, #0
 800047c:	f04f 0100 	mov.w	r1, #0
 8000480:	e750      	b.n	8000324 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_i2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800049c:	bf48      	it	mi
 800049e:	4240      	negmi	r0, r0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e73e      	b.n	8000324 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_f2d>:
 80004a8:	0042      	lsls	r2, r0, #1
 80004aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b6:	bf1f      	itttt	ne
 80004b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004c4:	4770      	bxne	lr
 80004c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ca:	bf08      	it	eq
 80004cc:	4770      	bxeq	lr
 80004ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004d2:	bf04      	itt	eq
 80004d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e71c      	b.n	8000324 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_ul2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f04f 0500 	mov.w	r5, #0
 80004fa:	e00a      	b.n	8000512 <__aeabi_l2d+0x16>

080004fc <__aeabi_l2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800050a:	d502      	bpl.n	8000512 <__aeabi_l2d+0x16>
 800050c:	4240      	negs	r0, r0
 800050e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000512:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000516:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051e:	f43f aed8 	beq.w	80002d2 <__adddf3+0xe6>
 8000522:	f04f 0203 	mov.w	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000542:	fa20 f002 	lsr.w	r0, r0, r2
 8000546:	fa01 fe03 	lsl.w	lr, r1, r3
 800054a:	ea40 000e 	orr.w	r0, r0, lr
 800054e:	fa21 f102 	lsr.w	r1, r1, r2
 8000552:	4414      	add	r4, r2
 8000554:	e6bd      	b.n	80002d2 <__adddf3+0xe6>
 8000556:	bf00      	nop

08000558 <__aeabi_dmul>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800055e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000562:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000566:	bf1d      	ittte	ne
 8000568:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800056c:	ea94 0f0c 	teqne	r4, ip
 8000570:	ea95 0f0c 	teqne	r5, ip
 8000574:	f000 f8de 	bleq	8000734 <__aeabi_dmul+0x1dc>
 8000578:	442c      	add	r4, r5
 800057a:	ea81 0603 	eor.w	r6, r1, r3
 800057e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000582:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000586:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058a:	bf18      	it	ne
 800058c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000590:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000594:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000598:	d038      	beq.n	800060c <__aeabi_dmul+0xb4>
 800059a:	fba0 ce02 	umull	ip, lr, r0, r2
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ae:	f04f 0600 	mov.w	r6, #0
 80005b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005b6:	f09c 0f00 	teq	ip, #0
 80005ba:	bf18      	it	ne
 80005bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005cc:	d204      	bcs.n	80005d8 <__aeabi_dmul+0x80>
 80005ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d2:	416d      	adcs	r5, r5
 80005d4:	eb46 0606 	adc.w	r6, r6, r6
 80005d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f0:	bf88      	it	hi
 80005f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005f6:	d81e      	bhi.n	8000636 <__aeabi_dmul+0xde>
 80005f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005fc:	bf08      	it	eq
 80005fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000602:	f150 0000 	adcs.w	r0, r0, #0
 8000606:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000610:	ea46 0101 	orr.w	r1, r6, r1
 8000614:	ea40 0002 	orr.w	r0, r0, r2
 8000618:	ea81 0103 	eor.w	r1, r1, r3
 800061c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000620:	bfc2      	ittt	gt
 8000622:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000626:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062a:	bd70      	popgt	{r4, r5, r6, pc}
 800062c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000630:	f04f 0e00 	mov.w	lr, #0
 8000634:	3c01      	subs	r4, #1
 8000636:	f300 80ab 	bgt.w	8000790 <__aeabi_dmul+0x238>
 800063a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800063e:	bfde      	ittt	le
 8000640:	2000      	movle	r0, #0
 8000642:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000646:	bd70      	pople	{r4, r5, r6, pc}
 8000648:	f1c4 0400 	rsb	r4, r4, #0
 800064c:	3c20      	subs	r4, #32
 800064e:	da35      	bge.n	80006bc <__aeabi_dmul+0x164>
 8000650:	340c      	adds	r4, #12
 8000652:	dc1b      	bgt.n	800068c <__aeabi_dmul+0x134>
 8000654:	f104 0414 	add.w	r4, r4, #20
 8000658:	f1c4 0520 	rsb	r5, r4, #32
 800065c:	fa00 f305 	lsl.w	r3, r0, r5
 8000660:	fa20 f004 	lsr.w	r0, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea40 0002 	orr.w	r0, r0, r2
 800066c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000670:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000674:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000678:	fa21 f604 	lsr.w	r6, r1, r4
 800067c:	eb42 0106 	adc.w	r1, r2, r6
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f1c4 040c 	rsb	r4, r4, #12
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f304 	lsl.w	r3, r0, r4
 8000698:	fa20 f005 	lsr.w	r0, r0, r5
 800069c:	fa01 f204 	lsl.w	r2, r1, r4
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ac:	f141 0100 	adc.w	r1, r1, #0
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 0520 	rsb	r5, r4, #32
 80006c0:	fa00 f205 	lsl.w	r2, r0, r5
 80006c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c8:	fa20 f304 	lsr.w	r3, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea43 0302 	orr.w	r3, r3, r2
 80006d4:	fa21 f004 	lsr.w	r0, r1, r4
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006dc:	fa21 f204 	lsr.w	r2, r1, r4
 80006e0:	ea20 0002 	bic.w	r0, r0, r2
 80006e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f094 0f00 	teq	r4, #0
 80006f8:	d10f      	bne.n	800071a <__aeabi_dmul+0x1c2>
 80006fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006fe:	0040      	lsls	r0, r0, #1
 8000700:	eb41 0101 	adc.w	r1, r1, r1
 8000704:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3c01      	subeq	r4, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1a6>
 800070e:	ea41 0106 	orr.w	r1, r1, r6
 8000712:	f095 0f00 	teq	r5, #0
 8000716:	bf18      	it	ne
 8000718:	4770      	bxne	lr
 800071a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800071e:	0052      	lsls	r2, r2, #1
 8000720:	eb43 0303 	adc.w	r3, r3, r3
 8000724:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3d01      	subeq	r5, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1c6>
 800072e:	ea43 0306 	orr.w	r3, r3, r6
 8000732:	4770      	bx	lr
 8000734:	ea94 0f0c 	teq	r4, ip
 8000738:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800073c:	bf18      	it	ne
 800073e:	ea95 0f0c 	teqne	r5, ip
 8000742:	d00c      	beq.n	800075e <__aeabi_dmul+0x206>
 8000744:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000748:	bf18      	it	ne
 800074a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074e:	d1d1      	bne.n	80006f4 <__aeabi_dmul+0x19c>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd70      	pop	{r4, r5, r6, pc}
 800075e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000762:	bf06      	itte	eq
 8000764:	4610      	moveq	r0, r2
 8000766:	4619      	moveq	r1, r3
 8000768:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076c:	d019      	beq.n	80007a2 <__aeabi_dmul+0x24a>
 800076e:	ea94 0f0c 	teq	r4, ip
 8000772:	d102      	bne.n	800077a <__aeabi_dmul+0x222>
 8000774:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000778:	d113      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800077a:	ea95 0f0c 	teq	r5, ip
 800077e:	d105      	bne.n	800078c <__aeabi_dmul+0x234>
 8000780:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000784:	bf1c      	itt	ne
 8000786:	4610      	movne	r0, r2
 8000788:	4619      	movne	r1, r3
 800078a:	d10a      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800078c:	ea81 0103 	eor.w	r1, r1, r3
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000794:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000798:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800079c:	f04f 0000 	mov.w	r0, #0
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
 80007a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007aa:	bd70      	pop	{r4, r5, r6, pc}

080007ac <__aeabi_ddiv>:
 80007ac:	b570      	push	{r4, r5, r6, lr}
 80007ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ba:	bf1d      	ittte	ne
 80007bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c0:	ea94 0f0c 	teqne	r4, ip
 80007c4:	ea95 0f0c 	teqne	r5, ip
 80007c8:	f000 f8a7 	bleq	800091a <__aeabi_ddiv+0x16e>
 80007cc:	eba4 0405 	sub.w	r4, r4, r5
 80007d0:	ea81 0e03 	eor.w	lr, r1, r3
 80007d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007dc:	f000 8088 	beq.w	80008f0 <__aeabi_ddiv+0x144>
 80007e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000800:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000804:	429d      	cmp	r5, r3
 8000806:	bf08      	it	eq
 8000808:	4296      	cmpeq	r6, r2
 800080a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800080e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000812:	d202      	bcs.n	800081a <__aeabi_ddiv+0x6e>
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	1ab6      	subs	r6, r6, r2
 800081c:	eb65 0503 	sbc.w	r5, r5, r3
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800082a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000888:	ea55 0e06 	orrs.w	lr, r5, r6
 800088c:	d018      	beq.n	80008c0 <__aeabi_ddiv+0x114>
 800088e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000892:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000896:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800089e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008aa:	d1c0      	bne.n	800082e <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b0:	d10b      	bne.n	80008ca <__aeabi_ddiv+0x11e>
 80008b2:	ea41 0100 	orr.w	r1, r1, r0
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008be:	e7b6      	b.n	800082e <__aeabi_ddiv+0x82>
 80008c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c4:	bf04      	itt	eq
 80008c6:	4301      	orreq	r1, r0
 80008c8:	2000      	moveq	r0, #0
 80008ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ce:	bf88      	it	hi
 80008d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008d4:	f63f aeaf 	bhi.w	8000636 <__aeabi_dmul+0xde>
 80008d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008dc:	bf04      	itt	eq
 80008de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008e6:	f150 0000 	adcs.w	r0, r0, #0
 80008ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	pop	{r4, r5, r6, pc}
 80008f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008fc:	bfc2      	ittt	gt
 80008fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000902:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000906:	bd70      	popgt	{r4, r5, r6, pc}
 8000908:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800090c:	f04f 0e00 	mov.w	lr, #0
 8000910:	3c01      	subs	r4, #1
 8000912:	e690      	b.n	8000636 <__aeabi_dmul+0xde>
 8000914:	ea45 0e06 	orr.w	lr, r5, r6
 8000918:	e68d      	b.n	8000636 <__aeabi_dmul+0xde>
 800091a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800091e:	ea94 0f0c 	teq	r4, ip
 8000922:	bf08      	it	eq
 8000924:	ea95 0f0c 	teqeq	r5, ip
 8000928:	f43f af3b 	beq.w	80007a2 <__aeabi_dmul+0x24a>
 800092c:	ea94 0f0c 	teq	r4, ip
 8000930:	d10a      	bne.n	8000948 <__aeabi_ddiv+0x19c>
 8000932:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000936:	f47f af34 	bne.w	80007a2 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	f47f af25 	bne.w	800078c <__aeabi_dmul+0x234>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e72c      	b.n	80007a2 <__aeabi_dmul+0x24a>
 8000948:	ea95 0f0c 	teq	r5, ip
 800094c:	d106      	bne.n	800095c <__aeabi_ddiv+0x1b0>
 800094e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000952:	f43f aefd 	beq.w	8000750 <__aeabi_dmul+0x1f8>
 8000956:	4610      	mov	r0, r2
 8000958:	4619      	mov	r1, r3
 800095a:	e722      	b.n	80007a2 <__aeabi_dmul+0x24a>
 800095c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000960:	bf18      	it	ne
 8000962:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000966:	f47f aec5 	bne.w	80006f4 <__aeabi_dmul+0x19c>
 800096a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800096e:	f47f af0d 	bne.w	800078c <__aeabi_dmul+0x234>
 8000972:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000976:	f47f aeeb 	bne.w	8000750 <__aeabi_dmul+0x1f8>
 800097a:	e712      	b.n	80007a2 <__aeabi_dmul+0x24a>

0800097c <__gedf2>:
 800097c:	f04f 3cff 	mov.w	ip, #4294967295
 8000980:	e006      	b.n	8000990 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__ledf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	e002      	b.n	8000990 <__cmpdf2+0x4>
 800098a:	bf00      	nop

0800098c <__cmpdf2>:
 800098c:	f04f 0c01 	mov.w	ip, #1
 8000990:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000994:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000998:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800099c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009a6:	d01b      	beq.n	80009e0 <__cmpdf2+0x54>
 80009a8:	b001      	add	sp, #4
 80009aa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ae:	bf0c      	ite	eq
 80009b0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009b4:	ea91 0f03 	teqne	r1, r3
 80009b8:	bf02      	ittt	eq
 80009ba:	ea90 0f02 	teqeq	r0, r2
 80009be:	2000      	moveq	r0, #0
 80009c0:	4770      	bxeq	lr
 80009c2:	f110 0f00 	cmn.w	r0, #0
 80009c6:	ea91 0f03 	teq	r1, r3
 80009ca:	bf58      	it	pl
 80009cc:	4299      	cmppl	r1, r3
 80009ce:	bf08      	it	eq
 80009d0:	4290      	cmpeq	r0, r2
 80009d2:	bf2c      	ite	cs
 80009d4:	17d8      	asrcs	r0, r3, #31
 80009d6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009da:	f040 0001 	orr.w	r0, r0, #1
 80009de:	4770      	bx	lr
 80009e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d102      	bne.n	80009f0 <__cmpdf2+0x64>
 80009ea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009ee:	d107      	bne.n	8000a00 <__cmpdf2+0x74>
 80009f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d1d6      	bne.n	80009a8 <__cmpdf2+0x1c>
 80009fa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009fe:	d0d3      	beq.n	80009a8 <__cmpdf2+0x1c>
 8000a00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdrcmple>:
 8000a08:	4684      	mov	ip, r0
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	4662      	mov	r2, ip
 8000a0e:	468c      	mov	ip, r1
 8000a10:	4619      	mov	r1, r3
 8000a12:	4663      	mov	r3, ip
 8000a14:	e000      	b.n	8000a18 <__aeabi_cdcmpeq>
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdcmpeq>:
 8000a18:	b501      	push	{r0, lr}
 8000a1a:	f7ff ffb7 	bl	800098c <__cmpdf2>
 8000a1e:	2800      	cmp	r0, #0
 8000a20:	bf48      	it	mi
 8000a22:	f110 0f00 	cmnmi.w	r0, #0
 8000a26:	bd01      	pop	{r0, pc}

08000a28 <__aeabi_dcmpeq>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff fff4 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a30:	bf0c      	ite	eq
 8000a32:	2001      	moveq	r0, #1
 8000a34:	2000      	movne	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmplt>:
 8000a3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a40:	f7ff ffea 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a44:	bf34      	ite	cc
 8000a46:	2001      	movcc	r0, #1
 8000a48:	2000      	movcs	r0, #0
 8000a4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4e:	bf00      	nop

08000a50 <__aeabi_dcmple>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff ffe0 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a58:	bf94      	ite	ls
 8000a5a:	2001      	movls	r0, #1
 8000a5c:	2000      	movhi	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmpge>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffce 	bl	8000a08 <__aeabi_cdrcmple>
 8000a6c:	bf94      	ite	ls
 8000a6e:	2001      	movls	r0, #1
 8000a70:	2000      	movhi	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmpgt>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffc4 	bl	8000a08 <__aeabi_cdrcmple>
 8000a80:	bf34      	ite	cc
 8000a82:	2001      	movcc	r0, #1
 8000a84:	2000      	movcs	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_d2iz>:
 8000a8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a90:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a94:	d215      	bcs.n	8000ac2 <__aeabi_d2iz+0x36>
 8000a96:	d511      	bpl.n	8000abc <__aeabi_d2iz+0x30>
 8000a98:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a9c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000aa0:	d912      	bls.n	8000ac8 <__aeabi_d2iz+0x3c>
 8000aa2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aaa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ab2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ab6:	bf18      	it	ne
 8000ab8:	4240      	negne	r0, r0
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ac6:	d105      	bne.n	8000ad4 <__aeabi_d2iz+0x48>
 8000ac8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000acc:	bf08      	it	eq
 8000ace:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ad2:	4770      	bx	lr
 8000ad4:	f04f 0000 	mov.w	r0, #0
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop

08000adc <__aeabi_d2uiz>:
 8000adc:	004a      	lsls	r2, r1, #1
 8000ade:	d211      	bcs.n	8000b04 <__aeabi_d2uiz+0x28>
 8000ae0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ae4:	d211      	bcs.n	8000b0a <__aeabi_d2uiz+0x2e>
 8000ae6:	d50d      	bpl.n	8000b04 <__aeabi_d2uiz+0x28>
 8000ae8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aec:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000af0:	d40e      	bmi.n	8000b10 <__aeabi_d2uiz+0x34>
 8000af2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000af6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000afa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000afe:	fa23 f002 	lsr.w	r0, r3, r2
 8000b02:	4770      	bx	lr
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b0e:	d102      	bne.n	8000b16 <__aeabi_d2uiz+0x3a>
 8000b10:	f04f 30ff 	mov.w	r0, #4294967295
 8000b14:	4770      	bx	lr
 8000b16:	f04f 0000 	mov.w	r0, #0
 8000b1a:	4770      	bx	lr

08000b1c <__aeabi_d2f>:
 8000b1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b20:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b24:	bf24      	itt	cs
 8000b26:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b2a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b2e:	d90d      	bls.n	8000b4c <__aeabi_d2f+0x30>
 8000b30:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b34:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b38:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b3c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b40:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b44:	bf08      	it	eq
 8000b46:	f020 0001 	biceq.w	r0, r0, #1
 8000b4a:	4770      	bx	lr
 8000b4c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b50:	d121      	bne.n	8000b96 <__aeabi_d2f+0x7a>
 8000b52:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b56:	bfbc      	itt	lt
 8000b58:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	4770      	bxlt	lr
 8000b5e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b62:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b66:	f1c2 0218 	rsb	r2, r2, #24
 8000b6a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b6e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b72:	fa20 f002 	lsr.w	r0, r0, r2
 8000b76:	bf18      	it	ne
 8000b78:	f040 0001 	orrne.w	r0, r0, #1
 8000b7c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b80:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b84:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b88:	ea40 000c 	orr.w	r0, r0, ip
 8000b8c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b90:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b94:	e7cc      	b.n	8000b30 <__aeabi_d2f+0x14>
 8000b96:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b9a:	d107      	bne.n	8000bac <__aeabi_d2f+0x90>
 8000b9c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ba0:	bf1e      	ittt	ne
 8000ba2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ba6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000baa:	4770      	bxne	lr
 8000bac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bb0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bb4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop

08000bbc <__aeabi_uldivmod>:
 8000bbc:	b953      	cbnz	r3, 8000bd4 <__aeabi_uldivmod+0x18>
 8000bbe:	b94a      	cbnz	r2, 8000bd4 <__aeabi_uldivmod+0x18>
 8000bc0:	2900      	cmp	r1, #0
 8000bc2:	bf08      	it	eq
 8000bc4:	2800      	cmpeq	r0, #0
 8000bc6:	bf1c      	itt	ne
 8000bc8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bcc:	f04f 30ff 	movne.w	r0, #4294967295
 8000bd0:	f000 b972 	b.w	8000eb8 <__aeabi_idiv0>
 8000bd4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bdc:	f000 f806 	bl	8000bec <__udivmoddi4>
 8000be0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be8:	b004      	add	sp, #16
 8000bea:	4770      	bx	lr

08000bec <__udivmoddi4>:
 8000bec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bf0:	9e08      	ldr	r6, [sp, #32]
 8000bf2:	4604      	mov	r4, r0
 8000bf4:	4688      	mov	r8, r1
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d14b      	bne.n	8000c92 <__udivmoddi4+0xa6>
 8000bfa:	428a      	cmp	r2, r1
 8000bfc:	4615      	mov	r5, r2
 8000bfe:	d967      	bls.n	8000cd0 <__udivmoddi4+0xe4>
 8000c00:	fab2 f282 	clz	r2, r2
 8000c04:	b14a      	cbz	r2, 8000c1a <__udivmoddi4+0x2e>
 8000c06:	f1c2 0720 	rsb	r7, r2, #32
 8000c0a:	fa01 f302 	lsl.w	r3, r1, r2
 8000c0e:	fa20 f707 	lsr.w	r7, r0, r7
 8000c12:	4095      	lsls	r5, r2
 8000c14:	ea47 0803 	orr.w	r8, r7, r3
 8000c18:	4094      	lsls	r4, r2
 8000c1a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c1e:	0c23      	lsrs	r3, r4, #16
 8000c20:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c24:	fa1f fc85 	uxth.w	ip, r5
 8000c28:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c2c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c30:	fb07 f10c 	mul.w	r1, r7, ip
 8000c34:	4299      	cmp	r1, r3
 8000c36:	d909      	bls.n	8000c4c <__udivmoddi4+0x60>
 8000c38:	18eb      	adds	r3, r5, r3
 8000c3a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c3e:	f080 811b 	bcs.w	8000e78 <__udivmoddi4+0x28c>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 8118 	bls.w	8000e78 <__udivmoddi4+0x28c>
 8000c48:	3f02      	subs	r7, #2
 8000c4a:	442b      	add	r3, r5
 8000c4c:	1a5b      	subs	r3, r3, r1
 8000c4e:	b2a4      	uxth	r4, r4
 8000c50:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c54:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c5c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c60:	45a4      	cmp	ip, r4
 8000c62:	d909      	bls.n	8000c78 <__udivmoddi4+0x8c>
 8000c64:	192c      	adds	r4, r5, r4
 8000c66:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c6a:	f080 8107 	bcs.w	8000e7c <__udivmoddi4+0x290>
 8000c6e:	45a4      	cmp	ip, r4
 8000c70:	f240 8104 	bls.w	8000e7c <__udivmoddi4+0x290>
 8000c74:	3802      	subs	r0, #2
 8000c76:	442c      	add	r4, r5
 8000c78:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c7c:	eba4 040c 	sub.w	r4, r4, ip
 8000c80:	2700      	movs	r7, #0
 8000c82:	b11e      	cbz	r6, 8000c8c <__udivmoddi4+0xa0>
 8000c84:	40d4      	lsrs	r4, r2
 8000c86:	2300      	movs	r3, #0
 8000c88:	e9c6 4300 	strd	r4, r3, [r6]
 8000c8c:	4639      	mov	r1, r7
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d909      	bls.n	8000caa <__udivmoddi4+0xbe>
 8000c96:	2e00      	cmp	r6, #0
 8000c98:	f000 80eb 	beq.w	8000e72 <__udivmoddi4+0x286>
 8000c9c:	2700      	movs	r7, #0
 8000c9e:	e9c6 0100 	strd	r0, r1, [r6]
 8000ca2:	4638      	mov	r0, r7
 8000ca4:	4639      	mov	r1, r7
 8000ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000caa:	fab3 f783 	clz	r7, r3
 8000cae:	2f00      	cmp	r7, #0
 8000cb0:	d147      	bne.n	8000d42 <__udivmoddi4+0x156>
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d302      	bcc.n	8000cbc <__udivmoddi4+0xd0>
 8000cb6:	4282      	cmp	r2, r0
 8000cb8:	f200 80fa 	bhi.w	8000eb0 <__udivmoddi4+0x2c4>
 8000cbc:	1a84      	subs	r4, r0, r2
 8000cbe:	eb61 0303 	sbc.w	r3, r1, r3
 8000cc2:	2001      	movs	r0, #1
 8000cc4:	4698      	mov	r8, r3
 8000cc6:	2e00      	cmp	r6, #0
 8000cc8:	d0e0      	beq.n	8000c8c <__udivmoddi4+0xa0>
 8000cca:	e9c6 4800 	strd	r4, r8, [r6]
 8000cce:	e7dd      	b.n	8000c8c <__udivmoddi4+0xa0>
 8000cd0:	b902      	cbnz	r2, 8000cd4 <__udivmoddi4+0xe8>
 8000cd2:	deff      	udf	#255	; 0xff
 8000cd4:	fab2 f282 	clz	r2, r2
 8000cd8:	2a00      	cmp	r2, #0
 8000cda:	f040 808f 	bne.w	8000dfc <__udivmoddi4+0x210>
 8000cde:	1b49      	subs	r1, r1, r5
 8000ce0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ce4:	fa1f f885 	uxth.w	r8, r5
 8000ce8:	2701      	movs	r7, #1
 8000cea:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cee:	0c23      	lsrs	r3, r4, #16
 8000cf0:	fb0e 111c 	mls	r1, lr, ip, r1
 8000cf4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cf8:	fb08 f10c 	mul.w	r1, r8, ip
 8000cfc:	4299      	cmp	r1, r3
 8000cfe:	d907      	bls.n	8000d10 <__udivmoddi4+0x124>
 8000d00:	18eb      	adds	r3, r5, r3
 8000d02:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d06:	d202      	bcs.n	8000d0e <__udivmoddi4+0x122>
 8000d08:	4299      	cmp	r1, r3
 8000d0a:	f200 80cd 	bhi.w	8000ea8 <__udivmoddi4+0x2bc>
 8000d0e:	4684      	mov	ip, r0
 8000d10:	1a59      	subs	r1, r3, r1
 8000d12:	b2a3      	uxth	r3, r4
 8000d14:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d18:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d1c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d20:	fb08 f800 	mul.w	r8, r8, r0
 8000d24:	45a0      	cmp	r8, r4
 8000d26:	d907      	bls.n	8000d38 <__udivmoddi4+0x14c>
 8000d28:	192c      	adds	r4, r5, r4
 8000d2a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d2e:	d202      	bcs.n	8000d36 <__udivmoddi4+0x14a>
 8000d30:	45a0      	cmp	r8, r4
 8000d32:	f200 80b6 	bhi.w	8000ea2 <__udivmoddi4+0x2b6>
 8000d36:	4618      	mov	r0, r3
 8000d38:	eba4 0408 	sub.w	r4, r4, r8
 8000d3c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d40:	e79f      	b.n	8000c82 <__udivmoddi4+0x96>
 8000d42:	f1c7 0c20 	rsb	ip, r7, #32
 8000d46:	40bb      	lsls	r3, r7
 8000d48:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d4c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d50:	fa01 f407 	lsl.w	r4, r1, r7
 8000d54:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d58:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d5c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d60:	4325      	orrs	r5, r4
 8000d62:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d66:	0c2c      	lsrs	r4, r5, #16
 8000d68:	fb08 3319 	mls	r3, r8, r9, r3
 8000d6c:	fa1f fa8e 	uxth.w	sl, lr
 8000d70:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d74:	fb09 f40a 	mul.w	r4, r9, sl
 8000d78:	429c      	cmp	r4, r3
 8000d7a:	fa02 f207 	lsl.w	r2, r2, r7
 8000d7e:	fa00 f107 	lsl.w	r1, r0, r7
 8000d82:	d90b      	bls.n	8000d9c <__udivmoddi4+0x1b0>
 8000d84:	eb1e 0303 	adds.w	r3, lr, r3
 8000d88:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d8c:	f080 8087 	bcs.w	8000e9e <__udivmoddi4+0x2b2>
 8000d90:	429c      	cmp	r4, r3
 8000d92:	f240 8084 	bls.w	8000e9e <__udivmoddi4+0x2b2>
 8000d96:	f1a9 0902 	sub.w	r9, r9, #2
 8000d9a:	4473      	add	r3, lr
 8000d9c:	1b1b      	subs	r3, r3, r4
 8000d9e:	b2ad      	uxth	r5, r5
 8000da0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da4:	fb08 3310 	mls	r3, r8, r0, r3
 8000da8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000dac:	fb00 fa0a 	mul.w	sl, r0, sl
 8000db0:	45a2      	cmp	sl, r4
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x1da>
 8000db4:	eb1e 0404 	adds.w	r4, lr, r4
 8000db8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dbc:	d26b      	bcs.n	8000e96 <__udivmoddi4+0x2aa>
 8000dbe:	45a2      	cmp	sl, r4
 8000dc0:	d969      	bls.n	8000e96 <__udivmoddi4+0x2aa>
 8000dc2:	3802      	subs	r0, #2
 8000dc4:	4474      	add	r4, lr
 8000dc6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dca:	fba0 8902 	umull	r8, r9, r0, r2
 8000dce:	eba4 040a 	sub.w	r4, r4, sl
 8000dd2:	454c      	cmp	r4, r9
 8000dd4:	46c2      	mov	sl, r8
 8000dd6:	464b      	mov	r3, r9
 8000dd8:	d354      	bcc.n	8000e84 <__udivmoddi4+0x298>
 8000dda:	d051      	beq.n	8000e80 <__udivmoddi4+0x294>
 8000ddc:	2e00      	cmp	r6, #0
 8000dde:	d069      	beq.n	8000eb4 <__udivmoddi4+0x2c8>
 8000de0:	ebb1 050a 	subs.w	r5, r1, sl
 8000de4:	eb64 0403 	sbc.w	r4, r4, r3
 8000de8:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000dec:	40fd      	lsrs	r5, r7
 8000dee:	40fc      	lsrs	r4, r7
 8000df0:	ea4c 0505 	orr.w	r5, ip, r5
 8000df4:	e9c6 5400 	strd	r5, r4, [r6]
 8000df8:	2700      	movs	r7, #0
 8000dfa:	e747      	b.n	8000c8c <__udivmoddi4+0xa0>
 8000dfc:	f1c2 0320 	rsb	r3, r2, #32
 8000e00:	fa20 f703 	lsr.w	r7, r0, r3
 8000e04:	4095      	lsls	r5, r2
 8000e06:	fa01 f002 	lsl.w	r0, r1, r2
 8000e0a:	fa21 f303 	lsr.w	r3, r1, r3
 8000e0e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e12:	4338      	orrs	r0, r7
 8000e14:	0c01      	lsrs	r1, r0, #16
 8000e16:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e1a:	fa1f f885 	uxth.w	r8, r5
 8000e1e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e22:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e26:	fb07 f308 	mul.w	r3, r7, r8
 8000e2a:	428b      	cmp	r3, r1
 8000e2c:	fa04 f402 	lsl.w	r4, r4, r2
 8000e30:	d907      	bls.n	8000e42 <__udivmoddi4+0x256>
 8000e32:	1869      	adds	r1, r5, r1
 8000e34:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e38:	d22f      	bcs.n	8000e9a <__udivmoddi4+0x2ae>
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	d92d      	bls.n	8000e9a <__udivmoddi4+0x2ae>
 8000e3e:	3f02      	subs	r7, #2
 8000e40:	4429      	add	r1, r5
 8000e42:	1acb      	subs	r3, r1, r3
 8000e44:	b281      	uxth	r1, r0
 8000e46:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e4a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e4e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e52:	fb00 f308 	mul.w	r3, r0, r8
 8000e56:	428b      	cmp	r3, r1
 8000e58:	d907      	bls.n	8000e6a <__udivmoddi4+0x27e>
 8000e5a:	1869      	adds	r1, r5, r1
 8000e5c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e60:	d217      	bcs.n	8000e92 <__udivmoddi4+0x2a6>
 8000e62:	428b      	cmp	r3, r1
 8000e64:	d915      	bls.n	8000e92 <__udivmoddi4+0x2a6>
 8000e66:	3802      	subs	r0, #2
 8000e68:	4429      	add	r1, r5
 8000e6a:	1ac9      	subs	r1, r1, r3
 8000e6c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e70:	e73b      	b.n	8000cea <__udivmoddi4+0xfe>
 8000e72:	4637      	mov	r7, r6
 8000e74:	4630      	mov	r0, r6
 8000e76:	e709      	b.n	8000c8c <__udivmoddi4+0xa0>
 8000e78:	4607      	mov	r7, r0
 8000e7a:	e6e7      	b.n	8000c4c <__udivmoddi4+0x60>
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	e6fb      	b.n	8000c78 <__udivmoddi4+0x8c>
 8000e80:	4541      	cmp	r1, r8
 8000e82:	d2ab      	bcs.n	8000ddc <__udivmoddi4+0x1f0>
 8000e84:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e88:	eb69 020e 	sbc.w	r2, r9, lr
 8000e8c:	3801      	subs	r0, #1
 8000e8e:	4613      	mov	r3, r2
 8000e90:	e7a4      	b.n	8000ddc <__udivmoddi4+0x1f0>
 8000e92:	4660      	mov	r0, ip
 8000e94:	e7e9      	b.n	8000e6a <__udivmoddi4+0x27e>
 8000e96:	4618      	mov	r0, r3
 8000e98:	e795      	b.n	8000dc6 <__udivmoddi4+0x1da>
 8000e9a:	4667      	mov	r7, ip
 8000e9c:	e7d1      	b.n	8000e42 <__udivmoddi4+0x256>
 8000e9e:	4681      	mov	r9, r0
 8000ea0:	e77c      	b.n	8000d9c <__udivmoddi4+0x1b0>
 8000ea2:	3802      	subs	r0, #2
 8000ea4:	442c      	add	r4, r5
 8000ea6:	e747      	b.n	8000d38 <__udivmoddi4+0x14c>
 8000ea8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eac:	442b      	add	r3, r5
 8000eae:	e72f      	b.n	8000d10 <__udivmoddi4+0x124>
 8000eb0:	4638      	mov	r0, r7
 8000eb2:	e708      	b.n	8000cc6 <__udivmoddi4+0xda>
 8000eb4:	4637      	mov	r7, r6
 8000eb6:	e6e9      	b.n	8000c8c <__udivmoddi4+0xa0>

08000eb8 <__aeabi_idiv0>:
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop

08000ebc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ebc:	b5b0      	push	{r4, r5, r7, lr}
 8000ebe:	b088      	sub	sp, #32
 8000ec0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ec2:	f000 ff56 	bl	8001d72 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ec6:	f000 f82b 	bl	8000f20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eca:	f000 f99d 	bl	8001208 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ece:	f000 f97d 	bl	80011cc <MX_DMA_Init>
  MX_ADC1_Init();
 8000ed2:	f000 f8a5 	bl	8001020 <MX_ADC1_Init>
  MX_I2C2_Init();
 8000ed6:	f000 f909 	bl	80010ec <MX_I2C2_Init>
  MX_USART2_UART_Init();
 8000eda:	f000 f947 	bl	800116c <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  sen0189* sen0189 = sen0189_init(&hadc1);
 8000ede:	480f      	ldr	r0, [pc, #60]	; (8000f1c <main+0x60>)
 8000ee0:	f000 fcf8 	bl	80018d4 <sen0189_init>
 8000ee4:	61f8      	str	r0, [r7, #28]
  char buffer[20];
  while (1){
	  float phValue = sen0189_read(sen0189);
 8000ee6:	69f8      	ldr	r0, [r7, #28]
 8000ee8:	f000 fd16 	bl	8001918 <sen0189_read>
 8000eec:	ed87 0a06 	vstr	s0, [r7, #24]
	  gcvt(phValue, 2, buffer);
 8000ef0:	69b8      	ldr	r0, [r7, #24]
 8000ef2:	f7ff fad9 	bl	80004a8 <__aeabi_f2d>
 8000ef6:	4604      	mov	r4, r0
 8000ef8:	460d      	mov	r5, r1
 8000efa:	1d3b      	adds	r3, r7, #4
 8000efc:	4619      	mov	r1, r3
 8000efe:	2002      	movs	r0, #2
 8000f00:	ec45 4b10 	vmov	d0, r4, r5
 8000f04:	f005 f930 	bl	8006168 <gcvt>
	  logger_trace(logger_get_instance(), buffer);
 8000f08:	f000 fe8e 	bl	8001c28 <logger_get_instance>
 8000f0c:	4602      	mov	r2, r0
 8000f0e:	1d3b      	adds	r3, r7, #4
 8000f10:	4619      	mov	r1, r3
 8000f12:	4610      	mov	r0, r2
 8000f14:	f000 fea4 	bl	8001c60 <logger_trace>
  while (1){
 8000f18:	e7e5      	b.n	8000ee6 <main+0x2a>
 8000f1a:	bf00      	nop
 8000f1c:	200000f4 	.word	0x200000f4

08000f20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b0ae      	sub	sp, #184	; 0xb8
 8000f24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f26:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000f2a:	2244      	movs	r2, #68	; 0x44
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f005 f978 	bl	8006224 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f34:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000f38:	2200      	movs	r2, #0
 8000f3a:	601a      	str	r2, [r3, #0]
 8000f3c:	605a      	str	r2, [r3, #4]
 8000f3e:	609a      	str	r2, [r3, #8]
 8000f40:	60da      	str	r2, [r3, #12]
 8000f42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f44:	463b      	mov	r3, r7
 8000f46:	2260      	movs	r2, #96	; 0x60
 8000f48:	2100      	movs	r1, #0
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f005 f96a 	bl	8006224 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f50:	2301      	movs	r3, #1
 8000f52:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f54:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f58:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f5a:	2302      	movs	r3, #2
 8000f5c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f60:	2303      	movs	r3, #3
 8000f62:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000f66:	2301      	movs	r3, #1
 8000f68:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLN = 20;
 8000f6c:	2314      	movs	r3, #20
 8000f6e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000f72:	2307      	movs	r3, #7
 8000f74:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000f78:	2302      	movs	r3, #2
 8000f7a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000f7e:	2302      	movs	r3, #2
 8000f80:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f84:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f003 fad1 	bl	8004530 <HAL_RCC_OscConfig>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000f94:	f000 f9a6 	bl	80012e4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f98:	230f      	movs	r3, #15
 8000f9a:	663b      	str	r3, [r7, #96]	; 0x60
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f9c:	2303      	movs	r3, #3
 8000f9e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	673b      	str	r3, [r7, #112]	; 0x70

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000fac:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000fb0:	2104      	movs	r1, #4
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f003 fedc 	bl	8004d70 <HAL_RCC_ClockConfig>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000fbe:	f000 f991 	bl	80012e4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C2
 8000fc2:	f244 0382 	movw	r3, #16514	; 0x4082
 8000fc6:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000fd0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000fd4:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8000fd6:	2303      	movs	r3, #3
 8000fd8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000fde:	2308      	movs	r3, #8
 8000fe0:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000fe2:	2307      	movs	r3, #7
 8000fe4:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000fe6:	2302      	movs	r3, #2
 8000fe8:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000fea:	2302      	movs	r3, #2
 8000fec:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000fee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000ff2:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ff4:	463b      	mov	r3, r7
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f004 f8be 	bl	8005178 <HAL_RCCEx_PeriphCLKConfig>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8001002:	f000 f96f 	bl	80012e4 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001006:	f44f 7000 	mov.w	r0, #512	; 0x200
 800100a:	f003 fa3b 	bl	8004484 <HAL_PWREx_ControlVoltageScaling>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 8001014:	f000 f966 	bl	80012e4 <Error_Handler>
  }
}
 8001018:	bf00      	nop
 800101a:	37b8      	adds	r7, #184	; 0xb8
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}

08001020 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b086      	sub	sp, #24
 8001024:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001026:	463b      	mov	r3, r7
 8001028:	2200      	movs	r2, #0
 800102a:	601a      	str	r2, [r3, #0]
 800102c:	605a      	str	r2, [r3, #4]
 800102e:	609a      	str	r2, [r3, #8]
 8001030:	60da      	str	r2, [r3, #12]
 8001032:	611a      	str	r2, [r3, #16]
 8001034:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 8001036:	4b2a      	ldr	r3, [pc, #168]	; (80010e0 <MX_ADC1_Init+0xc0>)
 8001038:	4a2a      	ldr	r2, [pc, #168]	; (80010e4 <MX_ADC1_Init+0xc4>)
 800103a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800103c:	4b28      	ldr	r3, [pc, #160]	; (80010e0 <MX_ADC1_Init+0xc0>)
 800103e:	2200      	movs	r2, #0
 8001040:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001042:	4b27      	ldr	r3, [pc, #156]	; (80010e0 <MX_ADC1_Init+0xc0>)
 8001044:	2200      	movs	r2, #0
 8001046:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001048:	4b25      	ldr	r3, [pc, #148]	; (80010e0 <MX_ADC1_Init+0xc0>)
 800104a:	2200      	movs	r2, #0
 800104c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800104e:	4b24      	ldr	r3, [pc, #144]	; (80010e0 <MX_ADC1_Init+0xc0>)
 8001050:	2200      	movs	r2, #0
 8001052:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001054:	4b22      	ldr	r3, [pc, #136]	; (80010e0 <MX_ADC1_Init+0xc0>)
 8001056:	2204      	movs	r2, #4
 8001058:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800105a:	4b21      	ldr	r3, [pc, #132]	; (80010e0 <MX_ADC1_Init+0xc0>)
 800105c:	2200      	movs	r2, #0
 800105e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001060:	4b1f      	ldr	r3, [pc, #124]	; (80010e0 <MX_ADC1_Init+0xc0>)
 8001062:	2201      	movs	r2, #1
 8001064:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001066:	4b1e      	ldr	r3, [pc, #120]	; (80010e0 <MX_ADC1_Init+0xc0>)
 8001068:	2201      	movs	r2, #1
 800106a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800106c:	4b1c      	ldr	r3, [pc, #112]	; (80010e0 <MX_ADC1_Init+0xc0>)
 800106e:	2200      	movs	r2, #0
 8001070:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 8001074:	4b1a      	ldr	r3, [pc, #104]	; (80010e0 <MX_ADC1_Init+0xc0>)
 8001076:	2201      	movs	r2, #1
 8001078:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800107a:	4b19      	ldr	r3, [pc, #100]	; (80010e0 <MX_ADC1_Init+0xc0>)
 800107c:	2200      	movs	r2, #0
 800107e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001080:	4b17      	ldr	r3, [pc, #92]	; (80010e0 <MX_ADC1_Init+0xc0>)
 8001082:	2200      	movs	r2, #0
 8001084:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001086:	4b16      	ldr	r3, [pc, #88]	; (80010e0 <MX_ADC1_Init+0xc0>)
 8001088:	2200      	movs	r2, #0
 800108a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800108e:	4b14      	ldr	r3, [pc, #80]	; (80010e0 <MX_ADC1_Init+0xc0>)
 8001090:	2200      	movs	r2, #0
 8001092:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001094:	4b12      	ldr	r3, [pc, #72]	; (80010e0 <MX_ADC1_Init+0xc0>)
 8001096:	2200      	movs	r2, #0
 8001098:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800109c:	4810      	ldr	r0, [pc, #64]	; (80010e0 <MX_ADC1_Init+0xc0>)
 800109e:	f001 f917 	bl	80022d0 <HAL_ADC_Init>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 80010a8:	f000 f91c 	bl	80012e4 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80010ac:	4b0e      	ldr	r3, [pc, #56]	; (80010e8 <MX_ADC1_Init+0xc8>)
 80010ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010b0:	2306      	movs	r3, #6
 80010b2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80010b4:	2300      	movs	r3, #0
 80010b6:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80010b8:	237f      	movs	r3, #127	; 0x7f
 80010ba:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80010bc:	2304      	movs	r3, #4
 80010be:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80010c0:	2300      	movs	r3, #0
 80010c2:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010c4:	463b      	mov	r3, r7
 80010c6:	4619      	mov	r1, r3
 80010c8:	4805      	ldr	r0, [pc, #20]	; (80010e0 <MX_ADC1_Init+0xc0>)
 80010ca:	f001 fd45 	bl	8002b58 <HAL_ADC_ConfigChannel>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 80010d4:	f000 f906 	bl	80012e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010d8:	bf00      	nop
 80010da:	3718      	adds	r7, #24
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	200000f4 	.word	0x200000f4
 80010e4:	50040000 	.word	0x50040000
 80010e8:	04300002 	.word	0x04300002

080010ec <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80010f0:	4b1b      	ldr	r3, [pc, #108]	; (8001160 <MX_I2C2_Init+0x74>)
 80010f2:	4a1c      	ldr	r2, [pc, #112]	; (8001164 <MX_I2C2_Init+0x78>)
 80010f4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 80010f6:	4b1a      	ldr	r3, [pc, #104]	; (8001160 <MX_I2C2_Init+0x74>)
 80010f8:	4a1b      	ldr	r2, [pc, #108]	; (8001168 <MX_I2C2_Init+0x7c>)
 80010fa:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80010fc:	4b18      	ldr	r3, [pc, #96]	; (8001160 <MX_I2C2_Init+0x74>)
 80010fe:	2200      	movs	r2, #0
 8001100:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001102:	4b17      	ldr	r3, [pc, #92]	; (8001160 <MX_I2C2_Init+0x74>)
 8001104:	2201      	movs	r2, #1
 8001106:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001108:	4b15      	ldr	r3, [pc, #84]	; (8001160 <MX_I2C2_Init+0x74>)
 800110a:	2200      	movs	r2, #0
 800110c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800110e:	4b14      	ldr	r3, [pc, #80]	; (8001160 <MX_I2C2_Init+0x74>)
 8001110:	2200      	movs	r2, #0
 8001112:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001114:	4b12      	ldr	r3, [pc, #72]	; (8001160 <MX_I2C2_Init+0x74>)
 8001116:	2200      	movs	r2, #0
 8001118:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800111a:	4b11      	ldr	r3, [pc, #68]	; (8001160 <MX_I2C2_Init+0x74>)
 800111c:	2200      	movs	r2, #0
 800111e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001120:	4b0f      	ldr	r3, [pc, #60]	; (8001160 <MX_I2C2_Init+0x74>)
 8001122:	2200      	movs	r2, #0
 8001124:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001126:	480e      	ldr	r0, [pc, #56]	; (8001160 <MX_I2C2_Init+0x74>)
 8001128:	f002 fe0e 	bl	8003d48 <HAL_I2C_Init>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001132:	f000 f8d7 	bl	80012e4 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001136:	2100      	movs	r1, #0
 8001138:	4809      	ldr	r0, [pc, #36]	; (8001160 <MX_I2C2_Init+0x74>)
 800113a:	f003 f8fd 	bl	8004338 <HAL_I2CEx_ConfigAnalogFilter>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001144:	f000 f8ce 	bl	80012e4 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001148:	2100      	movs	r1, #0
 800114a:	4805      	ldr	r0, [pc, #20]	; (8001160 <MX_I2C2_Init+0x74>)
 800114c:	f003 f93f 	bl	80043ce <HAL_I2CEx_ConfigDigitalFilter>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001156:	f000 f8c5 	bl	80012e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800115a:	bf00      	nop
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	200000a8 	.word	0x200000a8
 8001164:	40005800 	.word	0x40005800
 8001168:	10909cec 	.word	0x10909cec

0800116c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001170:	4b14      	ldr	r3, [pc, #80]	; (80011c4 <MX_USART2_UART_Init+0x58>)
 8001172:	4a15      	ldr	r2, [pc, #84]	; (80011c8 <MX_USART2_UART_Init+0x5c>)
 8001174:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001176:	4b13      	ldr	r3, [pc, #76]	; (80011c4 <MX_USART2_UART_Init+0x58>)
 8001178:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800117c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800117e:	4b11      	ldr	r3, [pc, #68]	; (80011c4 <MX_USART2_UART_Init+0x58>)
 8001180:	2200      	movs	r2, #0
 8001182:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001184:	4b0f      	ldr	r3, [pc, #60]	; (80011c4 <MX_USART2_UART_Init+0x58>)
 8001186:	2200      	movs	r2, #0
 8001188:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800118a:	4b0e      	ldr	r3, [pc, #56]	; (80011c4 <MX_USART2_UART_Init+0x58>)
 800118c:	2200      	movs	r2, #0
 800118e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001190:	4b0c      	ldr	r3, [pc, #48]	; (80011c4 <MX_USART2_UART_Init+0x58>)
 8001192:	220c      	movs	r2, #12
 8001194:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001196:	4b0b      	ldr	r3, [pc, #44]	; (80011c4 <MX_USART2_UART_Init+0x58>)
 8001198:	2200      	movs	r2, #0
 800119a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800119c:	4b09      	ldr	r3, [pc, #36]	; (80011c4 <MX_USART2_UART_Init+0x58>)
 800119e:	2200      	movs	r2, #0
 80011a0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011a2:	4b08      	ldr	r3, [pc, #32]	; (80011c4 <MX_USART2_UART_Init+0x58>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011a8:	4b06      	ldr	r3, [pc, #24]	; (80011c4 <MX_USART2_UART_Init+0x58>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011ae:	4805      	ldr	r0, [pc, #20]	; (80011c4 <MX_USART2_UART_Init+0x58>)
 80011b0:	f004 fb16 	bl	80057e0 <HAL_UART_Init>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80011ba:	f000 f893 	bl	80012e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011be:	bf00      	nop
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	200001a0 	.word	0x200001a0
 80011c8:	40004400 	.word	0x40004400

080011cc <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011d2:	4b0c      	ldr	r3, [pc, #48]	; (8001204 <MX_DMA_Init+0x38>)
 80011d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011d6:	4a0b      	ldr	r2, [pc, #44]	; (8001204 <MX_DMA_Init+0x38>)
 80011d8:	f043 0301 	orr.w	r3, r3, #1
 80011dc:	6493      	str	r3, [r2, #72]	; 0x48
 80011de:	4b09      	ldr	r3, [pc, #36]	; (8001204 <MX_DMA_Init+0x38>)
 80011e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011e2:	f003 0301 	and.w	r3, r3, #1
 80011e6:	607b      	str	r3, [r7, #4]
 80011e8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80011ea:	2200      	movs	r2, #0
 80011ec:	2100      	movs	r1, #0
 80011ee:	200b      	movs	r0, #11
 80011f0:	f002 fa79 	bl	80036e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80011f4:	200b      	movs	r0, #11
 80011f6:	f002 fa92 	bl	800371e <HAL_NVIC_EnableIRQ>

}
 80011fa:	bf00      	nop
 80011fc:	3708      	adds	r7, #8
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	40021000 	.word	0x40021000

08001208 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b08a      	sub	sp, #40	; 0x28
 800120c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800120e:	f107 0314 	add.w	r3, r7, #20
 8001212:	2200      	movs	r2, #0
 8001214:	601a      	str	r2, [r3, #0]
 8001216:	605a      	str	r2, [r3, #4]
 8001218:	609a      	str	r2, [r3, #8]
 800121a:	60da      	str	r2, [r3, #12]
 800121c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800121e:	4b2f      	ldr	r3, [pc, #188]	; (80012dc <MX_GPIO_Init+0xd4>)
 8001220:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001222:	4a2e      	ldr	r2, [pc, #184]	; (80012dc <MX_GPIO_Init+0xd4>)
 8001224:	f043 0304 	orr.w	r3, r3, #4
 8001228:	64d3      	str	r3, [r2, #76]	; 0x4c
 800122a:	4b2c      	ldr	r3, [pc, #176]	; (80012dc <MX_GPIO_Init+0xd4>)
 800122c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800122e:	f003 0304 	and.w	r3, r3, #4
 8001232:	613b      	str	r3, [r7, #16]
 8001234:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001236:	4b29      	ldr	r3, [pc, #164]	; (80012dc <MX_GPIO_Init+0xd4>)
 8001238:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800123a:	4a28      	ldr	r2, [pc, #160]	; (80012dc <MX_GPIO_Init+0xd4>)
 800123c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001240:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001242:	4b26      	ldr	r3, [pc, #152]	; (80012dc <MX_GPIO_Init+0xd4>)
 8001244:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001246:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800124a:	60fb      	str	r3, [r7, #12]
 800124c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800124e:	4b23      	ldr	r3, [pc, #140]	; (80012dc <MX_GPIO_Init+0xd4>)
 8001250:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001252:	4a22      	ldr	r2, [pc, #136]	; (80012dc <MX_GPIO_Init+0xd4>)
 8001254:	f043 0301 	orr.w	r3, r3, #1
 8001258:	64d3      	str	r3, [r2, #76]	; 0x4c
 800125a:	4b20      	ldr	r3, [pc, #128]	; (80012dc <MX_GPIO_Init+0xd4>)
 800125c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800125e:	f003 0301 	and.w	r3, r3, #1
 8001262:	60bb      	str	r3, [r7, #8]
 8001264:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001266:	4b1d      	ldr	r3, [pc, #116]	; (80012dc <MX_GPIO_Init+0xd4>)
 8001268:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800126a:	4a1c      	ldr	r2, [pc, #112]	; (80012dc <MX_GPIO_Init+0xd4>)
 800126c:	f043 0302 	orr.w	r3, r3, #2
 8001270:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001272:	4b1a      	ldr	r3, [pc, #104]	; (80012dc <MX_GPIO_Init+0xd4>)
 8001274:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001276:	f003 0302 	and.w	r3, r3, #2
 800127a:	607b      	str	r3, [r7, #4]
 800127c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP_EN_GPIO_Port, ESP_EN_Pin, GPIO_PIN_RESET);
 800127e:	2200      	movs	r2, #0
 8001280:	2120      	movs	r1, #32
 8001282:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001286:	f002 fd47 	bl	8003d18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP_POWER_EN_GPIO_Port, ESP_POWER_EN_Pin, GPIO_PIN_SET);
 800128a:	2201      	movs	r2, #1
 800128c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001290:	4813      	ldr	r0, [pc, #76]	; (80012e0 <MX_GPIO_Init+0xd8>)
 8001292:	f002 fd41 	bl	8003d18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ESP_EN_Pin */
  GPIO_InitStruct.Pin = ESP_EN_Pin;
 8001296:	2320      	movs	r3, #32
 8001298:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800129a:	2301      	movs	r3, #1
 800129c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129e:	2300      	movs	r3, #0
 80012a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a2:	2300      	movs	r3, #0
 80012a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ESP_EN_GPIO_Port, &GPIO_InitStruct);
 80012a6:	f107 0314 	add.w	r3, r7, #20
 80012aa:	4619      	mov	r1, r3
 80012ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012b0:	f002 fbb8 	bl	8003a24 <HAL_GPIO_Init>

  /*Configure GPIO pin : ESP_POWER_EN_Pin */
  GPIO_InitStruct.Pin = ESP_POWER_EN_Pin;
 80012b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80012b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ba:	2301      	movs	r3, #1
 80012bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012be:	2300      	movs	r3, #0
 80012c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c2:	2300      	movs	r3, #0
 80012c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ESP_POWER_EN_GPIO_Port, &GPIO_InitStruct);
 80012c6:	f107 0314 	add.w	r3, r7, #20
 80012ca:	4619      	mov	r1, r3
 80012cc:	4804      	ldr	r0, [pc, #16]	; (80012e0 <MX_GPIO_Init+0xd8>)
 80012ce:	f002 fba9 	bl	8003a24 <HAL_GPIO_Init>

}
 80012d2:	bf00      	nop
 80012d4:	3728      	adds	r7, #40	; 0x28
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	40021000 	.word	0x40021000
 80012e0:	48000400 	.word	0x48000400

080012e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80012e8:	bf00      	nop
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
	...

080012f4 <at_rx_interrupt>:
    }

    return AT_STATUS_OK;
}

void at_rx_interrupt(uint8_t c){
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	4603      	mov	r3, r0
 80012fc:	71fb      	strb	r3, [r7, #7]
	if(at_started){
 80012fe:	4b07      	ldr	r3, [pc, #28]	; (800131c <at_rx_interrupt+0x28>)
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	b2db      	uxtb	r3, r3
 8001304:	2b00      	cmp	r3, #0
 8001306:	d004      	beq.n	8001312 <at_rx_interrupt+0x1e>
		if(ceb_cbuf_put(&at_cb, c) == CEB_CBUF_FULL){
 8001308:	79fb      	ldrb	r3, [r7, #7]
 800130a:	4619      	mov	r1, r3
 800130c:	4804      	ldr	r0, [pc, #16]	; (8001320 <at_rx_interrupt+0x2c>)
 800130e:	f000 f809 	bl	8001324 <ceb_cbuf_put>
			//printf("%02X-",buffer[0]);
			//printf("%c",c);
			//fflush(stdout);
		}
	}
}
 8001312:	bf00      	nop
 8001314:	3708      	adds	r7, #8
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	20000094 	.word	0x20000094
 8001320:	20000220 	.word	0x20000220

08001324 <ceb_cbuf_put>:

	return CEB_CBUF_OK;
}

cbuf_status_t ceb_cbuf_put(ceb_cbuf_t *cb, uint8_t c)
{
 8001324:	b480      	push	{r7}
 8001326:	b085      	sub	sp, #20
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
 800132c:	460b      	mov	r3, r1
 800132e:	70fb      	strb	r3, [r7, #3]
	uint16_t next_prod = CEB_CBUF_INC(cb->prod,cb->size);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	881b      	ldrh	r3, [r3, #0]
 8001334:	b29b      	uxth	r3, r3
 8001336:	3301      	adds	r3, #1
 8001338:	687a      	ldr	r2, [r7, #4]
 800133a:	8892      	ldrh	r2, [r2, #4]
 800133c:	4293      	cmp	r3, r2
 800133e:	da05      	bge.n	800134c <ceb_cbuf_put+0x28>
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	881b      	ldrh	r3, [r3, #0]
 8001344:	b29b      	uxth	r3, r3
 8001346:	3301      	adds	r3, #1
 8001348:	b29b      	uxth	r3, r3
 800134a:	e000      	b.n	800134e <ceb_cbuf_put+0x2a>
 800134c:	2300      	movs	r3, #0
 800134e:	81fb      	strh	r3, [r7, #14]

	if(next_prod == cb->cons)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	885b      	ldrh	r3, [r3, #2]
 8001354:	b29b      	uxth	r3, r3
 8001356:	89fa      	ldrh	r2, [r7, #14]
 8001358:	429a      	cmp	r2, r3
 800135a:	d101      	bne.n	8001360 <ceb_cbuf_put+0x3c>
		return CEB_CBUF_FULL;
 800135c:	2301      	movs	r3, #1
 800135e:	e00b      	b.n	8001378 <ceb_cbuf_put+0x54>

	cb->buffer[cb->prod] = c;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	689b      	ldr	r3, [r3, #8]
 8001364:	687a      	ldr	r2, [r7, #4]
 8001366:	8812      	ldrh	r2, [r2, #0]
 8001368:	b292      	uxth	r2, r2
 800136a:	4413      	add	r3, r2
 800136c:	78fa      	ldrb	r2, [r7, #3]
 800136e:	701a      	strb	r2, [r3, #0]
	cb->prod = next_prod;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	89fa      	ldrh	r2, [r7, #14]
 8001374:	801a      	strh	r2, [r3, #0]

	return CEB_CBUF_OK;
 8001376:	2300      	movs	r3, #0
}
 8001378:	4618      	mov	r0, r3
 800137a:	3714      	adds	r7, #20
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr

08001384 <hw_debug>:
#if 0
{
	CDC_Transmit_FS((uint8_t*)msg,len);
}
#else
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
 800138c:	460b      	mov	r3, r1
 800138e:	807b      	strh	r3, [r7, #2]
	static uint8_t col 	= 0;
	static uint8_t row 	= 0;
	uint8_t nrow 		= 0;
 8001390:	2300      	movs	r3, #0
 8001392:	73fb      	strb	r3, [r7, #15]
	int n;

	SSD1306_Goto(col*6, row);
 8001394:	4b34      	ldr	r3, [pc, #208]	; (8001468 <hw_debug+0xe4>)
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	461a      	mov	r2, r3
 800139a:	0052      	lsls	r2, r2, #1
 800139c:	4413      	add	r3, r2
 800139e:	005b      	lsls	r3, r3, #1
 80013a0:	b2da      	uxtb	r2, r3
 80013a2:	4b32      	ldr	r3, [pc, #200]	; (800146c <hw_debug+0xe8>)
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	4619      	mov	r1, r3
 80013a8:	4610      	mov	r0, r2
 80013aa:	f000 faff 	bl	80019ac <SSD1306_Goto>

	for(n = 0 ; n < len; n++){
 80013ae:	2300      	movs	r3, #0
 80013b0:	60bb      	str	r3, [r7, #8]
 80013b2:	e051      	b.n	8001458 <hw_debug+0xd4>
		if(msg[n] == '\n' || msg[n] == '\r'){
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	687a      	ldr	r2, [r7, #4]
 80013b8:	4413      	add	r3, r2
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	2b0a      	cmp	r3, #10
 80013be:	d005      	beq.n	80013cc <hw_debug+0x48>
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	687a      	ldr	r2, [r7, #4]
 80013c4:	4413      	add	r3, r2
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	2b0d      	cmp	r3, #13
 80013ca:	d10c      	bne.n	80013e6 <hw_debug+0x62>
			nrow = (row+1) >= SSD1306_HEIGHT/8 ? 0 : row+1;
 80013cc:	4b27      	ldr	r3, [pc, #156]	; (800146c <hw_debug+0xe8>)
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	3301      	adds	r3, #1
 80013d2:	2b07      	cmp	r3, #7
 80013d4:	dc04      	bgt.n	80013e0 <hw_debug+0x5c>
 80013d6:	4b25      	ldr	r3, [pc, #148]	; (800146c <hw_debug+0xe8>)
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	3301      	adds	r3, #1
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	e000      	b.n	80013e2 <hw_debug+0x5e>
 80013e0:	2300      	movs	r3, #0
 80013e2:	73fb      	strb	r3, [r7, #15]
 80013e4:	e020      	b.n	8001428 <hw_debug+0xa4>
		}
		else {
			SSD1306_Write_Char(msg[n], &SSD1306_Font_07X05);
 80013e6:	68bb      	ldr	r3, [r7, #8]
 80013e8:	687a      	ldr	r2, [r7, #4]
 80013ea:	4413      	add	r3, r2
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	4920      	ldr	r1, [pc, #128]	; (8001470 <hw_debug+0xec>)
 80013f0:	4618      	mov	r0, r3
 80013f2:	f000 fb09 	bl	8001a08 <SSD1306_Write_Char>
			col++;
 80013f6:	4b1c      	ldr	r3, [pc, #112]	; (8001468 <hw_debug+0xe4>)
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	3301      	adds	r3, #1
 80013fc:	b2da      	uxtb	r2, r3
 80013fe:	4b1a      	ldr	r3, [pc, #104]	; (8001468 <hw_debug+0xe4>)
 8001400:	701a      	strb	r2, [r3, #0]
			if(col >= SSD1306_WIDTH/6){
 8001402:	4b19      	ldr	r3, [pc, #100]	; (8001468 <hw_debug+0xe4>)
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	2b14      	cmp	r3, #20
 8001408:	d90e      	bls.n	8001428 <hw_debug+0xa4>
				col = 0;
 800140a:	4b17      	ldr	r3, [pc, #92]	; (8001468 <hw_debug+0xe4>)
 800140c:	2200      	movs	r2, #0
 800140e:	701a      	strb	r2, [r3, #0]
				nrow = (row+1) >= SSD1306_HEIGHT/8 ? 0 : row+1;
 8001410:	4b16      	ldr	r3, [pc, #88]	; (800146c <hw_debug+0xe8>)
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	3301      	adds	r3, #1
 8001416:	2b07      	cmp	r3, #7
 8001418:	dc04      	bgt.n	8001424 <hw_debug+0xa0>
 800141a:	4b14      	ldr	r3, [pc, #80]	; (800146c <hw_debug+0xe8>)
 800141c:	781b      	ldrb	r3, [r3, #0]
 800141e:	3301      	adds	r3, #1
 8001420:	b2db      	uxtb	r3, r3
 8001422:	e000      	b.n	8001426 <hw_debug+0xa2>
 8001424:	2300      	movs	r3, #0
 8001426:	73fb      	strb	r3, [r7, #15]
			}
		}

		if(row != nrow){
 8001428:	4b10      	ldr	r3, [pc, #64]	; (800146c <hw_debug+0xe8>)
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	7bfa      	ldrb	r2, [r7, #15]
 800142e:	429a      	cmp	r2, r3
 8001430:	d00f      	beq.n	8001452 <hw_debug+0xce>
			row = nrow;
 8001432:	4a0e      	ldr	r2, [pc, #56]	; (800146c <hw_debug+0xe8>)
 8001434:	7bfb      	ldrb	r3, [r7, #15]
 8001436:	7013      	strb	r3, [r2, #0]
			SSD1306_Goto(col*6, row);
 8001438:	4b0b      	ldr	r3, [pc, #44]	; (8001468 <hw_debug+0xe4>)
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	461a      	mov	r2, r3
 800143e:	0052      	lsls	r2, r2, #1
 8001440:	4413      	add	r3, r2
 8001442:	005b      	lsls	r3, r3, #1
 8001444:	b2da      	uxtb	r2, r3
 8001446:	4b09      	ldr	r3, [pc, #36]	; (800146c <hw_debug+0xe8>)
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	4619      	mov	r1, r3
 800144c:	4610      	mov	r0, r2
 800144e:	f000 faad 	bl	80019ac <SSD1306_Goto>
	for(n = 0 ; n < len; n++){
 8001452:	68bb      	ldr	r3, [r7, #8]
 8001454:	3301      	adds	r3, #1
 8001456:	60bb      	str	r3, [r7, #8]
 8001458:	887b      	ldrh	r3, [r7, #2]
 800145a:	68ba      	ldr	r2, [r7, #8]
 800145c:	429a      	cmp	r2, r3
 800145e:	dba9      	blt.n	80013b4 <hw_debug+0x30>
		}
	}
}
 8001460:	bf00      	nop
 8001462:	3710      	adds	r7, #16
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	20000096 	.word	0x20000096
 800146c:	20000097 	.word	0x20000097
 8001470:	20000004 	.word	0x20000004

08001474 <USART2_IRQHandler>:
#endif

void USART2_IRQHandler(void){
 8001474:	b580      	push	{r7, lr}
 8001476:	b084      	sub	sp, #16
 8001478:	af00      	add	r7, sp, #0
    uint8_t c = 0;
 800147a:	2300      	movs	r3, #0
 800147c:	71fb      	strb	r3, [r7, #7]
    uint32_t sr;
    USART_TypeDef* h = UART_HANDLE.Instance;
 800147e:	4b16      	ldr	r3, [pc, #88]	; (80014d8 <USART2_IRQHandler+0x64>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	60bb      	str	r3, [r7, #8]

    // lê o status register e trata erros até que desapareçam
    // (o manual manda ler o SR e em seguida DR)

    sr = h->ISR;
 8001484:	68bb      	ldr	r3, [r7, #8]
 8001486:	69db      	ldr	r3, [r3, #28]
 8001488:	60fb      	str	r3, [r7, #12]

    while(sr & (UART_FLAG_ORE | UART_FLAG_PE | UART_FLAG_FE | UART_FLAG_NE)){
 800148a:	e005      	b.n	8001498 <USART2_IRQHandler+0x24>
    	h->ICR = UART_CLEAR_OREF | UART_CLEAR_PEF | UART_CLEAR_FEF | UART_CLEAR_NEF;
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	220f      	movs	r2, #15
 8001490:	621a      	str	r2, [r3, #32]
    	sr = h->ISR;
 8001492:	68bb      	ldr	r3, [r7, #8]
 8001494:	69db      	ldr	r3, [r3, #28]
 8001496:	60fb      	str	r3, [r7, #12]
    while(sr & (UART_FLAG_ORE | UART_FLAG_PE | UART_FLAG_FE | UART_FLAG_NE)){
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	f003 030f 	and.w	r3, r3, #15
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d1f4      	bne.n	800148c <USART2_IRQHandler+0x18>
        //c = h->RDR;
    }

    if(sr & UART_FLAG_RXNE){
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	f003 0320 	and.w	r3, r3, #32
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d011      	beq.n	80014d0 <USART2_IRQHandler+0x5c>
        c = h->RDR;
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80014b0:	b29b      	uxth	r3, r3
 80014b2:	b2db      	uxtb	r3, r3
 80014b4:	71fb      	strb	r3, [r7, #7]

        if(hw_debug_enable)
 80014b6:	4b09      	ldr	r3, [pc, #36]	; (80014dc <USART2_IRQHandler+0x68>)
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d004      	beq.n	80014c8 <USART2_IRQHandler+0x54>
        	hw_debug(&c, 1);
 80014be:	1dfb      	adds	r3, r7, #7
 80014c0:	2101      	movs	r1, #1
 80014c2:	4618      	mov	r0, r3
 80014c4:	f7ff ff5e 	bl	8001384 <hw_debug>

        at_rx_interrupt(c);
 80014c8:	79fb      	ldrb	r3, [r7, #7]
 80014ca:	4618      	mov	r0, r3
 80014cc:	f7ff ff12 	bl	80012f4 <at_rx_interrupt>
        // some action here
    }
}
 80014d0:	bf00      	nop
 80014d2:	3710      	adds	r7, #16
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	200001a0 	.word	0x200001a0
 80014dc:	20000095 	.word	0x20000095

080014e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014e6:	4b0f      	ldr	r3, [pc, #60]	; (8001524 <HAL_MspInit+0x44>)
 80014e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014ea:	4a0e      	ldr	r2, [pc, #56]	; (8001524 <HAL_MspInit+0x44>)
 80014ec:	f043 0301 	orr.w	r3, r3, #1
 80014f0:	6613      	str	r3, [r2, #96]	; 0x60
 80014f2:	4b0c      	ldr	r3, [pc, #48]	; (8001524 <HAL_MspInit+0x44>)
 80014f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014f6:	f003 0301 	and.w	r3, r3, #1
 80014fa:	607b      	str	r3, [r7, #4]
 80014fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014fe:	4b09      	ldr	r3, [pc, #36]	; (8001524 <HAL_MspInit+0x44>)
 8001500:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001502:	4a08      	ldr	r2, [pc, #32]	; (8001524 <HAL_MspInit+0x44>)
 8001504:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001508:	6593      	str	r3, [r2, #88]	; 0x58
 800150a:	4b06      	ldr	r3, [pc, #24]	; (8001524 <HAL_MspInit+0x44>)
 800150c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800150e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001512:	603b      	str	r3, [r7, #0]
 8001514:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001516:	bf00      	nop
 8001518:	370c      	adds	r7, #12
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	40021000 	.word	0x40021000

08001528 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b08a      	sub	sp, #40	; 0x28
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001530:	f107 0314 	add.w	r3, r7, #20
 8001534:	2200      	movs	r2, #0
 8001536:	601a      	str	r2, [r3, #0]
 8001538:	605a      	str	r2, [r3, #4]
 800153a:	609a      	str	r2, [r3, #8]
 800153c:	60da      	str	r2, [r3, #12]
 800153e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a2e      	ldr	r2, [pc, #184]	; (8001600 <HAL_ADC_MspInit+0xd8>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d156      	bne.n	80015f8 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800154a:	4b2e      	ldr	r3, [pc, #184]	; (8001604 <HAL_ADC_MspInit+0xdc>)
 800154c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800154e:	4a2d      	ldr	r2, [pc, #180]	; (8001604 <HAL_ADC_MspInit+0xdc>)
 8001550:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001554:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001556:	4b2b      	ldr	r3, [pc, #172]	; (8001604 <HAL_ADC_MspInit+0xdc>)
 8001558:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800155a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800155e:	613b      	str	r3, [r7, #16]
 8001560:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001562:	4b28      	ldr	r3, [pc, #160]	; (8001604 <HAL_ADC_MspInit+0xdc>)
 8001564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001566:	4a27      	ldr	r2, [pc, #156]	; (8001604 <HAL_ADC_MspInit+0xdc>)
 8001568:	f043 0304 	orr.w	r3, r3, #4
 800156c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800156e:	4b25      	ldr	r3, [pc, #148]	; (8001604 <HAL_ADC_MspInit+0xdc>)
 8001570:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001572:	f003 0304 	and.w	r3, r3, #4
 8001576:	60fb      	str	r3, [r7, #12]
 8001578:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PC0     ------> ADC1_IN1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800157a:	2301      	movs	r3, #1
 800157c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800157e:	230b      	movs	r3, #11
 8001580:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001582:	2300      	movs	r3, #0
 8001584:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001586:	f107 0314 	add.w	r3, r7, #20
 800158a:	4619      	mov	r1, r3
 800158c:	481e      	ldr	r0, [pc, #120]	; (8001608 <HAL_ADC_MspInit+0xe0>)
 800158e:	f002 fa49 	bl	8003a24 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001592:	4b1e      	ldr	r3, [pc, #120]	; (800160c <HAL_ADC_MspInit+0xe4>)
 8001594:	4a1e      	ldr	r2, [pc, #120]	; (8001610 <HAL_ADC_MspInit+0xe8>)
 8001596:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8001598:	4b1c      	ldr	r3, [pc, #112]	; (800160c <HAL_ADC_MspInit+0xe4>)
 800159a:	2200      	movs	r2, #0
 800159c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800159e:	4b1b      	ldr	r3, [pc, #108]	; (800160c <HAL_ADC_MspInit+0xe4>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80015a4:	4b19      	ldr	r3, [pc, #100]	; (800160c <HAL_ADC_MspInit+0xe4>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80015aa:	4b18      	ldr	r3, [pc, #96]	; (800160c <HAL_ADC_MspInit+0xe4>)
 80015ac:	2280      	movs	r2, #128	; 0x80
 80015ae:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80015b0:	4b16      	ldr	r3, [pc, #88]	; (800160c <HAL_ADC_MspInit+0xe4>)
 80015b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015b6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80015b8:	4b14      	ldr	r3, [pc, #80]	; (800160c <HAL_ADC_MspInit+0xe4>)
 80015ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80015be:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80015c0:	4b12      	ldr	r3, [pc, #72]	; (800160c <HAL_ADC_MspInit+0xe4>)
 80015c2:	2220      	movs	r2, #32
 80015c4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80015c6:	4b11      	ldr	r3, [pc, #68]	; (800160c <HAL_ADC_MspInit+0xe4>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80015cc:	480f      	ldr	r0, [pc, #60]	; (800160c <HAL_ADC_MspInit+0xe4>)
 80015ce:	f002 f8c1 	bl	8003754 <HAL_DMA_Init>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d001      	beq.n	80015dc <HAL_ADC_MspInit+0xb4>
    {
      Error_Handler();
 80015d8:	f7ff fe84 	bl	80012e4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	4a0b      	ldr	r2, [pc, #44]	; (800160c <HAL_ADC_MspInit+0xe4>)
 80015e0:	64da      	str	r2, [r3, #76]	; 0x4c
 80015e2:	4a0a      	ldr	r2, [pc, #40]	; (800160c <HAL_ADC_MspInit+0xe4>)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 80015e8:	2200      	movs	r2, #0
 80015ea:	2100      	movs	r1, #0
 80015ec:	2012      	movs	r0, #18
 80015ee:	f002 f87a 	bl	80036e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 80015f2:	2012      	movs	r0, #18
 80015f4:	f002 f893 	bl	800371e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80015f8:	bf00      	nop
 80015fa:	3728      	adds	r7, #40	; 0x28
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	50040000 	.word	0x50040000
 8001604:	40021000 	.word	0x40021000
 8001608:	48000800 	.word	0x48000800
 800160c:	20000158 	.word	0x20000158
 8001610:	40020008 	.word	0x40020008

08001614 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b08a      	sub	sp, #40	; 0x28
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800161c:	f107 0314 	add.w	r3, r7, #20
 8001620:	2200      	movs	r2, #0
 8001622:	601a      	str	r2, [r3, #0]
 8001624:	605a      	str	r2, [r3, #4]
 8001626:	609a      	str	r2, [r3, #8]
 8001628:	60da      	str	r2, [r3, #12]
 800162a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a17      	ldr	r2, [pc, #92]	; (8001690 <HAL_I2C_MspInit+0x7c>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d128      	bne.n	8001688 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001636:	4b17      	ldr	r3, [pc, #92]	; (8001694 <HAL_I2C_MspInit+0x80>)
 8001638:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800163a:	4a16      	ldr	r2, [pc, #88]	; (8001694 <HAL_I2C_MspInit+0x80>)
 800163c:	f043 0302 	orr.w	r3, r3, #2
 8001640:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001642:	4b14      	ldr	r3, [pc, #80]	; (8001694 <HAL_I2C_MspInit+0x80>)
 8001644:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001646:	f003 0302 	and.w	r3, r3, #2
 800164a:	613b      	str	r3, [r7, #16]
 800164c:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration    
    PB11     ------> I2C2_SDA
    PB13     ------> I2C2_SCL 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 800164e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001652:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001654:	2312      	movs	r3, #18
 8001656:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001658:	2301      	movs	r3, #1
 800165a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800165c:	2303      	movs	r3, #3
 800165e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001660:	2304      	movs	r3, #4
 8001662:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001664:	f107 0314 	add.w	r3, r7, #20
 8001668:	4619      	mov	r1, r3
 800166a:	480b      	ldr	r0, [pc, #44]	; (8001698 <HAL_I2C_MspInit+0x84>)
 800166c:	f002 f9da 	bl	8003a24 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001670:	4b08      	ldr	r3, [pc, #32]	; (8001694 <HAL_I2C_MspInit+0x80>)
 8001672:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001674:	4a07      	ldr	r2, [pc, #28]	; (8001694 <HAL_I2C_MspInit+0x80>)
 8001676:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800167a:	6593      	str	r3, [r2, #88]	; 0x58
 800167c:	4b05      	ldr	r3, [pc, #20]	; (8001694 <HAL_I2C_MspInit+0x80>)
 800167e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001680:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001684:	60fb      	str	r3, [r7, #12]
 8001686:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001688:	bf00      	nop
 800168a:	3728      	adds	r7, #40	; 0x28
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	40005800 	.word	0x40005800
 8001694:	40021000 	.word	0x40021000
 8001698:	48000400 	.word	0x48000400

0800169c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b08a      	sub	sp, #40	; 0x28
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a4:	f107 0314 	add.w	r3, r7, #20
 80016a8:	2200      	movs	r2, #0
 80016aa:	601a      	str	r2, [r3, #0]
 80016ac:	605a      	str	r2, [r3, #4]
 80016ae:	609a      	str	r2, [r3, #8]
 80016b0:	60da      	str	r2, [r3, #12]
 80016b2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a17      	ldr	r2, [pc, #92]	; (8001718 <HAL_UART_MspInit+0x7c>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d128      	bne.n	8001710 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016be:	4b17      	ldr	r3, [pc, #92]	; (800171c <HAL_UART_MspInit+0x80>)
 80016c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016c2:	4a16      	ldr	r2, [pc, #88]	; (800171c <HAL_UART_MspInit+0x80>)
 80016c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016c8:	6593      	str	r3, [r2, #88]	; 0x58
 80016ca:	4b14      	ldr	r3, [pc, #80]	; (800171c <HAL_UART_MspInit+0x80>)
 80016cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016d2:	613b      	str	r3, [r7, #16]
 80016d4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016d6:	4b11      	ldr	r3, [pc, #68]	; (800171c <HAL_UART_MspInit+0x80>)
 80016d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016da:	4a10      	ldr	r2, [pc, #64]	; (800171c <HAL_UART_MspInit+0x80>)
 80016dc:	f043 0301 	orr.w	r3, r3, #1
 80016e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016e2:	4b0e      	ldr	r3, [pc, #56]	; (800171c <HAL_UART_MspInit+0x80>)
 80016e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016e6:	f003 0301 	and.w	r3, r3, #1
 80016ea:	60fb      	str	r3, [r7, #12]
 80016ec:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80016ee:	230c      	movs	r3, #12
 80016f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f2:	2302      	movs	r3, #2
 80016f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f6:	2300      	movs	r3, #0
 80016f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016fa:	2303      	movs	r3, #3
 80016fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016fe:	2307      	movs	r3, #7
 8001700:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001702:	f107 0314 	add.w	r3, r7, #20
 8001706:	4619      	mov	r1, r3
 8001708:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800170c:	f002 f98a 	bl	8003a24 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001710:	bf00      	nop
 8001712:	3728      	adds	r7, #40	; 0x28
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	40004400 	.word	0x40004400
 800171c:	40021000 	.word	0x40021000

08001720 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001724:	bf00      	nop
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr

0800172e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800172e:	b480      	push	{r7}
 8001730:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001732:	e7fe      	b.n	8001732 <HardFault_Handler+0x4>

08001734 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001738:	e7fe      	b.n	8001738 <MemManage_Handler+0x4>

0800173a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800173a:	b480      	push	{r7}
 800173c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800173e:	e7fe      	b.n	800173e <BusFault_Handler+0x4>

08001740 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001744:	e7fe      	b.n	8001744 <UsageFault_Handler+0x4>

08001746 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001746:	b480      	push	{r7}
 8001748:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800174a:	bf00      	nop
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr

08001754 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001758:	bf00      	nop
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr

08001762 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001762:	b480      	push	{r7}
 8001764:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001766:	bf00      	nop
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr

08001770 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001774:	f000 fb50 	bl	8001e18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001778:	bf00      	nop
 800177a:	bd80      	pop	{r7, pc}

0800177c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001780:	4802      	ldr	r0, [pc, #8]	; (800178c <DMA1_Channel1_IRQHandler+0x10>)
 8001782:	f002 f89f 	bl	80038c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001786:	bf00      	nop
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	20000158 	.word	0x20000158

08001790 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001794:	4802      	ldr	r0, [pc, #8]	; (80017a0 <ADC1_IRQHandler+0x10>)
 8001796:	f001 f80c 	bl	80027b2 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 800179a:	bf00      	nop
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	200000f4 	.word	0x200000f4

080017a4 <_sbrk>:

/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr){
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b084      	sub	sp, #16
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80017ac:	4b11      	ldr	r3, [pc, #68]	; (80017f4 <_sbrk+0x50>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d102      	bne.n	80017ba <_sbrk+0x16>
		heap_end = &end;
 80017b4:	4b0f      	ldr	r3, [pc, #60]	; (80017f4 <_sbrk+0x50>)
 80017b6:	4a10      	ldr	r2, [pc, #64]	; (80017f8 <_sbrk+0x54>)
 80017b8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80017ba:	4b0e      	ldr	r3, [pc, #56]	; (80017f4 <_sbrk+0x50>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr){
 80017c0:	4b0c      	ldr	r3, [pc, #48]	; (80017f4 <_sbrk+0x50>)
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	4413      	add	r3, r2
 80017c8:	466a      	mov	r2, sp
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d907      	bls.n	80017de <_sbrk+0x3a>
		errno = ENOMEM;
 80017ce:	f004 fcf7 	bl	80061c0 <__errno>
 80017d2:	4602      	mov	r2, r0
 80017d4:	230c      	movs	r3, #12
 80017d6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80017d8:	f04f 33ff 	mov.w	r3, #4294967295
 80017dc:	e006      	b.n	80017ec <_sbrk+0x48>
	}

	heap_end += incr;
 80017de:	4b05      	ldr	r3, [pc, #20]	; (80017f4 <_sbrk+0x50>)
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	4413      	add	r3, r2
 80017e6:	4a03      	ldr	r2, [pc, #12]	; (80017f4 <_sbrk+0x50>)
 80017e8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80017ea:	68fb      	ldr	r3, [r7, #12]
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	3710      	adds	r7, #16
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	20000098 	.word	0x20000098
 80017f8:	20000648 	.word	0x20000648

080017fc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001800:	4b17      	ldr	r3, [pc, #92]	; (8001860 <SystemInit+0x64>)
 8001802:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001806:	4a16      	ldr	r2, [pc, #88]	; (8001860 <SystemInit+0x64>)
 8001808:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800180c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001810:	4b14      	ldr	r3, [pc, #80]	; (8001864 <SystemInit+0x68>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a13      	ldr	r2, [pc, #76]	; (8001864 <SystemInit+0x68>)
 8001816:	f043 0301 	orr.w	r3, r3, #1
 800181a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800181c:	4b11      	ldr	r3, [pc, #68]	; (8001864 <SystemInit+0x68>)
 800181e:	2200      	movs	r2, #0
 8001820:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001822:	4b10      	ldr	r3, [pc, #64]	; (8001864 <SystemInit+0x68>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a0f      	ldr	r2, [pc, #60]	; (8001864 <SystemInit+0x68>)
 8001828:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800182c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001830:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001832:	4b0c      	ldr	r3, [pc, #48]	; (8001864 <SystemInit+0x68>)
 8001834:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001838:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800183a:	4b0a      	ldr	r3, [pc, #40]	; (8001864 <SystemInit+0x68>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a09      	ldr	r2, [pc, #36]	; (8001864 <SystemInit+0x68>)
 8001840:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001844:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001846:	4b07      	ldr	r3, [pc, #28]	; (8001864 <SystemInit+0x68>)
 8001848:	2200      	movs	r2, #0
 800184a:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800184c:	4b04      	ldr	r3, [pc, #16]	; (8001860 <SystemInit+0x64>)
 800184e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001852:	609a      	str	r2, [r3, #8]
#endif
}
 8001854:	bf00      	nop
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	e000ed00 	.word	0xe000ed00
 8001864:	40021000 	.word	0x40021000

08001868 <string_util_concat>:

char* string_util_trim(char* string, char mark){
    return string_util_right_trim(string_util_left_trim(string, mark), mark);
}

char* string_util_concat(char* destiny, char* source){
 8001868:	b580      	push	{r7, lr}
 800186a:	b088      	sub	sp, #32
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
 8001870:	6039      	str	r1, [r7, #0]
	size_t size_destiny = strlen(destiny);
 8001872:	6878      	ldr	r0, [r7, #4]
 8001874:	f7fe fcac 	bl	80001d0 <strlen>
 8001878:	61b8      	str	r0, [r7, #24]
	size_t size_source = strlen(source);
 800187a:	6838      	ldr	r0, [r7, #0]
 800187c:	f7fe fca8 	bl	80001d0 <strlen>
 8001880:	6178      	str	r0, [r7, #20]
	size_t size = size_destiny + size_source + 1;
 8001882:	69ba      	ldr	r2, [r7, #24]
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	4413      	add	r3, r2
 8001888:	3301      	adds	r3, #1
 800188a:	613b      	str	r3, [r7, #16]

	char* result = (char*) malloc(size*sizeof(char));
 800188c:	6938      	ldr	r0, [r7, #16]
 800188e:	f004 fcc1 	bl	8006214 <malloc>
 8001892:	4603      	mov	r3, r0
 8001894:	60fb      	str	r3, [r7, #12]
	for(size_t i = 0; i < size; i++) result[i] = '\0';
 8001896:	2300      	movs	r3, #0
 8001898:	61fb      	str	r3, [r7, #28]
 800189a:	e007      	b.n	80018ac <string_util_concat+0x44>
 800189c:	68fa      	ldr	r2, [r7, #12]
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	4413      	add	r3, r2
 80018a2:	2200      	movs	r2, #0
 80018a4:	701a      	strb	r2, [r3, #0]
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	3301      	adds	r3, #1
 80018aa:	61fb      	str	r3, [r7, #28]
 80018ac:	69fa      	ldr	r2, [r7, #28]
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d3f3      	bcc.n	800189c <string_util_concat+0x34>
	strcpy(result, destiny);
 80018b4:	6879      	ldr	r1, [r7, #4]
 80018b6:	68f8      	ldr	r0, [r7, #12]
 80018b8:	f004 fd26 	bl	8006308 <strcpy>
	strcpy(&result[size_destiny], source);
 80018bc:	68fa      	ldr	r2, [r7, #12]
 80018be:	69bb      	ldr	r3, [r7, #24]
 80018c0:	4413      	add	r3, r2
 80018c2:	6839      	ldr	r1, [r7, #0]
 80018c4:	4618      	mov	r0, r3
 80018c6:	f004 fd1f 	bl	8006308 <strcpy>

	return result;
 80018ca:	68fb      	ldr	r3, [r7, #12]
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	3720      	adds	r7, #32
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}

080018d4 <sen0189_init>:
#include <sen0189/sen0189.h>

sen0189* sen0189_init(ADC_HandleTypeDef* pin){
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b084      	sub	sp, #16
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
	sen0189* result = (sen0189*) malloc(sizeof(sen0189));
 80018dc:	2004      	movs	r0, #4
 80018de:	f004 fc99 	bl	8006214 <malloc>
 80018e2:	4603      	mov	r3, r0
 80018e4:	60fb      	str	r3, [r7, #12]
	result->pin = pin;
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	687a      	ldr	r2, [r7, #4]
 80018ea:	601a      	str	r2, [r3, #0]
	return result;
 80018ec:	68fb      	ldr	r3, [r7, #12]
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3710      	adds	r7, #16
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}

080018f6 <sen0189_get_pin>:
	if( sen0189 == NULL ) return;
	free(sen0189);
	sen0189 = NULL;
}

ADC_HandleTypeDef* sen0189_get_pin(sen0189* sen0189){
 80018f6:	b480      	push	{r7}
 80018f8:	b083      	sub	sp, #12
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	6078      	str	r0, [r7, #4]
	return sen0189 == NULL ? NULL : sen0189->pin;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d002      	beq.n	800190a <sen0189_get_pin+0x14>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	e000      	b.n	800190c <sen0189_get_pin+0x16>
 800190a:	2300      	movs	r3, #0
}
 800190c:	4618      	mov	r0, r3
 800190e:	370c      	adds	r7, #12
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr

08001918 <sen0189_read>:
void sen0189_set_pin(sen0189* sen0189, ADC_HandleTypeDef* pin){
	if( sen0189 == NULL ) return;
	sen0189->pin = pin;
}

float sen0189_read(sen0189* sen0189){
 8001918:	b590      	push	{r4, r7, lr}
 800191a:	b085      	sub	sp, #20
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
	if( sen0189 == NULL ) return 0.0;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d102      	bne.n	800192c <sen0189_read+0x14>
 8001926:	f04f 0300 	mov.w	r3, #0
 800192a:	e017      	b.n	800195c <sen0189_read+0x44>
	int sensor_value = stm32_util_read_analog(sen0189_get_pin(sen0189));
 800192c:	6878      	ldr	r0, [r7, #4]
 800192e:	f7ff ffe2 	bl	80018f6 <sen0189_get_pin>
 8001932:	4603      	mov	r3, r0
 8001934:	4618      	mov	r0, r3
 8001936:	f000 f9c7 	bl	8001cc8 <stm32_util_read_analog>
 800193a:	4603      	mov	r3, r0
 800193c:	60fb      	str	r3, [r7, #12]
	return sensor_value * (5.0 / 1024.0);
 800193e:	68f8      	ldr	r0, [r7, #12]
 8001940:	f7fe fda0 	bl	8000484 <__aeabi_i2d>
 8001944:	f04f 0200 	mov.w	r2, #0
 8001948:	4b08      	ldr	r3, [pc, #32]	; (800196c <sen0189_read+0x54>)
 800194a:	f7fe fe05 	bl	8000558 <__aeabi_dmul>
 800194e:	4603      	mov	r3, r0
 8001950:	460c      	mov	r4, r1
 8001952:	4618      	mov	r0, r3
 8001954:	4621      	mov	r1, r4
 8001956:	f7ff f8e1 	bl	8000b1c <__aeabi_d2f>
 800195a:	4603      	mov	r3, r0
 800195c:	ee07 3a90 	vmov	s15, r3
}
 8001960:	eeb0 0a67 	vmov.f32	s0, s15
 8001964:	3714      	adds	r7, #20
 8001966:	46bd      	mov	sp, r7
 8001968:	bd90      	pop	{r4, r7, pc}
 800196a:	bf00      	nop
 800196c:	3f740000 	.word	0x3f740000

08001970 <SSD1306_Write_Command>:
extern I2C_HandleTypeDef hi2c2;

#define SSD1306_I2C       &hi2c2
#define SSD1306_I2C_ADDR  (0x78)

uint8_t SSD1306_Write_Command(uint8_t command){
 8001970:	b580      	push	{r7, lr}
 8001972:	b086      	sub	sp, #24
 8001974:	af02      	add	r7, sp, #8
 8001976:	4603      	mov	r3, r0
 8001978:	71fb      	strb	r3, [r7, #7]
	uint8_t data[2] = {0x00, command};
 800197a:	2300      	movs	r3, #0
 800197c:	733b      	strb	r3, [r7, #12]
 800197e:	79fb      	ldrb	r3, [r7, #7]
 8001980:	737b      	strb	r3, [r7, #13]

    if(HAL_I2C_Master_Transmit(SSD1306_I2C, SSD1306_I2C_ADDR, data, 2, 2) != HAL_OK)
 8001982:	f107 020c 	add.w	r2, r7, #12
 8001986:	2302      	movs	r3, #2
 8001988:	9300      	str	r3, [sp, #0]
 800198a:	2302      	movs	r3, #2
 800198c:	2178      	movs	r1, #120	; 0x78
 800198e:	4806      	ldr	r0, [pc, #24]	; (80019a8 <SSD1306_Write_Command+0x38>)
 8001990:	f002 fa6a 	bl	8003e68 <HAL_I2C_Master_Transmit>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <SSD1306_Write_Command+0x2e>
        return 0;
 800199a:	2300      	movs	r3, #0
 800199c:	e000      	b.n	80019a0 <SSD1306_Write_Command+0x30>
    else
        return 1;
 800199e:	2301      	movs	r3, #1
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	3710      	adds	r7, #16
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	200000a8 	.word	0x200000a8

080019ac <SSD1306_Goto>:
        return 0;
    else
        return 1;
}

void SSD1306_Goto(uint8_t col, uint8_t row){
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	4603      	mov	r3, r0
 80019b4:	460a      	mov	r2, r1
 80019b6:	71fb      	strb	r3, [r7, #7]
 80019b8:	4613      	mov	r3, r2
 80019ba:	71bb      	strb	r3, [r7, #6]
	if(row >= SSD1306_HEIGHT/8)
 80019bc:	79bb      	ldrb	r3, [r7, #6]
 80019be:	2b07      	cmp	r3, #7
 80019c0:	d901      	bls.n	80019c6 <SSD1306_Goto+0x1a>
		row = SSD1306_HEIGHT/8 - 1;
 80019c2:	2307      	movs	r3, #7
 80019c4:	71bb      	strb	r3, [r7, #6]

	if(col >= SSD1306_WIDTH)
 80019c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	da01      	bge.n	80019d2 <SSD1306_Goto+0x26>
		col = SSD1306_WIDTH - 1;
 80019ce:	237f      	movs	r3, #127	; 0x7f
 80019d0:	71fb      	strb	r3, [r7, #7]

	SSD1306_Write_Command(0xB0 | row);
 80019d2:	79bb      	ldrb	r3, [r7, #6]
 80019d4:	f063 034f 	orn	r3, r3, #79	; 0x4f
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	4618      	mov	r0, r3
 80019dc:	f7ff ffc8 	bl	8001970 <SSD1306_Write_Command>
	SSD1306_Write_Command(0x00 | (col & 0x0F));
 80019e0:	79fb      	ldrb	r3, [r7, #7]
 80019e2:	f003 030f 	and.w	r3, r3, #15
 80019e6:	b2db      	uxtb	r3, r3
 80019e8:	4618      	mov	r0, r3
 80019ea:	f7ff ffc1 	bl	8001970 <SSD1306_Write_Command>
	SSD1306_Write_Command(0x10 | (col >> 4));
 80019ee:	79fb      	ldrb	r3, [r7, #7]
 80019f0:	091b      	lsrs	r3, r3, #4
 80019f2:	b2db      	uxtb	r3, r3
 80019f4:	f043 0310 	orr.w	r3, r3, #16
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	4618      	mov	r0, r3
 80019fc:	f7ff ffb8 	bl	8001970 <SSD1306_Write_Command>
}
 8001a00:	bf00      	nop
 8001a02:	3708      	adds	r7, #8
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}

08001a08 <SSD1306_Write_Char>:

void SSD1306_Write_Char(uint8_t c, SSD1306_Font_t* font){
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b08a      	sub	sp, #40	; 0x28
 8001a0c:	af02      	add	r7, sp, #8
 8001a0e:	4603      	mov	r3, r0
 8001a10:	6039      	str	r1, [r7, #0]
 8001a12:	71fb      	strb	r3, [r7, #7]
	const uint8_t *base;
	uint8_t width, n;
	uint8_t data[16];

	if(c < 32 || c > 127)
 8001a14:	79fb      	ldrb	r3, [r7, #7]
 8001a16:	2b1f      	cmp	r3, #31
 8001a18:	d903      	bls.n	8001a22 <SSD1306_Write_Char+0x1a>
 8001a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	da01      	bge.n	8001a26 <SSD1306_Write_Char+0x1e>
		c = 127;
 8001a22:	237f      	movs	r3, #127	; 0x7f
 8001a24:	71fb      	strb	r3, [r7, #7]

	c -= 32;
 8001a26:	79fb      	ldrb	r3, [r7, #7]
 8001a28:	3b20      	subs	r3, #32
 8001a2a:	71fb      	strb	r3, [r7, #7]

	width = font->width;
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	77bb      	strb	r3, [r7, #30]
	data[0] = 0x40;
 8001a32:	2340      	movs	r3, #64	; 0x40
 8001a34:	723b      	strb	r3, [r7, #8]
	base = font->data + width*c;
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	7fba      	ldrb	r2, [r7, #30]
 8001a3c:	79f9      	ldrb	r1, [r7, #7]
 8001a3e:	fb01 f202 	mul.w	r2, r1, r2
 8001a42:	4413      	add	r3, r2
 8001a44:	61bb      	str	r3, [r7, #24]
	for(n = 0 ; n < width ; n++)
 8001a46:	2300      	movs	r3, #0
 8001a48:	77fb      	strb	r3, [r7, #31]
 8001a4a:	e00d      	b.n	8001a68 <SSD1306_Write_Char+0x60>
		data[1+n] = base[n];
 8001a4c:	7ffb      	ldrb	r3, [r7, #31]
 8001a4e:	69ba      	ldr	r2, [r7, #24]
 8001a50:	441a      	add	r2, r3
 8001a52:	7ffb      	ldrb	r3, [r7, #31]
 8001a54:	3301      	adds	r3, #1
 8001a56:	7812      	ldrb	r2, [r2, #0]
 8001a58:	f107 0120 	add.w	r1, r7, #32
 8001a5c:	440b      	add	r3, r1
 8001a5e:	f803 2c18 	strb.w	r2, [r3, #-24]
	for(n = 0 ; n < width ; n++)
 8001a62:	7ffb      	ldrb	r3, [r7, #31]
 8001a64:	3301      	adds	r3, #1
 8001a66:	77fb      	strb	r3, [r7, #31]
 8001a68:	7ffa      	ldrb	r2, [r7, #31]
 8001a6a:	7fbb      	ldrb	r3, [r7, #30]
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	d3ed      	bcc.n	8001a4c <SSD1306_Write_Char+0x44>

	data[width+1] = 0x00;
 8001a70:	7fbb      	ldrb	r3, [r7, #30]
 8001a72:	3301      	adds	r3, #1
 8001a74:	f107 0220 	add.w	r2, r7, #32
 8001a78:	4413      	add	r3, r2
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	f803 2c18 	strb.w	r2, [r3, #-24]

	HAL_I2C_Master_Transmit(SSD1306_I2C,SSD1306_I2C_ADDR, data, width+2, 10);
 8001a80:	7fbb      	ldrb	r3, [r7, #30]
 8001a82:	b29b      	uxth	r3, r3
 8001a84:	3302      	adds	r3, #2
 8001a86:	b299      	uxth	r1, r3
 8001a88:	f107 0208 	add.w	r2, r7, #8
 8001a8c:	230a      	movs	r3, #10
 8001a8e:	9300      	str	r3, [sp, #0]
 8001a90:	460b      	mov	r3, r1
 8001a92:	2178      	movs	r1, #120	; 0x78
 8001a94:	4803      	ldr	r0, [pc, #12]	; (8001aa4 <SSD1306_Write_Char+0x9c>)
 8001a96:	f002 f9e7 	bl	8003e68 <HAL_I2C_Master_Transmit>
}
 8001a9a:	bf00      	nop
 8001a9c:	3720      	adds	r7, #32
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	200000a8 	.word	0x200000a8

08001aa8 <SSD1306_Write_Buffer>:

void SSD1306_Write_Buffer(uint8_t* str, uint8_t size, SSD1306_Font_t* font){
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b086      	sub	sp, #24
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	60f8      	str	r0, [r7, #12]
 8001ab0:	460b      	mov	r3, r1
 8001ab2:	607a      	str	r2, [r7, #4]
 8001ab4:	72fb      	strb	r3, [r7, #11]
	uint8_t  n;
	for(n = 0 ; n < size ; n++)
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	75fb      	strb	r3, [r7, #23]
 8001aba:	e00a      	b.n	8001ad2 <SSD1306_Write_Buffer+0x2a>
		SSD1306_Write_Char(str[n],font);
 8001abc:	7dfb      	ldrb	r3, [r7, #23]
 8001abe:	68fa      	ldr	r2, [r7, #12]
 8001ac0:	4413      	add	r3, r2
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	6879      	ldr	r1, [r7, #4]
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f7ff ff9e 	bl	8001a08 <SSD1306_Write_Char>
	for(n = 0 ; n < size ; n++)
 8001acc:	7dfb      	ldrb	r3, [r7, #23]
 8001ace:	3301      	adds	r3, #1
 8001ad0:	75fb      	strb	r3, [r7, #23]
 8001ad2:	7dfa      	ldrb	r2, [r7, #23]
 8001ad4:	7afb      	ldrb	r3, [r7, #11]
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	d3f0      	bcc.n	8001abc <SSD1306_Write_Buffer+0x14>
}
 8001ada:	bf00      	nop
 8001adc:	3718      	adds	r7, #24
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
	...

08001ae4 <SSD1306_Write_String>:

void SSD1306_Write_String(uint8_t *str){
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
	SSD1306_Write_Buffer(str,strlen((char *)str),&SSD1306_Font_07X05);
 8001aec:	6878      	ldr	r0, [r7, #4]
 8001aee:	f7fe fb6f 	bl	80001d0 <strlen>
 8001af2:	4603      	mov	r3, r0
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	4a04      	ldr	r2, [pc, #16]	; (8001b08 <SSD1306_Write_String+0x24>)
 8001af8:	4619      	mov	r1, r3
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	f7ff ffd4 	bl	8001aa8 <SSD1306_Write_Buffer>
}
 8001b00:	bf00      	nop
 8001b02:	3708      	adds	r7, #8
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	20000004 	.word	0x20000004

08001b0c <SDD1306_Clear_Screen>:
	col = col < 0 ? 0 : col;
	SSD1306_Goto(col,row);
	SSD1306_Write_String(str);
}

void SDD1306_Clear_Screen(void){
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b088      	sub	sp, #32
 8001b10:	af02      	add	r7, sp, #8
	uint8_t n,m;
	uint8_t data[] = {0x40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
 8001b12:	1d3b      	adds	r3, r7, #4
 8001b14:	2200      	movs	r2, #0
 8001b16:	601a      	str	r2, [r3, #0]
 8001b18:	605a      	str	r2, [r3, #4]
 8001b1a:	609a      	str	r2, [r3, #8]
 8001b1c:	60da      	str	r2, [r3, #12]
 8001b1e:	741a      	strb	r2, [r3, #16]
 8001b20:	2340      	movs	r3, #64	; 0x40
 8001b22:	713b      	strb	r3, [r7, #4]

	SSD1306_Goto(0,0);
 8001b24:	2100      	movs	r1, #0
 8001b26:	2000      	movs	r0, #0
 8001b28:	f7ff ff40 	bl	80019ac <SSD1306_Goto>

	for(n = 0 ; n < SSD1306_HEIGHT/8 ; n++)
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	75fb      	strb	r3, [r7, #23]
 8001b30:	e013      	b.n	8001b5a <SDD1306_Clear_Screen+0x4e>
		for(m = 0 ; m < SSD1306_WIDTH/16 ; m++)
 8001b32:	2300      	movs	r3, #0
 8001b34:	75bb      	strb	r3, [r7, #22]
 8001b36:	e00a      	b.n	8001b4e <SDD1306_Clear_Screen+0x42>
			HAL_I2C_Master_Transmit(SSD1306_I2C,SSD1306_I2C_ADDR, data, 17, 10);
 8001b38:	1d3a      	adds	r2, r7, #4
 8001b3a:	230a      	movs	r3, #10
 8001b3c:	9300      	str	r3, [sp, #0]
 8001b3e:	2311      	movs	r3, #17
 8001b40:	2178      	movs	r1, #120	; 0x78
 8001b42:	4809      	ldr	r0, [pc, #36]	; (8001b68 <SDD1306_Clear_Screen+0x5c>)
 8001b44:	f002 f990 	bl	8003e68 <HAL_I2C_Master_Transmit>
		for(m = 0 ; m < SSD1306_WIDTH/16 ; m++)
 8001b48:	7dbb      	ldrb	r3, [r7, #22]
 8001b4a:	3301      	adds	r3, #1
 8001b4c:	75bb      	strb	r3, [r7, #22]
 8001b4e:	7dbb      	ldrb	r3, [r7, #22]
 8001b50:	2b07      	cmp	r3, #7
 8001b52:	d9f1      	bls.n	8001b38 <SDD1306_Clear_Screen+0x2c>
	for(n = 0 ; n < SSD1306_HEIGHT/8 ; n++)
 8001b54:	7dfb      	ldrb	r3, [r7, #23]
 8001b56:	3301      	adds	r3, #1
 8001b58:	75fb      	strb	r3, [r7, #23]
 8001b5a:	7dfb      	ldrb	r3, [r7, #23]
 8001b5c:	2b07      	cmp	r3, #7
 8001b5e:	d9e8      	bls.n	8001b32 <SDD1306_Clear_Screen+0x26>
}
 8001b60:	bf00      	nop
 8001b62:	3718      	adds	r7, #24
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	200000a8 	.word	0x200000a8

08001b6c <SSD1306_Init>:

uint8_t SSD1306_Init(void){
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0
	
	HAL_Delay(100);
 8001b70:	2064      	movs	r0, #100	; 0x64
 8001b72:	f000 f96f 	bl	8001e54 <HAL_Delay>

	SSD1306_Write_Command(0xAE); //display off
 8001b76:	20ae      	movs	r0, #174	; 0xae
 8001b78:	f7ff fefa 	bl	8001970 <SSD1306_Write_Command>
	SSD1306_Write_Command(0x20); //Set Memory Addressing Mode
 8001b7c:	2020      	movs	r0, #32
 8001b7e:	f7ff fef7 	bl	8001970 <SSD1306_Write_Command>
	SSD1306_Write_Command(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001b82:	2010      	movs	r0, #16
 8001b84:	f7ff fef4 	bl	8001970 <SSD1306_Write_Command>
	SSD1306_Write_Command(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001b88:	20b0      	movs	r0, #176	; 0xb0
 8001b8a:	f7ff fef1 	bl	8001970 <SSD1306_Write_Command>
	SSD1306_Write_Command(0xC8); //Set COM Output Scan Direction
 8001b8e:	20c8      	movs	r0, #200	; 0xc8
 8001b90:	f7ff feee 	bl	8001970 <SSD1306_Write_Command>
	SSD1306_Write_Command(0x00); //---set low column address
 8001b94:	2000      	movs	r0, #0
 8001b96:	f7ff feeb 	bl	8001970 <SSD1306_Write_Command>
	SSD1306_Write_Command(0x10); //---set high column address
 8001b9a:	2010      	movs	r0, #16
 8001b9c:	f7ff fee8 	bl	8001970 <SSD1306_Write_Command>
	SSD1306_Write_Command(0x40); //--set start line address
 8001ba0:	2040      	movs	r0, #64	; 0x40
 8001ba2:	f7ff fee5 	bl	8001970 <SSD1306_Write_Command>
	SSD1306_Write_Command(0x81); //--set contrast control register
 8001ba6:	2081      	movs	r0, #129	; 0x81
 8001ba8:	f7ff fee2 	bl	8001970 <SSD1306_Write_Command>
	SSD1306_Write_Command(0xFF);
 8001bac:	20ff      	movs	r0, #255	; 0xff
 8001bae:	f7ff fedf 	bl	8001970 <SSD1306_Write_Command>
	SSD1306_Write_Command(0xA1); //--set segment re-map 0 to 127
 8001bb2:	20a1      	movs	r0, #161	; 0xa1
 8001bb4:	f7ff fedc 	bl	8001970 <SSD1306_Write_Command>
	SSD1306_Write_Command(0xA6); //--set normal display
 8001bb8:	20a6      	movs	r0, #166	; 0xa6
 8001bba:	f7ff fed9 	bl	8001970 <SSD1306_Write_Command>
	SSD1306_Write_Command(0xA8); //--set multiplex ratio(1 to 64)
 8001bbe:	20a8      	movs	r0, #168	; 0xa8
 8001bc0:	f7ff fed6 	bl	8001970 <SSD1306_Write_Command>
	SSD1306_Write_Command(0x3F); //
 8001bc4:	203f      	movs	r0, #63	; 0x3f
 8001bc6:	f7ff fed3 	bl	8001970 <SSD1306_Write_Command>
	SSD1306_Write_Command(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001bca:	20a4      	movs	r0, #164	; 0xa4
 8001bcc:	f7ff fed0 	bl	8001970 <SSD1306_Write_Command>
	SSD1306_Write_Command(0xD3); //-set display offset
 8001bd0:	20d3      	movs	r0, #211	; 0xd3
 8001bd2:	f7ff fecd 	bl	8001970 <SSD1306_Write_Command>
	SSD1306_Write_Command(0x00); //-not offset
 8001bd6:	2000      	movs	r0, #0
 8001bd8:	f7ff feca 	bl	8001970 <SSD1306_Write_Command>
	SSD1306_Write_Command(0xD5); //--set display clock divide ratio/oscillator frequency
 8001bdc:	20d5      	movs	r0, #213	; 0xd5
 8001bde:	f7ff fec7 	bl	8001970 <SSD1306_Write_Command>
	SSD1306_Write_Command(0xf0); //--set divide ratio 0xF0
 8001be2:	20f0      	movs	r0, #240	; 0xf0
 8001be4:	f7ff fec4 	bl	8001970 <SSD1306_Write_Command>
	SSD1306_Write_Command(0xD9); //--set pre-charge period
 8001be8:	20d9      	movs	r0, #217	; 0xd9
 8001bea:	f7ff fec1 	bl	8001970 <SSD1306_Write_Command>
	SSD1306_Write_Command(0x22); //
 8001bee:	2022      	movs	r0, #34	; 0x22
 8001bf0:	f7ff febe 	bl	8001970 <SSD1306_Write_Command>
	SSD1306_Write_Command(0xDA); //--set com pins hardware configuration
 8001bf4:	20da      	movs	r0, #218	; 0xda
 8001bf6:	f7ff febb 	bl	8001970 <SSD1306_Write_Command>
	SSD1306_Write_Command(0x12);
 8001bfa:	2012      	movs	r0, #18
 8001bfc:	f7ff feb8 	bl	8001970 <SSD1306_Write_Command>
	SSD1306_Write_Command(0xDB); //--set vcomh
 8001c00:	20db      	movs	r0, #219	; 0xdb
 8001c02:	f7ff feb5 	bl	8001970 <SSD1306_Write_Command>
	SSD1306_Write_Command(0x20); //0x20,0.77xVcc,
 8001c06:	2020      	movs	r0, #32
 8001c08:	f7ff feb2 	bl	8001970 <SSD1306_Write_Command>
	SSD1306_Write_Command(0x8D); //--set DC-DC enable
 8001c0c:	208d      	movs	r0, #141	; 0x8d
 8001c0e:	f7ff feaf 	bl	8001970 <SSD1306_Write_Command>
	SSD1306_Write_Command(0x14); //
 8001c12:	2014      	movs	r0, #20
 8001c14:	f7ff feac 	bl	8001970 <SSD1306_Write_Command>
	SSD1306_Write_Command(0xAF); //--turn on SSD1306 panel
 8001c18:	20af      	movs	r0, #175	; 0xaf
 8001c1a:	f7ff fea9 	bl	8001970 <SSD1306_Write_Command>

	SDD1306_Clear_Screen();
 8001c1e:	f7ff ff75 	bl	8001b0c <SDD1306_Clear_Screen>
	
	return 1;
 8001c22:	2301      	movs	r3, #1
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	bd80      	pop	{r7, pc}

08001c28 <logger_get_instance>:

logger* logger_instance = NULL;

const unsigned int LOGGER_MAX_LINES = 8;

logger* logger_get_instance(){
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
	if( logger_instance == NULL ){
 8001c2c:	4b0b      	ldr	r3, [pc, #44]	; (8001c5c <logger_get_instance+0x34>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d10e      	bne.n	8001c52 <logger_get_instance+0x2a>
		SSD1306_Init();
 8001c34:	f7ff ff9a 	bl	8001b6c <SSD1306_Init>
		SDD1306_Clear_Screen();
 8001c38:	f7ff ff68 	bl	8001b0c <SDD1306_Clear_Screen>
		logger_instance = (logger*) malloc(sizeof(logger));
 8001c3c:	2004      	movs	r0, #4
 8001c3e:	f004 fae9 	bl	8006214 <malloc>
 8001c42:	4603      	mov	r3, r0
 8001c44:	461a      	mov	r2, r3
 8001c46:	4b05      	ldr	r3, [pc, #20]	; (8001c5c <logger_get_instance+0x34>)
 8001c48:	601a      	str	r2, [r3, #0]
		logger_instance->line = 0;
 8001c4a:	4b04      	ldr	r3, [pc, #16]	; (8001c5c <logger_get_instance+0x34>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	2200      	movs	r2, #0
 8001c50:	601a      	str	r2, [r3, #0]
	}
	return logger_instance;
 8001c52:	4b02      	ldr	r3, [pc, #8]	; (8001c5c <logger_get_instance+0x34>)
 8001c54:	681b      	ldr	r3, [r3, #0]
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	2000009c 	.word	0x2000009c

08001c60 <logger_trace>:

void logger_trace(logger* logger, char* input){
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b084      	sub	sp, #16
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
 8001c68:	6039      	str	r1, [r7, #0]
	if( logger == NULL ) return;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d024      	beq.n	8001cba <logger_trace+0x5a>
	if( logger->line == LOGGER_MAX_LINES-1) SDD1306_Clear_Screen();
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	2308      	movs	r3, #8
 8001c76:	3b01      	subs	r3, #1
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d101      	bne.n	8001c80 <logger_trace+0x20>
 8001c7c:	f7ff ff46 	bl	8001b0c <SDD1306_Clear_Screen>
	unsigned int line = (++logger->line) % LOGGER_MAX_LINES;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	1c5a      	adds	r2, r3, #1
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	601a      	str	r2, [r3, #0]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	2208      	movs	r2, #8
 8001c90:	fbb3 f1f2 	udiv	r1, r3, r2
 8001c94:	fb02 f201 	mul.w	r2, r2, r1
 8001c98:	1a9b      	subs	r3, r3, r2
 8001c9a:	60fb      	str	r3, [r7, #12]
	SSD1306_Goto(0, line);
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	b2db      	uxtb	r3, r3
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	2000      	movs	r0, #0
 8001ca4:	f7ff fe82 	bl	80019ac <SSD1306_Goto>
	SSD1306_Write_String((uint8_t*) string_util_concat("[T] ", input));
 8001ca8:	6839      	ldr	r1, [r7, #0]
 8001caa:	4806      	ldr	r0, [pc, #24]	; (8001cc4 <logger_trace+0x64>)
 8001cac:	f7ff fddc 	bl	8001868 <string_util_concat>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f7ff ff16 	bl	8001ae4 <SSD1306_Write_String>
 8001cb8:	e000      	b.n	8001cbc <logger_trace+0x5c>
	if( logger == NULL ) return;
 8001cba:	bf00      	nop
}
 8001cbc:	3710      	adds	r7, #16
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	08007860 	.word	0x08007860

08001cc8 <stm32_util_read_analog>:
#include <util/stm32_util.h>

uint32_t stm32_util_read_analog(ADC_HandleTypeDef* pin){
 8001cc8:	b590      	push	{r4, r7, lr}
 8001cca:	b085      	sub	sp, #20
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start(pin);
 8001cd0:	6878      	ldr	r0, [r7, #4]
 8001cd2:	f000 fc43 	bl	800255c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(pin, 100);
 8001cd6:	2164      	movs	r1, #100	; 0x64
 8001cd8:	6878      	ldr	r0, [r7, #4]
 8001cda:	f000 fcd5 	bl	8002688 <HAL_ADC_PollForConversion>
	uint32_t raw = (uint32_t) ( HAL_ADC_GetValue(pin) * 0.0049 );
 8001cde:	6878      	ldr	r0, [r7, #4]
 8001ce0:	f000 fd5a 	bl	8002798 <HAL_ADC_GetValue>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f7fe fbbc 	bl	8000464 <__aeabi_ui2d>
 8001cec:	a30a      	add	r3, pc, #40	; (adr r3, 8001d18 <stm32_util_read_analog+0x50>)
 8001cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cf2:	f7fe fc31 	bl	8000558 <__aeabi_dmul>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	460c      	mov	r4, r1
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	4621      	mov	r1, r4
 8001cfe:	f7fe feed 	bl	8000adc <__aeabi_d2uiz>
 8001d02:	4603      	mov	r3, r0
 8001d04:	60fb      	str	r3, [r7, #12]
	HAL_ADC_Stop(pin);
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f000 fc8b 	bl	8002622 <HAL_ADC_Stop>
	return raw;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3714      	adds	r7, #20
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd90      	pop	{r4, r7, pc}
 8001d16:	bf00      	nop
 8001d18:	bc01a36e 	.word	0xbc01a36e
 8001d1c:	3f741205 	.word	0x3f741205

08001d20 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001d20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d58 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001d24:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001d26:	e003      	b.n	8001d30 <LoopCopyDataInit>

08001d28 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001d28:	4b0c      	ldr	r3, [pc, #48]	; (8001d5c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001d2a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001d2c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001d2e:	3104      	adds	r1, #4

08001d30 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001d30:	480b      	ldr	r0, [pc, #44]	; (8001d60 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001d32:	4b0c      	ldr	r3, [pc, #48]	; (8001d64 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001d34:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001d36:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001d38:	d3f6      	bcc.n	8001d28 <CopyDataInit>
	ldr	r2, =_sbss
 8001d3a:	4a0b      	ldr	r2, [pc, #44]	; (8001d68 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001d3c:	e002      	b.n	8001d44 <LoopFillZerobss>

08001d3e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001d3e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001d40:	f842 3b04 	str.w	r3, [r2], #4

08001d44 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001d44:	4b09      	ldr	r3, [pc, #36]	; (8001d6c <LoopForever+0x16>)
	cmp	r2, r3
 8001d46:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001d48:	d3f9      	bcc.n	8001d3e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001d4a:	f7ff fd57 	bl	80017fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d4e:	f004 fa3d 	bl	80061cc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001d52:	f7ff f8b3 	bl	8000ebc <main>

08001d56 <LoopForever>:

LoopForever:
    b LoopForever
 8001d56:	e7fe      	b.n	8001d56 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001d58:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8001d5c:	08007c3c 	.word	0x08007c3c
	ldr	r0, =_sdata
 8001d60:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001d64:	20000078 	.word	0x20000078
	ldr	r2, =_sbss
 8001d68:	20000078 	.word	0x20000078
	ldr	r3, = _ebss
 8001d6c:	20000648 	.word	0x20000648

08001d70 <CAN1_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001d70:	e7fe      	b.n	8001d70 <CAN1_RX0_IRQHandler>

08001d72 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d72:	b580      	push	{r7, lr}
 8001d74:	b082      	sub	sp, #8
 8001d76:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d7c:	2003      	movs	r0, #3
 8001d7e:	f001 fca7 	bl	80036d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d82:	2000      	movs	r0, #0
 8001d84:	f000 f80e 	bl	8001da4 <HAL_InitTick>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d002      	beq.n	8001d94 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	71fb      	strb	r3, [r7, #7]
 8001d92:	e001      	b.n	8001d98 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001d94:	f7ff fba4 	bl	80014e0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001d98:	79fb      	ldrb	r3, [r7, #7]
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3708      	adds	r7, #8
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
	...

08001da4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b084      	sub	sp, #16
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001dac:	2300      	movs	r3, #0
 8001dae:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001db0:	4b16      	ldr	r3, [pc, #88]	; (8001e0c <HAL_InitTick+0x68>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d022      	beq.n	8001dfe <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001db8:	4b15      	ldr	r3, [pc, #84]	; (8001e10 <HAL_InitTick+0x6c>)
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	4b13      	ldr	r3, [pc, #76]	; (8001e0c <HAL_InitTick+0x68>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001dc4:	fbb1 f3f3 	udiv	r3, r1, r3
 8001dc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f001 fcb4 	bl	800373a <HAL_SYSTICK_Config>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d10f      	bne.n	8001df8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2b0f      	cmp	r3, #15
 8001ddc:	d809      	bhi.n	8001df2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dde:	2200      	movs	r2, #0
 8001de0:	6879      	ldr	r1, [r7, #4]
 8001de2:	f04f 30ff 	mov.w	r0, #4294967295
 8001de6:	f001 fc7e 	bl	80036e6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001dea:	4a0a      	ldr	r2, [pc, #40]	; (8001e14 <HAL_InitTick+0x70>)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6013      	str	r3, [r2, #0]
 8001df0:	e007      	b.n	8001e02 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	73fb      	strb	r3, [r7, #15]
 8001df6:	e004      	b.n	8001e02 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	73fb      	strb	r3, [r7, #15]
 8001dfc:	e001      	b.n	8001e02 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001e02:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	3710      	adds	r7, #16
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	20000010 	.word	0x20000010
 8001e10:	20000000 	.word	0x20000000
 8001e14:	2000000c 	.word	0x2000000c

08001e18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e1c:	4b05      	ldr	r3, [pc, #20]	; (8001e34 <HAL_IncTick+0x1c>)
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	4b05      	ldr	r3, [pc, #20]	; (8001e38 <HAL_IncTick+0x20>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4413      	add	r3, r2
 8001e26:	4a03      	ldr	r2, [pc, #12]	; (8001e34 <HAL_IncTick+0x1c>)
 8001e28:	6013      	str	r3, [r2, #0]
}
 8001e2a:	bf00      	nop
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr
 8001e34:	20000640 	.word	0x20000640
 8001e38:	20000010 	.word	0x20000010

08001e3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0
  return uwTick;
 8001e40:	4b03      	ldr	r3, [pc, #12]	; (8001e50 <HAL_GetTick+0x14>)
 8001e42:	681b      	ldr	r3, [r3, #0]
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr
 8001e4e:	bf00      	nop
 8001e50:	20000640 	.word	0x20000640

08001e54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b084      	sub	sp, #16
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e5c:	f7ff ffee 	bl	8001e3c <HAL_GetTick>
 8001e60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e6c:	d004      	beq.n	8001e78 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e6e:	4b09      	ldr	r3, [pc, #36]	; (8001e94 <HAL_Delay+0x40>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	68fa      	ldr	r2, [r7, #12]
 8001e74:	4413      	add	r3, r2
 8001e76:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e78:	bf00      	nop
 8001e7a:	f7ff ffdf 	bl	8001e3c <HAL_GetTick>
 8001e7e:	4602      	mov	r2, r0
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	1ad3      	subs	r3, r2, r3
 8001e84:	68fa      	ldr	r2, [r7, #12]
 8001e86:	429a      	cmp	r2, r3
 8001e88:	d8f7      	bhi.n	8001e7a <HAL_Delay+0x26>
  {
  }
}
 8001e8a:	bf00      	nop
 8001e8c:	3710      	adds	r7, #16
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	20000010 	.word	0x20000010

08001e98 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	431a      	orrs	r2, r3
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	609a      	str	r2, [r3, #8]
}
 8001eb2:	bf00      	nop
 8001eb4:	370c      	adds	r7, #12
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr

08001ebe <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001ebe:	b480      	push	{r7}
 8001ec0:	b083      	sub	sp, #12
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	6078      	str	r0, [r7, #4]
 8001ec6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	431a      	orrs	r2, r3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	609a      	str	r2, [r3, #8]
}
 8001ed8:	bf00      	nop
 8001eda:	370c      	adds	r7, #12
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr

08001ee4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	370c      	adds	r7, #12
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr

08001f00 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001f00:	b490      	push	{r4, r7}
 8001f02:	b084      	sub	sp, #16
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	60f8      	str	r0, [r7, #12]
 8001f08:	60b9      	str	r1, [r7, #8]
 8001f0a:	607a      	str	r2, [r7, #4]
 8001f0c:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	3360      	adds	r3, #96	; 0x60
 8001f12:	461a      	mov	r2, r3
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	4413      	add	r3, r2
 8001f1a:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8001f1c:	6822      	ldr	r2, [r4, #0]
 8001f1e:	4b08      	ldr	r3, [pc, #32]	; (8001f40 <LL_ADC_SetOffset+0x40>)
 8001f20:	4013      	ands	r3, r2
 8001f22:	687a      	ldr	r2, [r7, #4]
 8001f24:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001f28:	683a      	ldr	r2, [r7, #0]
 8001f2a:	430a      	orrs	r2, r1
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001f32:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001f34:	bf00      	nop
 8001f36:	3710      	adds	r7, #16
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bc90      	pop	{r4, r7}
 8001f3c:	4770      	bx	lr
 8001f3e:	bf00      	nop
 8001f40:	03fff000 	.word	0x03fff000

08001f44 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001f44:	b490      	push	{r4, r7}
 8001f46:	b082      	sub	sp, #8
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	3360      	adds	r3, #96	; 0x60
 8001f52:	461a      	mov	r2, r3
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	4413      	add	r3, r2
 8001f5a:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001f5c:	6823      	ldr	r3, [r4, #0]
 8001f5e:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3708      	adds	r7, #8
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bc90      	pop	{r4, r7}
 8001f6a:	4770      	bx	lr

08001f6c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001f6c:	b490      	push	{r4, r7}
 8001f6e:	b084      	sub	sp, #16
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	60f8      	str	r0, [r7, #12]
 8001f74:	60b9      	str	r1, [r7, #8]
 8001f76:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	3360      	adds	r3, #96	; 0x60
 8001f7c:	461a      	mov	r2, r3
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	009b      	lsls	r3, r3, #2
 8001f82:	4413      	add	r3, r2
 8001f84:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8001f86:	6823      	ldr	r3, [r4, #0]
 8001f88:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001f92:	bf00      	nop
 8001f94:	3710      	adds	r7, #16
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bc90      	pop	{r4, r7}
 8001f9a:	4770      	bx	lr

08001f9c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d101      	bne.n	8001fb4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e000      	b.n	8001fb6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001fb4:	2300      	movs	r3, #0
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	370c      	adds	r7, #12
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr

08001fc2 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001fc2:	b490      	push	{r4, r7}
 8001fc4:	b084      	sub	sp, #16
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	60f8      	str	r0, [r7, #12]
 8001fca:	60b9      	str	r1, [r7, #8]
 8001fcc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	3330      	adds	r3, #48	; 0x30
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	0a1b      	lsrs	r3, r3, #8
 8001fd8:	009b      	lsls	r3, r3, #2
 8001fda:	f003 030c 	and.w	r3, r3, #12
 8001fde:	4413      	add	r3, r2
 8001fe0:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8001fe2:	6822      	ldr	r2, [r4, #0]
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	f003 031f 	and.w	r3, r3, #31
 8001fea:	211f      	movs	r1, #31
 8001fec:	fa01 f303 	lsl.w	r3, r1, r3
 8001ff0:	43db      	mvns	r3, r3
 8001ff2:	401a      	ands	r2, r3
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	0e9b      	lsrs	r3, r3, #26
 8001ff8:	f003 011f 	and.w	r1, r3, #31
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	f003 031f 	and.w	r3, r3, #31
 8002002:	fa01 f303 	lsl.w	r3, r1, r3
 8002006:	4313      	orrs	r3, r2
 8002008:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800200a:	bf00      	nop
 800200c:	3710      	adds	r7, #16
 800200e:	46bd      	mov	sp, r7
 8002010:	bc90      	pop	{r4, r7}
 8002012:	4770      	bx	lr

08002014 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002014:	b480      	push	{r7}
 8002016:	b083      	sub	sp, #12
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002020:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d101      	bne.n	800202c <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002028:	2301      	movs	r3, #1
 800202a:	e000      	b.n	800202e <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800202c:	2300      	movs	r3, #0
}
 800202e:	4618      	mov	r0, r3
 8002030:	370c      	adds	r7, #12
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr

0800203a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800203a:	b490      	push	{r4, r7}
 800203c:	b084      	sub	sp, #16
 800203e:	af00      	add	r7, sp, #0
 8002040:	60f8      	str	r0, [r7, #12]
 8002042:	60b9      	str	r1, [r7, #8]
 8002044:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	3314      	adds	r3, #20
 800204a:	461a      	mov	r2, r3
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	0e5b      	lsrs	r3, r3, #25
 8002050:	009b      	lsls	r3, r3, #2
 8002052:	f003 0304 	and.w	r3, r3, #4
 8002056:	4413      	add	r3, r2
 8002058:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800205a:	6822      	ldr	r2, [r4, #0]
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	0d1b      	lsrs	r3, r3, #20
 8002060:	f003 031f 	and.w	r3, r3, #31
 8002064:	2107      	movs	r1, #7
 8002066:	fa01 f303 	lsl.w	r3, r1, r3
 800206a:	43db      	mvns	r3, r3
 800206c:	401a      	ands	r2, r3
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	0d1b      	lsrs	r3, r3, #20
 8002072:	f003 031f 	and.w	r3, r3, #31
 8002076:	6879      	ldr	r1, [r7, #4]
 8002078:	fa01 f303 	lsl.w	r3, r1, r3
 800207c:	4313      	orrs	r3, r2
 800207e:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002080:	bf00      	nop
 8002082:	3710      	adds	r7, #16
 8002084:	46bd      	mov	sp, r7
 8002086:	bc90      	pop	{r4, r7}
 8002088:	4770      	bx	lr
	...

0800208c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800208c:	b480      	push	{r7}
 800208e:	b085      	sub	sp, #20
 8002090:	af00      	add	r7, sp, #0
 8002092:	60f8      	str	r0, [r7, #12]
 8002094:	60b9      	str	r1, [r7, #8]
 8002096:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800209e:	68bb      	ldr	r3, [r7, #8]
 80020a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020a4:	43db      	mvns	r3, r3
 80020a6:	401a      	ands	r2, r3
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	f003 0318 	and.w	r3, r3, #24
 80020ae:	4908      	ldr	r1, [pc, #32]	; (80020d0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80020b0:	40d9      	lsrs	r1, r3
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	400b      	ands	r3, r1
 80020b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020ba:	431a      	orrs	r2, r3
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80020c2:	bf00      	nop
 80020c4:	3714      	adds	r7, #20
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr
 80020ce:	bf00      	nop
 80020d0:	0007ffff 	.word	0x0007ffff

080020d4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80020e4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80020e8:	687a      	ldr	r2, [r7, #4]
 80020ea:	6093      	str	r3, [r2, #8]
}
 80020ec:	bf00      	nop
 80020ee:	370c      	adds	r7, #12
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr

080020f8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002108:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800210c:	d101      	bne.n	8002112 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800210e:	2301      	movs	r3, #1
 8002110:	e000      	b.n	8002114 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002112:	2300      	movs	r3, #0
}
 8002114:	4618      	mov	r0, r3
 8002116:	370c      	adds	r7, #12
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr

08002120 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002130:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002134:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800213c:	bf00      	nop
 800213e:	370c      	adds	r7, #12
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr

08002148 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002158:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800215c:	d101      	bne.n	8002162 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800215e:	2301      	movs	r3, #1
 8002160:	e000      	b.n	8002164 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002162:	2300      	movs	r3, #0
}
 8002164:	4618      	mov	r0, r3
 8002166:	370c      	adds	r7, #12
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr

08002170 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002180:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002184:	f043 0201 	orr.w	r2, r3, #1
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800218c:	bf00      	nop
 800218e:	370c      	adds	r7, #12
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr

08002198 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002198:	b480      	push	{r7}
 800219a:	b083      	sub	sp, #12
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80021a8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80021ac:	f043 0202 	orr.w	r2, r3, #2
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80021b4:	bf00      	nop
 80021b6:	370c      	adds	r7, #12
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr

080021c0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	f003 0301 	and.w	r3, r3, #1
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d101      	bne.n	80021d8 <LL_ADC_IsEnabled+0x18>
 80021d4:	2301      	movs	r3, #1
 80021d6:	e000      	b.n	80021da <LL_ADC_IsEnabled+0x1a>
 80021d8:	2300      	movs	r3, #0
}
 80021da:	4618      	mov	r0, r3
 80021dc:	370c      	adds	r7, #12
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr

080021e6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80021e6:	b480      	push	{r7}
 80021e8:	b083      	sub	sp, #12
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	f003 0302 	and.w	r3, r3, #2
 80021f6:	2b02      	cmp	r3, #2
 80021f8:	d101      	bne.n	80021fe <LL_ADC_IsDisableOngoing+0x18>
 80021fa:	2301      	movs	r3, #1
 80021fc:	e000      	b.n	8002200 <LL_ADC_IsDisableOngoing+0x1a>
 80021fe:	2300      	movs	r3, #0
}
 8002200:	4618      	mov	r0, r3
 8002202:	370c      	adds	r7, #12
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr

0800220c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800221c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002220:	f043 0204 	orr.w	r2, r3, #4
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002228:	bf00      	nop
 800222a:	370c      	adds	r7, #12
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr

08002234 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002234:	b480      	push	{r7}
 8002236:	b083      	sub	sp, #12
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002244:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002248:	f043 0210 	orr.w	r2, r3, #16
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002250:	bf00      	nop
 8002252:	370c      	adds	r7, #12
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr

0800225c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	f003 0304 	and.w	r3, r3, #4
 800226c:	2b04      	cmp	r3, #4
 800226e:	d101      	bne.n	8002274 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002270:	2301      	movs	r3, #1
 8002272:	e000      	b.n	8002276 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002274:	2300      	movs	r3, #0
}
 8002276:	4618      	mov	r0, r3
 8002278:	370c      	adds	r7, #12
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr

08002282 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8002282:	b480      	push	{r7}
 8002284:	b083      	sub	sp, #12
 8002286:	af00      	add	r7, sp, #0
 8002288:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002292:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002296:	f043 0220 	orr.w	r2, r3, #32
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800229e:	bf00      	nop
 80022a0:	370c      	adds	r7, #12
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr

080022aa <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80022aa:	b480      	push	{r7}
 80022ac:	b083      	sub	sp, #12
 80022ae:	af00      	add	r7, sp, #0
 80022b0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	f003 0308 	and.w	r3, r3, #8
 80022ba:	2b08      	cmp	r3, #8
 80022bc:	d101      	bne.n	80022c2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80022be:	2301      	movs	r3, #1
 80022c0:	e000      	b.n	80022c4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80022c2:	2300      	movs	r3, #0
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	370c      	adds	r7, #12
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr

080022d0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b088      	sub	sp, #32
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022d8:	2300      	movs	r3, #0
 80022da:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80022dc:	2300      	movs	r3, #0
 80022de:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d101      	bne.n	80022ea <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e12a      	b.n	8002540 <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	691b      	ldr	r3, [r3, #16]
 80022ee:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d109      	bne.n	800230c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80022f8:	6878      	ldr	r0, [r7, #4]
 80022fa:	f7ff f915 	bl	8001528 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2200      	movs	r2, #0
 8002302:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2200      	movs	r2, #0
 8002308:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4618      	mov	r0, r3
 8002312:	f7ff fef1 	bl	80020f8 <LL_ADC_IsDeepPowerDownEnabled>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d004      	beq.n	8002326 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4618      	mov	r0, r3
 8002322:	f7ff fed7 	bl	80020d4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4618      	mov	r0, r3
 800232c:	f7ff ff0c 	bl	8002148 <LL_ADC_IsInternalRegulatorEnabled>
 8002330:	4603      	mov	r3, r0
 8002332:	2b00      	cmp	r3, #0
 8002334:	d113      	bne.n	800235e <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4618      	mov	r0, r3
 800233c:	f7ff fef0 	bl	8002120 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002340:	4b81      	ldr	r3, [pc, #516]	; (8002548 <HAL_ADC_Init+0x278>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	099b      	lsrs	r3, r3, #6
 8002346:	4a81      	ldr	r2, [pc, #516]	; (800254c <HAL_ADC_Init+0x27c>)
 8002348:	fba2 2303 	umull	r2, r3, r2, r3
 800234c:	099b      	lsrs	r3, r3, #6
 800234e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002350:	e002      	b.n	8002358 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	3b01      	subs	r3, #1
 8002356:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d1f9      	bne.n	8002352 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4618      	mov	r0, r3
 8002364:	f7ff fef0 	bl	8002148 <LL_ADC_IsInternalRegulatorEnabled>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d10d      	bne.n	800238a <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002372:	f043 0210 	orr.w	r2, r3, #16
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800237e:	f043 0201 	orr.w	r2, r3, #1
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4618      	mov	r0, r3
 8002390:	f7ff ff64 	bl	800225c <LL_ADC_REG_IsConversionOngoing>
 8002394:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800239a:	f003 0310 	and.w	r3, r3, #16
 800239e:	2b00      	cmp	r3, #0
 80023a0:	f040 80c5 	bne.w	800252e <HAL_ADC_Init+0x25e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	f040 80c1 	bne.w	800252e <HAL_ADC_Init+0x25e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023b0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80023b4:	f043 0202 	orr.w	r2, r3, #2
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4618      	mov	r0, r3
 80023c2:	f7ff fefd 	bl	80021c0 <LL_ADC_IsEnabled>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d10b      	bne.n	80023e4 <HAL_ADC_Init+0x114>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80023cc:	4860      	ldr	r0, [pc, #384]	; (8002550 <HAL_ADC_Init+0x280>)
 80023ce:	f7ff fef7 	bl	80021c0 <LL_ADC_IsEnabled>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d105      	bne.n	80023e4 <HAL_ADC_Init+0x114>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	4619      	mov	r1, r3
 80023de:	485d      	ldr	r0, [pc, #372]	; (8002554 <HAL_ADC_Init+0x284>)
 80023e0:	f7ff fd5a 	bl	8001e98 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	7e5b      	ldrb	r3, [r3, #25]
 80023e8:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80023ee:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80023f4:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80023fa:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002402:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002404:	4313      	orrs	r3, r2
 8002406:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800240e:	2b01      	cmp	r3, #1
 8002410:	d106      	bne.n	8002420 <HAL_ADC_Init+0x150>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002416:	3b01      	subs	r3, #1
 8002418:	045b      	lsls	r3, r3, #17
 800241a:	69ba      	ldr	r2, [r7, #24]
 800241c:	4313      	orrs	r3, r2
 800241e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002424:	2b00      	cmp	r3, #0
 8002426:	d009      	beq.n	800243c <HAL_ADC_Init+0x16c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800242c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002434:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002436:	69ba      	ldr	r2, [r7, #24]
 8002438:	4313      	orrs	r3, r2
 800243a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	68da      	ldr	r2, [r3, #12]
 8002442:	4b45      	ldr	r3, [pc, #276]	; (8002558 <HAL_ADC_Init+0x288>)
 8002444:	4013      	ands	r3, r2
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	6812      	ldr	r2, [r2, #0]
 800244a:	69b9      	ldr	r1, [r7, #24]
 800244c:	430b      	orrs	r3, r1
 800244e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4618      	mov	r0, r3
 8002456:	f7ff ff01 	bl	800225c <LL_ADC_REG_IsConversionOngoing>
 800245a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4618      	mov	r0, r3
 8002462:	f7ff ff22 	bl	80022aa <LL_ADC_INJ_IsConversionOngoing>
 8002466:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d13d      	bne.n	80024ea <HAL_ADC_Init+0x21a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d13a      	bne.n	80024ea <HAL_ADC_Init+0x21a>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002478:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002480:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002482:	4313      	orrs	r3, r2
 8002484:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002490:	f023 0302 	bic.w	r3, r3, #2
 8002494:	687a      	ldr	r2, [r7, #4]
 8002496:	6812      	ldr	r2, [r2, #0]
 8002498:	69b9      	ldr	r1, [r7, #24]
 800249a:	430b      	orrs	r3, r1
 800249c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	d118      	bne.n	80024da <HAL_ADC_Init+0x20a>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	691b      	ldr	r3, [r3, #16]
 80024ae:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80024b2:	f023 0304 	bic.w	r3, r3, #4
 80024b6:	687a      	ldr	r2, [r7, #4]
 80024b8:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80024be:	4311      	orrs	r1, r2
 80024c0:	687a      	ldr	r2, [r7, #4]
 80024c2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80024c4:	4311      	orrs	r1, r2
 80024c6:	687a      	ldr	r2, [r7, #4]
 80024c8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80024ca:	430a      	orrs	r2, r1
 80024cc:	431a      	orrs	r2, r3
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f042 0201 	orr.w	r2, r2, #1
 80024d6:	611a      	str	r2, [r3, #16]
 80024d8:	e007      	b.n	80024ea <HAL_ADC_Init+0x21a>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	691a      	ldr	r2, [r3, #16]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f022 0201 	bic.w	r2, r2, #1
 80024e8:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	691b      	ldr	r3, [r3, #16]
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d10c      	bne.n	800250c <HAL_ADC_Init+0x23c>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f8:	f023 010f 	bic.w	r1, r3, #15
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	69db      	ldr	r3, [r3, #28]
 8002500:	1e5a      	subs	r2, r3, #1
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	430a      	orrs	r2, r1
 8002508:	631a      	str	r2, [r3, #48]	; 0x30
 800250a:	e007      	b.n	800251c <HAL_ADC_Init+0x24c>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f022 020f 	bic.w	r2, r2, #15
 800251a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002520:	f023 0303 	bic.w	r3, r3, #3
 8002524:	f043 0201 	orr.w	r2, r3, #1
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	655a      	str	r2, [r3, #84]	; 0x54
 800252c:	e007      	b.n	800253e <HAL_ADC_Init+0x26e>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002532:	f043 0210 	orr.w	r2, r3, #16
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800253e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002540:	4618      	mov	r0, r3
 8002542:	3720      	adds	r7, #32
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}
 8002548:	20000000 	.word	0x20000000
 800254c:	053e2d63 	.word	0x053e2d63
 8002550:	50040000 	.word	0x50040000
 8002554:	50040300 	.word	0x50040300
 8002558:	fff0c007 	.word	0xfff0c007

0800255c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b084      	sub	sp, #16
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4618      	mov	r0, r3
 800256a:	f7ff fe77 	bl	800225c <LL_ADC_REG_IsConversionOngoing>
 800256e:	4603      	mov	r3, r0
 8002570:	2b00      	cmp	r3, #0
 8002572:	d14f      	bne.n	8002614 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800257a:	2b01      	cmp	r3, #1
 800257c:	d101      	bne.n	8002582 <HAL_ADC_Start+0x26>
 800257e:	2302      	movs	r3, #2
 8002580:	e04b      	b.n	800261a <HAL_ADC_Start+0xbe>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2201      	movs	r2, #1
 8002586:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f000 feec 	bl	8003368 <ADC_Enable>
 8002590:	4603      	mov	r3, r0
 8002592:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002594:	7bfb      	ldrb	r3, [r7, #15]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d137      	bne.n	800260a <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800259e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80025a2:	f023 0301 	bic.w	r3, r3, #1
 80025a6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025ba:	d106      	bne.n	80025ca <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025c0:	f023 0206 	bic.w	r2, r3, #6
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	659a      	str	r2, [r3, #88]	; 0x58
 80025c8:	e002      	b.n	80025d0 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2200      	movs	r2, #0
 80025ce:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	221c      	movs	r2, #28
 80025d6:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2200      	movs	r2, #0
 80025dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	68db      	ldr	r3, [r3, #12]
 80025e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d007      	beq.n	80025fe <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025f2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80025f6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4618      	mov	r0, r3
 8002604:	f7ff fe02 	bl	800220c <LL_ADC_REG_StartConversion>
 8002608:	e006      	b.n	8002618 <HAL_ADC_Start+0xbc>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2200      	movs	r2, #0
 800260e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002612:	e001      	b.n	8002618 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002614:	2302      	movs	r3, #2
 8002616:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8002618:	7bfb      	ldrb	r3, [r7, #15]
}
 800261a:	4618      	mov	r0, r3
 800261c:	3710      	adds	r7, #16
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}

08002622 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002622:	b580      	push	{r7, lr}
 8002624:	b084      	sub	sp, #16
 8002626:	af00      	add	r7, sp, #0
 8002628:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002630:	2b01      	cmp	r3, #1
 8002632:	d101      	bne.n	8002638 <HAL_ADC_Stop+0x16>
 8002634:	2302      	movs	r3, #2
 8002636:	e023      	b.n	8002680 <HAL_ADC_Stop+0x5e>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2201      	movs	r2, #1
 800263c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002640:	2103      	movs	r1, #3
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f000 fddc 	bl	8003200 <ADC_ConversionStop>
 8002648:	4603      	mov	r3, r0
 800264a:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800264c:	7bfb      	ldrb	r3, [r7, #15]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d111      	bne.n	8002676 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f000 fee2 	bl	800341c <ADC_Disable>
 8002658:	4603      	mov	r3, r0
 800265a:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800265c:	7bfb      	ldrb	r3, [r7, #15]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d109      	bne.n	8002676 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002666:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800266a:	f023 0301 	bic.w	r3, r3, #1
 800266e:	f043 0201 	orr.w	r2, r3, #1
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2200      	movs	r2, #0
 800267a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800267e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002680:	4618      	mov	r0, r3
 8002682:	3710      	adds	r7, #16
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}

08002688 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b086      	sub	sp, #24
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
 8002690:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	695b      	ldr	r3, [r3, #20]
 8002696:	2b08      	cmp	r3, #8
 8002698:	d102      	bne.n	80026a0 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800269a:	2308      	movs	r3, #8
 800269c:	617b      	str	r3, [r7, #20]
 800269e:	e010      	b.n	80026c2 <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	68db      	ldr	r3, [r3, #12]
 80026a6:	f003 0301 	and.w	r3, r3, #1
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d007      	beq.n	80026be <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026b2:	f043 0220 	orr.w	r2, r3, #32
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e068      	b.n	8002790 <HAL_ADC_PollForConversion+0x108>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 80026be:	2304      	movs	r3, #4
 80026c0:	617b      	str	r3, [r7, #20]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80026c2:	f7ff fbbb 	bl	8001e3c <HAL_GetTick>
 80026c6:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80026c8:	e01a      	b.n	8002700 <HAL_ADC_PollForConversion+0x78>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026d0:	d016      	beq.n	8002700 <HAL_ADC_PollForConversion+0x78>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80026d2:	f7ff fbb3 	bl	8001e3c <HAL_GetTick>
 80026d6:	4602      	mov	r2, r0
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	1ad3      	subs	r3, r2, r3
 80026dc:	683a      	ldr	r2, [r7, #0]
 80026de:	429a      	cmp	r2, r3
 80026e0:	d302      	bcc.n	80026e8 <HAL_ADC_PollForConversion+0x60>
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d10b      	bne.n	8002700 <HAL_ADC_PollForConversion+0x78>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026ec:	f043 0204 	orr.w	r2, r3, #4
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2200      	movs	r2, #0
 80026f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80026fc:	2303      	movs	r3, #3
 80026fe:	e047      	b.n	8002790 <HAL_ADC_PollForConversion+0x108>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	4013      	ands	r3, r2
 800270a:	2b00      	cmp	r3, #0
 800270c:	d0dd      	beq.n	80026ca <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002712:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4618      	mov	r0, r3
 8002720:	f7ff fc3c 	bl	8001f9c <LL_ADC_REG_IsTriggerSourceSWStart>
 8002724:	4603      	mov	r3, r0
 8002726:	2b00      	cmp	r3, #0
 8002728:	d01c      	beq.n	8002764 <HAL_ADC_PollForConversion+0xdc>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	7e5b      	ldrb	r3, [r3, #25]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d118      	bne.n	8002764 <HAL_ADC_PollForConversion+0xdc>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 0308 	and.w	r3, r3, #8
 800273c:	2b08      	cmp	r3, #8
 800273e:	d111      	bne.n	8002764 <HAL_ADC_PollForConversion+0xdc>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002744:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002750:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002754:	2b00      	cmp	r3, #0
 8002756:	d105      	bne.n	8002764 <HAL_ADC_PollForConversion+0xdc>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800275c:	f043 0201 	orr.w	r2, r3, #1
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	655a      	str	r2, [r3, #84]	; 0x54
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	68db      	ldr	r3, [r3, #12]
 800276a:	60fb      	str	r3, [r7, #12]
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	2b08      	cmp	r3, #8
 8002770:	d104      	bne.n	800277c <HAL_ADC_PollForConversion+0xf4>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	2208      	movs	r2, #8
 8002778:	601a      	str	r2, [r3, #0]
 800277a:	e008      	b.n	800278e <HAL_ADC_PollForConversion+0x106>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002782:	2b00      	cmp	r3, #0
 8002784:	d103      	bne.n	800278e <HAL_ADC_PollForConversion+0x106>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	220c      	movs	r2, #12
 800278c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 800278e:	2300      	movs	r3, #0
}
 8002790:	4618      	mov	r0, r3
 8002792:	3718      	adds	r7, #24
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}

08002798 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002798:	b480      	push	{r7}
 800279a:	b083      	sub	sp, #12
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	370c      	adds	r7, #12
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr

080027b2 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80027b2:	b580      	push	{r7, lr}
 80027b4:	b088      	sub	sp, #32
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80027ba:	2300      	movs	r3, #0
 80027bc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80027ce:	69bb      	ldr	r3, [r7, #24]
 80027d0:	f003 0302 	and.w	r3, r3, #2
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d017      	beq.n	8002808 <HAL_ADC_IRQHandler+0x56>
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	f003 0302 	and.w	r3, r3, #2
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d012      	beq.n	8002808 <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027e6:	f003 0310 	and.w	r3, r3, #16
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d105      	bne.n	80027fa <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027f2:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f000 fe8e 	bl	800351c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	2202      	movs	r2, #2
 8002806:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002808:	69bb      	ldr	r3, [r7, #24]
 800280a:	f003 0304 	and.w	r3, r3, #4
 800280e:	2b00      	cmp	r3, #0
 8002810:	d004      	beq.n	800281c <HAL_ADC_IRQHandler+0x6a>
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	f003 0304 	and.w	r3, r3, #4
 8002818:	2b00      	cmp	r3, #0
 800281a:	d109      	bne.n	8002830 <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800281c:	69bb      	ldr	r3, [r7, #24]
 800281e:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002822:	2b00      	cmp	r3, #0
 8002824:	d05e      	beq.n	80028e4 <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	f003 0308 	and.w	r3, r3, #8
 800282c:	2b00      	cmp	r3, #0
 800282e:	d059      	beq.n	80028e4 <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002834:	f003 0310 	and.w	r3, r3, #16
 8002838:	2b00      	cmp	r3, #0
 800283a:	d105      	bne.n	8002848 <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002840:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4618      	mov	r0, r3
 800284e:	f7ff fba5 	bl	8001f9c <LL_ADC_REG_IsTriggerSourceSWStart>
 8002852:	4603      	mov	r3, r0
 8002854:	2b00      	cmp	r3, #0
 8002856:	d03e      	beq.n	80028d6 <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	68db      	ldr	r3, [r3, #12]
 800285e:	613b      	str	r3, [r7, #16]
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002866:	2b00      	cmp	r3, #0
 8002868:	d135      	bne.n	80028d6 <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f003 0308 	and.w	r3, r3, #8
 8002874:	2b08      	cmp	r3, #8
 8002876:	d12e      	bne.n	80028d6 <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4618      	mov	r0, r3
 800287e:	f7ff fced 	bl	800225c <LL_ADC_REG_IsConversionOngoing>
 8002882:	4603      	mov	r3, r0
 8002884:	2b00      	cmp	r3, #0
 8002886:	d11a      	bne.n	80028be <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	685a      	ldr	r2, [r3, #4]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f022 020c 	bic.w	r2, r2, #12
 8002896:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800289c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d112      	bne.n	80028d6 <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028b4:	f043 0201 	orr.w	r2, r3, #1
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	655a      	str	r2, [r3, #84]	; 0x54
 80028bc:	e00b      	b.n	80028d6 <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028c2:	f043 0210 	orr.w	r2, r3, #16
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028ce:	f043 0201 	orr.w	r2, r3, #1
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f000 f91f 	bl	8002b1a <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	220c      	movs	r2, #12
 80028e2:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80028e4:	69bb      	ldr	r3, [r7, #24]
 80028e6:	f003 0320 	and.w	r3, r3, #32
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d004      	beq.n	80028f8 <HAL_ADC_IRQHandler+0x146>
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	f003 0320 	and.w	r3, r3, #32
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d109      	bne.n	800290c <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80028f8:	69bb      	ldr	r3, [r7, #24]
 80028fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d072      	beq.n	80029e8 <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002908:	2b00      	cmp	r3, #0
 800290a:	d06d      	beq.n	80029e8 <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002910:	f003 0310 	and.w	r3, r3, #16
 8002914:	2b00      	cmp	r3, #0
 8002916:	d105      	bne.n	8002924 <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800291c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4618      	mov	r0, r3
 800292a:	f7ff fb73 	bl	8002014 <LL_ADC_INJ_IsTriggerSourceSWStart>
 800292e:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4618      	mov	r0, r3
 8002936:	f7ff fb31 	bl	8001f9c <LL_ADC_REG_IsTriggerSourceSWStart>
 800293a:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	68db      	ldr	r3, [r3, #12]
 8002942:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d10c      	bne.n	8002964 <HAL_ADC_IRQHandler+0x1b2>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8002950:	2b00      	cmp	r3, #0
 8002952:	d142      	bne.n	80029da <HAL_ADC_IRQHandler+0x228>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d03f      	beq.n	80029da <HAL_ADC_IRQHandler+0x228>
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
          (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL))))
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
 8002960:	2b00      	cmp	r3, #0
 8002962:	d13a      	bne.n	80029da <HAL_ADC_IRQHandler+0x228>
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800296e:	2b40      	cmp	r3, #64	; 0x40
 8002970:	d133      	bne.n	80029da <HAL_ADC_IRQHandler+0x228>
        /* when the last context has been fully processed, JSQR is reset      */
        /* by the hardware. Even if no injected conversion is planned to come */
        /* (queue empty, triggers are ignored), it can start again            */
        /* immediately after setting a new context (JADSTART is still set).   */
        /* Therefore, state of HAL ADC injected group is kept to busy.        */
        if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002978:	2b00      	cmp	r3, #0
 800297a:	d12e      	bne.n	80029da <HAL_ADC_IRQHandler+0x228>
        {
          /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
          /* JADSTART==0 (no conversion on going)                             */
          if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4618      	mov	r0, r3
 8002982:	f7ff fc92 	bl	80022aa <LL_ADC_INJ_IsConversionOngoing>
 8002986:	4603      	mov	r3, r0
 8002988:	2b00      	cmp	r3, #0
 800298a:	d11a      	bne.n	80029c2 <HAL_ADC_IRQHandler+0x210>
          {
            /* Disable ADC end of sequence conversion interrupt  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	685a      	ldr	r2, [r3, #4]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800299a:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029a0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d112      	bne.n	80029da <HAL_ADC_IRQHandler+0x228>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029b8:	f043 0201 	orr.w	r2, r3, #1
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	655a      	str	r2, [r3, #84]	; 0x54
 80029c0:	e00b      	b.n	80029da <HAL_ADC_IRQHandler+0x228>
            }
          }
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029c6:	f043 0210 	orr.w	r2, r3, #16
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029d2:	f043 0201 	orr.w	r2, r3, #1
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	f000 fd76 	bl	80034cc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	2260      	movs	r2, #96	; 0x60
 80029e6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80029e8:	69bb      	ldr	r3, [r7, #24]
 80029ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d011      	beq.n	8002a16 <HAL_ADC_IRQHandler+0x264>
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d00c      	beq.n	8002a16 <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a00:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002a08:	6878      	ldr	r0, [r7, #4]
 8002a0a:	f000 f890 	bl	8002b2e <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	2280      	movs	r2, #128	; 0x80
 8002a14:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002a16:	69bb      	ldr	r3, [r7, #24]
 8002a18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d012      	beq.n	8002a46 <HAL_ADC_IRQHandler+0x294>
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d00d      	beq.n	8002a46 <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a2e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	f000 fd5c 	bl	80034f4 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a44:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002a46:	69bb      	ldr	r3, [r7, #24]
 8002a48:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d012      	beq.n	8002a76 <HAL_ADC_IRQHandler+0x2c4>
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d00d      	beq.n	8002a76 <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a5e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f000 fd4e 	bl	8003508 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a74:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002a76:	69bb      	ldr	r3, [r7, #24]
 8002a78:	f003 0310 	and.w	r3, r3, #16
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d02a      	beq.n	8002ad6 <HAL_ADC_IRQHandler+0x324>
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	f003 0310 	and.w	r3, r3, #16
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d025      	beq.n	8002ad6 <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d102      	bne.n	8002a98 <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 8002a92:	2301      	movs	r3, #1
 8002a94:	61fb      	str	r3, [r7, #28]
 8002a96:	e008      	b.n	8002aaa <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	68db      	ldr	r3, [r3, #12]
 8002a9e:	f003 0301 	and.w	r3, r3, #1
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d001      	beq.n	8002aaa <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 8002aaa:	69fb      	ldr	r3, [r7, #28]
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d10e      	bne.n	8002ace <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ab4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ac0:	f043 0202 	orr.w	r2, r3, #2
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002ac8:	6878      	ldr	r0, [r7, #4]
 8002aca:	f000 f83a 	bl	8002b42 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	2210      	movs	r2, #16
 8002ad4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002ad6:	69bb      	ldr	r3, [r7, #24]
 8002ad8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d018      	beq.n	8002b12 <HAL_ADC_IRQHandler+0x360>
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d013      	beq.n	8002b12 <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aee:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002afa:	f043 0208 	orr.w	r2, r3, #8
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b0a:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002b0c:	6878      	ldr	r0, [r7, #4]
 8002b0e:	f000 fce7 	bl	80034e0 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002b12:	bf00      	nop
 8002b14:	3720      	adds	r7, #32
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}

08002b1a <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002b1a:	b480      	push	{r7}
 8002b1c:	b083      	sub	sp, #12
 8002b1e:	af00      	add	r7, sp, #0
 8002b20:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002b22:	bf00      	nop
 8002b24:	370c      	adds	r7, #12
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr

08002b2e <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002b2e:	b480      	push	{r7}
 8002b30:	b083      	sub	sp, #12
 8002b32:	af00      	add	r7, sp, #0
 8002b34:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002b36:	bf00      	nop
 8002b38:	370c      	adds	r7, #12
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b40:	4770      	bx	lr

08002b42 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002b42:	b480      	push	{r7}
 8002b44:	b083      	sub	sp, #12
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002b4a:	bf00      	nop
 8002b4c:	370c      	adds	r7, #12
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr
	...

08002b58 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b0a6      	sub	sp, #152	; 0x98
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
 8002b60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b62:	2300      	movs	r3, #0
 8002b64:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d101      	bne.n	8002b7a <HAL_ADC_ConfigChannel+0x22>
 8002b76:	2302      	movs	r3, #2
 8002b78:	e338      	b.n	80031ec <HAL_ADC_ConfigChannel+0x694>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4618      	mov	r0, r3
 8002b88:	f7ff fb68 	bl	800225c <LL_ADC_REG_IsConversionOngoing>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	f040 831d 	bne.w	80031ce <HAL_ADC_ConfigChannel+0x676>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	2b05      	cmp	r3, #5
 8002b9a:	d824      	bhi.n	8002be6 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	3b02      	subs	r3, #2
 8002ba2:	2b03      	cmp	r3, #3
 8002ba4:	d81b      	bhi.n	8002bde <HAL_ADC_ConfigChannel+0x86>
 8002ba6:	a201      	add	r2, pc, #4	; (adr r2, 8002bac <HAL_ADC_ConfigChannel+0x54>)
 8002ba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bac:	08002bbd 	.word	0x08002bbd
 8002bb0:	08002bc5 	.word	0x08002bc5
 8002bb4:	08002bcd 	.word	0x08002bcd
 8002bb8:	08002bd5 	.word	0x08002bd5
      {
        case 2U: sConfig->Rank = ADC_REGULAR_RANK_2; break;
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	220c      	movs	r2, #12
 8002bc0:	605a      	str	r2, [r3, #4]
 8002bc2:	e011      	b.n	8002be8 <HAL_ADC_ConfigChannel+0x90>
        case 3U: sConfig->Rank = ADC_REGULAR_RANK_3; break;
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	2212      	movs	r2, #18
 8002bc8:	605a      	str	r2, [r3, #4]
 8002bca:	e00d      	b.n	8002be8 <HAL_ADC_ConfigChannel+0x90>
        case 4U: sConfig->Rank = ADC_REGULAR_RANK_4; break;
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	2218      	movs	r2, #24
 8002bd0:	605a      	str	r2, [r3, #4]
 8002bd2:	e009      	b.n	8002be8 <HAL_ADC_ConfigChannel+0x90>
        case 5U: sConfig->Rank = ADC_REGULAR_RANK_5; break;
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002bda:	605a      	str	r2, [r3, #4]
 8002bdc:	e004      	b.n	8002be8 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default: sConfig->Rank = ADC_REGULAR_RANK_1; break;
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	2206      	movs	r2, #6
 8002be2:	605a      	str	r2, [r3, #4]
 8002be4:	e000      	b.n	8002be8 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8002be6:	bf00      	nop
    #endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6818      	ldr	r0, [r3, #0]
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	6859      	ldr	r1, [r3, #4]
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	461a      	mov	r2, r3
 8002bf6:	f7ff f9e4 	bl	8001fc2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f7ff fb2c 	bl	800225c <LL_ADC_REG_IsConversionOngoing>
 8002c04:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f7ff fb4c 	bl	80022aa <LL_ADC_INJ_IsConversionOngoing>
 8002c12:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002c16:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	f040 8148 	bne.w	8002eb0 <HAL_ADC_ConfigChannel+0x358>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002c20:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	f040 8143 	bne.w	8002eb0 <HAL_ADC_ConfigChannel+0x358>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6818      	ldr	r0, [r3, #0]
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	6819      	ldr	r1, [r3, #0]
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	461a      	mov	r2, r3
 8002c38:	f7ff f9ff 	bl	800203a <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	695a      	ldr	r2, [r3, #20]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	68db      	ldr	r3, [r3, #12]
 8002c46:	08db      	lsrs	r3, r3, #3
 8002c48:	f003 0303 	and.w	r3, r3, #3
 8002c4c:	005b      	lsls	r3, r3, #1
 8002c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c52:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	691b      	ldr	r3, [r3, #16]
 8002c5a:	2b04      	cmp	r3, #4
 8002c5c:	d00a      	beq.n	8002c74 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6818      	ldr	r0, [r3, #0]
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	6919      	ldr	r1, [r3, #16]
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002c6e:	f7ff f947 	bl	8001f00 <LL_ADC_SetOffset>
 8002c72:	e11d      	b.n	8002eb0 <HAL_ADC_ConfigChannel+0x358>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	2100      	movs	r1, #0
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f7ff f962 	bl	8001f44 <LL_ADC_GetOffsetChannel>
 8002c80:	4603      	mov	r3, r0
 8002c82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d10a      	bne.n	8002ca0 <HAL_ADC_ConfigChannel+0x148>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	2100      	movs	r1, #0
 8002c90:	4618      	mov	r0, r3
 8002c92:	f7ff f957 	bl	8001f44 <LL_ADC_GetOffsetChannel>
 8002c96:	4603      	mov	r3, r0
 8002c98:	0e9b      	lsrs	r3, r3, #26
 8002c9a:	f003 021f 	and.w	r2, r3, #31
 8002c9e:	e012      	b.n	8002cc6 <HAL_ADC_ConfigChannel+0x16e>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	2100      	movs	r1, #0
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f7ff f94c 	bl	8001f44 <LL_ADC_GetOffsetChannel>
 8002cac:	4603      	mov	r3, r0
 8002cae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cb2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002cb6:	fa93 f3a3 	rbit	r3, r3
 8002cba:	67fb      	str	r3, [r7, #124]	; 0x7c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002cbc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002cbe:	fab3 f383 	clz	r3, r3
 8002cc2:	b2db      	uxtb	r3, r3
 8002cc4:	461a      	mov	r2, r3
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d105      	bne.n	8002cde <HAL_ADC_ConfigChannel+0x186>
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	0e9b      	lsrs	r3, r3, #26
 8002cd8:	f003 031f 	and.w	r3, r3, #31
 8002cdc:	e00a      	b.n	8002cf4 <HAL_ADC_ConfigChannel+0x19c>
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ce4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ce6:	fa93 f3a3 	rbit	r3, r3
 8002cea:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 8002cec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002cee:	fab3 f383 	clz	r3, r3
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d106      	bne.n	8002d06 <HAL_ADC_ConfigChannel+0x1ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	2100      	movs	r1, #0
 8002d00:	4618      	mov	r0, r3
 8002d02:	f7ff f933 	bl	8001f6c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	2101      	movs	r1, #1
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f7ff f919 	bl	8001f44 <LL_ADC_GetOffsetChannel>
 8002d12:	4603      	mov	r3, r0
 8002d14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d10a      	bne.n	8002d32 <HAL_ADC_ConfigChannel+0x1da>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	2101      	movs	r1, #1
 8002d22:	4618      	mov	r0, r3
 8002d24:	f7ff f90e 	bl	8001f44 <LL_ADC_GetOffsetChannel>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	0e9b      	lsrs	r3, r3, #26
 8002d2c:	f003 021f 	and.w	r2, r3, #31
 8002d30:	e010      	b.n	8002d54 <HAL_ADC_ConfigChannel+0x1fc>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	2101      	movs	r1, #1
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f7ff f903 	bl	8001f44 <LL_ADC_GetOffsetChannel>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d42:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d44:	fa93 f3a3 	rbit	r3, r3
 8002d48:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002d4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d4c:	fab3 f383 	clz	r3, r3
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	461a      	mov	r2, r3
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d105      	bne.n	8002d6c <HAL_ADC_ConfigChannel+0x214>
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	0e9b      	lsrs	r3, r3, #26
 8002d66:	f003 031f 	and.w	r3, r3, #31
 8002d6a:	e00a      	b.n	8002d82 <HAL_ADC_ConfigChannel+0x22a>
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d72:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d74:	fa93 f3a3 	rbit	r3, r3
 8002d78:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002d7a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002d7c:	fab3 f383 	clz	r3, r3
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	429a      	cmp	r2, r3
 8002d84:	d106      	bne.n	8002d94 <HAL_ADC_ConfigChannel+0x23c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	2101      	movs	r1, #1
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f7ff f8ec 	bl	8001f6c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	2102      	movs	r1, #2
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f7ff f8d2 	bl	8001f44 <LL_ADC_GetOffsetChannel>
 8002da0:	4603      	mov	r3, r0
 8002da2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d10a      	bne.n	8002dc0 <HAL_ADC_ConfigChannel+0x268>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	2102      	movs	r1, #2
 8002db0:	4618      	mov	r0, r3
 8002db2:	f7ff f8c7 	bl	8001f44 <LL_ADC_GetOffsetChannel>
 8002db6:	4603      	mov	r3, r0
 8002db8:	0e9b      	lsrs	r3, r3, #26
 8002dba:	f003 021f 	and.w	r2, r3, #31
 8002dbe:	e010      	b.n	8002de2 <HAL_ADC_ConfigChannel+0x28a>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	2102      	movs	r1, #2
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f7ff f8bc 	bl	8001f44 <LL_ADC_GetOffsetChannel>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dd0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002dd2:	fa93 f3a3 	rbit	r3, r3
 8002dd6:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 8002dd8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002dda:	fab3 f383 	clz	r3, r3
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	461a      	mov	r2, r3
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d105      	bne.n	8002dfa <HAL_ADC_ConfigChannel+0x2a2>
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	0e9b      	lsrs	r3, r3, #26
 8002df4:	f003 031f 	and.w	r3, r3, #31
 8002df8:	e00a      	b.n	8002e10 <HAL_ADC_ConfigChannel+0x2b8>
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e00:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e02:	fa93 f3a3 	rbit	r3, r3
 8002e06:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002e08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e0a:	fab3 f383 	clz	r3, r3
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d106      	bne.n	8002e22 <HAL_ADC_ConfigChannel+0x2ca>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	2102      	movs	r1, #2
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f7ff f8a5 	bl	8001f6c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	2103      	movs	r1, #3
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f7ff f88b 	bl	8001f44 <LL_ADC_GetOffsetChannel>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d10a      	bne.n	8002e4e <HAL_ADC_ConfigChannel+0x2f6>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	2103      	movs	r1, #3
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f7ff f880 	bl	8001f44 <LL_ADC_GetOffsetChannel>
 8002e44:	4603      	mov	r3, r0
 8002e46:	0e9b      	lsrs	r3, r3, #26
 8002e48:	f003 021f 	and.w	r2, r3, #31
 8002e4c:	e010      	b.n	8002e70 <HAL_ADC_ConfigChannel+0x318>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	2103      	movs	r1, #3
 8002e54:	4618      	mov	r0, r3
 8002e56:	f7ff f875 	bl	8001f44 <LL_ADC_GetOffsetChannel>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e60:	fa93 f3a3 	rbit	r3, r3
 8002e64:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002e66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e68:	fab3 f383 	clz	r3, r3
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	461a      	mov	r2, r3
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d105      	bne.n	8002e88 <HAL_ADC_ConfigChannel+0x330>
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	0e9b      	lsrs	r3, r3, #26
 8002e82:	f003 031f 	and.w	r3, r3, #31
 8002e86:	e00a      	b.n	8002e9e <HAL_ADC_ConfigChannel+0x346>
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e90:	fa93 f3a3 	rbit	r3, r3
 8002e94:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 8002e96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e98:	fab3 f383 	clz	r3, r3
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	429a      	cmp	r2, r3
 8002ea0:	d106      	bne.n	8002eb0 <HAL_ADC_ConfigChannel+0x358>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	2103      	movs	r1, #3
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f7ff f85e 	bl	8001f6c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f7ff f983 	bl	80021c0 <LL_ADC_IsEnabled>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	f040 810c 	bne.w	80030da <HAL_ADC_ConfigChannel+0x582>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6818      	ldr	r0, [r3, #0]
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	6819      	ldr	r1, [r3, #0]
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	68db      	ldr	r3, [r3, #12]
 8002ece:	461a      	mov	r2, r3
 8002ed0:	f7ff f8dc 	bl	800208c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	68db      	ldr	r3, [r3, #12]
 8002ed8:	4aa8      	ldr	r2, [pc, #672]	; (800317c <HAL_ADC_ConfigChannel+0x624>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	f040 80fd 	bne.w	80030da <HAL_ADC_ConfigChannel+0x582>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d10b      	bne.n	8002f08 <HAL_ADC_ConfigChannel+0x3b0>
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	0e9b      	lsrs	r3, r3, #26
 8002ef6:	3301      	adds	r3, #1
 8002ef8:	f003 031f 	and.w	r3, r3, #31
 8002efc:	2b09      	cmp	r3, #9
 8002efe:	bf94      	ite	ls
 8002f00:	2301      	movls	r3, #1
 8002f02:	2300      	movhi	r3, #0
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	e012      	b.n	8002f2e <HAL_ADC_ConfigChannel+0x3d6>
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f10:	fa93 f3a3 	rbit	r3, r3
 8002f14:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002f16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f18:	fab3 f383 	clz	r3, r3
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	3301      	adds	r3, #1
 8002f20:	f003 031f 	and.w	r3, r3, #31
 8002f24:	2b09      	cmp	r3, #9
 8002f26:	bf94      	ite	ls
 8002f28:	2301      	movls	r3, #1
 8002f2a:	2300      	movhi	r3, #0
 8002f2c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d064      	beq.n	8002ffc <HAL_ADC_ConfigChannel+0x4a4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d107      	bne.n	8002f4e <HAL_ADC_ConfigChannel+0x3f6>
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	0e9b      	lsrs	r3, r3, #26
 8002f44:	3301      	adds	r3, #1
 8002f46:	069b      	lsls	r3, r3, #26
 8002f48:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f4c:	e00e      	b.n	8002f6c <HAL_ADC_ConfigChannel+0x414>
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f56:	fa93 f3a3 	rbit	r3, r3
 8002f5a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002f5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f5e:	fab3 f383 	clz	r3, r3
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	3301      	adds	r3, #1
 8002f66:	069b      	lsls	r3, r3, #26
 8002f68:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d109      	bne.n	8002f8c <HAL_ADC_ConfigChannel+0x434>
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	0e9b      	lsrs	r3, r3, #26
 8002f7e:	3301      	adds	r3, #1
 8002f80:	f003 031f 	and.w	r3, r3, #31
 8002f84:	2101      	movs	r1, #1
 8002f86:	fa01 f303 	lsl.w	r3, r1, r3
 8002f8a:	e010      	b.n	8002fae <HAL_ADC_ConfigChannel+0x456>
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f94:	fa93 f3a3 	rbit	r3, r3
 8002f98:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f9c:	fab3 f383 	clz	r3, r3
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	3301      	adds	r3, #1
 8002fa4:	f003 031f 	and.w	r3, r3, #31
 8002fa8:	2101      	movs	r1, #1
 8002faa:	fa01 f303 	lsl.w	r3, r1, r3
 8002fae:	ea42 0103 	orr.w	r1, r2, r3
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d10a      	bne.n	8002fd4 <HAL_ADC_ConfigChannel+0x47c>
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	0e9b      	lsrs	r3, r3, #26
 8002fc4:	3301      	adds	r3, #1
 8002fc6:	f003 021f 	and.w	r2, r3, #31
 8002fca:	4613      	mov	r3, r2
 8002fcc:	005b      	lsls	r3, r3, #1
 8002fce:	4413      	add	r3, r2
 8002fd0:	051b      	lsls	r3, r3, #20
 8002fd2:	e011      	b.n	8002ff8 <HAL_ADC_ConfigChannel+0x4a0>
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fdc:	fa93 f3a3 	rbit	r3, r3
 8002fe0:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe4:	fab3 f383 	clz	r3, r3
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	3301      	adds	r3, #1
 8002fec:	f003 021f 	and.w	r2, r3, #31
 8002ff0:	4613      	mov	r3, r2
 8002ff2:	005b      	lsls	r3, r3, #1
 8002ff4:	4413      	add	r3, r2
 8002ff6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ff8:	430b      	orrs	r3, r1
 8002ffa:	e069      	b.n	80030d0 <HAL_ADC_ConfigChannel+0x578>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003004:	2b00      	cmp	r3, #0
 8003006:	d107      	bne.n	8003018 <HAL_ADC_ConfigChannel+0x4c0>
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	0e9b      	lsrs	r3, r3, #26
 800300e:	3301      	adds	r3, #1
 8003010:	069b      	lsls	r3, r3, #26
 8003012:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003016:	e00e      	b.n	8003036 <HAL_ADC_ConfigChannel+0x4de>
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800301e:	6a3b      	ldr	r3, [r7, #32]
 8003020:	fa93 f3a3 	rbit	r3, r3
 8003024:	61fb      	str	r3, [r7, #28]
  return result;
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	fab3 f383 	clz	r3, r3
 800302c:	b2db      	uxtb	r3, r3
 800302e:	3301      	adds	r3, #1
 8003030:	069b      	lsls	r3, r3, #26
 8003032:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800303e:	2b00      	cmp	r3, #0
 8003040:	d109      	bne.n	8003056 <HAL_ADC_ConfigChannel+0x4fe>
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	0e9b      	lsrs	r3, r3, #26
 8003048:	3301      	adds	r3, #1
 800304a:	f003 031f 	and.w	r3, r3, #31
 800304e:	2101      	movs	r1, #1
 8003050:	fa01 f303 	lsl.w	r3, r1, r3
 8003054:	e010      	b.n	8003078 <HAL_ADC_ConfigChannel+0x520>
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800305c:	69bb      	ldr	r3, [r7, #24]
 800305e:	fa93 f3a3 	rbit	r3, r3
 8003062:	617b      	str	r3, [r7, #20]
  return result;
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	fab3 f383 	clz	r3, r3
 800306a:	b2db      	uxtb	r3, r3
 800306c:	3301      	adds	r3, #1
 800306e:	f003 031f 	and.w	r3, r3, #31
 8003072:	2101      	movs	r1, #1
 8003074:	fa01 f303 	lsl.w	r3, r1, r3
 8003078:	ea42 0103 	orr.w	r1, r2, r3
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003084:	2b00      	cmp	r3, #0
 8003086:	d10d      	bne.n	80030a4 <HAL_ADC_ConfigChannel+0x54c>
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	0e9b      	lsrs	r3, r3, #26
 800308e:	3301      	adds	r3, #1
 8003090:	f003 021f 	and.w	r2, r3, #31
 8003094:	4613      	mov	r3, r2
 8003096:	005b      	lsls	r3, r3, #1
 8003098:	4413      	add	r3, r2
 800309a:	3b1e      	subs	r3, #30
 800309c:	051b      	lsls	r3, r3, #20
 800309e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80030a2:	e014      	b.n	80030ce <HAL_ADC_ConfigChannel+0x576>
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	fa93 f3a3 	rbit	r3, r3
 80030b0:	60fb      	str	r3, [r7, #12]
  return result;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	fab3 f383 	clz	r3, r3
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	3301      	adds	r3, #1
 80030bc:	f003 021f 	and.w	r2, r3, #31
 80030c0:	4613      	mov	r3, r2
 80030c2:	005b      	lsls	r3, r3, #1
 80030c4:	4413      	add	r3, r2
 80030c6:	3b1e      	subs	r3, #30
 80030c8:	051b      	lsls	r3, r3, #20
 80030ca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80030ce:	430b      	orrs	r3, r1
 80030d0:	683a      	ldr	r2, [r7, #0]
 80030d2:	6892      	ldr	r2, [r2, #8]
 80030d4:	4619      	mov	r1, r3
 80030d6:	f7fe ffb0 	bl	800203a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	4b28      	ldr	r3, [pc, #160]	; (8003180 <HAL_ADC_ConfigChannel+0x628>)
 80030e0:	4013      	ands	r3, r2
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d07c      	beq.n	80031e0 <HAL_ADC_ConfigChannel+0x688>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80030e6:	4827      	ldr	r0, [pc, #156]	; (8003184 <HAL_ADC_ConfigChannel+0x62c>)
 80030e8:	f7fe fefc 	bl	8001ee4 <LL_ADC_GetCommonPathInternalCh>
 80030ec:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a24      	ldr	r2, [pc, #144]	; (8003188 <HAL_ADC_ConfigChannel+0x630>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d126      	bne.n	8003148 <HAL_ADC_ConfigChannel+0x5f0>
 80030fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80030fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003102:	2b00      	cmp	r3, #0
 8003104:	d120      	bne.n	8003148 <HAL_ADC_ConfigChannel+0x5f0>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a20      	ldr	r2, [pc, #128]	; (800318c <HAL_ADC_ConfigChannel+0x634>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d167      	bne.n	80031e0 <HAL_ADC_ConfigChannel+0x688>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003110:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003114:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003118:	4619      	mov	r1, r3
 800311a:	481a      	ldr	r0, [pc, #104]	; (8003184 <HAL_ADC_ConfigChannel+0x62c>)
 800311c:	f7fe fecf 	bl	8001ebe <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8003120:	4b1b      	ldr	r3, [pc, #108]	; (8003190 <HAL_ADC_ConfigChannel+0x638>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	099b      	lsrs	r3, r3, #6
 8003126:	4a1b      	ldr	r2, [pc, #108]	; (8003194 <HAL_ADC_ConfigChannel+0x63c>)
 8003128:	fba2 2303 	umull	r2, r3, r2, r3
 800312c:	099a      	lsrs	r2, r3, #6
 800312e:	4613      	mov	r3, r2
 8003130:	005b      	lsls	r3, r3, #1
 8003132:	4413      	add	r3, r2
 8003134:	009b      	lsls	r3, r3, #2
 8003136:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003138:	e002      	b.n	8003140 <HAL_ADC_ConfigChannel+0x5e8>
          {
            wait_loop_index--;
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	3b01      	subs	r3, #1
 800313e:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d1f9      	bne.n	800313a <HAL_ADC_ConfigChannel+0x5e2>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003146:	e04b      	b.n	80031e0 <HAL_ADC_ConfigChannel+0x688>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a12      	ldr	r2, [pc, #72]	; (8003198 <HAL_ADC_ConfigChannel+0x640>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d124      	bne.n	800319c <HAL_ADC_ConfigChannel+0x644>
 8003152:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003156:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800315a:	2b00      	cmp	r3, #0
 800315c:	d11e      	bne.n	800319c <HAL_ADC_ConfigChannel+0x644>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a0a      	ldr	r2, [pc, #40]	; (800318c <HAL_ADC_ConfigChannel+0x634>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d13b      	bne.n	80031e0 <HAL_ADC_ConfigChannel+0x688>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003168:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800316c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003170:	4619      	mov	r1, r3
 8003172:	4804      	ldr	r0, [pc, #16]	; (8003184 <HAL_ADC_ConfigChannel+0x62c>)
 8003174:	f7fe fea3 	bl	8001ebe <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003178:	e032      	b.n	80031e0 <HAL_ADC_ConfigChannel+0x688>
 800317a:	bf00      	nop
 800317c:	407f0000 	.word	0x407f0000
 8003180:	80080000 	.word	0x80080000
 8003184:	50040300 	.word	0x50040300
 8003188:	c7520000 	.word	0xc7520000
 800318c:	50040000 	.word	0x50040000
 8003190:	20000000 	.word	0x20000000
 8003194:	053e2d63 	.word	0x053e2d63
 8003198:	cb840000 	.word	0xcb840000
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a14      	ldr	r2, [pc, #80]	; (80031f4 <HAL_ADC_ConfigChannel+0x69c>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d11c      	bne.n	80031e0 <HAL_ADC_ConfigChannel+0x688>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80031a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80031aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d116      	bne.n	80031e0 <HAL_ADC_ConfigChannel+0x688>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a10      	ldr	r2, [pc, #64]	; (80031f8 <HAL_ADC_ConfigChannel+0x6a0>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d111      	bne.n	80031e0 <HAL_ADC_ConfigChannel+0x688>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80031bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80031c0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80031c4:	4619      	mov	r1, r3
 80031c6:	480d      	ldr	r0, [pc, #52]	; (80031fc <HAL_ADC_ConfigChannel+0x6a4>)
 80031c8:	f7fe fe79 	bl	8001ebe <LL_ADC_SetCommonPathInternalCh>
 80031cc:	e008      	b.n	80031e0 <HAL_ADC_ConfigChannel+0x688>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031d2:	f043 0220 	orr.w	r2, r3, #32
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2200      	movs	r2, #0
 80031e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80031e8:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	3798      	adds	r7, #152	; 0x98
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}
 80031f4:	80000001 	.word	0x80000001
 80031f8:	50040000 	.word	0x50040000
 80031fc:	50040300 	.word	0x50040300

08003200 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b088      	sub	sp, #32
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
 8003208:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800320a:	2300      	movs	r3, #0
 800320c:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4618      	mov	r0, r3
 8003218:	f7ff f820 	bl	800225c <LL_ADC_REG_IsConversionOngoing>
 800321c:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4618      	mov	r0, r3
 8003224:	f7ff f841 	bl	80022aa <LL_ADC_INJ_IsConversionOngoing>
 8003228:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d103      	bne.n	8003238 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2b00      	cmp	r3, #0
 8003234:	f000 8090 	beq.w	8003358 <ADC_ConversionStop+0x158>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	68db      	ldr	r3, [r3, #12]
 800323e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003242:	2b00      	cmp	r3, #0
 8003244:	d02a      	beq.n	800329c <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	7e5b      	ldrb	r3, [r3, #25]
 800324a:	2b01      	cmp	r3, #1
 800324c:	d126      	bne.n	800329c <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	7e1b      	ldrb	r3, [r3, #24]
 8003252:	2b01      	cmp	r3, #1
 8003254:	d122      	bne.n	800329c <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8003256:	2301      	movs	r3, #1
 8003258:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800325a:	e014      	b.n	8003286 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 800325c:	69fb      	ldr	r3, [r7, #28]
 800325e:	4a41      	ldr	r2, [pc, #260]	; (8003364 <ADC_ConversionStop+0x164>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d90d      	bls.n	8003280 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003268:	f043 0210 	orr.w	r2, r3, #16
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003274:	f043 0201 	orr.w	r2, r3, #1
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	e06c      	b.n	800335a <ADC_ConversionStop+0x15a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003280:	69fb      	ldr	r3, [r7, #28]
 8003282:	3301      	adds	r3, #1
 8003284:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003290:	2b40      	cmp	r3, #64	; 0x40
 8003292:	d1e3      	bne.n	800325c <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	2240      	movs	r2, #64	; 0x40
 800329a:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 800329c:	69bb      	ldr	r3, [r7, #24]
 800329e:	2b02      	cmp	r3, #2
 80032a0:	d014      	beq.n	80032cc <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4618      	mov	r0, r3
 80032a8:	f7fe ffd8 	bl	800225c <LL_ADC_REG_IsConversionOngoing>
 80032ac:	4603      	mov	r3, r0
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d00c      	beq.n	80032cc <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4618      	mov	r0, r3
 80032b8:	f7fe ff95 	bl	80021e6 <LL_ADC_IsDisableOngoing>
 80032bc:	4603      	mov	r3, r0
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d104      	bne.n	80032cc <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4618      	mov	r0, r3
 80032c8:	f7fe ffb4 	bl	8002234 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80032cc:	69bb      	ldr	r3, [r7, #24]
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d014      	beq.n	80032fc <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4618      	mov	r0, r3
 80032d8:	f7fe ffe7 	bl	80022aa <LL_ADC_INJ_IsConversionOngoing>
 80032dc:	4603      	mov	r3, r0
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d00c      	beq.n	80032fc <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4618      	mov	r0, r3
 80032e8:	f7fe ff7d 	bl	80021e6 <LL_ADC_IsDisableOngoing>
 80032ec:	4603      	mov	r3, r0
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d104      	bne.n	80032fc <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4618      	mov	r0, r3
 80032f8:	f7fe ffc3 	bl	8002282 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80032fc:	69bb      	ldr	r3, [r7, #24]
 80032fe:	2b02      	cmp	r3, #2
 8003300:	d004      	beq.n	800330c <ADC_ConversionStop+0x10c>
 8003302:	2b03      	cmp	r3, #3
 8003304:	d105      	bne.n	8003312 <ADC_ConversionStop+0x112>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003306:	230c      	movs	r3, #12
 8003308:	617b      	str	r3, [r7, #20]
        break;
 800330a:	e005      	b.n	8003318 <ADC_ConversionStop+0x118>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800330c:	2308      	movs	r3, #8
 800330e:	617b      	str	r3, [r7, #20]
        break;
 8003310:	e002      	b.n	8003318 <ADC_ConversionStop+0x118>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003312:	2304      	movs	r3, #4
 8003314:	617b      	str	r3, [r7, #20]
        break;
 8003316:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8003318:	f7fe fd90 	bl	8001e3c <HAL_GetTick>
 800331c:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800331e:	e014      	b.n	800334a <ADC_ConversionStop+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003320:	f7fe fd8c 	bl	8001e3c <HAL_GetTick>
 8003324:	4602      	mov	r2, r0
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	1ad3      	subs	r3, r2, r3
 800332a:	2b05      	cmp	r3, #5
 800332c:	d90d      	bls.n	800334a <ADC_ConversionStop+0x14a>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003332:	f043 0210 	orr.w	r2, r3, #16
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800333e:	f043 0201 	orr.w	r2, r3, #1
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	e007      	b.n	800335a <ADC_ConversionStop+0x15a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	689a      	ldr	r2, [r3, #8]
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	4013      	ands	r3, r2
 8003354:	2b00      	cmp	r3, #0
 8003356:	d1e3      	bne.n	8003320 <ADC_ConversionStop+0x120>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003358:	2300      	movs	r3, #0
}
 800335a:	4618      	mov	r0, r3
 800335c:	3720      	adds	r7, #32
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
 8003362:	bf00      	nop
 8003364:	a33fffff 	.word	0xa33fffff

08003368 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b084      	sub	sp, #16
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4618      	mov	r0, r3
 8003376:	f7fe ff23 	bl	80021c0 <LL_ADC_IsEnabled>
 800337a:	4603      	mov	r3, r0
 800337c:	2b00      	cmp	r3, #0
 800337e:	d146      	bne.n	800340e <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	689a      	ldr	r2, [r3, #8]
 8003386:	4b24      	ldr	r3, [pc, #144]	; (8003418 <ADC_Enable+0xb0>)
 8003388:	4013      	ands	r3, r2
 800338a:	2b00      	cmp	r3, #0
 800338c:	d00d      	beq.n	80033aa <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003392:	f043 0210 	orr.w	r2, r3, #16
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800339e:	f043 0201 	orr.w	r2, r3, #1
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e032      	b.n	8003410 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4618      	mov	r0, r3
 80033b0:	f7fe fede 	bl	8002170 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80033b4:	f7fe fd42 	bl	8001e3c <HAL_GetTick>
 80033b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80033ba:	e021      	b.n	8003400 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4618      	mov	r0, r3
 80033c2:	f7fe fefd 	bl	80021c0 <LL_ADC_IsEnabled>
 80033c6:	4603      	mov	r3, r0
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d104      	bne.n	80033d6 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4618      	mov	r0, r3
 80033d2:	f7fe fecd 	bl	8002170 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80033d6:	f7fe fd31 	bl	8001e3c <HAL_GetTick>
 80033da:	4602      	mov	r2, r0
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	1ad3      	subs	r3, r2, r3
 80033e0:	2b02      	cmp	r3, #2
 80033e2:	d90d      	bls.n	8003400 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033e8:	f043 0210 	orr.w	r2, r3, #16
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033f4:	f043 0201 	orr.w	r2, r3, #1
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	e007      	b.n	8003410 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 0301 	and.w	r3, r3, #1
 800340a:	2b01      	cmp	r3, #1
 800340c:	d1d6      	bne.n	80033bc <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800340e:	2300      	movs	r3, #0
}
 8003410:	4618      	mov	r0, r3
 8003412:	3710      	adds	r7, #16
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}
 8003418:	8000003f 	.word	0x8000003f

0800341c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b084      	sub	sp, #16
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4618      	mov	r0, r3
 800342a:	f7fe fedc 	bl	80021e6 <LL_ADC_IsDisableOngoing>
 800342e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4618      	mov	r0, r3
 8003436:	f7fe fec3 	bl	80021c0 <LL_ADC_IsEnabled>
 800343a:	4603      	mov	r3, r0
 800343c:	2b00      	cmp	r3, #0
 800343e:	d040      	beq.n	80034c2 <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d13d      	bne.n	80034c2 <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	f003 030d 	and.w	r3, r3, #13
 8003450:	2b01      	cmp	r3, #1
 8003452:	d10c      	bne.n	800346e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4618      	mov	r0, r3
 800345a:	f7fe fe9d 	bl	8002198 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	2203      	movs	r2, #3
 8003464:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003466:	f7fe fce9 	bl	8001e3c <HAL_GetTick>
 800346a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800346c:	e022      	b.n	80034b4 <ADC_Disable+0x98>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003472:	f043 0210 	orr.w	r2, r3, #16
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800347e:	f043 0201 	orr.w	r2, r3, #1
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	e01c      	b.n	80034c4 <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800348a:	f7fe fcd7 	bl	8001e3c <HAL_GetTick>
 800348e:	4602      	mov	r2, r0
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	1ad3      	subs	r3, r2, r3
 8003494:	2b02      	cmp	r3, #2
 8003496:	d90d      	bls.n	80034b4 <ADC_Disable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800349c:	f043 0210 	orr.w	r2, r3, #16
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034a8:	f043 0201 	orr.w	r2, r3, #1
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	e007      	b.n	80034c4 <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	f003 0301 	and.w	r3, r3, #1
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d1e3      	bne.n	800348a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80034c2:	2300      	movs	r3, #0
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	3710      	adds	r7, #16
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}

080034cc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b083      	sub	sp, #12
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80034d4:	bf00      	nop
 80034d6:	370c      	adds	r7, #12
 80034d8:	46bd      	mov	sp, r7
 80034da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034de:	4770      	bx	lr

080034e0 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b083      	sub	sp, #12
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80034e8:	bf00      	nop
 80034ea:	370c      	adds	r7, #12
 80034ec:	46bd      	mov	sp, r7
 80034ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f2:	4770      	bx	lr

080034f4 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b083      	sub	sp, #12
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80034fc:	bf00      	nop
 80034fe:	370c      	adds	r7, #12
 8003500:	46bd      	mov	sp, r7
 8003502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003506:	4770      	bx	lr

08003508 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003508:	b480      	push	{r7}
 800350a:	b083      	sub	sp, #12
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003510:	bf00      	nop
 8003512:	370c      	adds	r7, #12
 8003514:	46bd      	mov	sp, r7
 8003516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351a:	4770      	bx	lr

0800351c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800351c:	b480      	push	{r7}
 800351e:	b083      	sub	sp, #12
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003524:	bf00      	nop
 8003526:	370c      	adds	r7, #12
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr

08003530 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003530:	b480      	push	{r7}
 8003532:	b085      	sub	sp, #20
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	f003 0307 	and.w	r3, r3, #7
 800353e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003540:	4b0c      	ldr	r3, [pc, #48]	; (8003574 <__NVIC_SetPriorityGrouping+0x44>)
 8003542:	68db      	ldr	r3, [r3, #12]
 8003544:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003546:	68ba      	ldr	r2, [r7, #8]
 8003548:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800354c:	4013      	ands	r3, r2
 800354e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003558:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800355c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003560:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003562:	4a04      	ldr	r2, [pc, #16]	; (8003574 <__NVIC_SetPriorityGrouping+0x44>)
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	60d3      	str	r3, [r2, #12]
}
 8003568:	bf00      	nop
 800356a:	3714      	adds	r7, #20
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr
 8003574:	e000ed00 	.word	0xe000ed00

08003578 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003578:	b480      	push	{r7}
 800357a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800357c:	4b04      	ldr	r3, [pc, #16]	; (8003590 <__NVIC_GetPriorityGrouping+0x18>)
 800357e:	68db      	ldr	r3, [r3, #12]
 8003580:	0a1b      	lsrs	r3, r3, #8
 8003582:	f003 0307 	and.w	r3, r3, #7
}
 8003586:	4618      	mov	r0, r3
 8003588:	46bd      	mov	sp, r7
 800358a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358e:	4770      	bx	lr
 8003590:	e000ed00 	.word	0xe000ed00

08003594 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003594:	b480      	push	{r7}
 8003596:	b083      	sub	sp, #12
 8003598:	af00      	add	r7, sp, #0
 800359a:	4603      	mov	r3, r0
 800359c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800359e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	db0b      	blt.n	80035be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035a6:	79fb      	ldrb	r3, [r7, #7]
 80035a8:	f003 021f 	and.w	r2, r3, #31
 80035ac:	4907      	ldr	r1, [pc, #28]	; (80035cc <__NVIC_EnableIRQ+0x38>)
 80035ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035b2:	095b      	lsrs	r3, r3, #5
 80035b4:	2001      	movs	r0, #1
 80035b6:	fa00 f202 	lsl.w	r2, r0, r2
 80035ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80035be:	bf00      	nop
 80035c0:	370c      	adds	r7, #12
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr
 80035ca:	bf00      	nop
 80035cc:	e000e100 	.word	0xe000e100

080035d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b083      	sub	sp, #12
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	4603      	mov	r3, r0
 80035d8:	6039      	str	r1, [r7, #0]
 80035da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	db0a      	blt.n	80035fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	b2da      	uxtb	r2, r3
 80035e8:	490c      	ldr	r1, [pc, #48]	; (800361c <__NVIC_SetPriority+0x4c>)
 80035ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035ee:	0112      	lsls	r2, r2, #4
 80035f0:	b2d2      	uxtb	r2, r2
 80035f2:	440b      	add	r3, r1
 80035f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80035f8:	e00a      	b.n	8003610 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	b2da      	uxtb	r2, r3
 80035fe:	4908      	ldr	r1, [pc, #32]	; (8003620 <__NVIC_SetPriority+0x50>)
 8003600:	79fb      	ldrb	r3, [r7, #7]
 8003602:	f003 030f 	and.w	r3, r3, #15
 8003606:	3b04      	subs	r3, #4
 8003608:	0112      	lsls	r2, r2, #4
 800360a:	b2d2      	uxtb	r2, r2
 800360c:	440b      	add	r3, r1
 800360e:	761a      	strb	r2, [r3, #24]
}
 8003610:	bf00      	nop
 8003612:	370c      	adds	r7, #12
 8003614:	46bd      	mov	sp, r7
 8003616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361a:	4770      	bx	lr
 800361c:	e000e100 	.word	0xe000e100
 8003620:	e000ed00 	.word	0xe000ed00

08003624 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003624:	b480      	push	{r7}
 8003626:	b089      	sub	sp, #36	; 0x24
 8003628:	af00      	add	r7, sp, #0
 800362a:	60f8      	str	r0, [r7, #12]
 800362c:	60b9      	str	r1, [r7, #8]
 800362e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	f003 0307 	and.w	r3, r3, #7
 8003636:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003638:	69fb      	ldr	r3, [r7, #28]
 800363a:	f1c3 0307 	rsb	r3, r3, #7
 800363e:	2b04      	cmp	r3, #4
 8003640:	bf28      	it	cs
 8003642:	2304      	movcs	r3, #4
 8003644:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003646:	69fb      	ldr	r3, [r7, #28]
 8003648:	3304      	adds	r3, #4
 800364a:	2b06      	cmp	r3, #6
 800364c:	d902      	bls.n	8003654 <NVIC_EncodePriority+0x30>
 800364e:	69fb      	ldr	r3, [r7, #28]
 8003650:	3b03      	subs	r3, #3
 8003652:	e000      	b.n	8003656 <NVIC_EncodePriority+0x32>
 8003654:	2300      	movs	r3, #0
 8003656:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003658:	f04f 32ff 	mov.w	r2, #4294967295
 800365c:	69bb      	ldr	r3, [r7, #24]
 800365e:	fa02 f303 	lsl.w	r3, r2, r3
 8003662:	43da      	mvns	r2, r3
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	401a      	ands	r2, r3
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800366c:	f04f 31ff 	mov.w	r1, #4294967295
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	fa01 f303 	lsl.w	r3, r1, r3
 8003676:	43d9      	mvns	r1, r3
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800367c:	4313      	orrs	r3, r2
         );
}
 800367e:	4618      	mov	r0, r3
 8003680:	3724      	adds	r7, #36	; 0x24
 8003682:	46bd      	mov	sp, r7
 8003684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003688:	4770      	bx	lr
	...

0800368c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b082      	sub	sp, #8
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	3b01      	subs	r3, #1
 8003698:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800369c:	d301      	bcc.n	80036a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800369e:	2301      	movs	r3, #1
 80036a0:	e00f      	b.n	80036c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80036a2:	4a0a      	ldr	r2, [pc, #40]	; (80036cc <SysTick_Config+0x40>)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	3b01      	subs	r3, #1
 80036a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80036aa:	210f      	movs	r1, #15
 80036ac:	f04f 30ff 	mov.w	r0, #4294967295
 80036b0:	f7ff ff8e 	bl	80035d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80036b4:	4b05      	ldr	r3, [pc, #20]	; (80036cc <SysTick_Config+0x40>)
 80036b6:	2200      	movs	r2, #0
 80036b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80036ba:	4b04      	ldr	r3, [pc, #16]	; (80036cc <SysTick_Config+0x40>)
 80036bc:	2207      	movs	r2, #7
 80036be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80036c0:	2300      	movs	r3, #0
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3708      	adds	r7, #8
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	bf00      	nop
 80036cc:	e000e010 	.word	0xe000e010

080036d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b082      	sub	sp, #8
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80036d8:	6878      	ldr	r0, [r7, #4]
 80036da:	f7ff ff29 	bl	8003530 <__NVIC_SetPriorityGrouping>
}
 80036de:	bf00      	nop
 80036e0:	3708      	adds	r7, #8
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}

080036e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036e6:	b580      	push	{r7, lr}
 80036e8:	b086      	sub	sp, #24
 80036ea:	af00      	add	r7, sp, #0
 80036ec:	4603      	mov	r3, r0
 80036ee:	60b9      	str	r1, [r7, #8]
 80036f0:	607a      	str	r2, [r7, #4]
 80036f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80036f4:	2300      	movs	r3, #0
 80036f6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80036f8:	f7ff ff3e 	bl	8003578 <__NVIC_GetPriorityGrouping>
 80036fc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80036fe:	687a      	ldr	r2, [r7, #4]
 8003700:	68b9      	ldr	r1, [r7, #8]
 8003702:	6978      	ldr	r0, [r7, #20]
 8003704:	f7ff ff8e 	bl	8003624 <NVIC_EncodePriority>
 8003708:	4602      	mov	r2, r0
 800370a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800370e:	4611      	mov	r1, r2
 8003710:	4618      	mov	r0, r3
 8003712:	f7ff ff5d 	bl	80035d0 <__NVIC_SetPriority>
}
 8003716:	bf00      	nop
 8003718:	3718      	adds	r7, #24
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}

0800371e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800371e:	b580      	push	{r7, lr}
 8003720:	b082      	sub	sp, #8
 8003722:	af00      	add	r7, sp, #0
 8003724:	4603      	mov	r3, r0
 8003726:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003728:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800372c:	4618      	mov	r0, r3
 800372e:	f7ff ff31 	bl	8003594 <__NVIC_EnableIRQ>
}
 8003732:	bf00      	nop
 8003734:	3708      	adds	r7, #8
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}

0800373a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800373a:	b580      	push	{r7, lr}
 800373c:	b082      	sub	sp, #8
 800373e:	af00      	add	r7, sp, #0
 8003740:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f7ff ffa2 	bl	800368c <SysTick_Config>
 8003748:	4603      	mov	r3, r0
}
 800374a:	4618      	mov	r0, r3
 800374c:	3708      	adds	r7, #8
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}
	...

08003754 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003754:	b480      	push	{r7}
 8003756:	b085      	sub	sp, #20
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d101      	bne.n	8003766 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	e098      	b.n	8003898 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	461a      	mov	r2, r3
 800376c:	4b4d      	ldr	r3, [pc, #308]	; (80038a4 <HAL_DMA_Init+0x150>)
 800376e:	429a      	cmp	r2, r3
 8003770:	d80f      	bhi.n	8003792 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	461a      	mov	r2, r3
 8003778:	4b4b      	ldr	r3, [pc, #300]	; (80038a8 <HAL_DMA_Init+0x154>)
 800377a:	4413      	add	r3, r2
 800377c:	4a4b      	ldr	r2, [pc, #300]	; (80038ac <HAL_DMA_Init+0x158>)
 800377e:	fba2 2303 	umull	r2, r3, r2, r3
 8003782:	091b      	lsrs	r3, r3, #4
 8003784:	009a      	lsls	r2, r3, #2
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	4a48      	ldr	r2, [pc, #288]	; (80038b0 <HAL_DMA_Init+0x15c>)
 800378e:	641a      	str	r2, [r3, #64]	; 0x40
 8003790:	e00e      	b.n	80037b0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	461a      	mov	r2, r3
 8003798:	4b46      	ldr	r3, [pc, #280]	; (80038b4 <HAL_DMA_Init+0x160>)
 800379a:	4413      	add	r3, r2
 800379c:	4a43      	ldr	r2, [pc, #268]	; (80038ac <HAL_DMA_Init+0x158>)
 800379e:	fba2 2303 	umull	r2, r3, r2, r3
 80037a2:	091b      	lsrs	r3, r3, #4
 80037a4:	009a      	lsls	r2, r3, #2
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	4a42      	ldr	r2, [pc, #264]	; (80038b8 <HAL_DMA_Init+0x164>)
 80037ae:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2202      	movs	r2, #2
 80037b4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80037c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037ca:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80037d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	691b      	ldr	r3, [r3, #16]
 80037da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	699b      	ldr	r3, [r3, #24]
 80037e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037ec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6a1b      	ldr	r3, [r3, #32]
 80037f2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80037f4:	68fa      	ldr	r2, [r7, #12]
 80037f6:	4313      	orrs	r3, r2
 80037f8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	68fa      	ldr	r2, [r7, #12]
 8003800:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800380a:	d039      	beq.n	8003880 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003810:	4a27      	ldr	r2, [pc, #156]	; (80038b0 <HAL_DMA_Init+0x15c>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d11a      	bne.n	800384c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003816:	4b29      	ldr	r3, [pc, #164]	; (80038bc <HAL_DMA_Init+0x168>)
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800381e:	f003 031c 	and.w	r3, r3, #28
 8003822:	210f      	movs	r1, #15
 8003824:	fa01 f303 	lsl.w	r3, r1, r3
 8003828:	43db      	mvns	r3, r3
 800382a:	4924      	ldr	r1, [pc, #144]	; (80038bc <HAL_DMA_Init+0x168>)
 800382c:	4013      	ands	r3, r2
 800382e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003830:	4b22      	ldr	r3, [pc, #136]	; (80038bc <HAL_DMA_Init+0x168>)
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6859      	ldr	r1, [r3, #4]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800383c:	f003 031c 	and.w	r3, r3, #28
 8003840:	fa01 f303 	lsl.w	r3, r1, r3
 8003844:	491d      	ldr	r1, [pc, #116]	; (80038bc <HAL_DMA_Init+0x168>)
 8003846:	4313      	orrs	r3, r2
 8003848:	600b      	str	r3, [r1, #0]
 800384a:	e019      	b.n	8003880 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800384c:	4b1c      	ldr	r3, [pc, #112]	; (80038c0 <HAL_DMA_Init+0x16c>)
 800384e:	681a      	ldr	r2, [r3, #0]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003854:	f003 031c 	and.w	r3, r3, #28
 8003858:	210f      	movs	r1, #15
 800385a:	fa01 f303 	lsl.w	r3, r1, r3
 800385e:	43db      	mvns	r3, r3
 8003860:	4917      	ldr	r1, [pc, #92]	; (80038c0 <HAL_DMA_Init+0x16c>)
 8003862:	4013      	ands	r3, r2
 8003864:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003866:	4b16      	ldr	r3, [pc, #88]	; (80038c0 <HAL_DMA_Init+0x16c>)
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6859      	ldr	r1, [r3, #4]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003872:	f003 031c 	and.w	r3, r3, #28
 8003876:	fa01 f303 	lsl.w	r3, r1, r3
 800387a:	4911      	ldr	r1, [pc, #68]	; (80038c0 <HAL_DMA_Init+0x16c>)
 800387c:	4313      	orrs	r3, r2
 800387e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2200      	movs	r2, #0
 8003884:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2201      	movs	r2, #1
 800388a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2200      	movs	r2, #0
 8003892:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003896:	2300      	movs	r3, #0
}
 8003898:	4618      	mov	r0, r3
 800389a:	3714      	adds	r7, #20
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr
 80038a4:	40020407 	.word	0x40020407
 80038a8:	bffdfff8 	.word	0xbffdfff8
 80038ac:	cccccccd 	.word	0xcccccccd
 80038b0:	40020000 	.word	0x40020000
 80038b4:	bffdfbf8 	.word	0xbffdfbf8
 80038b8:	40020400 	.word	0x40020400
 80038bc:	400200a8 	.word	0x400200a8
 80038c0:	400204a8 	.word	0x400204a8

080038c4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b084      	sub	sp, #16
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038e0:	f003 031c 	and.w	r3, r3, #28
 80038e4:	2204      	movs	r2, #4
 80038e6:	409a      	lsls	r2, r3
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	4013      	ands	r3, r2
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d026      	beq.n	800393e <HAL_DMA_IRQHandler+0x7a>
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	f003 0304 	and.w	r3, r3, #4
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d021      	beq.n	800393e <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f003 0320 	and.w	r3, r3, #32
 8003904:	2b00      	cmp	r3, #0
 8003906:	d107      	bne.n	8003918 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f022 0204 	bic.w	r2, r2, #4
 8003916:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800391c:	f003 021c 	and.w	r2, r3, #28
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003924:	2104      	movs	r1, #4
 8003926:	fa01 f202 	lsl.w	r2, r1, r2
 800392a:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003930:	2b00      	cmp	r3, #0
 8003932:	d071      	beq.n	8003a18 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003938:	6878      	ldr	r0, [r7, #4]
 800393a:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800393c:	e06c      	b.n	8003a18 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003942:	f003 031c 	and.w	r3, r3, #28
 8003946:	2202      	movs	r2, #2
 8003948:	409a      	lsls	r2, r3
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	4013      	ands	r3, r2
 800394e:	2b00      	cmp	r3, #0
 8003950:	d02e      	beq.n	80039b0 <HAL_DMA_IRQHandler+0xec>
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	f003 0302 	and.w	r3, r3, #2
 8003958:	2b00      	cmp	r3, #0
 800395a:	d029      	beq.n	80039b0 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 0320 	and.w	r3, r3, #32
 8003966:	2b00      	cmp	r3, #0
 8003968:	d10b      	bne.n	8003982 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f022 020a 	bic.w	r2, r2, #10
 8003978:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2201      	movs	r2, #1
 800397e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003986:	f003 021c 	and.w	r2, r3, #28
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398e:	2102      	movs	r1, #2
 8003990:	fa01 f202 	lsl.w	r2, r1, r2
 8003994:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2200      	movs	r2, #0
 800399a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d038      	beq.n	8003a18 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80039ae:	e033      	b.n	8003a18 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039b4:	f003 031c 	and.w	r3, r3, #28
 80039b8:	2208      	movs	r2, #8
 80039ba:	409a      	lsls	r2, r3
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	4013      	ands	r3, r2
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d02a      	beq.n	8003a1a <HAL_DMA_IRQHandler+0x156>
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	f003 0308 	and.w	r3, r3, #8
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d025      	beq.n	8003a1a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f022 020e 	bic.w	r2, r2, #14
 80039dc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039e2:	f003 021c 	and.w	r2, r3, #28
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ea:	2101      	movs	r1, #1
 80039ec:	fa01 f202 	lsl.w	r2, r1, r2
 80039f0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2201      	movs	r2, #1
 80039f6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2201      	movs	r2, #1
 80039fc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2200      	movs	r2, #0
 8003a04:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d004      	beq.n	8003a1a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003a18:	bf00      	nop
 8003a1a:	bf00      	nop
}
 8003a1c:	3710      	adds	r7, #16
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}
	...

08003a24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b087      	sub	sp, #28
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
 8003a2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a32:	e154      	b.n	8003cde <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	2101      	movs	r1, #1
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	fa01 f303 	lsl.w	r3, r1, r3
 8003a40:	4013      	ands	r3, r2
 8003a42:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	f000 8146 	beq.w	8003cd8 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	d00b      	beq.n	8003a6c <HAL_GPIO_Init+0x48>
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	2b02      	cmp	r3, #2
 8003a5a:	d007      	beq.n	8003a6c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003a60:	2b11      	cmp	r3, #17
 8003a62:	d003      	beq.n	8003a6c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	2b12      	cmp	r3, #18
 8003a6a:	d130      	bne.n	8003ace <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	005b      	lsls	r3, r3, #1
 8003a76:	2203      	movs	r2, #3
 8003a78:	fa02 f303 	lsl.w	r3, r2, r3
 8003a7c:	43db      	mvns	r3, r3
 8003a7e:	693a      	ldr	r2, [r7, #16]
 8003a80:	4013      	ands	r3, r2
 8003a82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	68da      	ldr	r2, [r3, #12]
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	005b      	lsls	r3, r3, #1
 8003a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a90:	693a      	ldr	r2, [r7, #16]
 8003a92:	4313      	orrs	r3, r2
 8003a94:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	693a      	ldr	r2, [r7, #16]
 8003a9a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8003aaa:	43db      	mvns	r3, r3
 8003aac:	693a      	ldr	r2, [r7, #16]
 8003aae:	4013      	ands	r3, r2
 8003ab0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	091b      	lsrs	r3, r3, #4
 8003ab8:	f003 0201 	and.w	r2, r3, #1
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac2:	693a      	ldr	r2, [r7, #16]
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	693a      	ldr	r2, [r7, #16]
 8003acc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	68db      	ldr	r3, [r3, #12]
 8003ad2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	005b      	lsls	r3, r3, #1
 8003ad8:	2203      	movs	r2, #3
 8003ada:	fa02 f303 	lsl.w	r3, r2, r3
 8003ade:	43db      	mvns	r3, r3
 8003ae0:	693a      	ldr	r2, [r7, #16]
 8003ae2:	4013      	ands	r3, r2
 8003ae4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	689a      	ldr	r2, [r3, #8]
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	005b      	lsls	r3, r3, #1
 8003aee:	fa02 f303 	lsl.w	r3, r2, r3
 8003af2:	693a      	ldr	r2, [r7, #16]
 8003af4:	4313      	orrs	r3, r2
 8003af6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	693a      	ldr	r2, [r7, #16]
 8003afc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	2b02      	cmp	r3, #2
 8003b04:	d003      	beq.n	8003b0e <HAL_GPIO_Init+0xea>
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	2b12      	cmp	r3, #18
 8003b0c:	d123      	bne.n	8003b56 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	08da      	lsrs	r2, r3, #3
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	3208      	adds	r2, #8
 8003b16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b1a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	f003 0307 	and.w	r3, r3, #7
 8003b22:	009b      	lsls	r3, r3, #2
 8003b24:	220f      	movs	r2, #15
 8003b26:	fa02 f303 	lsl.w	r3, r2, r3
 8003b2a:	43db      	mvns	r3, r3
 8003b2c:	693a      	ldr	r2, [r7, #16]
 8003b2e:	4013      	ands	r3, r2
 8003b30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	691a      	ldr	r2, [r3, #16]
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	f003 0307 	and.w	r3, r3, #7
 8003b3c:	009b      	lsls	r3, r3, #2
 8003b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b42:	693a      	ldr	r2, [r7, #16]
 8003b44:	4313      	orrs	r3, r2
 8003b46:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	08da      	lsrs	r2, r3, #3
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	3208      	adds	r2, #8
 8003b50:	6939      	ldr	r1, [r7, #16]
 8003b52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	005b      	lsls	r3, r3, #1
 8003b60:	2203      	movs	r2, #3
 8003b62:	fa02 f303 	lsl.w	r3, r2, r3
 8003b66:	43db      	mvns	r3, r3
 8003b68:	693a      	ldr	r2, [r7, #16]
 8003b6a:	4013      	ands	r3, r2
 8003b6c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	f003 0203 	and.w	r2, r3, #3
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	005b      	lsls	r3, r3, #1
 8003b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b7e:	693a      	ldr	r2, [r7, #16]
 8003b80:	4313      	orrs	r3, r2
 8003b82:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	693a      	ldr	r2, [r7, #16]
 8003b88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	f000 80a0 	beq.w	8003cd8 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b98:	4b58      	ldr	r3, [pc, #352]	; (8003cfc <HAL_GPIO_Init+0x2d8>)
 8003b9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b9c:	4a57      	ldr	r2, [pc, #348]	; (8003cfc <HAL_GPIO_Init+0x2d8>)
 8003b9e:	f043 0301 	orr.w	r3, r3, #1
 8003ba2:	6613      	str	r3, [r2, #96]	; 0x60
 8003ba4:	4b55      	ldr	r3, [pc, #340]	; (8003cfc <HAL_GPIO_Init+0x2d8>)
 8003ba6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ba8:	f003 0301 	and.w	r3, r3, #1
 8003bac:	60bb      	str	r3, [r7, #8]
 8003bae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003bb0:	4a53      	ldr	r2, [pc, #332]	; (8003d00 <HAL_GPIO_Init+0x2dc>)
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	089b      	lsrs	r3, r3, #2
 8003bb6:	3302      	adds	r3, #2
 8003bb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bbc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	f003 0303 	and.w	r3, r3, #3
 8003bc4:	009b      	lsls	r3, r3, #2
 8003bc6:	220f      	movs	r2, #15
 8003bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bcc:	43db      	mvns	r3, r3
 8003bce:	693a      	ldr	r2, [r7, #16]
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003bda:	d019      	beq.n	8003c10 <HAL_GPIO_Init+0x1ec>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	4a49      	ldr	r2, [pc, #292]	; (8003d04 <HAL_GPIO_Init+0x2e0>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d013      	beq.n	8003c0c <HAL_GPIO_Init+0x1e8>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	4a48      	ldr	r2, [pc, #288]	; (8003d08 <HAL_GPIO_Init+0x2e4>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d00d      	beq.n	8003c08 <HAL_GPIO_Init+0x1e4>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	4a47      	ldr	r2, [pc, #284]	; (8003d0c <HAL_GPIO_Init+0x2e8>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d007      	beq.n	8003c04 <HAL_GPIO_Init+0x1e0>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	4a46      	ldr	r2, [pc, #280]	; (8003d10 <HAL_GPIO_Init+0x2ec>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d101      	bne.n	8003c00 <HAL_GPIO_Init+0x1dc>
 8003bfc:	2304      	movs	r3, #4
 8003bfe:	e008      	b.n	8003c12 <HAL_GPIO_Init+0x1ee>
 8003c00:	2307      	movs	r3, #7
 8003c02:	e006      	b.n	8003c12 <HAL_GPIO_Init+0x1ee>
 8003c04:	2303      	movs	r3, #3
 8003c06:	e004      	b.n	8003c12 <HAL_GPIO_Init+0x1ee>
 8003c08:	2302      	movs	r3, #2
 8003c0a:	e002      	b.n	8003c12 <HAL_GPIO_Init+0x1ee>
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	e000      	b.n	8003c12 <HAL_GPIO_Init+0x1ee>
 8003c10:	2300      	movs	r3, #0
 8003c12:	697a      	ldr	r2, [r7, #20]
 8003c14:	f002 0203 	and.w	r2, r2, #3
 8003c18:	0092      	lsls	r2, r2, #2
 8003c1a:	4093      	lsls	r3, r2
 8003c1c:	693a      	ldr	r2, [r7, #16]
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003c22:	4937      	ldr	r1, [pc, #220]	; (8003d00 <HAL_GPIO_Init+0x2dc>)
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	089b      	lsrs	r3, r3, #2
 8003c28:	3302      	adds	r3, #2
 8003c2a:	693a      	ldr	r2, [r7, #16]
 8003c2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003c30:	4b38      	ldr	r3, [pc, #224]	; (8003d14 <HAL_GPIO_Init+0x2f0>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	43db      	mvns	r3, r3
 8003c3a:	693a      	ldr	r2, [r7, #16]
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d003      	beq.n	8003c54 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8003c4c:	693a      	ldr	r2, [r7, #16]
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	4313      	orrs	r3, r2
 8003c52:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003c54:	4a2f      	ldr	r2, [pc, #188]	; (8003d14 <HAL_GPIO_Init+0x2f0>)
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8003c5a:	4b2e      	ldr	r3, [pc, #184]	; (8003d14 <HAL_GPIO_Init+0x2f0>)
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	43db      	mvns	r3, r3
 8003c64:	693a      	ldr	r2, [r7, #16]
 8003c66:	4013      	ands	r3, r2
 8003c68:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d003      	beq.n	8003c7e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8003c76:	693a      	ldr	r2, [r7, #16]
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003c7e:	4a25      	ldr	r2, [pc, #148]	; (8003d14 <HAL_GPIO_Init+0x2f0>)
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003c84:	4b23      	ldr	r3, [pc, #140]	; (8003d14 <HAL_GPIO_Init+0x2f0>)
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	43db      	mvns	r3, r3
 8003c8e:	693a      	ldr	r2, [r7, #16]
 8003c90:	4013      	ands	r3, r2
 8003c92:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d003      	beq.n	8003ca8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8003ca0:	693a      	ldr	r2, [r7, #16]
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003ca8:	4a1a      	ldr	r2, [pc, #104]	; (8003d14 <HAL_GPIO_Init+0x2f0>)
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003cae:	4b19      	ldr	r3, [pc, #100]	; (8003d14 <HAL_GPIO_Init+0x2f0>)
 8003cb0:	68db      	ldr	r3, [r3, #12]
 8003cb2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	43db      	mvns	r3, r3
 8003cb8:	693a      	ldr	r2, [r7, #16]
 8003cba:	4013      	ands	r3, r2
 8003cbc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d003      	beq.n	8003cd2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003cca:	693a      	ldr	r2, [r7, #16]
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003cd2:	4a10      	ldr	r2, [pc, #64]	; (8003d14 <HAL_GPIO_Init+0x2f0>)
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	3301      	adds	r3, #1
 8003cdc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	681a      	ldr	r2, [r3, #0]
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	fa22 f303 	lsr.w	r3, r2, r3
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	f47f aea3 	bne.w	8003a34 <HAL_GPIO_Init+0x10>
  }
}
 8003cee:	bf00      	nop
 8003cf0:	371c      	adds	r7, #28
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr
 8003cfa:	bf00      	nop
 8003cfc:	40021000 	.word	0x40021000
 8003d00:	40010000 	.word	0x40010000
 8003d04:	48000400 	.word	0x48000400
 8003d08:	48000800 	.word	0x48000800
 8003d0c:	48000c00 	.word	0x48000c00
 8003d10:	48001000 	.word	0x48001000
 8003d14:	40010400 	.word	0x40010400

08003d18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b083      	sub	sp, #12
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
 8003d20:	460b      	mov	r3, r1
 8003d22:	807b      	strh	r3, [r7, #2]
 8003d24:	4613      	mov	r3, r2
 8003d26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d28:	787b      	ldrb	r3, [r7, #1]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d003      	beq.n	8003d36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003d2e:	887a      	ldrh	r2, [r7, #2]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003d34:	e002      	b.n	8003d3c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003d36:	887a      	ldrh	r2, [r7, #2]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003d3c:	bf00      	nop
 8003d3e:	370c      	adds	r7, #12
 8003d40:	46bd      	mov	sp, r7
 8003d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d46:	4770      	bx	lr

08003d48 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b082      	sub	sp, #8
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d101      	bne.n	8003d5a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	e081      	b.n	8003e5e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d106      	bne.n	8003d74 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f7fd fc50 	bl	8001614 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2224      	movs	r2, #36	; 0x24
 8003d78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f022 0201 	bic.w	r2, r2, #1
 8003d8a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	685a      	ldr	r2, [r3, #4]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003d98:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	689a      	ldr	r2, [r3, #8]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003da8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	68db      	ldr	r3, [r3, #12]
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	d107      	bne.n	8003dc2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	689a      	ldr	r2, [r3, #8]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003dbe:	609a      	str	r2, [r3, #8]
 8003dc0:	e006      	b.n	8003dd0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	689a      	ldr	r2, [r3, #8]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003dce:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	68db      	ldr	r3, [r3, #12]
 8003dd4:	2b02      	cmp	r3, #2
 8003dd6:	d104      	bne.n	8003de2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003de0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	687a      	ldr	r2, [r7, #4]
 8003dea:	6812      	ldr	r2, [r2, #0]
 8003dec:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003df0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003df4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	68da      	ldr	r2, [r3, #12]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003e04:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	691a      	ldr	r2, [r3, #16]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	695b      	ldr	r3, [r3, #20]
 8003e0e:	ea42 0103 	orr.w	r1, r2, r3
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	699b      	ldr	r3, [r3, #24]
 8003e16:	021a      	lsls	r2, r3, #8
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	430a      	orrs	r2, r1
 8003e1e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	69d9      	ldr	r1, [r3, #28]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6a1a      	ldr	r2, [r3, #32]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	430a      	orrs	r2, r1
 8003e2e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	681a      	ldr	r2, [r3, #0]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f042 0201 	orr.w	r2, r2, #1
 8003e3e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2200      	movs	r2, #0
 8003e44:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2220      	movs	r2, #32
 8003e4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2200      	movs	r2, #0
 8003e52:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2200      	movs	r2, #0
 8003e58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003e5c:	2300      	movs	r3, #0
}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	3708      	adds	r7, #8
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}
	...

08003e68 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b088      	sub	sp, #32
 8003e6c:	af02      	add	r7, sp, #8
 8003e6e:	60f8      	str	r0, [r7, #12]
 8003e70:	607a      	str	r2, [r7, #4]
 8003e72:	461a      	mov	r2, r3
 8003e74:	460b      	mov	r3, r1
 8003e76:	817b      	strh	r3, [r7, #10]
 8003e78:	4613      	mov	r3, r2
 8003e7a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e82:	b2db      	uxtb	r3, r3
 8003e84:	2b20      	cmp	r3, #32
 8003e86:	f040 80da 	bne.w	800403e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	d101      	bne.n	8003e98 <HAL_I2C_Master_Transmit+0x30>
 8003e94:	2302      	movs	r3, #2
 8003e96:	e0d3      	b.n	8004040 <HAL_I2C_Master_Transmit+0x1d8>
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003ea0:	f7fd ffcc 	bl	8001e3c <HAL_GetTick>
 8003ea4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	9300      	str	r3, [sp, #0]
 8003eaa:	2319      	movs	r3, #25
 8003eac:	2201      	movs	r2, #1
 8003eae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003eb2:	68f8      	ldr	r0, [r7, #12]
 8003eb4:	f000 f8f0 	bl	8004098 <I2C_WaitOnFlagUntilTimeout>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d001      	beq.n	8003ec2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e0be      	b.n	8004040 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2221      	movs	r2, #33	; 0x21
 8003ec6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	2210      	movs	r2, #16
 8003ece:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	687a      	ldr	r2, [r7, #4]
 8003edc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	893a      	ldrh	r2, [r7, #8]
 8003ee2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eee:	b29b      	uxth	r3, r3
 8003ef0:	2bff      	cmp	r3, #255	; 0xff
 8003ef2:	d90e      	bls.n	8003f12 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	22ff      	movs	r2, #255	; 0xff
 8003ef8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003efe:	b2da      	uxtb	r2, r3
 8003f00:	8979      	ldrh	r1, [r7, #10]
 8003f02:	4b51      	ldr	r3, [pc, #324]	; (8004048 <HAL_I2C_Master_Transmit+0x1e0>)
 8003f04:	9300      	str	r3, [sp, #0]
 8003f06:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003f0a:	68f8      	ldr	r0, [r7, #12]
 8003f0c:	f000 f9e6 	bl	80042dc <I2C_TransferConfig>
 8003f10:	e06c      	b.n	8003fec <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f16:	b29a      	uxth	r2, r3
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f20:	b2da      	uxtb	r2, r3
 8003f22:	8979      	ldrh	r1, [r7, #10]
 8003f24:	4b48      	ldr	r3, [pc, #288]	; (8004048 <HAL_I2C_Master_Transmit+0x1e0>)
 8003f26:	9300      	str	r3, [sp, #0]
 8003f28:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003f2c:	68f8      	ldr	r0, [r7, #12]
 8003f2e:	f000 f9d5 	bl	80042dc <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8003f32:	e05b      	b.n	8003fec <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f34:	697a      	ldr	r2, [r7, #20]
 8003f36:	6a39      	ldr	r1, [r7, #32]
 8003f38:	68f8      	ldr	r0, [r7, #12]
 8003f3a:	f000 f8ed 	bl	8004118 <I2C_WaitOnTXISFlagUntilTimeout>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d001      	beq.n	8003f48 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8003f44:	2301      	movs	r3, #1
 8003f46:	e07b      	b.n	8004040 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f4c:	781a      	ldrb	r2, [r3, #0]
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f58:	1c5a      	adds	r2, r3, #1
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f62:	b29b      	uxth	r3, r3
 8003f64:	3b01      	subs	r3, #1
 8003f66:	b29a      	uxth	r2, r3
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f70:	3b01      	subs	r3, #1
 8003f72:	b29a      	uxth	r2, r3
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f7c:	b29b      	uxth	r3, r3
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d034      	beq.n	8003fec <HAL_I2C_Master_Transmit+0x184>
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d130      	bne.n	8003fec <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	9300      	str	r3, [sp, #0]
 8003f8e:	6a3b      	ldr	r3, [r7, #32]
 8003f90:	2200      	movs	r2, #0
 8003f92:	2180      	movs	r1, #128	; 0x80
 8003f94:	68f8      	ldr	r0, [r7, #12]
 8003f96:	f000 f87f 	bl	8004098 <I2C_WaitOnFlagUntilTimeout>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d001      	beq.n	8003fa4 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	e04d      	b.n	8004040 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fa8:	b29b      	uxth	r3, r3
 8003faa:	2bff      	cmp	r3, #255	; 0xff
 8003fac:	d90e      	bls.n	8003fcc <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	22ff      	movs	r2, #255	; 0xff
 8003fb2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fb8:	b2da      	uxtb	r2, r3
 8003fba:	8979      	ldrh	r1, [r7, #10]
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	9300      	str	r3, [sp, #0]
 8003fc0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003fc4:	68f8      	ldr	r0, [r7, #12]
 8003fc6:	f000 f989 	bl	80042dc <I2C_TransferConfig>
 8003fca:	e00f      	b.n	8003fec <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fd0:	b29a      	uxth	r2, r3
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fda:	b2da      	uxtb	r2, r3
 8003fdc:	8979      	ldrh	r1, [r7, #10]
 8003fde:	2300      	movs	r3, #0
 8003fe0:	9300      	str	r3, [sp, #0]
 8003fe2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003fe6:	68f8      	ldr	r0, [r7, #12]
 8003fe8:	f000 f978 	bl	80042dc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ff0:	b29b      	uxth	r3, r3
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d19e      	bne.n	8003f34 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ff6:	697a      	ldr	r2, [r7, #20]
 8003ff8:	6a39      	ldr	r1, [r7, #32]
 8003ffa:	68f8      	ldr	r0, [r7, #12]
 8003ffc:	f000 f8cc 	bl	8004198 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004000:	4603      	mov	r3, r0
 8004002:	2b00      	cmp	r3, #0
 8004004:	d001      	beq.n	800400a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	e01a      	b.n	8004040 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	2220      	movs	r2, #32
 8004010:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	6859      	ldr	r1, [r3, #4]
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	4b0b      	ldr	r3, [pc, #44]	; (800404c <HAL_I2C_Master_Transmit+0x1e4>)
 800401e:	400b      	ands	r3, r1
 8004020:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2220      	movs	r2, #32
 8004026:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2200      	movs	r2, #0
 800402e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2200      	movs	r2, #0
 8004036:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800403a:	2300      	movs	r3, #0
 800403c:	e000      	b.n	8004040 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800403e:	2302      	movs	r3, #2
  }
}
 8004040:	4618      	mov	r0, r3
 8004042:	3718      	adds	r7, #24
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}
 8004048:	80002000 	.word	0x80002000
 800404c:	fe00e800 	.word	0xfe00e800

08004050 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004050:	b480      	push	{r7}
 8004052:	b083      	sub	sp, #12
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	699b      	ldr	r3, [r3, #24]
 800405e:	f003 0302 	and.w	r3, r3, #2
 8004062:	2b02      	cmp	r3, #2
 8004064:	d103      	bne.n	800406e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	2200      	movs	r2, #0
 800406c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	699b      	ldr	r3, [r3, #24]
 8004074:	f003 0301 	and.w	r3, r3, #1
 8004078:	2b01      	cmp	r3, #1
 800407a:	d007      	beq.n	800408c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	699a      	ldr	r2, [r3, #24]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f042 0201 	orr.w	r2, r2, #1
 800408a:	619a      	str	r2, [r3, #24]
  }
}
 800408c:	bf00      	nop
 800408e:	370c      	adds	r7, #12
 8004090:	46bd      	mov	sp, r7
 8004092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004096:	4770      	bx	lr

08004098 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b084      	sub	sp, #16
 800409c:	af00      	add	r7, sp, #0
 800409e:	60f8      	str	r0, [r7, #12]
 80040a0:	60b9      	str	r1, [r7, #8]
 80040a2:	603b      	str	r3, [r7, #0]
 80040a4:	4613      	mov	r3, r2
 80040a6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80040a8:	e022      	b.n	80040f0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040b0:	d01e      	beq.n	80040f0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040b2:	f7fd fec3 	bl	8001e3c <HAL_GetTick>
 80040b6:	4602      	mov	r2, r0
 80040b8:	69bb      	ldr	r3, [r7, #24]
 80040ba:	1ad3      	subs	r3, r2, r3
 80040bc:	683a      	ldr	r2, [r7, #0]
 80040be:	429a      	cmp	r2, r3
 80040c0:	d302      	bcc.n	80040c8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d113      	bne.n	80040f0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040cc:	f043 0220 	orr.w	r2, r3, #32
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	2220      	movs	r2, #32
 80040d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2200      	movs	r2, #0
 80040e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2200      	movs	r2, #0
 80040e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80040ec:	2301      	movs	r3, #1
 80040ee:	e00f      	b.n	8004110 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	699a      	ldr	r2, [r3, #24]
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	4013      	ands	r3, r2
 80040fa:	68ba      	ldr	r2, [r7, #8]
 80040fc:	429a      	cmp	r2, r3
 80040fe:	bf0c      	ite	eq
 8004100:	2301      	moveq	r3, #1
 8004102:	2300      	movne	r3, #0
 8004104:	b2db      	uxtb	r3, r3
 8004106:	461a      	mov	r2, r3
 8004108:	79fb      	ldrb	r3, [r7, #7]
 800410a:	429a      	cmp	r2, r3
 800410c:	d0cd      	beq.n	80040aa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800410e:	2300      	movs	r3, #0
}
 8004110:	4618      	mov	r0, r3
 8004112:	3710      	adds	r7, #16
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}

08004118 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b084      	sub	sp, #16
 800411c:	af00      	add	r7, sp, #0
 800411e:	60f8      	str	r0, [r7, #12]
 8004120:	60b9      	str	r1, [r7, #8]
 8004122:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004124:	e02c      	b.n	8004180 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004126:	687a      	ldr	r2, [r7, #4]
 8004128:	68b9      	ldr	r1, [r7, #8]
 800412a:	68f8      	ldr	r0, [r7, #12]
 800412c:	f000 f870 	bl	8004210 <I2C_IsAcknowledgeFailed>
 8004130:	4603      	mov	r3, r0
 8004132:	2b00      	cmp	r3, #0
 8004134:	d001      	beq.n	800413a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	e02a      	b.n	8004190 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004140:	d01e      	beq.n	8004180 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004142:	f7fd fe7b 	bl	8001e3c <HAL_GetTick>
 8004146:	4602      	mov	r2, r0
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	1ad3      	subs	r3, r2, r3
 800414c:	68ba      	ldr	r2, [r7, #8]
 800414e:	429a      	cmp	r2, r3
 8004150:	d302      	bcc.n	8004158 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d113      	bne.n	8004180 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800415c:	f043 0220 	orr.w	r2, r3, #32
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2220      	movs	r2, #32
 8004168:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2200      	movs	r2, #0
 8004170:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2200      	movs	r2, #0
 8004178:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800417c:	2301      	movs	r3, #1
 800417e:	e007      	b.n	8004190 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	699b      	ldr	r3, [r3, #24]
 8004186:	f003 0302 	and.w	r3, r3, #2
 800418a:	2b02      	cmp	r3, #2
 800418c:	d1cb      	bne.n	8004126 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800418e:	2300      	movs	r3, #0
}
 8004190:	4618      	mov	r0, r3
 8004192:	3710      	adds	r7, #16
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}

08004198 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b084      	sub	sp, #16
 800419c:	af00      	add	r7, sp, #0
 800419e:	60f8      	str	r0, [r7, #12]
 80041a0:	60b9      	str	r1, [r7, #8]
 80041a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80041a4:	e028      	b.n	80041f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80041a6:	687a      	ldr	r2, [r7, #4]
 80041a8:	68b9      	ldr	r1, [r7, #8]
 80041aa:	68f8      	ldr	r0, [r7, #12]
 80041ac:	f000 f830 	bl	8004210 <I2C_IsAcknowledgeFailed>
 80041b0:	4603      	mov	r3, r0
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d001      	beq.n	80041ba <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	e026      	b.n	8004208 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041ba:	f7fd fe3f 	bl	8001e3c <HAL_GetTick>
 80041be:	4602      	mov	r2, r0
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	1ad3      	subs	r3, r2, r3
 80041c4:	68ba      	ldr	r2, [r7, #8]
 80041c6:	429a      	cmp	r2, r3
 80041c8:	d302      	bcc.n	80041d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d113      	bne.n	80041f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041d4:	f043 0220 	orr.w	r2, r3, #32
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2220      	movs	r2, #32
 80041e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2200      	movs	r2, #0
 80041e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	2200      	movs	r2, #0
 80041f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80041f4:	2301      	movs	r3, #1
 80041f6:	e007      	b.n	8004208 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	699b      	ldr	r3, [r3, #24]
 80041fe:	f003 0320 	and.w	r3, r3, #32
 8004202:	2b20      	cmp	r3, #32
 8004204:	d1cf      	bne.n	80041a6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004206:	2300      	movs	r3, #0
}
 8004208:	4618      	mov	r0, r3
 800420a:	3710      	adds	r7, #16
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}

08004210 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b084      	sub	sp, #16
 8004214:	af00      	add	r7, sp, #0
 8004216:	60f8      	str	r0, [r7, #12]
 8004218:	60b9      	str	r1, [r7, #8]
 800421a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	699b      	ldr	r3, [r3, #24]
 8004222:	f003 0310 	and.w	r3, r3, #16
 8004226:	2b10      	cmp	r3, #16
 8004228:	d151      	bne.n	80042ce <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800422a:	e022      	b.n	8004272 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004232:	d01e      	beq.n	8004272 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004234:	f7fd fe02 	bl	8001e3c <HAL_GetTick>
 8004238:	4602      	mov	r2, r0
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	1ad3      	subs	r3, r2, r3
 800423e:	68ba      	ldr	r2, [r7, #8]
 8004240:	429a      	cmp	r2, r3
 8004242:	d302      	bcc.n	800424a <I2C_IsAcknowledgeFailed+0x3a>
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d113      	bne.n	8004272 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800424e:	f043 0220 	orr.w	r2, r3, #32
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2220      	movs	r2, #32
 800425a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	2200      	movs	r2, #0
 8004262:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	2200      	movs	r2, #0
 800426a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	e02e      	b.n	80042d0 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	699b      	ldr	r3, [r3, #24]
 8004278:	f003 0320 	and.w	r3, r3, #32
 800427c:	2b20      	cmp	r3, #32
 800427e:	d1d5      	bne.n	800422c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	2210      	movs	r2, #16
 8004286:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	2220      	movs	r2, #32
 800428e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004290:	68f8      	ldr	r0, [r7, #12]
 8004292:	f7ff fedd 	bl	8004050 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	6859      	ldr	r1, [r3, #4]
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	4b0d      	ldr	r3, [pc, #52]	; (80042d8 <I2C_IsAcknowledgeFailed+0xc8>)
 80042a2:	400b      	ands	r3, r1
 80042a4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042aa:	f043 0204 	orr.w	r2, r3, #4
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2220      	movs	r2, #32
 80042b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	2200      	movs	r2, #0
 80042be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2200      	movs	r2, #0
 80042c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	e000      	b.n	80042d0 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80042ce:	2300      	movs	r3, #0
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	3710      	adds	r7, #16
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}
 80042d8:	fe00e800 	.word	0xfe00e800

080042dc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80042dc:	b480      	push	{r7}
 80042de:	b085      	sub	sp, #20
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	60f8      	str	r0, [r7, #12]
 80042e4:	607b      	str	r3, [r7, #4]
 80042e6:	460b      	mov	r3, r1
 80042e8:	817b      	strh	r3, [r7, #10]
 80042ea:	4613      	mov	r3, r2
 80042ec:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	685a      	ldr	r2, [r3, #4]
 80042f4:	69bb      	ldr	r3, [r7, #24]
 80042f6:	0d5b      	lsrs	r3, r3, #21
 80042f8:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80042fc:	4b0d      	ldr	r3, [pc, #52]	; (8004334 <I2C_TransferConfig+0x58>)
 80042fe:	430b      	orrs	r3, r1
 8004300:	43db      	mvns	r3, r3
 8004302:	ea02 0103 	and.w	r1, r2, r3
 8004306:	897b      	ldrh	r3, [r7, #10]
 8004308:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800430c:	7a7b      	ldrb	r3, [r7, #9]
 800430e:	041b      	lsls	r3, r3, #16
 8004310:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004314:	431a      	orrs	r2, r3
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	431a      	orrs	r2, r3
 800431a:	69bb      	ldr	r3, [r7, #24]
 800431c:	431a      	orrs	r2, r3
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	430a      	orrs	r2, r1
 8004324:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8004326:	bf00      	nop
 8004328:	3714      	adds	r7, #20
 800432a:	46bd      	mov	sp, r7
 800432c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004330:	4770      	bx	lr
 8004332:	bf00      	nop
 8004334:	03ff63ff 	.word	0x03ff63ff

08004338 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004338:	b480      	push	{r7}
 800433a:	b083      	sub	sp, #12
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
 8004340:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004348:	b2db      	uxtb	r3, r3
 800434a:	2b20      	cmp	r3, #32
 800434c:	d138      	bne.n	80043c0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004354:	2b01      	cmp	r3, #1
 8004356:	d101      	bne.n	800435c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004358:	2302      	movs	r3, #2
 800435a:	e032      	b.n	80043c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2201      	movs	r2, #1
 8004360:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2224      	movs	r2, #36	; 0x24
 8004368:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	681a      	ldr	r2, [r3, #0]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f022 0201 	bic.w	r2, r2, #1
 800437a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	681a      	ldr	r2, [r3, #0]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800438a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	6819      	ldr	r1, [r3, #0]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	683a      	ldr	r2, [r7, #0]
 8004398:	430a      	orrs	r2, r1
 800439a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f042 0201 	orr.w	r2, r2, #1
 80043aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2220      	movs	r2, #32
 80043b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2200      	movs	r2, #0
 80043b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80043bc:	2300      	movs	r3, #0
 80043be:	e000      	b.n	80043c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80043c0:	2302      	movs	r3, #2
  }
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	370c      	adds	r7, #12
 80043c6:	46bd      	mov	sp, r7
 80043c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043cc:	4770      	bx	lr

080043ce <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80043ce:	b480      	push	{r7}
 80043d0:	b085      	sub	sp, #20
 80043d2:	af00      	add	r7, sp, #0
 80043d4:	6078      	str	r0, [r7, #4]
 80043d6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043de:	b2db      	uxtb	r3, r3
 80043e0:	2b20      	cmp	r3, #32
 80043e2:	d139      	bne.n	8004458 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80043ea:	2b01      	cmp	r3, #1
 80043ec:	d101      	bne.n	80043f2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80043ee:	2302      	movs	r3, #2
 80043f0:	e033      	b.n	800445a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2201      	movs	r2, #1
 80043f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2224      	movs	r2, #36	; 0x24
 80043fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	681a      	ldr	r2, [r3, #0]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f022 0201 	bic.w	r2, r2, #1
 8004410:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004420:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	021b      	lsls	r3, r3, #8
 8004426:	68fa      	ldr	r2, [r7, #12]
 8004428:	4313      	orrs	r3, r2
 800442a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	68fa      	ldr	r2, [r7, #12]
 8004432:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	681a      	ldr	r2, [r3, #0]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f042 0201 	orr.w	r2, r2, #1
 8004442:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2220      	movs	r2, #32
 8004448:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2200      	movs	r2, #0
 8004450:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004454:	2300      	movs	r3, #0
 8004456:	e000      	b.n	800445a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004458:	2302      	movs	r3, #2
  }
}
 800445a:	4618      	mov	r0, r3
 800445c:	3714      	adds	r7, #20
 800445e:	46bd      	mov	sp, r7
 8004460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004464:	4770      	bx	lr
	...

08004468 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004468:	b480      	push	{r7}
 800446a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800446c:	4b04      	ldr	r3, [pc, #16]	; (8004480 <HAL_PWREx_GetVoltageRange+0x18>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004474:	4618      	mov	r0, r3
 8004476:	46bd      	mov	sp, r7
 8004478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447c:	4770      	bx	lr
 800447e:	bf00      	nop
 8004480:	40007000 	.word	0x40007000

08004484 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004484:	b480      	push	{r7}
 8004486:	b085      	sub	sp, #20
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004492:	d130      	bne.n	80044f6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004494:	4b23      	ldr	r3, [pc, #140]	; (8004524 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800449c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044a0:	d038      	beq.n	8004514 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80044a2:	4b20      	ldr	r3, [pc, #128]	; (8004524 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80044aa:	4a1e      	ldr	r2, [pc, #120]	; (8004524 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80044ac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80044b0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80044b2:	4b1d      	ldr	r3, [pc, #116]	; (8004528 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	2232      	movs	r2, #50	; 0x32
 80044b8:	fb02 f303 	mul.w	r3, r2, r3
 80044bc:	4a1b      	ldr	r2, [pc, #108]	; (800452c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80044be:	fba2 2303 	umull	r2, r3, r2, r3
 80044c2:	0c9b      	lsrs	r3, r3, #18
 80044c4:	3301      	adds	r3, #1
 80044c6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80044c8:	e002      	b.n	80044d0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	3b01      	subs	r3, #1
 80044ce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80044d0:	4b14      	ldr	r3, [pc, #80]	; (8004524 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80044d2:	695b      	ldr	r3, [r3, #20]
 80044d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044dc:	d102      	bne.n	80044e4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d1f2      	bne.n	80044ca <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80044e4:	4b0f      	ldr	r3, [pc, #60]	; (8004524 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80044e6:	695b      	ldr	r3, [r3, #20]
 80044e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044f0:	d110      	bne.n	8004514 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80044f2:	2303      	movs	r3, #3
 80044f4:	e00f      	b.n	8004516 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80044f6:	4b0b      	ldr	r3, [pc, #44]	; (8004524 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80044fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004502:	d007      	beq.n	8004514 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004504:	4b07      	ldr	r3, [pc, #28]	; (8004524 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800450c:	4a05      	ldr	r2, [pc, #20]	; (8004524 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800450e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004512:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004514:	2300      	movs	r3, #0
}
 8004516:	4618      	mov	r0, r3
 8004518:	3714      	adds	r7, #20
 800451a:	46bd      	mov	sp, r7
 800451c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004520:	4770      	bx	lr
 8004522:	bf00      	nop
 8004524:	40007000 	.word	0x40007000
 8004528:	20000000 	.word	0x20000000
 800452c:	431bde83 	.word	0x431bde83

08004530 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b088      	sub	sp, #32
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d102      	bne.n	8004544 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	f000 bc11 	b.w	8004d66 <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004544:	4ba0      	ldr	r3, [pc, #640]	; (80047c8 <HAL_RCC_OscConfig+0x298>)
 8004546:	689b      	ldr	r3, [r3, #8]
 8004548:	f003 030c 	and.w	r3, r3, #12
 800454c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800454e:	4b9e      	ldr	r3, [pc, #632]	; (80047c8 <HAL_RCC_OscConfig+0x298>)
 8004550:	68db      	ldr	r3, [r3, #12]
 8004552:	f003 0303 	and.w	r3, r3, #3
 8004556:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f003 0310 	and.w	r3, r3, #16
 8004560:	2b00      	cmp	r3, #0
 8004562:	f000 80e4 	beq.w	800472e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004566:	69bb      	ldr	r3, [r7, #24]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d007      	beq.n	800457c <HAL_RCC_OscConfig+0x4c>
 800456c:	69bb      	ldr	r3, [r7, #24]
 800456e:	2b0c      	cmp	r3, #12
 8004570:	f040 808b 	bne.w	800468a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	2b01      	cmp	r3, #1
 8004578:	f040 8087 	bne.w	800468a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800457c:	4b92      	ldr	r3, [pc, #584]	; (80047c8 <HAL_RCC_OscConfig+0x298>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f003 0302 	and.w	r3, r3, #2
 8004584:	2b00      	cmp	r3, #0
 8004586:	d005      	beq.n	8004594 <HAL_RCC_OscConfig+0x64>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	699b      	ldr	r3, [r3, #24]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d101      	bne.n	8004594 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004590:	2301      	movs	r3, #1
 8004592:	e3e8      	b.n	8004d66 <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6a1a      	ldr	r2, [r3, #32]
 8004598:	4b8b      	ldr	r3, [pc, #556]	; (80047c8 <HAL_RCC_OscConfig+0x298>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f003 0308 	and.w	r3, r3, #8
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d004      	beq.n	80045ae <HAL_RCC_OscConfig+0x7e>
 80045a4:	4b88      	ldr	r3, [pc, #544]	; (80047c8 <HAL_RCC_OscConfig+0x298>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80045ac:	e005      	b.n	80045ba <HAL_RCC_OscConfig+0x8a>
 80045ae:	4b86      	ldr	r3, [pc, #536]	; (80047c8 <HAL_RCC_OscConfig+0x298>)
 80045b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045b4:	091b      	lsrs	r3, r3, #4
 80045b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d223      	bcs.n	8004606 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6a1b      	ldr	r3, [r3, #32]
 80045c2:	4618      	mov	r0, r3
 80045c4:	f000 fd78 	bl	80050b8 <RCC_SetFlashLatencyFromMSIRange>
 80045c8:	4603      	mov	r3, r0
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d001      	beq.n	80045d2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	e3c9      	b.n	8004d66 <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80045d2:	4b7d      	ldr	r3, [pc, #500]	; (80047c8 <HAL_RCC_OscConfig+0x298>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a7c      	ldr	r2, [pc, #496]	; (80047c8 <HAL_RCC_OscConfig+0x298>)
 80045d8:	f043 0308 	orr.w	r3, r3, #8
 80045dc:	6013      	str	r3, [r2, #0]
 80045de:	4b7a      	ldr	r3, [pc, #488]	; (80047c8 <HAL_RCC_OscConfig+0x298>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6a1b      	ldr	r3, [r3, #32]
 80045ea:	4977      	ldr	r1, [pc, #476]	; (80047c8 <HAL_RCC_OscConfig+0x298>)
 80045ec:	4313      	orrs	r3, r2
 80045ee:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80045f0:	4b75      	ldr	r3, [pc, #468]	; (80047c8 <HAL_RCC_OscConfig+0x298>)
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	69db      	ldr	r3, [r3, #28]
 80045fc:	021b      	lsls	r3, r3, #8
 80045fe:	4972      	ldr	r1, [pc, #456]	; (80047c8 <HAL_RCC_OscConfig+0x298>)
 8004600:	4313      	orrs	r3, r2
 8004602:	604b      	str	r3, [r1, #4]
 8004604:	e025      	b.n	8004652 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004606:	4b70      	ldr	r3, [pc, #448]	; (80047c8 <HAL_RCC_OscConfig+0x298>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a6f      	ldr	r2, [pc, #444]	; (80047c8 <HAL_RCC_OscConfig+0x298>)
 800460c:	f043 0308 	orr.w	r3, r3, #8
 8004610:	6013      	str	r3, [r2, #0]
 8004612:	4b6d      	ldr	r3, [pc, #436]	; (80047c8 <HAL_RCC_OscConfig+0x298>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6a1b      	ldr	r3, [r3, #32]
 800461e:	496a      	ldr	r1, [pc, #424]	; (80047c8 <HAL_RCC_OscConfig+0x298>)
 8004620:	4313      	orrs	r3, r2
 8004622:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004624:	4b68      	ldr	r3, [pc, #416]	; (80047c8 <HAL_RCC_OscConfig+0x298>)
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	69db      	ldr	r3, [r3, #28]
 8004630:	021b      	lsls	r3, r3, #8
 8004632:	4965      	ldr	r1, [pc, #404]	; (80047c8 <HAL_RCC_OscConfig+0x298>)
 8004634:	4313      	orrs	r3, r2
 8004636:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004638:	69bb      	ldr	r3, [r7, #24]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d109      	bne.n	8004652 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6a1b      	ldr	r3, [r3, #32]
 8004642:	4618      	mov	r0, r3
 8004644:	f000 fd38 	bl	80050b8 <RCC_SetFlashLatencyFromMSIRange>
 8004648:	4603      	mov	r3, r0
 800464a:	2b00      	cmp	r3, #0
 800464c:	d001      	beq.n	8004652 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	e389      	b.n	8004d66 <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004652:	f000 fc6f 	bl	8004f34 <HAL_RCC_GetSysClockFreq>
 8004656:	4601      	mov	r1, r0
 8004658:	4b5b      	ldr	r3, [pc, #364]	; (80047c8 <HAL_RCC_OscConfig+0x298>)
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	091b      	lsrs	r3, r3, #4
 800465e:	f003 030f 	and.w	r3, r3, #15
 8004662:	4a5a      	ldr	r2, [pc, #360]	; (80047cc <HAL_RCC_OscConfig+0x29c>)
 8004664:	5cd3      	ldrb	r3, [r2, r3]
 8004666:	f003 031f 	and.w	r3, r3, #31
 800466a:	fa21 f303 	lsr.w	r3, r1, r3
 800466e:	4a58      	ldr	r2, [pc, #352]	; (80047d0 <HAL_RCC_OscConfig+0x2a0>)
 8004670:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004672:	4b58      	ldr	r3, [pc, #352]	; (80047d4 <HAL_RCC_OscConfig+0x2a4>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4618      	mov	r0, r3
 8004678:	f7fd fb94 	bl	8001da4 <HAL_InitTick>
 800467c:	4603      	mov	r3, r0
 800467e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004680:	7bfb      	ldrb	r3, [r7, #15]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d052      	beq.n	800472c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004686:	7bfb      	ldrb	r3, [r7, #15]
 8004688:	e36d      	b.n	8004d66 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	699b      	ldr	r3, [r3, #24]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d032      	beq.n	80046f8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004692:	4b4d      	ldr	r3, [pc, #308]	; (80047c8 <HAL_RCC_OscConfig+0x298>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a4c      	ldr	r2, [pc, #304]	; (80047c8 <HAL_RCC_OscConfig+0x298>)
 8004698:	f043 0301 	orr.w	r3, r3, #1
 800469c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800469e:	f7fd fbcd 	bl	8001e3c <HAL_GetTick>
 80046a2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80046a4:	e008      	b.n	80046b8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80046a6:	f7fd fbc9 	bl	8001e3c <HAL_GetTick>
 80046aa:	4602      	mov	r2, r0
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	1ad3      	subs	r3, r2, r3
 80046b0:	2b02      	cmp	r3, #2
 80046b2:	d901      	bls.n	80046b8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80046b4:	2303      	movs	r3, #3
 80046b6:	e356      	b.n	8004d66 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80046b8:	4b43      	ldr	r3, [pc, #268]	; (80047c8 <HAL_RCC_OscConfig+0x298>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f003 0302 	and.w	r3, r3, #2
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d0f0      	beq.n	80046a6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80046c4:	4b40      	ldr	r3, [pc, #256]	; (80047c8 <HAL_RCC_OscConfig+0x298>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a3f      	ldr	r2, [pc, #252]	; (80047c8 <HAL_RCC_OscConfig+0x298>)
 80046ca:	f043 0308 	orr.w	r3, r3, #8
 80046ce:	6013      	str	r3, [r2, #0]
 80046d0:	4b3d      	ldr	r3, [pc, #244]	; (80047c8 <HAL_RCC_OscConfig+0x298>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6a1b      	ldr	r3, [r3, #32]
 80046dc:	493a      	ldr	r1, [pc, #232]	; (80047c8 <HAL_RCC_OscConfig+0x298>)
 80046de:	4313      	orrs	r3, r2
 80046e0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80046e2:	4b39      	ldr	r3, [pc, #228]	; (80047c8 <HAL_RCC_OscConfig+0x298>)
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	69db      	ldr	r3, [r3, #28]
 80046ee:	021b      	lsls	r3, r3, #8
 80046f0:	4935      	ldr	r1, [pc, #212]	; (80047c8 <HAL_RCC_OscConfig+0x298>)
 80046f2:	4313      	orrs	r3, r2
 80046f4:	604b      	str	r3, [r1, #4]
 80046f6:	e01a      	b.n	800472e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80046f8:	4b33      	ldr	r3, [pc, #204]	; (80047c8 <HAL_RCC_OscConfig+0x298>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a32      	ldr	r2, [pc, #200]	; (80047c8 <HAL_RCC_OscConfig+0x298>)
 80046fe:	f023 0301 	bic.w	r3, r3, #1
 8004702:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004704:	f7fd fb9a 	bl	8001e3c <HAL_GetTick>
 8004708:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800470a:	e008      	b.n	800471e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800470c:	f7fd fb96 	bl	8001e3c <HAL_GetTick>
 8004710:	4602      	mov	r2, r0
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	1ad3      	subs	r3, r2, r3
 8004716:	2b02      	cmp	r3, #2
 8004718:	d901      	bls.n	800471e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800471a:	2303      	movs	r3, #3
 800471c:	e323      	b.n	8004d66 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800471e:	4b2a      	ldr	r3, [pc, #168]	; (80047c8 <HAL_RCC_OscConfig+0x298>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f003 0302 	and.w	r3, r3, #2
 8004726:	2b00      	cmp	r3, #0
 8004728:	d1f0      	bne.n	800470c <HAL_RCC_OscConfig+0x1dc>
 800472a:	e000      	b.n	800472e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800472c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f003 0301 	and.w	r3, r3, #1
 8004736:	2b00      	cmp	r3, #0
 8004738:	d073      	beq.n	8004822 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800473a:	69bb      	ldr	r3, [r7, #24]
 800473c:	2b08      	cmp	r3, #8
 800473e:	d005      	beq.n	800474c <HAL_RCC_OscConfig+0x21c>
 8004740:	69bb      	ldr	r3, [r7, #24]
 8004742:	2b0c      	cmp	r3, #12
 8004744:	d10e      	bne.n	8004764 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	2b03      	cmp	r3, #3
 800474a:	d10b      	bne.n	8004764 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800474c:	4b1e      	ldr	r3, [pc, #120]	; (80047c8 <HAL_RCC_OscConfig+0x298>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004754:	2b00      	cmp	r3, #0
 8004756:	d063      	beq.n	8004820 <HAL_RCC_OscConfig+0x2f0>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d15f      	bne.n	8004820 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004760:	2301      	movs	r3, #1
 8004762:	e300      	b.n	8004d66 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800476c:	d106      	bne.n	800477c <HAL_RCC_OscConfig+0x24c>
 800476e:	4b16      	ldr	r3, [pc, #88]	; (80047c8 <HAL_RCC_OscConfig+0x298>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a15      	ldr	r2, [pc, #84]	; (80047c8 <HAL_RCC_OscConfig+0x298>)
 8004774:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004778:	6013      	str	r3, [r2, #0]
 800477a:	e01d      	b.n	80047b8 <HAL_RCC_OscConfig+0x288>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004784:	d10c      	bne.n	80047a0 <HAL_RCC_OscConfig+0x270>
 8004786:	4b10      	ldr	r3, [pc, #64]	; (80047c8 <HAL_RCC_OscConfig+0x298>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a0f      	ldr	r2, [pc, #60]	; (80047c8 <HAL_RCC_OscConfig+0x298>)
 800478c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004790:	6013      	str	r3, [r2, #0]
 8004792:	4b0d      	ldr	r3, [pc, #52]	; (80047c8 <HAL_RCC_OscConfig+0x298>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a0c      	ldr	r2, [pc, #48]	; (80047c8 <HAL_RCC_OscConfig+0x298>)
 8004798:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800479c:	6013      	str	r3, [r2, #0]
 800479e:	e00b      	b.n	80047b8 <HAL_RCC_OscConfig+0x288>
 80047a0:	4b09      	ldr	r3, [pc, #36]	; (80047c8 <HAL_RCC_OscConfig+0x298>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a08      	ldr	r2, [pc, #32]	; (80047c8 <HAL_RCC_OscConfig+0x298>)
 80047a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047aa:	6013      	str	r3, [r2, #0]
 80047ac:	4b06      	ldr	r3, [pc, #24]	; (80047c8 <HAL_RCC_OscConfig+0x298>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a05      	ldr	r2, [pc, #20]	; (80047c8 <HAL_RCC_OscConfig+0x298>)
 80047b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80047b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d01b      	beq.n	80047f8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047c0:	f7fd fb3c 	bl	8001e3c <HAL_GetTick>
 80047c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80047c6:	e010      	b.n	80047ea <HAL_RCC_OscConfig+0x2ba>
 80047c8:	40021000 	.word	0x40021000
 80047cc:	08007898 	.word	0x08007898
 80047d0:	20000000 	.word	0x20000000
 80047d4:	2000000c 	.word	0x2000000c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047d8:	f7fd fb30 	bl	8001e3c <HAL_GetTick>
 80047dc:	4602      	mov	r2, r0
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	1ad3      	subs	r3, r2, r3
 80047e2:	2b64      	cmp	r3, #100	; 0x64
 80047e4:	d901      	bls.n	80047ea <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80047e6:	2303      	movs	r3, #3
 80047e8:	e2bd      	b.n	8004d66 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80047ea:	4baf      	ldr	r3, [pc, #700]	; (8004aa8 <HAL_RCC_OscConfig+0x578>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d0f0      	beq.n	80047d8 <HAL_RCC_OscConfig+0x2a8>
 80047f6:	e014      	b.n	8004822 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047f8:	f7fd fb20 	bl	8001e3c <HAL_GetTick>
 80047fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80047fe:	e008      	b.n	8004812 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004800:	f7fd fb1c 	bl	8001e3c <HAL_GetTick>
 8004804:	4602      	mov	r2, r0
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	1ad3      	subs	r3, r2, r3
 800480a:	2b64      	cmp	r3, #100	; 0x64
 800480c:	d901      	bls.n	8004812 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800480e:	2303      	movs	r3, #3
 8004810:	e2a9      	b.n	8004d66 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004812:	4ba5      	ldr	r3, [pc, #660]	; (8004aa8 <HAL_RCC_OscConfig+0x578>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800481a:	2b00      	cmp	r3, #0
 800481c:	d1f0      	bne.n	8004800 <HAL_RCC_OscConfig+0x2d0>
 800481e:	e000      	b.n	8004822 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004820:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f003 0302 	and.w	r3, r3, #2
 800482a:	2b00      	cmp	r3, #0
 800482c:	d060      	beq.n	80048f0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800482e:	69bb      	ldr	r3, [r7, #24]
 8004830:	2b04      	cmp	r3, #4
 8004832:	d005      	beq.n	8004840 <HAL_RCC_OscConfig+0x310>
 8004834:	69bb      	ldr	r3, [r7, #24]
 8004836:	2b0c      	cmp	r3, #12
 8004838:	d119      	bne.n	800486e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	2b02      	cmp	r3, #2
 800483e:	d116      	bne.n	800486e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004840:	4b99      	ldr	r3, [pc, #612]	; (8004aa8 <HAL_RCC_OscConfig+0x578>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004848:	2b00      	cmp	r3, #0
 800484a:	d005      	beq.n	8004858 <HAL_RCC_OscConfig+0x328>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	68db      	ldr	r3, [r3, #12]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d101      	bne.n	8004858 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004854:	2301      	movs	r3, #1
 8004856:	e286      	b.n	8004d66 <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004858:	4b93      	ldr	r3, [pc, #588]	; (8004aa8 <HAL_RCC_OscConfig+0x578>)
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	691b      	ldr	r3, [r3, #16]
 8004864:	061b      	lsls	r3, r3, #24
 8004866:	4990      	ldr	r1, [pc, #576]	; (8004aa8 <HAL_RCC_OscConfig+0x578>)
 8004868:	4313      	orrs	r3, r2
 800486a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800486c:	e040      	b.n	80048f0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	68db      	ldr	r3, [r3, #12]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d023      	beq.n	80048be <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004876:	4b8c      	ldr	r3, [pc, #560]	; (8004aa8 <HAL_RCC_OscConfig+0x578>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a8b      	ldr	r2, [pc, #556]	; (8004aa8 <HAL_RCC_OscConfig+0x578>)
 800487c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004880:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004882:	f7fd fadb 	bl	8001e3c <HAL_GetTick>
 8004886:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004888:	e008      	b.n	800489c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800488a:	f7fd fad7 	bl	8001e3c <HAL_GetTick>
 800488e:	4602      	mov	r2, r0
 8004890:	693b      	ldr	r3, [r7, #16]
 8004892:	1ad3      	subs	r3, r2, r3
 8004894:	2b02      	cmp	r3, #2
 8004896:	d901      	bls.n	800489c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004898:	2303      	movs	r3, #3
 800489a:	e264      	b.n	8004d66 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800489c:	4b82      	ldr	r3, [pc, #520]	; (8004aa8 <HAL_RCC_OscConfig+0x578>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d0f0      	beq.n	800488a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048a8:	4b7f      	ldr	r3, [pc, #508]	; (8004aa8 <HAL_RCC_OscConfig+0x578>)
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	691b      	ldr	r3, [r3, #16]
 80048b4:	061b      	lsls	r3, r3, #24
 80048b6:	497c      	ldr	r1, [pc, #496]	; (8004aa8 <HAL_RCC_OscConfig+0x578>)
 80048b8:	4313      	orrs	r3, r2
 80048ba:	604b      	str	r3, [r1, #4]
 80048bc:	e018      	b.n	80048f0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80048be:	4b7a      	ldr	r3, [pc, #488]	; (8004aa8 <HAL_RCC_OscConfig+0x578>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a79      	ldr	r2, [pc, #484]	; (8004aa8 <HAL_RCC_OscConfig+0x578>)
 80048c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80048c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048ca:	f7fd fab7 	bl	8001e3c <HAL_GetTick>
 80048ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80048d0:	e008      	b.n	80048e4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048d2:	f7fd fab3 	bl	8001e3c <HAL_GetTick>
 80048d6:	4602      	mov	r2, r0
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	1ad3      	subs	r3, r2, r3
 80048dc:	2b02      	cmp	r3, #2
 80048de:	d901      	bls.n	80048e4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80048e0:	2303      	movs	r3, #3
 80048e2:	e240      	b.n	8004d66 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80048e4:	4b70      	ldr	r3, [pc, #448]	; (8004aa8 <HAL_RCC_OscConfig+0x578>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d1f0      	bne.n	80048d2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f003 0308 	and.w	r3, r3, #8
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d03c      	beq.n	8004976 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	695b      	ldr	r3, [r3, #20]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d01c      	beq.n	800493e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004904:	4b68      	ldr	r3, [pc, #416]	; (8004aa8 <HAL_RCC_OscConfig+0x578>)
 8004906:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800490a:	4a67      	ldr	r2, [pc, #412]	; (8004aa8 <HAL_RCC_OscConfig+0x578>)
 800490c:	f043 0301 	orr.w	r3, r3, #1
 8004910:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004914:	f7fd fa92 	bl	8001e3c <HAL_GetTick>
 8004918:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800491a:	e008      	b.n	800492e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800491c:	f7fd fa8e 	bl	8001e3c <HAL_GetTick>
 8004920:	4602      	mov	r2, r0
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	1ad3      	subs	r3, r2, r3
 8004926:	2b02      	cmp	r3, #2
 8004928:	d901      	bls.n	800492e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800492a:	2303      	movs	r3, #3
 800492c:	e21b      	b.n	8004d66 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800492e:	4b5e      	ldr	r3, [pc, #376]	; (8004aa8 <HAL_RCC_OscConfig+0x578>)
 8004930:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004934:	f003 0302 	and.w	r3, r3, #2
 8004938:	2b00      	cmp	r3, #0
 800493a:	d0ef      	beq.n	800491c <HAL_RCC_OscConfig+0x3ec>
 800493c:	e01b      	b.n	8004976 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800493e:	4b5a      	ldr	r3, [pc, #360]	; (8004aa8 <HAL_RCC_OscConfig+0x578>)
 8004940:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004944:	4a58      	ldr	r2, [pc, #352]	; (8004aa8 <HAL_RCC_OscConfig+0x578>)
 8004946:	f023 0301 	bic.w	r3, r3, #1
 800494a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800494e:	f7fd fa75 	bl	8001e3c <HAL_GetTick>
 8004952:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004954:	e008      	b.n	8004968 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004956:	f7fd fa71 	bl	8001e3c <HAL_GetTick>
 800495a:	4602      	mov	r2, r0
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	1ad3      	subs	r3, r2, r3
 8004960:	2b02      	cmp	r3, #2
 8004962:	d901      	bls.n	8004968 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004964:	2303      	movs	r3, #3
 8004966:	e1fe      	b.n	8004d66 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004968:	4b4f      	ldr	r3, [pc, #316]	; (8004aa8 <HAL_RCC_OscConfig+0x578>)
 800496a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800496e:	f003 0302 	and.w	r3, r3, #2
 8004972:	2b00      	cmp	r3, #0
 8004974:	d1ef      	bne.n	8004956 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f003 0304 	and.w	r3, r3, #4
 800497e:	2b00      	cmp	r3, #0
 8004980:	f000 80a6 	beq.w	8004ad0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004984:	2300      	movs	r3, #0
 8004986:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004988:	4b47      	ldr	r3, [pc, #284]	; (8004aa8 <HAL_RCC_OscConfig+0x578>)
 800498a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800498c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004990:	2b00      	cmp	r3, #0
 8004992:	d10d      	bne.n	80049b0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004994:	4b44      	ldr	r3, [pc, #272]	; (8004aa8 <HAL_RCC_OscConfig+0x578>)
 8004996:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004998:	4a43      	ldr	r2, [pc, #268]	; (8004aa8 <HAL_RCC_OscConfig+0x578>)
 800499a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800499e:	6593      	str	r3, [r2, #88]	; 0x58
 80049a0:	4b41      	ldr	r3, [pc, #260]	; (8004aa8 <HAL_RCC_OscConfig+0x578>)
 80049a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049a8:	60bb      	str	r3, [r7, #8]
 80049aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049ac:	2301      	movs	r3, #1
 80049ae:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80049b0:	4b3e      	ldr	r3, [pc, #248]	; (8004aac <HAL_RCC_OscConfig+0x57c>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d118      	bne.n	80049ee <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80049bc:	4b3b      	ldr	r3, [pc, #236]	; (8004aac <HAL_RCC_OscConfig+0x57c>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a3a      	ldr	r2, [pc, #232]	; (8004aac <HAL_RCC_OscConfig+0x57c>)
 80049c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049c6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049c8:	f7fd fa38 	bl	8001e3c <HAL_GetTick>
 80049cc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80049ce:	e008      	b.n	80049e2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049d0:	f7fd fa34 	bl	8001e3c <HAL_GetTick>
 80049d4:	4602      	mov	r2, r0
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	1ad3      	subs	r3, r2, r3
 80049da:	2b02      	cmp	r3, #2
 80049dc:	d901      	bls.n	80049e2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80049de:	2303      	movs	r3, #3
 80049e0:	e1c1      	b.n	8004d66 <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80049e2:	4b32      	ldr	r3, [pc, #200]	; (8004aac <HAL_RCC_OscConfig+0x57c>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d0f0      	beq.n	80049d0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	2b01      	cmp	r3, #1
 80049f4:	d108      	bne.n	8004a08 <HAL_RCC_OscConfig+0x4d8>
 80049f6:	4b2c      	ldr	r3, [pc, #176]	; (8004aa8 <HAL_RCC_OscConfig+0x578>)
 80049f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049fc:	4a2a      	ldr	r2, [pc, #168]	; (8004aa8 <HAL_RCC_OscConfig+0x578>)
 80049fe:	f043 0301 	orr.w	r3, r3, #1
 8004a02:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004a06:	e024      	b.n	8004a52 <HAL_RCC_OscConfig+0x522>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	689b      	ldr	r3, [r3, #8]
 8004a0c:	2b05      	cmp	r3, #5
 8004a0e:	d110      	bne.n	8004a32 <HAL_RCC_OscConfig+0x502>
 8004a10:	4b25      	ldr	r3, [pc, #148]	; (8004aa8 <HAL_RCC_OscConfig+0x578>)
 8004a12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a16:	4a24      	ldr	r2, [pc, #144]	; (8004aa8 <HAL_RCC_OscConfig+0x578>)
 8004a18:	f043 0304 	orr.w	r3, r3, #4
 8004a1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004a20:	4b21      	ldr	r3, [pc, #132]	; (8004aa8 <HAL_RCC_OscConfig+0x578>)
 8004a22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a26:	4a20      	ldr	r2, [pc, #128]	; (8004aa8 <HAL_RCC_OscConfig+0x578>)
 8004a28:	f043 0301 	orr.w	r3, r3, #1
 8004a2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004a30:	e00f      	b.n	8004a52 <HAL_RCC_OscConfig+0x522>
 8004a32:	4b1d      	ldr	r3, [pc, #116]	; (8004aa8 <HAL_RCC_OscConfig+0x578>)
 8004a34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a38:	4a1b      	ldr	r2, [pc, #108]	; (8004aa8 <HAL_RCC_OscConfig+0x578>)
 8004a3a:	f023 0301 	bic.w	r3, r3, #1
 8004a3e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004a42:	4b19      	ldr	r3, [pc, #100]	; (8004aa8 <HAL_RCC_OscConfig+0x578>)
 8004a44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a48:	4a17      	ldr	r2, [pc, #92]	; (8004aa8 <HAL_RCC_OscConfig+0x578>)
 8004a4a:	f023 0304 	bic.w	r3, r3, #4
 8004a4e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d016      	beq.n	8004a88 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a5a:	f7fd f9ef 	bl	8001e3c <HAL_GetTick>
 8004a5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a60:	e00a      	b.n	8004a78 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a62:	f7fd f9eb 	bl	8001e3c <HAL_GetTick>
 8004a66:	4602      	mov	r2, r0
 8004a68:	693b      	ldr	r3, [r7, #16]
 8004a6a:	1ad3      	subs	r3, r2, r3
 8004a6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d901      	bls.n	8004a78 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8004a74:	2303      	movs	r3, #3
 8004a76:	e176      	b.n	8004d66 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a78:	4b0b      	ldr	r3, [pc, #44]	; (8004aa8 <HAL_RCC_OscConfig+0x578>)
 8004a7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a7e:	f003 0302 	and.w	r3, r3, #2
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d0ed      	beq.n	8004a62 <HAL_RCC_OscConfig+0x532>
 8004a86:	e01a      	b.n	8004abe <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a88:	f7fd f9d8 	bl	8001e3c <HAL_GetTick>
 8004a8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004a8e:	e00f      	b.n	8004ab0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a90:	f7fd f9d4 	bl	8001e3c <HAL_GetTick>
 8004a94:	4602      	mov	r2, r0
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	1ad3      	subs	r3, r2, r3
 8004a9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d906      	bls.n	8004ab0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004aa2:	2303      	movs	r3, #3
 8004aa4:	e15f      	b.n	8004d66 <HAL_RCC_OscConfig+0x836>
 8004aa6:	bf00      	nop
 8004aa8:	40021000 	.word	0x40021000
 8004aac:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004ab0:	4baa      	ldr	r3, [pc, #680]	; (8004d5c <HAL_RCC_OscConfig+0x82c>)
 8004ab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ab6:	f003 0302 	and.w	r3, r3, #2
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d1e8      	bne.n	8004a90 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004abe:	7ffb      	ldrb	r3, [r7, #31]
 8004ac0:	2b01      	cmp	r3, #1
 8004ac2:	d105      	bne.n	8004ad0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ac4:	4ba5      	ldr	r3, [pc, #660]	; (8004d5c <HAL_RCC_OscConfig+0x82c>)
 8004ac6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ac8:	4aa4      	ldr	r2, [pc, #656]	; (8004d5c <HAL_RCC_OscConfig+0x82c>)
 8004aca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ace:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f003 0320 	and.w	r3, r3, #32
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d03c      	beq.n	8004b56 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d01c      	beq.n	8004b1e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004ae4:	4b9d      	ldr	r3, [pc, #628]	; (8004d5c <HAL_RCC_OscConfig+0x82c>)
 8004ae6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004aea:	4a9c      	ldr	r2, [pc, #624]	; (8004d5c <HAL_RCC_OscConfig+0x82c>)
 8004aec:	f043 0301 	orr.w	r3, r3, #1
 8004af0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004af4:	f7fd f9a2 	bl	8001e3c <HAL_GetTick>
 8004af8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004afa:	e008      	b.n	8004b0e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004afc:	f7fd f99e 	bl	8001e3c <HAL_GetTick>
 8004b00:	4602      	mov	r2, r0
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	1ad3      	subs	r3, r2, r3
 8004b06:	2b02      	cmp	r3, #2
 8004b08:	d901      	bls.n	8004b0e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004b0a:	2303      	movs	r3, #3
 8004b0c:	e12b      	b.n	8004d66 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004b0e:	4b93      	ldr	r3, [pc, #588]	; (8004d5c <HAL_RCC_OscConfig+0x82c>)
 8004b10:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004b14:	f003 0302 	and.w	r3, r3, #2
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d0ef      	beq.n	8004afc <HAL_RCC_OscConfig+0x5cc>
 8004b1c:	e01b      	b.n	8004b56 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004b1e:	4b8f      	ldr	r3, [pc, #572]	; (8004d5c <HAL_RCC_OscConfig+0x82c>)
 8004b20:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004b24:	4a8d      	ldr	r2, [pc, #564]	; (8004d5c <HAL_RCC_OscConfig+0x82c>)
 8004b26:	f023 0301 	bic.w	r3, r3, #1
 8004b2a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b2e:	f7fd f985 	bl	8001e3c <HAL_GetTick>
 8004b32:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004b34:	e008      	b.n	8004b48 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004b36:	f7fd f981 	bl	8001e3c <HAL_GetTick>
 8004b3a:	4602      	mov	r2, r0
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	1ad3      	subs	r3, r2, r3
 8004b40:	2b02      	cmp	r3, #2
 8004b42:	d901      	bls.n	8004b48 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004b44:	2303      	movs	r3, #3
 8004b46:	e10e      	b.n	8004d66 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004b48:	4b84      	ldr	r3, [pc, #528]	; (8004d5c <HAL_RCC_OscConfig+0x82c>)
 8004b4a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004b4e:	f003 0302 	and.w	r3, r3, #2
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d1ef      	bne.n	8004b36 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	f000 8102 	beq.w	8004d64 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b64:	2b02      	cmp	r3, #2
 8004b66:	f040 80c5 	bne.w	8004cf4 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004b6a:	4b7c      	ldr	r3, [pc, #496]	; (8004d5c <HAL_RCC_OscConfig+0x82c>)
 8004b6c:	68db      	ldr	r3, [r3, #12]
 8004b6e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	f003 0203 	and.w	r2, r3, #3
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b7a:	429a      	cmp	r2, r3
 8004b7c:	d12c      	bne.n	8004bd8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b88:	3b01      	subs	r3, #1
 8004b8a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b8c:	429a      	cmp	r2, r3
 8004b8e:	d123      	bne.n	8004bd8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b9a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004b9c:	429a      	cmp	r2, r3
 8004b9e:	d11b      	bne.n	8004bd8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004baa:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004bac:	429a      	cmp	r2, r3
 8004bae:	d113      	bne.n	8004bd8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bba:	085b      	lsrs	r3, r3, #1
 8004bbc:	3b01      	subs	r3, #1
 8004bbe:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004bc0:	429a      	cmp	r2, r3
 8004bc2:	d109      	bne.n	8004bd8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bce:	085b      	lsrs	r3, r3, #1
 8004bd0:	3b01      	subs	r3, #1
 8004bd2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004bd4:	429a      	cmp	r2, r3
 8004bd6:	d067      	beq.n	8004ca8 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004bd8:	69bb      	ldr	r3, [r7, #24]
 8004bda:	2b0c      	cmp	r3, #12
 8004bdc:	d062      	beq.n	8004ca4 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004bde:	4b5f      	ldr	r3, [pc, #380]	; (8004d5c <HAL_RCC_OscConfig+0x82c>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d001      	beq.n	8004bee <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8004bea:	2301      	movs	r3, #1
 8004bec:	e0bb      	b.n	8004d66 <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004bee:	4b5b      	ldr	r3, [pc, #364]	; (8004d5c <HAL_RCC_OscConfig+0x82c>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a5a      	ldr	r2, [pc, #360]	; (8004d5c <HAL_RCC_OscConfig+0x82c>)
 8004bf4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004bf8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004bfa:	f7fd f91f 	bl	8001e3c <HAL_GetTick>
 8004bfe:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c00:	e008      	b.n	8004c14 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c02:	f7fd f91b 	bl	8001e3c <HAL_GetTick>
 8004c06:	4602      	mov	r2, r0
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	1ad3      	subs	r3, r2, r3
 8004c0c:	2b02      	cmp	r3, #2
 8004c0e:	d901      	bls.n	8004c14 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8004c10:	2303      	movs	r3, #3
 8004c12:	e0a8      	b.n	8004d66 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c14:	4b51      	ldr	r3, [pc, #324]	; (8004d5c <HAL_RCC_OscConfig+0x82c>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d1f0      	bne.n	8004c02 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004c20:	4b4e      	ldr	r3, [pc, #312]	; (8004d5c <HAL_RCC_OscConfig+0x82c>)
 8004c22:	68da      	ldr	r2, [r3, #12]
 8004c24:	4b4e      	ldr	r3, [pc, #312]	; (8004d60 <HAL_RCC_OscConfig+0x830>)
 8004c26:	4013      	ands	r3, r2
 8004c28:	687a      	ldr	r2, [r7, #4]
 8004c2a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004c2c:	687a      	ldr	r2, [r7, #4]
 8004c2e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004c30:	3a01      	subs	r2, #1
 8004c32:	0112      	lsls	r2, r2, #4
 8004c34:	4311      	orrs	r1, r2
 8004c36:	687a      	ldr	r2, [r7, #4]
 8004c38:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004c3a:	0212      	lsls	r2, r2, #8
 8004c3c:	4311      	orrs	r1, r2
 8004c3e:	687a      	ldr	r2, [r7, #4]
 8004c40:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004c42:	0852      	lsrs	r2, r2, #1
 8004c44:	3a01      	subs	r2, #1
 8004c46:	0552      	lsls	r2, r2, #21
 8004c48:	4311      	orrs	r1, r2
 8004c4a:	687a      	ldr	r2, [r7, #4]
 8004c4c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004c4e:	0852      	lsrs	r2, r2, #1
 8004c50:	3a01      	subs	r2, #1
 8004c52:	0652      	lsls	r2, r2, #25
 8004c54:	4311      	orrs	r1, r2
 8004c56:	687a      	ldr	r2, [r7, #4]
 8004c58:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004c5a:	06d2      	lsls	r2, r2, #27
 8004c5c:	430a      	orrs	r2, r1
 8004c5e:	493f      	ldr	r1, [pc, #252]	; (8004d5c <HAL_RCC_OscConfig+0x82c>)
 8004c60:	4313      	orrs	r3, r2
 8004c62:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004c64:	4b3d      	ldr	r3, [pc, #244]	; (8004d5c <HAL_RCC_OscConfig+0x82c>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a3c      	ldr	r2, [pc, #240]	; (8004d5c <HAL_RCC_OscConfig+0x82c>)
 8004c6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c6e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004c70:	4b3a      	ldr	r3, [pc, #232]	; (8004d5c <HAL_RCC_OscConfig+0x82c>)
 8004c72:	68db      	ldr	r3, [r3, #12]
 8004c74:	4a39      	ldr	r2, [pc, #228]	; (8004d5c <HAL_RCC_OscConfig+0x82c>)
 8004c76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c7a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004c7c:	f7fd f8de 	bl	8001e3c <HAL_GetTick>
 8004c80:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c82:	e008      	b.n	8004c96 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c84:	f7fd f8da 	bl	8001e3c <HAL_GetTick>
 8004c88:	4602      	mov	r2, r0
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	1ad3      	subs	r3, r2, r3
 8004c8e:	2b02      	cmp	r3, #2
 8004c90:	d901      	bls.n	8004c96 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8004c92:	2303      	movs	r3, #3
 8004c94:	e067      	b.n	8004d66 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c96:	4b31      	ldr	r3, [pc, #196]	; (8004d5c <HAL_RCC_OscConfig+0x82c>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d0f0      	beq.n	8004c84 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004ca2:	e05f      	b.n	8004d64 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	e05e      	b.n	8004d66 <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ca8:	4b2c      	ldr	r3, [pc, #176]	; (8004d5c <HAL_RCC_OscConfig+0x82c>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d157      	bne.n	8004d64 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004cb4:	4b29      	ldr	r3, [pc, #164]	; (8004d5c <HAL_RCC_OscConfig+0x82c>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a28      	ldr	r2, [pc, #160]	; (8004d5c <HAL_RCC_OscConfig+0x82c>)
 8004cba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004cbe:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004cc0:	4b26      	ldr	r3, [pc, #152]	; (8004d5c <HAL_RCC_OscConfig+0x82c>)
 8004cc2:	68db      	ldr	r3, [r3, #12]
 8004cc4:	4a25      	ldr	r2, [pc, #148]	; (8004d5c <HAL_RCC_OscConfig+0x82c>)
 8004cc6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004cca:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004ccc:	f7fd f8b6 	bl	8001e3c <HAL_GetTick>
 8004cd0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004cd2:	e008      	b.n	8004ce6 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cd4:	f7fd f8b2 	bl	8001e3c <HAL_GetTick>
 8004cd8:	4602      	mov	r2, r0
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	1ad3      	subs	r3, r2, r3
 8004cde:	2b02      	cmp	r3, #2
 8004ce0:	d901      	bls.n	8004ce6 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8004ce2:	2303      	movs	r3, #3
 8004ce4:	e03f      	b.n	8004d66 <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ce6:	4b1d      	ldr	r3, [pc, #116]	; (8004d5c <HAL_RCC_OscConfig+0x82c>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d0f0      	beq.n	8004cd4 <HAL_RCC_OscConfig+0x7a4>
 8004cf2:	e037      	b.n	8004d64 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004cf4:	69bb      	ldr	r3, [r7, #24]
 8004cf6:	2b0c      	cmp	r3, #12
 8004cf8:	d02d      	beq.n	8004d56 <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cfa:	4b18      	ldr	r3, [pc, #96]	; (8004d5c <HAL_RCC_OscConfig+0x82c>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a17      	ldr	r2, [pc, #92]	; (8004d5c <HAL_RCC_OscConfig+0x82c>)
 8004d00:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d04:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004d06:	4b15      	ldr	r3, [pc, #84]	; (8004d5c <HAL_RCC_OscConfig+0x82c>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d105      	bne.n	8004d1e <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004d12:	4b12      	ldr	r3, [pc, #72]	; (8004d5c <HAL_RCC_OscConfig+0x82c>)
 8004d14:	68db      	ldr	r3, [r3, #12]
 8004d16:	4a11      	ldr	r2, [pc, #68]	; (8004d5c <HAL_RCC_OscConfig+0x82c>)
 8004d18:	f023 0303 	bic.w	r3, r3, #3
 8004d1c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8004d1e:	4b0f      	ldr	r3, [pc, #60]	; (8004d5c <HAL_RCC_OscConfig+0x82c>)
 8004d20:	68db      	ldr	r3, [r3, #12]
 8004d22:	4a0e      	ldr	r2, [pc, #56]	; (8004d5c <HAL_RCC_OscConfig+0x82c>)
 8004d24:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004d28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d2c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d2e:	f7fd f885 	bl	8001e3c <HAL_GetTick>
 8004d32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d34:	e008      	b.n	8004d48 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d36:	f7fd f881 	bl	8001e3c <HAL_GetTick>
 8004d3a:	4602      	mov	r2, r0
 8004d3c:	693b      	ldr	r3, [r7, #16]
 8004d3e:	1ad3      	subs	r3, r2, r3
 8004d40:	2b02      	cmp	r3, #2
 8004d42:	d901      	bls.n	8004d48 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8004d44:	2303      	movs	r3, #3
 8004d46:	e00e      	b.n	8004d66 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d48:	4b04      	ldr	r3, [pc, #16]	; (8004d5c <HAL_RCC_OscConfig+0x82c>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d1f0      	bne.n	8004d36 <HAL_RCC_OscConfig+0x806>
 8004d54:	e006      	b.n	8004d64 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004d56:	2301      	movs	r3, #1
 8004d58:	e005      	b.n	8004d66 <HAL_RCC_OscConfig+0x836>
 8004d5a:	bf00      	nop
 8004d5c:	40021000 	.word	0x40021000
 8004d60:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8004d64:	2300      	movs	r3, #0
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	3720      	adds	r7, #32
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}
 8004d6e:	bf00      	nop

08004d70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b084      	sub	sp, #16
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
 8004d78:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d101      	bne.n	8004d84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d80:	2301      	movs	r3, #1
 8004d82:	e0c8      	b.n	8004f16 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004d84:	4b66      	ldr	r3, [pc, #408]	; (8004f20 <HAL_RCC_ClockConfig+0x1b0>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f003 0307 	and.w	r3, r3, #7
 8004d8c:	683a      	ldr	r2, [r7, #0]
 8004d8e:	429a      	cmp	r2, r3
 8004d90:	d910      	bls.n	8004db4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d92:	4b63      	ldr	r3, [pc, #396]	; (8004f20 <HAL_RCC_ClockConfig+0x1b0>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f023 0207 	bic.w	r2, r3, #7
 8004d9a:	4961      	ldr	r1, [pc, #388]	; (8004f20 <HAL_RCC_ClockConfig+0x1b0>)
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004da2:	4b5f      	ldr	r3, [pc, #380]	; (8004f20 <HAL_RCC_ClockConfig+0x1b0>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f003 0307 	and.w	r3, r3, #7
 8004daa:	683a      	ldr	r2, [r7, #0]
 8004dac:	429a      	cmp	r2, r3
 8004dae:	d001      	beq.n	8004db4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004db0:	2301      	movs	r3, #1
 8004db2:	e0b0      	b.n	8004f16 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f003 0301 	and.w	r3, r3, #1
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d04c      	beq.n	8004e5a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	2b03      	cmp	r3, #3
 8004dc6:	d107      	bne.n	8004dd8 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004dc8:	4b56      	ldr	r3, [pc, #344]	; (8004f24 <HAL_RCC_ClockConfig+0x1b4>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d121      	bne.n	8004e18 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	e09e      	b.n	8004f16 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	2b02      	cmp	r3, #2
 8004dde:	d107      	bne.n	8004df0 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004de0:	4b50      	ldr	r3, [pc, #320]	; (8004f24 <HAL_RCC_ClockConfig+0x1b4>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d115      	bne.n	8004e18 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004dec:	2301      	movs	r3, #1
 8004dee:	e092      	b.n	8004f16 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d107      	bne.n	8004e08 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004df8:	4b4a      	ldr	r3, [pc, #296]	; (8004f24 <HAL_RCC_ClockConfig+0x1b4>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f003 0302 	and.w	r3, r3, #2
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d109      	bne.n	8004e18 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004e04:	2301      	movs	r3, #1
 8004e06:	e086      	b.n	8004f16 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e08:	4b46      	ldr	r3, [pc, #280]	; (8004f24 <HAL_RCC_ClockConfig+0x1b4>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d101      	bne.n	8004e18 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004e14:	2301      	movs	r3, #1
 8004e16:	e07e      	b.n	8004f16 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004e18:	4b42      	ldr	r3, [pc, #264]	; (8004f24 <HAL_RCC_ClockConfig+0x1b4>)
 8004e1a:	689b      	ldr	r3, [r3, #8]
 8004e1c:	f023 0203 	bic.w	r2, r3, #3
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	493f      	ldr	r1, [pc, #252]	; (8004f24 <HAL_RCC_ClockConfig+0x1b4>)
 8004e26:	4313      	orrs	r3, r2
 8004e28:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e2a:	f7fd f807 	bl	8001e3c <HAL_GetTick>
 8004e2e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e30:	e00a      	b.n	8004e48 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e32:	f7fd f803 	bl	8001e3c <HAL_GetTick>
 8004e36:	4602      	mov	r2, r0
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	1ad3      	subs	r3, r2, r3
 8004e3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d901      	bls.n	8004e48 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8004e44:	2303      	movs	r3, #3
 8004e46:	e066      	b.n	8004f16 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e48:	4b36      	ldr	r3, [pc, #216]	; (8004f24 <HAL_RCC_ClockConfig+0x1b4>)
 8004e4a:	689b      	ldr	r3, [r3, #8]
 8004e4c:	f003 020c 	and.w	r2, r3, #12
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	009b      	lsls	r3, r3, #2
 8004e56:	429a      	cmp	r2, r3
 8004e58:	d1eb      	bne.n	8004e32 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f003 0302 	and.w	r3, r3, #2
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d008      	beq.n	8004e78 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e66:	4b2f      	ldr	r3, [pc, #188]	; (8004f24 <HAL_RCC_ClockConfig+0x1b4>)
 8004e68:	689b      	ldr	r3, [r3, #8]
 8004e6a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	689b      	ldr	r3, [r3, #8]
 8004e72:	492c      	ldr	r1, [pc, #176]	; (8004f24 <HAL_RCC_ClockConfig+0x1b4>)
 8004e74:	4313      	orrs	r3, r2
 8004e76:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004e78:	4b29      	ldr	r3, [pc, #164]	; (8004f20 <HAL_RCC_ClockConfig+0x1b0>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f003 0307 	and.w	r3, r3, #7
 8004e80:	683a      	ldr	r2, [r7, #0]
 8004e82:	429a      	cmp	r2, r3
 8004e84:	d210      	bcs.n	8004ea8 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e86:	4b26      	ldr	r3, [pc, #152]	; (8004f20 <HAL_RCC_ClockConfig+0x1b0>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f023 0207 	bic.w	r2, r3, #7
 8004e8e:	4924      	ldr	r1, [pc, #144]	; (8004f20 <HAL_RCC_ClockConfig+0x1b0>)
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	4313      	orrs	r3, r2
 8004e94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e96:	4b22      	ldr	r3, [pc, #136]	; (8004f20 <HAL_RCC_ClockConfig+0x1b0>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f003 0307 	and.w	r3, r3, #7
 8004e9e:	683a      	ldr	r2, [r7, #0]
 8004ea0:	429a      	cmp	r2, r3
 8004ea2:	d001      	beq.n	8004ea8 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	e036      	b.n	8004f16 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f003 0304 	and.w	r3, r3, #4
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d008      	beq.n	8004ec6 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004eb4:	4b1b      	ldr	r3, [pc, #108]	; (8004f24 <HAL_RCC_ClockConfig+0x1b4>)
 8004eb6:	689b      	ldr	r3, [r3, #8]
 8004eb8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	68db      	ldr	r3, [r3, #12]
 8004ec0:	4918      	ldr	r1, [pc, #96]	; (8004f24 <HAL_RCC_ClockConfig+0x1b4>)
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f003 0308 	and.w	r3, r3, #8
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d009      	beq.n	8004ee6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ed2:	4b14      	ldr	r3, [pc, #80]	; (8004f24 <HAL_RCC_ClockConfig+0x1b4>)
 8004ed4:	689b      	ldr	r3, [r3, #8]
 8004ed6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	691b      	ldr	r3, [r3, #16]
 8004ede:	00db      	lsls	r3, r3, #3
 8004ee0:	4910      	ldr	r1, [pc, #64]	; (8004f24 <HAL_RCC_ClockConfig+0x1b4>)
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004ee6:	f000 f825 	bl	8004f34 <HAL_RCC_GetSysClockFreq>
 8004eea:	4601      	mov	r1, r0
 8004eec:	4b0d      	ldr	r3, [pc, #52]	; (8004f24 <HAL_RCC_ClockConfig+0x1b4>)
 8004eee:	689b      	ldr	r3, [r3, #8]
 8004ef0:	091b      	lsrs	r3, r3, #4
 8004ef2:	f003 030f 	and.w	r3, r3, #15
 8004ef6:	4a0c      	ldr	r2, [pc, #48]	; (8004f28 <HAL_RCC_ClockConfig+0x1b8>)
 8004ef8:	5cd3      	ldrb	r3, [r2, r3]
 8004efa:	f003 031f 	and.w	r3, r3, #31
 8004efe:	fa21 f303 	lsr.w	r3, r1, r3
 8004f02:	4a0a      	ldr	r2, [pc, #40]	; (8004f2c <HAL_RCC_ClockConfig+0x1bc>)
 8004f04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004f06:	4b0a      	ldr	r3, [pc, #40]	; (8004f30 <HAL_RCC_ClockConfig+0x1c0>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f7fc ff4a 	bl	8001da4 <HAL_InitTick>
 8004f10:	4603      	mov	r3, r0
 8004f12:	72fb      	strb	r3, [r7, #11]

  return status;
 8004f14:	7afb      	ldrb	r3, [r7, #11]
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	3710      	adds	r7, #16
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}
 8004f1e:	bf00      	nop
 8004f20:	40022000 	.word	0x40022000
 8004f24:	40021000 	.word	0x40021000
 8004f28:	08007898 	.word	0x08007898
 8004f2c:	20000000 	.word	0x20000000
 8004f30:	2000000c 	.word	0x2000000c

08004f34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f34:	b480      	push	{r7}
 8004f36:	b089      	sub	sp, #36	; 0x24
 8004f38:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	61fb      	str	r3, [r7, #28]
 8004f3e:	2300      	movs	r3, #0
 8004f40:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f42:	4b3d      	ldr	r3, [pc, #244]	; (8005038 <HAL_RCC_GetSysClockFreq+0x104>)
 8004f44:	689b      	ldr	r3, [r3, #8]
 8004f46:	f003 030c 	and.w	r3, r3, #12
 8004f4a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004f4c:	4b3a      	ldr	r3, [pc, #232]	; (8005038 <HAL_RCC_GetSysClockFreq+0x104>)
 8004f4e:	68db      	ldr	r3, [r3, #12]
 8004f50:	f003 0303 	and.w	r3, r3, #3
 8004f54:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004f56:	693b      	ldr	r3, [r7, #16]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d005      	beq.n	8004f68 <HAL_RCC_GetSysClockFreq+0x34>
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	2b0c      	cmp	r3, #12
 8004f60:	d121      	bne.n	8004fa6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2b01      	cmp	r3, #1
 8004f66:	d11e      	bne.n	8004fa6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004f68:	4b33      	ldr	r3, [pc, #204]	; (8005038 <HAL_RCC_GetSysClockFreq+0x104>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f003 0308 	and.w	r3, r3, #8
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d107      	bne.n	8004f84 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004f74:	4b30      	ldr	r3, [pc, #192]	; (8005038 <HAL_RCC_GetSysClockFreq+0x104>)
 8004f76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f7a:	0a1b      	lsrs	r3, r3, #8
 8004f7c:	f003 030f 	and.w	r3, r3, #15
 8004f80:	61fb      	str	r3, [r7, #28]
 8004f82:	e005      	b.n	8004f90 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004f84:	4b2c      	ldr	r3, [pc, #176]	; (8005038 <HAL_RCC_GetSysClockFreq+0x104>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	091b      	lsrs	r3, r3, #4
 8004f8a:	f003 030f 	and.w	r3, r3, #15
 8004f8e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004f90:	4a2a      	ldr	r2, [pc, #168]	; (800503c <HAL_RCC_GetSysClockFreq+0x108>)
 8004f92:	69fb      	ldr	r3, [r7, #28]
 8004f94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f98:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d10d      	bne.n	8004fbc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004fa0:	69fb      	ldr	r3, [r7, #28]
 8004fa2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004fa4:	e00a      	b.n	8004fbc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	2b04      	cmp	r3, #4
 8004faa:	d102      	bne.n	8004fb2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004fac:	4b24      	ldr	r3, [pc, #144]	; (8005040 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004fae:	61bb      	str	r3, [r7, #24]
 8004fb0:	e004      	b.n	8004fbc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	2b08      	cmp	r3, #8
 8004fb6:	d101      	bne.n	8004fbc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004fb8:	4b22      	ldr	r3, [pc, #136]	; (8005044 <HAL_RCC_GetSysClockFreq+0x110>)
 8004fba:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	2b0c      	cmp	r3, #12
 8004fc0:	d133      	bne.n	800502a <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004fc2:	4b1d      	ldr	r3, [pc, #116]	; (8005038 <HAL_RCC_GetSysClockFreq+0x104>)
 8004fc4:	68db      	ldr	r3, [r3, #12]
 8004fc6:	f003 0303 	and.w	r3, r3, #3
 8004fca:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	2b02      	cmp	r3, #2
 8004fd0:	d002      	beq.n	8004fd8 <HAL_RCC_GetSysClockFreq+0xa4>
 8004fd2:	2b03      	cmp	r3, #3
 8004fd4:	d003      	beq.n	8004fde <HAL_RCC_GetSysClockFreq+0xaa>
 8004fd6:	e005      	b.n	8004fe4 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004fd8:	4b19      	ldr	r3, [pc, #100]	; (8005040 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004fda:	617b      	str	r3, [r7, #20]
      break;
 8004fdc:	e005      	b.n	8004fea <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004fde:	4b19      	ldr	r3, [pc, #100]	; (8005044 <HAL_RCC_GetSysClockFreq+0x110>)
 8004fe0:	617b      	str	r3, [r7, #20]
      break;
 8004fe2:	e002      	b.n	8004fea <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004fe4:	69fb      	ldr	r3, [r7, #28]
 8004fe6:	617b      	str	r3, [r7, #20]
      break;
 8004fe8:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004fea:	4b13      	ldr	r3, [pc, #76]	; (8005038 <HAL_RCC_GetSysClockFreq+0x104>)
 8004fec:	68db      	ldr	r3, [r3, #12]
 8004fee:	091b      	lsrs	r3, r3, #4
 8004ff0:	f003 0307 	and.w	r3, r3, #7
 8004ff4:	3301      	adds	r3, #1
 8004ff6:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004ff8:	4b0f      	ldr	r3, [pc, #60]	; (8005038 <HAL_RCC_GetSysClockFreq+0x104>)
 8004ffa:	68db      	ldr	r3, [r3, #12]
 8004ffc:	0a1b      	lsrs	r3, r3, #8
 8004ffe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005002:	697a      	ldr	r2, [r7, #20]
 8005004:	fb02 f203 	mul.w	r2, r2, r3
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	fbb2 f3f3 	udiv	r3, r2, r3
 800500e:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005010:	4b09      	ldr	r3, [pc, #36]	; (8005038 <HAL_RCC_GetSysClockFreq+0x104>)
 8005012:	68db      	ldr	r3, [r3, #12]
 8005014:	0e5b      	lsrs	r3, r3, #25
 8005016:	f003 0303 	and.w	r3, r3, #3
 800501a:	3301      	adds	r3, #1
 800501c:	005b      	lsls	r3, r3, #1
 800501e:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005020:	697a      	ldr	r2, [r7, #20]
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	fbb2 f3f3 	udiv	r3, r2, r3
 8005028:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800502a:	69bb      	ldr	r3, [r7, #24]
}
 800502c:	4618      	mov	r0, r3
 800502e:	3724      	adds	r7, #36	; 0x24
 8005030:	46bd      	mov	sp, r7
 8005032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005036:	4770      	bx	lr
 8005038:	40021000 	.word	0x40021000
 800503c:	080078b0 	.word	0x080078b0
 8005040:	00f42400 	.word	0x00f42400
 8005044:	007a1200 	.word	0x007a1200

08005048 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005048:	b480      	push	{r7}
 800504a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800504c:	4b03      	ldr	r3, [pc, #12]	; (800505c <HAL_RCC_GetHCLKFreq+0x14>)
 800504e:	681b      	ldr	r3, [r3, #0]
}
 8005050:	4618      	mov	r0, r3
 8005052:	46bd      	mov	sp, r7
 8005054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005058:	4770      	bx	lr
 800505a:	bf00      	nop
 800505c:	20000000 	.word	0x20000000

08005060 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005064:	f7ff fff0 	bl	8005048 <HAL_RCC_GetHCLKFreq>
 8005068:	4601      	mov	r1, r0
 800506a:	4b06      	ldr	r3, [pc, #24]	; (8005084 <HAL_RCC_GetPCLK1Freq+0x24>)
 800506c:	689b      	ldr	r3, [r3, #8]
 800506e:	0a1b      	lsrs	r3, r3, #8
 8005070:	f003 0307 	and.w	r3, r3, #7
 8005074:	4a04      	ldr	r2, [pc, #16]	; (8005088 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005076:	5cd3      	ldrb	r3, [r2, r3]
 8005078:	f003 031f 	and.w	r3, r3, #31
 800507c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005080:	4618      	mov	r0, r3
 8005082:	bd80      	pop	{r7, pc}
 8005084:	40021000 	.word	0x40021000
 8005088:	080078a8 	.word	0x080078a8

0800508c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005090:	f7ff ffda 	bl	8005048 <HAL_RCC_GetHCLKFreq>
 8005094:	4601      	mov	r1, r0
 8005096:	4b06      	ldr	r3, [pc, #24]	; (80050b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005098:	689b      	ldr	r3, [r3, #8]
 800509a:	0adb      	lsrs	r3, r3, #11
 800509c:	f003 0307 	and.w	r3, r3, #7
 80050a0:	4a04      	ldr	r2, [pc, #16]	; (80050b4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80050a2:	5cd3      	ldrb	r3, [r2, r3]
 80050a4:	f003 031f 	and.w	r3, r3, #31
 80050a8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80050ac:	4618      	mov	r0, r3
 80050ae:	bd80      	pop	{r7, pc}
 80050b0:	40021000 	.word	0x40021000
 80050b4:	080078a8 	.word	0x080078a8

080050b8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b086      	sub	sp, #24
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80050c0:	2300      	movs	r3, #0
 80050c2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80050c4:	4b2a      	ldr	r3, [pc, #168]	; (8005170 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80050c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d003      	beq.n	80050d8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80050d0:	f7ff f9ca 	bl	8004468 <HAL_PWREx_GetVoltageRange>
 80050d4:	6178      	str	r0, [r7, #20]
 80050d6:	e014      	b.n	8005102 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80050d8:	4b25      	ldr	r3, [pc, #148]	; (8005170 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80050da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050dc:	4a24      	ldr	r2, [pc, #144]	; (8005170 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80050de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050e2:	6593      	str	r3, [r2, #88]	; 0x58
 80050e4:	4b22      	ldr	r3, [pc, #136]	; (8005170 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80050e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050ec:	60fb      	str	r3, [r7, #12]
 80050ee:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80050f0:	f7ff f9ba 	bl	8004468 <HAL_PWREx_GetVoltageRange>
 80050f4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80050f6:	4b1e      	ldr	r3, [pc, #120]	; (8005170 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80050f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050fa:	4a1d      	ldr	r2, [pc, #116]	; (8005170 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80050fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005100:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005108:	d10b      	bne.n	8005122 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2b80      	cmp	r3, #128	; 0x80
 800510e:	d919      	bls.n	8005144 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2ba0      	cmp	r3, #160	; 0xa0
 8005114:	d902      	bls.n	800511c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005116:	2302      	movs	r3, #2
 8005118:	613b      	str	r3, [r7, #16]
 800511a:	e013      	b.n	8005144 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800511c:	2301      	movs	r3, #1
 800511e:	613b      	str	r3, [r7, #16]
 8005120:	e010      	b.n	8005144 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2b80      	cmp	r3, #128	; 0x80
 8005126:	d902      	bls.n	800512e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005128:	2303      	movs	r3, #3
 800512a:	613b      	str	r3, [r7, #16]
 800512c:	e00a      	b.n	8005144 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2b80      	cmp	r3, #128	; 0x80
 8005132:	d102      	bne.n	800513a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005134:	2302      	movs	r3, #2
 8005136:	613b      	str	r3, [r7, #16]
 8005138:	e004      	b.n	8005144 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2b70      	cmp	r3, #112	; 0x70
 800513e:	d101      	bne.n	8005144 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005140:	2301      	movs	r3, #1
 8005142:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005144:	4b0b      	ldr	r3, [pc, #44]	; (8005174 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f023 0207 	bic.w	r2, r3, #7
 800514c:	4909      	ldr	r1, [pc, #36]	; (8005174 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	4313      	orrs	r3, r2
 8005152:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005154:	4b07      	ldr	r3, [pc, #28]	; (8005174 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f003 0307 	and.w	r3, r3, #7
 800515c:	693a      	ldr	r2, [r7, #16]
 800515e:	429a      	cmp	r2, r3
 8005160:	d001      	beq.n	8005166 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005162:	2301      	movs	r3, #1
 8005164:	e000      	b.n	8005168 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005166:	2300      	movs	r3, #0
}
 8005168:	4618      	mov	r0, r3
 800516a:	3718      	adds	r7, #24
 800516c:	46bd      	mov	sp, r7
 800516e:	bd80      	pop	{r7, pc}
 8005170:	40021000 	.word	0x40021000
 8005174:	40022000 	.word	0x40022000

08005178 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b086      	sub	sp, #24
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005180:	2300      	movs	r3, #0
 8005182:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005184:	2300      	movs	r3, #0
 8005186:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005190:	2b00      	cmp	r3, #0
 8005192:	d02f      	beq.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005198:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800519c:	d005      	beq.n	80051aa <HAL_RCCEx_PeriphCLKConfig+0x32>
 800519e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80051a2:	d015      	beq.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x58>
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d007      	beq.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80051a8:	e00f      	b.n	80051ca <HAL_RCCEx_PeriphCLKConfig+0x52>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80051aa:	4b5d      	ldr	r3, [pc, #372]	; (8005320 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80051ac:	68db      	ldr	r3, [r3, #12]
 80051ae:	4a5c      	ldr	r2, [pc, #368]	; (8005320 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80051b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051b4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80051b6:	e00c      	b.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x5a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	3304      	adds	r3, #4
 80051bc:	2100      	movs	r1, #0
 80051be:	4618      	mov	r0, r3
 80051c0:	f000 fa1e 	bl	8005600 <RCCEx_PLLSAI1_Config>
 80051c4:	4603      	mov	r3, r0
 80051c6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80051c8:	e003      	b.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80051ca:	2301      	movs	r3, #1
 80051cc:	74fb      	strb	r3, [r7, #19]
      break;
 80051ce:	e000      	b.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
      break;
 80051d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80051d2:	7cfb      	ldrb	r3, [r7, #19]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d10b      	bne.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80051d8:	4b51      	ldr	r3, [pc, #324]	; (8005320 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80051da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051de:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051e6:	494e      	ldr	r1, [pc, #312]	; (8005320 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80051e8:	4313      	orrs	r3, r2
 80051ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80051ee:	e001      	b.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051f0:	7cfb      	ldrb	r3, [r7, #19]
 80051f2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	f000 809e 	beq.w	800533e <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005202:	2300      	movs	r3, #0
 8005204:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005206:	4b46      	ldr	r3, [pc, #280]	; (8005320 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8005208:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800520a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800520e:	2b00      	cmp	r3, #0
 8005210:	d101      	bne.n	8005216 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8005212:	2301      	movs	r3, #1
 8005214:	e000      	b.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8005216:	2300      	movs	r3, #0
 8005218:	2b00      	cmp	r3, #0
 800521a:	d00d      	beq.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800521c:	4b40      	ldr	r3, [pc, #256]	; (8005320 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800521e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005220:	4a3f      	ldr	r2, [pc, #252]	; (8005320 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8005222:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005226:	6593      	str	r3, [r2, #88]	; 0x58
 8005228:	4b3d      	ldr	r3, [pc, #244]	; (8005320 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800522a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800522c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005230:	60bb      	str	r3, [r7, #8]
 8005232:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005234:	2301      	movs	r3, #1
 8005236:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005238:	4b3a      	ldr	r3, [pc, #232]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a39      	ldr	r2, [pc, #228]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800523e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005242:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005244:	f7fc fdfa 	bl	8001e3c <HAL_GetTick>
 8005248:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800524a:	e009      	b.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800524c:	f7fc fdf6 	bl	8001e3c <HAL_GetTick>
 8005250:	4602      	mov	r2, r0
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	1ad3      	subs	r3, r2, r3
 8005256:	2b02      	cmp	r3, #2
 8005258:	d902      	bls.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        ret = HAL_TIMEOUT;
 800525a:	2303      	movs	r3, #3
 800525c:	74fb      	strb	r3, [r7, #19]
        break;
 800525e:	e005      	b.n	800526c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005260:	4b30      	ldr	r3, [pc, #192]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005268:	2b00      	cmp	r3, #0
 800526a:	d0ef      	beq.n	800524c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      }
    }

    if(ret == HAL_OK)
 800526c:	7cfb      	ldrb	r3, [r7, #19]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d15a      	bne.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005272:	4b2b      	ldr	r3, [pc, #172]	; (8005320 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8005274:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005278:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800527c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d01e      	beq.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005288:	697a      	ldr	r2, [r7, #20]
 800528a:	429a      	cmp	r2, r3
 800528c:	d019      	beq.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0x14a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800528e:	4b24      	ldr	r3, [pc, #144]	; (8005320 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8005290:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005294:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005298:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800529a:	4b21      	ldr	r3, [pc, #132]	; (8005320 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800529c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052a0:	4a1f      	ldr	r2, [pc, #124]	; (8005320 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80052a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80052aa:	4b1d      	ldr	r3, [pc, #116]	; (8005320 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80052ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052b0:	4a1b      	ldr	r2, [pc, #108]	; (8005320 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80052b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80052ba:	4a19      	ldr	r2, [pc, #100]	; (8005320 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	f003 0301 	and.w	r3, r3, #1
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d016      	beq.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0x182>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052cc:	f7fc fdb6 	bl	8001e3c <HAL_GetTick>
 80052d0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80052d2:	e00b      	b.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0x174>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052d4:	f7fc fdb2 	bl	8001e3c <HAL_GetTick>
 80052d8:	4602      	mov	r2, r0
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	1ad3      	subs	r3, r2, r3
 80052de:	f241 3288 	movw	r2, #5000	; 0x1388
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d902      	bls.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0x174>
          {
            ret = HAL_TIMEOUT;
 80052e6:	2303      	movs	r3, #3
 80052e8:	74fb      	strb	r3, [r7, #19]
            break;
 80052ea:	e006      	b.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0x182>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80052ec:	4b0c      	ldr	r3, [pc, #48]	; (8005320 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80052ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052f2:	f003 0302 	and.w	r3, r3, #2
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d0ec      	beq.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x15c>
          }
        }
      }

      if(ret == HAL_OK)
 80052fa:	7cfb      	ldrb	r3, [r7, #19]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d10b      	bne.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005300:	4b07      	ldr	r3, [pc, #28]	; (8005320 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8005302:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005306:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800530e:	4904      	ldr	r1, [pc, #16]	; (8005320 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8005310:	4313      	orrs	r3, r2
 8005312:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005316:	e009      	b.n	800532c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005318:	7cfb      	ldrb	r3, [r7, #19]
 800531a:	74bb      	strb	r3, [r7, #18]
 800531c:	e006      	b.n	800532c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800531e:	bf00      	nop
 8005320:	40021000 	.word	0x40021000
 8005324:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005328:	7cfb      	ldrb	r3, [r7, #19]
 800532a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800532c:	7c7b      	ldrb	r3, [r7, #17]
 800532e:	2b01      	cmp	r3, #1
 8005330:	d105      	bne.n	800533e <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005332:	4bb2      	ldr	r3, [pc, #712]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8005334:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005336:	4ab1      	ldr	r2, [pc, #708]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8005338:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800533c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f003 0301 	and.w	r3, r3, #1
 8005346:	2b00      	cmp	r3, #0
 8005348:	d00a      	beq.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800534a:	4bac      	ldr	r3, [pc, #688]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800534c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005350:	f023 0203 	bic.w	r2, r3, #3
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6a1b      	ldr	r3, [r3, #32]
 8005358:	49a8      	ldr	r1, [pc, #672]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800535a:	4313      	orrs	r3, r2
 800535c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f003 0302 	and.w	r3, r3, #2
 8005368:	2b00      	cmp	r3, #0
 800536a:	d00a      	beq.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0x20a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800536c:	4ba3      	ldr	r3, [pc, #652]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800536e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005372:	f023 020c 	bic.w	r2, r3, #12
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800537a:	49a0      	ldr	r1, [pc, #640]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800537c:	4313      	orrs	r3, r2
 800537e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f003 0304 	and.w	r3, r3, #4
 800538a:	2b00      	cmp	r3, #0
 800538c:	d00a      	beq.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800538e:	4b9b      	ldr	r3, [pc, #620]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8005390:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005394:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800539c:	4997      	ldr	r1, [pc, #604]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800539e:	4313      	orrs	r3, r2
 80053a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f003 0320 	and.w	r3, r3, #32
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d00a      	beq.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0x24e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80053b0:	4b92      	ldr	r3, [pc, #584]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80053b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053b6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053be:	498f      	ldr	r1, [pc, #572]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80053c0:	4313      	orrs	r3, r2
 80053c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d00a      	beq.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0x270>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80053d2:	4b8a      	ldr	r3, [pc, #552]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80053d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053d8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053e0:	4986      	ldr	r1, [pc, #536]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80053e2:	4313      	orrs	r3, r2
 80053e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d00a      	beq.n	800540a <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80053f4:	4b81      	ldr	r3, [pc, #516]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80053f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053fa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005402:	497e      	ldr	r1, [pc, #504]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8005404:	4313      	orrs	r3, r2
 8005406:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005412:	2b00      	cmp	r3, #0
 8005414:	d00a      	beq.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005416:	4b79      	ldr	r3, [pc, #484]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8005418:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800541c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005424:	4975      	ldr	r1, [pc, #468]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8005426:	4313      	orrs	r3, r2
 8005428:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005434:	2b00      	cmp	r3, #0
 8005436:	d00a      	beq.n	800544e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005438:	4b70      	ldr	r3, [pc, #448]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800543a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800543e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005446:	496d      	ldr	r1, [pc, #436]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8005448:	4313      	orrs	r3, r2
 800544a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005456:	2b00      	cmp	r3, #0
 8005458:	d00a      	beq.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800545a:	4b68      	ldr	r3, [pc, #416]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800545c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005460:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005468:	4964      	ldr	r1, [pc, #400]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800546a:	4313      	orrs	r3, r2
 800546c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005478:	2b00      	cmp	r3, #0
 800547a:	d028      	beq.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0x356>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800547c:	4b5f      	ldr	r3, [pc, #380]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800547e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005482:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800548a:	495c      	ldr	r1, [pc, #368]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800548c:	4313      	orrs	r3, r2
 800548e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005496:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800549a:	d106      	bne.n	80054aa <HAL_RCCEx_PeriphCLKConfig+0x332>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800549c:	4b57      	ldr	r3, [pc, #348]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800549e:	68db      	ldr	r3, [r3, #12]
 80054a0:	4a56      	ldr	r2, [pc, #344]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80054a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80054a6:	60d3      	str	r3, [r2, #12]
 80054a8:	e011      	b.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0x356>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054ae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80054b2:	d10c      	bne.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0x356>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	3304      	adds	r3, #4
 80054b8:	2101      	movs	r1, #1
 80054ba:	4618      	mov	r0, r3
 80054bc:	f000 f8a0 	bl	8005600 <RCCEx_PLLSAI1_Config>
 80054c0:	4603      	mov	r3, r0
 80054c2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80054c4:	7cfb      	ldrb	r3, [r7, #19]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d001      	beq.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0x356>
        {
          /* set overall return value */
          status = ret;
 80054ca:	7cfb      	ldrb	r3, [r7, #19]
 80054cc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d028      	beq.n	800552c <HAL_RCCEx_PeriphCLKConfig+0x3b4>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80054da:	4b48      	ldr	r3, [pc, #288]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80054dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054e0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054e8:	4944      	ldr	r1, [pc, #272]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80054ea:	4313      	orrs	r3, r2
 80054ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80054f8:	d106      	bne.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0x390>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80054fa:	4b40      	ldr	r3, [pc, #256]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80054fc:	68db      	ldr	r3, [r3, #12]
 80054fe:	4a3f      	ldr	r2, [pc, #252]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8005500:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005504:	60d3      	str	r3, [r2, #12]
 8005506:	e011      	b.n	800552c <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800550c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005510:	d10c      	bne.n	800552c <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	3304      	adds	r3, #4
 8005516:	2101      	movs	r1, #1
 8005518:	4618      	mov	r0, r3
 800551a:	f000 f871 	bl	8005600 <RCCEx_PLLSAI1_Config>
 800551e:	4603      	mov	r3, r0
 8005520:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005522:	7cfb      	ldrb	r3, [r7, #19]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d001      	beq.n	800552c <HAL_RCCEx_PeriphCLKConfig+0x3b4>
      {
        /* set overall return value */
        status = ret;
 8005528:	7cfb      	ldrb	r3, [r7, #19]
 800552a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005534:	2b00      	cmp	r3, #0
 8005536:	d028      	beq.n	800558a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005538:	4b30      	ldr	r3, [pc, #192]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800553a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800553e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005546:	492d      	ldr	r1, [pc, #180]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8005548:	4313      	orrs	r3, r2
 800554a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005552:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005556:	d106      	bne.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0x3ee>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005558:	4b28      	ldr	r3, [pc, #160]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800555a:	68db      	ldr	r3, [r3, #12]
 800555c:	4a27      	ldr	r2, [pc, #156]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800555e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005562:	60d3      	str	r3, [r2, #12]
 8005564:	e011      	b.n	800558a <HAL_RCCEx_PeriphCLKConfig+0x412>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800556a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800556e:	d10c      	bne.n	800558a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	3304      	adds	r3, #4
 8005574:	2101      	movs	r1, #1
 8005576:	4618      	mov	r0, r3
 8005578:	f000 f842 	bl	8005600 <RCCEx_PLLSAI1_Config>
 800557c:	4603      	mov	r3, r0
 800557e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005580:	7cfb      	ldrb	r3, [r7, #19]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d001      	beq.n	800558a <HAL_RCCEx_PeriphCLKConfig+0x412>
      {
        /* set overall return value */
        status = ret;
 8005586:	7cfb      	ldrb	r3, [r7, #19]
 8005588:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005592:	2b00      	cmp	r3, #0
 8005594:	d01c      	beq.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005596:	4b19      	ldr	r3, [pc, #100]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8005598:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800559c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055a4:	4915      	ldr	r1, [pc, #84]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80055a6:	4313      	orrs	r3, r2
 80055a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80055b4:	d10c      	bne.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	3304      	adds	r3, #4
 80055ba:	2102      	movs	r1, #2
 80055bc:	4618      	mov	r0, r3
 80055be:	f000 f81f 	bl	8005600 <RCCEx_PLLSAI1_Config>
 80055c2:	4603      	mov	r3, r0
 80055c4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80055c6:	7cfb      	ldrb	r3, [r7, #19]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d001      	beq.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x458>
      {
        /* set overall return value */
        status = ret;
 80055cc:	7cfb      	ldrb	r3, [r7, #19]
 80055ce:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d00a      	beq.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0x47a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80055dc:	4b07      	ldr	r3, [pc, #28]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80055de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055e2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055ea:	4904      	ldr	r1, [pc, #16]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80055ec:	4313      	orrs	r3, r2
 80055ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80055f2:	7cbb      	ldrb	r3, [r7, #18]
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	3718      	adds	r7, #24
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bd80      	pop	{r7, pc}
 80055fc:	40021000 	.word	0x40021000

08005600 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b084      	sub	sp, #16
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
 8005608:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800560a:	2300      	movs	r3, #0
 800560c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800560e:	4b73      	ldr	r3, [pc, #460]	; (80057dc <RCCEx_PLLSAI1_Config+0x1dc>)
 8005610:	68db      	ldr	r3, [r3, #12]
 8005612:	f003 0303 	and.w	r3, r3, #3
 8005616:	2b00      	cmp	r3, #0
 8005618:	d018      	beq.n	800564c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800561a:	4b70      	ldr	r3, [pc, #448]	; (80057dc <RCCEx_PLLSAI1_Config+0x1dc>)
 800561c:	68db      	ldr	r3, [r3, #12]
 800561e:	f003 0203 	and.w	r2, r3, #3
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	429a      	cmp	r2, r3
 8005628:	d10d      	bne.n	8005646 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
       ||
 800562e:	2b00      	cmp	r3, #0
 8005630:	d009      	beq.n	8005646 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005632:	4b6a      	ldr	r3, [pc, #424]	; (80057dc <RCCEx_PLLSAI1_Config+0x1dc>)
 8005634:	68db      	ldr	r3, [r3, #12]
 8005636:	091b      	lsrs	r3, r3, #4
 8005638:	f003 0307 	and.w	r3, r3, #7
 800563c:	1c5a      	adds	r2, r3, #1
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	685b      	ldr	r3, [r3, #4]
       ||
 8005642:	429a      	cmp	r2, r3
 8005644:	d044      	beq.n	80056d0 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8005646:	2301      	movs	r3, #1
 8005648:	73fb      	strb	r3, [r7, #15]
 800564a:	e041      	b.n	80056d0 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	2b02      	cmp	r3, #2
 8005652:	d00c      	beq.n	800566e <RCCEx_PLLSAI1_Config+0x6e>
 8005654:	2b03      	cmp	r3, #3
 8005656:	d013      	beq.n	8005680 <RCCEx_PLLSAI1_Config+0x80>
 8005658:	2b01      	cmp	r3, #1
 800565a:	d120      	bne.n	800569e <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800565c:	4b5f      	ldr	r3, [pc, #380]	; (80057dc <RCCEx_PLLSAI1_Config+0x1dc>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f003 0302 	and.w	r3, r3, #2
 8005664:	2b00      	cmp	r3, #0
 8005666:	d11d      	bne.n	80056a4 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8005668:	2301      	movs	r3, #1
 800566a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800566c:	e01a      	b.n	80056a4 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800566e:	4b5b      	ldr	r3, [pc, #364]	; (80057dc <RCCEx_PLLSAI1_Config+0x1dc>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005676:	2b00      	cmp	r3, #0
 8005678:	d116      	bne.n	80056a8 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 800567a:	2301      	movs	r3, #1
 800567c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800567e:	e013      	b.n	80056a8 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005680:	4b56      	ldr	r3, [pc, #344]	; (80057dc <RCCEx_PLLSAI1_Config+0x1dc>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005688:	2b00      	cmp	r3, #0
 800568a:	d10f      	bne.n	80056ac <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800568c:	4b53      	ldr	r3, [pc, #332]	; (80057dc <RCCEx_PLLSAI1_Config+0x1dc>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005694:	2b00      	cmp	r3, #0
 8005696:	d109      	bne.n	80056ac <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8005698:	2301      	movs	r3, #1
 800569a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800569c:	e006      	b.n	80056ac <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 800569e:	2301      	movs	r3, #1
 80056a0:	73fb      	strb	r3, [r7, #15]
      break;
 80056a2:	e004      	b.n	80056ae <RCCEx_PLLSAI1_Config+0xae>
      break;
 80056a4:	bf00      	nop
 80056a6:	e002      	b.n	80056ae <RCCEx_PLLSAI1_Config+0xae>
      break;
 80056a8:	bf00      	nop
 80056aa:	e000      	b.n	80056ae <RCCEx_PLLSAI1_Config+0xae>
      break;
 80056ac:	bf00      	nop
    }

    if(status == HAL_OK)
 80056ae:	7bfb      	ldrb	r3, [r7, #15]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d10d      	bne.n	80056d0 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80056b4:	4b49      	ldr	r3, [pc, #292]	; (80057dc <RCCEx_PLLSAI1_Config+0x1dc>)
 80056b6:	68db      	ldr	r3, [r3, #12]
 80056b8:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6819      	ldr	r1, [r3, #0]
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	685b      	ldr	r3, [r3, #4]
 80056c4:	3b01      	subs	r3, #1
 80056c6:	011b      	lsls	r3, r3, #4
 80056c8:	430b      	orrs	r3, r1
 80056ca:	4944      	ldr	r1, [pc, #272]	; (80057dc <RCCEx_PLLSAI1_Config+0x1dc>)
 80056cc:	4313      	orrs	r3, r2
 80056ce:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80056d0:	7bfb      	ldrb	r3, [r7, #15]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d17c      	bne.n	80057d0 <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80056d6:	4b41      	ldr	r3, [pc, #260]	; (80057dc <RCCEx_PLLSAI1_Config+0x1dc>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a40      	ldr	r2, [pc, #256]	; (80057dc <RCCEx_PLLSAI1_Config+0x1dc>)
 80056dc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80056e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056e2:	f7fc fbab 	bl	8001e3c <HAL_GetTick>
 80056e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80056e8:	e009      	b.n	80056fe <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80056ea:	f7fc fba7 	bl	8001e3c <HAL_GetTick>
 80056ee:	4602      	mov	r2, r0
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	1ad3      	subs	r3, r2, r3
 80056f4:	2b02      	cmp	r3, #2
 80056f6:	d902      	bls.n	80056fe <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80056f8:	2303      	movs	r3, #3
 80056fa:	73fb      	strb	r3, [r7, #15]
        break;
 80056fc:	e005      	b.n	800570a <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80056fe:	4b37      	ldr	r3, [pc, #220]	; (80057dc <RCCEx_PLLSAI1_Config+0x1dc>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005706:	2b00      	cmp	r3, #0
 8005708:	d1ef      	bne.n	80056ea <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800570a:	7bfb      	ldrb	r3, [r7, #15]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d15f      	bne.n	80057d0 <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d110      	bne.n	8005738 <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005716:	4b31      	ldr	r3, [pc, #196]	; (80057dc <RCCEx_PLLSAI1_Config+0x1dc>)
 8005718:	691b      	ldr	r3, [r3, #16]
 800571a:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800571e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005722:	687a      	ldr	r2, [r7, #4]
 8005724:	6892      	ldr	r2, [r2, #8]
 8005726:	0211      	lsls	r1, r2, #8
 8005728:	687a      	ldr	r2, [r7, #4]
 800572a:	68d2      	ldr	r2, [r2, #12]
 800572c:	06d2      	lsls	r2, r2, #27
 800572e:	430a      	orrs	r2, r1
 8005730:	492a      	ldr	r1, [pc, #168]	; (80057dc <RCCEx_PLLSAI1_Config+0x1dc>)
 8005732:	4313      	orrs	r3, r2
 8005734:	610b      	str	r3, [r1, #16]
 8005736:	e027      	b.n	8005788 <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	2b01      	cmp	r3, #1
 800573c:	d112      	bne.n	8005764 <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800573e:	4b27      	ldr	r3, [pc, #156]	; (80057dc <RCCEx_PLLSAI1_Config+0x1dc>)
 8005740:	691b      	ldr	r3, [r3, #16]
 8005742:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005746:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800574a:	687a      	ldr	r2, [r7, #4]
 800574c:	6892      	ldr	r2, [r2, #8]
 800574e:	0211      	lsls	r1, r2, #8
 8005750:	687a      	ldr	r2, [r7, #4]
 8005752:	6912      	ldr	r2, [r2, #16]
 8005754:	0852      	lsrs	r2, r2, #1
 8005756:	3a01      	subs	r2, #1
 8005758:	0552      	lsls	r2, r2, #21
 800575a:	430a      	orrs	r2, r1
 800575c:	491f      	ldr	r1, [pc, #124]	; (80057dc <RCCEx_PLLSAI1_Config+0x1dc>)
 800575e:	4313      	orrs	r3, r2
 8005760:	610b      	str	r3, [r1, #16]
 8005762:	e011      	b.n	8005788 <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005764:	4b1d      	ldr	r3, [pc, #116]	; (80057dc <RCCEx_PLLSAI1_Config+0x1dc>)
 8005766:	691b      	ldr	r3, [r3, #16]
 8005768:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800576c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005770:	687a      	ldr	r2, [r7, #4]
 8005772:	6892      	ldr	r2, [r2, #8]
 8005774:	0211      	lsls	r1, r2, #8
 8005776:	687a      	ldr	r2, [r7, #4]
 8005778:	6952      	ldr	r2, [r2, #20]
 800577a:	0852      	lsrs	r2, r2, #1
 800577c:	3a01      	subs	r2, #1
 800577e:	0652      	lsls	r2, r2, #25
 8005780:	430a      	orrs	r2, r1
 8005782:	4916      	ldr	r1, [pc, #88]	; (80057dc <RCCEx_PLLSAI1_Config+0x1dc>)
 8005784:	4313      	orrs	r3, r2
 8005786:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005788:	4b14      	ldr	r3, [pc, #80]	; (80057dc <RCCEx_PLLSAI1_Config+0x1dc>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a13      	ldr	r2, [pc, #76]	; (80057dc <RCCEx_PLLSAI1_Config+0x1dc>)
 800578e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005792:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005794:	f7fc fb52 	bl	8001e3c <HAL_GetTick>
 8005798:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800579a:	e009      	b.n	80057b0 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800579c:	f7fc fb4e 	bl	8001e3c <HAL_GetTick>
 80057a0:	4602      	mov	r2, r0
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	1ad3      	subs	r3, r2, r3
 80057a6:	2b02      	cmp	r3, #2
 80057a8:	d902      	bls.n	80057b0 <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 80057aa:	2303      	movs	r3, #3
 80057ac:	73fb      	strb	r3, [r7, #15]
          break;
 80057ae:	e005      	b.n	80057bc <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80057b0:	4b0a      	ldr	r3, [pc, #40]	; (80057dc <RCCEx_PLLSAI1_Config+0x1dc>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d0ef      	beq.n	800579c <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 80057bc:	7bfb      	ldrb	r3, [r7, #15]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d106      	bne.n	80057d0 <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80057c2:	4b06      	ldr	r3, [pc, #24]	; (80057dc <RCCEx_PLLSAI1_Config+0x1dc>)
 80057c4:	691a      	ldr	r2, [r3, #16]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	699b      	ldr	r3, [r3, #24]
 80057ca:	4904      	ldr	r1, [pc, #16]	; (80057dc <RCCEx_PLLSAI1_Config+0x1dc>)
 80057cc:	4313      	orrs	r3, r2
 80057ce:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80057d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	3710      	adds	r7, #16
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bd80      	pop	{r7, pc}
 80057da:	bf00      	nop
 80057dc:	40021000 	.word	0x40021000

080057e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b082      	sub	sp, #8
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d101      	bne.n	80057f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80057ee:	2301      	movs	r3, #1
 80057f0:	e040      	b.n	8005874 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d106      	bne.n	8005808 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2200      	movs	r2, #0
 80057fe:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	f7fb ff4a 	bl	800169c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2224      	movs	r2, #36	; 0x24
 800580c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	681a      	ldr	r2, [r3, #0]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f022 0201 	bic.w	r2, r2, #1
 800581c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	f000 f82c 	bl	800587c <UART_SetConfig>
 8005824:	4603      	mov	r3, r0
 8005826:	2b01      	cmp	r3, #1
 8005828:	d101      	bne.n	800582e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800582a:	2301      	movs	r3, #1
 800582c:	e022      	b.n	8005874 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005832:	2b00      	cmp	r3, #0
 8005834:	d002      	beq.n	800583c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	f000 fb34 	bl	8005ea4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	685a      	ldr	r2, [r3, #4]
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800584a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	689a      	ldr	r2, [r3, #8]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800585a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	681a      	ldr	r2, [r3, #0]
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f042 0201 	orr.w	r2, r2, #1
 800586a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800586c:	6878      	ldr	r0, [r7, #4]
 800586e:	f000 fbbb 	bl	8005fe8 <UART_CheckIdleState>
 8005872:	4603      	mov	r3, r0
}
 8005874:	4618      	mov	r0, r3
 8005876:	3708      	adds	r7, #8
 8005878:	46bd      	mov	sp, r7
 800587a:	bd80      	pop	{r7, pc}

0800587c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800587c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8005880:	b08a      	sub	sp, #40	; 0x28
 8005882:	af00      	add	r7, sp, #0
 8005884:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8005886:	2300      	movs	r3, #0
 8005888:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 800588a:	2300      	movs	r3, #0
 800588c:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 800588e:	2300      	movs	r3, #0
 8005890:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	689a      	ldr	r2, [r3, #8]
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	691b      	ldr	r3, [r3, #16]
 800589a:	431a      	orrs	r2, r3
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	695b      	ldr	r3, [r3, #20]
 80058a0:	431a      	orrs	r2, r3
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	69db      	ldr	r3, [r3, #28]
 80058a6:	4313      	orrs	r3, r2
 80058a8:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	681a      	ldr	r2, [r3, #0]
 80058b0:	4bbc      	ldr	r3, [pc, #752]	; (8005ba4 <UART_SetConfig+0x328>)
 80058b2:	4013      	ands	r3, r2
 80058b4:	687a      	ldr	r2, [r7, #4]
 80058b6:	6812      	ldr	r2, [r2, #0]
 80058b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80058ba:	430b      	orrs	r3, r1
 80058bc:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	68da      	ldr	r2, [r3, #12]
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	430a      	orrs	r2, r1
 80058d2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	699b      	ldr	r3, [r3, #24]
 80058d8:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4ab2      	ldr	r2, [pc, #712]	; (8005ba8 <UART_SetConfig+0x32c>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d004      	beq.n	80058ee <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6a1b      	ldr	r3, [r3, #32]
 80058e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058ea:	4313      	orrs	r3, r2
 80058ec:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	689b      	ldr	r3, [r3, #8]
 80058f4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058fe:	430a      	orrs	r2, r1
 8005900:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4aa9      	ldr	r2, [pc, #676]	; (8005bac <UART_SetConfig+0x330>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d126      	bne.n	800595a <UART_SetConfig+0xde>
 800590c:	4ba8      	ldr	r3, [pc, #672]	; (8005bb0 <UART_SetConfig+0x334>)
 800590e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005912:	f003 0303 	and.w	r3, r3, #3
 8005916:	2b03      	cmp	r3, #3
 8005918:	d81a      	bhi.n	8005950 <UART_SetConfig+0xd4>
 800591a:	a201      	add	r2, pc, #4	; (adr r2, 8005920 <UART_SetConfig+0xa4>)
 800591c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005920:	08005931 	.word	0x08005931
 8005924:	08005941 	.word	0x08005941
 8005928:	08005939 	.word	0x08005939
 800592c:	08005949 	.word	0x08005949
 8005930:	2301      	movs	r3, #1
 8005932:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005936:	e0ab      	b.n	8005a90 <UART_SetConfig+0x214>
 8005938:	2302      	movs	r3, #2
 800593a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800593e:	e0a7      	b.n	8005a90 <UART_SetConfig+0x214>
 8005940:	2304      	movs	r3, #4
 8005942:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005946:	e0a3      	b.n	8005a90 <UART_SetConfig+0x214>
 8005948:	2308      	movs	r3, #8
 800594a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800594e:	e09f      	b.n	8005a90 <UART_SetConfig+0x214>
 8005950:	2310      	movs	r3, #16
 8005952:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005956:	bf00      	nop
 8005958:	e09a      	b.n	8005a90 <UART_SetConfig+0x214>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a95      	ldr	r2, [pc, #596]	; (8005bb4 <UART_SetConfig+0x338>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d138      	bne.n	80059d6 <UART_SetConfig+0x15a>
 8005964:	4b92      	ldr	r3, [pc, #584]	; (8005bb0 <UART_SetConfig+0x334>)
 8005966:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800596a:	f003 030c 	and.w	r3, r3, #12
 800596e:	2b0c      	cmp	r3, #12
 8005970:	d82c      	bhi.n	80059cc <UART_SetConfig+0x150>
 8005972:	a201      	add	r2, pc, #4	; (adr r2, 8005978 <UART_SetConfig+0xfc>)
 8005974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005978:	080059ad 	.word	0x080059ad
 800597c:	080059cd 	.word	0x080059cd
 8005980:	080059cd 	.word	0x080059cd
 8005984:	080059cd 	.word	0x080059cd
 8005988:	080059bd 	.word	0x080059bd
 800598c:	080059cd 	.word	0x080059cd
 8005990:	080059cd 	.word	0x080059cd
 8005994:	080059cd 	.word	0x080059cd
 8005998:	080059b5 	.word	0x080059b5
 800599c:	080059cd 	.word	0x080059cd
 80059a0:	080059cd 	.word	0x080059cd
 80059a4:	080059cd 	.word	0x080059cd
 80059a8:	080059c5 	.word	0x080059c5
 80059ac:	2300      	movs	r3, #0
 80059ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059b2:	e06d      	b.n	8005a90 <UART_SetConfig+0x214>
 80059b4:	2302      	movs	r3, #2
 80059b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059ba:	e069      	b.n	8005a90 <UART_SetConfig+0x214>
 80059bc:	2304      	movs	r3, #4
 80059be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059c2:	e065      	b.n	8005a90 <UART_SetConfig+0x214>
 80059c4:	2308      	movs	r3, #8
 80059c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059ca:	e061      	b.n	8005a90 <UART_SetConfig+0x214>
 80059cc:	2310      	movs	r3, #16
 80059ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059d2:	bf00      	nop
 80059d4:	e05c      	b.n	8005a90 <UART_SetConfig+0x214>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4a77      	ldr	r2, [pc, #476]	; (8005bb8 <UART_SetConfig+0x33c>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d125      	bne.n	8005a2c <UART_SetConfig+0x1b0>
 80059e0:	4b73      	ldr	r3, [pc, #460]	; (8005bb0 <UART_SetConfig+0x334>)
 80059e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059e6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80059ea:	2b10      	cmp	r3, #16
 80059ec:	d011      	beq.n	8005a12 <UART_SetConfig+0x196>
 80059ee:	2b10      	cmp	r3, #16
 80059f0:	d802      	bhi.n	80059f8 <UART_SetConfig+0x17c>
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d005      	beq.n	8005a02 <UART_SetConfig+0x186>
 80059f6:	e014      	b.n	8005a22 <UART_SetConfig+0x1a6>
 80059f8:	2b20      	cmp	r3, #32
 80059fa:	d006      	beq.n	8005a0a <UART_SetConfig+0x18e>
 80059fc:	2b30      	cmp	r3, #48	; 0x30
 80059fe:	d00c      	beq.n	8005a1a <UART_SetConfig+0x19e>
 8005a00:	e00f      	b.n	8005a22 <UART_SetConfig+0x1a6>
 8005a02:	2300      	movs	r3, #0
 8005a04:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a08:	e042      	b.n	8005a90 <UART_SetConfig+0x214>
 8005a0a:	2302      	movs	r3, #2
 8005a0c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a10:	e03e      	b.n	8005a90 <UART_SetConfig+0x214>
 8005a12:	2304      	movs	r3, #4
 8005a14:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a18:	e03a      	b.n	8005a90 <UART_SetConfig+0x214>
 8005a1a:	2308      	movs	r3, #8
 8005a1c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a20:	e036      	b.n	8005a90 <UART_SetConfig+0x214>
 8005a22:	2310      	movs	r3, #16
 8005a24:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a28:	bf00      	nop
 8005a2a:	e031      	b.n	8005a90 <UART_SetConfig+0x214>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a5d      	ldr	r2, [pc, #372]	; (8005ba8 <UART_SetConfig+0x32c>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d129      	bne.n	8005a8a <UART_SetConfig+0x20e>
 8005a36:	4b5e      	ldr	r3, [pc, #376]	; (8005bb0 <UART_SetConfig+0x334>)
 8005a38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a3c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005a40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a44:	d014      	beq.n	8005a70 <UART_SetConfig+0x1f4>
 8005a46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a4a:	d802      	bhi.n	8005a52 <UART_SetConfig+0x1d6>
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d007      	beq.n	8005a60 <UART_SetConfig+0x1e4>
 8005a50:	e016      	b.n	8005a80 <UART_SetConfig+0x204>
 8005a52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a56:	d007      	beq.n	8005a68 <UART_SetConfig+0x1ec>
 8005a58:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005a5c:	d00c      	beq.n	8005a78 <UART_SetConfig+0x1fc>
 8005a5e:	e00f      	b.n	8005a80 <UART_SetConfig+0x204>
 8005a60:	2300      	movs	r3, #0
 8005a62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a66:	e013      	b.n	8005a90 <UART_SetConfig+0x214>
 8005a68:	2302      	movs	r3, #2
 8005a6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a6e:	e00f      	b.n	8005a90 <UART_SetConfig+0x214>
 8005a70:	2304      	movs	r3, #4
 8005a72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a76:	e00b      	b.n	8005a90 <UART_SetConfig+0x214>
 8005a78:	2308      	movs	r3, #8
 8005a7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a7e:	e007      	b.n	8005a90 <UART_SetConfig+0x214>
 8005a80:	2310      	movs	r3, #16
 8005a82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a86:	bf00      	nop
 8005a88:	e002      	b.n	8005a90 <UART_SetConfig+0x214>
 8005a8a:	2310      	movs	r3, #16
 8005a8c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4a44      	ldr	r2, [pc, #272]	; (8005ba8 <UART_SetConfig+0x32c>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	f040 80fb 	bne.w	8005c92 <UART_SetConfig+0x416>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005a9c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005aa0:	2b08      	cmp	r3, #8
 8005aa2:	d824      	bhi.n	8005aee <UART_SetConfig+0x272>
 8005aa4:	a201      	add	r2, pc, #4	; (adr r2, 8005aac <UART_SetConfig+0x230>)
 8005aa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aaa:	bf00      	nop
 8005aac:	08005ad1 	.word	0x08005ad1
 8005ab0:	08005aef 	.word	0x08005aef
 8005ab4:	08005ad9 	.word	0x08005ad9
 8005ab8:	08005aef 	.word	0x08005aef
 8005abc:	08005adf 	.word	0x08005adf
 8005ac0:	08005aef 	.word	0x08005aef
 8005ac4:	08005aef 	.word	0x08005aef
 8005ac8:	08005aef 	.word	0x08005aef
 8005acc:	08005ae7 	.word	0x08005ae7
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8005ad0:	f7ff fac6 	bl	8005060 <HAL_RCC_GetPCLK1Freq>
 8005ad4:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005ad6:	e00d      	b.n	8005af4 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8005ad8:	4b38      	ldr	r3, [pc, #224]	; (8005bbc <UART_SetConfig+0x340>)
 8005ada:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005adc:	e00a      	b.n	8005af4 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8005ade:	f7ff fa29 	bl	8004f34 <HAL_RCC_GetSysClockFreq>
 8005ae2:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005ae4:	e006      	b.n	8005af4 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8005ae6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005aea:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005aec:	e002      	b.n	8005af4 <UART_SetConfig+0x278>
      default:
        ret = HAL_ERROR;
 8005aee:	2301      	movs	r3, #1
 8005af0:	76fb      	strb	r3, [r7, #27]
        break;
 8005af2:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8005af4:	697b      	ldr	r3, [r7, #20]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	f000 81c8 	beq.w	8005e8c <UART_SetConfig+0x610>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	685a      	ldr	r2, [r3, #4]
 8005b00:	4613      	mov	r3, r2
 8005b02:	005b      	lsls	r3, r3, #1
 8005b04:	4413      	add	r3, r2
 8005b06:	697a      	ldr	r2, [r7, #20]
 8005b08:	429a      	cmp	r2, r3
 8005b0a:	d305      	bcc.n	8005b18 <UART_SetConfig+0x29c>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005b12:	697a      	ldr	r2, [r7, #20]
 8005b14:	429a      	cmp	r2, r3
 8005b16:	d902      	bls.n	8005b1e <UART_SetConfig+0x2a2>
      {
        ret = HAL_ERROR;
 8005b18:	2301      	movs	r3, #1
 8005b1a:	76fb      	strb	r3, [r7, #27]
 8005b1c:	e1b6      	b.n	8005e8c <UART_SetConfig+0x610>
      }
      else
      {
        switch (clocksource)
 8005b1e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005b22:	2b08      	cmp	r3, #8
 8005b24:	f200 80a2 	bhi.w	8005c6c <UART_SetConfig+0x3f0>
 8005b28:	a201      	add	r2, pc, #4	; (adr r2, 8005b30 <UART_SetConfig+0x2b4>)
 8005b2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b2e:	bf00      	nop
 8005b30:	08005b55 	.word	0x08005b55
 8005b34:	08005c6d 	.word	0x08005c6d
 8005b38:	08005bc1 	.word	0x08005bc1
 8005b3c:	08005c6d 	.word	0x08005c6d
 8005b40:	08005bf5 	.word	0x08005bf5
 8005b44:	08005c6d 	.word	0x08005c6d
 8005b48:	08005c6d 	.word	0x08005c6d
 8005b4c:	08005c6d 	.word	0x08005c6d
 8005b50:	08005c43 	.word	0x08005c43
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8005b54:	f7ff fa84 	bl	8005060 <HAL_RCC_GetPCLK1Freq>
 8005b58:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005b5a:	693b      	ldr	r3, [r7, #16]
 8005b5c:	4619      	mov	r1, r3
 8005b5e:	f04f 0200 	mov.w	r2, #0
 8005b62:	f04f 0300 	mov.w	r3, #0
 8005b66:	f04f 0400 	mov.w	r4, #0
 8005b6a:	0214      	lsls	r4, r2, #8
 8005b6c:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8005b70:	020b      	lsls	r3, r1, #8
 8005b72:	687a      	ldr	r2, [r7, #4]
 8005b74:	6852      	ldr	r2, [r2, #4]
 8005b76:	0852      	lsrs	r2, r2, #1
 8005b78:	4611      	mov	r1, r2
 8005b7a:	f04f 0200 	mov.w	r2, #0
 8005b7e:	eb13 0b01 	adds.w	fp, r3, r1
 8005b82:	eb44 0c02 	adc.w	ip, r4, r2
 8005b86:	4658      	mov	r0, fp
 8005b88:	4661      	mov	r1, ip
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	685b      	ldr	r3, [r3, #4]
 8005b8e:	f04f 0400 	mov.w	r4, #0
 8005b92:	461a      	mov	r2, r3
 8005b94:	4623      	mov	r3, r4
 8005b96:	f7fb f811 	bl	8000bbc <__aeabi_uldivmod>
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	460c      	mov	r4, r1
 8005b9e:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8005ba0:	e067      	b.n	8005c72 <UART_SetConfig+0x3f6>
 8005ba2:	bf00      	nop
 8005ba4:	efff69f3 	.word	0xefff69f3
 8005ba8:	40008000 	.word	0x40008000
 8005bac:	40013800 	.word	0x40013800
 8005bb0:	40021000 	.word	0x40021000
 8005bb4:	40004400 	.word	0x40004400
 8005bb8:	40004800 	.word	0x40004800
 8005bbc:	00f42400 	.word	0x00f42400
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	085b      	lsrs	r3, r3, #1
 8005bc6:	f04f 0400 	mov.w	r4, #0
 8005bca:	49ae      	ldr	r1, [pc, #696]	; (8005e84 <UART_SetConfig+0x608>)
 8005bcc:	f04f 0200 	mov.w	r2, #0
 8005bd0:	eb13 0b01 	adds.w	fp, r3, r1
 8005bd4:	eb44 0c02 	adc.w	ip, r4, r2
 8005bd8:	4658      	mov	r0, fp
 8005bda:	4661      	mov	r1, ip
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	685b      	ldr	r3, [r3, #4]
 8005be0:	f04f 0400 	mov.w	r4, #0
 8005be4:	461a      	mov	r2, r3
 8005be6:	4623      	mov	r3, r4
 8005be8:	f7fa ffe8 	bl	8000bbc <__aeabi_uldivmod>
 8005bec:	4603      	mov	r3, r0
 8005bee:	460c      	mov	r4, r1
 8005bf0:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8005bf2:	e03e      	b.n	8005c72 <UART_SetConfig+0x3f6>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8005bf4:	f7ff f99e 	bl	8004f34 <HAL_RCC_GetSysClockFreq>
 8005bf8:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005bfa:	693b      	ldr	r3, [r7, #16]
 8005bfc:	4619      	mov	r1, r3
 8005bfe:	f04f 0200 	mov.w	r2, #0
 8005c02:	f04f 0300 	mov.w	r3, #0
 8005c06:	f04f 0400 	mov.w	r4, #0
 8005c0a:	0214      	lsls	r4, r2, #8
 8005c0c:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8005c10:	020b      	lsls	r3, r1, #8
 8005c12:	687a      	ldr	r2, [r7, #4]
 8005c14:	6852      	ldr	r2, [r2, #4]
 8005c16:	0852      	lsrs	r2, r2, #1
 8005c18:	4611      	mov	r1, r2
 8005c1a:	f04f 0200 	mov.w	r2, #0
 8005c1e:	eb13 0b01 	adds.w	fp, r3, r1
 8005c22:	eb44 0c02 	adc.w	ip, r4, r2
 8005c26:	4658      	mov	r0, fp
 8005c28:	4661      	mov	r1, ip
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	685b      	ldr	r3, [r3, #4]
 8005c2e:	f04f 0400 	mov.w	r4, #0
 8005c32:	461a      	mov	r2, r3
 8005c34:	4623      	mov	r3, r4
 8005c36:	f7fa ffc1 	bl	8000bbc <__aeabi_uldivmod>
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	460c      	mov	r4, r1
 8005c3e:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8005c40:	e017      	b.n	8005c72 <UART_SetConfig+0x3f6>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	085b      	lsrs	r3, r3, #1
 8005c48:	f04f 0400 	mov.w	r4, #0
 8005c4c:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8005c50:	f144 0100 	adc.w	r1, r4, #0
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	685b      	ldr	r3, [r3, #4]
 8005c58:	f04f 0400 	mov.w	r4, #0
 8005c5c:	461a      	mov	r2, r3
 8005c5e:	4623      	mov	r3, r4
 8005c60:	f7fa ffac 	bl	8000bbc <__aeabi_uldivmod>
 8005c64:	4603      	mov	r3, r0
 8005c66:	460c      	mov	r4, r1
 8005c68:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8005c6a:	e002      	b.n	8005c72 <UART_SetConfig+0x3f6>
          default:
            ret = HAL_ERROR;
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	76fb      	strb	r3, [r7, #27]
            break;
 8005c70:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005c72:	69fb      	ldr	r3, [r7, #28]
 8005c74:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c78:	d308      	bcc.n	8005c8c <UART_SetConfig+0x410>
 8005c7a:	69fb      	ldr	r3, [r7, #28]
 8005c7c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c80:	d204      	bcs.n	8005c8c <UART_SetConfig+0x410>
        {
          huart->Instance->BRR = usartdiv;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	69fa      	ldr	r2, [r7, #28]
 8005c88:	60da      	str	r2, [r3, #12]
 8005c8a:	e0ff      	b.n	8005e8c <UART_SetConfig+0x610>
        }
        else
        {
          ret = HAL_ERROR;
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	76fb      	strb	r3, [r7, #27]
 8005c90:	e0fc      	b.n	8005e8c <UART_SetConfig+0x610>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	69db      	ldr	r3, [r3, #28]
 8005c96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c9a:	f040 8083 	bne.w	8005da4 <UART_SetConfig+0x528>
  {
    switch (clocksource)
 8005c9e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005ca2:	2b08      	cmp	r3, #8
 8005ca4:	d85e      	bhi.n	8005d64 <UART_SetConfig+0x4e8>
 8005ca6:	a201      	add	r2, pc, #4	; (adr r2, 8005cac <UART_SetConfig+0x430>)
 8005ca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cac:	08005cd1 	.word	0x08005cd1
 8005cb0:	08005cf1 	.word	0x08005cf1
 8005cb4:	08005d11 	.word	0x08005d11
 8005cb8:	08005d65 	.word	0x08005d65
 8005cbc:	08005d2d 	.word	0x08005d2d
 8005cc0:	08005d65 	.word	0x08005d65
 8005cc4:	08005d65 	.word	0x08005d65
 8005cc8:	08005d65 	.word	0x08005d65
 8005ccc:	08005d4d 	.word	0x08005d4d
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005cd0:	f7ff f9c6 	bl	8005060 <HAL_RCC_GetPCLK1Freq>
 8005cd4:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005cd6:	693b      	ldr	r3, [r7, #16]
 8005cd8:	005a      	lsls	r2, r3, #1
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	085b      	lsrs	r3, r3, #1
 8005ce0:	441a      	add	r2, r3
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	685b      	ldr	r3, [r3, #4]
 8005ce6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cea:	b29b      	uxth	r3, r3
 8005cec:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005cee:	e03c      	b.n	8005d6a <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005cf0:	f7ff f9cc 	bl	800508c <HAL_RCC_GetPCLK2Freq>
 8005cf4:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005cf6:	693b      	ldr	r3, [r7, #16]
 8005cf8:	005a      	lsls	r2, r3, #1
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	085b      	lsrs	r3, r3, #1
 8005d00:	441a      	add	r2, r3
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	685b      	ldr	r3, [r3, #4]
 8005d06:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d0a:	b29b      	uxth	r3, r3
 8005d0c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005d0e:	e02c      	b.n	8005d6a <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	685b      	ldr	r3, [r3, #4]
 8005d14:	085b      	lsrs	r3, r3, #1
 8005d16:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8005d1a:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8005d1e:	687a      	ldr	r2, [r7, #4]
 8005d20:	6852      	ldr	r2, [r2, #4]
 8005d22:	fbb3 f3f2 	udiv	r3, r3, r2
 8005d26:	b29b      	uxth	r3, r3
 8005d28:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005d2a:	e01e      	b.n	8005d6a <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d2c:	f7ff f902 	bl	8004f34 <HAL_RCC_GetSysClockFreq>
 8005d30:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005d32:	693b      	ldr	r3, [r7, #16]
 8005d34:	005a      	lsls	r2, r3, #1
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	685b      	ldr	r3, [r3, #4]
 8005d3a:	085b      	lsrs	r3, r3, #1
 8005d3c:	441a      	add	r2, r3
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d46:	b29b      	uxth	r3, r3
 8005d48:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005d4a:	e00e      	b.n	8005d6a <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	085b      	lsrs	r3, r3, #1
 8005d52:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	685b      	ldr	r3, [r3, #4]
 8005d5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d5e:	b29b      	uxth	r3, r3
 8005d60:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005d62:	e002      	b.n	8005d6a <UART_SetConfig+0x4ee>
      default:
        ret = HAL_ERROR;
 8005d64:	2301      	movs	r3, #1
 8005d66:	76fb      	strb	r3, [r7, #27]
        break;
 8005d68:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d6a:	69fb      	ldr	r3, [r7, #28]
 8005d6c:	2b0f      	cmp	r3, #15
 8005d6e:	d916      	bls.n	8005d9e <UART_SetConfig+0x522>
 8005d70:	69fb      	ldr	r3, [r7, #28]
 8005d72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d76:	d212      	bcs.n	8005d9e <UART_SetConfig+0x522>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005d78:	69fb      	ldr	r3, [r7, #28]
 8005d7a:	b29b      	uxth	r3, r3
 8005d7c:	f023 030f 	bic.w	r3, r3, #15
 8005d80:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005d82:	69fb      	ldr	r3, [r7, #28]
 8005d84:	085b      	lsrs	r3, r3, #1
 8005d86:	b29b      	uxth	r3, r3
 8005d88:	f003 0307 	and.w	r3, r3, #7
 8005d8c:	b29a      	uxth	r2, r3
 8005d8e:	89fb      	ldrh	r3, [r7, #14]
 8005d90:	4313      	orrs	r3, r2
 8005d92:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	89fa      	ldrh	r2, [r7, #14]
 8005d9a:	60da      	str	r2, [r3, #12]
 8005d9c:	e076      	b.n	8005e8c <UART_SetConfig+0x610>
    }
    else
    {
      ret = HAL_ERROR;
 8005d9e:	2301      	movs	r3, #1
 8005da0:	76fb      	strb	r3, [r7, #27]
 8005da2:	e073      	b.n	8005e8c <UART_SetConfig+0x610>
    }
  }
  else
  {
    switch (clocksource)
 8005da4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005da8:	2b08      	cmp	r3, #8
 8005daa:	d85c      	bhi.n	8005e66 <UART_SetConfig+0x5ea>
 8005dac:	a201      	add	r2, pc, #4	; (adr r2, 8005db4 <UART_SetConfig+0x538>)
 8005dae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005db2:	bf00      	nop
 8005db4:	08005dd9 	.word	0x08005dd9
 8005db8:	08005df7 	.word	0x08005df7
 8005dbc:	08005e15 	.word	0x08005e15
 8005dc0:	08005e67 	.word	0x08005e67
 8005dc4:	08005e31 	.word	0x08005e31
 8005dc8:	08005e67 	.word	0x08005e67
 8005dcc:	08005e67 	.word	0x08005e67
 8005dd0:	08005e67 	.word	0x08005e67
 8005dd4:	08005e4f 	.word	0x08005e4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005dd8:	f7ff f942 	bl	8005060 <HAL_RCC_GetPCLK1Freq>
 8005ddc:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	685b      	ldr	r3, [r3, #4]
 8005de2:	085a      	lsrs	r2, r3, #1
 8005de4:	693b      	ldr	r3, [r7, #16]
 8005de6:	441a      	add	r2, r3
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	685b      	ldr	r3, [r3, #4]
 8005dec:	fbb2 f3f3 	udiv	r3, r2, r3
 8005df0:	b29b      	uxth	r3, r3
 8005df2:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005df4:	e03a      	b.n	8005e6c <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005df6:	f7ff f949 	bl	800508c <HAL_RCC_GetPCLK2Freq>
 8005dfa:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	685b      	ldr	r3, [r3, #4]
 8005e00:	085a      	lsrs	r2, r3, #1
 8005e02:	693b      	ldr	r3, [r7, #16]
 8005e04:	441a      	add	r2, r3
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	685b      	ldr	r3, [r3, #4]
 8005e0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e0e:	b29b      	uxth	r3, r3
 8005e10:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005e12:	e02b      	b.n	8005e6c <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	685b      	ldr	r3, [r3, #4]
 8005e18:	085b      	lsrs	r3, r3, #1
 8005e1a:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8005e1e:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8005e22:	687a      	ldr	r2, [r7, #4]
 8005e24:	6852      	ldr	r2, [r2, #4]
 8005e26:	fbb3 f3f2 	udiv	r3, r3, r2
 8005e2a:	b29b      	uxth	r3, r3
 8005e2c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005e2e:	e01d      	b.n	8005e6c <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e30:	f7ff f880 	bl	8004f34 <HAL_RCC_GetSysClockFreq>
 8005e34:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	685b      	ldr	r3, [r3, #4]
 8005e3a:	085a      	lsrs	r2, r3, #1
 8005e3c:	693b      	ldr	r3, [r7, #16]
 8005e3e:	441a      	add	r2, r3
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	685b      	ldr	r3, [r3, #4]
 8005e44:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e48:	b29b      	uxth	r3, r3
 8005e4a:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005e4c:	e00e      	b.n	8005e6c <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	685b      	ldr	r3, [r3, #4]
 8005e52:	085b      	lsrs	r3, r3, #1
 8005e54:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	685b      	ldr	r3, [r3, #4]
 8005e5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e60:	b29b      	uxth	r3, r3
 8005e62:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005e64:	e002      	b.n	8005e6c <UART_SetConfig+0x5f0>
      default:
        ret = HAL_ERROR;
 8005e66:	2301      	movs	r3, #1
 8005e68:	76fb      	strb	r3, [r7, #27]
        break;
 8005e6a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e6c:	69fb      	ldr	r3, [r7, #28]
 8005e6e:	2b0f      	cmp	r3, #15
 8005e70:	d90a      	bls.n	8005e88 <UART_SetConfig+0x60c>
 8005e72:	69fb      	ldr	r3, [r7, #28]
 8005e74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e78:	d206      	bcs.n	8005e88 <UART_SetConfig+0x60c>
    {
      huart->Instance->BRR = usartdiv;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	69fa      	ldr	r2, [r7, #28]
 8005e80:	60da      	str	r2, [r3, #12]
 8005e82:	e003      	b.n	8005e8c <UART_SetConfig+0x610>
 8005e84:	f4240000 	.word	0xf4240000
    }
    else
    {
      ret = HAL_ERROR;
 8005e88:	2301      	movs	r3, #1
 8005e8a:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2200      	movs	r2, #0
 8005e96:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8005e98:	7efb      	ldrb	r3, [r7, #27]
}
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	3728      	adds	r7, #40	; 0x28
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08005ea4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b083      	sub	sp, #12
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eb0:	f003 0301 	and.w	r3, r3, #1
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d00a      	beq.n	8005ece <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	685b      	ldr	r3, [r3, #4]
 8005ebe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	430a      	orrs	r2, r1
 8005ecc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ed2:	f003 0302 	and.w	r3, r3, #2
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d00a      	beq.n	8005ef0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	685b      	ldr	r3, [r3, #4]
 8005ee0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	430a      	orrs	r2, r1
 8005eee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ef4:	f003 0304 	and.w	r3, r3, #4
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d00a      	beq.n	8005f12 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	430a      	orrs	r2, r1
 8005f10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f16:	f003 0308 	and.w	r3, r3, #8
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d00a      	beq.n	8005f34 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	685b      	ldr	r3, [r3, #4]
 8005f24:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	430a      	orrs	r2, r1
 8005f32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f38:	f003 0310 	and.w	r3, r3, #16
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d00a      	beq.n	8005f56 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	689b      	ldr	r3, [r3, #8]
 8005f46:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	430a      	orrs	r2, r1
 8005f54:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f5a:	f003 0320 	and.w	r3, r3, #32
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d00a      	beq.n	8005f78 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	689b      	ldr	r3, [r3, #8]
 8005f68:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	430a      	orrs	r2, r1
 8005f76:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d01a      	beq.n	8005fba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	685b      	ldr	r3, [r3, #4]
 8005f8a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	430a      	orrs	r2, r1
 8005f98:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005fa2:	d10a      	bne.n	8005fba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	430a      	orrs	r2, r1
 8005fb8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d00a      	beq.n	8005fdc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	685b      	ldr	r3, [r3, #4]
 8005fcc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	430a      	orrs	r2, r1
 8005fda:	605a      	str	r2, [r3, #4]
  }
}
 8005fdc:	bf00      	nop
 8005fde:	370c      	adds	r7, #12
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe6:	4770      	bx	lr

08005fe8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b086      	sub	sp, #24
 8005fec:	af02      	add	r7, sp, #8
 8005fee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005ff6:	f7fb ff21 	bl	8001e3c <HAL_GetTick>
 8005ffa:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f003 0308 	and.w	r3, r3, #8
 8006006:	2b08      	cmp	r3, #8
 8006008:	d10e      	bne.n	8006028 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800600a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800600e:	9300      	str	r3, [sp, #0]
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	2200      	movs	r2, #0
 8006014:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006018:	6878      	ldr	r0, [r7, #4]
 800601a:	f000 f82a 	bl	8006072 <UART_WaitOnFlagUntilTimeout>
 800601e:	4603      	mov	r3, r0
 8006020:	2b00      	cmp	r3, #0
 8006022:	d001      	beq.n	8006028 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006024:	2303      	movs	r3, #3
 8006026:	e020      	b.n	800606a <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f003 0304 	and.w	r3, r3, #4
 8006032:	2b04      	cmp	r3, #4
 8006034:	d10e      	bne.n	8006054 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006036:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800603a:	9300      	str	r3, [sp, #0]
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	2200      	movs	r2, #0
 8006040:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006044:	6878      	ldr	r0, [r7, #4]
 8006046:	f000 f814 	bl	8006072 <UART_WaitOnFlagUntilTimeout>
 800604a:	4603      	mov	r3, r0
 800604c:	2b00      	cmp	r3, #0
 800604e:	d001      	beq.n	8006054 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006050:	2303      	movs	r3, #3
 8006052:	e00a      	b.n	800606a <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2220      	movs	r2, #32
 8006058:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2220      	movs	r2, #32
 800605e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2200      	movs	r2, #0
 8006064:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8006068:	2300      	movs	r3, #0
}
 800606a:	4618      	mov	r0, r3
 800606c:	3710      	adds	r7, #16
 800606e:	46bd      	mov	sp, r7
 8006070:	bd80      	pop	{r7, pc}

08006072 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006072:	b580      	push	{r7, lr}
 8006074:	b084      	sub	sp, #16
 8006076:	af00      	add	r7, sp, #0
 8006078:	60f8      	str	r0, [r7, #12]
 800607a:	60b9      	str	r1, [r7, #8]
 800607c:	603b      	str	r3, [r7, #0]
 800607e:	4613      	mov	r3, r2
 8006080:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006082:	e05d      	b.n	8006140 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006084:	69bb      	ldr	r3, [r7, #24]
 8006086:	f1b3 3fff 	cmp.w	r3, #4294967295
 800608a:	d059      	beq.n	8006140 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800608c:	f7fb fed6 	bl	8001e3c <HAL_GetTick>
 8006090:	4602      	mov	r2, r0
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	1ad3      	subs	r3, r2, r3
 8006096:	69ba      	ldr	r2, [r7, #24]
 8006098:	429a      	cmp	r2, r3
 800609a:	d302      	bcc.n	80060a2 <UART_WaitOnFlagUntilTimeout+0x30>
 800609c:	69bb      	ldr	r3, [r7, #24]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d11b      	bne.n	80060da <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	681a      	ldr	r2, [r3, #0]
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80060b0:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	689a      	ldr	r2, [r3, #8]
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f022 0201 	bic.w	r2, r2, #1
 80060c0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	2220      	movs	r2, #32
 80060c6:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	2220      	movs	r2, #32
 80060cc:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	2200      	movs	r2, #0
 80060d2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80060d6:	2303      	movs	r3, #3
 80060d8:	e042      	b.n	8006160 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f003 0304 	and.w	r3, r3, #4
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d02b      	beq.n	8006140 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	69db      	ldr	r3, [r3, #28]
 80060ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80060f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060f6:	d123      	bne.n	8006140 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006100:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	681a      	ldr	r2, [r3, #0]
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006110:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	689a      	ldr	r2, [r3, #8]
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f022 0201 	bic.w	r2, r2, #1
 8006120:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	2220      	movs	r2, #32
 8006126:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	2220      	movs	r2, #32
 800612c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	2220      	movs	r2, #32
 8006132:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	2200      	movs	r2, #0
 8006138:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800613c:	2303      	movs	r3, #3
 800613e:	e00f      	b.n	8006160 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	69da      	ldr	r2, [r3, #28]
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	4013      	ands	r3, r2
 800614a:	68ba      	ldr	r2, [r7, #8]
 800614c:	429a      	cmp	r2, r3
 800614e:	bf0c      	ite	eq
 8006150:	2301      	moveq	r3, #1
 8006152:	2300      	movne	r3, #0
 8006154:	b2db      	uxtb	r3, r3
 8006156:	461a      	mov	r2, r3
 8006158:	79fb      	ldrb	r3, [r7, #7]
 800615a:	429a      	cmp	r2, r3
 800615c:	d092      	beq.n	8006084 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800615e:	2300      	movs	r3, #0
}
 8006160:	4618      	mov	r0, r3
 8006162:	3710      	adds	r7, #16
 8006164:	46bd      	mov	sp, r7
 8006166:	bd80      	pop	{r7, pc}

08006168 <gcvt>:
 8006168:	b530      	push	{r4, r5, lr}
 800616a:	ed2d 8b02 	vpush	{d8}
 800616e:	eeb0 8a40 	vmov.f32	s16, s0
 8006172:	eef0 8a60 	vmov.f32	s17, s1
 8006176:	460c      	mov	r4, r1
 8006178:	2200      	movs	r2, #0
 800617a:	b083      	sub	sp, #12
 800617c:	4605      	mov	r5, r0
 800617e:	2300      	movs	r3, #0
 8006180:	ec51 0b10 	vmov	r0, r1, d0
 8006184:	f7fa fc5a 	bl	8000a3c <__aeabi_dcmplt>
 8006188:	4622      	mov	r2, r4
 800618a:	b118      	cbz	r0, 8006194 <gcvt+0x2c>
 800618c:	232d      	movs	r3, #45	; 0x2d
 800618e:	f802 3b01 	strb.w	r3, [r2], #1
 8006192:	3d01      	subs	r5, #1
 8006194:	2300      	movs	r3, #0
 8006196:	4809      	ldr	r0, [pc, #36]	; (80061bc <gcvt+0x54>)
 8006198:	9300      	str	r3, [sp, #0]
 800619a:	4629      	mov	r1, r5
 800619c:	2367      	movs	r3, #103	; 0x67
 800619e:	eeb0 0a48 	vmov.f32	s0, s16
 80061a2:	eef0 0a68 	vmov.f32	s1, s17
 80061a6:	6800      	ldr	r0, [r0, #0]
 80061a8:	f000 f92a 	bl	8006400 <_gcvt>
 80061ac:	2800      	cmp	r0, #0
 80061ae:	bf14      	ite	ne
 80061b0:	4620      	movne	r0, r4
 80061b2:	2000      	moveq	r0, #0
 80061b4:	b003      	add	sp, #12
 80061b6:	ecbd 8b02 	vpop	{d8}
 80061ba:	bd30      	pop	{r4, r5, pc}
 80061bc:	20000014 	.word	0x20000014

080061c0 <__errno>:
 80061c0:	4b01      	ldr	r3, [pc, #4]	; (80061c8 <__errno+0x8>)
 80061c2:	6818      	ldr	r0, [r3, #0]
 80061c4:	4770      	bx	lr
 80061c6:	bf00      	nop
 80061c8:	20000014 	.word	0x20000014

080061cc <__libc_init_array>:
 80061cc:	b570      	push	{r4, r5, r6, lr}
 80061ce:	4e0d      	ldr	r6, [pc, #52]	; (8006204 <__libc_init_array+0x38>)
 80061d0:	4c0d      	ldr	r4, [pc, #52]	; (8006208 <__libc_init_array+0x3c>)
 80061d2:	1ba4      	subs	r4, r4, r6
 80061d4:	10a4      	asrs	r4, r4, #2
 80061d6:	2500      	movs	r5, #0
 80061d8:	42a5      	cmp	r5, r4
 80061da:	d109      	bne.n	80061f0 <__libc_init_array+0x24>
 80061dc:	4e0b      	ldr	r6, [pc, #44]	; (800620c <__libc_init_array+0x40>)
 80061de:	4c0c      	ldr	r4, [pc, #48]	; (8006210 <__libc_init_array+0x44>)
 80061e0:	f001 fb32 	bl	8007848 <_init>
 80061e4:	1ba4      	subs	r4, r4, r6
 80061e6:	10a4      	asrs	r4, r4, #2
 80061e8:	2500      	movs	r5, #0
 80061ea:	42a5      	cmp	r5, r4
 80061ec:	d105      	bne.n	80061fa <__libc_init_array+0x2e>
 80061ee:	bd70      	pop	{r4, r5, r6, pc}
 80061f0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80061f4:	4798      	blx	r3
 80061f6:	3501      	adds	r5, #1
 80061f8:	e7ee      	b.n	80061d8 <__libc_init_array+0xc>
 80061fa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80061fe:	4798      	blx	r3
 8006200:	3501      	adds	r5, #1
 8006202:	e7f2      	b.n	80061ea <__libc_init_array+0x1e>
 8006204:	08007c34 	.word	0x08007c34
 8006208:	08007c34 	.word	0x08007c34
 800620c:	08007c34 	.word	0x08007c34
 8006210:	08007c38 	.word	0x08007c38

08006214 <malloc>:
 8006214:	4b02      	ldr	r3, [pc, #8]	; (8006220 <malloc+0xc>)
 8006216:	4601      	mov	r1, r0
 8006218:	6818      	ldr	r0, [r3, #0]
 800621a:	f000 b80b 	b.w	8006234 <_malloc_r>
 800621e:	bf00      	nop
 8006220:	20000014 	.word	0x20000014

08006224 <memset>:
 8006224:	4402      	add	r2, r0
 8006226:	4603      	mov	r3, r0
 8006228:	4293      	cmp	r3, r2
 800622a:	d100      	bne.n	800622e <memset+0xa>
 800622c:	4770      	bx	lr
 800622e:	f803 1b01 	strb.w	r1, [r3], #1
 8006232:	e7f9      	b.n	8006228 <memset+0x4>

08006234 <_malloc_r>:
 8006234:	b570      	push	{r4, r5, r6, lr}
 8006236:	1ccd      	adds	r5, r1, #3
 8006238:	f025 0503 	bic.w	r5, r5, #3
 800623c:	3508      	adds	r5, #8
 800623e:	2d0c      	cmp	r5, #12
 8006240:	bf38      	it	cc
 8006242:	250c      	movcc	r5, #12
 8006244:	2d00      	cmp	r5, #0
 8006246:	4606      	mov	r6, r0
 8006248:	db01      	blt.n	800624e <_malloc_r+0x1a>
 800624a:	42a9      	cmp	r1, r5
 800624c:	d903      	bls.n	8006256 <_malloc_r+0x22>
 800624e:	230c      	movs	r3, #12
 8006250:	6033      	str	r3, [r6, #0]
 8006252:	2000      	movs	r0, #0
 8006254:	bd70      	pop	{r4, r5, r6, pc}
 8006256:	f000 f99d 	bl	8006594 <__malloc_lock>
 800625a:	4a21      	ldr	r2, [pc, #132]	; (80062e0 <_malloc_r+0xac>)
 800625c:	6814      	ldr	r4, [r2, #0]
 800625e:	4621      	mov	r1, r4
 8006260:	b991      	cbnz	r1, 8006288 <_malloc_r+0x54>
 8006262:	4c20      	ldr	r4, [pc, #128]	; (80062e4 <_malloc_r+0xb0>)
 8006264:	6823      	ldr	r3, [r4, #0]
 8006266:	b91b      	cbnz	r3, 8006270 <_malloc_r+0x3c>
 8006268:	4630      	mov	r0, r6
 800626a:	f000 f83d 	bl	80062e8 <_sbrk_r>
 800626e:	6020      	str	r0, [r4, #0]
 8006270:	4629      	mov	r1, r5
 8006272:	4630      	mov	r0, r6
 8006274:	f000 f838 	bl	80062e8 <_sbrk_r>
 8006278:	1c43      	adds	r3, r0, #1
 800627a:	d124      	bne.n	80062c6 <_malloc_r+0x92>
 800627c:	230c      	movs	r3, #12
 800627e:	6033      	str	r3, [r6, #0]
 8006280:	4630      	mov	r0, r6
 8006282:	f000 f988 	bl	8006596 <__malloc_unlock>
 8006286:	e7e4      	b.n	8006252 <_malloc_r+0x1e>
 8006288:	680b      	ldr	r3, [r1, #0]
 800628a:	1b5b      	subs	r3, r3, r5
 800628c:	d418      	bmi.n	80062c0 <_malloc_r+0x8c>
 800628e:	2b0b      	cmp	r3, #11
 8006290:	d90f      	bls.n	80062b2 <_malloc_r+0x7e>
 8006292:	600b      	str	r3, [r1, #0]
 8006294:	50cd      	str	r5, [r1, r3]
 8006296:	18cc      	adds	r4, r1, r3
 8006298:	4630      	mov	r0, r6
 800629a:	f000 f97c 	bl	8006596 <__malloc_unlock>
 800629e:	f104 000b 	add.w	r0, r4, #11
 80062a2:	1d23      	adds	r3, r4, #4
 80062a4:	f020 0007 	bic.w	r0, r0, #7
 80062a8:	1ac3      	subs	r3, r0, r3
 80062aa:	d0d3      	beq.n	8006254 <_malloc_r+0x20>
 80062ac:	425a      	negs	r2, r3
 80062ae:	50e2      	str	r2, [r4, r3]
 80062b0:	e7d0      	b.n	8006254 <_malloc_r+0x20>
 80062b2:	428c      	cmp	r4, r1
 80062b4:	684b      	ldr	r3, [r1, #4]
 80062b6:	bf16      	itet	ne
 80062b8:	6063      	strne	r3, [r4, #4]
 80062ba:	6013      	streq	r3, [r2, #0]
 80062bc:	460c      	movne	r4, r1
 80062be:	e7eb      	b.n	8006298 <_malloc_r+0x64>
 80062c0:	460c      	mov	r4, r1
 80062c2:	6849      	ldr	r1, [r1, #4]
 80062c4:	e7cc      	b.n	8006260 <_malloc_r+0x2c>
 80062c6:	1cc4      	adds	r4, r0, #3
 80062c8:	f024 0403 	bic.w	r4, r4, #3
 80062cc:	42a0      	cmp	r0, r4
 80062ce:	d005      	beq.n	80062dc <_malloc_r+0xa8>
 80062d0:	1a21      	subs	r1, r4, r0
 80062d2:	4630      	mov	r0, r6
 80062d4:	f000 f808 	bl	80062e8 <_sbrk_r>
 80062d8:	3001      	adds	r0, #1
 80062da:	d0cf      	beq.n	800627c <_malloc_r+0x48>
 80062dc:	6025      	str	r5, [r4, #0]
 80062de:	e7db      	b.n	8006298 <_malloc_r+0x64>
 80062e0:	200000a0 	.word	0x200000a0
 80062e4:	200000a4 	.word	0x200000a4

080062e8 <_sbrk_r>:
 80062e8:	b538      	push	{r3, r4, r5, lr}
 80062ea:	4c06      	ldr	r4, [pc, #24]	; (8006304 <_sbrk_r+0x1c>)
 80062ec:	2300      	movs	r3, #0
 80062ee:	4605      	mov	r5, r0
 80062f0:	4608      	mov	r0, r1
 80062f2:	6023      	str	r3, [r4, #0]
 80062f4:	f7fb fa56 	bl	80017a4 <_sbrk>
 80062f8:	1c43      	adds	r3, r0, #1
 80062fa:	d102      	bne.n	8006302 <_sbrk_r+0x1a>
 80062fc:	6823      	ldr	r3, [r4, #0]
 80062fe:	b103      	cbz	r3, 8006302 <_sbrk_r+0x1a>
 8006300:	602b      	str	r3, [r5, #0]
 8006302:	bd38      	pop	{r3, r4, r5, pc}
 8006304:	20000644 	.word	0x20000644

08006308 <strcpy>:
 8006308:	4603      	mov	r3, r0
 800630a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800630e:	f803 2b01 	strb.w	r2, [r3], #1
 8006312:	2a00      	cmp	r2, #0
 8006314:	d1f9      	bne.n	800630a <strcpy+0x2>
 8006316:	4770      	bx	lr

08006318 <print_e>:
 8006318:	b5f0      	push	{r4, r5, r6, r7, lr}
 800631a:	b087      	sub	sp, #28
 800631c:	ec43 2b10 	vmov	d0, r2, r3
 8006320:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8006322:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 8006326:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8006328:	ab04      	add	r3, sp, #16
 800632a:	9301      	str	r3, [sp, #4]
 800632c:	ab03      	add	r3, sp, #12
 800632e:	9300      	str	r3, [sp, #0]
 8006330:	460f      	mov	r7, r1
 8006332:	ab05      	add	r3, sp, #20
 8006334:	2102      	movs	r1, #2
 8006336:	1c62      	adds	r2, r4, #1
 8006338:	f000 fcc2 	bl	8006cc0 <_dtoa_r>
 800633c:	4601      	mov	r1, r0
 800633e:	9805      	ldr	r0, [sp, #20]
 8006340:	f242 730f 	movw	r3, #9999	; 0x270f
 8006344:	4298      	cmp	r0, r3
 8006346:	d104      	bne.n	8006352 <print_e+0x3a>
 8006348:	4638      	mov	r0, r7
 800634a:	f7ff ffdd 	bl	8006308 <strcpy>
 800634e:	b007      	add	sp, #28
 8006350:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006352:	780b      	ldrb	r3, [r1, #0]
 8006354:	703b      	strb	r3, [r7, #0]
 8006356:	2d00      	cmp	r5, #0
 8006358:	d143      	bne.n	80063e2 <print_e+0xca>
 800635a:	2c00      	cmp	r4, #0
 800635c:	d141      	bne.n	80063e2 <print_e+0xca>
 800635e:	1c7b      	adds	r3, r7, #1
 8006360:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8006364:	b10a      	cbz	r2, 800636a <print_e+0x52>
 8006366:	2c00      	cmp	r4, #0
 8006368:	dc3f      	bgt.n	80063ea <print_e+0xd2>
 800636a:	2e67      	cmp	r6, #103	; 0x67
 800636c:	d044      	beq.n	80063f8 <print_e+0xe0>
 800636e:	2e47      	cmp	r6, #71	; 0x47
 8006370:	d044      	beq.n	80063fc <print_e+0xe4>
 8006372:	461a      	mov	r2, r3
 8006374:	191d      	adds	r5, r3, r4
 8006376:	2730      	movs	r7, #48	; 0x30
 8006378:	1aa9      	subs	r1, r5, r2
 800637a:	2900      	cmp	r1, #0
 800637c:	dc39      	bgt.n	80063f2 <print_e+0xda>
 800637e:	2c00      	cmp	r4, #0
 8006380:	bfa8      	it	ge
 8006382:	191b      	addge	r3, r3, r4
 8006384:	1e41      	subs	r1, r0, #1
 8006386:	2900      	cmp	r1, #0
 8006388:	bfb8      	it	lt
 800638a:	f1c0 0001 	rsblt	r0, r0, #1
 800638e:	9105      	str	r1, [sp, #20]
 8006390:	bfb8      	it	lt
 8006392:	9005      	strlt	r0, [sp, #20]
 8006394:	461a      	mov	r2, r3
 8006396:	9805      	ldr	r0, [sp, #20]
 8006398:	f802 6b02 	strb.w	r6, [r2], #2
 800639c:	bfb5      	itete	lt
 800639e:	212d      	movlt	r1, #45	; 0x2d
 80063a0:	212b      	movge	r1, #43	; 0x2b
 80063a2:	7059      	strblt	r1, [r3, #1]
 80063a4:	7059      	strbge	r1, [r3, #1]
 80063a6:	2863      	cmp	r0, #99	; 0x63
 80063a8:	dd0b      	ble.n	80063c2 <print_e+0xaa>
 80063aa:	2164      	movs	r1, #100	; 0x64
 80063ac:	fb90 f1f1 	sdiv	r1, r0, r1
 80063b0:	f101 0430 	add.w	r4, r1, #48	; 0x30
 80063b4:	1cda      	adds	r2, r3, #3
 80063b6:	709c      	strb	r4, [r3, #2]
 80063b8:	f06f 0363 	mvn.w	r3, #99	; 0x63
 80063bc:	fb03 0101 	mla	r1, r3, r1, r0
 80063c0:	9105      	str	r1, [sp, #20]
 80063c2:	9905      	ldr	r1, [sp, #20]
 80063c4:	230a      	movs	r3, #10
 80063c6:	fb91 f3f3 	sdiv	r3, r1, r3
 80063ca:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80063ce:	7010      	strb	r0, [r2, #0]
 80063d0:	f06f 0009 	mvn.w	r0, #9
 80063d4:	fb00 1303 	mla	r3, r0, r3, r1
 80063d8:	3330      	adds	r3, #48	; 0x30
 80063da:	7053      	strb	r3, [r2, #1]
 80063dc:	2300      	movs	r3, #0
 80063de:	7093      	strb	r3, [r2, #2]
 80063e0:	e7b5      	b.n	800634e <print_e+0x36>
 80063e2:	222e      	movs	r2, #46	; 0x2e
 80063e4:	1cbb      	adds	r3, r7, #2
 80063e6:	707a      	strb	r2, [r7, #1]
 80063e8:	e7ba      	b.n	8006360 <print_e+0x48>
 80063ea:	f803 2b01 	strb.w	r2, [r3], #1
 80063ee:	3c01      	subs	r4, #1
 80063f0:	e7b6      	b.n	8006360 <print_e+0x48>
 80063f2:	f802 7b01 	strb.w	r7, [r2], #1
 80063f6:	e7bf      	b.n	8006378 <print_e+0x60>
 80063f8:	2665      	movs	r6, #101	; 0x65
 80063fa:	e7c3      	b.n	8006384 <print_e+0x6c>
 80063fc:	2645      	movs	r6, #69	; 0x45
 80063fe:	e7c1      	b.n	8006384 <print_e+0x6c>

08006400 <_gcvt>:
 8006400:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006404:	ec55 4b10 	vmov	r4, r5, d0
 8006408:	b088      	sub	sp, #32
 800640a:	4681      	mov	r9, r0
 800640c:	460f      	mov	r7, r1
 800640e:	4616      	mov	r6, r2
 8006410:	469a      	mov	sl, r3
 8006412:	2200      	movs	r2, #0
 8006414:	2300      	movs	r3, #0
 8006416:	ee10 0a10 	vmov	r0, s0
 800641a:	4629      	mov	r1, r5
 800641c:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 8006420:	f7fa fb0c 	bl	8000a3c <__aeabi_dcmplt>
 8006424:	b110      	cbz	r0, 800642c <_gcvt+0x2c>
 8006426:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800642a:	461d      	mov	r5, r3
 800642c:	2200      	movs	r2, #0
 800642e:	2300      	movs	r3, #0
 8006430:	4620      	mov	r0, r4
 8006432:	4629      	mov	r1, r5
 8006434:	f7fa faf8 	bl	8000a28 <__aeabi_dcmpeq>
 8006438:	b138      	cbz	r0, 800644a <_gcvt+0x4a>
 800643a:	2330      	movs	r3, #48	; 0x30
 800643c:	7033      	strb	r3, [r6, #0]
 800643e:	2300      	movs	r3, #0
 8006440:	7073      	strb	r3, [r6, #1]
 8006442:	4630      	mov	r0, r6
 8006444:	b008      	add	sp, #32
 8006446:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800644a:	a350      	add	r3, pc, #320	; (adr r3, 800658c <_gcvt+0x18c>)
 800644c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006450:	4620      	mov	r0, r4
 8006452:	4629      	mov	r1, r5
 8006454:	f7fa fafc 	bl	8000a50 <__aeabi_dcmple>
 8006458:	b150      	cbz	r0, 8006470 <_gcvt+0x70>
 800645a:	3f01      	subs	r7, #1
 800645c:	e9cd a801 	strd	sl, r8, [sp, #4]
 8006460:	9700      	str	r7, [sp, #0]
 8006462:	4622      	mov	r2, r4
 8006464:	462b      	mov	r3, r5
 8006466:	4631      	mov	r1, r6
 8006468:	4648      	mov	r0, r9
 800646a:	f7ff ff55 	bl	8006318 <print_e>
 800646e:	e7e8      	b.n	8006442 <_gcvt+0x42>
 8006470:	4638      	mov	r0, r7
 8006472:	f000 fb6d 	bl	8006b50 <_mprec_log10>
 8006476:	4622      	mov	r2, r4
 8006478:	462b      	mov	r3, r5
 800647a:	ec51 0b10 	vmov	r0, r1, d0
 800647e:	f7fa fae7 	bl	8000a50 <__aeabi_dcmple>
 8006482:	2800      	cmp	r0, #0
 8006484:	d1e9      	bne.n	800645a <_gcvt+0x5a>
 8006486:	2200      	movs	r2, #0
 8006488:	4b3f      	ldr	r3, [pc, #252]	; (8006588 <_gcvt+0x188>)
 800648a:	4620      	mov	r0, r4
 800648c:	4629      	mov	r1, r5
 800648e:	f7fa fad5 	bl	8000a3c <__aeabi_dcmplt>
 8006492:	aa07      	add	r2, sp, #28
 8006494:	ab06      	add	r3, sp, #24
 8006496:	e9cd 3200 	strd	r3, r2, [sp]
 800649a:	ab05      	add	r3, sp, #20
 800649c:	463a      	mov	r2, r7
 800649e:	b360      	cbz	r0, 80064fa <_gcvt+0xfa>
 80064a0:	2103      	movs	r1, #3
 80064a2:	ec45 4b10 	vmov	d0, r4, r5
 80064a6:	4648      	mov	r0, r9
 80064a8:	f000 fc0a 	bl	8006cc0 <_dtoa_r>
 80064ac:	9a05      	ldr	r2, [sp, #20]
 80064ae:	f242 730f 	movw	r3, #9999	; 0x270f
 80064b2:	429a      	cmp	r2, r3
 80064b4:	d023      	beq.n	80064fe <_gcvt+0xfe>
 80064b6:	4633      	mov	r3, r6
 80064b8:	4437      	add	r7, r6
 80064ba:	4601      	mov	r1, r0
 80064bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80064c0:	9d05      	ldr	r5, [sp, #20]
 80064c2:	1afc      	subs	r4, r7, r3
 80064c4:	b32a      	cbz	r2, 8006512 <_gcvt+0x112>
 80064c6:	2d00      	cmp	r5, #0
 80064c8:	dc1e      	bgt.n	8006508 <_gcvt+0x108>
 80064ca:	f1b8 0f00 	cmp.w	r8, #0
 80064ce:	d102      	bne.n	80064d6 <_gcvt+0xd6>
 80064d0:	780a      	ldrb	r2, [r1, #0]
 80064d2:	2a00      	cmp	r2, #0
 80064d4:	d045      	beq.n	8006562 <_gcvt+0x162>
 80064d6:	429e      	cmp	r6, r3
 80064d8:	bf02      	ittt	eq
 80064da:	1c73      	addeq	r3, r6, #1
 80064dc:	2230      	moveq	r2, #48	; 0x30
 80064de:	7032      	strbeq	r2, [r6, #0]
 80064e0:	222e      	movs	r2, #46	; 0x2e
 80064e2:	701a      	strb	r2, [r3, #0]
 80064e4:	9a05      	ldr	r2, [sp, #20]
 80064e6:	3301      	adds	r3, #1
 80064e8:	2000      	movs	r0, #0
 80064ea:	2730      	movs	r7, #48	; 0x30
 80064ec:	2a00      	cmp	r2, #0
 80064ee:	4615      	mov	r5, r2
 80064f0:	db24      	blt.n	800653c <_gcvt+0x13c>
 80064f2:	b100      	cbz	r0, 80064f6 <_gcvt+0xf6>
 80064f4:	9205      	str	r2, [sp, #20]
 80064f6:	1e4a      	subs	r2, r1, #1
 80064f8:	e02b      	b.n	8006552 <_gcvt+0x152>
 80064fa:	2102      	movs	r1, #2
 80064fc:	e7d1      	b.n	80064a2 <_gcvt+0xa2>
 80064fe:	4601      	mov	r1, r0
 8006500:	4630      	mov	r0, r6
 8006502:	f7ff ff01 	bl	8006308 <strcpy>
 8006506:	e79c      	b.n	8006442 <_gcvt+0x42>
 8006508:	3d01      	subs	r5, #1
 800650a:	f803 2b01 	strb.w	r2, [r3], #1
 800650e:	9505      	str	r5, [sp, #20]
 8006510:	e7d3      	b.n	80064ba <_gcvt+0xba>
 8006512:	1b2d      	subs	r5, r5, r4
 8006514:	2730      	movs	r7, #48	; 0x30
 8006516:	e005      	b.n	8006524 <_gcvt+0x124>
 8006518:	2c00      	cmp	r4, #0
 800651a:	dd06      	ble.n	800652a <_gcvt+0x12a>
 800651c:	f803 7b01 	strb.w	r7, [r3], #1
 8006520:	3c01      	subs	r4, #1
 8006522:	2201      	movs	r2, #1
 8006524:	1928      	adds	r0, r5, r4
 8006526:	2800      	cmp	r0, #0
 8006528:	dcf6      	bgt.n	8006518 <_gcvt+0x118>
 800652a:	2a00      	cmp	r2, #0
 800652c:	d0cd      	beq.n	80064ca <_gcvt+0xca>
 800652e:	9005      	str	r0, [sp, #20]
 8006530:	e7cb      	b.n	80064ca <_gcvt+0xca>
 8006532:	f803 7b01 	strb.w	r7, [r3], #1
 8006536:	3c01      	subs	r4, #1
 8006538:	2001      	movs	r0, #1
 800653a:	e7d7      	b.n	80064ec <_gcvt+0xec>
 800653c:	2c00      	cmp	r4, #0
 800653e:	f102 0201 	add.w	r2, r2, #1
 8006542:	dcf6      	bgt.n	8006532 <_gcvt+0x132>
 8006544:	2800      	cmp	r0, #0
 8006546:	d0d6      	beq.n	80064f6 <_gcvt+0xf6>
 8006548:	9505      	str	r5, [sp, #20]
 800654a:	e7d4      	b.n	80064f6 <_gcvt+0xf6>
 800654c:	f803 1b01 	strb.w	r1, [r3], #1
 8006550:	3c01      	subs	r4, #1
 8006552:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8006556:	b109      	cbz	r1, 800655c <_gcvt+0x15c>
 8006558:	2c00      	cmp	r4, #0
 800655a:	dcf7      	bgt.n	800654c <_gcvt+0x14c>
 800655c:	f1b8 0f00 	cmp.w	r8, #0
 8006560:	d10b      	bne.n	800657a <_gcvt+0x17a>
 8006562:	2200      	movs	r2, #0
 8006564:	701a      	strb	r2, [r3, #0]
 8006566:	e76c      	b.n	8006442 <_gcvt+0x42>
 8006568:	f802 5b01 	strb.w	r5, [r2], #1
 800656c:	1a81      	subs	r1, r0, r2
 800656e:	2900      	cmp	r1, #0
 8006570:	dcfa      	bgt.n	8006568 <_gcvt+0x168>
 8006572:	2c00      	cmp	r4, #0
 8006574:	bfa8      	it	ge
 8006576:	191b      	addge	r3, r3, r4
 8006578:	e7f3      	b.n	8006562 <_gcvt+0x162>
 800657a:	461a      	mov	r2, r3
 800657c:	1918      	adds	r0, r3, r4
 800657e:	2530      	movs	r5, #48	; 0x30
 8006580:	e7f4      	b.n	800656c <_gcvt+0x16c>
 8006582:	bf00      	nop
 8006584:	f3af 8000 	nop.w
 8006588:	3ff00000 	.word	0x3ff00000
 800658c:	eb1c432d 	.word	0xeb1c432d
 8006590:	3f1a36e2 	.word	0x3f1a36e2

08006594 <__malloc_lock>:
 8006594:	4770      	bx	lr

08006596 <__malloc_unlock>:
 8006596:	4770      	bx	lr

08006598 <_Balloc>:
 8006598:	b570      	push	{r4, r5, r6, lr}
 800659a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800659c:	4604      	mov	r4, r0
 800659e:	460e      	mov	r6, r1
 80065a0:	b93d      	cbnz	r5, 80065b2 <_Balloc+0x1a>
 80065a2:	2010      	movs	r0, #16
 80065a4:	f7ff fe36 	bl	8006214 <malloc>
 80065a8:	6260      	str	r0, [r4, #36]	; 0x24
 80065aa:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80065ae:	6005      	str	r5, [r0, #0]
 80065b0:	60c5      	str	r5, [r0, #12]
 80065b2:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80065b4:	68eb      	ldr	r3, [r5, #12]
 80065b6:	b183      	cbz	r3, 80065da <_Balloc+0x42>
 80065b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80065ba:	68db      	ldr	r3, [r3, #12]
 80065bc:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80065c0:	b9b8      	cbnz	r0, 80065f2 <_Balloc+0x5a>
 80065c2:	2101      	movs	r1, #1
 80065c4:	fa01 f506 	lsl.w	r5, r1, r6
 80065c8:	1d6a      	adds	r2, r5, #5
 80065ca:	0092      	lsls	r2, r2, #2
 80065cc:	4620      	mov	r0, r4
 80065ce:	f000 fadd 	bl	8006b8c <_calloc_r>
 80065d2:	b160      	cbz	r0, 80065ee <_Balloc+0x56>
 80065d4:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80065d8:	e00e      	b.n	80065f8 <_Balloc+0x60>
 80065da:	2221      	movs	r2, #33	; 0x21
 80065dc:	2104      	movs	r1, #4
 80065de:	4620      	mov	r0, r4
 80065e0:	f000 fad4 	bl	8006b8c <_calloc_r>
 80065e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80065e6:	60e8      	str	r0, [r5, #12]
 80065e8:	68db      	ldr	r3, [r3, #12]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d1e4      	bne.n	80065b8 <_Balloc+0x20>
 80065ee:	2000      	movs	r0, #0
 80065f0:	bd70      	pop	{r4, r5, r6, pc}
 80065f2:	6802      	ldr	r2, [r0, #0]
 80065f4:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80065f8:	2300      	movs	r3, #0
 80065fa:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80065fe:	e7f7      	b.n	80065f0 <_Balloc+0x58>

08006600 <_Bfree>:
 8006600:	b570      	push	{r4, r5, r6, lr}
 8006602:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006604:	4606      	mov	r6, r0
 8006606:	460d      	mov	r5, r1
 8006608:	b93c      	cbnz	r4, 800661a <_Bfree+0x1a>
 800660a:	2010      	movs	r0, #16
 800660c:	f7ff fe02 	bl	8006214 <malloc>
 8006610:	6270      	str	r0, [r6, #36]	; 0x24
 8006612:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006616:	6004      	str	r4, [r0, #0]
 8006618:	60c4      	str	r4, [r0, #12]
 800661a:	b13d      	cbz	r5, 800662c <_Bfree+0x2c>
 800661c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800661e:	686a      	ldr	r2, [r5, #4]
 8006620:	68db      	ldr	r3, [r3, #12]
 8006622:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006626:	6029      	str	r1, [r5, #0]
 8006628:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800662c:	bd70      	pop	{r4, r5, r6, pc}

0800662e <__multadd>:
 800662e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006632:	690d      	ldr	r5, [r1, #16]
 8006634:	461f      	mov	r7, r3
 8006636:	4606      	mov	r6, r0
 8006638:	460c      	mov	r4, r1
 800663a:	f101 0c14 	add.w	ip, r1, #20
 800663e:	2300      	movs	r3, #0
 8006640:	f8dc 0000 	ldr.w	r0, [ip]
 8006644:	b281      	uxth	r1, r0
 8006646:	fb02 7101 	mla	r1, r2, r1, r7
 800664a:	0c0f      	lsrs	r7, r1, #16
 800664c:	0c00      	lsrs	r0, r0, #16
 800664e:	fb02 7000 	mla	r0, r2, r0, r7
 8006652:	b289      	uxth	r1, r1
 8006654:	3301      	adds	r3, #1
 8006656:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800665a:	429d      	cmp	r5, r3
 800665c:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8006660:	f84c 1b04 	str.w	r1, [ip], #4
 8006664:	dcec      	bgt.n	8006640 <__multadd+0x12>
 8006666:	b1d7      	cbz	r7, 800669e <__multadd+0x70>
 8006668:	68a3      	ldr	r3, [r4, #8]
 800666a:	42ab      	cmp	r3, r5
 800666c:	dc12      	bgt.n	8006694 <__multadd+0x66>
 800666e:	6861      	ldr	r1, [r4, #4]
 8006670:	4630      	mov	r0, r6
 8006672:	3101      	adds	r1, #1
 8006674:	f7ff ff90 	bl	8006598 <_Balloc>
 8006678:	6922      	ldr	r2, [r4, #16]
 800667a:	3202      	adds	r2, #2
 800667c:	f104 010c 	add.w	r1, r4, #12
 8006680:	4680      	mov	r8, r0
 8006682:	0092      	lsls	r2, r2, #2
 8006684:	300c      	adds	r0, #12
 8006686:	f001 f8d3 	bl	8007830 <memcpy>
 800668a:	4621      	mov	r1, r4
 800668c:	4630      	mov	r0, r6
 800668e:	f7ff ffb7 	bl	8006600 <_Bfree>
 8006692:	4644      	mov	r4, r8
 8006694:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006698:	3501      	adds	r5, #1
 800669a:	615f      	str	r7, [r3, #20]
 800669c:	6125      	str	r5, [r4, #16]
 800669e:	4620      	mov	r0, r4
 80066a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080066a4 <__hi0bits>:
 80066a4:	0c02      	lsrs	r2, r0, #16
 80066a6:	0412      	lsls	r2, r2, #16
 80066a8:	4603      	mov	r3, r0
 80066aa:	b9b2      	cbnz	r2, 80066da <__hi0bits+0x36>
 80066ac:	0403      	lsls	r3, r0, #16
 80066ae:	2010      	movs	r0, #16
 80066b0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80066b4:	bf04      	itt	eq
 80066b6:	021b      	lsleq	r3, r3, #8
 80066b8:	3008      	addeq	r0, #8
 80066ba:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80066be:	bf04      	itt	eq
 80066c0:	011b      	lsleq	r3, r3, #4
 80066c2:	3004      	addeq	r0, #4
 80066c4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80066c8:	bf04      	itt	eq
 80066ca:	009b      	lsleq	r3, r3, #2
 80066cc:	3002      	addeq	r0, #2
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	db06      	blt.n	80066e0 <__hi0bits+0x3c>
 80066d2:	005b      	lsls	r3, r3, #1
 80066d4:	d503      	bpl.n	80066de <__hi0bits+0x3a>
 80066d6:	3001      	adds	r0, #1
 80066d8:	4770      	bx	lr
 80066da:	2000      	movs	r0, #0
 80066dc:	e7e8      	b.n	80066b0 <__hi0bits+0xc>
 80066de:	2020      	movs	r0, #32
 80066e0:	4770      	bx	lr

080066e2 <__lo0bits>:
 80066e2:	6803      	ldr	r3, [r0, #0]
 80066e4:	f013 0207 	ands.w	r2, r3, #7
 80066e8:	4601      	mov	r1, r0
 80066ea:	d00b      	beq.n	8006704 <__lo0bits+0x22>
 80066ec:	07da      	lsls	r2, r3, #31
 80066ee:	d423      	bmi.n	8006738 <__lo0bits+0x56>
 80066f0:	0798      	lsls	r0, r3, #30
 80066f2:	bf49      	itett	mi
 80066f4:	085b      	lsrmi	r3, r3, #1
 80066f6:	089b      	lsrpl	r3, r3, #2
 80066f8:	2001      	movmi	r0, #1
 80066fa:	600b      	strmi	r3, [r1, #0]
 80066fc:	bf5c      	itt	pl
 80066fe:	600b      	strpl	r3, [r1, #0]
 8006700:	2002      	movpl	r0, #2
 8006702:	4770      	bx	lr
 8006704:	b298      	uxth	r0, r3
 8006706:	b9a8      	cbnz	r0, 8006734 <__lo0bits+0x52>
 8006708:	0c1b      	lsrs	r3, r3, #16
 800670a:	2010      	movs	r0, #16
 800670c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006710:	bf04      	itt	eq
 8006712:	0a1b      	lsreq	r3, r3, #8
 8006714:	3008      	addeq	r0, #8
 8006716:	071a      	lsls	r2, r3, #28
 8006718:	bf04      	itt	eq
 800671a:	091b      	lsreq	r3, r3, #4
 800671c:	3004      	addeq	r0, #4
 800671e:	079a      	lsls	r2, r3, #30
 8006720:	bf04      	itt	eq
 8006722:	089b      	lsreq	r3, r3, #2
 8006724:	3002      	addeq	r0, #2
 8006726:	07da      	lsls	r2, r3, #31
 8006728:	d402      	bmi.n	8006730 <__lo0bits+0x4e>
 800672a:	085b      	lsrs	r3, r3, #1
 800672c:	d006      	beq.n	800673c <__lo0bits+0x5a>
 800672e:	3001      	adds	r0, #1
 8006730:	600b      	str	r3, [r1, #0]
 8006732:	4770      	bx	lr
 8006734:	4610      	mov	r0, r2
 8006736:	e7e9      	b.n	800670c <__lo0bits+0x2a>
 8006738:	2000      	movs	r0, #0
 800673a:	4770      	bx	lr
 800673c:	2020      	movs	r0, #32
 800673e:	4770      	bx	lr

08006740 <__i2b>:
 8006740:	b510      	push	{r4, lr}
 8006742:	460c      	mov	r4, r1
 8006744:	2101      	movs	r1, #1
 8006746:	f7ff ff27 	bl	8006598 <_Balloc>
 800674a:	2201      	movs	r2, #1
 800674c:	6144      	str	r4, [r0, #20]
 800674e:	6102      	str	r2, [r0, #16]
 8006750:	bd10      	pop	{r4, pc}

08006752 <__multiply>:
 8006752:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006756:	4614      	mov	r4, r2
 8006758:	690a      	ldr	r2, [r1, #16]
 800675a:	6923      	ldr	r3, [r4, #16]
 800675c:	429a      	cmp	r2, r3
 800675e:	bfb8      	it	lt
 8006760:	460b      	movlt	r3, r1
 8006762:	4688      	mov	r8, r1
 8006764:	bfbc      	itt	lt
 8006766:	46a0      	movlt	r8, r4
 8006768:	461c      	movlt	r4, r3
 800676a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800676e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006772:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006776:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800677a:	eb07 0609 	add.w	r6, r7, r9
 800677e:	42b3      	cmp	r3, r6
 8006780:	bfb8      	it	lt
 8006782:	3101      	addlt	r1, #1
 8006784:	f7ff ff08 	bl	8006598 <_Balloc>
 8006788:	f100 0514 	add.w	r5, r0, #20
 800678c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8006790:	462b      	mov	r3, r5
 8006792:	2200      	movs	r2, #0
 8006794:	4573      	cmp	r3, lr
 8006796:	d316      	bcc.n	80067c6 <__multiply+0x74>
 8006798:	f104 0214 	add.w	r2, r4, #20
 800679c:	f108 0114 	add.w	r1, r8, #20
 80067a0:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80067a4:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80067a8:	9300      	str	r3, [sp, #0]
 80067aa:	9b00      	ldr	r3, [sp, #0]
 80067ac:	9201      	str	r2, [sp, #4]
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d80c      	bhi.n	80067cc <__multiply+0x7a>
 80067b2:	2e00      	cmp	r6, #0
 80067b4:	dd03      	ble.n	80067be <__multiply+0x6c>
 80067b6:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d05d      	beq.n	800687a <__multiply+0x128>
 80067be:	6106      	str	r6, [r0, #16]
 80067c0:	b003      	add	sp, #12
 80067c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067c6:	f843 2b04 	str.w	r2, [r3], #4
 80067ca:	e7e3      	b.n	8006794 <__multiply+0x42>
 80067cc:	f8b2 b000 	ldrh.w	fp, [r2]
 80067d0:	f1bb 0f00 	cmp.w	fp, #0
 80067d4:	d023      	beq.n	800681e <__multiply+0xcc>
 80067d6:	4689      	mov	r9, r1
 80067d8:	46ac      	mov	ip, r5
 80067da:	f04f 0800 	mov.w	r8, #0
 80067de:	f859 4b04 	ldr.w	r4, [r9], #4
 80067e2:	f8dc a000 	ldr.w	sl, [ip]
 80067e6:	b2a3      	uxth	r3, r4
 80067e8:	fa1f fa8a 	uxth.w	sl, sl
 80067ec:	fb0b a303 	mla	r3, fp, r3, sl
 80067f0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80067f4:	f8dc 4000 	ldr.w	r4, [ip]
 80067f8:	4443      	add	r3, r8
 80067fa:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80067fe:	fb0b 840a 	mla	r4, fp, sl, r8
 8006802:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8006806:	46e2      	mov	sl, ip
 8006808:	b29b      	uxth	r3, r3
 800680a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800680e:	454f      	cmp	r7, r9
 8006810:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006814:	f84a 3b04 	str.w	r3, [sl], #4
 8006818:	d82b      	bhi.n	8006872 <__multiply+0x120>
 800681a:	f8cc 8004 	str.w	r8, [ip, #4]
 800681e:	9b01      	ldr	r3, [sp, #4]
 8006820:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8006824:	3204      	adds	r2, #4
 8006826:	f1ba 0f00 	cmp.w	sl, #0
 800682a:	d020      	beq.n	800686e <__multiply+0x11c>
 800682c:	682b      	ldr	r3, [r5, #0]
 800682e:	4689      	mov	r9, r1
 8006830:	46a8      	mov	r8, r5
 8006832:	f04f 0b00 	mov.w	fp, #0
 8006836:	f8b9 c000 	ldrh.w	ip, [r9]
 800683a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800683e:	fb0a 440c 	mla	r4, sl, ip, r4
 8006842:	445c      	add	r4, fp
 8006844:	46c4      	mov	ip, r8
 8006846:	b29b      	uxth	r3, r3
 8006848:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800684c:	f84c 3b04 	str.w	r3, [ip], #4
 8006850:	f859 3b04 	ldr.w	r3, [r9], #4
 8006854:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8006858:	0c1b      	lsrs	r3, r3, #16
 800685a:	fb0a b303 	mla	r3, sl, r3, fp
 800685e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8006862:	454f      	cmp	r7, r9
 8006864:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8006868:	d805      	bhi.n	8006876 <__multiply+0x124>
 800686a:	f8c8 3004 	str.w	r3, [r8, #4]
 800686e:	3504      	adds	r5, #4
 8006870:	e79b      	b.n	80067aa <__multiply+0x58>
 8006872:	46d4      	mov	ip, sl
 8006874:	e7b3      	b.n	80067de <__multiply+0x8c>
 8006876:	46e0      	mov	r8, ip
 8006878:	e7dd      	b.n	8006836 <__multiply+0xe4>
 800687a:	3e01      	subs	r6, #1
 800687c:	e799      	b.n	80067b2 <__multiply+0x60>
	...

08006880 <__pow5mult>:
 8006880:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006884:	4615      	mov	r5, r2
 8006886:	f012 0203 	ands.w	r2, r2, #3
 800688a:	4606      	mov	r6, r0
 800688c:	460f      	mov	r7, r1
 800688e:	d007      	beq.n	80068a0 <__pow5mult+0x20>
 8006890:	3a01      	subs	r2, #1
 8006892:	4c21      	ldr	r4, [pc, #132]	; (8006918 <__pow5mult+0x98>)
 8006894:	2300      	movs	r3, #0
 8006896:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800689a:	f7ff fec8 	bl	800662e <__multadd>
 800689e:	4607      	mov	r7, r0
 80068a0:	10ad      	asrs	r5, r5, #2
 80068a2:	d035      	beq.n	8006910 <__pow5mult+0x90>
 80068a4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80068a6:	b93c      	cbnz	r4, 80068b8 <__pow5mult+0x38>
 80068a8:	2010      	movs	r0, #16
 80068aa:	f7ff fcb3 	bl	8006214 <malloc>
 80068ae:	6270      	str	r0, [r6, #36]	; 0x24
 80068b0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80068b4:	6004      	str	r4, [r0, #0]
 80068b6:	60c4      	str	r4, [r0, #12]
 80068b8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80068bc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80068c0:	b94c      	cbnz	r4, 80068d6 <__pow5mult+0x56>
 80068c2:	f240 2171 	movw	r1, #625	; 0x271
 80068c6:	4630      	mov	r0, r6
 80068c8:	f7ff ff3a 	bl	8006740 <__i2b>
 80068cc:	2300      	movs	r3, #0
 80068ce:	f8c8 0008 	str.w	r0, [r8, #8]
 80068d2:	4604      	mov	r4, r0
 80068d4:	6003      	str	r3, [r0, #0]
 80068d6:	f04f 0800 	mov.w	r8, #0
 80068da:	07eb      	lsls	r3, r5, #31
 80068dc:	d50a      	bpl.n	80068f4 <__pow5mult+0x74>
 80068de:	4639      	mov	r1, r7
 80068e0:	4622      	mov	r2, r4
 80068e2:	4630      	mov	r0, r6
 80068e4:	f7ff ff35 	bl	8006752 <__multiply>
 80068e8:	4639      	mov	r1, r7
 80068ea:	4681      	mov	r9, r0
 80068ec:	4630      	mov	r0, r6
 80068ee:	f7ff fe87 	bl	8006600 <_Bfree>
 80068f2:	464f      	mov	r7, r9
 80068f4:	106d      	asrs	r5, r5, #1
 80068f6:	d00b      	beq.n	8006910 <__pow5mult+0x90>
 80068f8:	6820      	ldr	r0, [r4, #0]
 80068fa:	b938      	cbnz	r0, 800690c <__pow5mult+0x8c>
 80068fc:	4622      	mov	r2, r4
 80068fe:	4621      	mov	r1, r4
 8006900:	4630      	mov	r0, r6
 8006902:	f7ff ff26 	bl	8006752 <__multiply>
 8006906:	6020      	str	r0, [r4, #0]
 8006908:	f8c0 8000 	str.w	r8, [r0]
 800690c:	4604      	mov	r4, r0
 800690e:	e7e4      	b.n	80068da <__pow5mult+0x5a>
 8006910:	4638      	mov	r0, r7
 8006912:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006916:	bf00      	nop
 8006918:	08007bb0 	.word	0x08007bb0

0800691c <__lshift>:
 800691c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006920:	460c      	mov	r4, r1
 8006922:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006926:	6923      	ldr	r3, [r4, #16]
 8006928:	6849      	ldr	r1, [r1, #4]
 800692a:	eb0a 0903 	add.w	r9, sl, r3
 800692e:	68a3      	ldr	r3, [r4, #8]
 8006930:	4607      	mov	r7, r0
 8006932:	4616      	mov	r6, r2
 8006934:	f109 0501 	add.w	r5, r9, #1
 8006938:	42ab      	cmp	r3, r5
 800693a:	db32      	blt.n	80069a2 <__lshift+0x86>
 800693c:	4638      	mov	r0, r7
 800693e:	f7ff fe2b 	bl	8006598 <_Balloc>
 8006942:	2300      	movs	r3, #0
 8006944:	4680      	mov	r8, r0
 8006946:	f100 0114 	add.w	r1, r0, #20
 800694a:	461a      	mov	r2, r3
 800694c:	4553      	cmp	r3, sl
 800694e:	db2b      	blt.n	80069a8 <__lshift+0x8c>
 8006950:	6920      	ldr	r0, [r4, #16]
 8006952:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006956:	f104 0314 	add.w	r3, r4, #20
 800695a:	f016 021f 	ands.w	r2, r6, #31
 800695e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006962:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006966:	d025      	beq.n	80069b4 <__lshift+0x98>
 8006968:	f1c2 0e20 	rsb	lr, r2, #32
 800696c:	2000      	movs	r0, #0
 800696e:	681e      	ldr	r6, [r3, #0]
 8006970:	468a      	mov	sl, r1
 8006972:	4096      	lsls	r6, r2
 8006974:	4330      	orrs	r0, r6
 8006976:	f84a 0b04 	str.w	r0, [sl], #4
 800697a:	f853 0b04 	ldr.w	r0, [r3], #4
 800697e:	459c      	cmp	ip, r3
 8006980:	fa20 f00e 	lsr.w	r0, r0, lr
 8006984:	d814      	bhi.n	80069b0 <__lshift+0x94>
 8006986:	6048      	str	r0, [r1, #4]
 8006988:	b108      	cbz	r0, 800698e <__lshift+0x72>
 800698a:	f109 0502 	add.w	r5, r9, #2
 800698e:	3d01      	subs	r5, #1
 8006990:	4638      	mov	r0, r7
 8006992:	f8c8 5010 	str.w	r5, [r8, #16]
 8006996:	4621      	mov	r1, r4
 8006998:	f7ff fe32 	bl	8006600 <_Bfree>
 800699c:	4640      	mov	r0, r8
 800699e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069a2:	3101      	adds	r1, #1
 80069a4:	005b      	lsls	r3, r3, #1
 80069a6:	e7c7      	b.n	8006938 <__lshift+0x1c>
 80069a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80069ac:	3301      	adds	r3, #1
 80069ae:	e7cd      	b.n	800694c <__lshift+0x30>
 80069b0:	4651      	mov	r1, sl
 80069b2:	e7dc      	b.n	800696e <__lshift+0x52>
 80069b4:	3904      	subs	r1, #4
 80069b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80069ba:	f841 2f04 	str.w	r2, [r1, #4]!
 80069be:	459c      	cmp	ip, r3
 80069c0:	d8f9      	bhi.n	80069b6 <__lshift+0x9a>
 80069c2:	e7e4      	b.n	800698e <__lshift+0x72>

080069c4 <__mcmp>:
 80069c4:	6903      	ldr	r3, [r0, #16]
 80069c6:	690a      	ldr	r2, [r1, #16]
 80069c8:	1a9b      	subs	r3, r3, r2
 80069ca:	b530      	push	{r4, r5, lr}
 80069cc:	d10c      	bne.n	80069e8 <__mcmp+0x24>
 80069ce:	0092      	lsls	r2, r2, #2
 80069d0:	3014      	adds	r0, #20
 80069d2:	3114      	adds	r1, #20
 80069d4:	1884      	adds	r4, r0, r2
 80069d6:	4411      	add	r1, r2
 80069d8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80069dc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80069e0:	4295      	cmp	r5, r2
 80069e2:	d003      	beq.n	80069ec <__mcmp+0x28>
 80069e4:	d305      	bcc.n	80069f2 <__mcmp+0x2e>
 80069e6:	2301      	movs	r3, #1
 80069e8:	4618      	mov	r0, r3
 80069ea:	bd30      	pop	{r4, r5, pc}
 80069ec:	42a0      	cmp	r0, r4
 80069ee:	d3f3      	bcc.n	80069d8 <__mcmp+0x14>
 80069f0:	e7fa      	b.n	80069e8 <__mcmp+0x24>
 80069f2:	f04f 33ff 	mov.w	r3, #4294967295
 80069f6:	e7f7      	b.n	80069e8 <__mcmp+0x24>

080069f8 <__mdiff>:
 80069f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069fc:	460d      	mov	r5, r1
 80069fe:	4607      	mov	r7, r0
 8006a00:	4611      	mov	r1, r2
 8006a02:	4628      	mov	r0, r5
 8006a04:	4614      	mov	r4, r2
 8006a06:	f7ff ffdd 	bl	80069c4 <__mcmp>
 8006a0a:	1e06      	subs	r6, r0, #0
 8006a0c:	d108      	bne.n	8006a20 <__mdiff+0x28>
 8006a0e:	4631      	mov	r1, r6
 8006a10:	4638      	mov	r0, r7
 8006a12:	f7ff fdc1 	bl	8006598 <_Balloc>
 8006a16:	2301      	movs	r3, #1
 8006a18:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006a1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a20:	bfa4      	itt	ge
 8006a22:	4623      	movge	r3, r4
 8006a24:	462c      	movge	r4, r5
 8006a26:	4638      	mov	r0, r7
 8006a28:	6861      	ldr	r1, [r4, #4]
 8006a2a:	bfa6      	itte	ge
 8006a2c:	461d      	movge	r5, r3
 8006a2e:	2600      	movge	r6, #0
 8006a30:	2601      	movlt	r6, #1
 8006a32:	f7ff fdb1 	bl	8006598 <_Balloc>
 8006a36:	692b      	ldr	r3, [r5, #16]
 8006a38:	60c6      	str	r6, [r0, #12]
 8006a3a:	6926      	ldr	r6, [r4, #16]
 8006a3c:	f105 0914 	add.w	r9, r5, #20
 8006a40:	f104 0214 	add.w	r2, r4, #20
 8006a44:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8006a48:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8006a4c:	f100 0514 	add.w	r5, r0, #20
 8006a50:	f04f 0e00 	mov.w	lr, #0
 8006a54:	f852 ab04 	ldr.w	sl, [r2], #4
 8006a58:	f859 4b04 	ldr.w	r4, [r9], #4
 8006a5c:	fa1e f18a 	uxtah	r1, lr, sl
 8006a60:	b2a3      	uxth	r3, r4
 8006a62:	1ac9      	subs	r1, r1, r3
 8006a64:	0c23      	lsrs	r3, r4, #16
 8006a66:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8006a6a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006a6e:	b289      	uxth	r1, r1
 8006a70:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8006a74:	45c8      	cmp	r8, r9
 8006a76:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8006a7a:	4694      	mov	ip, r2
 8006a7c:	f845 3b04 	str.w	r3, [r5], #4
 8006a80:	d8e8      	bhi.n	8006a54 <__mdiff+0x5c>
 8006a82:	45bc      	cmp	ip, r7
 8006a84:	d304      	bcc.n	8006a90 <__mdiff+0x98>
 8006a86:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8006a8a:	b183      	cbz	r3, 8006aae <__mdiff+0xb6>
 8006a8c:	6106      	str	r6, [r0, #16]
 8006a8e:	e7c5      	b.n	8006a1c <__mdiff+0x24>
 8006a90:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006a94:	fa1e f381 	uxtah	r3, lr, r1
 8006a98:	141a      	asrs	r2, r3, #16
 8006a9a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006a9e:	b29b      	uxth	r3, r3
 8006aa0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006aa4:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8006aa8:	f845 3b04 	str.w	r3, [r5], #4
 8006aac:	e7e9      	b.n	8006a82 <__mdiff+0x8a>
 8006aae:	3e01      	subs	r6, #1
 8006ab0:	e7e9      	b.n	8006a86 <__mdiff+0x8e>

08006ab2 <__d2b>:
 8006ab2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006ab6:	460e      	mov	r6, r1
 8006ab8:	2101      	movs	r1, #1
 8006aba:	ec59 8b10 	vmov	r8, r9, d0
 8006abe:	4615      	mov	r5, r2
 8006ac0:	f7ff fd6a 	bl	8006598 <_Balloc>
 8006ac4:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006ac8:	4607      	mov	r7, r0
 8006aca:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006ace:	bb34      	cbnz	r4, 8006b1e <__d2b+0x6c>
 8006ad0:	9301      	str	r3, [sp, #4]
 8006ad2:	f1b8 0300 	subs.w	r3, r8, #0
 8006ad6:	d027      	beq.n	8006b28 <__d2b+0x76>
 8006ad8:	a802      	add	r0, sp, #8
 8006ada:	f840 3d08 	str.w	r3, [r0, #-8]!
 8006ade:	f7ff fe00 	bl	80066e2 <__lo0bits>
 8006ae2:	9900      	ldr	r1, [sp, #0]
 8006ae4:	b1f0      	cbz	r0, 8006b24 <__d2b+0x72>
 8006ae6:	9a01      	ldr	r2, [sp, #4]
 8006ae8:	f1c0 0320 	rsb	r3, r0, #32
 8006aec:	fa02 f303 	lsl.w	r3, r2, r3
 8006af0:	430b      	orrs	r3, r1
 8006af2:	40c2      	lsrs	r2, r0
 8006af4:	617b      	str	r3, [r7, #20]
 8006af6:	9201      	str	r2, [sp, #4]
 8006af8:	9b01      	ldr	r3, [sp, #4]
 8006afa:	61bb      	str	r3, [r7, #24]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	bf14      	ite	ne
 8006b00:	2102      	movne	r1, #2
 8006b02:	2101      	moveq	r1, #1
 8006b04:	6139      	str	r1, [r7, #16]
 8006b06:	b1c4      	cbz	r4, 8006b3a <__d2b+0x88>
 8006b08:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8006b0c:	4404      	add	r4, r0
 8006b0e:	6034      	str	r4, [r6, #0]
 8006b10:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006b14:	6028      	str	r0, [r5, #0]
 8006b16:	4638      	mov	r0, r7
 8006b18:	b003      	add	sp, #12
 8006b1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006b1e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006b22:	e7d5      	b.n	8006ad0 <__d2b+0x1e>
 8006b24:	6179      	str	r1, [r7, #20]
 8006b26:	e7e7      	b.n	8006af8 <__d2b+0x46>
 8006b28:	a801      	add	r0, sp, #4
 8006b2a:	f7ff fdda 	bl	80066e2 <__lo0bits>
 8006b2e:	9b01      	ldr	r3, [sp, #4]
 8006b30:	617b      	str	r3, [r7, #20]
 8006b32:	2101      	movs	r1, #1
 8006b34:	6139      	str	r1, [r7, #16]
 8006b36:	3020      	adds	r0, #32
 8006b38:	e7e5      	b.n	8006b06 <__d2b+0x54>
 8006b3a:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8006b3e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006b42:	6030      	str	r0, [r6, #0]
 8006b44:	6918      	ldr	r0, [r3, #16]
 8006b46:	f7ff fdad 	bl	80066a4 <__hi0bits>
 8006b4a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8006b4e:	e7e1      	b.n	8006b14 <__d2b+0x62>

08006b50 <_mprec_log10>:
 8006b50:	2817      	cmp	r0, #23
 8006b52:	b5d0      	push	{r4, r6, r7, lr}
 8006b54:	4604      	mov	r4, r0
 8006b56:	dc07      	bgt.n	8006b68 <_mprec_log10+0x18>
 8006b58:	4b09      	ldr	r3, [pc, #36]	; (8006b80 <_mprec_log10+0x30>)
 8006b5a:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
 8006b5e:	e9d4 0100 	ldrd	r0, r1, [r4]
 8006b62:	ec41 0b10 	vmov	d0, r0, r1
 8006b66:	bdd0      	pop	{r4, r6, r7, pc}
 8006b68:	4906      	ldr	r1, [pc, #24]	; (8006b84 <_mprec_log10+0x34>)
 8006b6a:	4f07      	ldr	r7, [pc, #28]	; (8006b88 <_mprec_log10+0x38>)
 8006b6c:	2000      	movs	r0, #0
 8006b6e:	2600      	movs	r6, #0
 8006b70:	4632      	mov	r2, r6
 8006b72:	463b      	mov	r3, r7
 8006b74:	f7f9 fcf0 	bl	8000558 <__aeabi_dmul>
 8006b78:	3c01      	subs	r4, #1
 8006b7a:	d1f9      	bne.n	8006b70 <_mprec_log10+0x20>
 8006b7c:	e7f1      	b.n	8006b62 <_mprec_log10+0x12>
 8006b7e:	bf00      	nop
 8006b80:	08007ae8 	.word	0x08007ae8
 8006b84:	3ff00000 	.word	0x3ff00000
 8006b88:	40240000 	.word	0x40240000

08006b8c <_calloc_r>:
 8006b8c:	b538      	push	{r3, r4, r5, lr}
 8006b8e:	fb02 f401 	mul.w	r4, r2, r1
 8006b92:	4621      	mov	r1, r4
 8006b94:	f7ff fb4e 	bl	8006234 <_malloc_r>
 8006b98:	4605      	mov	r5, r0
 8006b9a:	b118      	cbz	r0, 8006ba4 <_calloc_r+0x18>
 8006b9c:	4622      	mov	r2, r4
 8006b9e:	2100      	movs	r1, #0
 8006ba0:	f7ff fb40 	bl	8006224 <memset>
 8006ba4:	4628      	mov	r0, r5
 8006ba6:	bd38      	pop	{r3, r4, r5, pc}

08006ba8 <quorem>:
 8006ba8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bac:	6903      	ldr	r3, [r0, #16]
 8006bae:	690c      	ldr	r4, [r1, #16]
 8006bb0:	42a3      	cmp	r3, r4
 8006bb2:	4680      	mov	r8, r0
 8006bb4:	f2c0 8082 	blt.w	8006cbc <quorem+0x114>
 8006bb8:	3c01      	subs	r4, #1
 8006bba:	f101 0714 	add.w	r7, r1, #20
 8006bbe:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8006bc2:	f100 0614 	add.w	r6, r0, #20
 8006bc6:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8006bca:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8006bce:	eb06 030c 	add.w	r3, r6, ip
 8006bd2:	3501      	adds	r5, #1
 8006bd4:	eb07 090c 	add.w	r9, r7, ip
 8006bd8:	9301      	str	r3, [sp, #4]
 8006bda:	fbb0 f5f5 	udiv	r5, r0, r5
 8006bde:	b395      	cbz	r5, 8006c46 <quorem+0x9e>
 8006be0:	f04f 0a00 	mov.w	sl, #0
 8006be4:	4638      	mov	r0, r7
 8006be6:	46b6      	mov	lr, r6
 8006be8:	46d3      	mov	fp, sl
 8006bea:	f850 2b04 	ldr.w	r2, [r0], #4
 8006bee:	b293      	uxth	r3, r2
 8006bf0:	fb05 a303 	mla	r3, r5, r3, sl
 8006bf4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006bf8:	b29b      	uxth	r3, r3
 8006bfa:	ebab 0303 	sub.w	r3, fp, r3
 8006bfe:	0c12      	lsrs	r2, r2, #16
 8006c00:	f8de b000 	ldr.w	fp, [lr]
 8006c04:	fb05 a202 	mla	r2, r5, r2, sl
 8006c08:	fa13 f38b 	uxtah	r3, r3, fp
 8006c0c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8006c10:	fa1f fb82 	uxth.w	fp, r2
 8006c14:	f8de 2000 	ldr.w	r2, [lr]
 8006c18:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8006c1c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006c20:	b29b      	uxth	r3, r3
 8006c22:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006c26:	4581      	cmp	r9, r0
 8006c28:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8006c2c:	f84e 3b04 	str.w	r3, [lr], #4
 8006c30:	d2db      	bcs.n	8006bea <quorem+0x42>
 8006c32:	f856 300c 	ldr.w	r3, [r6, ip]
 8006c36:	b933      	cbnz	r3, 8006c46 <quorem+0x9e>
 8006c38:	9b01      	ldr	r3, [sp, #4]
 8006c3a:	3b04      	subs	r3, #4
 8006c3c:	429e      	cmp	r6, r3
 8006c3e:	461a      	mov	r2, r3
 8006c40:	d330      	bcc.n	8006ca4 <quorem+0xfc>
 8006c42:	f8c8 4010 	str.w	r4, [r8, #16]
 8006c46:	4640      	mov	r0, r8
 8006c48:	f7ff febc 	bl	80069c4 <__mcmp>
 8006c4c:	2800      	cmp	r0, #0
 8006c4e:	db25      	blt.n	8006c9c <quorem+0xf4>
 8006c50:	3501      	adds	r5, #1
 8006c52:	4630      	mov	r0, r6
 8006c54:	f04f 0c00 	mov.w	ip, #0
 8006c58:	f857 2b04 	ldr.w	r2, [r7], #4
 8006c5c:	f8d0 e000 	ldr.w	lr, [r0]
 8006c60:	b293      	uxth	r3, r2
 8006c62:	ebac 0303 	sub.w	r3, ip, r3
 8006c66:	0c12      	lsrs	r2, r2, #16
 8006c68:	fa13 f38e 	uxtah	r3, r3, lr
 8006c6c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006c70:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006c74:	b29b      	uxth	r3, r3
 8006c76:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006c7a:	45b9      	cmp	r9, r7
 8006c7c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006c80:	f840 3b04 	str.w	r3, [r0], #4
 8006c84:	d2e8      	bcs.n	8006c58 <quorem+0xb0>
 8006c86:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8006c8a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8006c8e:	b92a      	cbnz	r2, 8006c9c <quorem+0xf4>
 8006c90:	3b04      	subs	r3, #4
 8006c92:	429e      	cmp	r6, r3
 8006c94:	461a      	mov	r2, r3
 8006c96:	d30b      	bcc.n	8006cb0 <quorem+0x108>
 8006c98:	f8c8 4010 	str.w	r4, [r8, #16]
 8006c9c:	4628      	mov	r0, r5
 8006c9e:	b003      	add	sp, #12
 8006ca0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ca4:	6812      	ldr	r2, [r2, #0]
 8006ca6:	3b04      	subs	r3, #4
 8006ca8:	2a00      	cmp	r2, #0
 8006caa:	d1ca      	bne.n	8006c42 <quorem+0x9a>
 8006cac:	3c01      	subs	r4, #1
 8006cae:	e7c5      	b.n	8006c3c <quorem+0x94>
 8006cb0:	6812      	ldr	r2, [r2, #0]
 8006cb2:	3b04      	subs	r3, #4
 8006cb4:	2a00      	cmp	r2, #0
 8006cb6:	d1ef      	bne.n	8006c98 <quorem+0xf0>
 8006cb8:	3c01      	subs	r4, #1
 8006cba:	e7ea      	b.n	8006c92 <quorem+0xea>
 8006cbc:	2000      	movs	r0, #0
 8006cbe:	e7ee      	b.n	8006c9e <quorem+0xf6>

08006cc0 <_dtoa_r>:
 8006cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cc4:	ec57 6b10 	vmov	r6, r7, d0
 8006cc8:	b097      	sub	sp, #92	; 0x5c
 8006cca:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006ccc:	9106      	str	r1, [sp, #24]
 8006cce:	4604      	mov	r4, r0
 8006cd0:	920b      	str	r2, [sp, #44]	; 0x2c
 8006cd2:	9312      	str	r3, [sp, #72]	; 0x48
 8006cd4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006cd8:	e9cd 6700 	strd	r6, r7, [sp]
 8006cdc:	b93d      	cbnz	r5, 8006cee <_dtoa_r+0x2e>
 8006cde:	2010      	movs	r0, #16
 8006ce0:	f7ff fa98 	bl	8006214 <malloc>
 8006ce4:	6260      	str	r0, [r4, #36]	; 0x24
 8006ce6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006cea:	6005      	str	r5, [r0, #0]
 8006cec:	60c5      	str	r5, [r0, #12]
 8006cee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006cf0:	6819      	ldr	r1, [r3, #0]
 8006cf2:	b151      	cbz	r1, 8006d0a <_dtoa_r+0x4a>
 8006cf4:	685a      	ldr	r2, [r3, #4]
 8006cf6:	604a      	str	r2, [r1, #4]
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	4093      	lsls	r3, r2
 8006cfc:	608b      	str	r3, [r1, #8]
 8006cfe:	4620      	mov	r0, r4
 8006d00:	f7ff fc7e 	bl	8006600 <_Bfree>
 8006d04:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006d06:	2200      	movs	r2, #0
 8006d08:	601a      	str	r2, [r3, #0]
 8006d0a:	1e3b      	subs	r3, r7, #0
 8006d0c:	bfbb      	ittet	lt
 8006d0e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006d12:	9301      	strlt	r3, [sp, #4]
 8006d14:	2300      	movge	r3, #0
 8006d16:	2201      	movlt	r2, #1
 8006d18:	bfac      	ite	ge
 8006d1a:	f8c8 3000 	strge.w	r3, [r8]
 8006d1e:	f8c8 2000 	strlt.w	r2, [r8]
 8006d22:	4baf      	ldr	r3, [pc, #700]	; (8006fe0 <_dtoa_r+0x320>)
 8006d24:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006d28:	ea33 0308 	bics.w	r3, r3, r8
 8006d2c:	d114      	bne.n	8006d58 <_dtoa_r+0x98>
 8006d2e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006d30:	f242 730f 	movw	r3, #9999	; 0x270f
 8006d34:	6013      	str	r3, [r2, #0]
 8006d36:	9b00      	ldr	r3, [sp, #0]
 8006d38:	b923      	cbnz	r3, 8006d44 <_dtoa_r+0x84>
 8006d3a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8006d3e:	2800      	cmp	r0, #0
 8006d40:	f000 8542 	beq.w	80077c8 <_dtoa_r+0xb08>
 8006d44:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006d46:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8006ff4 <_dtoa_r+0x334>
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	f000 8544 	beq.w	80077d8 <_dtoa_r+0xb18>
 8006d50:	f10b 0303 	add.w	r3, fp, #3
 8006d54:	f000 bd3e 	b.w	80077d4 <_dtoa_r+0xb14>
 8006d58:	e9dd 6700 	ldrd	r6, r7, [sp]
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	2300      	movs	r3, #0
 8006d60:	4630      	mov	r0, r6
 8006d62:	4639      	mov	r1, r7
 8006d64:	f7f9 fe60 	bl	8000a28 <__aeabi_dcmpeq>
 8006d68:	4681      	mov	r9, r0
 8006d6a:	b168      	cbz	r0, 8006d88 <_dtoa_r+0xc8>
 8006d6c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006d6e:	2301      	movs	r3, #1
 8006d70:	6013      	str	r3, [r2, #0]
 8006d72:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	f000 8524 	beq.w	80077c2 <_dtoa_r+0xb02>
 8006d7a:	4b9a      	ldr	r3, [pc, #616]	; (8006fe4 <_dtoa_r+0x324>)
 8006d7c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006d7e:	f103 3bff 	add.w	fp, r3, #4294967295
 8006d82:	6013      	str	r3, [r2, #0]
 8006d84:	f000 bd28 	b.w	80077d8 <_dtoa_r+0xb18>
 8006d88:	aa14      	add	r2, sp, #80	; 0x50
 8006d8a:	a915      	add	r1, sp, #84	; 0x54
 8006d8c:	ec47 6b10 	vmov	d0, r6, r7
 8006d90:	4620      	mov	r0, r4
 8006d92:	f7ff fe8e 	bl	8006ab2 <__d2b>
 8006d96:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8006d9a:	9004      	str	r0, [sp, #16]
 8006d9c:	2d00      	cmp	r5, #0
 8006d9e:	d07c      	beq.n	8006e9a <_dtoa_r+0x1da>
 8006da0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006da4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8006da8:	46b2      	mov	sl, r6
 8006daa:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8006dae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006db2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8006db6:	2200      	movs	r2, #0
 8006db8:	4b8b      	ldr	r3, [pc, #556]	; (8006fe8 <_dtoa_r+0x328>)
 8006dba:	4650      	mov	r0, sl
 8006dbc:	4659      	mov	r1, fp
 8006dbe:	f7f9 fa13 	bl	80001e8 <__aeabi_dsub>
 8006dc2:	a381      	add	r3, pc, #516	; (adr r3, 8006fc8 <_dtoa_r+0x308>)
 8006dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dc8:	f7f9 fbc6 	bl	8000558 <__aeabi_dmul>
 8006dcc:	a380      	add	r3, pc, #512	; (adr r3, 8006fd0 <_dtoa_r+0x310>)
 8006dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dd2:	f7f9 fa0b 	bl	80001ec <__adddf3>
 8006dd6:	4606      	mov	r6, r0
 8006dd8:	4628      	mov	r0, r5
 8006dda:	460f      	mov	r7, r1
 8006ddc:	f7f9 fb52 	bl	8000484 <__aeabi_i2d>
 8006de0:	a37d      	add	r3, pc, #500	; (adr r3, 8006fd8 <_dtoa_r+0x318>)
 8006de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006de6:	f7f9 fbb7 	bl	8000558 <__aeabi_dmul>
 8006dea:	4602      	mov	r2, r0
 8006dec:	460b      	mov	r3, r1
 8006dee:	4630      	mov	r0, r6
 8006df0:	4639      	mov	r1, r7
 8006df2:	f7f9 f9fb 	bl	80001ec <__adddf3>
 8006df6:	4606      	mov	r6, r0
 8006df8:	460f      	mov	r7, r1
 8006dfa:	f7f9 fe47 	bl	8000a8c <__aeabi_d2iz>
 8006dfe:	2200      	movs	r2, #0
 8006e00:	4682      	mov	sl, r0
 8006e02:	2300      	movs	r3, #0
 8006e04:	4630      	mov	r0, r6
 8006e06:	4639      	mov	r1, r7
 8006e08:	f7f9 fe18 	bl	8000a3c <__aeabi_dcmplt>
 8006e0c:	b148      	cbz	r0, 8006e22 <_dtoa_r+0x162>
 8006e0e:	4650      	mov	r0, sl
 8006e10:	f7f9 fb38 	bl	8000484 <__aeabi_i2d>
 8006e14:	4632      	mov	r2, r6
 8006e16:	463b      	mov	r3, r7
 8006e18:	f7f9 fe06 	bl	8000a28 <__aeabi_dcmpeq>
 8006e1c:	b908      	cbnz	r0, 8006e22 <_dtoa_r+0x162>
 8006e1e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006e22:	f1ba 0f16 	cmp.w	sl, #22
 8006e26:	d859      	bhi.n	8006edc <_dtoa_r+0x21c>
 8006e28:	4970      	ldr	r1, [pc, #448]	; (8006fec <_dtoa_r+0x32c>)
 8006e2a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8006e2e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006e32:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006e36:	f7f9 fe1f 	bl	8000a78 <__aeabi_dcmpgt>
 8006e3a:	2800      	cmp	r0, #0
 8006e3c:	d050      	beq.n	8006ee0 <_dtoa_r+0x220>
 8006e3e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006e42:	2300      	movs	r3, #0
 8006e44:	930f      	str	r3, [sp, #60]	; 0x3c
 8006e46:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006e48:	1b5d      	subs	r5, r3, r5
 8006e4a:	f1b5 0801 	subs.w	r8, r5, #1
 8006e4e:	bf49      	itett	mi
 8006e50:	f1c5 0301 	rsbmi	r3, r5, #1
 8006e54:	2300      	movpl	r3, #0
 8006e56:	9305      	strmi	r3, [sp, #20]
 8006e58:	f04f 0800 	movmi.w	r8, #0
 8006e5c:	bf58      	it	pl
 8006e5e:	9305      	strpl	r3, [sp, #20]
 8006e60:	f1ba 0f00 	cmp.w	sl, #0
 8006e64:	db3e      	blt.n	8006ee4 <_dtoa_r+0x224>
 8006e66:	2300      	movs	r3, #0
 8006e68:	44d0      	add	r8, sl
 8006e6a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8006e6e:	9307      	str	r3, [sp, #28]
 8006e70:	9b06      	ldr	r3, [sp, #24]
 8006e72:	2b09      	cmp	r3, #9
 8006e74:	f200 8090 	bhi.w	8006f98 <_dtoa_r+0x2d8>
 8006e78:	2b05      	cmp	r3, #5
 8006e7a:	bfc4      	itt	gt
 8006e7c:	3b04      	subgt	r3, #4
 8006e7e:	9306      	strgt	r3, [sp, #24]
 8006e80:	9b06      	ldr	r3, [sp, #24]
 8006e82:	f1a3 0302 	sub.w	r3, r3, #2
 8006e86:	bfcc      	ite	gt
 8006e88:	2500      	movgt	r5, #0
 8006e8a:	2501      	movle	r5, #1
 8006e8c:	2b03      	cmp	r3, #3
 8006e8e:	f200 808f 	bhi.w	8006fb0 <_dtoa_r+0x2f0>
 8006e92:	e8df f003 	tbb	[pc, r3]
 8006e96:	7f7d      	.short	0x7f7d
 8006e98:	7131      	.short	0x7131
 8006e9a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8006e9e:	441d      	add	r5, r3
 8006ea0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8006ea4:	2820      	cmp	r0, #32
 8006ea6:	dd13      	ble.n	8006ed0 <_dtoa_r+0x210>
 8006ea8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8006eac:	9b00      	ldr	r3, [sp, #0]
 8006eae:	fa08 f800 	lsl.w	r8, r8, r0
 8006eb2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8006eb6:	fa23 f000 	lsr.w	r0, r3, r0
 8006eba:	ea48 0000 	orr.w	r0, r8, r0
 8006ebe:	f7f9 fad1 	bl	8000464 <__aeabi_ui2d>
 8006ec2:	2301      	movs	r3, #1
 8006ec4:	4682      	mov	sl, r0
 8006ec6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8006eca:	3d01      	subs	r5, #1
 8006ecc:	9313      	str	r3, [sp, #76]	; 0x4c
 8006ece:	e772      	b.n	8006db6 <_dtoa_r+0xf6>
 8006ed0:	9b00      	ldr	r3, [sp, #0]
 8006ed2:	f1c0 0020 	rsb	r0, r0, #32
 8006ed6:	fa03 f000 	lsl.w	r0, r3, r0
 8006eda:	e7f0      	b.n	8006ebe <_dtoa_r+0x1fe>
 8006edc:	2301      	movs	r3, #1
 8006ede:	e7b1      	b.n	8006e44 <_dtoa_r+0x184>
 8006ee0:	900f      	str	r0, [sp, #60]	; 0x3c
 8006ee2:	e7b0      	b.n	8006e46 <_dtoa_r+0x186>
 8006ee4:	9b05      	ldr	r3, [sp, #20]
 8006ee6:	eba3 030a 	sub.w	r3, r3, sl
 8006eea:	9305      	str	r3, [sp, #20]
 8006eec:	f1ca 0300 	rsb	r3, sl, #0
 8006ef0:	9307      	str	r3, [sp, #28]
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	930e      	str	r3, [sp, #56]	; 0x38
 8006ef6:	e7bb      	b.n	8006e70 <_dtoa_r+0x1b0>
 8006ef8:	2301      	movs	r3, #1
 8006efa:	930a      	str	r3, [sp, #40]	; 0x28
 8006efc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	dd59      	ble.n	8006fb6 <_dtoa_r+0x2f6>
 8006f02:	9302      	str	r3, [sp, #8]
 8006f04:	4699      	mov	r9, r3
 8006f06:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006f08:	2200      	movs	r2, #0
 8006f0a:	6072      	str	r2, [r6, #4]
 8006f0c:	2204      	movs	r2, #4
 8006f0e:	f102 0014 	add.w	r0, r2, #20
 8006f12:	4298      	cmp	r0, r3
 8006f14:	6871      	ldr	r1, [r6, #4]
 8006f16:	d953      	bls.n	8006fc0 <_dtoa_r+0x300>
 8006f18:	4620      	mov	r0, r4
 8006f1a:	f7ff fb3d 	bl	8006598 <_Balloc>
 8006f1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006f20:	6030      	str	r0, [r6, #0]
 8006f22:	f1b9 0f0e 	cmp.w	r9, #14
 8006f26:	f8d3 b000 	ldr.w	fp, [r3]
 8006f2a:	f200 80e6 	bhi.w	80070fa <_dtoa_r+0x43a>
 8006f2e:	2d00      	cmp	r5, #0
 8006f30:	f000 80e3 	beq.w	80070fa <_dtoa_r+0x43a>
 8006f34:	ed9d 7b00 	vldr	d7, [sp]
 8006f38:	f1ba 0f00 	cmp.w	sl, #0
 8006f3c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8006f40:	dd74      	ble.n	800702c <_dtoa_r+0x36c>
 8006f42:	4a2a      	ldr	r2, [pc, #168]	; (8006fec <_dtoa_r+0x32c>)
 8006f44:	f00a 030f 	and.w	r3, sl, #15
 8006f48:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006f4c:	ed93 7b00 	vldr	d7, [r3]
 8006f50:	ea4f 162a 	mov.w	r6, sl, asr #4
 8006f54:	06f0      	lsls	r0, r6, #27
 8006f56:	ed8d 7b08 	vstr	d7, [sp, #32]
 8006f5a:	d565      	bpl.n	8007028 <_dtoa_r+0x368>
 8006f5c:	4b24      	ldr	r3, [pc, #144]	; (8006ff0 <_dtoa_r+0x330>)
 8006f5e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006f62:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006f66:	f7f9 fc21 	bl	80007ac <__aeabi_ddiv>
 8006f6a:	e9cd 0100 	strd	r0, r1, [sp]
 8006f6e:	f006 060f 	and.w	r6, r6, #15
 8006f72:	2503      	movs	r5, #3
 8006f74:	4f1e      	ldr	r7, [pc, #120]	; (8006ff0 <_dtoa_r+0x330>)
 8006f76:	e04c      	b.n	8007012 <_dtoa_r+0x352>
 8006f78:	2301      	movs	r3, #1
 8006f7a:	930a      	str	r3, [sp, #40]	; 0x28
 8006f7c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f7e:	4453      	add	r3, sl
 8006f80:	f103 0901 	add.w	r9, r3, #1
 8006f84:	9302      	str	r3, [sp, #8]
 8006f86:	464b      	mov	r3, r9
 8006f88:	2b01      	cmp	r3, #1
 8006f8a:	bfb8      	it	lt
 8006f8c:	2301      	movlt	r3, #1
 8006f8e:	e7ba      	b.n	8006f06 <_dtoa_r+0x246>
 8006f90:	2300      	movs	r3, #0
 8006f92:	e7b2      	b.n	8006efa <_dtoa_r+0x23a>
 8006f94:	2300      	movs	r3, #0
 8006f96:	e7f0      	b.n	8006f7a <_dtoa_r+0x2ba>
 8006f98:	2501      	movs	r5, #1
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	9306      	str	r3, [sp, #24]
 8006f9e:	950a      	str	r5, [sp, #40]	; 0x28
 8006fa0:	f04f 33ff 	mov.w	r3, #4294967295
 8006fa4:	9302      	str	r3, [sp, #8]
 8006fa6:	4699      	mov	r9, r3
 8006fa8:	2200      	movs	r2, #0
 8006faa:	2312      	movs	r3, #18
 8006fac:	920b      	str	r2, [sp, #44]	; 0x2c
 8006fae:	e7aa      	b.n	8006f06 <_dtoa_r+0x246>
 8006fb0:	2301      	movs	r3, #1
 8006fb2:	930a      	str	r3, [sp, #40]	; 0x28
 8006fb4:	e7f4      	b.n	8006fa0 <_dtoa_r+0x2e0>
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	9302      	str	r3, [sp, #8]
 8006fba:	4699      	mov	r9, r3
 8006fbc:	461a      	mov	r2, r3
 8006fbe:	e7f5      	b.n	8006fac <_dtoa_r+0x2ec>
 8006fc0:	3101      	adds	r1, #1
 8006fc2:	6071      	str	r1, [r6, #4]
 8006fc4:	0052      	lsls	r2, r2, #1
 8006fc6:	e7a2      	b.n	8006f0e <_dtoa_r+0x24e>
 8006fc8:	636f4361 	.word	0x636f4361
 8006fcc:	3fd287a7 	.word	0x3fd287a7
 8006fd0:	8b60c8b3 	.word	0x8b60c8b3
 8006fd4:	3fc68a28 	.word	0x3fc68a28
 8006fd8:	509f79fb 	.word	0x509f79fb
 8006fdc:	3fd34413 	.word	0x3fd34413
 8006fe0:	7ff00000 	.word	0x7ff00000
 8006fe4:	08007bca 	.word	0x08007bca
 8006fe8:	3ff80000 	.word	0x3ff80000
 8006fec:	08007ae8 	.word	0x08007ae8
 8006ff0:	08007ac0 	.word	0x08007ac0
 8006ff4:	08007bc5 	.word	0x08007bc5
 8006ff8:	07f1      	lsls	r1, r6, #31
 8006ffa:	d508      	bpl.n	800700e <_dtoa_r+0x34e>
 8006ffc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007000:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007004:	f7f9 faa8 	bl	8000558 <__aeabi_dmul>
 8007008:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800700c:	3501      	adds	r5, #1
 800700e:	1076      	asrs	r6, r6, #1
 8007010:	3708      	adds	r7, #8
 8007012:	2e00      	cmp	r6, #0
 8007014:	d1f0      	bne.n	8006ff8 <_dtoa_r+0x338>
 8007016:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800701a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800701e:	f7f9 fbc5 	bl	80007ac <__aeabi_ddiv>
 8007022:	e9cd 0100 	strd	r0, r1, [sp]
 8007026:	e01a      	b.n	800705e <_dtoa_r+0x39e>
 8007028:	2502      	movs	r5, #2
 800702a:	e7a3      	b.n	8006f74 <_dtoa_r+0x2b4>
 800702c:	f000 80a0 	beq.w	8007170 <_dtoa_r+0x4b0>
 8007030:	f1ca 0600 	rsb	r6, sl, #0
 8007034:	4b9f      	ldr	r3, [pc, #636]	; (80072b4 <_dtoa_r+0x5f4>)
 8007036:	4fa0      	ldr	r7, [pc, #640]	; (80072b8 <_dtoa_r+0x5f8>)
 8007038:	f006 020f 	and.w	r2, r6, #15
 800703c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007044:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007048:	f7f9 fa86 	bl	8000558 <__aeabi_dmul>
 800704c:	e9cd 0100 	strd	r0, r1, [sp]
 8007050:	1136      	asrs	r6, r6, #4
 8007052:	2300      	movs	r3, #0
 8007054:	2502      	movs	r5, #2
 8007056:	2e00      	cmp	r6, #0
 8007058:	d17f      	bne.n	800715a <_dtoa_r+0x49a>
 800705a:	2b00      	cmp	r3, #0
 800705c:	d1e1      	bne.n	8007022 <_dtoa_r+0x362>
 800705e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007060:	2b00      	cmp	r3, #0
 8007062:	f000 8087 	beq.w	8007174 <_dtoa_r+0x4b4>
 8007066:	e9dd 6700 	ldrd	r6, r7, [sp]
 800706a:	2200      	movs	r2, #0
 800706c:	4b93      	ldr	r3, [pc, #588]	; (80072bc <_dtoa_r+0x5fc>)
 800706e:	4630      	mov	r0, r6
 8007070:	4639      	mov	r1, r7
 8007072:	f7f9 fce3 	bl	8000a3c <__aeabi_dcmplt>
 8007076:	2800      	cmp	r0, #0
 8007078:	d07c      	beq.n	8007174 <_dtoa_r+0x4b4>
 800707a:	f1b9 0f00 	cmp.w	r9, #0
 800707e:	d079      	beq.n	8007174 <_dtoa_r+0x4b4>
 8007080:	9b02      	ldr	r3, [sp, #8]
 8007082:	2b00      	cmp	r3, #0
 8007084:	dd35      	ble.n	80070f2 <_dtoa_r+0x432>
 8007086:	f10a 33ff 	add.w	r3, sl, #4294967295
 800708a:	9308      	str	r3, [sp, #32]
 800708c:	4639      	mov	r1, r7
 800708e:	2200      	movs	r2, #0
 8007090:	4b8b      	ldr	r3, [pc, #556]	; (80072c0 <_dtoa_r+0x600>)
 8007092:	4630      	mov	r0, r6
 8007094:	f7f9 fa60 	bl	8000558 <__aeabi_dmul>
 8007098:	e9cd 0100 	strd	r0, r1, [sp]
 800709c:	9f02      	ldr	r7, [sp, #8]
 800709e:	3501      	adds	r5, #1
 80070a0:	4628      	mov	r0, r5
 80070a2:	f7f9 f9ef 	bl	8000484 <__aeabi_i2d>
 80070a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80070aa:	f7f9 fa55 	bl	8000558 <__aeabi_dmul>
 80070ae:	2200      	movs	r2, #0
 80070b0:	4b84      	ldr	r3, [pc, #528]	; (80072c4 <_dtoa_r+0x604>)
 80070b2:	f7f9 f89b 	bl	80001ec <__adddf3>
 80070b6:	4605      	mov	r5, r0
 80070b8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80070bc:	2f00      	cmp	r7, #0
 80070be:	d15d      	bne.n	800717c <_dtoa_r+0x4bc>
 80070c0:	2200      	movs	r2, #0
 80070c2:	4b81      	ldr	r3, [pc, #516]	; (80072c8 <_dtoa_r+0x608>)
 80070c4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80070c8:	f7f9 f88e 	bl	80001e8 <__aeabi_dsub>
 80070cc:	462a      	mov	r2, r5
 80070ce:	4633      	mov	r3, r6
 80070d0:	e9cd 0100 	strd	r0, r1, [sp]
 80070d4:	f7f9 fcd0 	bl	8000a78 <__aeabi_dcmpgt>
 80070d8:	2800      	cmp	r0, #0
 80070da:	f040 8288 	bne.w	80075ee <_dtoa_r+0x92e>
 80070de:	462a      	mov	r2, r5
 80070e0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80070e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80070e8:	f7f9 fca8 	bl	8000a3c <__aeabi_dcmplt>
 80070ec:	2800      	cmp	r0, #0
 80070ee:	f040 827c 	bne.w	80075ea <_dtoa_r+0x92a>
 80070f2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80070f6:	e9cd 2300 	strd	r2, r3, [sp]
 80070fa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	f2c0 8150 	blt.w	80073a2 <_dtoa_r+0x6e2>
 8007102:	f1ba 0f0e 	cmp.w	sl, #14
 8007106:	f300 814c 	bgt.w	80073a2 <_dtoa_r+0x6e2>
 800710a:	4b6a      	ldr	r3, [pc, #424]	; (80072b4 <_dtoa_r+0x5f4>)
 800710c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007110:	ed93 7b00 	vldr	d7, [r3]
 8007114:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007116:	2b00      	cmp	r3, #0
 8007118:	ed8d 7b02 	vstr	d7, [sp, #8]
 800711c:	f280 80d8 	bge.w	80072d0 <_dtoa_r+0x610>
 8007120:	f1b9 0f00 	cmp.w	r9, #0
 8007124:	f300 80d4 	bgt.w	80072d0 <_dtoa_r+0x610>
 8007128:	f040 825e 	bne.w	80075e8 <_dtoa_r+0x928>
 800712c:	2200      	movs	r2, #0
 800712e:	4b66      	ldr	r3, [pc, #408]	; (80072c8 <_dtoa_r+0x608>)
 8007130:	ec51 0b17 	vmov	r0, r1, d7
 8007134:	f7f9 fa10 	bl	8000558 <__aeabi_dmul>
 8007138:	e9dd 2300 	ldrd	r2, r3, [sp]
 800713c:	f7f9 fc92 	bl	8000a64 <__aeabi_dcmpge>
 8007140:	464f      	mov	r7, r9
 8007142:	464e      	mov	r6, r9
 8007144:	2800      	cmp	r0, #0
 8007146:	f040 8234 	bne.w	80075b2 <_dtoa_r+0x8f2>
 800714a:	2331      	movs	r3, #49	; 0x31
 800714c:	f10b 0501 	add.w	r5, fp, #1
 8007150:	f88b 3000 	strb.w	r3, [fp]
 8007154:	f10a 0a01 	add.w	sl, sl, #1
 8007158:	e22f      	b.n	80075ba <_dtoa_r+0x8fa>
 800715a:	07f2      	lsls	r2, r6, #31
 800715c:	d505      	bpl.n	800716a <_dtoa_r+0x4aa>
 800715e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007162:	f7f9 f9f9 	bl	8000558 <__aeabi_dmul>
 8007166:	3501      	adds	r5, #1
 8007168:	2301      	movs	r3, #1
 800716a:	1076      	asrs	r6, r6, #1
 800716c:	3708      	adds	r7, #8
 800716e:	e772      	b.n	8007056 <_dtoa_r+0x396>
 8007170:	2502      	movs	r5, #2
 8007172:	e774      	b.n	800705e <_dtoa_r+0x39e>
 8007174:	f8cd a020 	str.w	sl, [sp, #32]
 8007178:	464f      	mov	r7, r9
 800717a:	e791      	b.n	80070a0 <_dtoa_r+0x3e0>
 800717c:	4b4d      	ldr	r3, [pc, #308]	; (80072b4 <_dtoa_r+0x5f4>)
 800717e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007182:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8007186:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007188:	2b00      	cmp	r3, #0
 800718a:	d047      	beq.n	800721c <_dtoa_r+0x55c>
 800718c:	4602      	mov	r2, r0
 800718e:	460b      	mov	r3, r1
 8007190:	2000      	movs	r0, #0
 8007192:	494e      	ldr	r1, [pc, #312]	; (80072cc <_dtoa_r+0x60c>)
 8007194:	f7f9 fb0a 	bl	80007ac <__aeabi_ddiv>
 8007198:	462a      	mov	r2, r5
 800719a:	4633      	mov	r3, r6
 800719c:	f7f9 f824 	bl	80001e8 <__aeabi_dsub>
 80071a0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80071a4:	465d      	mov	r5, fp
 80071a6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80071aa:	f7f9 fc6f 	bl	8000a8c <__aeabi_d2iz>
 80071ae:	4606      	mov	r6, r0
 80071b0:	f7f9 f968 	bl	8000484 <__aeabi_i2d>
 80071b4:	4602      	mov	r2, r0
 80071b6:	460b      	mov	r3, r1
 80071b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80071bc:	f7f9 f814 	bl	80001e8 <__aeabi_dsub>
 80071c0:	3630      	adds	r6, #48	; 0x30
 80071c2:	f805 6b01 	strb.w	r6, [r5], #1
 80071c6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80071ca:	e9cd 0100 	strd	r0, r1, [sp]
 80071ce:	f7f9 fc35 	bl	8000a3c <__aeabi_dcmplt>
 80071d2:	2800      	cmp	r0, #0
 80071d4:	d163      	bne.n	800729e <_dtoa_r+0x5de>
 80071d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80071da:	2000      	movs	r0, #0
 80071dc:	4937      	ldr	r1, [pc, #220]	; (80072bc <_dtoa_r+0x5fc>)
 80071de:	f7f9 f803 	bl	80001e8 <__aeabi_dsub>
 80071e2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80071e6:	f7f9 fc29 	bl	8000a3c <__aeabi_dcmplt>
 80071ea:	2800      	cmp	r0, #0
 80071ec:	f040 80b7 	bne.w	800735e <_dtoa_r+0x69e>
 80071f0:	eba5 030b 	sub.w	r3, r5, fp
 80071f4:	429f      	cmp	r7, r3
 80071f6:	f77f af7c 	ble.w	80070f2 <_dtoa_r+0x432>
 80071fa:	2200      	movs	r2, #0
 80071fc:	4b30      	ldr	r3, [pc, #192]	; (80072c0 <_dtoa_r+0x600>)
 80071fe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007202:	f7f9 f9a9 	bl	8000558 <__aeabi_dmul>
 8007206:	2200      	movs	r2, #0
 8007208:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800720c:	4b2c      	ldr	r3, [pc, #176]	; (80072c0 <_dtoa_r+0x600>)
 800720e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007212:	f7f9 f9a1 	bl	8000558 <__aeabi_dmul>
 8007216:	e9cd 0100 	strd	r0, r1, [sp]
 800721a:	e7c4      	b.n	80071a6 <_dtoa_r+0x4e6>
 800721c:	462a      	mov	r2, r5
 800721e:	4633      	mov	r3, r6
 8007220:	f7f9 f99a 	bl	8000558 <__aeabi_dmul>
 8007224:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007228:	eb0b 0507 	add.w	r5, fp, r7
 800722c:	465e      	mov	r6, fp
 800722e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007232:	f7f9 fc2b 	bl	8000a8c <__aeabi_d2iz>
 8007236:	4607      	mov	r7, r0
 8007238:	f7f9 f924 	bl	8000484 <__aeabi_i2d>
 800723c:	3730      	adds	r7, #48	; 0x30
 800723e:	4602      	mov	r2, r0
 8007240:	460b      	mov	r3, r1
 8007242:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007246:	f7f8 ffcf 	bl	80001e8 <__aeabi_dsub>
 800724a:	f806 7b01 	strb.w	r7, [r6], #1
 800724e:	42ae      	cmp	r6, r5
 8007250:	e9cd 0100 	strd	r0, r1, [sp]
 8007254:	f04f 0200 	mov.w	r2, #0
 8007258:	d126      	bne.n	80072a8 <_dtoa_r+0x5e8>
 800725a:	4b1c      	ldr	r3, [pc, #112]	; (80072cc <_dtoa_r+0x60c>)
 800725c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007260:	f7f8 ffc4 	bl	80001ec <__adddf3>
 8007264:	4602      	mov	r2, r0
 8007266:	460b      	mov	r3, r1
 8007268:	e9dd 0100 	ldrd	r0, r1, [sp]
 800726c:	f7f9 fc04 	bl	8000a78 <__aeabi_dcmpgt>
 8007270:	2800      	cmp	r0, #0
 8007272:	d174      	bne.n	800735e <_dtoa_r+0x69e>
 8007274:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007278:	2000      	movs	r0, #0
 800727a:	4914      	ldr	r1, [pc, #80]	; (80072cc <_dtoa_r+0x60c>)
 800727c:	f7f8 ffb4 	bl	80001e8 <__aeabi_dsub>
 8007280:	4602      	mov	r2, r0
 8007282:	460b      	mov	r3, r1
 8007284:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007288:	f7f9 fbd8 	bl	8000a3c <__aeabi_dcmplt>
 800728c:	2800      	cmp	r0, #0
 800728e:	f43f af30 	beq.w	80070f2 <_dtoa_r+0x432>
 8007292:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007296:	2b30      	cmp	r3, #48	; 0x30
 8007298:	f105 32ff 	add.w	r2, r5, #4294967295
 800729c:	d002      	beq.n	80072a4 <_dtoa_r+0x5e4>
 800729e:	f8dd a020 	ldr.w	sl, [sp, #32]
 80072a2:	e04a      	b.n	800733a <_dtoa_r+0x67a>
 80072a4:	4615      	mov	r5, r2
 80072a6:	e7f4      	b.n	8007292 <_dtoa_r+0x5d2>
 80072a8:	4b05      	ldr	r3, [pc, #20]	; (80072c0 <_dtoa_r+0x600>)
 80072aa:	f7f9 f955 	bl	8000558 <__aeabi_dmul>
 80072ae:	e9cd 0100 	strd	r0, r1, [sp]
 80072b2:	e7bc      	b.n	800722e <_dtoa_r+0x56e>
 80072b4:	08007ae8 	.word	0x08007ae8
 80072b8:	08007ac0 	.word	0x08007ac0
 80072bc:	3ff00000 	.word	0x3ff00000
 80072c0:	40240000 	.word	0x40240000
 80072c4:	401c0000 	.word	0x401c0000
 80072c8:	40140000 	.word	0x40140000
 80072cc:	3fe00000 	.word	0x3fe00000
 80072d0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80072d4:	465d      	mov	r5, fp
 80072d6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80072da:	4630      	mov	r0, r6
 80072dc:	4639      	mov	r1, r7
 80072de:	f7f9 fa65 	bl	80007ac <__aeabi_ddiv>
 80072e2:	f7f9 fbd3 	bl	8000a8c <__aeabi_d2iz>
 80072e6:	4680      	mov	r8, r0
 80072e8:	f7f9 f8cc 	bl	8000484 <__aeabi_i2d>
 80072ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80072f0:	f7f9 f932 	bl	8000558 <__aeabi_dmul>
 80072f4:	4602      	mov	r2, r0
 80072f6:	460b      	mov	r3, r1
 80072f8:	4630      	mov	r0, r6
 80072fa:	4639      	mov	r1, r7
 80072fc:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8007300:	f7f8 ff72 	bl	80001e8 <__aeabi_dsub>
 8007304:	f805 6b01 	strb.w	r6, [r5], #1
 8007308:	eba5 060b 	sub.w	r6, r5, fp
 800730c:	45b1      	cmp	r9, r6
 800730e:	4602      	mov	r2, r0
 8007310:	460b      	mov	r3, r1
 8007312:	d139      	bne.n	8007388 <_dtoa_r+0x6c8>
 8007314:	f7f8 ff6a 	bl	80001ec <__adddf3>
 8007318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800731c:	4606      	mov	r6, r0
 800731e:	460f      	mov	r7, r1
 8007320:	f7f9 fbaa 	bl	8000a78 <__aeabi_dcmpgt>
 8007324:	b9c8      	cbnz	r0, 800735a <_dtoa_r+0x69a>
 8007326:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800732a:	4630      	mov	r0, r6
 800732c:	4639      	mov	r1, r7
 800732e:	f7f9 fb7b 	bl	8000a28 <__aeabi_dcmpeq>
 8007332:	b110      	cbz	r0, 800733a <_dtoa_r+0x67a>
 8007334:	f018 0f01 	tst.w	r8, #1
 8007338:	d10f      	bne.n	800735a <_dtoa_r+0x69a>
 800733a:	9904      	ldr	r1, [sp, #16]
 800733c:	4620      	mov	r0, r4
 800733e:	f7ff f95f 	bl	8006600 <_Bfree>
 8007342:	2300      	movs	r3, #0
 8007344:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007346:	702b      	strb	r3, [r5, #0]
 8007348:	f10a 0301 	add.w	r3, sl, #1
 800734c:	6013      	str	r3, [r2, #0]
 800734e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007350:	2b00      	cmp	r3, #0
 8007352:	f000 8241 	beq.w	80077d8 <_dtoa_r+0xb18>
 8007356:	601d      	str	r5, [r3, #0]
 8007358:	e23e      	b.n	80077d8 <_dtoa_r+0xb18>
 800735a:	f8cd a020 	str.w	sl, [sp, #32]
 800735e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007362:	2a39      	cmp	r2, #57	; 0x39
 8007364:	f105 33ff 	add.w	r3, r5, #4294967295
 8007368:	d108      	bne.n	800737c <_dtoa_r+0x6bc>
 800736a:	459b      	cmp	fp, r3
 800736c:	d10a      	bne.n	8007384 <_dtoa_r+0x6c4>
 800736e:	9b08      	ldr	r3, [sp, #32]
 8007370:	3301      	adds	r3, #1
 8007372:	9308      	str	r3, [sp, #32]
 8007374:	2330      	movs	r3, #48	; 0x30
 8007376:	f88b 3000 	strb.w	r3, [fp]
 800737a:	465b      	mov	r3, fp
 800737c:	781a      	ldrb	r2, [r3, #0]
 800737e:	3201      	adds	r2, #1
 8007380:	701a      	strb	r2, [r3, #0]
 8007382:	e78c      	b.n	800729e <_dtoa_r+0x5de>
 8007384:	461d      	mov	r5, r3
 8007386:	e7ea      	b.n	800735e <_dtoa_r+0x69e>
 8007388:	2200      	movs	r2, #0
 800738a:	4b9b      	ldr	r3, [pc, #620]	; (80075f8 <_dtoa_r+0x938>)
 800738c:	f7f9 f8e4 	bl	8000558 <__aeabi_dmul>
 8007390:	2200      	movs	r2, #0
 8007392:	2300      	movs	r3, #0
 8007394:	4606      	mov	r6, r0
 8007396:	460f      	mov	r7, r1
 8007398:	f7f9 fb46 	bl	8000a28 <__aeabi_dcmpeq>
 800739c:	2800      	cmp	r0, #0
 800739e:	d09a      	beq.n	80072d6 <_dtoa_r+0x616>
 80073a0:	e7cb      	b.n	800733a <_dtoa_r+0x67a>
 80073a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80073a4:	2a00      	cmp	r2, #0
 80073a6:	f000 808b 	beq.w	80074c0 <_dtoa_r+0x800>
 80073aa:	9a06      	ldr	r2, [sp, #24]
 80073ac:	2a01      	cmp	r2, #1
 80073ae:	dc6e      	bgt.n	800748e <_dtoa_r+0x7ce>
 80073b0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80073b2:	2a00      	cmp	r2, #0
 80073b4:	d067      	beq.n	8007486 <_dtoa_r+0x7c6>
 80073b6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80073ba:	9f07      	ldr	r7, [sp, #28]
 80073bc:	9d05      	ldr	r5, [sp, #20]
 80073be:	9a05      	ldr	r2, [sp, #20]
 80073c0:	2101      	movs	r1, #1
 80073c2:	441a      	add	r2, r3
 80073c4:	4620      	mov	r0, r4
 80073c6:	9205      	str	r2, [sp, #20]
 80073c8:	4498      	add	r8, r3
 80073ca:	f7ff f9b9 	bl	8006740 <__i2b>
 80073ce:	4606      	mov	r6, r0
 80073d0:	2d00      	cmp	r5, #0
 80073d2:	dd0c      	ble.n	80073ee <_dtoa_r+0x72e>
 80073d4:	f1b8 0f00 	cmp.w	r8, #0
 80073d8:	dd09      	ble.n	80073ee <_dtoa_r+0x72e>
 80073da:	4545      	cmp	r5, r8
 80073dc:	9a05      	ldr	r2, [sp, #20]
 80073de:	462b      	mov	r3, r5
 80073e0:	bfa8      	it	ge
 80073e2:	4643      	movge	r3, r8
 80073e4:	1ad2      	subs	r2, r2, r3
 80073e6:	9205      	str	r2, [sp, #20]
 80073e8:	1aed      	subs	r5, r5, r3
 80073ea:	eba8 0803 	sub.w	r8, r8, r3
 80073ee:	9b07      	ldr	r3, [sp, #28]
 80073f0:	b1eb      	cbz	r3, 800742e <_dtoa_r+0x76e>
 80073f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d067      	beq.n	80074c8 <_dtoa_r+0x808>
 80073f8:	b18f      	cbz	r7, 800741e <_dtoa_r+0x75e>
 80073fa:	4631      	mov	r1, r6
 80073fc:	463a      	mov	r2, r7
 80073fe:	4620      	mov	r0, r4
 8007400:	f7ff fa3e 	bl	8006880 <__pow5mult>
 8007404:	9a04      	ldr	r2, [sp, #16]
 8007406:	4601      	mov	r1, r0
 8007408:	4606      	mov	r6, r0
 800740a:	4620      	mov	r0, r4
 800740c:	f7ff f9a1 	bl	8006752 <__multiply>
 8007410:	9904      	ldr	r1, [sp, #16]
 8007412:	9008      	str	r0, [sp, #32]
 8007414:	4620      	mov	r0, r4
 8007416:	f7ff f8f3 	bl	8006600 <_Bfree>
 800741a:	9b08      	ldr	r3, [sp, #32]
 800741c:	9304      	str	r3, [sp, #16]
 800741e:	9b07      	ldr	r3, [sp, #28]
 8007420:	1bda      	subs	r2, r3, r7
 8007422:	d004      	beq.n	800742e <_dtoa_r+0x76e>
 8007424:	9904      	ldr	r1, [sp, #16]
 8007426:	4620      	mov	r0, r4
 8007428:	f7ff fa2a 	bl	8006880 <__pow5mult>
 800742c:	9004      	str	r0, [sp, #16]
 800742e:	2101      	movs	r1, #1
 8007430:	4620      	mov	r0, r4
 8007432:	f7ff f985 	bl	8006740 <__i2b>
 8007436:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007438:	4607      	mov	r7, r0
 800743a:	2b00      	cmp	r3, #0
 800743c:	f000 81d0 	beq.w	80077e0 <_dtoa_r+0xb20>
 8007440:	461a      	mov	r2, r3
 8007442:	4601      	mov	r1, r0
 8007444:	4620      	mov	r0, r4
 8007446:	f7ff fa1b 	bl	8006880 <__pow5mult>
 800744a:	9b06      	ldr	r3, [sp, #24]
 800744c:	2b01      	cmp	r3, #1
 800744e:	4607      	mov	r7, r0
 8007450:	dc40      	bgt.n	80074d4 <_dtoa_r+0x814>
 8007452:	9b00      	ldr	r3, [sp, #0]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d139      	bne.n	80074cc <_dtoa_r+0x80c>
 8007458:	9b01      	ldr	r3, [sp, #4]
 800745a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800745e:	2b00      	cmp	r3, #0
 8007460:	d136      	bne.n	80074d0 <_dtoa_r+0x810>
 8007462:	9b01      	ldr	r3, [sp, #4]
 8007464:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007468:	0d1b      	lsrs	r3, r3, #20
 800746a:	051b      	lsls	r3, r3, #20
 800746c:	b12b      	cbz	r3, 800747a <_dtoa_r+0x7ba>
 800746e:	9b05      	ldr	r3, [sp, #20]
 8007470:	3301      	adds	r3, #1
 8007472:	9305      	str	r3, [sp, #20]
 8007474:	f108 0801 	add.w	r8, r8, #1
 8007478:	2301      	movs	r3, #1
 800747a:	9307      	str	r3, [sp, #28]
 800747c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800747e:	2b00      	cmp	r3, #0
 8007480:	d12a      	bne.n	80074d8 <_dtoa_r+0x818>
 8007482:	2001      	movs	r0, #1
 8007484:	e030      	b.n	80074e8 <_dtoa_r+0x828>
 8007486:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007488:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800748c:	e795      	b.n	80073ba <_dtoa_r+0x6fa>
 800748e:	9b07      	ldr	r3, [sp, #28]
 8007490:	f109 37ff 	add.w	r7, r9, #4294967295
 8007494:	42bb      	cmp	r3, r7
 8007496:	bfbf      	itttt	lt
 8007498:	9b07      	ldrlt	r3, [sp, #28]
 800749a:	9707      	strlt	r7, [sp, #28]
 800749c:	1afa      	sublt	r2, r7, r3
 800749e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80074a0:	bfbb      	ittet	lt
 80074a2:	189b      	addlt	r3, r3, r2
 80074a4:	930e      	strlt	r3, [sp, #56]	; 0x38
 80074a6:	1bdf      	subge	r7, r3, r7
 80074a8:	2700      	movlt	r7, #0
 80074aa:	f1b9 0f00 	cmp.w	r9, #0
 80074ae:	bfb5      	itete	lt
 80074b0:	9b05      	ldrlt	r3, [sp, #20]
 80074b2:	9d05      	ldrge	r5, [sp, #20]
 80074b4:	eba3 0509 	sublt.w	r5, r3, r9
 80074b8:	464b      	movge	r3, r9
 80074ba:	bfb8      	it	lt
 80074bc:	2300      	movlt	r3, #0
 80074be:	e77e      	b.n	80073be <_dtoa_r+0x6fe>
 80074c0:	9f07      	ldr	r7, [sp, #28]
 80074c2:	9d05      	ldr	r5, [sp, #20]
 80074c4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80074c6:	e783      	b.n	80073d0 <_dtoa_r+0x710>
 80074c8:	9a07      	ldr	r2, [sp, #28]
 80074ca:	e7ab      	b.n	8007424 <_dtoa_r+0x764>
 80074cc:	2300      	movs	r3, #0
 80074ce:	e7d4      	b.n	800747a <_dtoa_r+0x7ba>
 80074d0:	9b00      	ldr	r3, [sp, #0]
 80074d2:	e7d2      	b.n	800747a <_dtoa_r+0x7ba>
 80074d4:	2300      	movs	r3, #0
 80074d6:	9307      	str	r3, [sp, #28]
 80074d8:	693b      	ldr	r3, [r7, #16]
 80074da:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80074de:	6918      	ldr	r0, [r3, #16]
 80074e0:	f7ff f8e0 	bl	80066a4 <__hi0bits>
 80074e4:	f1c0 0020 	rsb	r0, r0, #32
 80074e8:	4440      	add	r0, r8
 80074ea:	f010 001f 	ands.w	r0, r0, #31
 80074ee:	d047      	beq.n	8007580 <_dtoa_r+0x8c0>
 80074f0:	f1c0 0320 	rsb	r3, r0, #32
 80074f4:	2b04      	cmp	r3, #4
 80074f6:	dd3b      	ble.n	8007570 <_dtoa_r+0x8b0>
 80074f8:	9b05      	ldr	r3, [sp, #20]
 80074fa:	f1c0 001c 	rsb	r0, r0, #28
 80074fe:	4403      	add	r3, r0
 8007500:	9305      	str	r3, [sp, #20]
 8007502:	4405      	add	r5, r0
 8007504:	4480      	add	r8, r0
 8007506:	9b05      	ldr	r3, [sp, #20]
 8007508:	2b00      	cmp	r3, #0
 800750a:	dd05      	ble.n	8007518 <_dtoa_r+0x858>
 800750c:	461a      	mov	r2, r3
 800750e:	9904      	ldr	r1, [sp, #16]
 8007510:	4620      	mov	r0, r4
 8007512:	f7ff fa03 	bl	800691c <__lshift>
 8007516:	9004      	str	r0, [sp, #16]
 8007518:	f1b8 0f00 	cmp.w	r8, #0
 800751c:	dd05      	ble.n	800752a <_dtoa_r+0x86a>
 800751e:	4639      	mov	r1, r7
 8007520:	4642      	mov	r2, r8
 8007522:	4620      	mov	r0, r4
 8007524:	f7ff f9fa 	bl	800691c <__lshift>
 8007528:	4607      	mov	r7, r0
 800752a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800752c:	b353      	cbz	r3, 8007584 <_dtoa_r+0x8c4>
 800752e:	4639      	mov	r1, r7
 8007530:	9804      	ldr	r0, [sp, #16]
 8007532:	f7ff fa47 	bl	80069c4 <__mcmp>
 8007536:	2800      	cmp	r0, #0
 8007538:	da24      	bge.n	8007584 <_dtoa_r+0x8c4>
 800753a:	2300      	movs	r3, #0
 800753c:	220a      	movs	r2, #10
 800753e:	9904      	ldr	r1, [sp, #16]
 8007540:	4620      	mov	r0, r4
 8007542:	f7ff f874 	bl	800662e <__multadd>
 8007546:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007548:	9004      	str	r0, [sp, #16]
 800754a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800754e:	2b00      	cmp	r3, #0
 8007550:	f000 814d 	beq.w	80077ee <_dtoa_r+0xb2e>
 8007554:	2300      	movs	r3, #0
 8007556:	4631      	mov	r1, r6
 8007558:	220a      	movs	r2, #10
 800755a:	4620      	mov	r0, r4
 800755c:	f7ff f867 	bl	800662e <__multadd>
 8007560:	9b02      	ldr	r3, [sp, #8]
 8007562:	2b00      	cmp	r3, #0
 8007564:	4606      	mov	r6, r0
 8007566:	dc4f      	bgt.n	8007608 <_dtoa_r+0x948>
 8007568:	9b06      	ldr	r3, [sp, #24]
 800756a:	2b02      	cmp	r3, #2
 800756c:	dd4c      	ble.n	8007608 <_dtoa_r+0x948>
 800756e:	e011      	b.n	8007594 <_dtoa_r+0x8d4>
 8007570:	d0c9      	beq.n	8007506 <_dtoa_r+0x846>
 8007572:	9a05      	ldr	r2, [sp, #20]
 8007574:	331c      	adds	r3, #28
 8007576:	441a      	add	r2, r3
 8007578:	9205      	str	r2, [sp, #20]
 800757a:	441d      	add	r5, r3
 800757c:	4498      	add	r8, r3
 800757e:	e7c2      	b.n	8007506 <_dtoa_r+0x846>
 8007580:	4603      	mov	r3, r0
 8007582:	e7f6      	b.n	8007572 <_dtoa_r+0x8b2>
 8007584:	f1b9 0f00 	cmp.w	r9, #0
 8007588:	dc38      	bgt.n	80075fc <_dtoa_r+0x93c>
 800758a:	9b06      	ldr	r3, [sp, #24]
 800758c:	2b02      	cmp	r3, #2
 800758e:	dd35      	ble.n	80075fc <_dtoa_r+0x93c>
 8007590:	f8cd 9008 	str.w	r9, [sp, #8]
 8007594:	9b02      	ldr	r3, [sp, #8]
 8007596:	b963      	cbnz	r3, 80075b2 <_dtoa_r+0x8f2>
 8007598:	4639      	mov	r1, r7
 800759a:	2205      	movs	r2, #5
 800759c:	4620      	mov	r0, r4
 800759e:	f7ff f846 	bl	800662e <__multadd>
 80075a2:	4601      	mov	r1, r0
 80075a4:	4607      	mov	r7, r0
 80075a6:	9804      	ldr	r0, [sp, #16]
 80075a8:	f7ff fa0c 	bl	80069c4 <__mcmp>
 80075ac:	2800      	cmp	r0, #0
 80075ae:	f73f adcc 	bgt.w	800714a <_dtoa_r+0x48a>
 80075b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80075b4:	465d      	mov	r5, fp
 80075b6:	ea6f 0a03 	mvn.w	sl, r3
 80075ba:	f04f 0900 	mov.w	r9, #0
 80075be:	4639      	mov	r1, r7
 80075c0:	4620      	mov	r0, r4
 80075c2:	f7ff f81d 	bl	8006600 <_Bfree>
 80075c6:	2e00      	cmp	r6, #0
 80075c8:	f43f aeb7 	beq.w	800733a <_dtoa_r+0x67a>
 80075cc:	f1b9 0f00 	cmp.w	r9, #0
 80075d0:	d005      	beq.n	80075de <_dtoa_r+0x91e>
 80075d2:	45b1      	cmp	r9, r6
 80075d4:	d003      	beq.n	80075de <_dtoa_r+0x91e>
 80075d6:	4649      	mov	r1, r9
 80075d8:	4620      	mov	r0, r4
 80075da:	f7ff f811 	bl	8006600 <_Bfree>
 80075de:	4631      	mov	r1, r6
 80075e0:	4620      	mov	r0, r4
 80075e2:	f7ff f80d 	bl	8006600 <_Bfree>
 80075e6:	e6a8      	b.n	800733a <_dtoa_r+0x67a>
 80075e8:	2700      	movs	r7, #0
 80075ea:	463e      	mov	r6, r7
 80075ec:	e7e1      	b.n	80075b2 <_dtoa_r+0x8f2>
 80075ee:	f8dd a020 	ldr.w	sl, [sp, #32]
 80075f2:	463e      	mov	r6, r7
 80075f4:	e5a9      	b.n	800714a <_dtoa_r+0x48a>
 80075f6:	bf00      	nop
 80075f8:	40240000 	.word	0x40240000
 80075fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075fe:	f8cd 9008 	str.w	r9, [sp, #8]
 8007602:	2b00      	cmp	r3, #0
 8007604:	f000 80fa 	beq.w	80077fc <_dtoa_r+0xb3c>
 8007608:	2d00      	cmp	r5, #0
 800760a:	dd05      	ble.n	8007618 <_dtoa_r+0x958>
 800760c:	4631      	mov	r1, r6
 800760e:	462a      	mov	r2, r5
 8007610:	4620      	mov	r0, r4
 8007612:	f7ff f983 	bl	800691c <__lshift>
 8007616:	4606      	mov	r6, r0
 8007618:	9b07      	ldr	r3, [sp, #28]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d04c      	beq.n	80076b8 <_dtoa_r+0x9f8>
 800761e:	6871      	ldr	r1, [r6, #4]
 8007620:	4620      	mov	r0, r4
 8007622:	f7fe ffb9 	bl	8006598 <_Balloc>
 8007626:	6932      	ldr	r2, [r6, #16]
 8007628:	3202      	adds	r2, #2
 800762a:	4605      	mov	r5, r0
 800762c:	0092      	lsls	r2, r2, #2
 800762e:	f106 010c 	add.w	r1, r6, #12
 8007632:	300c      	adds	r0, #12
 8007634:	f000 f8fc 	bl	8007830 <memcpy>
 8007638:	2201      	movs	r2, #1
 800763a:	4629      	mov	r1, r5
 800763c:	4620      	mov	r0, r4
 800763e:	f7ff f96d 	bl	800691c <__lshift>
 8007642:	9b00      	ldr	r3, [sp, #0]
 8007644:	f8cd b014 	str.w	fp, [sp, #20]
 8007648:	f003 0301 	and.w	r3, r3, #1
 800764c:	46b1      	mov	r9, r6
 800764e:	9307      	str	r3, [sp, #28]
 8007650:	4606      	mov	r6, r0
 8007652:	4639      	mov	r1, r7
 8007654:	9804      	ldr	r0, [sp, #16]
 8007656:	f7ff faa7 	bl	8006ba8 <quorem>
 800765a:	4649      	mov	r1, r9
 800765c:	4605      	mov	r5, r0
 800765e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8007662:	9804      	ldr	r0, [sp, #16]
 8007664:	f7ff f9ae 	bl	80069c4 <__mcmp>
 8007668:	4632      	mov	r2, r6
 800766a:	9000      	str	r0, [sp, #0]
 800766c:	4639      	mov	r1, r7
 800766e:	4620      	mov	r0, r4
 8007670:	f7ff f9c2 	bl	80069f8 <__mdiff>
 8007674:	68c3      	ldr	r3, [r0, #12]
 8007676:	4602      	mov	r2, r0
 8007678:	bb03      	cbnz	r3, 80076bc <_dtoa_r+0x9fc>
 800767a:	4601      	mov	r1, r0
 800767c:	9008      	str	r0, [sp, #32]
 800767e:	9804      	ldr	r0, [sp, #16]
 8007680:	f7ff f9a0 	bl	80069c4 <__mcmp>
 8007684:	9a08      	ldr	r2, [sp, #32]
 8007686:	4603      	mov	r3, r0
 8007688:	4611      	mov	r1, r2
 800768a:	4620      	mov	r0, r4
 800768c:	9308      	str	r3, [sp, #32]
 800768e:	f7fe ffb7 	bl	8006600 <_Bfree>
 8007692:	9b08      	ldr	r3, [sp, #32]
 8007694:	b9a3      	cbnz	r3, 80076c0 <_dtoa_r+0xa00>
 8007696:	9a06      	ldr	r2, [sp, #24]
 8007698:	b992      	cbnz	r2, 80076c0 <_dtoa_r+0xa00>
 800769a:	9a07      	ldr	r2, [sp, #28]
 800769c:	b982      	cbnz	r2, 80076c0 <_dtoa_r+0xa00>
 800769e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80076a2:	d029      	beq.n	80076f8 <_dtoa_r+0xa38>
 80076a4:	9b00      	ldr	r3, [sp, #0]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	dd01      	ble.n	80076ae <_dtoa_r+0x9ee>
 80076aa:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80076ae:	9b05      	ldr	r3, [sp, #20]
 80076b0:	1c5d      	adds	r5, r3, #1
 80076b2:	f883 8000 	strb.w	r8, [r3]
 80076b6:	e782      	b.n	80075be <_dtoa_r+0x8fe>
 80076b8:	4630      	mov	r0, r6
 80076ba:	e7c2      	b.n	8007642 <_dtoa_r+0x982>
 80076bc:	2301      	movs	r3, #1
 80076be:	e7e3      	b.n	8007688 <_dtoa_r+0x9c8>
 80076c0:	9a00      	ldr	r2, [sp, #0]
 80076c2:	2a00      	cmp	r2, #0
 80076c4:	db04      	blt.n	80076d0 <_dtoa_r+0xa10>
 80076c6:	d125      	bne.n	8007714 <_dtoa_r+0xa54>
 80076c8:	9a06      	ldr	r2, [sp, #24]
 80076ca:	bb1a      	cbnz	r2, 8007714 <_dtoa_r+0xa54>
 80076cc:	9a07      	ldr	r2, [sp, #28]
 80076ce:	bb0a      	cbnz	r2, 8007714 <_dtoa_r+0xa54>
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	ddec      	ble.n	80076ae <_dtoa_r+0x9ee>
 80076d4:	2201      	movs	r2, #1
 80076d6:	9904      	ldr	r1, [sp, #16]
 80076d8:	4620      	mov	r0, r4
 80076da:	f7ff f91f 	bl	800691c <__lshift>
 80076de:	4639      	mov	r1, r7
 80076e0:	9004      	str	r0, [sp, #16]
 80076e2:	f7ff f96f 	bl	80069c4 <__mcmp>
 80076e6:	2800      	cmp	r0, #0
 80076e8:	dc03      	bgt.n	80076f2 <_dtoa_r+0xa32>
 80076ea:	d1e0      	bne.n	80076ae <_dtoa_r+0x9ee>
 80076ec:	f018 0f01 	tst.w	r8, #1
 80076f0:	d0dd      	beq.n	80076ae <_dtoa_r+0x9ee>
 80076f2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80076f6:	d1d8      	bne.n	80076aa <_dtoa_r+0x9ea>
 80076f8:	9b05      	ldr	r3, [sp, #20]
 80076fa:	9a05      	ldr	r2, [sp, #20]
 80076fc:	1c5d      	adds	r5, r3, #1
 80076fe:	2339      	movs	r3, #57	; 0x39
 8007700:	7013      	strb	r3, [r2, #0]
 8007702:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007706:	2b39      	cmp	r3, #57	; 0x39
 8007708:	f105 32ff 	add.w	r2, r5, #4294967295
 800770c:	d04f      	beq.n	80077ae <_dtoa_r+0xaee>
 800770e:	3301      	adds	r3, #1
 8007710:	7013      	strb	r3, [r2, #0]
 8007712:	e754      	b.n	80075be <_dtoa_r+0x8fe>
 8007714:	9a05      	ldr	r2, [sp, #20]
 8007716:	2b00      	cmp	r3, #0
 8007718:	f102 0501 	add.w	r5, r2, #1
 800771c:	dd06      	ble.n	800772c <_dtoa_r+0xa6c>
 800771e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007722:	d0e9      	beq.n	80076f8 <_dtoa_r+0xa38>
 8007724:	f108 0801 	add.w	r8, r8, #1
 8007728:	9b05      	ldr	r3, [sp, #20]
 800772a:	e7c2      	b.n	80076b2 <_dtoa_r+0x9f2>
 800772c:	9a02      	ldr	r2, [sp, #8]
 800772e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8007732:	eba5 030b 	sub.w	r3, r5, fp
 8007736:	4293      	cmp	r3, r2
 8007738:	d021      	beq.n	800777e <_dtoa_r+0xabe>
 800773a:	2300      	movs	r3, #0
 800773c:	220a      	movs	r2, #10
 800773e:	9904      	ldr	r1, [sp, #16]
 8007740:	4620      	mov	r0, r4
 8007742:	f7fe ff74 	bl	800662e <__multadd>
 8007746:	45b1      	cmp	r9, r6
 8007748:	9004      	str	r0, [sp, #16]
 800774a:	f04f 0300 	mov.w	r3, #0
 800774e:	f04f 020a 	mov.w	r2, #10
 8007752:	4649      	mov	r1, r9
 8007754:	4620      	mov	r0, r4
 8007756:	d105      	bne.n	8007764 <_dtoa_r+0xaa4>
 8007758:	f7fe ff69 	bl	800662e <__multadd>
 800775c:	4681      	mov	r9, r0
 800775e:	4606      	mov	r6, r0
 8007760:	9505      	str	r5, [sp, #20]
 8007762:	e776      	b.n	8007652 <_dtoa_r+0x992>
 8007764:	f7fe ff63 	bl	800662e <__multadd>
 8007768:	4631      	mov	r1, r6
 800776a:	4681      	mov	r9, r0
 800776c:	2300      	movs	r3, #0
 800776e:	220a      	movs	r2, #10
 8007770:	4620      	mov	r0, r4
 8007772:	f7fe ff5c 	bl	800662e <__multadd>
 8007776:	4606      	mov	r6, r0
 8007778:	e7f2      	b.n	8007760 <_dtoa_r+0xaa0>
 800777a:	f04f 0900 	mov.w	r9, #0
 800777e:	2201      	movs	r2, #1
 8007780:	9904      	ldr	r1, [sp, #16]
 8007782:	4620      	mov	r0, r4
 8007784:	f7ff f8ca 	bl	800691c <__lshift>
 8007788:	4639      	mov	r1, r7
 800778a:	9004      	str	r0, [sp, #16]
 800778c:	f7ff f91a 	bl	80069c4 <__mcmp>
 8007790:	2800      	cmp	r0, #0
 8007792:	dcb6      	bgt.n	8007702 <_dtoa_r+0xa42>
 8007794:	d102      	bne.n	800779c <_dtoa_r+0xadc>
 8007796:	f018 0f01 	tst.w	r8, #1
 800779a:	d1b2      	bne.n	8007702 <_dtoa_r+0xa42>
 800779c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80077a0:	2b30      	cmp	r3, #48	; 0x30
 80077a2:	f105 32ff 	add.w	r2, r5, #4294967295
 80077a6:	f47f af0a 	bne.w	80075be <_dtoa_r+0x8fe>
 80077aa:	4615      	mov	r5, r2
 80077ac:	e7f6      	b.n	800779c <_dtoa_r+0xadc>
 80077ae:	4593      	cmp	fp, r2
 80077b0:	d105      	bne.n	80077be <_dtoa_r+0xafe>
 80077b2:	2331      	movs	r3, #49	; 0x31
 80077b4:	f10a 0a01 	add.w	sl, sl, #1
 80077b8:	f88b 3000 	strb.w	r3, [fp]
 80077bc:	e6ff      	b.n	80075be <_dtoa_r+0x8fe>
 80077be:	4615      	mov	r5, r2
 80077c0:	e79f      	b.n	8007702 <_dtoa_r+0xa42>
 80077c2:	f8df b064 	ldr.w	fp, [pc, #100]	; 8007828 <_dtoa_r+0xb68>
 80077c6:	e007      	b.n	80077d8 <_dtoa_r+0xb18>
 80077c8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80077ca:	f8df b060 	ldr.w	fp, [pc, #96]	; 800782c <_dtoa_r+0xb6c>
 80077ce:	b11b      	cbz	r3, 80077d8 <_dtoa_r+0xb18>
 80077d0:	f10b 0308 	add.w	r3, fp, #8
 80077d4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80077d6:	6013      	str	r3, [r2, #0]
 80077d8:	4658      	mov	r0, fp
 80077da:	b017      	add	sp, #92	; 0x5c
 80077dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077e0:	9b06      	ldr	r3, [sp, #24]
 80077e2:	2b01      	cmp	r3, #1
 80077e4:	f77f ae35 	ble.w	8007452 <_dtoa_r+0x792>
 80077e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80077ea:	9307      	str	r3, [sp, #28]
 80077ec:	e649      	b.n	8007482 <_dtoa_r+0x7c2>
 80077ee:	9b02      	ldr	r3, [sp, #8]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	dc03      	bgt.n	80077fc <_dtoa_r+0xb3c>
 80077f4:	9b06      	ldr	r3, [sp, #24]
 80077f6:	2b02      	cmp	r3, #2
 80077f8:	f73f aecc 	bgt.w	8007594 <_dtoa_r+0x8d4>
 80077fc:	465d      	mov	r5, fp
 80077fe:	4639      	mov	r1, r7
 8007800:	9804      	ldr	r0, [sp, #16]
 8007802:	f7ff f9d1 	bl	8006ba8 <quorem>
 8007806:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800780a:	f805 8b01 	strb.w	r8, [r5], #1
 800780e:	9a02      	ldr	r2, [sp, #8]
 8007810:	eba5 030b 	sub.w	r3, r5, fp
 8007814:	429a      	cmp	r2, r3
 8007816:	ddb0      	ble.n	800777a <_dtoa_r+0xaba>
 8007818:	2300      	movs	r3, #0
 800781a:	220a      	movs	r2, #10
 800781c:	9904      	ldr	r1, [sp, #16]
 800781e:	4620      	mov	r0, r4
 8007820:	f7fe ff05 	bl	800662e <__multadd>
 8007824:	9004      	str	r0, [sp, #16]
 8007826:	e7ea      	b.n	80077fe <_dtoa_r+0xb3e>
 8007828:	08007bc9 	.word	0x08007bc9
 800782c:	08007bbc 	.word	0x08007bbc

08007830 <memcpy>:
 8007830:	b510      	push	{r4, lr}
 8007832:	1e43      	subs	r3, r0, #1
 8007834:	440a      	add	r2, r1
 8007836:	4291      	cmp	r1, r2
 8007838:	d100      	bne.n	800783c <memcpy+0xc>
 800783a:	bd10      	pop	{r4, pc}
 800783c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007840:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007844:	e7f7      	b.n	8007836 <memcpy+0x6>
	...

08007848 <_init>:
 8007848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800784a:	bf00      	nop
 800784c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800784e:	bc08      	pop	{r3}
 8007850:	469e      	mov	lr, r3
 8007852:	4770      	bx	lr

08007854 <_fini>:
 8007854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007856:	bf00      	nop
 8007858:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800785a:	bc08      	pop	{r3}
 800785c:	469e      	mov	lr, r3
 800785e:	4770      	bx	lr
