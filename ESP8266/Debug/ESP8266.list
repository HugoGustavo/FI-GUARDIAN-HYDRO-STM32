
ESP8266.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006bb0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000968  08006d40  08006d40  00016d40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080076a8  080076a8  000202bc  2**0
                  CONTENTS
  4 .ARM          00000008  080076a8  080076a8  000176a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080076b0  080076b0  000202bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080076b0  080076b0  000176b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080076b4  080076b4  000176b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002bc  20000000  080076b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007f4  200002bc  08007974  000202bc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ab0  08007974  00020ab0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013564  00000000  00000000  000202ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002a7a  00000000  00000000  00033850  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e48  00000000  00000000  000362d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000cf0  00000000  00000000  00037118  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023437  00000000  00000000  00037e08  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c739  00000000  00000000  0005b23f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ceb12  00000000  00000000  00067978  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013648a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004224  00000000  00000000  00136508  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002bc 	.word	0x200002bc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006d28 	.word	0x08006d28

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002c0 	.word	0x200002c0
 80001cc:	08006d28 	.word	0x08006d28

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_d2f>:
 8000618:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800061c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000620:	bf24      	itt	cs
 8000622:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000626:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800062a:	d90d      	bls.n	8000648 <__aeabi_d2f+0x30>
 800062c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000630:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000634:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000638:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800063c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000640:	bf08      	it	eq
 8000642:	f020 0001 	biceq.w	r0, r0, #1
 8000646:	4770      	bx	lr
 8000648:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800064c:	d121      	bne.n	8000692 <__aeabi_d2f+0x7a>
 800064e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000652:	bfbc      	itt	lt
 8000654:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000658:	4770      	bxlt	lr
 800065a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800065e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000662:	f1c2 0218 	rsb	r2, r2, #24
 8000666:	f1c2 0c20 	rsb	ip, r2, #32
 800066a:	fa10 f30c 	lsls.w	r3, r0, ip
 800066e:	fa20 f002 	lsr.w	r0, r0, r2
 8000672:	bf18      	it	ne
 8000674:	f040 0001 	orrne.w	r0, r0, #1
 8000678:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800067c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000680:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000684:	ea40 000c 	orr.w	r0, r0, ip
 8000688:	fa23 f302 	lsr.w	r3, r3, r2
 800068c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000690:	e7cc      	b.n	800062c <__aeabi_d2f+0x14>
 8000692:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000696:	d107      	bne.n	80006a8 <__aeabi_d2f+0x90>
 8000698:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800069c:	bf1e      	ittt	ne
 800069e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80006a2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80006a6:	4770      	bxne	lr
 80006a8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80006ac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80006b0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop

080006b8 <__aeabi_uldivmod>:
 80006b8:	b953      	cbnz	r3, 80006d0 <__aeabi_uldivmod+0x18>
 80006ba:	b94a      	cbnz	r2, 80006d0 <__aeabi_uldivmod+0x18>
 80006bc:	2900      	cmp	r1, #0
 80006be:	bf08      	it	eq
 80006c0:	2800      	cmpeq	r0, #0
 80006c2:	bf1c      	itt	ne
 80006c4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80006c8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80006cc:	f000 b972 	b.w	80009b4 <__aeabi_idiv0>
 80006d0:	f1ad 0c08 	sub.w	ip, sp, #8
 80006d4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80006d8:	f000 f806 	bl	80006e8 <__udivmoddi4>
 80006dc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006e4:	b004      	add	sp, #16
 80006e6:	4770      	bx	lr

080006e8 <__udivmoddi4>:
 80006e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80006ec:	9e08      	ldr	r6, [sp, #32]
 80006ee:	4604      	mov	r4, r0
 80006f0:	4688      	mov	r8, r1
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d14b      	bne.n	800078e <__udivmoddi4+0xa6>
 80006f6:	428a      	cmp	r2, r1
 80006f8:	4615      	mov	r5, r2
 80006fa:	d967      	bls.n	80007cc <__udivmoddi4+0xe4>
 80006fc:	fab2 f282 	clz	r2, r2
 8000700:	b14a      	cbz	r2, 8000716 <__udivmoddi4+0x2e>
 8000702:	f1c2 0720 	rsb	r7, r2, #32
 8000706:	fa01 f302 	lsl.w	r3, r1, r2
 800070a:	fa20 f707 	lsr.w	r7, r0, r7
 800070e:	4095      	lsls	r5, r2
 8000710:	ea47 0803 	orr.w	r8, r7, r3
 8000714:	4094      	lsls	r4, r2
 8000716:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800071a:	0c23      	lsrs	r3, r4, #16
 800071c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000720:	fa1f fc85 	uxth.w	ip, r5
 8000724:	fb0e 8817 	mls	r8, lr, r7, r8
 8000728:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800072c:	fb07 f10c 	mul.w	r1, r7, ip
 8000730:	4299      	cmp	r1, r3
 8000732:	d909      	bls.n	8000748 <__udivmoddi4+0x60>
 8000734:	18eb      	adds	r3, r5, r3
 8000736:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800073a:	f080 811b 	bcs.w	8000974 <__udivmoddi4+0x28c>
 800073e:	4299      	cmp	r1, r3
 8000740:	f240 8118 	bls.w	8000974 <__udivmoddi4+0x28c>
 8000744:	3f02      	subs	r7, #2
 8000746:	442b      	add	r3, r5
 8000748:	1a5b      	subs	r3, r3, r1
 800074a:	b2a4      	uxth	r4, r4
 800074c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000750:	fb0e 3310 	mls	r3, lr, r0, r3
 8000754:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000758:	fb00 fc0c 	mul.w	ip, r0, ip
 800075c:	45a4      	cmp	ip, r4
 800075e:	d909      	bls.n	8000774 <__udivmoddi4+0x8c>
 8000760:	192c      	adds	r4, r5, r4
 8000762:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000766:	f080 8107 	bcs.w	8000978 <__udivmoddi4+0x290>
 800076a:	45a4      	cmp	ip, r4
 800076c:	f240 8104 	bls.w	8000978 <__udivmoddi4+0x290>
 8000770:	3802      	subs	r0, #2
 8000772:	442c      	add	r4, r5
 8000774:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000778:	eba4 040c 	sub.w	r4, r4, ip
 800077c:	2700      	movs	r7, #0
 800077e:	b11e      	cbz	r6, 8000788 <__udivmoddi4+0xa0>
 8000780:	40d4      	lsrs	r4, r2
 8000782:	2300      	movs	r3, #0
 8000784:	e9c6 4300 	strd	r4, r3, [r6]
 8000788:	4639      	mov	r1, r7
 800078a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800078e:	428b      	cmp	r3, r1
 8000790:	d909      	bls.n	80007a6 <__udivmoddi4+0xbe>
 8000792:	2e00      	cmp	r6, #0
 8000794:	f000 80eb 	beq.w	800096e <__udivmoddi4+0x286>
 8000798:	2700      	movs	r7, #0
 800079a:	e9c6 0100 	strd	r0, r1, [r6]
 800079e:	4638      	mov	r0, r7
 80007a0:	4639      	mov	r1, r7
 80007a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007a6:	fab3 f783 	clz	r7, r3
 80007aa:	2f00      	cmp	r7, #0
 80007ac:	d147      	bne.n	800083e <__udivmoddi4+0x156>
 80007ae:	428b      	cmp	r3, r1
 80007b0:	d302      	bcc.n	80007b8 <__udivmoddi4+0xd0>
 80007b2:	4282      	cmp	r2, r0
 80007b4:	f200 80fa 	bhi.w	80009ac <__udivmoddi4+0x2c4>
 80007b8:	1a84      	subs	r4, r0, r2
 80007ba:	eb61 0303 	sbc.w	r3, r1, r3
 80007be:	2001      	movs	r0, #1
 80007c0:	4698      	mov	r8, r3
 80007c2:	2e00      	cmp	r6, #0
 80007c4:	d0e0      	beq.n	8000788 <__udivmoddi4+0xa0>
 80007c6:	e9c6 4800 	strd	r4, r8, [r6]
 80007ca:	e7dd      	b.n	8000788 <__udivmoddi4+0xa0>
 80007cc:	b902      	cbnz	r2, 80007d0 <__udivmoddi4+0xe8>
 80007ce:	deff      	udf	#255	; 0xff
 80007d0:	fab2 f282 	clz	r2, r2
 80007d4:	2a00      	cmp	r2, #0
 80007d6:	f040 808f 	bne.w	80008f8 <__udivmoddi4+0x210>
 80007da:	1b49      	subs	r1, r1, r5
 80007dc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80007e0:	fa1f f885 	uxth.w	r8, r5
 80007e4:	2701      	movs	r7, #1
 80007e6:	fbb1 fcfe 	udiv	ip, r1, lr
 80007ea:	0c23      	lsrs	r3, r4, #16
 80007ec:	fb0e 111c 	mls	r1, lr, ip, r1
 80007f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007f4:	fb08 f10c 	mul.w	r1, r8, ip
 80007f8:	4299      	cmp	r1, r3
 80007fa:	d907      	bls.n	800080c <__udivmoddi4+0x124>
 80007fc:	18eb      	adds	r3, r5, r3
 80007fe:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000802:	d202      	bcs.n	800080a <__udivmoddi4+0x122>
 8000804:	4299      	cmp	r1, r3
 8000806:	f200 80cd 	bhi.w	80009a4 <__udivmoddi4+0x2bc>
 800080a:	4684      	mov	ip, r0
 800080c:	1a59      	subs	r1, r3, r1
 800080e:	b2a3      	uxth	r3, r4
 8000810:	fbb1 f0fe 	udiv	r0, r1, lr
 8000814:	fb0e 1410 	mls	r4, lr, r0, r1
 8000818:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800081c:	fb08 f800 	mul.w	r8, r8, r0
 8000820:	45a0      	cmp	r8, r4
 8000822:	d907      	bls.n	8000834 <__udivmoddi4+0x14c>
 8000824:	192c      	adds	r4, r5, r4
 8000826:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800082a:	d202      	bcs.n	8000832 <__udivmoddi4+0x14a>
 800082c:	45a0      	cmp	r8, r4
 800082e:	f200 80b6 	bhi.w	800099e <__udivmoddi4+0x2b6>
 8000832:	4618      	mov	r0, r3
 8000834:	eba4 0408 	sub.w	r4, r4, r8
 8000838:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800083c:	e79f      	b.n	800077e <__udivmoddi4+0x96>
 800083e:	f1c7 0c20 	rsb	ip, r7, #32
 8000842:	40bb      	lsls	r3, r7
 8000844:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000848:	ea4e 0e03 	orr.w	lr, lr, r3
 800084c:	fa01 f407 	lsl.w	r4, r1, r7
 8000850:	fa20 f50c 	lsr.w	r5, r0, ip
 8000854:	fa21 f30c 	lsr.w	r3, r1, ip
 8000858:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800085c:	4325      	orrs	r5, r4
 800085e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000862:	0c2c      	lsrs	r4, r5, #16
 8000864:	fb08 3319 	mls	r3, r8, r9, r3
 8000868:	fa1f fa8e 	uxth.w	sl, lr
 800086c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000870:	fb09 f40a 	mul.w	r4, r9, sl
 8000874:	429c      	cmp	r4, r3
 8000876:	fa02 f207 	lsl.w	r2, r2, r7
 800087a:	fa00 f107 	lsl.w	r1, r0, r7
 800087e:	d90b      	bls.n	8000898 <__udivmoddi4+0x1b0>
 8000880:	eb1e 0303 	adds.w	r3, lr, r3
 8000884:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000888:	f080 8087 	bcs.w	800099a <__udivmoddi4+0x2b2>
 800088c:	429c      	cmp	r4, r3
 800088e:	f240 8084 	bls.w	800099a <__udivmoddi4+0x2b2>
 8000892:	f1a9 0902 	sub.w	r9, r9, #2
 8000896:	4473      	add	r3, lr
 8000898:	1b1b      	subs	r3, r3, r4
 800089a:	b2ad      	uxth	r5, r5
 800089c:	fbb3 f0f8 	udiv	r0, r3, r8
 80008a0:	fb08 3310 	mls	r3, r8, r0, r3
 80008a4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80008a8:	fb00 fa0a 	mul.w	sl, r0, sl
 80008ac:	45a2      	cmp	sl, r4
 80008ae:	d908      	bls.n	80008c2 <__udivmoddi4+0x1da>
 80008b0:	eb1e 0404 	adds.w	r4, lr, r4
 80008b4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80008b8:	d26b      	bcs.n	8000992 <__udivmoddi4+0x2aa>
 80008ba:	45a2      	cmp	sl, r4
 80008bc:	d969      	bls.n	8000992 <__udivmoddi4+0x2aa>
 80008be:	3802      	subs	r0, #2
 80008c0:	4474      	add	r4, lr
 80008c2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80008c6:	fba0 8902 	umull	r8, r9, r0, r2
 80008ca:	eba4 040a 	sub.w	r4, r4, sl
 80008ce:	454c      	cmp	r4, r9
 80008d0:	46c2      	mov	sl, r8
 80008d2:	464b      	mov	r3, r9
 80008d4:	d354      	bcc.n	8000980 <__udivmoddi4+0x298>
 80008d6:	d051      	beq.n	800097c <__udivmoddi4+0x294>
 80008d8:	2e00      	cmp	r6, #0
 80008da:	d069      	beq.n	80009b0 <__udivmoddi4+0x2c8>
 80008dc:	ebb1 050a 	subs.w	r5, r1, sl
 80008e0:	eb64 0403 	sbc.w	r4, r4, r3
 80008e4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80008e8:	40fd      	lsrs	r5, r7
 80008ea:	40fc      	lsrs	r4, r7
 80008ec:	ea4c 0505 	orr.w	r5, ip, r5
 80008f0:	e9c6 5400 	strd	r5, r4, [r6]
 80008f4:	2700      	movs	r7, #0
 80008f6:	e747      	b.n	8000788 <__udivmoddi4+0xa0>
 80008f8:	f1c2 0320 	rsb	r3, r2, #32
 80008fc:	fa20 f703 	lsr.w	r7, r0, r3
 8000900:	4095      	lsls	r5, r2
 8000902:	fa01 f002 	lsl.w	r0, r1, r2
 8000906:	fa21 f303 	lsr.w	r3, r1, r3
 800090a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800090e:	4338      	orrs	r0, r7
 8000910:	0c01      	lsrs	r1, r0, #16
 8000912:	fbb3 f7fe 	udiv	r7, r3, lr
 8000916:	fa1f f885 	uxth.w	r8, r5
 800091a:	fb0e 3317 	mls	r3, lr, r7, r3
 800091e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000922:	fb07 f308 	mul.w	r3, r7, r8
 8000926:	428b      	cmp	r3, r1
 8000928:	fa04 f402 	lsl.w	r4, r4, r2
 800092c:	d907      	bls.n	800093e <__udivmoddi4+0x256>
 800092e:	1869      	adds	r1, r5, r1
 8000930:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000934:	d22f      	bcs.n	8000996 <__udivmoddi4+0x2ae>
 8000936:	428b      	cmp	r3, r1
 8000938:	d92d      	bls.n	8000996 <__udivmoddi4+0x2ae>
 800093a:	3f02      	subs	r7, #2
 800093c:	4429      	add	r1, r5
 800093e:	1acb      	subs	r3, r1, r3
 8000940:	b281      	uxth	r1, r0
 8000942:	fbb3 f0fe 	udiv	r0, r3, lr
 8000946:	fb0e 3310 	mls	r3, lr, r0, r3
 800094a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800094e:	fb00 f308 	mul.w	r3, r0, r8
 8000952:	428b      	cmp	r3, r1
 8000954:	d907      	bls.n	8000966 <__udivmoddi4+0x27e>
 8000956:	1869      	adds	r1, r5, r1
 8000958:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800095c:	d217      	bcs.n	800098e <__udivmoddi4+0x2a6>
 800095e:	428b      	cmp	r3, r1
 8000960:	d915      	bls.n	800098e <__udivmoddi4+0x2a6>
 8000962:	3802      	subs	r0, #2
 8000964:	4429      	add	r1, r5
 8000966:	1ac9      	subs	r1, r1, r3
 8000968:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800096c:	e73b      	b.n	80007e6 <__udivmoddi4+0xfe>
 800096e:	4637      	mov	r7, r6
 8000970:	4630      	mov	r0, r6
 8000972:	e709      	b.n	8000788 <__udivmoddi4+0xa0>
 8000974:	4607      	mov	r7, r0
 8000976:	e6e7      	b.n	8000748 <__udivmoddi4+0x60>
 8000978:	4618      	mov	r0, r3
 800097a:	e6fb      	b.n	8000774 <__udivmoddi4+0x8c>
 800097c:	4541      	cmp	r1, r8
 800097e:	d2ab      	bcs.n	80008d8 <__udivmoddi4+0x1f0>
 8000980:	ebb8 0a02 	subs.w	sl, r8, r2
 8000984:	eb69 020e 	sbc.w	r2, r9, lr
 8000988:	3801      	subs	r0, #1
 800098a:	4613      	mov	r3, r2
 800098c:	e7a4      	b.n	80008d8 <__udivmoddi4+0x1f0>
 800098e:	4660      	mov	r0, ip
 8000990:	e7e9      	b.n	8000966 <__udivmoddi4+0x27e>
 8000992:	4618      	mov	r0, r3
 8000994:	e795      	b.n	80008c2 <__udivmoddi4+0x1da>
 8000996:	4667      	mov	r7, ip
 8000998:	e7d1      	b.n	800093e <__udivmoddi4+0x256>
 800099a:	4681      	mov	r9, r0
 800099c:	e77c      	b.n	8000898 <__udivmoddi4+0x1b0>
 800099e:	3802      	subs	r0, #2
 80009a0:	442c      	add	r4, r5
 80009a2:	e747      	b.n	8000834 <__udivmoddi4+0x14c>
 80009a4:	f1ac 0c02 	sub.w	ip, ip, #2
 80009a8:	442b      	add	r3, r5
 80009aa:	e72f      	b.n	800080c <__udivmoddi4+0x124>
 80009ac:	4638      	mov	r0, r7
 80009ae:	e708      	b.n	80007c2 <__udivmoddi4+0xda>
 80009b0:	4637      	mov	r7, r6
 80009b2:	e6e9      	b.n	8000788 <__udivmoddi4+0xa0>

080009b4 <__aeabi_idiv0>:
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop

080009b8 <app_init>:
#include "ssd1306.h"
#include "hw.h"
#include "iot.h"

void app_init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
	  SSD1306_Init();
 80009bc:	f002 f836 	bl	8002a2c <SSD1306_Init>
	  SDD1306_Clear_Screen();
 80009c0:	f002 f804 	bl	80029cc <SDD1306_Clear_Screen>
	  SSD1306_Goto(0, 1);
 80009c4:	2101      	movs	r1, #1
 80009c6:	2000      	movs	r0, #0
 80009c8:	f001 ff2a 	bl	8002820 <SSD1306_Goto>
	  SSD1306_Write_Centered_String((uint8_t*)"FIGUARDIAN DEVICE",0);
 80009cc:	2100      	movs	r1, #0
 80009ce:	480f      	ldr	r0, [pc, #60]	; (8000a0c <app_init+0x54>)
 80009d0:	f001 ffd6 	bl	8002980 <SSD1306_Write_Centered_String>
	  SSD1306_Goto(0, 2);
 80009d4:	2102      	movs	r1, #2
 80009d6:	2000      	movs	r0, #0
 80009d8:	f001 ff22 	bl	8002820 <SSD1306_Goto>
	  SSD1306_Write_Centered_String((uint8_t*)"DISPLAY TEST DIEGO",1);
 80009dc:	2101      	movs	r1, #1
 80009de:	480c      	ldr	r0, [pc, #48]	; (8000a10 <app_init+0x58>)
 80009e0:	f001 ffce 	bl	8002980 <SSD1306_Write_Centered_String>
	  SSD1306_Goto(0, 7);
 80009e4:	2107      	movs	r1, #7
 80009e6:	2000      	movs	r0, #0
 80009e8:	f001 ff1a 	bl	8002820 <SSD1306_Goto>
	  SSD1306_Write_String((uint8_t*)"Finish");
 80009ec:	4809      	ldr	r0, [pc, #36]	; (8000a14 <app_init+0x5c>)
 80009ee:	f001 ffb3 	bl	8002958 <SSD1306_Write_String>

	  hw_esp_power_set(true);
 80009f2:	2001      	movs	r0, #1
 80009f4:	f000 fdc6 	bl	8001584 <hw_esp_power_set>
	  hw_time_sleep(100);
 80009f8:	2064      	movs	r0, #100	; 0x64
 80009fa:	f000 ff3b 	bl	8001874 <hw_time_sleep>

	  hw_uart_init();
 80009fe:	f000 ff4f 	bl	80018a0 <hw_uart_init>
	  iot_on();
 8000a02:	f001 fd49 	bl	8002498 <iot_on>

}
 8000a06:	bf00      	nop
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	08006d40 	.word	0x08006d40
 8000a10:	08006d54 	.word	0x08006d54
 8000a14:	08006d68 	.word	0x08006d68

08000a18 <app_main>:

void app_main(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
	iot_update();
 8000a1c:	f001 fd4c 	bl	80024b8 <iot_update>
	hw_time_sleep(5000);
 8000a20:	f241 3088 	movw	r0, #5000	; 0x1388
 8000a24:	f000 ff26 	bl	8001874 <hw_time_sleep>
}
 8000a28:	bf00      	nop
 8000a2a:	bd80      	pop	{r7, pc}

08000a2c <at_init>:
ceb_cbuf_t at_cb;
at_cmd_t cmd;
volatile bool at_started = false;

bool at_init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
    if(ceb_cbuf_init(&at_cb,at_rx_cbuf_area,AT_CBUF_MAX) == CEB_CBUF_OK)
 8000a30:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a34:	4907      	ldr	r1, [pc, #28]	; (8000a54 <at_init+0x28>)
 8000a36:	4808      	ldr	r0, [pc, #32]	; (8000a58 <at_init+0x2c>)
 8000a38:	f000 fbca 	bl	80011d0 <ceb_cbuf_init>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d102      	bne.n	8000a48 <at_init+0x1c>
    	at_started = true;
 8000a42:	4b06      	ldr	r3, [pc, #24]	; (8000a5c <at_init+0x30>)
 8000a44:	2201      	movs	r2, #1
 8000a46:	701a      	strb	r2, [r3, #0]

    return at_started;
 8000a48:	4b04      	ldr	r3, [pc, #16]	; (8000a5c <at_init+0x30>)
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	b2db      	uxtb	r3, r3
}   
 8000a4e:	4618      	mov	r0, r3
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	200002f4 	.word	0x200002f4
 8000a58:	200002e8 	.word	0x200002e8
 8000a5c:	200002d8 	.word	0x200002d8

08000a60 <at_get_cbuf>:

ceb_cbuf_t *at_get_cbuf(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
    return &at_cb;
 8000a64:	4b02      	ldr	r3, [pc, #8]	; (8000a70 <at_get_cbuf+0x10>)
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6e:	4770      	bx	lr
 8000a70:	200002e8 	.word	0x200002e8

08000a74 <at_send_cmd_blocking>:
at_status_t at_send_cmd_blocking(at_cmd_t *cmd, uint32_t tmrout_ms)
{
 8000a74:	b5b0      	push	{r4, r5, r7, lr}
 8000a76:	b0aa      	sub	sp, #168	; 0xa8
 8000a78:	af04      	add	r7, sp, #16
 8000a7a:	6078      	str	r0, [r7, #4]
 8000a7c:	6039      	str	r1, [r7, #0]
    int16_t ans;
    uint16_t nb;

    if(cmd->id >= AT_CMD_NONE)
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	2b13      	cmp	r3, #19
 8000a84:	d901      	bls.n	8000a8a <at_send_cmd_blocking+0x16>
        return AT_STATUS_INVAL_CMD;
 8000a86:	2303      	movs	r3, #3
 8000a88:	e379      	b.n	800117e <at_send_cmd_blocking+0x70a>

    // AT, if any
    hw_serial_tx(at_at,strlen((const char *)at_at));
 8000a8a:	4bac      	ldr	r3, [pc, #688]	; (8000d3c <at_send_cmd_blocking+0x2c8>)
 8000a8c:	681c      	ldr	r4, [r3, #0]
 8000a8e:	4bab      	ldr	r3, [pc, #684]	; (8000d3c <at_send_cmd_blocking+0x2c8>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	4618      	mov	r0, r3
 8000a94:	f7ff fba6 	bl	80001e4 <strlen>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	b29b      	uxth	r3, r3
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	4620      	mov	r0, r4
 8000aa0:	f000 fea0 	bl	80017e4 <hw_serial_tx>

    // base command name
    hw_serial_tx(at_cmd_basename_str[cmd->id],strlen((const char *)at_cmd_basename_str[cmd->id]));
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	461a      	mov	r2, r3
 8000aaa:	4ba5      	ldr	r3, [pc, #660]	; (8000d40 <at_send_cmd_blocking+0x2cc>)
 8000aac:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	461a      	mov	r2, r3
 8000ab6:	4ba2      	ldr	r3, [pc, #648]	; (8000d40 <at_send_cmd_blocking+0x2cc>)
 8000ab8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000abc:	4618      	mov	r0, r3
 8000abe:	f7ff fb91 	bl	80001e4 <strlen>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	b29b      	uxth	r3, r3
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	4620      	mov	r0, r4
 8000aca:	f000 fe8b 	bl	80017e4 <hw_serial_tx>

    // parameters, if any
    switch(cmd->id)
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	3b02      	subs	r3, #2
 8000ad4:	2b11      	cmp	r3, #17
 8000ad6:	f200 82f6 	bhi.w	80010c6 <at_send_cmd_blocking+0x652>
 8000ada:	a201      	add	r2, pc, #4	; (adr r2, 8000ae0 <at_send_cmd_blocking+0x6c>)
 8000adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ae0:	08000b95 	.word	0x08000b95
 8000ae4:	08000bb1 	.word	0x08000bb1
 8000ae8:	08000b29 	.word	0x08000b29
 8000aec:	080010c7 	.word	0x080010c7
 8000af0:	08000bd5 	.word	0x08000bd5
 8000af4:	08000c23 	.word	0x08000c23
 8000af8:	08000cc5 	.word	0x08000cc5
 8000afc:	08000c55 	.word	0x08000c55
 8000b00:	08000d5d 	.word	0x08000d5d
 8000b04:	08000de7 	.word	0x08000de7
 8000b08:	08000e19 	.word	0x08000e19
 8000b0c:	08000b4d 	.word	0x08000b4d
 8000b10:	08000e79 	.word	0x08000e79
 8000b14:	08001023 	.word	0x08001023
 8000b18:	08000f67 	.word	0x08000f67
 8000b1c:	08000e49 	.word	0x08000e49
 8000b20:	08000b71 	.word	0x08000b71
 8000b24:	0800107d 	.word	0x0800107d
    {
        case AT_CMD_WIFI_AP_MODE:
        {
            uint8_t mode = '0' + cmd->payload.wifi_mode.ap_station;
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	791b      	ldrb	r3, [r3, #4]
 8000b2c:	3330      	adds	r3, #48	; 0x30
 8000b2e:	b2db      	uxtb	r3, r3
 8000b30:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
            hw_serial_tx((uint8_t *)"=",1);
 8000b34:	2101      	movs	r1, #1
 8000b36:	4883      	ldr	r0, [pc, #524]	; (8000d44 <at_send_cmd_blocking+0x2d0>)
 8000b38:	f000 fe54 	bl	80017e4 <hw_serial_tx>
            hw_serial_tx(&mode,1);
 8000b3c:	f107 0393 	add.w	r3, r7, #147	; 0x93
 8000b40:	2101      	movs	r1, #1
 8000b42:	4618      	mov	r0, r3
 8000b44:	f000 fe4e 	bl	80017e4 <hw_serial_tx>
            break;
 8000b48:	bf00      	nop
 8000b4a:	e2c1      	b.n	80010d0 <at_send_cmd_blocking+0x65c>
        }
        case AT_CMD_CON_MUX:
        {
            uint8_t mode = '0' + cmd->payload.mux.enabled;
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	791b      	ldrb	r3, [r3, #4]
 8000b50:	3330      	adds	r3, #48	; 0x30
 8000b52:	b2db      	uxtb	r3, r3
 8000b54:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
            hw_serial_tx((uint8_t *)"=",1);
 8000b58:	2101      	movs	r1, #1
 8000b5a:	487a      	ldr	r0, [pc, #488]	; (8000d44 <at_send_cmd_blocking+0x2d0>)
 8000b5c:	f000 fe42 	bl	80017e4 <hw_serial_tx>
            hw_serial_tx(&mode,1);
 8000b60:	f107 0392 	add.w	r3, r7, #146	; 0x92
 8000b64:	2101      	movs	r1, #1
 8000b66:	4618      	mov	r0, r3
 8000b68:	f000 fe3c 	bl	80017e4 <hw_serial_tx>
            break;
 8000b6c:	bf00      	nop
 8000b6e:	e2af      	b.n	80010d0 <at_send_cmd_blocking+0x65c>
        }
        case AT_CMD_CON_MODE:
        {
            uint8_t mode = '0' + cmd->payload.con_mode.mode;
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	791b      	ldrb	r3, [r3, #4]
 8000b74:	3330      	adds	r3, #48	; 0x30
 8000b76:	b2db      	uxtb	r3, r3
 8000b78:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91
            hw_serial_tx((uint8_t *)"=",1);
 8000b7c:	2101      	movs	r1, #1
 8000b7e:	4871      	ldr	r0, [pc, #452]	; (8000d44 <at_send_cmd_blocking+0x2d0>)
 8000b80:	f000 fe30 	bl	80017e4 <hw_serial_tx>
            hw_serial_tx(&mode,1);
 8000b84:	f107 0391 	add.w	r3, r7, #145	; 0x91
 8000b88:	2101      	movs	r1, #1
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f000 fe2a 	bl	80017e4 <hw_serial_tx>
            break;            
 8000b90:	bf00      	nop
 8000b92:	e29d      	b.n	80010d0 <at_send_cmd_blocking+0x65c>
        }
        case AT_CMD_ECHO:
        {
            uint8_t mode = '0' + cmd->payload.echo.enabled;
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	791b      	ldrb	r3, [r3, #4]
 8000b98:	3330      	adds	r3, #48	; 0x30
 8000b9a:	b2db      	uxtb	r3, r3
 8000b9c:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
            hw_serial_tx(&mode,1);
 8000ba0:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000ba4:	2101      	movs	r1, #1
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f000 fe1c 	bl	80017e4 <hw_serial_tx>
            break;                        
 8000bac:	bf00      	nop
 8000bae:	e28f      	b.n	80010d0 <at_send_cmd_blocking+0x65c>
        }
        case AT_CMD_WIFI_AUTO_CON:
        {
            uint8_t enabled = '0' + cmd->payload.wifi_autocon.enabled;
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	791b      	ldrb	r3, [r3, #4]
 8000bb4:	3330      	adds	r3, #48	; 0x30
 8000bb6:	b2db      	uxtb	r3, r3
 8000bb8:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            hw_serial_tx((uint8_t *)"=",1);
 8000bbc:	2101      	movs	r1, #1
 8000bbe:	4861      	ldr	r0, [pc, #388]	; (8000d44 <at_send_cmd_blocking+0x2d0>)
 8000bc0:	f000 fe10 	bl	80017e4 <hw_serial_tx>
            hw_serial_tx(&enabled,1);
 8000bc4:	f107 038f 	add.w	r3, r7, #143	; 0x8f
 8000bc8:	2101      	movs	r1, #1
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f000 fe0a 	bl	80017e4 <hw_serial_tx>
        	break;
 8000bd0:	bf00      	nop
 8000bd2:	e27d      	b.n	80010d0 <at_send_cmd_blocking+0x65c>
        }
        case AT_CMD_WIFI_AP_SET:
        {
            hw_serial_tx((uint8_t *)"=\"",2);
 8000bd4:	2102      	movs	r1, #2
 8000bd6:	485c      	ldr	r0, [pc, #368]	; (8000d48 <at_send_cmd_blocking+0x2d4>)
 8000bd8:	f000 fe04 	bl	80017e4 <hw_serial_tx>
            hw_serial_tx(cmd->payload.wifi_ap.ssid,strlen((char *)cmd->payload.wifi_ap.ssid));
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	685c      	ldr	r4, [r3, #4]
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	685b      	ldr	r3, [r3, #4]
 8000be4:	4618      	mov	r0, r3
 8000be6:	f7ff fafd 	bl	80001e4 <strlen>
 8000bea:	4603      	mov	r3, r0
 8000bec:	b29b      	uxth	r3, r3
 8000bee:	4619      	mov	r1, r3
 8000bf0:	4620      	mov	r0, r4
 8000bf2:	f000 fdf7 	bl	80017e4 <hw_serial_tx>
            hw_serial_tx((uint8_t *)"\",\"",3);
 8000bf6:	2103      	movs	r1, #3
 8000bf8:	4854      	ldr	r0, [pc, #336]	; (8000d4c <at_send_cmd_blocking+0x2d8>)
 8000bfa:	f000 fdf3 	bl	80017e4 <hw_serial_tx>
            hw_serial_tx(cmd->payload.wifi_ap.pwd,strlen((char *)cmd->payload.wifi_ap.pwd));
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	689c      	ldr	r4, [r3, #8]
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	689b      	ldr	r3, [r3, #8]
 8000c06:	4618      	mov	r0, r3
 8000c08:	f7ff faec 	bl	80001e4 <strlen>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	b29b      	uxth	r3, r3
 8000c10:	4619      	mov	r1, r3
 8000c12:	4620      	mov	r0, r4
 8000c14:	f000 fde6 	bl	80017e4 <hw_serial_tx>
            hw_serial_tx((uint8_t *)"\"",1);
 8000c18:	2101      	movs	r1, #1
 8000c1a:	484d      	ldr	r0, [pc, #308]	; (8000d50 <at_send_cmd_blocking+0x2dc>)
 8000c1c:	f000 fde2 	bl	80017e4 <hw_serial_tx>
            break;
 8000c20:	e256      	b.n	80010d0 <at_send_cmd_blocking+0x65c>
        }
        case AT_CMD_WIFI_AP_DHCP:
        {
            uint8_t val[10];
            sprintf((char *)val,"=%d,%d",cmd->payload.wifi_dhcp.ap_station,cmd->payload.wifi_dhcp.enabled);
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	791b      	ldrb	r3, [r3, #4]
 8000c26:	461a      	mov	r2, r3
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	795b      	ldrb	r3, [r3, #5]
 8000c2c:	f107 0084 	add.w	r0, r7, #132	; 0x84
 8000c30:	4948      	ldr	r1, [pc, #288]	; (8000d54 <at_send_cmd_blocking+0x2e0>)
 8000c32:	f004 ff8d 	bl	8005b50 <siprintf>
            hw_serial_tx(val,strlen((char *)val));
 8000c36:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f7ff fad2 	bl	80001e4 <strlen>
 8000c40:	4603      	mov	r3, r0
 8000c42:	b29a      	uxth	r2, r3
 8000c44:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000c48:	4611      	mov	r1, r2
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f000 fdca 	bl	80017e4 <hw_serial_tx>
            break;
 8000c50:	bf00      	nop
 8000c52:	e23d      	b.n	80010d0 <at_send_cmd_blocking+0x65c>
        }
        case AT_CMD_WIFI_AP_NET_CFG:
        {
            hw_serial_tx((uint8_t *)"=\"",2);
 8000c54:	2102      	movs	r1, #2
 8000c56:	483c      	ldr	r0, [pc, #240]	; (8000d48 <at_send_cmd_blocking+0x2d4>)
 8000c58:	f000 fdc4 	bl	80017e4 <hw_serial_tx>
            hw_serial_tx(cmd->payload.wifi_net_cfg.ip,strlen((char *)cmd->payload.wifi_net_cfg.ip));
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	685c      	ldr	r4, [r3, #4]
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	685b      	ldr	r3, [r3, #4]
 8000c64:	4618      	mov	r0, r3
 8000c66:	f7ff fabd 	bl	80001e4 <strlen>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	b29b      	uxth	r3, r3
 8000c6e:	4619      	mov	r1, r3
 8000c70:	4620      	mov	r0, r4
 8000c72:	f000 fdb7 	bl	80017e4 <hw_serial_tx>
            hw_serial_tx((uint8_t *)"\",\"",3);
 8000c76:	2103      	movs	r1, #3
 8000c78:	4834      	ldr	r0, [pc, #208]	; (8000d4c <at_send_cmd_blocking+0x2d8>)
 8000c7a:	f000 fdb3 	bl	80017e4 <hw_serial_tx>
            hw_serial_tx(cmd->payload.wifi_net_cfg.gateway,strlen((char *)cmd->payload.wifi_net_cfg.gateway));
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	689c      	ldr	r4, [r3, #8]
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	689b      	ldr	r3, [r3, #8]
 8000c86:	4618      	mov	r0, r3
 8000c88:	f7ff faac 	bl	80001e4 <strlen>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	b29b      	uxth	r3, r3
 8000c90:	4619      	mov	r1, r3
 8000c92:	4620      	mov	r0, r4
 8000c94:	f000 fda6 	bl	80017e4 <hw_serial_tx>
            hw_serial_tx((uint8_t *)"\",\"",3);
 8000c98:	2103      	movs	r1, #3
 8000c9a:	482c      	ldr	r0, [pc, #176]	; (8000d4c <at_send_cmd_blocking+0x2d8>)
 8000c9c:	f000 fda2 	bl	80017e4 <hw_serial_tx>
            hw_serial_tx(cmd->payload.wifi_net_cfg.mask,strlen((char *)cmd->payload.wifi_net_cfg.mask));
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	68dc      	ldr	r4, [r3, #12]
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	68db      	ldr	r3, [r3, #12]
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f7ff fa9b 	bl	80001e4 <strlen>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	b29b      	uxth	r3, r3
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	4620      	mov	r0, r4
 8000cb6:	f000 fd95 	bl	80017e4 <hw_serial_tx>
            hw_serial_tx((uint8_t *)"\"",1);
 8000cba:	2101      	movs	r1, #1
 8000cbc:	4824      	ldr	r0, [pc, #144]	; (8000d50 <at_send_cmd_blocking+0x2dc>)
 8000cbe:	f000 fd91 	bl	80017e4 <hw_serial_tx>
            break;
 8000cc2:	e205      	b.n	80010d0 <at_send_cmd_blocking+0x65c>
        }
        case AT_CMD_WIFI_AP_DHCP_CFG:
        {
            uint8_t val[10];
            sprintf((char *)val,"=%d,%d,\"",cmd->payload.wifi_dhcp_cfg.enabled,cmd->payload.wifi_dhcp_cfg.lease_time_min);
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	791b      	ldrb	r3, [r3, #4]
 8000cc8:	461a      	mov	r2, r3
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	88db      	ldrh	r3, [r3, #6]
 8000cce:	f107 0078 	add.w	r0, r7, #120	; 0x78
 8000cd2:	4921      	ldr	r1, [pc, #132]	; (8000d58 <at_send_cmd_blocking+0x2e4>)
 8000cd4:	f004 ff3c 	bl	8005b50 <siprintf>
            hw_serial_tx(val,strlen((char *)val));
 8000cd8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f7ff fa81 	bl	80001e4 <strlen>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	b29a      	uxth	r2, r3
 8000ce6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000cea:	4611      	mov	r1, r2
 8000cec:	4618      	mov	r0, r3
 8000cee:	f000 fd79 	bl	80017e4 <hw_serial_tx>
            hw_serial_tx(cmd->payload.wifi_dhcp_cfg.ip_begin,strlen((char *)cmd->payload.wifi_dhcp_cfg.ip_begin));
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	689c      	ldr	r4, [r3, #8]
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	689b      	ldr	r3, [r3, #8]
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f7ff fa72 	bl	80001e4 <strlen>
 8000d00:	4603      	mov	r3, r0
 8000d02:	b29b      	uxth	r3, r3
 8000d04:	4619      	mov	r1, r3
 8000d06:	4620      	mov	r0, r4
 8000d08:	f000 fd6c 	bl	80017e4 <hw_serial_tx>
            hw_serial_tx((uint8_t *)"\",\"",3);
 8000d0c:	2103      	movs	r1, #3
 8000d0e:	480f      	ldr	r0, [pc, #60]	; (8000d4c <at_send_cmd_blocking+0x2d8>)
 8000d10:	f000 fd68 	bl	80017e4 <hw_serial_tx>
            hw_serial_tx(cmd->payload.wifi_dhcp_cfg.ip_end,strlen((char *)cmd->payload.wifi_dhcp_cfg.ip_end));
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	68dc      	ldr	r4, [r3, #12]
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	68db      	ldr	r3, [r3, #12]
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f7ff fa61 	bl	80001e4 <strlen>
 8000d22:	4603      	mov	r3, r0
 8000d24:	b29b      	uxth	r3, r3
 8000d26:	4619      	mov	r1, r3
 8000d28:	4620      	mov	r0, r4
 8000d2a:	f000 fd5b 	bl	80017e4 <hw_serial_tx>
            hw_serial_tx((uint8_t *)"\"",1);            
 8000d2e:	2101      	movs	r1, #1
 8000d30:	4807      	ldr	r0, [pc, #28]	; (8000d50 <at_send_cmd_blocking+0x2dc>)
 8000d32:	f000 fd57 	bl	80017e4 <hw_serial_tx>
            break;
 8000d36:	bf00      	nop
 8000d38:	e1ca      	b.n	80010d0 <at_send_cmd_blocking+0x65c>
 8000d3a:	bf00      	nop
 8000d3c:	20000064 	.word	0x20000064
 8000d40:	20000000 	.word	0x20000000
 8000d44:	08006e64 	.word	0x08006e64
 8000d48:	08006e68 	.word	0x08006e68
 8000d4c:	08006e6c 	.word	0x08006e6c
 8000d50:	08006e70 	.word	0x08006e70
 8000d54:	08006e74 	.word	0x08006e74
 8000d58:	08006e7c 	.word	0x08006e7c
        }
        case AT_CMD_WIFI_AP_SECURITY:
        {
            uint8_t val[16];
            hw_serial_tx((uint8_t *)"=\"",2);
 8000d5c:	2102      	movs	r1, #2
 8000d5e:	48bd      	ldr	r0, [pc, #756]	; (8001054 <at_send_cmd_blocking+0x5e0>)
 8000d60:	f000 fd40 	bl	80017e4 <hw_serial_tx>
            hw_serial_tx(cmd->payload.wifi_security.ssid,strlen((char *)cmd->payload.wifi_security.ssid));
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	685c      	ldr	r4, [r3, #4]
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f7ff fa39 	bl	80001e4 <strlen>
 8000d72:	4603      	mov	r3, r0
 8000d74:	b29b      	uxth	r3, r3
 8000d76:	4619      	mov	r1, r3
 8000d78:	4620      	mov	r0, r4
 8000d7a:	f000 fd33 	bl	80017e4 <hw_serial_tx>
            hw_serial_tx((uint8_t *)"\",\"",3);
 8000d7e:	2103      	movs	r1, #3
 8000d80:	48b5      	ldr	r0, [pc, #724]	; (8001058 <at_send_cmd_blocking+0x5e4>)
 8000d82:	f000 fd2f 	bl	80017e4 <hw_serial_tx>
            hw_serial_tx(cmd->payload.wifi_security.pwd,strlen((char *)cmd->payload.wifi_security.pwd));
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	689c      	ldr	r4, [r3, #8]
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	689b      	ldr	r3, [r3, #8]
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f7ff fa28 	bl	80001e4 <strlen>
 8000d94:	4603      	mov	r3, r0
 8000d96:	b29b      	uxth	r3, r3
 8000d98:	4619      	mov	r1, r3
 8000d9a:	4620      	mov	r0, r4
 8000d9c:	f000 fd22 	bl	80017e4 <hw_serial_tx>
            sprintf((char *)val,"\",%d,%d,%d,%d",
                        cmd->payload.wifi_security.channel,
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	7b1b      	ldrb	r3, [r3, #12]
            sprintf((char *)val,"\",%d,%d,%d,%d",
 8000da4:	4619      	mov	r1, r3
                        cmd->payload.wifi_security.crypto,
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	7b5b      	ldrb	r3, [r3, #13]
            sprintf((char *)val,"\",%d,%d,%d,%d",
 8000daa:	461c      	mov	r4, r3
                        cmd->payload.wifi_security.max_conn,
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	7b9b      	ldrb	r3, [r3, #14]
            sprintf((char *)val,"\",%d,%d,%d,%d",
 8000db0:	461a      	mov	r2, r3
                        cmd->payload.wifi_security.ssid_hidden);
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	7bdb      	ldrb	r3, [r3, #15]
            sprintf((char *)val,"\",%d,%d,%d,%d",
 8000db6:	f107 0068 	add.w	r0, r7, #104	; 0x68
 8000dba:	9301      	str	r3, [sp, #4]
 8000dbc:	9200      	str	r2, [sp, #0]
 8000dbe:	4623      	mov	r3, r4
 8000dc0:	460a      	mov	r2, r1
 8000dc2:	49a6      	ldr	r1, [pc, #664]	; (800105c <at_send_cmd_blocking+0x5e8>)
 8000dc4:	f004 fec4 	bl	8005b50 <siprintf>
            hw_serial_tx(val,strlen((char *)val));
 8000dc8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f7ff fa09 	bl	80001e4 <strlen>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	b29a      	uxth	r2, r3
 8000dd6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000dda:	4611      	mov	r1, r2
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f000 fd01 	bl	80017e4 <hw_serial_tx>
            break;
 8000de2:	bf00      	nop
 8000de4:	e174      	b.n	80010d0 <at_send_cmd_blocking+0x65c>
        }
        case AT_CMD_CON_SERVER:
        {
            uint8_t val[10];
            sprintf((char *)val,"=%d,%d",cmd->payload.con_server.create,
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	791b      	ldrb	r3, [r3, #4]
 8000dea:	461a      	mov	r2, r3
                        cmd->payload.con_server.port);
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	88db      	ldrh	r3, [r3, #6]
            sprintf((char *)val,"=%d,%d",cmd->payload.con_server.create,
 8000df0:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 8000df4:	499a      	ldr	r1, [pc, #616]	; (8001060 <at_send_cmd_blocking+0x5ec>)
 8000df6:	f004 feab 	bl	8005b50 <siprintf>
            hw_serial_tx(val,strlen((char *)val));
 8000dfa:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f7ff f9f0 	bl	80001e4 <strlen>
 8000e04:	4603      	mov	r3, r0
 8000e06:	b29a      	uxth	r2, r3
 8000e08:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000e0c:	4611      	mov	r1, r2
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f000 fce8 	bl	80017e4 <hw_serial_tx>
            break;
 8000e14:	bf00      	nop
 8000e16:	e15b      	b.n	80010d0 <at_send_cmd_blocking+0x65c>
        }
        case AT_CMD_CON_SERVER_TMROUT:
        {
            uint8_t val[10];
            sprintf((char *)val,"=%d",cmd->payload.con_server_tmrout.timeout_s);
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	889b      	ldrh	r3, [r3, #4]
 8000e1c:	461a      	mov	r2, r3
 8000e1e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000e22:	4990      	ldr	r1, [pc, #576]	; (8001064 <at_send_cmd_blocking+0x5f0>)
 8000e24:	4618      	mov	r0, r3
 8000e26:	f004 fe93 	bl	8005b50 <siprintf>
            hw_serial_tx(val,strlen((char *)val));
 8000e2a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f7ff f9d8 	bl	80001e4 <strlen>
 8000e34:	4603      	mov	r3, r0
 8000e36:	b29a      	uxth	r2, r3
 8000e38:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000e3c:	4611      	mov	r1, r2
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f000 fcd0 	bl	80017e4 <hw_serial_tx>
            break;
 8000e44:	bf00      	nop
 8000e46:	e143      	b.n	80010d0 <at_send_cmd_blocking+0x65c>
        }        
        case AT_CMD_SLL_BUFFER_SIZE:
        {
            uint8_t val[10];
            sprintf((char *)val,"=%d",cmd->payload.ssl_buffer.size);
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	889b      	ldrh	r3, [r3, #4]
 8000e4c:	461a      	mov	r2, r3
 8000e4e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000e52:	4984      	ldr	r1, [pc, #528]	; (8001064 <at_send_cmd_blocking+0x5f0>)
 8000e54:	4618      	mov	r0, r3
 8000e56:	f004 fe7b 	bl	8005b50 <siprintf>
            hw_serial_tx(val,strlen((char *)val));
 8000e5a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f7ff f9c0 	bl	80001e4 <strlen>
 8000e64:	4603      	mov	r3, r0
 8000e66:	b29a      	uxth	r2, r3
 8000e68:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000e6c:	4611      	mov	r1, r2
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f000 fcb8 	bl	80017e4 <hw_serial_tx>
            break;
 8000e74:	bf00      	nop
 8000e76:	e12b      	b.n	80010d0 <at_send_cmd_blocking+0x65c>
        }
        case AT_CMD_CON_START:
        {
            uint8_t val[10];
            if(cmd->payload.con_start.channel >= 0)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	db17      	blt.n	8000eb2 <at_send_cmd_blocking+0x43e>
            {
                sprintf((char *)val,"=%d,\"",cmd->payload.con_start.channel);
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8000e88:	461a      	mov	r2, r3
 8000e8a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000e8e:	4976      	ldr	r1, [pc, #472]	; (8001068 <at_send_cmd_blocking+0x5f4>)
 8000e90:	4618      	mov	r0, r3
 8000e92:	f004 fe5d 	bl	8005b50 <siprintf>
                hw_serial_tx(val,strlen((char *)val));
 8000e96:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f7ff f9a2 	bl	80001e4 <strlen>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	b29a      	uxth	r2, r3
 8000ea4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ea8:	4611      	mov	r1, r2
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f000 fc9a 	bl	80017e4 <hw_serial_tx>
 8000eb0:	e003      	b.n	8000eba <at_send_cmd_blocking+0x446>
            }
            else
                hw_serial_tx((uint8_t *)"=\"",2);
 8000eb2:	2102      	movs	r1, #2
 8000eb4:	4867      	ldr	r0, [pc, #412]	; (8001054 <at_send_cmd_blocking+0x5e0>)
 8000eb6:	f000 fc95 	bl	80017e4 <hw_serial_tx>
            
            hw_serial_tx(cmd->payload.con_start.transport,strlen((char *)cmd->payload.con_start.transport));
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	689c      	ldr	r4, [r3, #8]
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	689b      	ldr	r3, [r3, #8]
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f7ff f98e 	bl	80001e4 <strlen>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	b29b      	uxth	r3, r3
 8000ecc:	4619      	mov	r1, r3
 8000ece:	4620      	mov	r0, r4
 8000ed0:	f000 fc88 	bl	80017e4 <hw_serial_tx>
            hw_serial_tx((uint8_t *)"\",\"",3);
 8000ed4:	2103      	movs	r1, #3
 8000ed6:	4860      	ldr	r0, [pc, #384]	; (8001058 <at_send_cmd_blocking+0x5e4>)
 8000ed8:	f000 fc84 	bl	80017e4 <hw_serial_tx>
            hw_serial_tx(cmd->payload.con_start.site,strlen((char *)cmd->payload.con_start.site));
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	685c      	ldr	r4, [r3, #4]
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f7ff f97d 	bl	80001e4 <strlen>
 8000eea:	4603      	mov	r3, r0
 8000eec:	b29b      	uxth	r3, r3
 8000eee:	4619      	mov	r1, r3
 8000ef0:	4620      	mov	r0, r4
 8000ef2:	f000 fc77 	bl	80017e4 <hw_serial_tx>
            sprintf((char *)val,"\",%d",cmd->payload.con_start.port);
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	89db      	ldrh	r3, [r3, #14]
 8000efa:	461a      	mov	r2, r3
 8000efc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000f00:	495a      	ldr	r1, [pc, #360]	; (800106c <at_send_cmd_blocking+0x5f8>)
 8000f02:	4618      	mov	r0, r3
 8000f04:	f004 fe24 	bl	8005b50 <siprintf>
            hw_serial_tx(val,strlen((char *)val));
 8000f08:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f7ff f969 	bl	80001e4 <strlen>
 8000f12:	4603      	mov	r3, r0
 8000f14:	b29a      	uxth	r2, r3
 8000f16:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000f1a:	4611      	mov	r1, r2
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f000 fc61 	bl	80017e4 <hw_serial_tx>

            if(strcmp((char *)cmd->payload.con_start.transport,"UDP") == 0)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	689b      	ldr	r3, [r3, #8]
 8000f26:	4952      	ldr	r1, [pc, #328]	; (8001070 <at_send_cmd_blocking+0x5fc>)
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f7ff f951 	bl	80001d0 <strcmp>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	f040 80ca 	bne.w	80010ca <at_send_cmd_blocking+0x656>
            {
                sprintf((char *)val,",%d,0",cmd->payload.con_start.port);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	89db      	ldrh	r3, [r3, #14]
 8000f3a:	461a      	mov	r2, r3
 8000f3c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000f40:	494c      	ldr	r1, [pc, #304]	; (8001074 <at_send_cmd_blocking+0x600>)
 8000f42:	4618      	mov	r0, r3
 8000f44:	f004 fe04 	bl	8005b50 <siprintf>
                hw_serial_tx(val,strlen((char *)val));                
 8000f48:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f7ff f949 	bl	80001e4 <strlen>
 8000f52:	4603      	mov	r3, r0
 8000f54:	b29a      	uxth	r2, r3
 8000f56:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000f5a:	4611      	mov	r1, r2
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f000 fc41 	bl	80017e4 <hw_serial_tx>
            }            

            break;
 8000f62:	bf00      	nop
 8000f64:	e0b1      	b.n	80010ca <at_send_cmd_blocking+0x656>
        }
        case AT_CMD_CON_SEND:
        {
            if(cmd->payload.con_send.transparent == 0)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	7b9b      	ldrb	r3, [r3, #14]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	f040 80af 	bne.w	80010ce <at_send_cmd_blocking+0x65a>
            {
                uint8_t val[10];
                if(cmd->payload.con_send.channel >= 0)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	db0b      	blt.n	8000f92 <at_send_cmd_blocking+0x51e>
                    sprintf((char *)val,"=%d,%d",cmd->payload.con_send.channel,cmd->payload.con_send.size);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8000f80:	461a      	mov	r2, r3
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	889b      	ldrh	r3, [r3, #4]
 8000f86:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8000f8a:	4935      	ldr	r1, [pc, #212]	; (8001060 <at_send_cmd_blocking+0x5ec>)
 8000f8c:	f004 fde0 	bl	8005b50 <siprintf>
 8000f90:	e008      	b.n	8000fa4 <at_send_cmd_blocking+0x530>
                else
                    sprintf((char *)val,"=%d",cmd->payload.con_send.size);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	889b      	ldrh	r3, [r3, #4]
 8000f96:	461a      	mov	r2, r3
 8000f98:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f9c:	4931      	ldr	r1, [pc, #196]	; (8001064 <at_send_cmd_blocking+0x5f0>)
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f004 fdd6 	bl	8005b50 <siprintf>

                hw_serial_tx(val,strlen((char *)val));
 8000fa4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f7ff f91b 	bl	80001e4 <strlen>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	b29a      	uxth	r2, r3
 8000fb2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fb6:	4611      	mov	r1, r2
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f000 fc13 	bl	80017e4 <hw_serial_tx>

                // check UDP
                if((strlen((char *)cmd->payload.con_send.site) > 0) &&
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	689b      	ldr	r3, [r3, #8]
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	f000 8082 	beq.w	80010ce <at_send_cmd_blocking+0x65a>
                    (cmd->payload.con_send.port > 0))
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	899b      	ldrh	r3, [r3, #12]
                if((strlen((char *)cmd->payload.con_send.site) > 0) &&
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d07d      	beq.n	80010ce <at_send_cmd_blocking+0x65a>
                {
                    hw_serial_tx((uint8_t *)",\"",3);
 8000fd2:	2103      	movs	r1, #3
 8000fd4:	4828      	ldr	r0, [pc, #160]	; (8001078 <at_send_cmd_blocking+0x604>)
 8000fd6:	f000 fc05 	bl	80017e4 <hw_serial_tx>
                    hw_serial_tx(cmd->payload.con_send.site,strlen((char *)cmd->payload.con_send.site));
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	689c      	ldr	r4, [r3, #8]
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	689b      	ldr	r3, [r3, #8]
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f7ff f8fe 	bl	80001e4 <strlen>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	b29b      	uxth	r3, r3
 8000fec:	4619      	mov	r1, r3
 8000fee:	4620      	mov	r0, r4
 8000ff0:	f000 fbf8 	bl	80017e4 <hw_serial_tx>
                    sprintf((char *)val,"\",%d",cmd->payload.con_send.port);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	899b      	ldrh	r3, [r3, #12]
 8000ff8:	461a      	mov	r2, r3
 8000ffa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ffe:	491b      	ldr	r1, [pc, #108]	; (800106c <at_send_cmd_blocking+0x5f8>)
 8001000:	4618      	mov	r0, r3
 8001002:	f004 fda5 	bl	8005b50 <siprintf>
                    hw_serial_tx(val,strlen((char *)val));
 8001006:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800100a:	4618      	mov	r0, r3
 800100c:	f7ff f8ea 	bl	80001e4 <strlen>
 8001010:	4603      	mov	r3, r0
 8001012:	b29a      	uxth	r2, r3
 8001014:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001018:	4611      	mov	r1, r2
 800101a:	4618      	mov	r0, r3
 800101c:	f000 fbe2 	bl	80017e4 <hw_serial_tx>
                }
            }            
            break;
 8001020:	e055      	b.n	80010ce <at_send_cmd_blocking+0x65a>
        case AT_CMD_CON_CLOSE:
        {
            uint8_t val[10];
            if(cmd->payload.con_close.channel >= 0)
            {
                sprintf((char *)val,"=%d",cmd->payload.con_close.channel);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	791b      	ldrb	r3, [r3, #4]
 8001026:	461a      	mov	r2, r3
 8001028:	f107 0320 	add.w	r3, r7, #32
 800102c:	490d      	ldr	r1, [pc, #52]	; (8001064 <at_send_cmd_blocking+0x5f0>)
 800102e:	4618      	mov	r0, r3
 8001030:	f004 fd8e 	bl	8005b50 <siprintf>
                hw_serial_tx(val,strlen((char *)val));
 8001034:	f107 0320 	add.w	r3, r7, #32
 8001038:	4618      	mov	r0, r3
 800103a:	f7ff f8d3 	bl	80001e4 <strlen>
 800103e:	4603      	mov	r3, r0
 8001040:	b29a      	uxth	r2, r3
 8001042:	f107 0320 	add.w	r3, r7, #32
 8001046:	4611      	mov	r1, r2
 8001048:	4618      	mov	r0, r3
 800104a:	f000 fbcb 	bl	80017e4 <hw_serial_tx>
            }
            break;
 800104e:	bf00      	nop
 8001050:	e03e      	b.n	80010d0 <at_send_cmd_blocking+0x65c>
 8001052:	bf00      	nop
 8001054:	08006e68 	.word	0x08006e68
 8001058:	08006e6c 	.word	0x08006e6c
 800105c:	08006e88 	.word	0x08006e88
 8001060:	08006e74 	.word	0x08006e74
 8001064:	08006e98 	.word	0x08006e98
 8001068:	08006e9c 	.word	0x08006e9c
 800106c:	08006ea4 	.word	0x08006ea4
 8001070:	08006eac 	.word	0x08006eac
 8001074:	08006eb0 	.word	0x08006eb0
 8001078:	08006eb8 	.word	0x08006eb8
        }
        case AT_CMD_UART:
        {
            uint8_t val[20];
            sprintf((char *)val,"=%u,%d,%d,%d,%d",
            		(unsigned int) cmd->payload.uart.baud_rate,
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	685a      	ldr	r2, [r3, #4]
					cmd->payload.uart.data_bits,
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	7a1b      	ldrb	r3, [r3, #8]
            sprintf((char *)val,"=%u,%d,%d,%d,%d",
 8001084:	461d      	mov	r5, r3
					cmd->payload.uart.stop_bit,
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	7a5b      	ldrb	r3, [r3, #9]
            sprintf((char *)val,"=%u,%d,%d,%d,%d",
 800108a:	4619      	mov	r1, r3
					cmd->payload.uart.parity,
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	7a9b      	ldrb	r3, [r3, #10]
            sprintf((char *)val,"=%u,%d,%d,%d,%d",
 8001090:	461c      	mov	r4, r3
					cmd->payload.uart.flow_control);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	7adb      	ldrb	r3, [r3, #11]
            sprintf((char *)val,"=%u,%d,%d,%d,%d",
 8001096:	f107 000c 	add.w	r0, r7, #12
 800109a:	9302      	str	r3, [sp, #8]
 800109c:	9401      	str	r4, [sp, #4]
 800109e:	9100      	str	r1, [sp, #0]
 80010a0:	462b      	mov	r3, r5
 80010a2:	4939      	ldr	r1, [pc, #228]	; (8001188 <at_send_cmd_blocking+0x714>)
 80010a4:	f004 fd54 	bl	8005b50 <siprintf>
            hw_serial_tx(val,strlen((char *)val));
 80010a8:	f107 030c 	add.w	r3, r7, #12
 80010ac:	4618      	mov	r0, r3
 80010ae:	f7ff f899 	bl	80001e4 <strlen>
 80010b2:	4603      	mov	r3, r0
 80010b4:	b29a      	uxth	r2, r3
 80010b6:	f107 030c 	add.w	r3, r7, #12
 80010ba:	4611      	mov	r1, r2
 80010bc:	4618      	mov	r0, r3
 80010be:	f000 fb91 	bl	80017e4 <hw_serial_tx>
        	break;
 80010c2:	bf00      	nop
 80010c4:	e004      	b.n	80010d0 <at_send_cmd_blocking+0x65c>
        }
        default:
            break;
 80010c6:	bf00      	nop
 80010c8:	e002      	b.n	80010d0 <at_send_cmd_blocking+0x65c>
            break;
 80010ca:	bf00      	nop
 80010cc:	e000      	b.n	80010d0 <at_send_cmd_blocking+0x65c>
            break;
 80010ce:	bf00      	nop
    }
    // end of line, if any
    hw_serial_tx(at_eol,strlen((const char *)at_eol));
 80010d0:	4b2e      	ldr	r3, [pc, #184]	; (800118c <at_send_cmd_blocking+0x718>)
 80010d2:	681c      	ldr	r4, [r3, #0]
 80010d4:	4b2d      	ldr	r3, [pc, #180]	; (800118c <at_send_cmd_blocking+0x718>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4618      	mov	r0, r3
 80010da:	f7ff f883 	bl	80001e4 <strlen>
 80010de:	4603      	mov	r3, r0
 80010e0:	b29b      	uxth	r3, r3
 80010e2:	4619      	mov	r1, r3
 80010e4:	4620      	mov	r0, r4
 80010e6:	f000 fb7d 	bl	80017e4 <hw_serial_tx>
    
    // set expected answer
    switch(cmd->id)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	2b01      	cmp	r3, #1
 80010f0:	d002      	beq.n	80010f8 <at_send_cmd_blocking+0x684>
 80010f2:	2b10      	cmp	r3, #16
 80010f4:	d016      	beq.n	8001124 <at_send_cmd_blocking+0x6b0>
 80010f6:	e023      	b.n	8001140 <at_send_cmd_blocking+0x6cc>
    {
        case AT_CMD_RST:
            ans = ceb_cbuf_find_str(&at_cb,(uint8_t *)at_ready,strlen((const char *)at_ready),&nb,tmrout_ms);
 80010f8:	4b25      	ldr	r3, [pc, #148]	; (8001190 <at_send_cmd_blocking+0x71c>)
 80010fa:	681c      	ldr	r4, [r3, #0]
 80010fc:	4b24      	ldr	r3, [pc, #144]	; (8001190 <at_send_cmd_blocking+0x71c>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4618      	mov	r0, r3
 8001102:	f7ff f86f 	bl	80001e4 <strlen>
 8001106:	4603      	mov	r3, r0
 8001108:	b29a      	uxth	r2, r3
 800110a:	f107 0194 	add.w	r1, r7, #148	; 0x94
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	9300      	str	r3, [sp, #0]
 8001112:	460b      	mov	r3, r1
 8001114:	4621      	mov	r1, r4
 8001116:	481f      	ldr	r0, [pc, #124]	; (8001194 <at_send_cmd_blocking+0x720>)
 8001118:	f000 f8e7 	bl	80012ea <ceb_cbuf_find_str>
 800111c:	4603      	mov	r3, r0
 800111e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
            break;
 8001122:	e017      	b.n	8001154 <at_send_cmd_blocking+0x6e0>
        case AT_CMD_CON_SEND:
            ans = ceb_cbuf_find_str(&at_cb,(uint8_t *)">",1,&nb,tmrout_ms);
 8001124:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	9300      	str	r3, [sp, #0]
 800112c:	4613      	mov	r3, r2
 800112e:	2201      	movs	r2, #1
 8001130:	4919      	ldr	r1, [pc, #100]	; (8001198 <at_send_cmd_blocking+0x724>)
 8001132:	4818      	ldr	r0, [pc, #96]	; (8001194 <at_send_cmd_blocking+0x720>)
 8001134:	f000 f8d9 	bl	80012ea <ceb_cbuf_find_str>
 8001138:	4603      	mov	r3, r0
 800113a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
            break;
 800113e:	e009      	b.n	8001154 <at_send_cmd_blocking+0x6e0>
        default:
            ans = ceb_cbuf_find_multi_str(&at_cb,at_ok_error,2,tmrout_ms);
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	2202      	movs	r2, #2
 8001144:	4915      	ldr	r1, [pc, #84]	; (800119c <at_send_cmd_blocking+0x728>)
 8001146:	4813      	ldr	r0, [pc, #76]	; (8001194 <at_send_cmd_blocking+0x720>)
 8001148:	f000 f914 	bl	8001374 <ceb_cbuf_find_multi_str>
 800114c:	4603      	mov	r3, r0
 800114e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
            break;
 8001152:	bf00      	nop
    }

    switch(ans)
 8001154:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 8001158:	2b01      	cmp	r3, #1
 800115a:	d007      	beq.n	800116c <at_send_cmd_blocking+0x6f8>
 800115c:	2b02      	cmp	r3, #2
 800115e:	d001      	beq.n	8001164 <at_send_cmd_blocking+0x6f0>
 8001160:	2b00      	cmp	r3, #0
 8001162:	d107      	bne.n	8001174 <at_send_cmd_blocking+0x700>
    {        
        case 0:
        case 2:
            cmd->status = AT_STATUS_OK;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2200      	movs	r2, #0
 8001168:	741a      	strb	r2, [r3, #16]
            break;
 800116a:	e007      	b.n	800117c <at_send_cmd_blocking+0x708>
        case 1:
            cmd->status = AT_STATUS_ERROR;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2201      	movs	r2, #1
 8001170:	741a      	strb	r2, [r3, #16]
            break;
 8001172:	e003      	b.n	800117c <at_send_cmd_blocking+0x708>
        case -1:
        default:
            cmd->status = AT_STATUS_NO_ANSWER;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2204      	movs	r2, #4
 8001178:	741a      	strb	r2, [r3, #16]
            break;
 800117a:	bf00      	nop
    }

    return AT_STATUS_OK;
 800117c:	2300      	movs	r3, #0
}
 800117e:	4618      	mov	r0, r3
 8001180:	3798      	adds	r7, #152	; 0x98
 8001182:	46bd      	mov	sp, r7
 8001184:	bdb0      	pop	{r4, r5, r7, pc}
 8001186:	bf00      	nop
 8001188:	08006ebc 	.word	0x08006ebc
 800118c:	20000060 	.word	0x20000060
 8001190:	20000068 	.word	0x20000068
 8001194:	200002e8 	.word	0x200002e8
 8001198:	08006ecc 	.word	0x08006ecc
 800119c:	20000050 	.word	0x20000050

080011a0 <at_rx_interrupt>:

void at_rx_interrupt(uint8_t c)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	4603      	mov	r3, r0
 80011a8:	71fb      	strb	r3, [r7, #7]
	if(at_started)
 80011aa:	4b07      	ldr	r3, [pc, #28]	; (80011c8 <at_rx_interrupt+0x28>)
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	b2db      	uxtb	r3, r3
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d004      	beq.n	80011be <at_rx_interrupt+0x1e>
	{
		if(ceb_cbuf_put(&at_cb,c) == CEB_CBUF_FULL)
 80011b4:	79fb      	ldrb	r3, [r7, #7]
 80011b6:	4619      	mov	r1, r3
 80011b8:	4804      	ldr	r0, [pc, #16]	; (80011cc <at_rx_interrupt+0x2c>)
 80011ba:	f000 f866 	bl	800128a <ceb_cbuf_put>
			//printf("%02X-",buffer[0]);
			//printf("%c",c);
			//fflush(stdout);
		}
	}
}
 80011be:	bf00      	nop
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	200002d8 	.word	0x200002d8
 80011cc:	200002e8 	.word	0x200002e8

080011d0 <ceb_cbuf_init>:
#include "ceb_cbuf.h"

#define CEB_CBUF_INC(v,mv)   ((((v) + 1) >= (mv)) ? 0 : (v) + 1)

cbuf_status_t ceb_cbuf_init(ceb_cbuf_t *cb, uint8_t *area, uint16_t size)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b085      	sub	sp, #20
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	60f8      	str	r0, [r7, #12]
 80011d8:	60b9      	str	r1, [r7, #8]
 80011da:	4613      	mov	r3, r2
 80011dc:	80fb      	strh	r3, [r7, #6]
	cb->buffer = area;
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	68ba      	ldr	r2, [r7, #8]
 80011e2:	609a      	str	r2, [r3, #8]
	cb->size = size;
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	88fa      	ldrh	r2, [r7, #6]
 80011e8:	809a      	strh	r2, [r3, #4]
	cb->prod = cb->cons = 0;
 80011ea:	2100      	movs	r1, #0
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	460a      	mov	r2, r1
 80011f0:	805a      	strh	r2, [r3, #2]
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	460a      	mov	r2, r1
 80011f6:	801a      	strh	r2, [r3, #0]

	return CEB_CBUF_OK;
 80011f8:	2300      	movs	r3, #0
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3714      	adds	r7, #20
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr

08001206 <ceb_cbuf_flush>:
	else
		return cb->prod + (cb->size - cb->cons);
}

cbuf_status_t ceb_cbuf_flush(ceb_cbuf_t *cb)
{
 8001206:	b480      	push	{r7}
 8001208:	b083      	sub	sp, #12
 800120a:	af00      	add	r7, sp, #0
 800120c:	6078      	str	r0, [r7, #4]
	cb->prod = cb->cons = 0;
 800120e:	2100      	movs	r1, #0
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	460a      	mov	r2, r1
 8001214:	805a      	strh	r2, [r3, #2]
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	460a      	mov	r2, r1
 800121a:	801a      	strh	r2, [r3, #0]

	return CEB_CBUF_OK;
 800121c:	2300      	movs	r3, #0
}
 800121e:	4618      	mov	r0, r3
 8001220:	370c      	adds	r7, #12
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr

0800122a <ceb_cbuf_get>:

cbuf_status_t ceb_cbuf_get(ceb_cbuf_t *cb, uint8_t *c)
{
 800122a:	b480      	push	{r7}
 800122c:	b083      	sub	sp, #12
 800122e:	af00      	add	r7, sp, #0
 8001230:	6078      	str	r0, [r7, #4]
 8001232:	6039      	str	r1, [r7, #0]
	if(cb->cons == cb->prod)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	885b      	ldrh	r3, [r3, #2]
 8001238:	b29a      	uxth	r2, r3
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	881b      	ldrh	r3, [r3, #0]
 800123e:	b29b      	uxth	r3, r3
 8001240:	429a      	cmp	r2, r3
 8001242:	d101      	bne.n	8001248 <ceb_cbuf_get+0x1e>
		return CEB_CBUF_EMPTY;
 8001244:	2302      	movs	r3, #2
 8001246:	e01a      	b.n	800127e <ceb_cbuf_get+0x54>

	*c = cb->buffer[cb->cons];
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	689b      	ldr	r3, [r3, #8]
 800124c:	687a      	ldr	r2, [r7, #4]
 800124e:	8852      	ldrh	r2, [r2, #2]
 8001250:	b292      	uxth	r2, r2
 8001252:	4413      	add	r3, r2
 8001254:	781a      	ldrb	r2, [r3, #0]
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	701a      	strb	r2, [r3, #0]
	cb->cons = CEB_CBUF_INC(cb->cons,cb->size);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	885b      	ldrh	r3, [r3, #2]
 800125e:	b29b      	uxth	r3, r3
 8001260:	3301      	adds	r3, #1
 8001262:	687a      	ldr	r2, [r7, #4]
 8001264:	8892      	ldrh	r2, [r2, #4]
 8001266:	4293      	cmp	r3, r2
 8001268:	da05      	bge.n	8001276 <ceb_cbuf_get+0x4c>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	885b      	ldrh	r3, [r3, #2]
 800126e:	b29b      	uxth	r3, r3
 8001270:	3301      	adds	r3, #1
 8001272:	b29a      	uxth	r2, r3
 8001274:	e000      	b.n	8001278 <ceb_cbuf_get+0x4e>
 8001276:	2200      	movs	r2, #0
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	805a      	strh	r2, [r3, #2]

	return CEB_CBUF_OK;
 800127c:	2300      	movs	r3, #0
}
 800127e:	4618      	mov	r0, r3
 8001280:	370c      	adds	r7, #12
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr

0800128a <ceb_cbuf_put>:

cbuf_status_t ceb_cbuf_put(ceb_cbuf_t *cb, uint8_t c)
{
 800128a:	b480      	push	{r7}
 800128c:	b085      	sub	sp, #20
 800128e:	af00      	add	r7, sp, #0
 8001290:	6078      	str	r0, [r7, #4]
 8001292:	460b      	mov	r3, r1
 8001294:	70fb      	strb	r3, [r7, #3]
	uint16_t next_prod = CEB_CBUF_INC(cb->prod,cb->size);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	881b      	ldrh	r3, [r3, #0]
 800129a:	b29b      	uxth	r3, r3
 800129c:	3301      	adds	r3, #1
 800129e:	687a      	ldr	r2, [r7, #4]
 80012a0:	8892      	ldrh	r2, [r2, #4]
 80012a2:	4293      	cmp	r3, r2
 80012a4:	da05      	bge.n	80012b2 <ceb_cbuf_put+0x28>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	881b      	ldrh	r3, [r3, #0]
 80012aa:	b29b      	uxth	r3, r3
 80012ac:	3301      	adds	r3, #1
 80012ae:	b29b      	uxth	r3, r3
 80012b0:	e000      	b.n	80012b4 <ceb_cbuf_put+0x2a>
 80012b2:	2300      	movs	r3, #0
 80012b4:	81fb      	strh	r3, [r7, #14]

	if(next_prod == cb->cons)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	885b      	ldrh	r3, [r3, #2]
 80012ba:	b29b      	uxth	r3, r3
 80012bc:	89fa      	ldrh	r2, [r7, #14]
 80012be:	429a      	cmp	r2, r3
 80012c0:	d101      	bne.n	80012c6 <ceb_cbuf_put+0x3c>
		return CEB_CBUF_FULL;
 80012c2:	2301      	movs	r3, #1
 80012c4:	e00b      	b.n	80012de <ceb_cbuf_put+0x54>

	cb->buffer[cb->prod] = c;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	689b      	ldr	r3, [r3, #8]
 80012ca:	687a      	ldr	r2, [r7, #4]
 80012cc:	8812      	ldrh	r2, [r2, #0]
 80012ce:	b292      	uxth	r2, r2
 80012d0:	4413      	add	r3, r2
 80012d2:	78fa      	ldrb	r2, [r7, #3]
 80012d4:	701a      	strb	r2, [r3, #0]
	cb->prod = next_prod;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	89fa      	ldrh	r2, [r7, #14]
 80012da:	801a      	strh	r2, [r3, #0]

	return CEB_CBUF_OK;
 80012dc:	2300      	movs	r3, #0
}
 80012de:	4618      	mov	r0, r3
 80012e0:	3714      	adds	r7, #20
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr

080012ea <ceb_cbuf_find_str>:

#if 1
int16_t ceb_cbuf_find_str(ceb_cbuf_t *cb, uint8_t *str, uint16_t len, uint16_t *nb, uint32_t tmrout_ms)
{
 80012ea:	b580      	push	{r7, lr}
 80012ec:	b088      	sub	sp, #32
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	60f8      	str	r0, [r7, #12]
 80012f2:	60b9      	str	r1, [r7, #8]
 80012f4:	603b      	str	r3, [r7, #0]
 80012f6:	4613      	mov	r3, r2
 80012f8:	80fb      	strh	r3, [r7, #6]
	uint16_t n_match = 0;
 80012fa:	2300      	movs	r3, #0
 80012fc:	83fb      	strh	r3, [r7, #30]
	uint8_t c;
	uint32_t tmr = hw_time_get();
 80012fe:	f000 fa99 	bl	8001834 <hw_time_get>
 8001302:	4603      	mov	r3, r0
 8001304:	61bb      	str	r3, [r7, #24]

	*nb = 0;
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	2200      	movs	r2, #0
 800130a:	801a      	strh	r2, [r3, #0]
	do
	{
		if(ceb_cbuf_get(cb,&c) == CEB_CBUF_OK)
 800130c:	f107 0317 	add.w	r3, r7, #23
 8001310:	4619      	mov	r1, r3
 8001312:	68f8      	ldr	r0, [r7, #12]
 8001314:	f7ff ff89 	bl	800122a <ceb_cbuf_get>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d118      	bne.n	8001350 <ceb_cbuf_find_str+0x66>
		{
			*nb = *nb + 1;
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	881b      	ldrh	r3, [r3, #0]
 8001322:	3301      	adds	r3, #1
 8001324:	b29a      	uxth	r2, r3
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	801a      	strh	r2, [r3, #0]
			if(str[n_match] == c)
 800132a:	8bfb      	ldrh	r3, [r7, #30]
 800132c:	68ba      	ldr	r2, [r7, #8]
 800132e:	4413      	add	r3, r2
 8001330:	781a      	ldrb	r2, [r3, #0]
 8001332:	7dfb      	ldrb	r3, [r7, #23]
 8001334:	429a      	cmp	r2, r3
 8001336:	d103      	bne.n	8001340 <ceb_cbuf_find_str+0x56>
				n_match++;
 8001338:	8bfb      	ldrh	r3, [r7, #30]
 800133a:	3301      	adds	r3, #1
 800133c:	83fb      	strh	r3, [r7, #30]
 800133e:	e001      	b.n	8001344 <ceb_cbuf_find_str+0x5a>
			else
				n_match = 0;
 8001340:	2300      	movs	r3, #0
 8001342:	83fb      	strh	r3, [r7, #30]

			if(n_match >= len)
 8001344:	8bfa      	ldrh	r2, [r7, #30]
 8001346:	88fb      	ldrh	r3, [r7, #6]
 8001348:	429a      	cmp	r2, r3
 800134a:	d301      	bcc.n	8001350 <ceb_cbuf_find_str+0x66>
				return 0;		
 800134c:	2300      	movs	r3, #0
 800134e:	e00d      	b.n	800136c <ceb_cbuf_find_str+0x82>
		}
	} while (hw_time_elapsed(tmr,hw_time_get()) < tmrout_ms);
 8001350:	f000 fa70 	bl	8001834 <hw_time_get>
 8001354:	4603      	mov	r3, r0
 8001356:	4619      	mov	r1, r3
 8001358:	69b8      	ldr	r0, [r7, #24]
 800135a:	f000 fa72 	bl	8001842 <hw_time_elapsed>
 800135e:	4603      	mov	r3, r0
 8001360:	461a      	mov	r2, r3
 8001362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001364:	4293      	cmp	r3, r2
 8001366:	d8d1      	bhi.n	800130c <ceb_cbuf_find_str+0x22>

	return -1;
 8001368:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800136c:	4618      	mov	r0, r3
 800136e:	3720      	adds	r7, #32
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}

08001374 <ceb_cbuf_find_multi_str>:

int16_t ceb_cbuf_find_multi_str(ceb_cbuf_t *cb, ceb_cbuf_str_t *str_list, uint16_t len_list, uint32_t tmrout_ms)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b088      	sub	sp, #32
 8001378:	af00      	add	r7, sp, #0
 800137a:	60f8      	str	r0, [r7, #12]
 800137c:	60b9      	str	r1, [r7, #8]
 800137e:	603b      	str	r3, [r7, #0]
 8001380:	4613      	mov	r3, r2
 8001382:	80fb      	strh	r3, [r7, #6]
	uint16_t n;
	uint8_t c;
	uint32_t tmr = hw_time_get();
 8001384:	f000 fa56 	bl	8001834 <hw_time_get>
 8001388:	4603      	mov	r3, r0
 800138a:	61bb      	str	r3, [r7, #24]

	for(n = 0; n < len_list ; n++)
 800138c:	2300      	movs	r3, #0
 800138e:	83fb      	strh	r3, [r7, #30]
 8001390:	e008      	b.n	80013a4 <ceb_cbuf_find_multi_str+0x30>
		str_list[n].n_match = 0;
 8001392:	8bfb      	ldrh	r3, [r7, #30]
 8001394:	00db      	lsls	r3, r3, #3
 8001396:	68ba      	ldr	r2, [r7, #8]
 8001398:	4413      	add	r3, r2
 800139a:	2200      	movs	r2, #0
 800139c:	80da      	strh	r2, [r3, #6]
	for(n = 0; n < len_list ; n++)
 800139e:	8bfb      	ldrh	r3, [r7, #30]
 80013a0:	3301      	adds	r3, #1
 80013a2:	83fb      	strh	r3, [r7, #30]
 80013a4:	8bfa      	ldrh	r2, [r7, #30]
 80013a6:	88fb      	ldrh	r3, [r7, #6]
 80013a8:	429a      	cmp	r2, r3
 80013aa:	d3f2      	bcc.n	8001392 <ceb_cbuf_find_multi_str+0x1e>

	do
	{
		if(ceb_cbuf_get(cb,&c) == CEB_CBUF_OK)
 80013ac:	f107 0317 	add.w	r3, r7, #23
 80013b0:	4619      	mov	r1, r3
 80013b2:	68f8      	ldr	r0, [r7, #12]
 80013b4:	f7ff ff39 	bl	800122a <ceb_cbuf_get>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d136      	bne.n	800142c <ceb_cbuf_find_multi_str+0xb8>
		{
			for(n = 0; n < len_list ; n++)
 80013be:	2300      	movs	r3, #0
 80013c0:	83fb      	strh	r3, [r7, #30]
 80013c2:	e02f      	b.n	8001424 <ceb_cbuf_find_multi_str+0xb0>
			{
				if(str_list[n].str[str_list[n].n_match] == c)
 80013c4:	8bfb      	ldrh	r3, [r7, #30]
 80013c6:	00db      	lsls	r3, r3, #3
 80013c8:	68ba      	ldr	r2, [r7, #8]
 80013ca:	4413      	add	r3, r2
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	8bfa      	ldrh	r2, [r7, #30]
 80013d0:	00d2      	lsls	r2, r2, #3
 80013d2:	68b9      	ldr	r1, [r7, #8]
 80013d4:	440a      	add	r2, r1
 80013d6:	88d2      	ldrh	r2, [r2, #6]
 80013d8:	4413      	add	r3, r2
 80013da:	781a      	ldrb	r2, [r3, #0]
 80013dc:	7dfb      	ldrb	r3, [r7, #23]
 80013de:	429a      	cmp	r2, r3
 80013e0:	d108      	bne.n	80013f4 <ceb_cbuf_find_multi_str+0x80>
					str_list[n].n_match++;
 80013e2:	8bfb      	ldrh	r3, [r7, #30]
 80013e4:	00db      	lsls	r3, r3, #3
 80013e6:	68ba      	ldr	r2, [r7, #8]
 80013e8:	4413      	add	r3, r2
 80013ea:	88da      	ldrh	r2, [r3, #6]
 80013ec:	3201      	adds	r2, #1
 80013ee:	b292      	uxth	r2, r2
 80013f0:	80da      	strh	r2, [r3, #6]
 80013f2:	e005      	b.n	8001400 <ceb_cbuf_find_multi_str+0x8c>
				else
					str_list[n].n_match = 0;
 80013f4:	8bfb      	ldrh	r3, [r7, #30]
 80013f6:	00db      	lsls	r3, r3, #3
 80013f8:	68ba      	ldr	r2, [r7, #8]
 80013fa:	4413      	add	r3, r2
 80013fc:	2200      	movs	r2, #0
 80013fe:	80da      	strh	r2, [r3, #6]

				if(str_list[n].n_match >= str_list[n].len)
 8001400:	8bfb      	ldrh	r3, [r7, #30]
 8001402:	00db      	lsls	r3, r3, #3
 8001404:	68ba      	ldr	r2, [r7, #8]
 8001406:	4413      	add	r3, r2
 8001408:	88da      	ldrh	r2, [r3, #6]
 800140a:	8bfb      	ldrh	r3, [r7, #30]
 800140c:	00db      	lsls	r3, r3, #3
 800140e:	68b9      	ldr	r1, [r7, #8]
 8001410:	440b      	add	r3, r1
 8001412:	889b      	ldrh	r3, [r3, #4]
 8001414:	429a      	cmp	r2, r3
 8001416:	d302      	bcc.n	800141e <ceb_cbuf_find_multi_str+0xaa>
					return n;
 8001418:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800141c:	e014      	b.n	8001448 <ceb_cbuf_find_multi_str+0xd4>
			for(n = 0; n < len_list ; n++)
 800141e:	8bfb      	ldrh	r3, [r7, #30]
 8001420:	3301      	adds	r3, #1
 8001422:	83fb      	strh	r3, [r7, #30]
 8001424:	8bfa      	ldrh	r2, [r7, #30]
 8001426:	88fb      	ldrh	r3, [r7, #6]
 8001428:	429a      	cmp	r2, r3
 800142a:	d3cb      	bcc.n	80013c4 <ceb_cbuf_find_multi_str+0x50>
			}
		}
	} while (hw_time_elapsed(tmr,hw_time_get()) < tmrout_ms);
 800142c:	f000 fa02 	bl	8001834 <hw_time_get>
 8001430:	4603      	mov	r3, r0
 8001432:	4619      	mov	r1, r3
 8001434:	69b8      	ldr	r0, [r7, #24]
 8001436:	f000 fa04 	bl	8001842 <hw_time_elapsed>
 800143a:	4603      	mov	r3, r0
 800143c:	461a      	mov	r2, r3
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	4293      	cmp	r3, r2
 8001442:	d8b3      	bhi.n	80013ac <ceb_cbuf_find_multi_str+0x38>

	return -1;	
 8001444:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001448:	4618      	mov	r0, r3
 800144a:	3720      	adds	r7, #32
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}

08001450 <ceb_cbuf_get_str_until_find>:

int16_t ceb_cbuf_get_str_until_find(ceb_cbuf_t *cb, uint8_t *buf, uint16_t *buf_len,
                                     uint8_t *str, uint16_t len, uint32_t tmrout_ms)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b088      	sub	sp, #32
 8001454:	af00      	add	r7, sp, #0
 8001456:	60f8      	str	r0, [r7, #12]
 8001458:	60b9      	str	r1, [r7, #8]
 800145a:	607a      	str	r2, [r7, #4]
 800145c:	603b      	str	r3, [r7, #0]
	uint16_t n_match = 0;
 800145e:	2300      	movs	r3, #0
 8001460:	83fb      	strh	r3, [r7, #30]
	uint8_t c;
	uint32_t tmr = hw_time_get();
 8001462:	f000 f9e7 	bl	8001834 <hw_time_get>
 8001466:	4603      	mov	r3, r0
 8001468:	61bb      	str	r3, [r7, #24]
	uint16_t p = 0;
 800146a:	2300      	movs	r3, #0
 800146c:	83bb      	strh	r3, [r7, #28]

	if(*buf_len == 0)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	881b      	ldrh	r3, [r3, #0]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d102      	bne.n	800147c <ceb_cbuf_get_str_until_find+0x2c>
		return -1;
 8001476:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800147a:	e03e      	b.n	80014fa <ceb_cbuf_get_str_until_find+0xaa>

	do
	{
		if(ceb_cbuf_get(cb,&c) == CEB_CBUF_OK)
 800147c:	f107 0317 	add.w	r3, r7, #23
 8001480:	4619      	mov	r1, r3
 8001482:	68f8      	ldr	r0, [r7, #12]
 8001484:	f7ff fed1 	bl	800122a <ceb_cbuf_get>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d124      	bne.n	80014d8 <ceb_cbuf_get_str_until_find+0x88>
		{
			buf[p++] = c;
 800148e:	8bbb      	ldrh	r3, [r7, #28]
 8001490:	1c5a      	adds	r2, r3, #1
 8001492:	83ba      	strh	r2, [r7, #28]
 8001494:	461a      	mov	r2, r3
 8001496:	68bb      	ldr	r3, [r7, #8]
 8001498:	4413      	add	r3, r2
 800149a:	7dfa      	ldrb	r2, [r7, #23]
 800149c:	701a      	strb	r2, [r3, #0]
			if(p >= *buf_len)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	881b      	ldrh	r3, [r3, #0]
 80014a2:	8bba      	ldrh	r2, [r7, #28]
 80014a4:	429a      	cmp	r2, r3
 80014a6:	d301      	bcc.n	80014ac <ceb_cbuf_get_str_until_find+0x5c>
				return 1;
 80014a8:	2301      	movs	r3, #1
 80014aa:	e026      	b.n	80014fa <ceb_cbuf_get_str_until_find+0xaa>
			
			if(str[n_match] == c)
 80014ac:	8bfb      	ldrh	r3, [r7, #30]
 80014ae:	683a      	ldr	r2, [r7, #0]
 80014b0:	4413      	add	r3, r2
 80014b2:	781a      	ldrb	r2, [r3, #0]
 80014b4:	7dfb      	ldrb	r3, [r7, #23]
 80014b6:	429a      	cmp	r2, r3
 80014b8:	d103      	bne.n	80014c2 <ceb_cbuf_get_str_until_find+0x72>
				n_match++;
 80014ba:	8bfb      	ldrh	r3, [r7, #30]
 80014bc:	3301      	adds	r3, #1
 80014be:	83fb      	strh	r3, [r7, #30]
 80014c0:	e001      	b.n	80014c6 <ceb_cbuf_get_str_until_find+0x76>
			else
				n_match = 0;
 80014c2:	2300      	movs	r3, #0
 80014c4:	83fb      	strh	r3, [r7, #30]

			if(n_match >= len)
 80014c6:	8bfa      	ldrh	r2, [r7, #30]
 80014c8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80014ca:	429a      	cmp	r2, r3
 80014cc:	d304      	bcc.n	80014d8 <ceb_cbuf_get_str_until_find+0x88>
			{
				*buf_len = p;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	8bba      	ldrh	r2, [r7, #28]
 80014d2:	801a      	strh	r2, [r3, #0]
				return 0;
 80014d4:	2300      	movs	r3, #0
 80014d6:	e010      	b.n	80014fa <ceb_cbuf_get_str_until_find+0xaa>
			}
		}
	} while (hw_time_elapsed(tmr,hw_time_get()) < tmrout_ms);
 80014d8:	f000 f9ac 	bl	8001834 <hw_time_get>
 80014dc:	4603      	mov	r3, r0
 80014de:	4619      	mov	r1, r3
 80014e0:	69b8      	ldr	r0, [r7, #24]
 80014e2:	f000 f9ae 	bl	8001842 <hw_time_elapsed>
 80014e6:	4603      	mov	r3, r0
 80014e8:	461a      	mov	r2, r3
 80014ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d8c5      	bhi.n	800147c <ceb_cbuf_get_str_until_find+0x2c>

	*buf_len = p;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	8bba      	ldrh	r2, [r7, #28]
 80014f4:	801a      	strh	r2, [r3, #0]
	return -1;
 80014f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3720      	adds	r7, #32
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}

08001502 <ceb_cbuf_get_str>:

	return CEB_CBUF_OK;
}

int16_t ceb_cbuf_get_str(ceb_cbuf_t *cb, uint8_t *buf, uint16_t *buf_len, uint32_t tmrout_ms)
{
 8001502:	b580      	push	{r7, lr}
 8001504:	b088      	sub	sp, #32
 8001506:	af00      	add	r7, sp, #0
 8001508:	60f8      	str	r0, [r7, #12]
 800150a:	60b9      	str	r1, [r7, #8]
 800150c:	607a      	str	r2, [r7, #4]
 800150e:	603b      	str	r3, [r7, #0]
	uint8_t c;
	uint32_t tmr = hw_time_get();
 8001510:	f000 f990 	bl	8001834 <hw_time_get>
 8001514:	4603      	mov	r3, r0
 8001516:	61bb      	str	r3, [r7, #24]
	uint16_t p = 0;
 8001518:	2300      	movs	r3, #0
 800151a:	83fb      	strh	r3, [r7, #30]

	if(*buf_len == 0)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	881b      	ldrh	r3, [r3, #0]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d102      	bne.n	800152a <ceb_cbuf_get_str+0x28>
		return -1;
 8001524:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001528:	e028      	b.n	800157c <ceb_cbuf_get_str+0x7a>

	do
	{
		if(ceb_cbuf_get(cb,&c) == CEB_CBUF_OK)
 800152a:	f107 0317 	add.w	r3, r7, #23
 800152e:	4619      	mov	r1, r3
 8001530:	68f8      	ldr	r0, [r7, #12]
 8001532:	f7ff fe7a 	bl	800122a <ceb_cbuf_get>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d10e      	bne.n	800155a <ceb_cbuf_get_str+0x58>
		{
			buf[p++] = c;
 800153c:	8bfb      	ldrh	r3, [r7, #30]
 800153e:	1c5a      	adds	r2, r3, #1
 8001540:	83fa      	strh	r2, [r7, #30]
 8001542:	461a      	mov	r2, r3
 8001544:	68bb      	ldr	r3, [r7, #8]
 8001546:	4413      	add	r3, r2
 8001548:	7dfa      	ldrb	r2, [r7, #23]
 800154a:	701a      	strb	r2, [r3, #0]
			if(p >= *buf_len)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	881b      	ldrh	r3, [r3, #0]
 8001550:	8bfa      	ldrh	r2, [r7, #30]
 8001552:	429a      	cmp	r2, r3
 8001554:	d301      	bcc.n	800155a <ceb_cbuf_get_str+0x58>
				return 1;			
 8001556:	2301      	movs	r3, #1
 8001558:	e010      	b.n	800157c <ceb_cbuf_get_str+0x7a>
		}
	} while (hw_time_elapsed(tmr,hw_time_get()) < tmrout_ms);
 800155a:	f000 f96b 	bl	8001834 <hw_time_get>
 800155e:	4603      	mov	r3, r0
 8001560:	4619      	mov	r1, r3
 8001562:	69b8      	ldr	r0, [r7, #24]
 8001564:	f000 f96d 	bl	8001842 <hw_time_elapsed>
 8001568:	4603      	mov	r3, r0
 800156a:	461a      	mov	r2, r3
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	4293      	cmp	r3, r2
 8001570:	d8db      	bhi.n	800152a <ceb_cbuf_get_str+0x28>

	*buf_len = p;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	8bfa      	ldrh	r2, [r7, #30]
 8001576:	801a      	strh	r2, [r3, #0]
	return -1;
 8001578:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800157c:	4618      	mov	r0, r3
 800157e:	3720      	adds	r7, #32
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}

08001584 <hw_esp_power_set>:
//	else
//		HAL_GPIO_WritePin(DSP_ON_GPIO_Port,DSP_ON_Pin,GPIO_PIN_SET);
}

void hw_esp_power_set(bool value)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	4603      	mov	r3, r0
 800158c:	71fb      	strb	r3, [r7, #7]
	if(value)
 800158e:	79fb      	ldrb	r3, [r7, #7]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d006      	beq.n	80015a2 <hw_esp_power_set+0x1e>
		HAL_GPIO_WritePin(ESP_POWER_EN_GPIO_Port,ESP_POWER_EN_Pin,GPIO_PIN_RESET);
 8001594:	2200      	movs	r2, #0
 8001596:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800159a:	4807      	ldr	r0, [pc, #28]	; (80015b8 <hw_esp_power_set+0x34>)
 800159c:	f002 f87e 	bl	800369c <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(ESP_POWER_EN_GPIO_Port,ESP_POWER_EN_Pin,GPIO_PIN_SET);
}
 80015a0:	e005      	b.n	80015ae <hw_esp_power_set+0x2a>
		HAL_GPIO_WritePin(ESP_POWER_EN_GPIO_Port,ESP_POWER_EN_Pin,GPIO_PIN_SET);
 80015a2:	2201      	movs	r2, #1
 80015a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015a8:	4803      	ldr	r0, [pc, #12]	; (80015b8 <hw_esp_power_set+0x34>)
 80015aa:	f002 f877 	bl	800369c <HAL_GPIO_WritePin>
}
 80015ae:	bf00      	nop
 80015b0:	3708      	adds	r7, #8
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	48000400 	.word	0x48000400

080015bc <hw_esp_reset_set>:

void hw_esp_reset_set(bool value)
{
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	4603      	mov	r3, r0
 80015c4:	71fb      	strb	r3, [r7, #7]
//	if(value)
//		HAL_GPIO_WritePin(ESP_RST_GPIO_Port,ESP_RST_Pin,GPIO_PIN_RESET);
//	else
//		HAL_GPIO_WritePin(ESP_RST_GPIO_Port,ESP_RST_Pin,GPIO_PIN_SET);
}
 80015c6:	bf00      	nop
 80015c8:	370c      	adds	r7, #12
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr

080015d2 <hw_esp_enable_set>:

void hw_esp_enable_set(bool value)
{
 80015d2:	b580      	push	{r7, lr}
 80015d4:	b082      	sub	sp, #8
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	4603      	mov	r3, r0
 80015da:	71fb      	strb	r3, [r7, #7]
	if(value)
 80015dc:	79fb      	ldrb	r3, [r7, #7]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d006      	beq.n	80015f0 <hw_esp_enable_set+0x1e>
		HAL_GPIO_WritePin(ESP_EN_GPIO_Port,ESP_EN_Pin,GPIO_PIN_SET);
 80015e2:	2201      	movs	r2, #1
 80015e4:	2120      	movs	r1, #32
 80015e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015ea:	f002 f857 	bl	800369c <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(ESP_EN_GPIO_Port,ESP_EN_Pin,GPIO_PIN_RESET);
}
 80015ee:	e005      	b.n	80015fc <hw_esp_enable_set+0x2a>
		HAL_GPIO_WritePin(ESP_EN_GPIO_Port,ESP_EN_Pin,GPIO_PIN_RESET);
 80015f0:	2200      	movs	r2, #0
 80015f2:	2120      	movs	r1, #32
 80015f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015f8:	f002 f850 	bl	800369c <HAL_GPIO_WritePin>
}
 80015fc:	bf00      	nop
 80015fe:	3708      	adds	r7, #8
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	0000      	movs	r0, r0
	...

08001608 <hw_temperature_get>:
//}

//

float hw_temperature_get(void)
{
 8001608:	b598      	push	{r3, r4, r7, lr}
 800160a:	af00      	add	r7, sp, #0
	static float v = 1.0;

	v = v + 0.1;
 800160c:	4b0e      	ldr	r3, [pc, #56]	; (8001648 <hw_temperature_get+0x40>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4618      	mov	r0, r3
 8001612:	f7fe ffa9 	bl	8000568 <__aeabi_f2d>
 8001616:	a30a      	add	r3, pc, #40	; (adr r3, 8001640 <hw_temperature_get+0x38>)
 8001618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800161c:	f7fe fe46 	bl	80002ac <__adddf3>
 8001620:	4603      	mov	r3, r0
 8001622:	460c      	mov	r4, r1
 8001624:	4618      	mov	r0, r3
 8001626:	4621      	mov	r1, r4
 8001628:	f7fe fff6 	bl	8000618 <__aeabi_d2f>
 800162c:	4602      	mov	r2, r0
 800162e:	4b06      	ldr	r3, [pc, #24]	; (8001648 <hw_temperature_get+0x40>)
 8001630:	601a      	str	r2, [r3, #0]

    return v;
 8001632:	4b05      	ldr	r3, [pc, #20]	; (8001648 <hw_temperature_get+0x40>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	ee07 3a90 	vmov	s15, r3
}
 800163a:	eeb0 0a67 	vmov.f32	s0, s15
 800163e:	bd98      	pop	{r3, r4, r7, pc}
 8001640:	9999999a 	.word	0x9999999a
 8001644:	3fb99999 	.word	0x3fb99999
 8001648:	2000006c 	.word	0x2000006c

0800164c <hw_debug>:
#if 0
{
	CDC_Transmit_FS((uint8_t *)msg,len);
}
#else
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b084      	sub	sp, #16
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
 8001654:	460b      	mov	r3, r1
 8001656:	807b      	strh	r3, [r7, #2]
	static uint8_t col = 0;
	static uint8_t row = 0;
	uint8_t nrow = row;
 8001658:	4b36      	ldr	r3, [pc, #216]	; (8001734 <hw_debug+0xe8>)
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	73fb      	strb	r3, [r7, #15]
	int n;

	SSD1306_Goto(col*6,row);
 800165e:	4b36      	ldr	r3, [pc, #216]	; (8001738 <hw_debug+0xec>)
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	461a      	mov	r2, r3
 8001664:	0052      	lsls	r2, r2, #1
 8001666:	4413      	add	r3, r2
 8001668:	005b      	lsls	r3, r3, #1
 800166a:	b2da      	uxtb	r2, r3
 800166c:	4b31      	ldr	r3, [pc, #196]	; (8001734 <hw_debug+0xe8>)
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	4619      	mov	r1, r3
 8001672:	4610      	mov	r0, r2
 8001674:	f001 f8d4 	bl	8002820 <SSD1306_Goto>

	for(n = 0 ; n < len ; n++)
 8001678:	2300      	movs	r3, #0
 800167a:	60bb      	str	r3, [r7, #8]
 800167c:	e051      	b.n	8001722 <hw_debug+0xd6>
	{
		if(msg[n] == '\n' || msg[n] == '\r')
 800167e:	68bb      	ldr	r3, [r7, #8]
 8001680:	687a      	ldr	r2, [r7, #4]
 8001682:	4413      	add	r3, r2
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	2b0a      	cmp	r3, #10
 8001688:	d005      	beq.n	8001696 <hw_debug+0x4a>
 800168a:	68bb      	ldr	r3, [r7, #8]
 800168c:	687a      	ldr	r2, [r7, #4]
 800168e:	4413      	add	r3, r2
 8001690:	781b      	ldrb	r3, [r3, #0]
 8001692:	2b0d      	cmp	r3, #13
 8001694:	d10c      	bne.n	80016b0 <hw_debug+0x64>
		{
			nrow = (row+1) >= SSD1306_HEIGHT/8 ? 0 : row+1;
 8001696:	4b27      	ldr	r3, [pc, #156]	; (8001734 <hw_debug+0xe8>)
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	3301      	adds	r3, #1
 800169c:	2b07      	cmp	r3, #7
 800169e:	dc04      	bgt.n	80016aa <hw_debug+0x5e>
 80016a0:	4b24      	ldr	r3, [pc, #144]	; (8001734 <hw_debug+0xe8>)
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	3301      	adds	r3, #1
 80016a6:	b2db      	uxtb	r3, r3
 80016a8:	e000      	b.n	80016ac <hw_debug+0x60>
 80016aa:	2300      	movs	r3, #0
 80016ac:	73fb      	strb	r3, [r7, #15]
 80016ae:	e020      	b.n	80016f2 <hw_debug+0xa6>
		}
		else
		{
			SSD1306_Write_Char(msg[n],&SSD1306_Font_07X05);
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	687a      	ldr	r2, [r7, #4]
 80016b4:	4413      	add	r3, r2
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	4920      	ldr	r1, [pc, #128]	; (800173c <hw_debug+0xf0>)
 80016ba:	4618      	mov	r0, r3
 80016bc:	f001 f8de 	bl	800287c <SSD1306_Write_Char>
			col++;
 80016c0:	4b1d      	ldr	r3, [pc, #116]	; (8001738 <hw_debug+0xec>)
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	3301      	adds	r3, #1
 80016c6:	b2da      	uxtb	r2, r3
 80016c8:	4b1b      	ldr	r3, [pc, #108]	; (8001738 <hw_debug+0xec>)
 80016ca:	701a      	strb	r2, [r3, #0]
			if(col >= SSD1306_WIDTH/6)
 80016cc:	4b1a      	ldr	r3, [pc, #104]	; (8001738 <hw_debug+0xec>)
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	2b14      	cmp	r3, #20
 80016d2:	d90e      	bls.n	80016f2 <hw_debug+0xa6>
			{
				col = 0;
 80016d4:	4b18      	ldr	r3, [pc, #96]	; (8001738 <hw_debug+0xec>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	701a      	strb	r2, [r3, #0]
				nrow = (row+1) >= SSD1306_HEIGHT/8 ? 0 : row+1;
 80016da:	4b16      	ldr	r3, [pc, #88]	; (8001734 <hw_debug+0xe8>)
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	3301      	adds	r3, #1
 80016e0:	2b07      	cmp	r3, #7
 80016e2:	dc04      	bgt.n	80016ee <hw_debug+0xa2>
 80016e4:	4b13      	ldr	r3, [pc, #76]	; (8001734 <hw_debug+0xe8>)
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	3301      	adds	r3, #1
 80016ea:	b2db      	uxtb	r3, r3
 80016ec:	e000      	b.n	80016f0 <hw_debug+0xa4>
 80016ee:	2300      	movs	r3, #0
 80016f0:	73fb      	strb	r3, [r7, #15]
			}
		}

		if(row != nrow)
 80016f2:	4b10      	ldr	r3, [pc, #64]	; (8001734 <hw_debug+0xe8>)
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	7bfa      	ldrb	r2, [r7, #15]
 80016f8:	429a      	cmp	r2, r3
 80016fa:	d00f      	beq.n	800171c <hw_debug+0xd0>
		{
			row = nrow;
 80016fc:	4a0d      	ldr	r2, [pc, #52]	; (8001734 <hw_debug+0xe8>)
 80016fe:	7bfb      	ldrb	r3, [r7, #15]
 8001700:	7013      	strb	r3, [r2, #0]
			SSD1306_Goto(col*6,row);
 8001702:	4b0d      	ldr	r3, [pc, #52]	; (8001738 <hw_debug+0xec>)
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	461a      	mov	r2, r3
 8001708:	0052      	lsls	r2, r2, #1
 800170a:	4413      	add	r3, r2
 800170c:	005b      	lsls	r3, r3, #1
 800170e:	b2da      	uxtb	r2, r3
 8001710:	4b08      	ldr	r3, [pc, #32]	; (8001734 <hw_debug+0xe8>)
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	4619      	mov	r1, r3
 8001716:	4610      	mov	r0, r2
 8001718:	f001 f882 	bl	8002820 <SSD1306_Goto>
	for(n = 0 ; n < len ; n++)
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	3301      	adds	r3, #1
 8001720:	60bb      	str	r3, [r7, #8]
 8001722:	887b      	ldrh	r3, [r7, #2]
 8001724:	68ba      	ldr	r2, [r7, #8]
 8001726:	429a      	cmp	r2, r3
 8001728:	dba9      	blt.n	800167e <hw_debug+0x32>
		}

	}
}
 800172a:	bf00      	nop
 800172c:	3710      	adds	r7, #16
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	200002da 	.word	0x200002da
 8001738:	200002db 	.word	0x200002db
 800173c:	200000a0 	.word	0x200000a0

08001740 <USART2_IRQHandler>:
#endif

void USART2_IRQHandler(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b084      	sub	sp, #16
 8001744:	af00      	add	r7, sp, #0
    uint8_t c=0;
 8001746:	2300      	movs	r3, #0
 8001748:	71fb      	strb	r3, [r7, #7]
    uint32_t sr;
    USART_TypeDef *h = UART_HANDLE.Instance;
 800174a:	4b16      	ldr	r3, [pc, #88]	; (80017a4 <USART2_IRQHandler+0x64>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	60bb      	str	r3, [r7, #8]

    // lê o status register e trata erros até que desapareçam
    // (o manual manda ler o SR e em seguida DR)

    sr = h->ISR;
 8001750:	68bb      	ldr	r3, [r7, #8]
 8001752:	69db      	ldr	r3, [r3, #28]
 8001754:	60fb      	str	r3, [r7, #12]

    while(sr & (UART_FLAG_ORE | UART_FLAG_PE | UART_FLAG_FE | UART_FLAG_NE))
 8001756:	e005      	b.n	8001764 <USART2_IRQHandler+0x24>
    {
    	h->ICR = UART_CLEAR_OREF | UART_CLEAR_PEF | UART_CLEAR_FEF | UART_CLEAR_NEF;
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	220f      	movs	r2, #15
 800175c:	621a      	str	r2, [r3, #32]
    	sr = h->ISR;
 800175e:	68bb      	ldr	r3, [r7, #8]
 8001760:	69db      	ldr	r3, [r3, #28]
 8001762:	60fb      	str	r3, [r7, #12]
    while(sr & (UART_FLAG_ORE | UART_FLAG_PE | UART_FLAG_FE | UART_FLAG_NE))
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	f003 030f 	and.w	r3, r3, #15
 800176a:	2b00      	cmp	r3, #0
 800176c:	d1f4      	bne.n	8001758 <USART2_IRQHandler+0x18>
        //c = h->RDR;
    }

    if(sr & UART_FLAG_RXNE)
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	f003 0320 	and.w	r3, r3, #32
 8001774:	2b00      	cmp	r3, #0
 8001776:	d011      	beq.n	800179c <USART2_IRQHandler+0x5c>
    {
        c = h->RDR;
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800177c:	b29b      	uxth	r3, r3
 800177e:	b2db      	uxtb	r3, r3
 8001780:	71fb      	strb	r3, [r7, #7]

        if(hw_debug_enable)
 8001782:	4b09      	ldr	r3, [pc, #36]	; (80017a8 <USART2_IRQHandler+0x68>)
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d004      	beq.n	8001794 <USART2_IRQHandler+0x54>
        	hw_debug(&c,1);
 800178a:	1dfb      	adds	r3, r7, #7
 800178c:	2101      	movs	r1, #1
 800178e:	4618      	mov	r0, r3
 8001790:	f7ff ff5c 	bl	800164c <hw_debug>

        at_rx_interrupt(c);
 8001794:	79fb      	ldrb	r3, [r7, #7]
 8001796:	4618      	mov	r0, r3
 8001798:	f7ff fd02 	bl	80011a0 <at_rx_interrupt>
        // some action here
    }
}
 800179c:	bf00      	nop
 800179e:	3710      	adds	r7, #16
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	20000708 	.word	0x20000708
 80017a8:	200002d9 	.word	0x200002d9

080017ac <hw_serial_send_byte>:

static void hw_serial_send_byte(uint8_t c)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b085      	sub	sp, #20
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	4603      	mov	r3, r0
 80017b4:	71fb      	strb	r3, [r7, #7]
	USART_TypeDef *h = UART_HANDLE.Instance;
 80017b6:	4b0a      	ldr	r3, [pc, #40]	; (80017e0 <hw_serial_send_byte+0x34>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	60fb      	str	r3, [r7, #12]

  while( !(h->ISR & UART_FLAG_TXE)) {}
 80017bc:	bf00      	nop
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	69db      	ldr	r3, [r3, #28]
 80017c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d0f9      	beq.n	80017be <hw_serial_send_byte+0x12>

  h->TDR = c;
 80017ca:	79fb      	ldrb	r3, [r7, #7]
 80017cc:	b29a      	uxth	r2, r3
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	851a      	strh	r2, [r3, #40]	; 0x28
}
 80017d2:	bf00      	nop
 80017d4:	3714      	adds	r7, #20
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	20000708 	.word	0x20000708

080017e4 <hw_serial_tx>:

uint32_t hw_serial_tx(const uint8_t *str, uint16_t len)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b084      	sub	sp, #16
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
 80017ec:	460b      	mov	r3, r1
 80017ee:	807b      	strh	r3, [r7, #2]
	uint16_t n;

	if(hw_debug_enable)
 80017f0:	4b0f      	ldr	r3, [pc, #60]	; (8001830 <hw_serial_tx+0x4c>)
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d004      	beq.n	8001802 <hw_serial_tx+0x1e>
		hw_debug(str,len);
 80017f8:	887b      	ldrh	r3, [r7, #2]
 80017fa:	4619      	mov	r1, r3
 80017fc:	6878      	ldr	r0, [r7, #4]
 80017fe:	f7ff ff25 	bl	800164c <hw_debug>

	for(n = 0 ; n < len ; n++)
 8001802:	2300      	movs	r3, #0
 8001804:	81fb      	strh	r3, [r7, #14]
 8001806:	e009      	b.n	800181c <hw_serial_tx+0x38>
		hw_serial_send_byte(str[n]);
 8001808:	89fb      	ldrh	r3, [r7, #14]
 800180a:	687a      	ldr	r2, [r7, #4]
 800180c:	4413      	add	r3, r2
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	4618      	mov	r0, r3
 8001812:	f7ff ffcb 	bl	80017ac <hw_serial_send_byte>
	for(n = 0 ; n < len ; n++)
 8001816:	89fb      	ldrh	r3, [r7, #14]
 8001818:	3301      	adds	r3, #1
 800181a:	81fb      	strh	r3, [r7, #14]
 800181c:	89fa      	ldrh	r2, [r7, #14]
 800181e:	887b      	ldrh	r3, [r7, #2]
 8001820:	429a      	cmp	r2, r3
 8001822:	d3f1      	bcc.n	8001808 <hw_serial_tx+0x24>

	return len;
 8001824:	887b      	ldrh	r3, [r7, #2]
}
 8001826:	4618      	mov	r0, r3
 8001828:	3710      	adds	r7, #16
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	200002d9 	.word	0x200002d9

08001834 <hw_time_get>:


uint32_t hw_time_get(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 8001838:	f001 fc76 	bl	8003128 <HAL_GetTick>
 800183c:	4603      	mov	r3, r0
}
 800183e:	4618      	mov	r0, r3
 8001840:	bd80      	pop	{r7, pc}

08001842 <hw_time_elapsed>:

uint32_t hw_time_elapsed(uint32_t tmr_old_ms, uint32_t tmr_new_ms)
{
 8001842:	b480      	push	{r7}
 8001844:	b085      	sub	sp, #20
 8001846:	af00      	add	r7, sp, #0
 8001848:	6078      	str	r0, [r7, #4]
 800184a:	6039      	str	r1, [r7, #0]
    uint32_t elapsed_ms;

    if(tmr_new_ms < tmr_old_ms)
 800184c:	683a      	ldr	r2, [r7, #0]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	429a      	cmp	r2, r3
 8001852:	d204      	bcs.n	800185e <hw_time_elapsed+0x1c>
        elapsed_ms = UINT32_MAX - tmr_old_ms + tmr_new_ms + 1;
 8001854:	683a      	ldr	r2, [r7, #0]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	60fb      	str	r3, [r7, #12]
 800185c:	e003      	b.n	8001866 <hw_time_elapsed+0x24>
    else
        elapsed_ms = tmr_new_ms - tmr_old_ms;
 800185e:	683a      	ldr	r2, [r7, #0]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	1ad3      	subs	r3, r2, r3
 8001864:	60fb      	str	r3, [r7, #12]

    return elapsed_ms;
 8001866:	68fb      	ldr	r3, [r7, #12]
}
 8001868:	4618      	mov	r0, r3
 800186a:	3714      	adds	r7, #20
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr

08001874 <hw_time_sleep>:

void hw_time_sleep(uint32_t tmr_ms)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b084      	sub	sp, #16
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
    uint32_t tmr_new_ms;
    uint32_t tmr_old_ms = hw_time_get();
 800187c:	f7ff ffda 	bl	8001834 <hw_time_get>
 8001880:	60f8      	str	r0, [r7, #12]

    do
    {
        tmr_new_ms = hw_time_get();
 8001882:	f7ff ffd7 	bl	8001834 <hw_time_get>
 8001886:	60b8      	str	r0, [r7, #8]
    } while(hw_time_elapsed(tmr_old_ms,tmr_new_ms) < tmr_ms);
 8001888:	68b9      	ldr	r1, [r7, #8]
 800188a:	68f8      	ldr	r0, [r7, #12]
 800188c:	f7ff ffd9 	bl	8001842 <hw_time_elapsed>
 8001890:	4602      	mov	r2, r0
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	4293      	cmp	r3, r2
 8001896:	d8f4      	bhi.n	8001882 <hw_time_sleep+0xe>
}
 8001898:	bf00      	nop
 800189a:	3710      	adds	r7, #16
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}

080018a0 <hw_uart_init>:
{
	hw_debug_enable = state;
}

void hw_uart_init(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
	UART_HANDLE.Instance->CR3 |= USART_CR3_EIE;
 80018a4:	4b0c      	ldr	r3, [pc, #48]	; (80018d8 <hw_uart_init+0x38>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	689a      	ldr	r2, [r3, #8]
 80018aa:	4b0b      	ldr	r3, [pc, #44]	; (80018d8 <hw_uart_init+0x38>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f042 0201 	orr.w	r2, r2, #1
 80018b2:	609a      	str	r2, [r3, #8]
	UART_HANDLE.Instance->CR1 |= USART_CR1_PEIE | USART_CR1_RXNEIE;
 80018b4:	4b08      	ldr	r3, [pc, #32]	; (80018d8 <hw_uart_init+0x38>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	4b07      	ldr	r3, [pc, #28]	; (80018d8 <hw_uart_init+0x38>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 80018c2:	601a      	str	r2, [r3, #0]
	HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 80018c4:	2200      	movs	r2, #0
 80018c6:	2101      	movs	r1, #1
 80018c8:	2026      	movs	r0, #38	; 0x26
 80018ca:	f001 fd36 	bl	800333a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART2_IRQn);
 80018ce:	2026      	movs	r0, #38	; 0x26
 80018d0:	f001 fd4f 	bl	8003372 <HAL_NVIC_EnableIRQ>
}
 80018d4:	bf00      	nop
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	20000708 	.word	0x20000708

080018dc <mon_get_wifi_pwd>:

uint8_t sens_val[100];
//uint8_t sens_val = 2;

uint8_t *mon_get_wifi_pwd(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
	return (uint8_t *)"gfzs3569";
 80018e0:	4b02      	ldr	r3, [pc, #8]	; (80018ec <mon_get_wifi_pwd+0x10>)
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr
 80018ec:	080070f0 	.word	0x080070f0

080018f0 <mon_get_wifi_ssid>:

uint8_t *mon_get_wifi_ssid(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
	return (uint8_t *)"AndroidAP4f29";
 80018f4:	4b02      	ldr	r3, [pc, #8]	; (8001900 <mon_get_wifi_ssid+0x10>)
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr
 8001900:	080070fc 	.word	0x080070fc

08001904 <mon_get_cloud_id>:

mon_cloud_id_t mon_get_cloud_id(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
	return MON_DWEET_CLOUD_ID;
 8001908:	2301      	movs	r3, #1
}
 800190a:	4618      	mov	r0, r3
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr

08001914 <mon_get_device_token>:

uint8_t *mon_get_device_token(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
	return 0;
 8001918:	2300      	movs	r3, #0
}
 800191a:	4618      	mov	r0, r3
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr

08001924 <mon_get_device_type>:

uint8_t *mon_get_device_type(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
	return 0;
 8001928:	2300      	movs	r3, #0
}
 800192a:	4618      	mov	r0, r3
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr

08001934 <mon_get_cpu_tag>:

uint8_t *mon_get_cpu_tag(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
	return (uint8_t *)"THING_UFU";
 8001938:	4b02      	ldr	r3, [pc, #8]	; (8001944 <mon_get_cpu_tag+0x10>)
}
 800193a:	4618      	mov	r0, r3
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr
 8001944:	0800710c 	.word	0x0800710c

08001948 <mon_get_iot_hub>:

uint8_t *mon_get_iot_hub(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
	return 0;
 800194c:	2300      	movs	r3, #0
}
 800194e:	4618      	mov	r0, r3
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr

08001958 <wifi_on>:

static void wifi_on(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
    hw_esp_power_set(true);
 800195c:	2001      	movs	r0, #1
 800195e:	f7ff fe11 	bl	8001584 <hw_esp_power_set>
    hw_esp_reset_set(false);
 8001962:	2000      	movs	r0, #0
 8001964:	f7ff fe2a 	bl	80015bc <hw_esp_reset_set>
    hw_esp_enable_set(true);
 8001968:	2001      	movs	r0, #1
 800196a:	f7ff fe32 	bl	80015d2 <hw_esp_enable_set>
}
 800196e:	bf00      	nop
 8001970:	bd80      	pop	{r7, pc}
	...

08001974 <wifi_startup>:
    hw_esp_reset_set(true);
    hw_esp_enable_set(false);
}

static int8_t wifi_startup(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
//	cmd.payload.uart.parity = 0;
//	cmd.payload.uart.flow_control = 0;
//	at_send_cmd_blocking(&cmd,1000);

	// first command after changing serial baud rate fails...
	cmd.id = AT_CMD_READY;
 8001978:	4b36      	ldr	r3, [pc, #216]	; (8001a54 <wifi_startup+0xe0>)
 800197a:	2200      	movs	r2, #0
 800197c:	701a      	strb	r2, [r3, #0]
	at_send_cmd_blocking(&cmd,1000);
 800197e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001982:	4834      	ldr	r0, [pc, #208]	; (8001a54 <wifi_startup+0xe0>)
 8001984:	f7ff f876 	bl	8000a74 <at_send_cmd_blocking>

	cmd.id = AT_CMD_READY;
 8001988:	4b32      	ldr	r3, [pc, #200]	; (8001a54 <wifi_startup+0xe0>)
 800198a:	2200      	movs	r2, #0
 800198c:	701a      	strb	r2, [r3, #0]
	at_send_cmd_blocking(&cmd,3000);
 800198e:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8001992:	4830      	ldr	r0, [pc, #192]	; (8001a54 <wifi_startup+0xe0>)
 8001994:	f7ff f86e 	bl	8000a74 <at_send_cmd_blocking>

	if(cmd.status != AT_STATUS_OK)
 8001998:	4b2e      	ldr	r3, [pc, #184]	; (8001a54 <wifi_startup+0xe0>)
 800199a:	7c1b      	ldrb	r3, [r3, #16]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d002      	beq.n	80019a6 <wifi_startup+0x32>
		return -1;
 80019a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019a4:	e054      	b.n	8001a50 <wifi_startup+0xdc>

	cmd.id = AT_CMD_WIFI_AUTO_CON;
 80019a6:	4b2b      	ldr	r3, [pc, #172]	; (8001a54 <wifi_startup+0xe0>)
 80019a8:	2203      	movs	r2, #3
 80019aa:	701a      	strb	r2, [r3, #0]
	cmd.payload.wifi_autocon.enabled = 0;
 80019ac:	4b29      	ldr	r3, [pc, #164]	; (8001a54 <wifi_startup+0xe0>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	711a      	strb	r2, [r3, #4]
	at_send_cmd_blocking(&cmd,1000);
 80019b2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80019b6:	4827      	ldr	r0, [pc, #156]	; (8001a54 <wifi_startup+0xe0>)
 80019b8:	f7ff f85c 	bl	8000a74 <at_send_cmd_blocking>

    cmd.id = AT_CMD_WIFI_AP_MODE;
 80019bc:	4b25      	ldr	r3, [pc, #148]	; (8001a54 <wifi_startup+0xe0>)
 80019be:	2204      	movs	r2, #4
 80019c0:	701a      	strb	r2, [r3, #0]
    cmd.payload.wifi_mode.ap_station = AT_WIFI_MODE_STATION;
 80019c2:	4b24      	ldr	r3, [pc, #144]	; (8001a54 <wifi_startup+0xe0>)
 80019c4:	2201      	movs	r2, #1
 80019c6:	711a      	strb	r2, [r3, #4]
    at_send_cmd_blocking(&cmd,2000);
 80019c8:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80019cc:	4821      	ldr	r0, [pc, #132]	; (8001a54 <wifi_startup+0xe0>)
 80019ce:	f7ff f851 	bl	8000a74 <at_send_cmd_blocking>

    cmd.id = AT_CMD_WIFI_AP_DHCP;
 80019d2:	4b20      	ldr	r3, [pc, #128]	; (8001a54 <wifi_startup+0xe0>)
 80019d4:	2207      	movs	r2, #7
 80019d6:	701a      	strb	r2, [r3, #0]
    cmd.payload.wifi_dhcp.ap_station = 1;
 80019d8:	4b1e      	ldr	r3, [pc, #120]	; (8001a54 <wifi_startup+0xe0>)
 80019da:	2201      	movs	r2, #1
 80019dc:	711a      	strb	r2, [r3, #4]
    cmd.payload.wifi_dhcp.enabled = 1;
 80019de:	4b1d      	ldr	r3, [pc, #116]	; (8001a54 <wifi_startup+0xe0>)
 80019e0:	2201      	movs	r2, #1
 80019e2:	715a      	strb	r2, [r3, #5]
    at_send_cmd_blocking(&cmd,2000);
 80019e4:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80019e8:	481a      	ldr	r0, [pc, #104]	; (8001a54 <wifi_startup+0xe0>)
 80019ea:	f7ff f843 	bl	8000a74 <at_send_cmd_blocking>

    cmd.id = AT_CMD_CON_MUX;
 80019ee:	4b19      	ldr	r3, [pc, #100]	; (8001a54 <wifi_startup+0xe0>)
 80019f0:	220d      	movs	r2, #13
 80019f2:	701a      	strb	r2, [r3, #0]
    cmd.payload.mux.enabled = 1;
 80019f4:	4b17      	ldr	r3, [pc, #92]	; (8001a54 <wifi_startup+0xe0>)
 80019f6:	2201      	movs	r2, #1
 80019f8:	711a      	strb	r2, [r3, #4]
    at_send_cmd_blocking(&cmd,2000);
 80019fa:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80019fe:	4815      	ldr	r0, [pc, #84]	; (8001a54 <wifi_startup+0xe0>)
 8001a00:	f7ff f838 	bl	8000a74 <at_send_cmd_blocking>

    cmd.id = AT_CMD_WIFI_AP_SET;
 8001a04:	4b13      	ldr	r3, [pc, #76]	; (8001a54 <wifi_startup+0xe0>)
 8001a06:	2206      	movs	r2, #6
 8001a08:	701a      	strb	r2, [r3, #0]
    cmd.payload.wifi_ap.ssid = mon_get_wifi_ssid();
 8001a0a:	f7ff ff71 	bl	80018f0 <mon_get_wifi_ssid>
 8001a0e:	4602      	mov	r2, r0
 8001a10:	4b10      	ldr	r3, [pc, #64]	; (8001a54 <wifi_startup+0xe0>)
 8001a12:	605a      	str	r2, [r3, #4]
    cmd.payload.wifi_ap.pwd = mon_get_wifi_pwd();
 8001a14:	f7ff ff62 	bl	80018dc <mon_get_wifi_pwd>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	4b0e      	ldr	r3, [pc, #56]	; (8001a54 <wifi_startup+0xe0>)
 8001a1c:	609a      	str	r2, [r3, #8]
    at_send_cmd_blocking(&cmd,30000);
 8001a1e:	f247 5130 	movw	r1, #30000	; 0x7530
 8001a22:	480c      	ldr	r0, [pc, #48]	; (8001a54 <wifi_startup+0xe0>)
 8001a24:	f7ff f826 	bl	8000a74 <at_send_cmd_blocking>

	if(cmd.status != AT_STATUS_OK)
 8001a28:	4b0a      	ldr	r3, [pc, #40]	; (8001a54 <wifi_startup+0xe0>)
 8001a2a:	7c1b      	ldrb	r3, [r3, #16]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d002      	beq.n	8001a36 <wifi_startup+0xc2>
		return -2;
 8001a30:	f06f 0301 	mvn.w	r3, #1
 8001a34:	e00c      	b.n	8001a50 <wifi_startup+0xdc>

    cmd.id = AT_CMD_SLL_BUFFER_SIZE;
 8001a36:	4b07      	ldr	r3, [pc, #28]	; (8001a54 <wifi_startup+0xe0>)
 8001a38:	2211      	movs	r2, #17
 8001a3a:	701a      	strb	r2, [r3, #0]
    cmd.payload.ssl_buffer.size = 4096;
 8001a3c:	4b05      	ldr	r3, [pc, #20]	; (8001a54 <wifi_startup+0xe0>)
 8001a3e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001a42:	809a      	strh	r2, [r3, #4]
    at_send_cmd_blocking(&cmd,2000);
 8001a44:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001a48:	4802      	ldr	r0, [pc, #8]	; (8001a54 <wifi_startup+0xe0>)
 8001a4a:	f7ff f813 	bl	8000a74 <at_send_cmd_blocking>

    return 1;
 8001a4e:	2301      	movs	r3, #1
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	200006f4 	.word	0x200006f4

08001a58 <send_tspeak_update>:

bool send_tspeak_update(void)
{
 8001a58:	b590      	push	{r4, r7, lr}
 8001a5a:	b089      	sub	sp, #36	; 0x24
 8001a5c:	af02      	add	r7, sp, #8
    uint8_t val[10];
    float t = hw_temperature_get();
 8001a5e:	f7ff fdd3 	bl	8001608 <hw_temperature_get>
 8001a62:	ed87 0a05 	vstr	s0, [r7, #20]
    int16_t ti;
    uint16_t tf;
    uint16_t len;
    bool ret;

    ti = (int16_t) t;
 8001a66:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a6a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a6e:	ee17 3a90 	vmov	r3, s15
 8001a72:	827b      	strh	r3, [r7, #18]
    tf = (uint16_t) fabs((t - ti)*100);
 8001a74:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001a78:	ee07 3a90 	vmov	s15, r3
 8001a7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a80:	ed97 7a05 	vldr	s14, [r7, #20]
 8001a84:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a88:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8001bc4 <send_tspeak_update+0x16c>
 8001a8c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a90:	eef0 7ae7 	vabs.f32	s15, s15
 8001a94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a98:	ee17 3a90 	vmov	r3, s15
 8001a9c:	823b      	strh	r3, [r7, #16]
    sprintf((char *) sens_val,"key=%s&field1=%s&field2=%d.%d",
    		(char *) mon_get_device_token(),
 8001a9e:	f7ff ff39 	bl	8001914 <mon_get_device_token>
 8001aa2:	4604      	mov	r4, r0
			(char *) mon_get_cpu_tag(),
 8001aa4:	f7ff ff46 	bl	8001934 <mon_get_cpu_tag>
 8001aa8:	4601      	mov	r1, r0
    sprintf((char *) sens_val,"key=%s&field1=%s&field2=%d.%d",
 8001aaa:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001aae:	8a3a      	ldrh	r2, [r7, #16]
 8001ab0:	9201      	str	r2, [sp, #4]
 8001ab2:	9300      	str	r3, [sp, #0]
 8001ab4:	460b      	mov	r3, r1
 8001ab6:	4622      	mov	r2, r4
 8001ab8:	4943      	ldr	r1, [pc, #268]	; (8001bc8 <send_tspeak_update+0x170>)
 8001aba:	4844      	ldr	r0, [pc, #272]	; (8001bcc <send_tspeak_update+0x174>)
 8001abc:	f004 f848 	bl	8005b50 <siprintf>
			ti,tf);

    SSD1306_Goto(0, 2);
 8001ac0:	2102      	movs	r1, #2
 8001ac2:	2000      	movs	r0, #0
 8001ac4:	f000 feac 	bl	8002820 <SSD1306_Goto>
    SSD1306_Write_String((uint8_t*)"Connec. tspeak...  ");
 8001ac8:	4841      	ldr	r0, [pc, #260]	; (8001bd0 <send_tspeak_update+0x178>)
 8001aca:	f000 ff45 	bl	8002958 <SSD1306_Write_String>

    cmd.id = AT_CMD_CON_START;
 8001ace:	4b41      	ldr	r3, [pc, #260]	; (8001bd4 <send_tspeak_update+0x17c>)
 8001ad0:	220e      	movs	r2, #14
 8001ad2:	701a      	strb	r2, [r3, #0]
    cmd.payload.con_start.port = 443;
 8001ad4:	4b3f      	ldr	r3, [pc, #252]	; (8001bd4 <send_tspeak_update+0x17c>)
 8001ad6:	f240 12bb 	movw	r2, #443	; 0x1bb
 8001ada:	81da      	strh	r2, [r3, #14]
    cmd.payload.con_start.transport = (uint8_t *) "SSL";
 8001adc:	4b3d      	ldr	r3, [pc, #244]	; (8001bd4 <send_tspeak_update+0x17c>)
 8001ade:	4a3e      	ldr	r2, [pc, #248]	; (8001bd8 <send_tspeak_update+0x180>)
 8001ae0:	609a      	str	r2, [r3, #8]
    cmd.payload.con_start.site = (uint8_t *) "api.thingspeak.com";
 8001ae2:	4b3c      	ldr	r3, [pc, #240]	; (8001bd4 <send_tspeak_update+0x17c>)
 8001ae4:	4a3d      	ldr	r2, [pc, #244]	; (8001bdc <send_tspeak_update+0x184>)
 8001ae6:	605a      	str	r2, [r3, #4]
    cmd.payload.con_start.channel = 0;
 8001ae8:	4b3a      	ldr	r3, [pc, #232]	; (8001bd4 <send_tspeak_update+0x17c>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	731a      	strb	r2, [r3, #12]
    at_send_cmd_blocking(&cmd,10000);
 8001aee:	f242 7110 	movw	r1, #10000	; 0x2710
 8001af2:	4838      	ldr	r0, [pc, #224]	; (8001bd4 <send_tspeak_update+0x17c>)
 8001af4:	f7fe ffbe 	bl	8000a74 <at_send_cmd_blocking>

    sprintf((char *)val,"%u\r\n\r\n",(unsigned int)strlen((char *) sens_val));
 8001af8:	4834      	ldr	r0, [pc, #208]	; (8001bcc <send_tspeak_update+0x174>)
 8001afa:	f7fe fb73 	bl	80001e4 <strlen>
 8001afe:	4602      	mov	r2, r0
 8001b00:	463b      	mov	r3, r7
 8001b02:	4937      	ldr	r1, [pc, #220]	; (8001be0 <send_tspeak_update+0x188>)
 8001b04:	4618      	mov	r0, r3
 8001b06:	f004 f823 	bl	8005b50 <siprintf>
    len = strlen((char *)tspeak_hdr1) +
 8001b0a:	4b36      	ldr	r3, [pc, #216]	; (8001be4 <send_tspeak_update+0x18c>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f7fe fb68 	bl	80001e4 <strlen>
 8001b14:	4603      	mov	r3, r0
 8001b16:	b29c      	uxth	r4, r3
			strlen((char *) val) +
 8001b18:	463b      	mov	r3, r7
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f7fe fb62 	bl	80001e4 <strlen>
 8001b20:	4603      	mov	r3, r0
    len = strlen((char *)tspeak_hdr1) +
 8001b22:	b29b      	uxth	r3, r3
 8001b24:	4423      	add	r3, r4
 8001b26:	b29c      	uxth	r4, r3
			strlen((char *) sens_val);
 8001b28:	4828      	ldr	r0, [pc, #160]	; (8001bcc <send_tspeak_update+0x174>)
 8001b2a:	f7fe fb5b 	bl	80001e4 <strlen>
 8001b2e:	4603      	mov	r3, r0
			strlen((char *) val) +
 8001b30:	b29b      	uxth	r3, r3
    len = strlen((char *)tspeak_hdr1) +
 8001b32:	4423      	add	r3, r4
 8001b34:	81fb      	strh	r3, [r7, #14]

    cmd.id = AT_CMD_CON_SEND;
 8001b36:	4b27      	ldr	r3, [pc, #156]	; (8001bd4 <send_tspeak_update+0x17c>)
 8001b38:	2210      	movs	r2, #16
 8001b3a:	701a      	strb	r2, [r3, #0]
    cmd.payload.con_send.size = len;
 8001b3c:	4a25      	ldr	r2, [pc, #148]	; (8001bd4 <send_tspeak_update+0x17c>)
 8001b3e:	89fb      	ldrh	r3, [r7, #14]
 8001b40:	8093      	strh	r3, [r2, #4]
    cmd.payload.con_send.transparent = 0;
 8001b42:	4b24      	ldr	r3, [pc, #144]	; (8001bd4 <send_tspeak_update+0x17c>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	739a      	strb	r2, [r3, #14]
    cmd.payload.con_send.channel = 0;
 8001b48:	4b22      	ldr	r3, [pc, #136]	; (8001bd4 <send_tspeak_update+0x17c>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	719a      	strb	r2, [r3, #6]
    at_send_cmd_blocking(&cmd,2000);
 8001b4e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001b52:	4820      	ldr	r0, [pc, #128]	; (8001bd4 <send_tspeak_update+0x17c>)
 8001b54:	f7fe ff8e 	bl	8000a74 <at_send_cmd_blocking>

    hw_serial_tx(tspeak_hdr1,strlen((char *)tspeak_hdr1));
 8001b58:	4b22      	ldr	r3, [pc, #136]	; (8001be4 <send_tspeak_update+0x18c>)
 8001b5a:	681c      	ldr	r4, [r3, #0]
 8001b5c:	4b21      	ldr	r3, [pc, #132]	; (8001be4 <send_tspeak_update+0x18c>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7fe fb3f 	bl	80001e4 <strlen>
 8001b66:	4603      	mov	r3, r0
 8001b68:	b29b      	uxth	r3, r3
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	4620      	mov	r0, r4
 8001b6e:	f7ff fe39 	bl	80017e4 <hw_serial_tx>
    hw_serial_tx(val,strlen((char *)val));
 8001b72:	463b      	mov	r3, r7
 8001b74:	4618      	mov	r0, r3
 8001b76:	f7fe fb35 	bl	80001e4 <strlen>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	b29a      	uxth	r2, r3
 8001b7e:	463b      	mov	r3, r7
 8001b80:	4611      	mov	r1, r2
 8001b82:	4618      	mov	r0, r3
 8001b84:	f7ff fe2e 	bl	80017e4 <hw_serial_tx>
    hw_serial_tx(sens_val,strlen((char *)sens_val));
 8001b88:	4810      	ldr	r0, [pc, #64]	; (8001bcc <send_tspeak_update+0x174>)
 8001b8a:	f7fe fb2b 	bl	80001e4 <strlen>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	b29b      	uxth	r3, r3
 8001b92:	4619      	mov	r1, r3
 8001b94:	480d      	ldr	r0, [pc, #52]	; (8001bcc <send_tspeak_update+0x174>)
 8001b96:	f7ff fe25 	bl	80017e4 <hw_serial_tx>

    ret = web_client();
 8001b9a:	f001 f9a7 	bl	8002eec <web_client>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	737b      	strb	r3, [r7, #13]

    cmd.id = AT_CMD_CON_CLOSE;
 8001ba2:	4b0c      	ldr	r3, [pc, #48]	; (8001bd4 <send_tspeak_update+0x17c>)
 8001ba4:	220f      	movs	r2, #15
 8001ba6:	701a      	strb	r2, [r3, #0]
    cmd.payload.con_close.channel = 0;
 8001ba8:	4b0a      	ldr	r3, [pc, #40]	; (8001bd4 <send_tspeak_update+0x17c>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	711a      	strb	r2, [r3, #4]
    at_send_cmd_blocking(&cmd,2000);
 8001bae:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001bb2:	4808      	ldr	r0, [pc, #32]	; (8001bd4 <send_tspeak_update+0x17c>)
 8001bb4:	f7fe ff5e 	bl	8000a74 <at_send_cmd_blocking>

    return ret;
 8001bb8:	7b7b      	ldrb	r3, [r7, #13]
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	371c      	adds	r7, #28
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd90      	pop	{r4, r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	42c80000 	.word	0x42c80000
 8001bc8:	08007118 	.word	0x08007118
 8001bcc:	20000788 	.word	0x20000788
 8001bd0:	08007138 	.word	0x08007138
 8001bd4:	200006f4 	.word	0x200006f4
 8001bd8:	0800714c 	.word	0x0800714c
 8001bdc:	08007150 	.word	0x08007150
 8001be0:	08007164 	.word	0x08007164
 8001be4:	2000009c 	.word	0x2000009c

08001be8 <send_bluemix_update>:

bool send_bluemix_update(void)
{
 8001be8:	b590      	push	{r4, r7, lr}
 8001bea:	b087      	sub	sp, #28
 8001bec:	af00      	add	r7, sp, #0
    uint8_t val[10];
    float t = hw_temperature_get();
 8001bee:	f7ff fd0b 	bl	8001608 <hw_temperature_get>
 8001bf2:	ed87 0a05 	vstr	s0, [r7, #20]
    int16_t ti;
    uint16_t tf;
    uint16_t len;
    bool ret;

    ti = (int16_t) t;
 8001bf6:	edd7 7a05 	vldr	s15, [r7, #20]
 8001bfa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001bfe:	ee17 3a90 	vmov	r3, s15
 8001c02:	827b      	strh	r3, [r7, #18]
    tf = (uint16_t) fabs((t - ti)*100);
 8001c04:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001c08:	ee07 3a90 	vmov	s15, r3
 8001c0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c10:	ed97 7a05 	vldr	s14, [r7, #20]
 8001c14:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c18:	ed9f 7abe 	vldr	s14, [pc, #760]	; 8001f14 <send_bluemix_update+0x32c>
 8001c1c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c20:	eef0 7ae7 	vabs.f32	s15, s15
 8001c24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c28:	ee17 3a90 	vmov	r3, s15
 8001c2c:	823b      	strh	r3, [r7, #16]
    sprintf((char *) sens_val,"{\"temperature\":%d.%d}",ti,tf);
 8001c2e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001c32:	8a3b      	ldrh	r3, [r7, #16]
 8001c34:	49b8      	ldr	r1, [pc, #736]	; (8001f18 <send_bluemix_update+0x330>)
 8001c36:	48b9      	ldr	r0, [pc, #740]	; (8001f1c <send_bluemix_update+0x334>)
 8001c38:	f003 ff8a 	bl	8005b50 <siprintf>

    SSD1306_Goto(0, 2);
 8001c3c:	2102      	movs	r1, #2
 8001c3e:	2000      	movs	r0, #0
 8001c40:	f000 fdee 	bl	8002820 <SSD1306_Goto>
    SSD1306_Write_String((uint8_t*)"Connec. bluemix... ");
 8001c44:	48b6      	ldr	r0, [pc, #728]	; (8001f20 <send_bluemix_update+0x338>)
 8001c46:	f000 fe87 	bl	8002958 <SSD1306_Write_String>

    cmd.id = AT_CMD_CON_START;
 8001c4a:	4bb6      	ldr	r3, [pc, #728]	; (8001f24 <send_bluemix_update+0x33c>)
 8001c4c:	220e      	movs	r2, #14
 8001c4e:	701a      	strb	r2, [r3, #0]
    cmd.payload.con_start.port = 1883;
 8001c50:	4bb4      	ldr	r3, [pc, #720]	; (8001f24 <send_bluemix_update+0x33c>)
 8001c52:	f240 725b 	movw	r2, #1883	; 0x75b
 8001c56:	81da      	strh	r2, [r3, #14]
    cmd.payload.con_start.transport = (uint8_t *) "TCP";
 8001c58:	4bb2      	ldr	r3, [pc, #712]	; (8001f24 <send_bluemix_update+0x33c>)
 8001c5a:	4ab3      	ldr	r2, [pc, #716]	; (8001f28 <send_bluemix_update+0x340>)
 8001c5c:	609a      	str	r2, [r3, #8]
    cmd.payload.con_start.site = mon_get_iot_hub();
 8001c5e:	f7ff fe73 	bl	8001948 <mon_get_iot_hub>
 8001c62:	4602      	mov	r2, r0
 8001c64:	4baf      	ldr	r3, [pc, #700]	; (8001f24 <send_bluemix_update+0x33c>)
 8001c66:	605a      	str	r2, [r3, #4]
    cmd.payload.con_start.channel = 0;
 8001c68:	4bae      	ldr	r3, [pc, #696]	; (8001f24 <send_bluemix_update+0x33c>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	731a      	strb	r2, [r3, #12]
    at_send_cmd_blocking(&cmd,10000);
 8001c6e:	f242 7110 	movw	r1, #10000	; 0x2710
 8001c72:	48ac      	ldr	r0, [pc, #688]	; (8001f24 <send_bluemix_update+0x33c>)
 8001c74:	f7fe fefe 	bl	8000a74 <at_send_cmd_blocking>

    sprintf((char *)val,"%u\r\n\r\n",(unsigned int)strlen((char *) sens_val));
 8001c78:	48a8      	ldr	r0, [pc, #672]	; (8001f1c <send_bluemix_update+0x334>)
 8001c7a:	f7fe fab3 	bl	80001e4 <strlen>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	463b      	mov	r3, r7
 8001c82:	49aa      	ldr	r1, [pc, #680]	; (8001f2c <send_bluemix_update+0x344>)
 8001c84:	4618      	mov	r0, r3
 8001c86:	f003 ff63 	bl	8005b50 <siprintf>
    len = strlen((char *)bluemix_ssl_hdr1) +
 8001c8a:	4ba9      	ldr	r3, [pc, #676]	; (8001f30 <send_bluemix_update+0x348>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f7fe faa8 	bl	80001e4 <strlen>
 8001c94:	4603      	mov	r3, r0
 8001c96:	b29c      	uxth	r4, r3
    		strlen((char *) mon_get_device_type()) +
 8001c98:	f7ff fe44 	bl	8001924 <mon_get_device_type>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f7fe faa0 	bl	80001e4 <strlen>
 8001ca4:	4603      	mov	r3, r0
    len = strlen((char *)bluemix_ssl_hdr1) +
 8001ca6:	b29b      	uxth	r3, r3
 8001ca8:	4423      	add	r3, r4
 8001caa:	b29c      	uxth	r4, r3
			strlen((char *) bluemix_ssl_hdr2) +
 8001cac:	4ba1      	ldr	r3, [pc, #644]	; (8001f34 <send_bluemix_update+0x34c>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f7fe fa97 	bl	80001e4 <strlen>
 8001cb6:	4603      	mov	r3, r0
    		strlen((char *) mon_get_device_type()) +
 8001cb8:	b29b      	uxth	r3, r3
 8001cba:	4423      	add	r3, r4
 8001cbc:	b29c      	uxth	r4, r3
			strlen((char *) mon_get_cpu_tag()) +
 8001cbe:	f7ff fe39 	bl	8001934 <mon_get_cpu_tag>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f7fe fa8d 	bl	80001e4 <strlen>
 8001cca:	4603      	mov	r3, r0
			strlen((char *) bluemix_ssl_hdr2) +
 8001ccc:	b29b      	uxth	r3, r3
 8001cce:	4423      	add	r3, r4
 8001cd0:	b29c      	uxth	r4, r3
			strlen((char *) bluemix_ssl_hdr3) +
 8001cd2:	4b99      	ldr	r3, [pc, #612]	; (8001f38 <send_bluemix_update+0x350>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f7fe fa84 	bl	80001e4 <strlen>
 8001cdc:	4603      	mov	r3, r0
			strlen((char *) mon_get_cpu_tag()) +
 8001cde:	b29b      	uxth	r3, r3
 8001ce0:	4423      	add	r3, r4
 8001ce2:	b29c      	uxth	r4, r3
			strlen((char *) mon_get_device_token()) +
 8001ce4:	f7ff fe16 	bl	8001914 <mon_get_device_token>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	4618      	mov	r0, r3
 8001cec:	f7fe fa7a 	bl	80001e4 <strlen>
 8001cf0:	4603      	mov	r3, r0
			strlen((char *) bluemix_ssl_hdr3) +
 8001cf2:	b29b      	uxth	r3, r3
 8001cf4:	4423      	add	r3, r4
 8001cf6:	b29c      	uxth	r4, r3
			strlen((const char *) at_eol) +
 8001cf8:	4b90      	ldr	r3, [pc, #576]	; (8001f3c <send_bluemix_update+0x354>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f7fe fa71 	bl	80001e4 <strlen>
 8001d02:	4603      	mov	r3, r0
			strlen((char *) mon_get_device_token()) +
 8001d04:	b29b      	uxth	r3, r3
 8001d06:	4423      	add	r3, r4
 8001d08:	b29c      	uxth	r4, r3
			strlen((char *) bluemix_ssl_hdr4) +
 8001d0a:	4b8d      	ldr	r3, [pc, #564]	; (8001f40 <send_bluemix_update+0x358>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f7fe fa68 	bl	80001e4 <strlen>
 8001d14:	4603      	mov	r3, r0
			strlen((const char *) at_eol) +
 8001d16:	b29b      	uxth	r3, r3
 8001d18:	4423      	add	r3, r4
 8001d1a:	b29c      	uxth	r4, r3
			strlen((char *) mon_get_iot_hub()) +
 8001d1c:	f7ff fe14 	bl	8001948 <mon_get_iot_hub>
 8001d20:	4603      	mov	r3, r0
 8001d22:	4618      	mov	r0, r3
 8001d24:	f7fe fa5e 	bl	80001e4 <strlen>
 8001d28:	4603      	mov	r3, r0
			strlen((char *) bluemix_ssl_hdr4) +
 8001d2a:	b29b      	uxth	r3, r3
 8001d2c:	4423      	add	r3, r4
 8001d2e:	b29c      	uxth	r4, r3
			strlen((const char *) at_eol) +
 8001d30:	4b82      	ldr	r3, [pc, #520]	; (8001f3c <send_bluemix_update+0x354>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4618      	mov	r0, r3
 8001d36:	f7fe fa55 	bl	80001e4 <strlen>
 8001d3a:	4603      	mov	r3, r0
			strlen((char *) mon_get_iot_hub()) +
 8001d3c:	b29b      	uxth	r3, r3
 8001d3e:	4423      	add	r3, r4
 8001d40:	b29c      	uxth	r4, r3
			strlen((char *) bluemix_ssl_hdr5) +
 8001d42:	4b80      	ldr	r3, [pc, #512]	; (8001f44 <send_bluemix_update+0x35c>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4618      	mov	r0, r3
 8001d48:	f7fe fa4c 	bl	80001e4 <strlen>
 8001d4c:	4603      	mov	r3, r0
			strlen((const char *) at_eol) +
 8001d4e:	b29b      	uxth	r3, r3
 8001d50:	4423      	add	r3, r4
 8001d52:	b29c      	uxth	r4, r3
			strlen((char *) val) +
 8001d54:	463b      	mov	r3, r7
 8001d56:	4618      	mov	r0, r3
 8001d58:	f7fe fa44 	bl	80001e4 <strlen>
 8001d5c:	4603      	mov	r3, r0
			strlen((char *) bluemix_ssl_hdr5) +
 8001d5e:	b29b      	uxth	r3, r3
 8001d60:	4423      	add	r3, r4
 8001d62:	b29c      	uxth	r4, r3
			strlen((char *) sens_val);
 8001d64:	486d      	ldr	r0, [pc, #436]	; (8001f1c <send_bluemix_update+0x334>)
 8001d66:	f7fe fa3d 	bl	80001e4 <strlen>
 8001d6a:	4603      	mov	r3, r0
			strlen((char *) val) +
 8001d6c:	b29b      	uxth	r3, r3
    len = strlen((char *)bluemix_ssl_hdr1) +
 8001d6e:	4423      	add	r3, r4
 8001d70:	81fb      	strh	r3, [r7, #14]

    cmd.id = AT_CMD_CON_SEND;
 8001d72:	4b6c      	ldr	r3, [pc, #432]	; (8001f24 <send_bluemix_update+0x33c>)
 8001d74:	2210      	movs	r2, #16
 8001d76:	701a      	strb	r2, [r3, #0]
    cmd.payload.con_send.size = len;
 8001d78:	4a6a      	ldr	r2, [pc, #424]	; (8001f24 <send_bluemix_update+0x33c>)
 8001d7a:	89fb      	ldrh	r3, [r7, #14]
 8001d7c:	8093      	strh	r3, [r2, #4]
    cmd.payload.con_send.transparent = 0;
 8001d7e:	4b69      	ldr	r3, [pc, #420]	; (8001f24 <send_bluemix_update+0x33c>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	739a      	strb	r2, [r3, #14]
    cmd.payload.con_send.channel = 0;
 8001d84:	4b67      	ldr	r3, [pc, #412]	; (8001f24 <send_bluemix_update+0x33c>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	719a      	strb	r2, [r3, #6]
    at_send_cmd_blocking(&cmd,2000);
 8001d8a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001d8e:	4865      	ldr	r0, [pc, #404]	; (8001f24 <send_bluemix_update+0x33c>)
 8001d90:	f7fe fe70 	bl	8000a74 <at_send_cmd_blocking>

    hw_serial_tx(bluemix_ssl_hdr1,strlen((char *)bluemix_ssl_hdr1));
 8001d94:	4b66      	ldr	r3, [pc, #408]	; (8001f30 <send_bluemix_update+0x348>)
 8001d96:	681c      	ldr	r4, [r3, #0]
 8001d98:	4b65      	ldr	r3, [pc, #404]	; (8001f30 <send_bluemix_update+0x348>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f7fe fa21 	bl	80001e4 <strlen>
 8001da2:	4603      	mov	r3, r0
 8001da4:	b29b      	uxth	r3, r3
 8001da6:	4619      	mov	r1, r3
 8001da8:	4620      	mov	r0, r4
 8001daa:	f7ff fd1b 	bl	80017e4 <hw_serial_tx>
    hw_serial_tx(mon_get_device_type(),strlen((char *)mon_get_device_type()));
 8001dae:	f7ff fdb9 	bl	8001924 <mon_get_device_type>
 8001db2:	4604      	mov	r4, r0
 8001db4:	f7ff fdb6 	bl	8001924 <mon_get_device_type>
 8001db8:	4603      	mov	r3, r0
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f7fe fa12 	bl	80001e4 <strlen>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	b29b      	uxth	r3, r3
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	4620      	mov	r0, r4
 8001dc8:	f7ff fd0c 	bl	80017e4 <hw_serial_tx>
    hw_serial_tx(bluemix_ssl_hdr2,strlen((char *)bluemix_ssl_hdr2));
 8001dcc:	4b59      	ldr	r3, [pc, #356]	; (8001f34 <send_bluemix_update+0x34c>)
 8001dce:	681c      	ldr	r4, [r3, #0]
 8001dd0:	4b58      	ldr	r3, [pc, #352]	; (8001f34 <send_bluemix_update+0x34c>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f7fe fa05 	bl	80001e4 <strlen>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	b29b      	uxth	r3, r3
 8001dde:	4619      	mov	r1, r3
 8001de0:	4620      	mov	r0, r4
 8001de2:	f7ff fcff 	bl	80017e4 <hw_serial_tx>
    hw_serial_tx(mon_get_cpu_tag(),strlen((char *)mon_get_cpu_tag()));
 8001de6:	f7ff fda5 	bl	8001934 <mon_get_cpu_tag>
 8001dea:	4604      	mov	r4, r0
 8001dec:	f7ff fda2 	bl	8001934 <mon_get_cpu_tag>
 8001df0:	4603      	mov	r3, r0
 8001df2:	4618      	mov	r0, r3
 8001df4:	f7fe f9f6 	bl	80001e4 <strlen>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	b29b      	uxth	r3, r3
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	4620      	mov	r0, r4
 8001e00:	f7ff fcf0 	bl	80017e4 <hw_serial_tx>
    hw_serial_tx(bluemix_ssl_hdr3,strlen((char *)bluemix_ssl_hdr3));
 8001e04:	4b4c      	ldr	r3, [pc, #304]	; (8001f38 <send_bluemix_update+0x350>)
 8001e06:	681c      	ldr	r4, [r3, #0]
 8001e08:	4b4b      	ldr	r3, [pc, #300]	; (8001f38 <send_bluemix_update+0x350>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f7fe f9e9 	bl	80001e4 <strlen>
 8001e12:	4603      	mov	r3, r0
 8001e14:	b29b      	uxth	r3, r3
 8001e16:	4619      	mov	r1, r3
 8001e18:	4620      	mov	r0, r4
 8001e1a:	f7ff fce3 	bl	80017e4 <hw_serial_tx>
    hw_serial_tx(mon_get_device_token(),strlen((char *)mon_get_device_token()));
 8001e1e:	f7ff fd79 	bl	8001914 <mon_get_device_token>
 8001e22:	4604      	mov	r4, r0
 8001e24:	f7ff fd76 	bl	8001914 <mon_get_device_token>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f7fe f9da 	bl	80001e4 <strlen>
 8001e30:	4603      	mov	r3, r0
 8001e32:	b29b      	uxth	r3, r3
 8001e34:	4619      	mov	r1, r3
 8001e36:	4620      	mov	r0, r4
 8001e38:	f7ff fcd4 	bl	80017e4 <hw_serial_tx>
    hw_serial_tx(at_eol,strlen((char *)at_eol));
 8001e3c:	4b3f      	ldr	r3, [pc, #252]	; (8001f3c <send_bluemix_update+0x354>)
 8001e3e:	681c      	ldr	r4, [r3, #0]
 8001e40:	4b3e      	ldr	r3, [pc, #248]	; (8001f3c <send_bluemix_update+0x354>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4618      	mov	r0, r3
 8001e46:	f7fe f9cd 	bl	80001e4 <strlen>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	b29b      	uxth	r3, r3
 8001e4e:	4619      	mov	r1, r3
 8001e50:	4620      	mov	r0, r4
 8001e52:	f7ff fcc7 	bl	80017e4 <hw_serial_tx>
    hw_serial_tx(bluemix_ssl_hdr4,strlen((char *)bluemix_ssl_hdr4));
 8001e56:	4b3a      	ldr	r3, [pc, #232]	; (8001f40 <send_bluemix_update+0x358>)
 8001e58:	681c      	ldr	r4, [r3, #0]
 8001e5a:	4b39      	ldr	r3, [pc, #228]	; (8001f40 <send_bluemix_update+0x358>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f7fe f9c0 	bl	80001e4 <strlen>
 8001e64:	4603      	mov	r3, r0
 8001e66:	b29b      	uxth	r3, r3
 8001e68:	4619      	mov	r1, r3
 8001e6a:	4620      	mov	r0, r4
 8001e6c:	f7ff fcba 	bl	80017e4 <hw_serial_tx>
    hw_serial_tx(mon_get_iot_hub(),strlen((char *)mon_get_iot_hub()));
 8001e70:	f7ff fd6a 	bl	8001948 <mon_get_iot_hub>
 8001e74:	4604      	mov	r4, r0
 8001e76:	f7ff fd67 	bl	8001948 <mon_get_iot_hub>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f7fe f9b1 	bl	80001e4 <strlen>
 8001e82:	4603      	mov	r3, r0
 8001e84:	b29b      	uxth	r3, r3
 8001e86:	4619      	mov	r1, r3
 8001e88:	4620      	mov	r0, r4
 8001e8a:	f7ff fcab 	bl	80017e4 <hw_serial_tx>
    hw_serial_tx(at_eol,strlen((char *)at_eol));
 8001e8e:	4b2b      	ldr	r3, [pc, #172]	; (8001f3c <send_bluemix_update+0x354>)
 8001e90:	681c      	ldr	r4, [r3, #0]
 8001e92:	4b2a      	ldr	r3, [pc, #168]	; (8001f3c <send_bluemix_update+0x354>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4618      	mov	r0, r3
 8001e98:	f7fe f9a4 	bl	80001e4 <strlen>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	b29b      	uxth	r3, r3
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	4620      	mov	r0, r4
 8001ea4:	f7ff fc9e 	bl	80017e4 <hw_serial_tx>
    hw_serial_tx(bluemix_ssl_hdr5,strlen((char *)bluemix_ssl_hdr5));
 8001ea8:	4b26      	ldr	r3, [pc, #152]	; (8001f44 <send_bluemix_update+0x35c>)
 8001eaa:	681c      	ldr	r4, [r3, #0]
 8001eac:	4b25      	ldr	r3, [pc, #148]	; (8001f44 <send_bluemix_update+0x35c>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f7fe f997 	bl	80001e4 <strlen>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	b29b      	uxth	r3, r3
 8001eba:	4619      	mov	r1, r3
 8001ebc:	4620      	mov	r0, r4
 8001ebe:	f7ff fc91 	bl	80017e4 <hw_serial_tx>
    hw_serial_tx(val,strlen((char *)val));
 8001ec2:	463b      	mov	r3, r7
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f7fe f98d 	bl	80001e4 <strlen>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	b29a      	uxth	r2, r3
 8001ece:	463b      	mov	r3, r7
 8001ed0:	4611      	mov	r1, r2
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f7ff fc86 	bl	80017e4 <hw_serial_tx>
    hw_serial_tx(sens_val,strlen((char *)sens_val));
 8001ed8:	4810      	ldr	r0, [pc, #64]	; (8001f1c <send_bluemix_update+0x334>)
 8001eda:	f7fe f983 	bl	80001e4 <strlen>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	b29b      	uxth	r3, r3
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	480d      	ldr	r0, [pc, #52]	; (8001f1c <send_bluemix_update+0x334>)
 8001ee6:	f7ff fc7d 	bl	80017e4 <hw_serial_tx>

    ret = web_client();
 8001eea:	f000 ffff 	bl	8002eec <web_client>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	737b      	strb	r3, [r7, #13]

    cmd.id = AT_CMD_CON_CLOSE;
 8001ef2:	4b0c      	ldr	r3, [pc, #48]	; (8001f24 <send_bluemix_update+0x33c>)
 8001ef4:	220f      	movs	r2, #15
 8001ef6:	701a      	strb	r2, [r3, #0]
    cmd.payload.con_close.channel = 0;
 8001ef8:	4b0a      	ldr	r3, [pc, #40]	; (8001f24 <send_bluemix_update+0x33c>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	711a      	strb	r2, [r3, #4]
    at_send_cmd_blocking(&cmd,2000);
 8001efe:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001f02:	4808      	ldr	r0, [pc, #32]	; (8001f24 <send_bluemix_update+0x33c>)
 8001f04:	f7fe fdb6 	bl	8000a74 <at_send_cmd_blocking>

    return ret;
 8001f08:	7b7b      	ldrb	r3, [r7, #13]
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	371c      	adds	r7, #28
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd90      	pop	{r4, r7, pc}
 8001f12:	bf00      	nop
 8001f14:	42c80000 	.word	0x42c80000
 8001f18:	0800716c 	.word	0x0800716c
 8001f1c:	20000788 	.word	0x20000788
 8001f20:	08007184 	.word	0x08007184
 8001f24:	200006f4 	.word	0x200006f4
 8001f28:	08007198 	.word	0x08007198
 8001f2c:	08007164 	.word	0x08007164
 8001f30:	20000088 	.word	0x20000088
 8001f34:	2000008c 	.word	0x2000008c
 8001f38:	20000090 	.word	0x20000090
 8001f3c:	20000060 	.word	0x20000060
 8001f40:	20000094 	.word	0x20000094
 8001f44:	20000098 	.word	0x20000098

08001f48 <send_azure_update>:

bool send_azure_update(void)
{
 8001f48:	b590      	push	{r4, r7, lr}
 8001f4a:	b087      	sub	sp, #28
 8001f4c:	af00      	add	r7, sp, #0
    uint8_t val[10];
    float t = hw_temperature_get();
 8001f4e:	f7ff fb5b 	bl	8001608 <hw_temperature_get>
 8001f52:	ed87 0a05 	vstr	s0, [r7, #20]
    int16_t ti;
    uint16_t tf;
    uint16_t len;
    bool ret;

    ti = (int16_t) t;
 8001f56:	edd7 7a05 	vldr	s15, [r7, #20]
 8001f5a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f5e:	ee17 3a90 	vmov	r3, s15
 8001f62:	827b      	strh	r3, [r7, #18]
    tf = (uint16_t) fabs((t - ti)*100);
 8001f64:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001f68:	ee07 3a90 	vmov	s15, r3
 8001f6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f70:	ed97 7a05 	vldr	s14, [r7, #20]
 8001f74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f78:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 8002214 <send_azure_update+0x2cc>
 8001f7c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f80:	eef0 7ae7 	vabs.f32	s15, s15
 8001f84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f88:	ee17 3a90 	vmov	r3, s15
 8001f8c:	823b      	strh	r3, [r7, #16]
    sprintf((char *) sens_val,"{\"temperature\":\"%d.%d\"}",ti,tf);
 8001f8e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001f92:	8a3b      	ldrh	r3, [r7, #16]
 8001f94:	49a0      	ldr	r1, [pc, #640]	; (8002218 <send_azure_update+0x2d0>)
 8001f96:	48a1      	ldr	r0, [pc, #644]	; (800221c <send_azure_update+0x2d4>)
 8001f98:	f003 fdda 	bl	8005b50 <siprintf>

    SSD1306_Goto(0, 2);
 8001f9c:	2102      	movs	r1, #2
 8001f9e:	2000      	movs	r0, #0
 8001fa0:	f000 fc3e 	bl	8002820 <SSD1306_Goto>
    SSD1306_Write_String((uint8_t*)"Connec. azure...   ");
 8001fa4:	489e      	ldr	r0, [pc, #632]	; (8002220 <send_azure_update+0x2d8>)
 8001fa6:	f000 fcd7 	bl	8002958 <SSD1306_Write_String>

    cmd.id = AT_CMD_CON_START;
 8001faa:	4b9e      	ldr	r3, [pc, #632]	; (8002224 <send_azure_update+0x2dc>)
 8001fac:	220e      	movs	r2, #14
 8001fae:	701a      	strb	r2, [r3, #0]
    cmd.payload.con_start.port = 443;
 8001fb0:	4b9c      	ldr	r3, [pc, #624]	; (8002224 <send_azure_update+0x2dc>)
 8001fb2:	f240 12bb 	movw	r2, #443	; 0x1bb
 8001fb6:	81da      	strh	r2, [r3, #14]
    cmd.payload.con_start.transport = (uint8_t *) "SSL";
 8001fb8:	4b9a      	ldr	r3, [pc, #616]	; (8002224 <send_azure_update+0x2dc>)
 8001fba:	4a9b      	ldr	r2, [pc, #620]	; (8002228 <send_azure_update+0x2e0>)
 8001fbc:	609a      	str	r2, [r3, #8]
    cmd.payload.con_start.site = mon_get_iot_hub();
 8001fbe:	f7ff fcc3 	bl	8001948 <mon_get_iot_hub>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	4b97      	ldr	r3, [pc, #604]	; (8002224 <send_azure_update+0x2dc>)
 8001fc6:	605a      	str	r2, [r3, #4]
    cmd.payload.con_start.channel = 0;
 8001fc8:	4b96      	ldr	r3, [pc, #600]	; (8002224 <send_azure_update+0x2dc>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	731a      	strb	r2, [r3, #12]
    at_send_cmd_blocking(&cmd,10000);
 8001fce:	f242 7110 	movw	r1, #10000	; 0x2710
 8001fd2:	4894      	ldr	r0, [pc, #592]	; (8002224 <send_azure_update+0x2dc>)
 8001fd4:	f7fe fd4e 	bl	8000a74 <at_send_cmd_blocking>

    sprintf((char *)val,"%u\r\n\r\n",(unsigned int)strlen((char *) sens_val));
 8001fd8:	4890      	ldr	r0, [pc, #576]	; (800221c <send_azure_update+0x2d4>)
 8001fda:	f7fe f903 	bl	80001e4 <strlen>
 8001fde:	4602      	mov	r2, r0
 8001fe0:	463b      	mov	r3, r7
 8001fe2:	4992      	ldr	r1, [pc, #584]	; (800222c <send_azure_update+0x2e4>)
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f003 fdb3 	bl	8005b50 <siprintf>
    len = strlen((char *)iothub_ssl_hdr1) +
 8001fea:	4b91      	ldr	r3, [pc, #580]	; (8002230 <send_azure_update+0x2e8>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f7fe f8f8 	bl	80001e4 <strlen>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	b29c      	uxth	r4, r3
                    strlen((char *) mon_get_cpu_tag()) +
 8001ff8:	f7ff fc9c 	bl	8001934 <mon_get_cpu_tag>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	4618      	mov	r0, r3
 8002000:	f7fe f8f0 	bl	80001e4 <strlen>
 8002004:	4603      	mov	r3, r0
    len = strlen((char *)iothub_ssl_hdr1) +
 8002006:	b29b      	uxth	r3, r3
 8002008:	4423      	add	r3, r4
 800200a:	b29c      	uxth	r4, r3
                    strlen((char *) iothub_ssl_hdr2) +
 800200c:	4b89      	ldr	r3, [pc, #548]	; (8002234 <send_azure_update+0x2ec>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4618      	mov	r0, r3
 8002012:	f7fe f8e7 	bl	80001e4 <strlen>
 8002016:	4603      	mov	r3, r0
                    strlen((char *) mon_get_cpu_tag()) +
 8002018:	b29b      	uxth	r3, r3
 800201a:	4423      	add	r3, r4
 800201c:	b29c      	uxth	r4, r3
                    strlen((char *) mon_get_device_token()) +
 800201e:	f7ff fc79 	bl	8001914 <mon_get_device_token>
 8002022:	4603      	mov	r3, r0
 8002024:	4618      	mov	r0, r3
 8002026:	f7fe f8dd 	bl	80001e4 <strlen>
 800202a:	4603      	mov	r3, r0
                    strlen((char *) iothub_ssl_hdr2) +
 800202c:	b29b      	uxth	r3, r3
 800202e:	4423      	add	r3, r4
 8002030:	b29c      	uxth	r4, r3
                    strlen((const char *) at_eol) +
 8002032:	4b81      	ldr	r3, [pc, #516]	; (8002238 <send_azure_update+0x2f0>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4618      	mov	r0, r3
 8002038:	f7fe f8d4 	bl	80001e4 <strlen>
 800203c:	4603      	mov	r3, r0
                    strlen((char *) mon_get_device_token()) +
 800203e:	b29b      	uxth	r3, r3
 8002040:	4423      	add	r3, r4
 8002042:	b29c      	uxth	r4, r3
                    strlen((char *) iothub_ssl_hdr3) +
 8002044:	4b7d      	ldr	r3, [pc, #500]	; (800223c <send_azure_update+0x2f4>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4618      	mov	r0, r3
 800204a:	f7fe f8cb 	bl	80001e4 <strlen>
 800204e:	4603      	mov	r3, r0
                    strlen((const char *) at_eol) +
 8002050:	b29b      	uxth	r3, r3
 8002052:	4423      	add	r3, r4
 8002054:	b29c      	uxth	r4, r3
                    strlen((char *) mon_get_iot_hub()) +
 8002056:	f7ff fc77 	bl	8001948 <mon_get_iot_hub>
 800205a:	4603      	mov	r3, r0
 800205c:	4618      	mov	r0, r3
 800205e:	f7fe f8c1 	bl	80001e4 <strlen>
 8002062:	4603      	mov	r3, r0
                    strlen((char *) iothub_ssl_hdr3) +
 8002064:	b29b      	uxth	r3, r3
 8002066:	4423      	add	r3, r4
 8002068:	b29c      	uxth	r4, r3
                    strlen((const char *) at_eol) +
 800206a:	4b73      	ldr	r3, [pc, #460]	; (8002238 <send_azure_update+0x2f0>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4618      	mov	r0, r3
 8002070:	f7fe f8b8 	bl	80001e4 <strlen>
 8002074:	4603      	mov	r3, r0
                    strlen((char *) mon_get_iot_hub()) +
 8002076:	b29b      	uxth	r3, r3
 8002078:	4423      	add	r3, r4
 800207a:	b29c      	uxth	r4, r3
                    strlen((char *) iothub_ssl_hdr4) +
 800207c:	4b70      	ldr	r3, [pc, #448]	; (8002240 <send_azure_update+0x2f8>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4618      	mov	r0, r3
 8002082:	f7fe f8af 	bl	80001e4 <strlen>
 8002086:	4603      	mov	r3, r0
                    strlen((const char *) at_eol) +
 8002088:	b29b      	uxth	r3, r3
 800208a:	4423      	add	r3, r4
 800208c:	b29c      	uxth	r4, r3
                    strlen((char *) val) +
 800208e:	463b      	mov	r3, r7
 8002090:	4618      	mov	r0, r3
 8002092:	f7fe f8a7 	bl	80001e4 <strlen>
 8002096:	4603      	mov	r3, r0
                    strlen((char *) iothub_ssl_hdr4) +
 8002098:	b29b      	uxth	r3, r3
 800209a:	4423      	add	r3, r4
 800209c:	b29c      	uxth	r4, r3
                    strlen((char *) sens_val);
 800209e:	485f      	ldr	r0, [pc, #380]	; (800221c <send_azure_update+0x2d4>)
 80020a0:	f7fe f8a0 	bl	80001e4 <strlen>
 80020a4:	4603      	mov	r3, r0
                    strlen((char *) val) +
 80020a6:	b29b      	uxth	r3, r3
    len = strlen((char *)iothub_ssl_hdr1) +
 80020a8:	4423      	add	r3, r4
 80020aa:	81fb      	strh	r3, [r7, #14]

    cmd.id = AT_CMD_CON_SEND;
 80020ac:	4b5d      	ldr	r3, [pc, #372]	; (8002224 <send_azure_update+0x2dc>)
 80020ae:	2210      	movs	r2, #16
 80020b0:	701a      	strb	r2, [r3, #0]
    cmd.payload.con_send.size = len;
 80020b2:	4a5c      	ldr	r2, [pc, #368]	; (8002224 <send_azure_update+0x2dc>)
 80020b4:	89fb      	ldrh	r3, [r7, #14]
 80020b6:	8093      	strh	r3, [r2, #4]
    cmd.payload.con_send.transparent = 0;
 80020b8:	4b5a      	ldr	r3, [pc, #360]	; (8002224 <send_azure_update+0x2dc>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	739a      	strb	r2, [r3, #14]
    cmd.payload.con_send.channel = 0;
 80020be:	4b59      	ldr	r3, [pc, #356]	; (8002224 <send_azure_update+0x2dc>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	719a      	strb	r2, [r3, #6]
    at_send_cmd_blocking(&cmd,2000);
 80020c4:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80020c8:	4856      	ldr	r0, [pc, #344]	; (8002224 <send_azure_update+0x2dc>)
 80020ca:	f7fe fcd3 	bl	8000a74 <at_send_cmd_blocking>

    hw_serial_tx(iothub_ssl_hdr1,strlen((char *)iothub_ssl_hdr1));
 80020ce:	4b58      	ldr	r3, [pc, #352]	; (8002230 <send_azure_update+0x2e8>)
 80020d0:	681c      	ldr	r4, [r3, #0]
 80020d2:	4b57      	ldr	r3, [pc, #348]	; (8002230 <send_azure_update+0x2e8>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4618      	mov	r0, r3
 80020d8:	f7fe f884 	bl	80001e4 <strlen>
 80020dc:	4603      	mov	r3, r0
 80020de:	b29b      	uxth	r3, r3
 80020e0:	4619      	mov	r1, r3
 80020e2:	4620      	mov	r0, r4
 80020e4:	f7ff fb7e 	bl	80017e4 <hw_serial_tx>
    hw_serial_tx(mon_get_cpu_tag(),strlen((char *) mon_get_cpu_tag()));
 80020e8:	f7ff fc24 	bl	8001934 <mon_get_cpu_tag>
 80020ec:	4604      	mov	r4, r0
 80020ee:	f7ff fc21 	bl	8001934 <mon_get_cpu_tag>
 80020f2:	4603      	mov	r3, r0
 80020f4:	4618      	mov	r0, r3
 80020f6:	f7fe f875 	bl	80001e4 <strlen>
 80020fa:	4603      	mov	r3, r0
 80020fc:	b29b      	uxth	r3, r3
 80020fe:	4619      	mov	r1, r3
 8002100:	4620      	mov	r0, r4
 8002102:	f7ff fb6f 	bl	80017e4 <hw_serial_tx>
    hw_serial_tx(iothub_ssl_hdr2,strlen((char *)iothub_ssl_hdr2));
 8002106:	4b4b      	ldr	r3, [pc, #300]	; (8002234 <send_azure_update+0x2ec>)
 8002108:	681c      	ldr	r4, [r3, #0]
 800210a:	4b4a      	ldr	r3, [pc, #296]	; (8002234 <send_azure_update+0x2ec>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4618      	mov	r0, r3
 8002110:	f7fe f868 	bl	80001e4 <strlen>
 8002114:	4603      	mov	r3, r0
 8002116:	b29b      	uxth	r3, r3
 8002118:	4619      	mov	r1, r3
 800211a:	4620      	mov	r0, r4
 800211c:	f7ff fb62 	bl	80017e4 <hw_serial_tx>
    hw_serial_tx(mon_get_device_token(),strlen((char *) mon_get_device_token()));
 8002120:	f7ff fbf8 	bl	8001914 <mon_get_device_token>
 8002124:	4604      	mov	r4, r0
 8002126:	f7ff fbf5 	bl	8001914 <mon_get_device_token>
 800212a:	4603      	mov	r3, r0
 800212c:	4618      	mov	r0, r3
 800212e:	f7fe f859 	bl	80001e4 <strlen>
 8002132:	4603      	mov	r3, r0
 8002134:	b29b      	uxth	r3, r3
 8002136:	4619      	mov	r1, r3
 8002138:	4620      	mov	r0, r4
 800213a:	f7ff fb53 	bl	80017e4 <hw_serial_tx>
    hw_serial_tx(at_eol,strlen((const char *)at_eol));
 800213e:	4b3e      	ldr	r3, [pc, #248]	; (8002238 <send_azure_update+0x2f0>)
 8002140:	681c      	ldr	r4, [r3, #0]
 8002142:	4b3d      	ldr	r3, [pc, #244]	; (8002238 <send_azure_update+0x2f0>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4618      	mov	r0, r3
 8002148:	f7fe f84c 	bl	80001e4 <strlen>
 800214c:	4603      	mov	r3, r0
 800214e:	b29b      	uxth	r3, r3
 8002150:	4619      	mov	r1, r3
 8002152:	4620      	mov	r0, r4
 8002154:	f7ff fb46 	bl	80017e4 <hw_serial_tx>
    hw_serial_tx(iothub_ssl_hdr3,strlen((char *)iothub_ssl_hdr3));
 8002158:	4b38      	ldr	r3, [pc, #224]	; (800223c <send_azure_update+0x2f4>)
 800215a:	681c      	ldr	r4, [r3, #0]
 800215c:	4b37      	ldr	r3, [pc, #220]	; (800223c <send_azure_update+0x2f4>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4618      	mov	r0, r3
 8002162:	f7fe f83f 	bl	80001e4 <strlen>
 8002166:	4603      	mov	r3, r0
 8002168:	b29b      	uxth	r3, r3
 800216a:	4619      	mov	r1, r3
 800216c:	4620      	mov	r0, r4
 800216e:	f7ff fb39 	bl	80017e4 <hw_serial_tx>
    hw_serial_tx(mon_get_iot_hub(),strlen((char *) mon_get_iot_hub()));
 8002172:	f7ff fbe9 	bl	8001948 <mon_get_iot_hub>
 8002176:	4604      	mov	r4, r0
 8002178:	f7ff fbe6 	bl	8001948 <mon_get_iot_hub>
 800217c:	4603      	mov	r3, r0
 800217e:	4618      	mov	r0, r3
 8002180:	f7fe f830 	bl	80001e4 <strlen>
 8002184:	4603      	mov	r3, r0
 8002186:	b29b      	uxth	r3, r3
 8002188:	4619      	mov	r1, r3
 800218a:	4620      	mov	r0, r4
 800218c:	f7ff fb2a 	bl	80017e4 <hw_serial_tx>
    hw_serial_tx(at_eol,strlen((const char *)at_eol));
 8002190:	4b29      	ldr	r3, [pc, #164]	; (8002238 <send_azure_update+0x2f0>)
 8002192:	681c      	ldr	r4, [r3, #0]
 8002194:	4b28      	ldr	r3, [pc, #160]	; (8002238 <send_azure_update+0x2f0>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4618      	mov	r0, r3
 800219a:	f7fe f823 	bl	80001e4 <strlen>
 800219e:	4603      	mov	r3, r0
 80021a0:	b29b      	uxth	r3, r3
 80021a2:	4619      	mov	r1, r3
 80021a4:	4620      	mov	r0, r4
 80021a6:	f7ff fb1d 	bl	80017e4 <hw_serial_tx>
    hw_serial_tx(iothub_ssl_hdr4,strlen((char *)iothub_ssl_hdr4));
 80021aa:	4b25      	ldr	r3, [pc, #148]	; (8002240 <send_azure_update+0x2f8>)
 80021ac:	681c      	ldr	r4, [r3, #0]
 80021ae:	4b24      	ldr	r3, [pc, #144]	; (8002240 <send_azure_update+0x2f8>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4618      	mov	r0, r3
 80021b4:	f7fe f816 	bl	80001e4 <strlen>
 80021b8:	4603      	mov	r3, r0
 80021ba:	b29b      	uxth	r3, r3
 80021bc:	4619      	mov	r1, r3
 80021be:	4620      	mov	r0, r4
 80021c0:	f7ff fb10 	bl	80017e4 <hw_serial_tx>
    hw_serial_tx(val,strlen((char *)val));
 80021c4:	463b      	mov	r3, r7
 80021c6:	4618      	mov	r0, r3
 80021c8:	f7fe f80c 	bl	80001e4 <strlen>
 80021cc:	4603      	mov	r3, r0
 80021ce:	b29a      	uxth	r2, r3
 80021d0:	463b      	mov	r3, r7
 80021d2:	4611      	mov	r1, r2
 80021d4:	4618      	mov	r0, r3
 80021d6:	f7ff fb05 	bl	80017e4 <hw_serial_tx>
    hw_serial_tx(sens_val,strlen((char *) sens_val));
 80021da:	4810      	ldr	r0, [pc, #64]	; (800221c <send_azure_update+0x2d4>)
 80021dc:	f7fe f802 	bl	80001e4 <strlen>
 80021e0:	4603      	mov	r3, r0
 80021e2:	b29b      	uxth	r3, r3
 80021e4:	4619      	mov	r1, r3
 80021e6:	480d      	ldr	r0, [pc, #52]	; (800221c <send_azure_update+0x2d4>)
 80021e8:	f7ff fafc 	bl	80017e4 <hw_serial_tx>

    ret = web_client();
 80021ec:	f000 fe7e 	bl	8002eec <web_client>
 80021f0:	4603      	mov	r3, r0
 80021f2:	737b      	strb	r3, [r7, #13]

    cmd.id = AT_CMD_CON_CLOSE;
 80021f4:	4b0b      	ldr	r3, [pc, #44]	; (8002224 <send_azure_update+0x2dc>)
 80021f6:	220f      	movs	r2, #15
 80021f8:	701a      	strb	r2, [r3, #0]
    cmd.payload.con_close.channel = 0;
 80021fa:	4b0a      	ldr	r3, [pc, #40]	; (8002224 <send_azure_update+0x2dc>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	711a      	strb	r2, [r3, #4]
    at_send_cmd_blocking(&cmd,2000);
 8002200:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8002204:	4807      	ldr	r0, [pc, #28]	; (8002224 <send_azure_update+0x2dc>)
 8002206:	f7fe fc35 	bl	8000a74 <at_send_cmd_blocking>

    return ret;
 800220a:	7b7b      	ldrb	r3, [r7, #13]
}
 800220c:	4618      	mov	r0, r3
 800220e:	371c      	adds	r7, #28
 8002210:	46bd      	mov	sp, r7
 8002212:	bd90      	pop	{r4, r7, pc}
 8002214:	42c80000 	.word	0x42c80000
 8002218:	0800719c 	.word	0x0800719c
 800221c:	20000788 	.word	0x20000788
 8002220:	080071b4 	.word	0x080071b4
 8002224:	200006f4 	.word	0x200006f4
 8002228:	0800714c 	.word	0x0800714c
 800222c:	08007164 	.word	0x08007164
 8002230:	20000078 	.word	0x20000078
 8002234:	2000007c 	.word	0x2000007c
 8002238:	20000060 	.word	0x20000060
 800223c:	20000080 	.word	0x20000080
 8002240:	20000084 	.word	0x20000084

08002244 <send_dwwtio_update>:

bool send_dwwtio_update(void)
{
 8002244:	b590      	push	{r4, r7, lr}
 8002246:	b089      	sub	sp, #36	; 0x24
 8002248:	af00      	add	r7, sp, #0
    uint8_t val[10];
    //float t = hw_temperature_get();
    float t = 2;
 800224a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800224e:	61bb      	str	r3, [r7, #24]
    int16_t ti;
    uint16_t tf;
    uint16_t len;
    bool ret;
    uint8_t *site = (uint8_t *) "dweet.io";
 8002250:	4b82      	ldr	r3, [pc, #520]	; (800245c <send_dwwtio_update+0x218>)
 8002252:	617b      	str	r3, [r7, #20]
    uint8_t *device = (uint8_t *) mon_get_cpu_tag();
 8002254:	f7ff fb6e 	bl	8001934 <mon_get_cpu_tag>
 8002258:	6138      	str	r0, [r7, #16]

    ti = (int16_t) t;
 800225a:	edd7 7a06 	vldr	s15, [r7, #24]
 800225e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002262:	ee17 3a90 	vmov	r3, s15
 8002266:	81fb      	strh	r3, [r7, #14]
    tf = (uint16_t) fabs((t - ti)*100);
 8002268:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800226c:	ee07 3a90 	vmov	s15, r3
 8002270:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002274:	ed97 7a06 	vldr	s14, [r7, #24]
 8002278:	ee77 7a67 	vsub.f32	s15, s14, s15
 800227c:	ed9f 7a78 	vldr	s14, [pc, #480]	; 8002460 <send_dwwtio_update+0x21c>
 8002280:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002284:	eef0 7ae7 	vabs.f32	s15, s15
 8002288:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800228c:	ee17 3a90 	vmov	r3, s15
 8002290:	81bb      	strh	r3, [r7, #12]
    sprintf((char *) sens_val,"{\"temperature\":\"%d.%d\"}",ti,tf);
 8002292:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002296:	89bb      	ldrh	r3, [r7, #12]
 8002298:	4972      	ldr	r1, [pc, #456]	; (8002464 <send_dwwtio_update+0x220>)
 800229a:	4873      	ldr	r0, [pc, #460]	; (8002468 <send_dwwtio_update+0x224>)
 800229c:	f003 fc58 	bl	8005b50 <siprintf>

    SSD1306_Goto(0, 2);
 80022a0:	2102      	movs	r1, #2
 80022a2:	2000      	movs	r0, #0
 80022a4:	f000 fabc 	bl	8002820 <SSD1306_Goto>
    SSD1306_Write_String((uint8_t*)"Connec. dweet.io... ");
 80022a8:	4870      	ldr	r0, [pc, #448]	; (800246c <send_dwwtio_update+0x228>)
 80022aa:	f000 fb55 	bl	8002958 <SSD1306_Write_String>

    cmd.id = AT_CMD_CON_START;
 80022ae:	4b70      	ldr	r3, [pc, #448]	; (8002470 <send_dwwtio_update+0x22c>)
 80022b0:	220e      	movs	r2, #14
 80022b2:	701a      	strb	r2, [r3, #0]
    cmd.payload.con_start.port = 80;
 80022b4:	4b6e      	ldr	r3, [pc, #440]	; (8002470 <send_dwwtio_update+0x22c>)
 80022b6:	2250      	movs	r2, #80	; 0x50
 80022b8:	81da      	strh	r2, [r3, #14]
    cmd.payload.con_start.transport = (uint8_t *) "TCP";
 80022ba:	4b6d      	ldr	r3, [pc, #436]	; (8002470 <send_dwwtio_update+0x22c>)
 80022bc:	4a6d      	ldr	r2, [pc, #436]	; (8002474 <send_dwwtio_update+0x230>)
 80022be:	609a      	str	r2, [r3, #8]
    cmd.payload.con_start.site = site;
 80022c0:	4a6b      	ldr	r2, [pc, #428]	; (8002470 <send_dwwtio_update+0x22c>)
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	6053      	str	r3, [r2, #4]
    cmd.payload.con_start.channel = 0;
 80022c6:	4b6a      	ldr	r3, [pc, #424]	; (8002470 <send_dwwtio_update+0x22c>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	731a      	strb	r2, [r3, #12]
    at_send_cmd_blocking(&cmd,10000);
 80022cc:	f242 7110 	movw	r1, #10000	; 0x2710
 80022d0:	4867      	ldr	r0, [pc, #412]	; (8002470 <send_dwwtio_update+0x22c>)
 80022d2:	f7fe fbcf 	bl	8000a74 <at_send_cmd_blocking>

    if(cmd.status != AT_STATUS_OK)
 80022d6:	4b66      	ldr	r3, [pc, #408]	; (8002470 <send_dwwtio_update+0x22c>)
 80022d8:	7c1b      	ldrb	r3, [r3, #16]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d008      	beq.n	80022f0 <send_dwwtio_update+0xac>
    {
        SSD1306_Goto(0, 2);
 80022de:	2102      	movs	r1, #2
 80022e0:	2000      	movs	r0, #0
 80022e2:	f000 fa9d 	bl	8002820 <SSD1306_Goto>
        SSD1306_Write_String((uint8_t*)"Can't connect!      ");
 80022e6:	4864      	ldr	r0, [pc, #400]	; (8002478 <send_dwwtio_update+0x234>)
 80022e8:	f000 fb36 	bl	8002958 <SSD1306_Write_String>
        return false;
 80022ec:	2300      	movs	r3, #0
 80022ee:	e0b1      	b.n	8002454 <send_dwwtio_update+0x210>
    }

    SSD1306_Goto(0, 2);
 80022f0:	2102      	movs	r1, #2
 80022f2:	2000      	movs	r0, #0
 80022f4:	f000 fa94 	bl	8002820 <SSD1306_Goto>
    SSD1306_Write_String((uint8_t*)"Sending data...     ");
 80022f8:	4860      	ldr	r0, [pc, #384]	; (800247c <send_dwwtio_update+0x238>)
 80022fa:	f000 fb2d 	bl	8002958 <SSD1306_Write_String>

    sprintf((char *)val,"%u\r\n\r\n",(unsigned int)strlen((char *) sens_val));
 80022fe:	485a      	ldr	r0, [pc, #360]	; (8002468 <send_dwwtio_update+0x224>)
 8002300:	f7fd ff70 	bl	80001e4 <strlen>
 8002304:	4602      	mov	r2, r0
 8002306:	463b      	mov	r3, r7
 8002308:	495d      	ldr	r1, [pc, #372]	; (8002480 <send_dwwtio_update+0x23c>)
 800230a:	4618      	mov	r0, r3
 800230c:	f003 fc20 	bl	8005b50 <siprintf>
    len = strlen((char *)dweetio_hdr1) + 
 8002310:	4b5c      	ldr	r3, [pc, #368]	; (8002484 <send_dwwtio_update+0x240>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4618      	mov	r0, r3
 8002316:	f7fd ff65 	bl	80001e4 <strlen>
 800231a:	4603      	mov	r3, r0
 800231c:	b29c      	uxth	r4, r3
                    strlen((char *) device) +
 800231e:	6938      	ldr	r0, [r7, #16]
 8002320:	f7fd ff60 	bl	80001e4 <strlen>
 8002324:	4603      	mov	r3, r0
    len = strlen((char *)dweetio_hdr1) + 
 8002326:	b29b      	uxth	r3, r3
 8002328:	4423      	add	r3, r4
 800232a:	b29c      	uxth	r4, r3
                    strlen((char *) dweetio_hdr2) +
 800232c:	4b56      	ldr	r3, [pc, #344]	; (8002488 <send_dwwtio_update+0x244>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4618      	mov	r0, r3
 8002332:	f7fd ff57 	bl	80001e4 <strlen>
 8002336:	4603      	mov	r3, r0
                    strlen((char *) device) +
 8002338:	b29b      	uxth	r3, r3
 800233a:	4423      	add	r3, r4
 800233c:	b29c      	uxth	r4, r3
                    strlen((char *) val) +  
 800233e:	463b      	mov	r3, r7
 8002340:	4618      	mov	r0, r3
 8002342:	f7fd ff4f 	bl	80001e4 <strlen>
 8002346:	4603      	mov	r3, r0
                    strlen((char *) dweetio_hdr2) +
 8002348:	b29b      	uxth	r3, r3
 800234a:	4423      	add	r3, r4
 800234c:	b29c      	uxth	r4, r3
                    strlen((char *) sens_val);
 800234e:	4846      	ldr	r0, [pc, #280]	; (8002468 <send_dwwtio_update+0x224>)
 8002350:	f7fd ff48 	bl	80001e4 <strlen>
 8002354:	4603      	mov	r3, r0
                    strlen((char *) val) +  
 8002356:	b29b      	uxth	r3, r3
    len = strlen((char *)dweetio_hdr1) + 
 8002358:	4423      	add	r3, r4
 800235a:	817b      	strh	r3, [r7, #10]


    cmd.id = AT_CMD_CON_SEND;
 800235c:	4b44      	ldr	r3, [pc, #272]	; (8002470 <send_dwwtio_update+0x22c>)
 800235e:	2210      	movs	r2, #16
 8002360:	701a      	strb	r2, [r3, #0]
    cmd.payload.con_send.size = len;
 8002362:	4a43      	ldr	r2, [pc, #268]	; (8002470 <send_dwwtio_update+0x22c>)
 8002364:	897b      	ldrh	r3, [r7, #10]
 8002366:	8093      	strh	r3, [r2, #4]
    cmd.payload.con_send.transparent = 0;
 8002368:	4b41      	ldr	r3, [pc, #260]	; (8002470 <send_dwwtio_update+0x22c>)
 800236a:	2200      	movs	r2, #0
 800236c:	739a      	strb	r2, [r3, #14]
    cmd.payload.con_send.channel = 0;
 800236e:	4b40      	ldr	r3, [pc, #256]	; (8002470 <send_dwwtio_update+0x22c>)
 8002370:	2200      	movs	r2, #0
 8002372:	719a      	strb	r2, [r3, #6]
    at_send_cmd_blocking(&cmd,2000);
 8002374:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8002378:	483d      	ldr	r0, [pc, #244]	; (8002470 <send_dwwtio_update+0x22c>)
 800237a:	f7fe fb7b 	bl	8000a74 <at_send_cmd_blocking>

    hw_serial_tx(dweetio_hdr1,strlen((char *)dweetio_hdr1));
 800237e:	4b41      	ldr	r3, [pc, #260]	; (8002484 <send_dwwtio_update+0x240>)
 8002380:	681c      	ldr	r4, [r3, #0]
 8002382:	4b40      	ldr	r3, [pc, #256]	; (8002484 <send_dwwtio_update+0x240>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4618      	mov	r0, r3
 8002388:	f7fd ff2c 	bl	80001e4 <strlen>
 800238c:	4603      	mov	r3, r0
 800238e:	b29b      	uxth	r3, r3
 8002390:	4619      	mov	r1, r3
 8002392:	4620      	mov	r0, r4
 8002394:	f7ff fa26 	bl	80017e4 <hw_serial_tx>
    hw_serial_tx(device,strlen((char *) device));
 8002398:	6938      	ldr	r0, [r7, #16]
 800239a:	f7fd ff23 	bl	80001e4 <strlen>
 800239e:	4603      	mov	r3, r0
 80023a0:	b29b      	uxth	r3, r3
 80023a2:	4619      	mov	r1, r3
 80023a4:	6938      	ldr	r0, [r7, #16]
 80023a6:	f7ff fa1d 	bl	80017e4 <hw_serial_tx>
    hw_serial_tx(dweetio_hdr2,strlen((char *)dweetio_hdr2));
 80023aa:	4b37      	ldr	r3, [pc, #220]	; (8002488 <send_dwwtio_update+0x244>)
 80023ac:	681c      	ldr	r4, [r3, #0]
 80023ae:	4b36      	ldr	r3, [pc, #216]	; (8002488 <send_dwwtio_update+0x244>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4618      	mov	r0, r3
 80023b4:	f7fd ff16 	bl	80001e4 <strlen>
 80023b8:	4603      	mov	r3, r0
 80023ba:	b29b      	uxth	r3, r3
 80023bc:	4619      	mov	r1, r3
 80023be:	4620      	mov	r0, r4
 80023c0:	f7ff fa10 	bl	80017e4 <hw_serial_tx>
    hw_serial_tx(val,strlen((char *)val));
 80023c4:	463b      	mov	r3, r7
 80023c6:	4618      	mov	r0, r3
 80023c8:	f7fd ff0c 	bl	80001e4 <strlen>
 80023cc:	4603      	mov	r3, r0
 80023ce:	b29a      	uxth	r2, r3
 80023d0:	463b      	mov	r3, r7
 80023d2:	4611      	mov	r1, r2
 80023d4:	4618      	mov	r0, r3
 80023d6:	f7ff fa05 	bl	80017e4 <hw_serial_tx>
    hw_serial_tx(sens_val,strlen((char *) sens_val));
 80023da:	4823      	ldr	r0, [pc, #140]	; (8002468 <send_dwwtio_update+0x224>)
 80023dc:	f7fd ff02 	bl	80001e4 <strlen>
 80023e0:	4603      	mov	r3, r0
 80023e2:	b29b      	uxth	r3, r3
 80023e4:	4619      	mov	r1, r3
 80023e6:	4820      	ldr	r0, [pc, #128]	; (8002468 <send_dwwtio_update+0x224>)
 80023e8:	f7ff f9fc 	bl	80017e4 <hw_serial_tx>

    if(cmd.status != AT_STATUS_OK)
 80023ec:	4b20      	ldr	r3, [pc, #128]	; (8002470 <send_dwwtio_update+0x22c>)
 80023ee:	7c1b      	ldrb	r3, [r3, #16]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d009      	beq.n	8002408 <send_dwwtio_update+0x1c4>
    {
        SSD1306_Goto(0, 2);
 80023f4:	2102      	movs	r1, #2
 80023f6:	2000      	movs	r0, #0
 80023f8:	f000 fa12 	bl	8002820 <SSD1306_Goto>
        SSD1306_Write_String((uint8_t*)"Can't send!         ");
 80023fc:	4823      	ldr	r0, [pc, #140]	; (800248c <send_dwwtio_update+0x248>)
 80023fe:	f000 faab 	bl	8002958 <SSD1306_Write_String>
        ret = false;
 8002402:	2300      	movs	r3, #0
 8002404:	77fb      	strb	r3, [r7, #31]
        goto dweet_close_tcp_con;
 8002406:	e019      	b.n	800243c <send_dwwtio_update+0x1f8>
    }
    
    SSD1306_Goto(0, 2);
 8002408:	2102      	movs	r1, #2
 800240a:	2000      	movs	r0, #0
 800240c:	f000 fa08 	bl	8002820 <SSD1306_Goto>
    SSD1306_Write_String((uint8_t*)"Waiting response... ");
 8002410:	481f      	ldr	r0, [pc, #124]	; (8002490 <send_dwwtio_update+0x24c>)
 8002412:	f000 faa1 	bl	8002958 <SSD1306_Write_String>

    ret = web_client();
 8002416:	f000 fd69 	bl	8002eec <web_client>
 800241a:	4603      	mov	r3, r0
 800241c:	77fb      	strb	r3, [r7, #31]

    if(!ret)
 800241e:	7ffb      	ldrb	r3, [r7, #31]
 8002420:	f083 0301 	eor.w	r3, r3, #1
 8002424:	b2db      	uxtb	r3, r3
 8002426:	2b00      	cmp	r3, #0
 8002428:	d007      	beq.n	800243a <send_dwwtio_update+0x1f6>
    {
        SSD1306_Goto(0, 2);
 800242a:	2102      	movs	r1, #2
 800242c:	2000      	movs	r0, #0
 800242e:	f000 f9f7 	bl	8002820 <SSD1306_Goto>
        SSD1306_Write_String((uint8_t*)"No response!        ");
 8002432:	4818      	ldr	r0, [pc, #96]	; (8002494 <send_dwwtio_update+0x250>)
 8002434:	f000 fa90 	bl	8002958 <SSD1306_Write_String>
 8002438:	e000      	b.n	800243c <send_dwwtio_update+0x1f8>
    }

dweet_close_tcp_con:
 800243a:	bf00      	nop

    cmd.id = AT_CMD_CON_CLOSE;
 800243c:	4b0c      	ldr	r3, [pc, #48]	; (8002470 <send_dwwtio_update+0x22c>)
 800243e:	220f      	movs	r2, #15
 8002440:	701a      	strb	r2, [r3, #0]
    cmd.payload.con_close.channel = 0;
 8002442:	4b0b      	ldr	r3, [pc, #44]	; (8002470 <send_dwwtio_update+0x22c>)
 8002444:	2200      	movs	r2, #0
 8002446:	711a      	strb	r2, [r3, #4]
    at_send_cmd_blocking(&cmd,2000);
 8002448:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800244c:	4808      	ldr	r0, [pc, #32]	; (8002470 <send_dwwtio_update+0x22c>)
 800244e:	f7fe fb11 	bl	8000a74 <at_send_cmd_blocking>

    //hw_serial_tx("AT+GSLP=4000\r\n",14);
    return ret;
 8002452:	7ffb      	ldrb	r3, [r7, #31]
}
 8002454:	4618      	mov	r0, r3
 8002456:	3724      	adds	r7, #36	; 0x24
 8002458:	46bd      	mov	sp, r7
 800245a:	bd90      	pop	{r4, r7, pc}
 800245c:	080071c8 	.word	0x080071c8
 8002460:	42c80000 	.word	0x42c80000
 8002464:	0800719c 	.word	0x0800719c
 8002468:	20000788 	.word	0x20000788
 800246c:	080071d4 	.word	0x080071d4
 8002470:	200006f4 	.word	0x200006f4
 8002474:	08007198 	.word	0x08007198
 8002478:	080071ec 	.word	0x080071ec
 800247c:	08007204 	.word	0x08007204
 8002480:	08007164 	.word	0x08007164
 8002484:	20000070 	.word	0x20000070
 8002488:	20000074 	.word	0x20000074
 800248c:	0800721c 	.word	0x0800721c
 8002490:	08007234 	.word	0x08007234
 8002494:	0800724c 	.word	0x0800724c

08002498 <iot_on>:
{
	wifi_off();
}

int8_t iot_on(void)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	af00      	add	r7, sp, #0
	wifi_on();
 800249c:	f7ff fa5c 	bl	8001958 <wifi_on>
    hw_time_sleep(1000);
 80024a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80024a4:	f7ff f9e6 	bl	8001874 <hw_time_sleep>
    at_init();
 80024a8:	f7fe fac0 	bl	8000a2c <at_init>

    return wifi_startup();
 80024ac:	f7ff fa62 	bl	8001974 <wifi_startup>
 80024b0:	4603      	mov	r3, r0
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	bd80      	pop	{r7, pc}
	...

080024b8 <iot_update>:


bool iot_update(void)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b082      	sub	sp, #8
 80024bc:	af00      	add	r7, sp, #0
	bool ret = false;
 80024be:	2300      	movs	r3, #0
 80024c0:	71fb      	strb	r3, [r7, #7]

	// TODO: check AT+CIPSTATUS (is connected ?)
	switch(mon_get_cloud_id())
 80024c2:	f7ff fa1f 	bl	8001904 <mon_get_cloud_id>
 80024c6:	4603      	mov	r3, r0
 80024c8:	3b01      	subs	r3, #1
 80024ca:	2b03      	cmp	r3, #3
 80024cc:	d81e      	bhi.n	800250c <iot_update+0x54>
 80024ce:	a201      	add	r2, pc, #4	; (adr r2, 80024d4 <iot_update+0x1c>)
 80024d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024d4:	080024e5 	.word	0x080024e5
 80024d8:	080024ef 	.word	0x080024ef
 80024dc:	080024f9 	.word	0x080024f9
 80024e0:	08002503 	.word	0x08002503
	{
	case MON_DWEET_CLOUD_ID:
		ret = send_dwwtio_update();
 80024e4:	f7ff feae 	bl	8002244 <send_dwwtio_update>
 80024e8:	4603      	mov	r3, r0
 80024ea:	71fb      	strb	r3, [r7, #7]
		break;
 80024ec:	e010      	b.n	8002510 <iot_update+0x58>
	case MON_AZURE_CLOUD_ID:
		ret = send_azure_update();
 80024ee:	f7ff fd2b 	bl	8001f48 <send_azure_update>
 80024f2:	4603      	mov	r3, r0
 80024f4:	71fb      	strb	r3, [r7, #7]
		break;
 80024f6:	e00b      	b.n	8002510 <iot_update+0x58>
	case MON_BLUEMIX_CLOUD_ID:
		ret = send_bluemix_update();
 80024f8:	f7ff fb76 	bl	8001be8 <send_bluemix_update>
 80024fc:	4603      	mov	r3, r0
 80024fe:	71fb      	strb	r3, [r7, #7]
		break;
 8002500:	e006      	b.n	8002510 <iot_update+0x58>
	case MON_TSPEAK_CLOUD_ID:
		ret = send_tspeak_update();
 8002502:	f7ff faa9 	bl	8001a58 <send_tspeak_update>
 8002506:	4603      	mov	r3, r0
 8002508:	71fb      	strb	r3, [r7, #7]
		break;
 800250a:	e001      	b.n	8002510 <iot_update+0x58>
	default:
		ret = false;
 800250c:	2300      	movs	r3, #0
 800250e:	71fb      	strb	r3, [r7, #7]
	}

	return ret;
 8002510:	79fb      	ldrb	r3, [r7, #7]
}
 8002512:	4618      	mov	r0, r3
 8002514:	3708      	adds	r7, #8
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop

0800251c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002520:	f000 fd9d 	bl	800305e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002524:	f000 f80b 	bl	800253e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002528:	f000 f8e6 	bl	80026f8 <MX_GPIO_Init>
  MX_I2C2_Init();
 800252c:	f000 f874 	bl	8002618 <MX_I2C2_Init>
  MX_USART2_UART_Init();
 8002530:	f000 f8b2 	bl	8002698 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  app_init();
 8002534:	f7fe fa40 	bl	80009b8 <app_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  app_main();
 8002538:	f7fe fa6e 	bl	8000a18 <app_main>
 800253c:	e7fc      	b.n	8002538 <main+0x1c>

0800253e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800253e:	b580      	push	{r7, lr}
 8002540:	b0ae      	sub	sp, #184	; 0xb8
 8002542:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002544:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002548:	2244      	movs	r2, #68	; 0x44
 800254a:	2100      	movs	r1, #0
 800254c:	4618      	mov	r0, r3
 800254e:	f003 faf7 	bl	8005b40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002552:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002556:	2200      	movs	r2, #0
 8002558:	601a      	str	r2, [r3, #0]
 800255a:	605a      	str	r2, [r3, #4]
 800255c:	609a      	str	r2, [r3, #8]
 800255e:	60da      	str	r2, [r3, #12]
 8002560:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002562:	463b      	mov	r3, r7
 8002564:	2260      	movs	r2, #96	; 0x60
 8002566:	2100      	movs	r1, #0
 8002568:	4618      	mov	r0, r3
 800256a:	f003 fae9 	bl	8005b40 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800256e:	2301      	movs	r3, #1
 8002570:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002572:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002576:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002578:	2302      	movs	r3, #2
 800257a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800257e:	2303      	movs	r3, #3
 8002580:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002584:	2301      	movs	r3, #1
 8002586:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLN = 20;
 800258a:	2314      	movs	r3, #20
 800258c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002590:	2307      	movs	r3, #7
 8002592:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002596:	2302      	movs	r3, #2
 8002598:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800259c:	2302      	movs	r3, #2
 800259e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80025a2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80025a6:	4618      	mov	r0, r3
 80025a8:	f001 fc84 	bl	8003eb4 <HAL_RCC_OscConfig>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d001      	beq.n	80025b6 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80025b2:	f000 f90f 	bl	80027d4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80025b6:	230f      	movs	r3, #15
 80025b8:	663b      	str	r3, [r7, #96]	; 0x60
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80025ba:	2303      	movs	r3, #3
 80025bc:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80025be:	2300      	movs	r3, #0
 80025c0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80025c2:	2300      	movs	r3, #0
 80025c4:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80025c6:	2300      	movs	r3, #0
 80025c8:	673b      	str	r3, [r7, #112]	; 0x70

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80025ca:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80025ce:	2104      	movs	r1, #4
 80025d0:	4618      	mov	r0, r3
 80025d2:	f002 f88f 	bl	80046f4 <HAL_RCC_ClockConfig>
 80025d6:	4603      	mov	r3, r0
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d001      	beq.n	80025e0 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80025dc:	f000 f8fa 	bl	80027d4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C2;
 80025e0:	2382      	movs	r3, #130	; 0x82
 80025e2:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80025e4:	2300      	movs	r3, #0
 80025e6:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80025e8:	2300      	movs	r3, #0
 80025ea:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80025ec:	463b      	mov	r3, r7
 80025ee:	4618      	mov	r0, r3
 80025f0:	f002 fa84 	bl	8004afc <HAL_RCCEx_PeriphCLKConfig>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d001      	beq.n	80025fe <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80025fa:	f000 f8eb 	bl	80027d4 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80025fe:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002602:	f001 fc01 	bl	8003e08 <HAL_PWREx_ControlVoltageScaling>
 8002606:	4603      	mov	r3, r0
 8002608:	2b00      	cmp	r3, #0
 800260a:	d001      	beq.n	8002610 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800260c:	f000 f8e2 	bl	80027d4 <Error_Handler>
  }
}
 8002610:	bf00      	nop
 8002612:	37b8      	adds	r7, #184	; 0xb8
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}

08002618 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800261c:	4b1b      	ldr	r3, [pc, #108]	; (800268c <MX_I2C2_Init+0x74>)
 800261e:	4a1c      	ldr	r2, [pc, #112]	; (8002690 <MX_I2C2_Init+0x78>)
 8002620:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 8002622:	4b1a      	ldr	r3, [pc, #104]	; (800268c <MX_I2C2_Init+0x74>)
 8002624:	4a1b      	ldr	r2, [pc, #108]	; (8002694 <MX_I2C2_Init+0x7c>)
 8002626:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8002628:	4b18      	ldr	r3, [pc, #96]	; (800268c <MX_I2C2_Init+0x74>)
 800262a:	2200      	movs	r2, #0
 800262c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800262e:	4b17      	ldr	r3, [pc, #92]	; (800268c <MX_I2C2_Init+0x74>)
 8002630:	2201      	movs	r2, #1
 8002632:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002634:	4b15      	ldr	r3, [pc, #84]	; (800268c <MX_I2C2_Init+0x74>)
 8002636:	2200      	movs	r2, #0
 8002638:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800263a:	4b14      	ldr	r3, [pc, #80]	; (800268c <MX_I2C2_Init+0x74>)
 800263c:	2200      	movs	r2, #0
 800263e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002640:	4b12      	ldr	r3, [pc, #72]	; (800268c <MX_I2C2_Init+0x74>)
 8002642:	2200      	movs	r2, #0
 8002644:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002646:	4b11      	ldr	r3, [pc, #68]	; (800268c <MX_I2C2_Init+0x74>)
 8002648:	2200      	movs	r2, #0
 800264a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800264c:	4b0f      	ldr	r3, [pc, #60]	; (800268c <MX_I2C2_Init+0x74>)
 800264e:	2200      	movs	r2, #0
 8002650:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002652:	480e      	ldr	r0, [pc, #56]	; (800268c <MX_I2C2_Init+0x74>)
 8002654:	f001 f83a 	bl	80036cc <HAL_I2C_Init>
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	d001      	beq.n	8002662 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800265e:	f000 f8b9 	bl	80027d4 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002662:	2100      	movs	r1, #0
 8002664:	4809      	ldr	r0, [pc, #36]	; (800268c <MX_I2C2_Init+0x74>)
 8002666:	f001 fb29 	bl	8003cbc <HAL_I2CEx_ConfigAnalogFilter>
 800266a:	4603      	mov	r3, r0
 800266c:	2b00      	cmp	r3, #0
 800266e:	d001      	beq.n	8002674 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8002670:	f000 f8b0 	bl	80027d4 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002674:	2100      	movs	r1, #0
 8002676:	4805      	ldr	r0, [pc, #20]	; (800268c <MX_I2C2_Init+0x74>)
 8002678:	f001 fb6b 	bl	8003d52 <HAL_I2CEx_ConfigDigitalFilter>
 800267c:	4603      	mov	r3, r0
 800267e:	2b00      	cmp	r3, #0
 8002680:	d001      	beq.n	8002686 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8002682:	f000 f8a7 	bl	80027d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002686:	bf00      	nop
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	200007ec 	.word	0x200007ec
 8002690:	40005800 	.word	0x40005800
 8002694:	10909cec 	.word	0x10909cec

08002698 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800269c:	4b14      	ldr	r3, [pc, #80]	; (80026f0 <MX_USART2_UART_Init+0x58>)
 800269e:	4a15      	ldr	r2, [pc, #84]	; (80026f4 <MX_USART2_UART_Init+0x5c>)
 80026a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80026a2:	4b13      	ldr	r3, [pc, #76]	; (80026f0 <MX_USART2_UART_Init+0x58>)
 80026a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80026a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80026aa:	4b11      	ldr	r3, [pc, #68]	; (80026f0 <MX_USART2_UART_Init+0x58>)
 80026ac:	2200      	movs	r2, #0
 80026ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80026b0:	4b0f      	ldr	r3, [pc, #60]	; (80026f0 <MX_USART2_UART_Init+0x58>)
 80026b2:	2200      	movs	r2, #0
 80026b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80026b6:	4b0e      	ldr	r3, [pc, #56]	; (80026f0 <MX_USART2_UART_Init+0x58>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80026bc:	4b0c      	ldr	r3, [pc, #48]	; (80026f0 <MX_USART2_UART_Init+0x58>)
 80026be:	220c      	movs	r2, #12
 80026c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026c2:	4b0b      	ldr	r3, [pc, #44]	; (80026f0 <MX_USART2_UART_Init+0x58>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80026c8:	4b09      	ldr	r3, [pc, #36]	; (80026f0 <MX_USART2_UART_Init+0x58>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80026ce:	4b08      	ldr	r3, [pc, #32]	; (80026f0 <MX_USART2_UART_Init+0x58>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80026d4:	4b06      	ldr	r3, [pc, #24]	; (80026f0 <MX_USART2_UART_Init+0x58>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80026da:	4805      	ldr	r0, [pc, #20]	; (80026f0 <MX_USART2_UART_Init+0x58>)
 80026dc:	f002 fd42 	bl	8005164 <HAL_UART_Init>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d001      	beq.n	80026ea <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80026e6:	f000 f875 	bl	80027d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80026ea:	bf00      	nop
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	20000708 	.word	0x20000708
 80026f4:	40004400 	.word	0x40004400

080026f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b08a      	sub	sp, #40	; 0x28
 80026fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026fe:	f107 0314 	add.w	r3, r7, #20
 8002702:	2200      	movs	r2, #0
 8002704:	601a      	str	r2, [r3, #0]
 8002706:	605a      	str	r2, [r3, #4]
 8002708:	609a      	str	r2, [r3, #8]
 800270a:	60da      	str	r2, [r3, #12]
 800270c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800270e:	4b2f      	ldr	r3, [pc, #188]	; (80027cc <MX_GPIO_Init+0xd4>)
 8002710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002712:	4a2e      	ldr	r2, [pc, #184]	; (80027cc <MX_GPIO_Init+0xd4>)
 8002714:	f043 0304 	orr.w	r3, r3, #4
 8002718:	64d3      	str	r3, [r2, #76]	; 0x4c
 800271a:	4b2c      	ldr	r3, [pc, #176]	; (80027cc <MX_GPIO_Init+0xd4>)
 800271c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800271e:	f003 0304 	and.w	r3, r3, #4
 8002722:	613b      	str	r3, [r7, #16]
 8002724:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002726:	4b29      	ldr	r3, [pc, #164]	; (80027cc <MX_GPIO_Init+0xd4>)
 8002728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800272a:	4a28      	ldr	r2, [pc, #160]	; (80027cc <MX_GPIO_Init+0xd4>)
 800272c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002730:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002732:	4b26      	ldr	r3, [pc, #152]	; (80027cc <MX_GPIO_Init+0xd4>)
 8002734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002736:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800273a:	60fb      	str	r3, [r7, #12]
 800273c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800273e:	4b23      	ldr	r3, [pc, #140]	; (80027cc <MX_GPIO_Init+0xd4>)
 8002740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002742:	4a22      	ldr	r2, [pc, #136]	; (80027cc <MX_GPIO_Init+0xd4>)
 8002744:	f043 0301 	orr.w	r3, r3, #1
 8002748:	64d3      	str	r3, [r2, #76]	; 0x4c
 800274a:	4b20      	ldr	r3, [pc, #128]	; (80027cc <MX_GPIO_Init+0xd4>)
 800274c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800274e:	f003 0301 	and.w	r3, r3, #1
 8002752:	60bb      	str	r3, [r7, #8]
 8002754:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002756:	4b1d      	ldr	r3, [pc, #116]	; (80027cc <MX_GPIO_Init+0xd4>)
 8002758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800275a:	4a1c      	ldr	r2, [pc, #112]	; (80027cc <MX_GPIO_Init+0xd4>)
 800275c:	f043 0302 	orr.w	r3, r3, #2
 8002760:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002762:	4b1a      	ldr	r3, [pc, #104]	; (80027cc <MX_GPIO_Init+0xd4>)
 8002764:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002766:	f003 0302 	and.w	r3, r3, #2
 800276a:	607b      	str	r3, [r7, #4]
 800276c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP_EN_GPIO_Port, ESP_EN_Pin, GPIO_PIN_RESET);
 800276e:	2200      	movs	r2, #0
 8002770:	2120      	movs	r1, #32
 8002772:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002776:	f000 ff91 	bl	800369c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP_POWER_EN_GPIO_Port, ESP_POWER_EN_Pin, GPIO_PIN_SET);
 800277a:	2201      	movs	r2, #1
 800277c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002780:	4813      	ldr	r0, [pc, #76]	; (80027d0 <MX_GPIO_Init+0xd8>)
 8002782:	f000 ff8b 	bl	800369c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ESP_EN_Pin */
  GPIO_InitStruct.Pin = ESP_EN_Pin;
 8002786:	2320      	movs	r3, #32
 8002788:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800278a:	2301      	movs	r3, #1
 800278c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800278e:	2300      	movs	r3, #0
 8002790:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002792:	2300      	movs	r3, #0
 8002794:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ESP_EN_GPIO_Port, &GPIO_InitStruct);
 8002796:	f107 0314 	add.w	r3, r7, #20
 800279a:	4619      	mov	r1, r3
 800279c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027a0:	f000 fe02 	bl	80033a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ESP_POWER_EN_Pin */
  GPIO_InitStruct.Pin = ESP_POWER_EN_Pin;
 80027a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80027a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027aa:	2301      	movs	r3, #1
 80027ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ae:	2300      	movs	r3, #0
 80027b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027b2:	2300      	movs	r3, #0
 80027b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ESP_POWER_EN_GPIO_Port, &GPIO_InitStruct);
 80027b6:	f107 0314 	add.w	r3, r7, #20
 80027ba:	4619      	mov	r1, r3
 80027bc:	4804      	ldr	r0, [pc, #16]	; (80027d0 <MX_GPIO_Init+0xd8>)
 80027be:	f000 fdf3 	bl	80033a8 <HAL_GPIO_Init>

}
 80027c2:	bf00      	nop
 80027c4:	3728      	adds	r7, #40	; 0x28
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	40021000 	.word	0x40021000
 80027d0:	48000400 	.word	0x48000400

080027d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80027d4:	b480      	push	{r7}
 80027d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80027d8:	bf00      	nop
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr
	...

080027e4 <SSD1306_Write_Command>:

#define SSD1306_I2C       &hi2c2
#define SSD1306_I2C_ADDR  (0x78)

uint8_t SSD1306_Write_Command(uint8_t command)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b086      	sub	sp, #24
 80027e8:	af02      	add	r7, sp, #8
 80027ea:	4603      	mov	r3, r0
 80027ec:	71fb      	strb	r3, [r7, #7]
	uint8_t data[2] = {0x00, command};
 80027ee:	2300      	movs	r3, #0
 80027f0:	733b      	strb	r3, [r7, #12]
 80027f2:	79fb      	ldrb	r3, [r7, #7]
 80027f4:	737b      	strb	r3, [r7, #13]

    if(HAL_I2C_Master_Transmit(SSD1306_I2C, SSD1306_I2C_ADDR, data, 2, 2) != HAL_OK)
 80027f6:	f107 020c 	add.w	r2, r7, #12
 80027fa:	2302      	movs	r3, #2
 80027fc:	9300      	str	r3, [sp, #0]
 80027fe:	2302      	movs	r3, #2
 8002800:	2178      	movs	r1, #120	; 0x78
 8002802:	4806      	ldr	r0, [pc, #24]	; (800281c <SSD1306_Write_Command+0x38>)
 8002804:	f000 fff2 	bl	80037ec <HAL_I2C_Master_Transmit>
 8002808:	4603      	mov	r3, r0
 800280a:	2b00      	cmp	r3, #0
 800280c:	d001      	beq.n	8002812 <SSD1306_Write_Command+0x2e>
        return 0;
 800280e:	2300      	movs	r3, #0
 8002810:	e000      	b.n	8002814 <SSD1306_Write_Command+0x30>
    else
        return 1;
 8002812:	2301      	movs	r3, #1
}
 8002814:	4618      	mov	r0, r3
 8002816:	3710      	adds	r7, #16
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}
 800281c:	200007ec 	.word	0x200007ec

08002820 <SSD1306_Goto>:
    else
        return 1;
}

void SSD1306_Goto(uint8_t col, uint8_t row)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b082      	sub	sp, #8
 8002824:	af00      	add	r7, sp, #0
 8002826:	4603      	mov	r3, r0
 8002828:	460a      	mov	r2, r1
 800282a:	71fb      	strb	r3, [r7, #7]
 800282c:	4613      	mov	r3, r2
 800282e:	71bb      	strb	r3, [r7, #6]
	if(row >= SSD1306_HEIGHT/8)
 8002830:	79bb      	ldrb	r3, [r7, #6]
 8002832:	2b07      	cmp	r3, #7
 8002834:	d901      	bls.n	800283a <SSD1306_Goto+0x1a>
		row = SSD1306_HEIGHT/8 - 1;
 8002836:	2307      	movs	r3, #7
 8002838:	71bb      	strb	r3, [r7, #6]

	if(col >= SSD1306_WIDTH)
 800283a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800283e:	2b00      	cmp	r3, #0
 8002840:	da01      	bge.n	8002846 <SSD1306_Goto+0x26>
		col = SSD1306_WIDTH - 1;
 8002842:	237f      	movs	r3, #127	; 0x7f
 8002844:	71fb      	strb	r3, [r7, #7]

	SSD1306_Write_Command(0xB0 | row);
 8002846:	79bb      	ldrb	r3, [r7, #6]
 8002848:	f063 034f 	orn	r3, r3, #79	; 0x4f
 800284c:	b2db      	uxtb	r3, r3
 800284e:	4618      	mov	r0, r3
 8002850:	f7ff ffc8 	bl	80027e4 <SSD1306_Write_Command>
	SSD1306_Write_Command(0x00 | (col & 0x0F));
 8002854:	79fb      	ldrb	r3, [r7, #7]
 8002856:	f003 030f 	and.w	r3, r3, #15
 800285a:	b2db      	uxtb	r3, r3
 800285c:	4618      	mov	r0, r3
 800285e:	f7ff ffc1 	bl	80027e4 <SSD1306_Write_Command>
	SSD1306_Write_Command(0x10 | (col >> 4));
 8002862:	79fb      	ldrb	r3, [r7, #7]
 8002864:	091b      	lsrs	r3, r3, #4
 8002866:	b2db      	uxtb	r3, r3
 8002868:	f043 0310 	orr.w	r3, r3, #16
 800286c:	b2db      	uxtb	r3, r3
 800286e:	4618      	mov	r0, r3
 8002870:	f7ff ffb8 	bl	80027e4 <SSD1306_Write_Command>
}
 8002874:	bf00      	nop
 8002876:	3708      	adds	r7, #8
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}

0800287c <SSD1306_Write_Char>:

void SSD1306_Write_Char(uint8_t c, SSD1306_Font_t* font)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b08a      	sub	sp, #40	; 0x28
 8002880:	af02      	add	r7, sp, #8
 8002882:	4603      	mov	r3, r0
 8002884:	6039      	str	r1, [r7, #0]
 8002886:	71fb      	strb	r3, [r7, #7]
	const uint8_t *base;
	uint8_t width, n;
	uint8_t data[16];

	if(c < 32 || c > 127)
 8002888:	79fb      	ldrb	r3, [r7, #7]
 800288a:	2b1f      	cmp	r3, #31
 800288c:	d903      	bls.n	8002896 <SSD1306_Write_Char+0x1a>
 800288e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002892:	2b00      	cmp	r3, #0
 8002894:	da01      	bge.n	800289a <SSD1306_Write_Char+0x1e>
		c = 127;
 8002896:	237f      	movs	r3, #127	; 0x7f
 8002898:	71fb      	strb	r3, [r7, #7]

	c -= 32;
 800289a:	79fb      	ldrb	r3, [r7, #7]
 800289c:	3b20      	subs	r3, #32
 800289e:	71fb      	strb	r3, [r7, #7]

	width = font->width;
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	781b      	ldrb	r3, [r3, #0]
 80028a4:	77bb      	strb	r3, [r7, #30]
	data[0] = 0x40;
 80028a6:	2340      	movs	r3, #64	; 0x40
 80028a8:	723b      	strb	r3, [r7, #8]
	base = font->data + width*c;
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	7fba      	ldrb	r2, [r7, #30]
 80028b0:	79f9      	ldrb	r1, [r7, #7]
 80028b2:	fb01 f202 	mul.w	r2, r1, r2
 80028b6:	4413      	add	r3, r2
 80028b8:	61bb      	str	r3, [r7, #24]
	for(n = 0 ; n < width ; n++)
 80028ba:	2300      	movs	r3, #0
 80028bc:	77fb      	strb	r3, [r7, #31]
 80028be:	e00d      	b.n	80028dc <SSD1306_Write_Char+0x60>
		data[1+n] = base[n];
 80028c0:	7ffb      	ldrb	r3, [r7, #31]
 80028c2:	69ba      	ldr	r2, [r7, #24]
 80028c4:	441a      	add	r2, r3
 80028c6:	7ffb      	ldrb	r3, [r7, #31]
 80028c8:	3301      	adds	r3, #1
 80028ca:	7812      	ldrb	r2, [r2, #0]
 80028cc:	f107 0120 	add.w	r1, r7, #32
 80028d0:	440b      	add	r3, r1
 80028d2:	f803 2c18 	strb.w	r2, [r3, #-24]
	for(n = 0 ; n < width ; n++)
 80028d6:	7ffb      	ldrb	r3, [r7, #31]
 80028d8:	3301      	adds	r3, #1
 80028da:	77fb      	strb	r3, [r7, #31]
 80028dc:	7ffa      	ldrb	r2, [r7, #31]
 80028de:	7fbb      	ldrb	r3, [r7, #30]
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d3ed      	bcc.n	80028c0 <SSD1306_Write_Char+0x44>

	data[width+1] = 0x00;
 80028e4:	7fbb      	ldrb	r3, [r7, #30]
 80028e6:	3301      	adds	r3, #1
 80028e8:	f107 0220 	add.w	r2, r7, #32
 80028ec:	4413      	add	r3, r2
 80028ee:	2200      	movs	r2, #0
 80028f0:	f803 2c18 	strb.w	r2, [r3, #-24]

	HAL_I2C_Master_Transmit(SSD1306_I2C,SSD1306_I2C_ADDR, data, width+2, 10);
 80028f4:	7fbb      	ldrb	r3, [r7, #30]
 80028f6:	b29b      	uxth	r3, r3
 80028f8:	3302      	adds	r3, #2
 80028fa:	b299      	uxth	r1, r3
 80028fc:	f107 0208 	add.w	r2, r7, #8
 8002900:	230a      	movs	r3, #10
 8002902:	9300      	str	r3, [sp, #0]
 8002904:	460b      	mov	r3, r1
 8002906:	2178      	movs	r1, #120	; 0x78
 8002908:	4803      	ldr	r0, [pc, #12]	; (8002918 <SSD1306_Write_Char+0x9c>)
 800290a:	f000 ff6f 	bl	80037ec <HAL_I2C_Master_Transmit>
}
 800290e:	bf00      	nop
 8002910:	3720      	adds	r7, #32
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	200007ec 	.word	0x200007ec

0800291c <SSD1306_Write_Buffer>:

void SSD1306_Write_Buffer(uint8_t *str, uint8_t size, SSD1306_Font_t* font)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b086      	sub	sp, #24
 8002920:	af00      	add	r7, sp, #0
 8002922:	60f8      	str	r0, [r7, #12]
 8002924:	460b      	mov	r3, r1
 8002926:	607a      	str	r2, [r7, #4]
 8002928:	72fb      	strb	r3, [r7, #11]
	uint8_t  n;
	for(n = 0 ; n < size ; n++)
 800292a:	2300      	movs	r3, #0
 800292c:	75fb      	strb	r3, [r7, #23]
 800292e:	e00a      	b.n	8002946 <SSD1306_Write_Buffer+0x2a>
		SSD1306_Write_Char(str[n],font);
 8002930:	7dfb      	ldrb	r3, [r7, #23]
 8002932:	68fa      	ldr	r2, [r7, #12]
 8002934:	4413      	add	r3, r2
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	6879      	ldr	r1, [r7, #4]
 800293a:	4618      	mov	r0, r3
 800293c:	f7ff ff9e 	bl	800287c <SSD1306_Write_Char>
	for(n = 0 ; n < size ; n++)
 8002940:	7dfb      	ldrb	r3, [r7, #23]
 8002942:	3301      	adds	r3, #1
 8002944:	75fb      	strb	r3, [r7, #23]
 8002946:	7dfa      	ldrb	r2, [r7, #23]
 8002948:	7afb      	ldrb	r3, [r7, #11]
 800294a:	429a      	cmp	r2, r3
 800294c:	d3f0      	bcc.n	8002930 <SSD1306_Write_Buffer+0x14>
}
 800294e:	bf00      	nop
 8002950:	3718      	adds	r7, #24
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
	...

08002958 <SSD1306_Write_String>:

void SSD1306_Write_String(uint8_t *str)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b082      	sub	sp, #8
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
	SSD1306_Write_Buffer(str,strlen((char *)str),&SSD1306_Font_07X05);
 8002960:	6878      	ldr	r0, [r7, #4]
 8002962:	f7fd fc3f 	bl	80001e4 <strlen>
 8002966:	4603      	mov	r3, r0
 8002968:	b2db      	uxtb	r3, r3
 800296a:	4a04      	ldr	r2, [pc, #16]	; (800297c <SSD1306_Write_String+0x24>)
 800296c:	4619      	mov	r1, r3
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f7ff ffd4 	bl	800291c <SSD1306_Write_Buffer>
}
 8002974:	bf00      	nop
 8002976:	3708      	adds	r7, #8
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}
 800297c:	200000a0 	.word	0x200000a0

08002980 <SSD1306_Write_Centered_String>:

void SSD1306_Write_Centered_String(uint8_t *str, uint8_t row)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b084      	sub	sp, #16
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
 8002988:	460b      	mov	r3, r1
 800298a:	70fb      	strb	r3, [r7, #3]
	int16_t col = (SSD1306_WIDTH - strlen((char *)str)*6)/2;
 800298c:	6878      	ldr	r0, [r7, #4]
 800298e:	f7fd fc29 	bl	80001e4 <strlen>
 8002992:	4602      	mov	r2, r0
 8002994:	4613      	mov	r3, r2
 8002996:	005b      	lsls	r3, r3, #1
 8002998:	4413      	add	r3, r2
 800299a:	005b      	lsls	r3, r3, #1
 800299c:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80029a0:	085b      	lsrs	r3, r3, #1
 80029a2:	81fb      	strh	r3, [r7, #14]
	col = col < 0 ? 0 : col;
 80029a4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80029a8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80029ac:	81fb      	strh	r3, [r7, #14]
	SSD1306_Goto(col,row);
 80029ae:	89fb      	ldrh	r3, [r7, #14]
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	78fa      	ldrb	r2, [r7, #3]
 80029b4:	4611      	mov	r1, r2
 80029b6:	4618      	mov	r0, r3
 80029b8:	f7ff ff32 	bl	8002820 <SSD1306_Goto>
	SSD1306_Write_String(str);
 80029bc:	6878      	ldr	r0, [r7, #4]
 80029be:	f7ff ffcb 	bl	8002958 <SSD1306_Write_String>
}
 80029c2:	bf00      	nop
 80029c4:	3710      	adds	r7, #16
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
	...

080029cc <SDD1306_Clear_Screen>:

void SDD1306_Clear_Screen(void)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b088      	sub	sp, #32
 80029d0:	af02      	add	r7, sp, #8
	uint8_t n,m;
	uint8_t data[] = {0x40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
 80029d2:	1d3b      	adds	r3, r7, #4
 80029d4:	2200      	movs	r2, #0
 80029d6:	601a      	str	r2, [r3, #0]
 80029d8:	605a      	str	r2, [r3, #4]
 80029da:	609a      	str	r2, [r3, #8]
 80029dc:	60da      	str	r2, [r3, #12]
 80029de:	741a      	strb	r2, [r3, #16]
 80029e0:	2340      	movs	r3, #64	; 0x40
 80029e2:	713b      	strb	r3, [r7, #4]

	SSD1306_Goto(0,0);
 80029e4:	2100      	movs	r1, #0
 80029e6:	2000      	movs	r0, #0
 80029e8:	f7ff ff1a 	bl	8002820 <SSD1306_Goto>

	for(n = 0 ; n < SSD1306_HEIGHT/8 ; n++)
 80029ec:	2300      	movs	r3, #0
 80029ee:	75fb      	strb	r3, [r7, #23]
 80029f0:	e013      	b.n	8002a1a <SDD1306_Clear_Screen+0x4e>
		for(m = 0 ; m < SSD1306_WIDTH/16 ; m++)
 80029f2:	2300      	movs	r3, #0
 80029f4:	75bb      	strb	r3, [r7, #22]
 80029f6:	e00a      	b.n	8002a0e <SDD1306_Clear_Screen+0x42>
			HAL_I2C_Master_Transmit(SSD1306_I2C,SSD1306_I2C_ADDR, data, 17, 10);
 80029f8:	1d3a      	adds	r2, r7, #4
 80029fa:	230a      	movs	r3, #10
 80029fc:	9300      	str	r3, [sp, #0]
 80029fe:	2311      	movs	r3, #17
 8002a00:	2178      	movs	r1, #120	; 0x78
 8002a02:	4809      	ldr	r0, [pc, #36]	; (8002a28 <SDD1306_Clear_Screen+0x5c>)
 8002a04:	f000 fef2 	bl	80037ec <HAL_I2C_Master_Transmit>
		for(m = 0 ; m < SSD1306_WIDTH/16 ; m++)
 8002a08:	7dbb      	ldrb	r3, [r7, #22]
 8002a0a:	3301      	adds	r3, #1
 8002a0c:	75bb      	strb	r3, [r7, #22]
 8002a0e:	7dbb      	ldrb	r3, [r7, #22]
 8002a10:	2b07      	cmp	r3, #7
 8002a12:	d9f1      	bls.n	80029f8 <SDD1306_Clear_Screen+0x2c>
	for(n = 0 ; n < SSD1306_HEIGHT/8 ; n++)
 8002a14:	7dfb      	ldrb	r3, [r7, #23]
 8002a16:	3301      	adds	r3, #1
 8002a18:	75fb      	strb	r3, [r7, #23]
 8002a1a:	7dfb      	ldrb	r3, [r7, #23]
 8002a1c:	2b07      	cmp	r3, #7
 8002a1e:	d9e8      	bls.n	80029f2 <SDD1306_Clear_Screen+0x26>
}
 8002a20:	bf00      	nop
 8002a22:	3718      	adds	r7, #24
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	200007ec 	.word	0x200007ec

08002a2c <SSD1306_Init>:

uint8_t SSD1306_Init(void)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	af00      	add	r7, sp, #0
	
	HAL_Delay(100);
 8002a30:	2064      	movs	r0, #100	; 0x64
 8002a32:	f000 fb85 	bl	8003140 <HAL_Delay>

	SSD1306_Write_Command(0xAE); //display off
 8002a36:	20ae      	movs	r0, #174	; 0xae
 8002a38:	f7ff fed4 	bl	80027e4 <SSD1306_Write_Command>
	SSD1306_Write_Command(0x20); //Set Memory Addressing Mode
 8002a3c:	2020      	movs	r0, #32
 8002a3e:	f7ff fed1 	bl	80027e4 <SSD1306_Write_Command>
	SSD1306_Write_Command(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8002a42:	2010      	movs	r0, #16
 8002a44:	f7ff fece 	bl	80027e4 <SSD1306_Write_Command>
	SSD1306_Write_Command(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002a48:	20b0      	movs	r0, #176	; 0xb0
 8002a4a:	f7ff fecb 	bl	80027e4 <SSD1306_Write_Command>
	SSD1306_Write_Command(0xC8); //Set COM Output Scan Direction
 8002a4e:	20c8      	movs	r0, #200	; 0xc8
 8002a50:	f7ff fec8 	bl	80027e4 <SSD1306_Write_Command>
	SSD1306_Write_Command(0x00); //---set low column address
 8002a54:	2000      	movs	r0, #0
 8002a56:	f7ff fec5 	bl	80027e4 <SSD1306_Write_Command>
	SSD1306_Write_Command(0x10); //---set high column address
 8002a5a:	2010      	movs	r0, #16
 8002a5c:	f7ff fec2 	bl	80027e4 <SSD1306_Write_Command>
	SSD1306_Write_Command(0x40); //--set start line address
 8002a60:	2040      	movs	r0, #64	; 0x40
 8002a62:	f7ff febf 	bl	80027e4 <SSD1306_Write_Command>
	SSD1306_Write_Command(0x81); //--set contrast control register
 8002a66:	2081      	movs	r0, #129	; 0x81
 8002a68:	f7ff febc 	bl	80027e4 <SSD1306_Write_Command>
	SSD1306_Write_Command(0xFF);
 8002a6c:	20ff      	movs	r0, #255	; 0xff
 8002a6e:	f7ff feb9 	bl	80027e4 <SSD1306_Write_Command>
	SSD1306_Write_Command(0xA1); //--set segment re-map 0 to 127
 8002a72:	20a1      	movs	r0, #161	; 0xa1
 8002a74:	f7ff feb6 	bl	80027e4 <SSD1306_Write_Command>
	SSD1306_Write_Command(0xA6); //--set normal display
 8002a78:	20a6      	movs	r0, #166	; 0xa6
 8002a7a:	f7ff feb3 	bl	80027e4 <SSD1306_Write_Command>
	SSD1306_Write_Command(0xA8); //--set multiplex ratio(1 to 64)
 8002a7e:	20a8      	movs	r0, #168	; 0xa8
 8002a80:	f7ff feb0 	bl	80027e4 <SSD1306_Write_Command>
	SSD1306_Write_Command(0x3F); //
 8002a84:	203f      	movs	r0, #63	; 0x3f
 8002a86:	f7ff fead 	bl	80027e4 <SSD1306_Write_Command>
	SSD1306_Write_Command(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002a8a:	20a4      	movs	r0, #164	; 0xa4
 8002a8c:	f7ff feaa 	bl	80027e4 <SSD1306_Write_Command>
	SSD1306_Write_Command(0xD3); //-set display offset
 8002a90:	20d3      	movs	r0, #211	; 0xd3
 8002a92:	f7ff fea7 	bl	80027e4 <SSD1306_Write_Command>
	SSD1306_Write_Command(0x00); //-not offset
 8002a96:	2000      	movs	r0, #0
 8002a98:	f7ff fea4 	bl	80027e4 <SSD1306_Write_Command>
	SSD1306_Write_Command(0xD5); //--set display clock divide ratio/oscillator frequency
 8002a9c:	20d5      	movs	r0, #213	; 0xd5
 8002a9e:	f7ff fea1 	bl	80027e4 <SSD1306_Write_Command>
	SSD1306_Write_Command(0xf0); //--set divide ratio 0xF0
 8002aa2:	20f0      	movs	r0, #240	; 0xf0
 8002aa4:	f7ff fe9e 	bl	80027e4 <SSD1306_Write_Command>
	SSD1306_Write_Command(0xD9); //--set pre-charge period
 8002aa8:	20d9      	movs	r0, #217	; 0xd9
 8002aaa:	f7ff fe9b 	bl	80027e4 <SSD1306_Write_Command>
	SSD1306_Write_Command(0x22); //
 8002aae:	2022      	movs	r0, #34	; 0x22
 8002ab0:	f7ff fe98 	bl	80027e4 <SSD1306_Write_Command>
	SSD1306_Write_Command(0xDA); //--set com pins hardware configuration
 8002ab4:	20da      	movs	r0, #218	; 0xda
 8002ab6:	f7ff fe95 	bl	80027e4 <SSD1306_Write_Command>
	SSD1306_Write_Command(0x12);
 8002aba:	2012      	movs	r0, #18
 8002abc:	f7ff fe92 	bl	80027e4 <SSD1306_Write_Command>
	SSD1306_Write_Command(0xDB); //--set vcomh
 8002ac0:	20db      	movs	r0, #219	; 0xdb
 8002ac2:	f7ff fe8f 	bl	80027e4 <SSD1306_Write_Command>
	SSD1306_Write_Command(0x20); //0x20,0.77xVcc,
 8002ac6:	2020      	movs	r0, #32
 8002ac8:	f7ff fe8c 	bl	80027e4 <SSD1306_Write_Command>
	SSD1306_Write_Command(0x8D); //--set DC-DC enable
 8002acc:	208d      	movs	r0, #141	; 0x8d
 8002ace:	f7ff fe89 	bl	80027e4 <SSD1306_Write_Command>
	SSD1306_Write_Command(0x14); //
 8002ad2:	2014      	movs	r0, #20
 8002ad4:	f7ff fe86 	bl	80027e4 <SSD1306_Write_Command>
	SSD1306_Write_Command(0xAF); //--turn on SSD1306 panel
 8002ad8:	20af      	movs	r0, #175	; 0xaf
 8002ada:	f7ff fe83 	bl	80027e4 <SSD1306_Write_Command>

	SDD1306_Clear_Screen();
 8002ade:	f7ff ff75 	bl	80029cc <SDD1306_Clear_Screen>
	
	return 1;
 8002ae2:	2301      	movs	r3, #1
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	bd80      	pop	{r7, pc}

08002ae8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b082      	sub	sp, #8
 8002aec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002aee:	4b11      	ldr	r3, [pc, #68]	; (8002b34 <HAL_MspInit+0x4c>)
 8002af0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002af2:	4a10      	ldr	r2, [pc, #64]	; (8002b34 <HAL_MspInit+0x4c>)
 8002af4:	f043 0301 	orr.w	r3, r3, #1
 8002af8:	6613      	str	r3, [r2, #96]	; 0x60
 8002afa:	4b0e      	ldr	r3, [pc, #56]	; (8002b34 <HAL_MspInit+0x4c>)
 8002afc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002afe:	f003 0301 	and.w	r3, r3, #1
 8002b02:	607b      	str	r3, [r7, #4]
 8002b04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b06:	4b0b      	ldr	r3, [pc, #44]	; (8002b34 <HAL_MspInit+0x4c>)
 8002b08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b0a:	4a0a      	ldr	r2, [pc, #40]	; (8002b34 <HAL_MspInit+0x4c>)
 8002b0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b10:	6593      	str	r3, [r2, #88]	; 0x58
 8002b12:	4b08      	ldr	r3, [pc, #32]	; (8002b34 <HAL_MspInit+0x4c>)
 8002b14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b1a:	603b      	str	r3, [r7, #0]
 8002b1c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 2, 0);
 8002b1e:	2200      	movs	r2, #0
 8002b20:	2102      	movs	r1, #2
 8002b22:	f06f 0001 	mvn.w	r0, #1
 8002b26:	f000 fc08 	bl	800333a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b2a:	bf00      	nop
 8002b2c:	3708      	adds	r7, #8
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	40021000 	.word	0x40021000

08002b38 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b08a      	sub	sp, #40	; 0x28
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b40:	f107 0314 	add.w	r3, r7, #20
 8002b44:	2200      	movs	r2, #0
 8002b46:	601a      	str	r2, [r3, #0]
 8002b48:	605a      	str	r2, [r3, #4]
 8002b4a:	609a      	str	r2, [r3, #8]
 8002b4c:	60da      	str	r2, [r3, #12]
 8002b4e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a17      	ldr	r2, [pc, #92]	; (8002bb4 <HAL_I2C_MspInit+0x7c>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d128      	bne.n	8002bac <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b5a:	4b17      	ldr	r3, [pc, #92]	; (8002bb8 <HAL_I2C_MspInit+0x80>)
 8002b5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b5e:	4a16      	ldr	r2, [pc, #88]	; (8002bb8 <HAL_I2C_MspInit+0x80>)
 8002b60:	f043 0302 	orr.w	r3, r3, #2
 8002b64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b66:	4b14      	ldr	r3, [pc, #80]	; (8002bb8 <HAL_I2C_MspInit+0x80>)
 8002b68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b6a:	f003 0302 	and.w	r3, r3, #2
 8002b6e:	613b      	str	r3, [r7, #16]
 8002b70:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration    
    PB11     ------> I2C2_SDA
    PB13     ------> I2C2_SCL 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8002b72:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8002b76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b78:	2312      	movs	r3, #18
 8002b7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b80:	2303      	movs	r3, #3
 8002b82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002b84:	2304      	movs	r3, #4
 8002b86:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b88:	f107 0314 	add.w	r3, r7, #20
 8002b8c:	4619      	mov	r1, r3
 8002b8e:	480b      	ldr	r0, [pc, #44]	; (8002bbc <HAL_I2C_MspInit+0x84>)
 8002b90:	f000 fc0a 	bl	80033a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002b94:	4b08      	ldr	r3, [pc, #32]	; (8002bb8 <HAL_I2C_MspInit+0x80>)
 8002b96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b98:	4a07      	ldr	r2, [pc, #28]	; (8002bb8 <HAL_I2C_MspInit+0x80>)
 8002b9a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002b9e:	6593      	str	r3, [r2, #88]	; 0x58
 8002ba0:	4b05      	ldr	r3, [pc, #20]	; (8002bb8 <HAL_I2C_MspInit+0x80>)
 8002ba2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ba4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ba8:	60fb      	str	r3, [r7, #12]
 8002baa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002bac:	bf00      	nop
 8002bae:	3728      	adds	r7, #40	; 0x28
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}
 8002bb4:	40005800 	.word	0x40005800
 8002bb8:	40021000 	.word	0x40021000
 8002bbc:	48000400 	.word	0x48000400

08002bc0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b08a      	sub	sp, #40	; 0x28
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bc8:	f107 0314 	add.w	r3, r7, #20
 8002bcc:	2200      	movs	r2, #0
 8002bce:	601a      	str	r2, [r3, #0]
 8002bd0:	605a      	str	r2, [r3, #4]
 8002bd2:	609a      	str	r2, [r3, #8]
 8002bd4:	60da      	str	r2, [r3, #12]
 8002bd6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a1b      	ldr	r2, [pc, #108]	; (8002c4c <HAL_UART_MspInit+0x8c>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d130      	bne.n	8002c44 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002be2:	4b1b      	ldr	r3, [pc, #108]	; (8002c50 <HAL_UART_MspInit+0x90>)
 8002be4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002be6:	4a1a      	ldr	r2, [pc, #104]	; (8002c50 <HAL_UART_MspInit+0x90>)
 8002be8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bec:	6593      	str	r3, [r2, #88]	; 0x58
 8002bee:	4b18      	ldr	r3, [pc, #96]	; (8002c50 <HAL_UART_MspInit+0x90>)
 8002bf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bf6:	613b      	str	r3, [r7, #16]
 8002bf8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bfa:	4b15      	ldr	r3, [pc, #84]	; (8002c50 <HAL_UART_MspInit+0x90>)
 8002bfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bfe:	4a14      	ldr	r2, [pc, #80]	; (8002c50 <HAL_UART_MspInit+0x90>)
 8002c00:	f043 0301 	orr.w	r3, r3, #1
 8002c04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c06:	4b12      	ldr	r3, [pc, #72]	; (8002c50 <HAL_UART_MspInit+0x90>)
 8002c08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c0a:	f003 0301 	and.w	r3, r3, #1
 8002c0e:	60fb      	str	r3, [r7, #12]
 8002c10:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002c12:	230c      	movs	r3, #12
 8002c14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c16:	2302      	movs	r3, #2
 8002c18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002c22:	2307      	movs	r3, #7
 8002c24:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c26:	f107 0314 	add.w	r3, r7, #20
 8002c2a:	4619      	mov	r1, r3
 8002c2c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c30:	f000 fbba 	bl	80033a8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 8002c34:	2200      	movs	r2, #0
 8002c36:	2101      	movs	r1, #1
 8002c38:	2026      	movs	r0, #38	; 0x26
 8002c3a:	f000 fb7e 	bl	800333a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002c3e:	2026      	movs	r0, #38	; 0x26
 8002c40:	f000 fb97 	bl	8003372 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002c44:	bf00      	nop
 8002c46:	3728      	adds	r7, #40	; 0x28
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}
 8002c4c:	40004400 	.word	0x40004400
 8002c50:	40021000 	.word	0x40021000

08002c54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c54:	b480      	push	{r7}
 8002c56:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002c58:	bf00      	nop
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr

08002c62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c62:	b480      	push	{r7}
 8002c64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c66:	e7fe      	b.n	8002c66 <HardFault_Handler+0x4>

08002c68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c6c:	e7fe      	b.n	8002c6c <MemManage_Handler+0x4>

08002c6e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c6e:	b480      	push	{r7}
 8002c70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c72:	e7fe      	b.n	8002c72 <BusFault_Handler+0x4>

08002c74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c74:	b480      	push	{r7}
 8002c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c78:	e7fe      	b.n	8002c78 <UsageFault_Handler+0x4>

08002c7a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c7a:	b480      	push	{r7}
 8002c7c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c7e:	bf00      	nop
 8002c80:	46bd      	mov	sp, r7
 8002c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c86:	4770      	bx	lr

08002c88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c8c:	bf00      	nop
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr

08002c96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c96:	b480      	push	{r7}
 8002c98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c9a:	bf00      	nop
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca2:	4770      	bx	lr

08002ca4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ca8:	f000 fa2c 	bl	8003104 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002cac:	bf00      	nop
 8002cae:	bd80      	pop	{r7, pc}

08002cb0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b084      	sub	sp, #16
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002cb8:	4b11      	ldr	r3, [pc, #68]	; (8002d00 <_sbrk+0x50>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d102      	bne.n	8002cc6 <_sbrk+0x16>
		heap_end = &end;
 8002cc0:	4b0f      	ldr	r3, [pc, #60]	; (8002d00 <_sbrk+0x50>)
 8002cc2:	4a10      	ldr	r2, [pc, #64]	; (8002d04 <_sbrk+0x54>)
 8002cc4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002cc6:	4b0e      	ldr	r3, [pc, #56]	; (8002d00 <_sbrk+0x50>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002ccc:	4b0c      	ldr	r3, [pc, #48]	; (8002d00 <_sbrk+0x50>)
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	4413      	add	r3, r2
 8002cd4:	466a      	mov	r2, sp
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d907      	bls.n	8002cea <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002cda:	f002 ff07 	bl	8005aec <__errno>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	230c      	movs	r3, #12
 8002ce2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002ce4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002ce8:	e006      	b.n	8002cf8 <_sbrk+0x48>
	}

	heap_end += incr;
 8002cea:	4b05      	ldr	r3, [pc, #20]	; (8002d00 <_sbrk+0x50>)
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	4413      	add	r3, r2
 8002cf2:	4a03      	ldr	r2, [pc, #12]	; (8002d00 <_sbrk+0x50>)
 8002cf4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	3710      	adds	r7, #16
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}
 8002d00:	200002dc 	.word	0x200002dc
 8002d04:	20000ab0 	.word	0x20000ab0

08002d08 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d0c:	4b17      	ldr	r3, [pc, #92]	; (8002d6c <SystemInit+0x64>)
 8002d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d12:	4a16      	ldr	r2, [pc, #88]	; (8002d6c <SystemInit+0x64>)
 8002d14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002d1c:	4b14      	ldr	r3, [pc, #80]	; (8002d70 <SystemInit+0x68>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a13      	ldr	r2, [pc, #76]	; (8002d70 <SystemInit+0x68>)
 8002d22:	f043 0301 	orr.w	r3, r3, #1
 8002d26:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8002d28:	4b11      	ldr	r3, [pc, #68]	; (8002d70 <SystemInit+0x68>)
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8002d2e:	4b10      	ldr	r3, [pc, #64]	; (8002d70 <SystemInit+0x68>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a0f      	ldr	r2, [pc, #60]	; (8002d70 <SystemInit+0x68>)
 8002d34:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8002d38:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8002d3c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8002d3e:	4b0c      	ldr	r3, [pc, #48]	; (8002d70 <SystemInit+0x68>)
 8002d40:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002d44:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002d46:	4b0a      	ldr	r3, [pc, #40]	; (8002d70 <SystemInit+0x68>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a09      	ldr	r2, [pc, #36]	; (8002d70 <SystemInit+0x68>)
 8002d4c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d50:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8002d52:	4b07      	ldr	r3, [pc, #28]	; (8002d70 <SystemInit+0x68>)
 8002d54:	2200      	movs	r2, #0
 8002d56:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002d58:	4b04      	ldr	r3, [pc, #16]	; (8002d6c <SystemInit+0x64>)
 8002d5a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002d5e:	609a      	str	r2, [r3, #8]
#endif
}
 8002d60:	bf00      	nop
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr
 8002d6a:	bf00      	nop
 8002d6c:	e000ed00 	.word	0xe000ed00
 8002d70:	40021000 	.word	0x40021000

08002d74 <web_wait_response>:
uint8_t web_buffer[PAYLOAD_MAX_BUF];
uint8_t web_http_method[10];
uint8_t web_page[10];

static bool web_wait_response(uint8_t *channel, uint16_t *bytes)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b088      	sub	sp, #32
 8002d78:	af02      	add	r7, sp, #8
 8002d7a:	6078      	str	r0, [r7, #4]
 8002d7c:	6039      	str	r1, [r7, #0]
    int16_t ans;
    uint16_t buf_len;
    int c,b;
    bool ret = false;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	75fb      	strb	r3, [r7, #23]

    ans = ceb_cbuf_find_multi_str(at_get_cbuf(),web_channel_data,5,5000);
 8002d82:	f7fd fe6d 	bl	8000a60 <at_get_cbuf>
 8002d86:	f241 3388 	movw	r3, #5000	; 0x1388
 8002d8a:	2205      	movs	r2, #5
 8002d8c:	4935      	ldr	r1, [pc, #212]	; (8002e64 <web_wait_response+0xf0>)
 8002d8e:	f7fe faf1 	bl	8001374 <ceb_cbuf_find_multi_str>
 8002d92:	4603      	mov	r3, r0
 8002d94:	82bb      	strh	r3, [r7, #20]
    if(ans == -1)
 8002d96:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002d9a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d9e:	d106      	bne.n	8002dae <web_wait_response+0x3a>
    {
        ceb_cbuf_flush(at_get_cbuf());
 8002da0:	f7fd fe5e 	bl	8000a60 <at_get_cbuf>
 8002da4:	4603      	mov	r3, r0
 8002da6:	4618      	mov	r0, r3
 8002da8:	f7fe fa2d 	bl	8001206 <ceb_cbuf_flush>
 8002dac:	e055      	b.n	8002e5a <web_wait_response+0xe6>
    } // 0, 1, 2, 3 => channel (open or close information)
    else if(ans < 3) 
 8002dae:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002db2:	2b02      	cmp	r3, #2
 8002db4:	dc15      	bgt.n	8002de2 <web_wait_response+0x6e>
    {
        //uint8_t channel = (uint8_t) ans;
        ans = ceb_cbuf_find_multi_str(at_get_cbuf(),web_conn_state,2,5000);
 8002db6:	f7fd fe53 	bl	8000a60 <at_get_cbuf>
 8002dba:	f241 3388 	movw	r3, #5000	; 0x1388
 8002dbe:	2202      	movs	r2, #2
 8002dc0:	4929      	ldr	r1, [pc, #164]	; (8002e68 <web_wait_response+0xf4>)
 8002dc2:	f7fe fad7 	bl	8001374 <ceb_cbuf_find_multi_str>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	82bb      	strh	r3, [r7, #20]
        if(ans == -1)
 8002dca:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002dce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002dd2:	d142      	bne.n	8002e5a <web_wait_response+0xe6>
        {
            ceb_cbuf_flush(at_get_cbuf());
 8002dd4:	f7fd fe44 	bl	8000a60 <at_get_cbuf>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f7fe fa13 	bl	8001206 <ceb_cbuf_flush>
 8002de0:	e03b      	b.n	8002e5a <web_wait_response+0xe6>
        //else
            //printf("Connection closed for channel %d\r\n", channel);
    } // 4 => +IPD
    else
    {
        buf_len = PAYLOAD_MAX_BUF-1;
 8002de2:	f240 2357 	movw	r3, #599	; 0x257
 8002de6:	827b      	strh	r3, [r7, #18]
        ans = ceb_cbuf_get_str_until_find(at_get_cbuf(),web_buffer,&buf_len,(uint8_t *)":",1,5000);
 8002de8:	f7fd fe3a 	bl	8000a60 <at_get_cbuf>
 8002dec:	f107 0212 	add.w	r2, r7, #18
 8002df0:	f241 3388 	movw	r3, #5000	; 0x1388
 8002df4:	9301      	str	r3, [sp, #4]
 8002df6:	2301      	movs	r3, #1
 8002df8:	9300      	str	r3, [sp, #0]
 8002dfa:	4b1c      	ldr	r3, [pc, #112]	; (8002e6c <web_wait_response+0xf8>)
 8002dfc:	491c      	ldr	r1, [pc, #112]	; (8002e70 <web_wait_response+0xfc>)
 8002dfe:	f7fe fb27 	bl	8001450 <ceb_cbuf_get_str_until_find>
 8002e02:	4603      	mov	r3, r0
 8002e04:	82bb      	strh	r3, [r7, #20]
        if(buf_len < 4)
 8002e06:	8a7b      	ldrh	r3, [r7, #18]
 8002e08:	2b03      	cmp	r3, #3
 8002e0a:	d805      	bhi.n	8002e18 <web_wait_response+0xa4>
        {
            ceb_cbuf_flush(at_get_cbuf());
 8002e0c:	f7fd fe28 	bl	8000a60 <at_get_cbuf>
 8002e10:	4603      	mov	r3, r0
 8002e12:	4618      	mov	r0, r3
 8002e14:	f7fe f9f7 	bl	8001206 <ceb_cbuf_flush>
        }

        web_buffer[buf_len] = '\0';
 8002e18:	8a7b      	ldrh	r3, [r7, #18]
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	4b14      	ldr	r3, [pc, #80]	; (8002e70 <web_wait_response+0xfc>)
 8002e1e:	2100      	movs	r1, #0
 8002e20:	5499      	strb	r1, [r3, r2]
        if(sscanf((char *)web_buffer,"%d,%d:",&c,&b) != 2)
 8002e22:	f107 0308 	add.w	r3, r7, #8
 8002e26:	f107 020c 	add.w	r2, r7, #12
 8002e2a:	4912      	ldr	r1, [pc, #72]	; (8002e74 <web_wait_response+0x100>)
 8002e2c:	4810      	ldr	r0, [pc, #64]	; (8002e70 <web_wait_response+0xfc>)
 8002e2e:	f002 feaf 	bl	8005b90 <siscanf>
 8002e32:	4603      	mov	r3, r0
 8002e34:	2b02      	cmp	r3, #2
 8002e36:	d006      	beq.n	8002e46 <web_wait_response+0xd2>
        {
            ceb_cbuf_flush(at_get_cbuf());
 8002e38:	f7fd fe12 	bl	8000a60 <at_get_cbuf>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f7fe f9e1 	bl	8001206 <ceb_cbuf_flush>
 8002e44:	e009      	b.n	8002e5a <web_wait_response+0xe6>
        }
        else
        {
            *channel = (uint8_t) c;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	b2da      	uxtb	r2, r3
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	701a      	strb	r2, [r3, #0]
            *bytes = (uint16_t) b;
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	b29a      	uxth	r2, r3
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	801a      	strh	r2, [r3, #0]
            ret = true;
 8002e56:	2301      	movs	r3, #1
 8002e58:	75fb      	strb	r3, [r7, #23]
        }
    }

    return ret;
 8002e5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3718      	adds	r7, #24
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	200000ac 	.word	0x200000ac
 8002e68:	200000d4 	.word	0x200000d4
 8002e6c:	08007294 	.word	0x08007294
 8002e70:	20000838 	.word	0x20000838
 8002e74:	08007298 	.word	0x08007298

08002e78 <web_get_payload>:

static bool web_get_payload(uint16_t bytes)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b084      	sub	sp, #16
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	4603      	mov	r3, r0
 8002e80:	80fb      	strh	r3, [r7, #6]
    uint16_t buf_len;

    //printf("Payload: %d bytes\r\n",bytes);
    if(bytes < (PAYLOAD_MAX_BUF-1))
 8002e82:	88fb      	ldrh	r3, [r7, #6]
 8002e84:	f240 2256 	movw	r2, #598	; 0x256
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d821      	bhi.n	8002ed0 <web_get_payload+0x58>
    {
        buf_len = bytes;
 8002e8c:	88fb      	ldrh	r3, [r7, #6]
 8002e8e:	81fb      	strh	r3, [r7, #14]
        ceb_cbuf_get_str(at_get_cbuf(),web_buffer,&buf_len,10000);
 8002e90:	f7fd fde6 	bl	8000a60 <at_get_cbuf>
 8002e94:	f107 020e 	add.w	r2, r7, #14
 8002e98:	f242 7310 	movw	r3, #10000	; 0x2710
 8002e9c:	4912      	ldr	r1, [pc, #72]	; (8002ee8 <web_get_payload+0x70>)
 8002e9e:	f7fe fb30 	bl	8001502 <ceb_cbuf_get_str>
        web_buffer[buf_len] = '\0';
 8002ea2:	89fb      	ldrh	r3, [r7, #14]
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	4b10      	ldr	r3, [pc, #64]	; (8002ee8 <web_get_payload+0x70>)
 8002ea8:	2100      	movs	r1, #0
 8002eaa:	5499      	strb	r1, [r3, r2]
        if(buf_len != bytes)
 8002eac:	89fb      	ldrh	r3, [r7, #14]
 8002eae:	88fa      	ldrh	r2, [r7, #6]
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d00b      	beq.n	8002ecc <web_get_payload+0x54>
        {
            hw_time_sleep(3000);
 8002eb4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002eb8:	f7fe fcdc 	bl	8001874 <hw_time_sleep>
            ceb_cbuf_flush(at_get_cbuf());
 8002ebc:	f7fd fdd0 	bl	8000a60 <at_get_cbuf>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f7fe f99f 	bl	8001206 <ceb_cbuf_flush>
            return false;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	e008      	b.n	8002ede <web_get_payload+0x66>
        }
        else
            return true;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e006      	b.n	8002ede <web_get_payload+0x66>
    }
    else
    {
        //printf("Payload is too large\r\n");
        ceb_cbuf_flush(at_get_cbuf());
 8002ed0:	f7fd fdc6 	bl	8000a60 <at_get_cbuf>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f7fe f995 	bl	8001206 <ceb_cbuf_flush>
        return false;
 8002edc:	2300      	movs	r3, #0
    }    
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3710      	adds	r7, #16
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	bf00      	nop
 8002ee8:	20000838 	.word	0x20000838

08002eec <web_client>:

bool web_client(void)
{
 8002eec:	b5b0      	push	{r4, r5, r7, lr}
 8002eee:	b086      	sub	sp, #24
 8002ef0:	af02      	add	r7, sp, #8
    uint16_t buf_len;
    uint8_t channel = 0;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	737b      	strb	r3, [r7, #13]
    uint16_t bytes = 0;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	817b      	strh	r3, [r7, #10]
    int ret_code;
    uint16_t nb;

    if(web_wait_response(&channel,&bytes))
 8002efa:	f107 020a 	add.w	r2, r7, #10
 8002efe:	f107 030d 	add.w	r3, r7, #13
 8002f02:	4611      	mov	r1, r2
 8002f04:	4618      	mov	r0, r3
 8002f06:	f7ff ff35 	bl	8002d74 <web_wait_response>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d06d      	beq.n	8002fec <web_client+0x100>
    {
        // HTTP/1.0 200 OK
        buf_len = PAYLOAD_MAX_BUF-1;
 8002f10:	f240 2357 	movw	r3, #599	; 0x257
 8002f14:	81fb      	strh	r3, [r7, #14]
        ceb_cbuf_get_str_until_find(at_get_cbuf(),web_buffer,&buf_len,(uint8_t *)at_eol,strlen((const char *)at_eol),5000);
 8002f16:	f7fd fda3 	bl	8000a60 <at_get_cbuf>
 8002f1a:	4605      	mov	r5, r0
 8002f1c:	4b36      	ldr	r3, [pc, #216]	; (8002ff8 <web_client+0x10c>)
 8002f1e:	681c      	ldr	r4, [r3, #0]
 8002f20:	4b35      	ldr	r3, [pc, #212]	; (8002ff8 <web_client+0x10c>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4618      	mov	r0, r3
 8002f26:	f7fd f95d 	bl	80001e4 <strlen>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	b29b      	uxth	r3, r3
 8002f2e:	f107 010e 	add.w	r1, r7, #14
 8002f32:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f36:	9201      	str	r2, [sp, #4]
 8002f38:	9300      	str	r3, [sp, #0]
 8002f3a:	4623      	mov	r3, r4
 8002f3c:	460a      	mov	r2, r1
 8002f3e:	492f      	ldr	r1, [pc, #188]	; (8002ffc <web_client+0x110>)
 8002f40:	4628      	mov	r0, r5
 8002f42:	f7fe fa85 	bl	8001450 <ceb_cbuf_get_str_until_find>
        if(buf_len < 16)
 8002f46:	89fb      	ldrh	r3, [r7, #14]
 8002f48:	2b0f      	cmp	r3, #15
 8002f4a:	d807      	bhi.n	8002f5c <web_client+0x70>
        {
            ceb_cbuf_flush(at_get_cbuf());
 8002f4c:	f7fd fd88 	bl	8000a60 <at_get_cbuf>
 8002f50:	4603      	mov	r3, r0
 8002f52:	4618      	mov	r0, r3
 8002f54:	f7fe f957 	bl	8001206 <ceb_cbuf_flush>
            return false;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	e048      	b.n	8002fee <web_client+0x102>
        }

        web_buffer[buf_len] = '\0';
 8002f5c:	89fb      	ldrh	r3, [r7, #14]
 8002f5e:	461a      	mov	r2, r3
 8002f60:	4b26      	ldr	r3, [pc, #152]	; (8002ffc <web_client+0x110>)
 8002f62:	2100      	movs	r1, #0
 8002f64:	5499      	strb	r1, [r3, r2]
        bytes -= buf_len;
 8002f66:	897a      	ldrh	r2, [r7, #10]
 8002f68:	89fb      	ldrh	r3, [r7, #14]
 8002f6a:	1ad3      	subs	r3, r2, r3
 8002f6c:	b29b      	uxth	r3, r3
 8002f6e:	817b      	strh	r3, [r7, #10]
        if(sscanf((char *)web_buffer,"%*s %d %*s\r\n",&ret_code) != 1)
 8002f70:	1d3b      	adds	r3, r7, #4
 8002f72:	461a      	mov	r2, r3
 8002f74:	4922      	ldr	r1, [pc, #136]	; (8003000 <web_client+0x114>)
 8002f76:	4821      	ldr	r0, [pc, #132]	; (8002ffc <web_client+0x110>)
 8002f78:	f002 fe0a 	bl	8005b90 <siscanf>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d007      	beq.n	8002f92 <web_client+0xa6>
        {
            ceb_cbuf_flush(at_get_cbuf());
 8002f82:	f7fd fd6d 	bl	8000a60 <at_get_cbuf>
 8002f86:	4603      	mov	r3, r0
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f7fe f93c 	bl	8001206 <ceb_cbuf_flush>
            return false;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	e02d      	b.n	8002fee <web_client+0x102>
        }

        // discarding all headers
        ceb_cbuf_find_str(at_get_cbuf(),(uint8_t *)"\r\n\r\n",4,&nb,10000);
 8002f92:	f7fd fd65 	bl	8000a60 <at_get_cbuf>
 8002f96:	1cba      	adds	r2, r7, #2
 8002f98:	f242 7310 	movw	r3, #10000	; 0x2710
 8002f9c:	9300      	str	r3, [sp, #0]
 8002f9e:	4613      	mov	r3, r2
 8002fa0:	2204      	movs	r2, #4
 8002fa2:	4918      	ldr	r1, [pc, #96]	; (8003004 <web_client+0x118>)
 8002fa4:	f7fe f9a1 	bl	80012ea <ceb_cbuf_find_str>
        bytes = bytes - nb;
 8002fa8:	897a      	ldrh	r2, [r7, #10]
 8002faa:	887b      	ldrh	r3, [r7, #2]
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	b29b      	uxth	r3, r3
 8002fb0:	817b      	strh	r3, [r7, #10]
        
        if(ret_code == 204)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2bcc      	cmp	r3, #204	; 0xcc
 8002fb6:	d101      	bne.n	8002fbc <web_client+0xd0>
        {
            return true;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	e018      	b.n	8002fee <web_client+0x102>
        }
        else
        {
            ret_code = ret_code / 100;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	4a12      	ldr	r2, [pc, #72]	; (8003008 <web_client+0x11c>)
 8002fc0:	fb82 1203 	smull	r1, r2, r2, r3
 8002fc4:	1152      	asrs	r2, r2, #5
 8002fc6:	17db      	asrs	r3, r3, #31
 8002fc8:	1ad3      	subs	r3, r2, r3
 8002fca:	607b      	str	r3, [r7, #4]
             if(ret_code == 2)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2b02      	cmp	r3, #2
 8002fd0:	d10a      	bne.n	8002fe8 <web_client+0xfc>
             {
                if(web_get_payload(bytes))
 8002fd2:	897b      	ldrh	r3, [r7, #10]
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f7ff ff4f 	bl	8002e78 <web_get_payload>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d001      	beq.n	8002fe4 <web_client+0xf8>
                    return true;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e004      	b.n	8002fee <web_client+0x102>
                else
                    return false;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	e002      	b.n	8002fee <web_client+0x102>
             }
             else
                return false;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	e000      	b.n	8002fee <web_client+0x102>
        }
    }
    else
        return false;
 8002fec:	2300      	movs	r3, #0
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3710      	adds	r7, #16
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bdb0      	pop	{r4, r5, r7, pc}
 8002ff6:	bf00      	nop
 8002ff8:	20000060 	.word	0x20000060
 8002ffc:	20000838 	.word	0x20000838
 8003000:	080072a0 	.word	0x080072a0
 8003004:	080072b0 	.word	0x080072b0
 8003008:	51eb851f 	.word	0x51eb851f

0800300c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800300c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003044 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003010:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003012:	e003      	b.n	800301c <LoopCopyDataInit>

08003014 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003014:	4b0c      	ldr	r3, [pc, #48]	; (8003048 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8003016:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003018:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800301a:	3104      	adds	r1, #4

0800301c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800301c:	480b      	ldr	r0, [pc, #44]	; (800304c <LoopForever+0xa>)
	ldr	r3, =_edata
 800301e:	4b0c      	ldr	r3, [pc, #48]	; (8003050 <LoopForever+0xe>)
	adds	r2, r0, r1
 8003020:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003022:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003024:	d3f6      	bcc.n	8003014 <CopyDataInit>
	ldr	r2, =_sbss
 8003026:	4a0b      	ldr	r2, [pc, #44]	; (8003054 <LoopForever+0x12>)
	b	LoopFillZerobss
 8003028:	e002      	b.n	8003030 <LoopFillZerobss>

0800302a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800302a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800302c:	f842 3b04 	str.w	r3, [r2], #4

08003030 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003030:	4b09      	ldr	r3, [pc, #36]	; (8003058 <LoopForever+0x16>)
	cmp	r2, r3
 8003032:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003034:	d3f9      	bcc.n	800302a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003036:	f7ff fe67 	bl	8002d08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800303a:	f002 fd5d 	bl	8005af8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800303e:	f7ff fa6d 	bl	800251c <main>

08003042 <LoopForever>:

LoopForever:
    b LoopForever
 8003042:	e7fe      	b.n	8003042 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003044:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8003048:	080076b8 	.word	0x080076b8
	ldr	r0, =_sdata
 800304c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003050:	200002bc 	.word	0x200002bc
	ldr	r2, =_sbss
 8003054:	200002bc 	.word	0x200002bc
	ldr	r3, = _ebss
 8003058:	20000ab0 	.word	0x20000ab0

0800305c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800305c:	e7fe      	b.n	800305c <ADC1_IRQHandler>

0800305e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800305e:	b580      	push	{r7, lr}
 8003060:	b082      	sub	sp, #8
 8003062:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003064:	2300      	movs	r3, #0
 8003066:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003068:	2003      	movs	r0, #3
 800306a:	f000 f95b 	bl	8003324 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800306e:	2000      	movs	r0, #0
 8003070:	f000 f80e 	bl	8003090 <HAL_InitTick>
 8003074:	4603      	mov	r3, r0
 8003076:	2b00      	cmp	r3, #0
 8003078:	d002      	beq.n	8003080 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	71fb      	strb	r3, [r7, #7]
 800307e:	e001      	b.n	8003084 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003080:	f7ff fd32 	bl	8002ae8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003084:	79fb      	ldrb	r3, [r7, #7]
}
 8003086:	4618      	mov	r0, r3
 8003088:	3708      	adds	r7, #8
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
	...

08003090 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b084      	sub	sp, #16
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003098:	2300      	movs	r3, #0
 800309a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800309c:	4b16      	ldr	r3, [pc, #88]	; (80030f8 <HAL_InitTick+0x68>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d022      	beq.n	80030ea <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80030a4:	4b15      	ldr	r3, [pc, #84]	; (80030fc <HAL_InitTick+0x6c>)
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	4b13      	ldr	r3, [pc, #76]	; (80030f8 <HAL_InitTick+0x68>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80030b0:	fbb1 f3f3 	udiv	r3, r1, r3
 80030b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80030b8:	4618      	mov	r0, r3
 80030ba:	f000 f968 	bl	800338e <HAL_SYSTICK_Config>
 80030be:	4603      	mov	r3, r0
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d10f      	bne.n	80030e4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2b0f      	cmp	r3, #15
 80030c8:	d809      	bhi.n	80030de <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80030ca:	2200      	movs	r2, #0
 80030cc:	6879      	ldr	r1, [r7, #4]
 80030ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80030d2:	f000 f932 	bl	800333a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80030d6:	4a0a      	ldr	r2, [pc, #40]	; (8003100 <HAL_InitTick+0x70>)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6013      	str	r3, [r2, #0]
 80030dc:	e007      	b.n	80030ee <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	73fb      	strb	r3, [r7, #15]
 80030e2:	e004      	b.n	80030ee <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	73fb      	strb	r3, [r7, #15]
 80030e8:	e001      	b.n	80030ee <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80030ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	3710      	adds	r7, #16
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}
 80030f8:	200000e8 	.word	0x200000e8
 80030fc:	200000a8 	.word	0x200000a8
 8003100:	200000e4 	.word	0x200000e4

08003104 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003104:	b480      	push	{r7}
 8003106:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003108:	4b05      	ldr	r3, [pc, #20]	; (8003120 <HAL_IncTick+0x1c>)
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	4b05      	ldr	r3, [pc, #20]	; (8003124 <HAL_IncTick+0x20>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4413      	add	r3, r2
 8003112:	4a03      	ldr	r2, [pc, #12]	; (8003120 <HAL_IncTick+0x1c>)
 8003114:	6013      	str	r3, [r2, #0]
}
 8003116:	bf00      	nop
 8003118:	46bd      	mov	sp, r7
 800311a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311e:	4770      	bx	lr
 8003120:	20000aa8 	.word	0x20000aa8
 8003124:	200000e8 	.word	0x200000e8

08003128 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003128:	b480      	push	{r7}
 800312a:	af00      	add	r7, sp, #0
  return uwTick;
 800312c:	4b03      	ldr	r3, [pc, #12]	; (800313c <HAL_GetTick+0x14>)
 800312e:	681b      	ldr	r3, [r3, #0]
}
 8003130:	4618      	mov	r0, r3
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr
 800313a:	bf00      	nop
 800313c:	20000aa8 	.word	0x20000aa8

08003140 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b084      	sub	sp, #16
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003148:	f7ff ffee 	bl	8003128 <HAL_GetTick>
 800314c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003158:	d004      	beq.n	8003164 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800315a:	4b09      	ldr	r3, [pc, #36]	; (8003180 <HAL_Delay+0x40>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	68fa      	ldr	r2, [r7, #12]
 8003160:	4413      	add	r3, r2
 8003162:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003164:	bf00      	nop
 8003166:	f7ff ffdf 	bl	8003128 <HAL_GetTick>
 800316a:	4602      	mov	r2, r0
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	1ad3      	subs	r3, r2, r3
 8003170:	68fa      	ldr	r2, [r7, #12]
 8003172:	429a      	cmp	r2, r3
 8003174:	d8f7      	bhi.n	8003166 <HAL_Delay+0x26>
  {
  }
}
 8003176:	bf00      	nop
 8003178:	3710      	adds	r7, #16
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}
 800317e:	bf00      	nop
 8003180:	200000e8 	.word	0x200000e8

08003184 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003184:	b480      	push	{r7}
 8003186:	b085      	sub	sp, #20
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	f003 0307 	and.w	r3, r3, #7
 8003192:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003194:	4b0c      	ldr	r3, [pc, #48]	; (80031c8 <__NVIC_SetPriorityGrouping+0x44>)
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800319a:	68ba      	ldr	r2, [r7, #8]
 800319c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80031a0:	4013      	ands	r3, r2
 80031a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80031ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80031b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031b6:	4a04      	ldr	r2, [pc, #16]	; (80031c8 <__NVIC_SetPriorityGrouping+0x44>)
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	60d3      	str	r3, [r2, #12]
}
 80031bc:	bf00      	nop
 80031be:	3714      	adds	r7, #20
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr
 80031c8:	e000ed00 	.word	0xe000ed00

080031cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80031cc:	b480      	push	{r7}
 80031ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031d0:	4b04      	ldr	r3, [pc, #16]	; (80031e4 <__NVIC_GetPriorityGrouping+0x18>)
 80031d2:	68db      	ldr	r3, [r3, #12]
 80031d4:	0a1b      	lsrs	r3, r3, #8
 80031d6:	f003 0307 	and.w	r3, r3, #7
}
 80031da:	4618      	mov	r0, r3
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr
 80031e4:	e000ed00 	.word	0xe000ed00

080031e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b083      	sub	sp, #12
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	4603      	mov	r3, r0
 80031f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	db0b      	blt.n	8003212 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031fa:	79fb      	ldrb	r3, [r7, #7]
 80031fc:	f003 021f 	and.w	r2, r3, #31
 8003200:	4907      	ldr	r1, [pc, #28]	; (8003220 <__NVIC_EnableIRQ+0x38>)
 8003202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003206:	095b      	lsrs	r3, r3, #5
 8003208:	2001      	movs	r0, #1
 800320a:	fa00 f202 	lsl.w	r2, r0, r2
 800320e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003212:	bf00      	nop
 8003214:	370c      	adds	r7, #12
 8003216:	46bd      	mov	sp, r7
 8003218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321c:	4770      	bx	lr
 800321e:	bf00      	nop
 8003220:	e000e100 	.word	0xe000e100

08003224 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003224:	b480      	push	{r7}
 8003226:	b083      	sub	sp, #12
 8003228:	af00      	add	r7, sp, #0
 800322a:	4603      	mov	r3, r0
 800322c:	6039      	str	r1, [r7, #0]
 800322e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003230:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003234:	2b00      	cmp	r3, #0
 8003236:	db0a      	blt.n	800324e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	b2da      	uxtb	r2, r3
 800323c:	490c      	ldr	r1, [pc, #48]	; (8003270 <__NVIC_SetPriority+0x4c>)
 800323e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003242:	0112      	lsls	r2, r2, #4
 8003244:	b2d2      	uxtb	r2, r2
 8003246:	440b      	add	r3, r1
 8003248:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800324c:	e00a      	b.n	8003264 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	b2da      	uxtb	r2, r3
 8003252:	4908      	ldr	r1, [pc, #32]	; (8003274 <__NVIC_SetPriority+0x50>)
 8003254:	79fb      	ldrb	r3, [r7, #7]
 8003256:	f003 030f 	and.w	r3, r3, #15
 800325a:	3b04      	subs	r3, #4
 800325c:	0112      	lsls	r2, r2, #4
 800325e:	b2d2      	uxtb	r2, r2
 8003260:	440b      	add	r3, r1
 8003262:	761a      	strb	r2, [r3, #24]
}
 8003264:	bf00      	nop
 8003266:	370c      	adds	r7, #12
 8003268:	46bd      	mov	sp, r7
 800326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326e:	4770      	bx	lr
 8003270:	e000e100 	.word	0xe000e100
 8003274:	e000ed00 	.word	0xe000ed00

08003278 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003278:	b480      	push	{r7}
 800327a:	b089      	sub	sp, #36	; 0x24
 800327c:	af00      	add	r7, sp, #0
 800327e:	60f8      	str	r0, [r7, #12]
 8003280:	60b9      	str	r1, [r7, #8]
 8003282:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	f003 0307 	and.w	r3, r3, #7
 800328a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800328c:	69fb      	ldr	r3, [r7, #28]
 800328e:	f1c3 0307 	rsb	r3, r3, #7
 8003292:	2b04      	cmp	r3, #4
 8003294:	bf28      	it	cs
 8003296:	2304      	movcs	r3, #4
 8003298:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800329a:	69fb      	ldr	r3, [r7, #28]
 800329c:	3304      	adds	r3, #4
 800329e:	2b06      	cmp	r3, #6
 80032a0:	d902      	bls.n	80032a8 <NVIC_EncodePriority+0x30>
 80032a2:	69fb      	ldr	r3, [r7, #28]
 80032a4:	3b03      	subs	r3, #3
 80032a6:	e000      	b.n	80032aa <NVIC_EncodePriority+0x32>
 80032a8:	2300      	movs	r3, #0
 80032aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80032b0:	69bb      	ldr	r3, [r7, #24]
 80032b2:	fa02 f303 	lsl.w	r3, r2, r3
 80032b6:	43da      	mvns	r2, r3
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	401a      	ands	r2, r3
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032c0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	fa01 f303 	lsl.w	r3, r1, r3
 80032ca:	43d9      	mvns	r1, r3
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032d0:	4313      	orrs	r3, r2
         );
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3724      	adds	r7, #36	; 0x24
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr
	...

080032e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b082      	sub	sp, #8
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	3b01      	subs	r3, #1
 80032ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80032f0:	d301      	bcc.n	80032f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80032f2:	2301      	movs	r3, #1
 80032f4:	e00f      	b.n	8003316 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80032f6:	4a0a      	ldr	r2, [pc, #40]	; (8003320 <SysTick_Config+0x40>)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	3b01      	subs	r3, #1
 80032fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80032fe:	210f      	movs	r1, #15
 8003300:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003304:	f7ff ff8e 	bl	8003224 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003308:	4b05      	ldr	r3, [pc, #20]	; (8003320 <SysTick_Config+0x40>)
 800330a:	2200      	movs	r2, #0
 800330c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800330e:	4b04      	ldr	r3, [pc, #16]	; (8003320 <SysTick_Config+0x40>)
 8003310:	2207      	movs	r2, #7
 8003312:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003314:	2300      	movs	r3, #0
}
 8003316:	4618      	mov	r0, r3
 8003318:	3708      	adds	r7, #8
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}
 800331e:	bf00      	nop
 8003320:	e000e010 	.word	0xe000e010

08003324 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b082      	sub	sp, #8
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800332c:	6878      	ldr	r0, [r7, #4]
 800332e:	f7ff ff29 	bl	8003184 <__NVIC_SetPriorityGrouping>
}
 8003332:	bf00      	nop
 8003334:	3708      	adds	r7, #8
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}

0800333a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800333a:	b580      	push	{r7, lr}
 800333c:	b086      	sub	sp, #24
 800333e:	af00      	add	r7, sp, #0
 8003340:	4603      	mov	r3, r0
 8003342:	60b9      	str	r1, [r7, #8]
 8003344:	607a      	str	r2, [r7, #4]
 8003346:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003348:	2300      	movs	r3, #0
 800334a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800334c:	f7ff ff3e 	bl	80031cc <__NVIC_GetPriorityGrouping>
 8003350:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003352:	687a      	ldr	r2, [r7, #4]
 8003354:	68b9      	ldr	r1, [r7, #8]
 8003356:	6978      	ldr	r0, [r7, #20]
 8003358:	f7ff ff8e 	bl	8003278 <NVIC_EncodePriority>
 800335c:	4602      	mov	r2, r0
 800335e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003362:	4611      	mov	r1, r2
 8003364:	4618      	mov	r0, r3
 8003366:	f7ff ff5d 	bl	8003224 <__NVIC_SetPriority>
}
 800336a:	bf00      	nop
 800336c:	3718      	adds	r7, #24
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}

08003372 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003372:	b580      	push	{r7, lr}
 8003374:	b082      	sub	sp, #8
 8003376:	af00      	add	r7, sp, #0
 8003378:	4603      	mov	r3, r0
 800337a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800337c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003380:	4618      	mov	r0, r3
 8003382:	f7ff ff31 	bl	80031e8 <__NVIC_EnableIRQ>
}
 8003386:	bf00      	nop
 8003388:	3708      	adds	r7, #8
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}

0800338e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800338e:	b580      	push	{r7, lr}
 8003390:	b082      	sub	sp, #8
 8003392:	af00      	add	r7, sp, #0
 8003394:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f7ff ffa2 	bl	80032e0 <SysTick_Config>
 800339c:	4603      	mov	r3, r0
}
 800339e:	4618      	mov	r0, r3
 80033a0:	3708      	adds	r7, #8
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}
	...

080033a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b087      	sub	sp, #28
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
 80033b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80033b2:	2300      	movs	r3, #0
 80033b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033b6:	e154      	b.n	8003662 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	2101      	movs	r1, #1
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	fa01 f303 	lsl.w	r3, r1, r3
 80033c4:	4013      	ands	r3, r2
 80033c6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	f000 8146 	beq.w	800365c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d00b      	beq.n	80033f0 <HAL_GPIO_Init+0x48>
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	2b02      	cmp	r3, #2
 80033de:	d007      	beq.n	80033f0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80033e4:	2b11      	cmp	r3, #17
 80033e6:	d003      	beq.n	80033f0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	2b12      	cmp	r3, #18
 80033ee:	d130      	bne.n	8003452 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	005b      	lsls	r3, r3, #1
 80033fa:	2203      	movs	r2, #3
 80033fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003400:	43db      	mvns	r3, r3
 8003402:	693a      	ldr	r2, [r7, #16]
 8003404:	4013      	ands	r3, r2
 8003406:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	68da      	ldr	r2, [r3, #12]
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	005b      	lsls	r3, r3, #1
 8003410:	fa02 f303 	lsl.w	r3, r2, r3
 8003414:	693a      	ldr	r2, [r7, #16]
 8003416:	4313      	orrs	r3, r2
 8003418:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	693a      	ldr	r2, [r7, #16]
 800341e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003426:	2201      	movs	r2, #1
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	fa02 f303 	lsl.w	r3, r2, r3
 800342e:	43db      	mvns	r3, r3
 8003430:	693a      	ldr	r2, [r7, #16]
 8003432:	4013      	ands	r3, r2
 8003434:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	091b      	lsrs	r3, r3, #4
 800343c:	f003 0201 	and.w	r2, r3, #1
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	fa02 f303 	lsl.w	r3, r2, r3
 8003446:	693a      	ldr	r2, [r7, #16]
 8003448:	4313      	orrs	r3, r2
 800344a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	693a      	ldr	r2, [r7, #16]
 8003450:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	68db      	ldr	r3, [r3, #12]
 8003456:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	005b      	lsls	r3, r3, #1
 800345c:	2203      	movs	r2, #3
 800345e:	fa02 f303 	lsl.w	r3, r2, r3
 8003462:	43db      	mvns	r3, r3
 8003464:	693a      	ldr	r2, [r7, #16]
 8003466:	4013      	ands	r3, r2
 8003468:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	689a      	ldr	r2, [r3, #8]
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	005b      	lsls	r3, r3, #1
 8003472:	fa02 f303 	lsl.w	r3, r2, r3
 8003476:	693a      	ldr	r2, [r7, #16]
 8003478:	4313      	orrs	r3, r2
 800347a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	693a      	ldr	r2, [r7, #16]
 8003480:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	2b02      	cmp	r3, #2
 8003488:	d003      	beq.n	8003492 <HAL_GPIO_Init+0xea>
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	2b12      	cmp	r3, #18
 8003490:	d123      	bne.n	80034da <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	08da      	lsrs	r2, r3, #3
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	3208      	adds	r2, #8
 800349a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800349e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	f003 0307 	and.w	r3, r3, #7
 80034a6:	009b      	lsls	r3, r3, #2
 80034a8:	220f      	movs	r2, #15
 80034aa:	fa02 f303 	lsl.w	r3, r2, r3
 80034ae:	43db      	mvns	r3, r3
 80034b0:	693a      	ldr	r2, [r7, #16]
 80034b2:	4013      	ands	r3, r2
 80034b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	691a      	ldr	r2, [r3, #16]
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	f003 0307 	and.w	r3, r3, #7
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	fa02 f303 	lsl.w	r3, r2, r3
 80034c6:	693a      	ldr	r2, [r7, #16]
 80034c8:	4313      	orrs	r3, r2
 80034ca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	08da      	lsrs	r2, r3, #3
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	3208      	adds	r2, #8
 80034d4:	6939      	ldr	r1, [r7, #16]
 80034d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	005b      	lsls	r3, r3, #1
 80034e4:	2203      	movs	r2, #3
 80034e6:	fa02 f303 	lsl.w	r3, r2, r3
 80034ea:	43db      	mvns	r3, r3
 80034ec:	693a      	ldr	r2, [r7, #16]
 80034ee:	4013      	ands	r3, r2
 80034f0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	f003 0203 	and.w	r2, r3, #3
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	005b      	lsls	r3, r3, #1
 80034fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003502:	693a      	ldr	r2, [r7, #16]
 8003504:	4313      	orrs	r3, r2
 8003506:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	693a      	ldr	r2, [r7, #16]
 800350c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003516:	2b00      	cmp	r3, #0
 8003518:	f000 80a0 	beq.w	800365c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800351c:	4b58      	ldr	r3, [pc, #352]	; (8003680 <HAL_GPIO_Init+0x2d8>)
 800351e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003520:	4a57      	ldr	r2, [pc, #348]	; (8003680 <HAL_GPIO_Init+0x2d8>)
 8003522:	f043 0301 	orr.w	r3, r3, #1
 8003526:	6613      	str	r3, [r2, #96]	; 0x60
 8003528:	4b55      	ldr	r3, [pc, #340]	; (8003680 <HAL_GPIO_Init+0x2d8>)
 800352a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800352c:	f003 0301 	and.w	r3, r3, #1
 8003530:	60bb      	str	r3, [r7, #8]
 8003532:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003534:	4a53      	ldr	r2, [pc, #332]	; (8003684 <HAL_GPIO_Init+0x2dc>)
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	089b      	lsrs	r3, r3, #2
 800353a:	3302      	adds	r3, #2
 800353c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003540:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	f003 0303 	and.w	r3, r3, #3
 8003548:	009b      	lsls	r3, r3, #2
 800354a:	220f      	movs	r2, #15
 800354c:	fa02 f303 	lsl.w	r3, r2, r3
 8003550:	43db      	mvns	r3, r3
 8003552:	693a      	ldr	r2, [r7, #16]
 8003554:	4013      	ands	r3, r2
 8003556:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800355e:	d019      	beq.n	8003594 <HAL_GPIO_Init+0x1ec>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	4a49      	ldr	r2, [pc, #292]	; (8003688 <HAL_GPIO_Init+0x2e0>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d013      	beq.n	8003590 <HAL_GPIO_Init+0x1e8>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	4a48      	ldr	r2, [pc, #288]	; (800368c <HAL_GPIO_Init+0x2e4>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d00d      	beq.n	800358c <HAL_GPIO_Init+0x1e4>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	4a47      	ldr	r2, [pc, #284]	; (8003690 <HAL_GPIO_Init+0x2e8>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d007      	beq.n	8003588 <HAL_GPIO_Init+0x1e0>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	4a46      	ldr	r2, [pc, #280]	; (8003694 <HAL_GPIO_Init+0x2ec>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d101      	bne.n	8003584 <HAL_GPIO_Init+0x1dc>
 8003580:	2304      	movs	r3, #4
 8003582:	e008      	b.n	8003596 <HAL_GPIO_Init+0x1ee>
 8003584:	2307      	movs	r3, #7
 8003586:	e006      	b.n	8003596 <HAL_GPIO_Init+0x1ee>
 8003588:	2303      	movs	r3, #3
 800358a:	e004      	b.n	8003596 <HAL_GPIO_Init+0x1ee>
 800358c:	2302      	movs	r3, #2
 800358e:	e002      	b.n	8003596 <HAL_GPIO_Init+0x1ee>
 8003590:	2301      	movs	r3, #1
 8003592:	e000      	b.n	8003596 <HAL_GPIO_Init+0x1ee>
 8003594:	2300      	movs	r3, #0
 8003596:	697a      	ldr	r2, [r7, #20]
 8003598:	f002 0203 	and.w	r2, r2, #3
 800359c:	0092      	lsls	r2, r2, #2
 800359e:	4093      	lsls	r3, r2
 80035a0:	693a      	ldr	r2, [r7, #16]
 80035a2:	4313      	orrs	r3, r2
 80035a4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80035a6:	4937      	ldr	r1, [pc, #220]	; (8003684 <HAL_GPIO_Init+0x2dc>)
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	089b      	lsrs	r3, r3, #2
 80035ac:	3302      	adds	r3, #2
 80035ae:	693a      	ldr	r2, [r7, #16]
 80035b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80035b4:	4b38      	ldr	r3, [pc, #224]	; (8003698 <HAL_GPIO_Init+0x2f0>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	43db      	mvns	r3, r3
 80035be:	693a      	ldr	r2, [r7, #16]
 80035c0:	4013      	ands	r3, r2
 80035c2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d003      	beq.n	80035d8 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80035d0:	693a      	ldr	r2, [r7, #16]
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	4313      	orrs	r3, r2
 80035d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80035d8:	4a2f      	ldr	r2, [pc, #188]	; (8003698 <HAL_GPIO_Init+0x2f0>)
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80035de:	4b2e      	ldr	r3, [pc, #184]	; (8003698 <HAL_GPIO_Init+0x2f0>)
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	43db      	mvns	r3, r3
 80035e8:	693a      	ldr	r2, [r7, #16]
 80035ea:	4013      	ands	r3, r2
 80035ec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d003      	beq.n	8003602 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80035fa:	693a      	ldr	r2, [r7, #16]
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	4313      	orrs	r3, r2
 8003600:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003602:	4a25      	ldr	r2, [pc, #148]	; (8003698 <HAL_GPIO_Init+0x2f0>)
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003608:	4b23      	ldr	r3, [pc, #140]	; (8003698 <HAL_GPIO_Init+0x2f0>)
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	43db      	mvns	r3, r3
 8003612:	693a      	ldr	r2, [r7, #16]
 8003614:	4013      	ands	r3, r2
 8003616:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003620:	2b00      	cmp	r3, #0
 8003622:	d003      	beq.n	800362c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8003624:	693a      	ldr	r2, [r7, #16]
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	4313      	orrs	r3, r2
 800362a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800362c:	4a1a      	ldr	r2, [pc, #104]	; (8003698 <HAL_GPIO_Init+0x2f0>)
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003632:	4b19      	ldr	r3, [pc, #100]	; (8003698 <HAL_GPIO_Init+0x2f0>)
 8003634:	68db      	ldr	r3, [r3, #12]
 8003636:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	43db      	mvns	r3, r3
 800363c:	693a      	ldr	r2, [r7, #16]
 800363e:	4013      	ands	r3, r2
 8003640:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800364a:	2b00      	cmp	r3, #0
 800364c:	d003      	beq.n	8003656 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800364e:	693a      	ldr	r2, [r7, #16]
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	4313      	orrs	r3, r2
 8003654:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003656:	4a10      	ldr	r2, [pc, #64]	; (8003698 <HAL_GPIO_Init+0x2f0>)
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	3301      	adds	r3, #1
 8003660:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	fa22 f303 	lsr.w	r3, r2, r3
 800366c:	2b00      	cmp	r3, #0
 800366e:	f47f aea3 	bne.w	80033b8 <HAL_GPIO_Init+0x10>
  }
}
 8003672:	bf00      	nop
 8003674:	371c      	adds	r7, #28
 8003676:	46bd      	mov	sp, r7
 8003678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367c:	4770      	bx	lr
 800367e:	bf00      	nop
 8003680:	40021000 	.word	0x40021000
 8003684:	40010000 	.word	0x40010000
 8003688:	48000400 	.word	0x48000400
 800368c:	48000800 	.word	0x48000800
 8003690:	48000c00 	.word	0x48000c00
 8003694:	48001000 	.word	0x48001000
 8003698:	40010400 	.word	0x40010400

0800369c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800369c:	b480      	push	{r7}
 800369e:	b083      	sub	sp, #12
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
 80036a4:	460b      	mov	r3, r1
 80036a6:	807b      	strh	r3, [r7, #2]
 80036a8:	4613      	mov	r3, r2
 80036aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80036ac:	787b      	ldrb	r3, [r7, #1]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d003      	beq.n	80036ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80036b2:	887a      	ldrh	r2, [r7, #2]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80036b8:	e002      	b.n	80036c0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80036ba:	887a      	ldrh	r2, [r7, #2]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	629a      	str	r2, [r3, #40]	; 0x28
}
 80036c0:	bf00      	nop
 80036c2:	370c      	adds	r7, #12
 80036c4:	46bd      	mov	sp, r7
 80036c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ca:	4770      	bx	lr

080036cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b082      	sub	sp, #8
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d101      	bne.n	80036de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e081      	b.n	80037e2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d106      	bne.n	80036f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2200      	movs	r2, #0
 80036ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f7ff fa20 	bl	8002b38 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2224      	movs	r2, #36	; 0x24
 80036fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f022 0201 	bic.w	r2, r2, #1
 800370e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	685a      	ldr	r2, [r3, #4]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800371c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	689a      	ldr	r2, [r3, #8]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800372c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	68db      	ldr	r3, [r3, #12]
 8003732:	2b01      	cmp	r3, #1
 8003734:	d107      	bne.n	8003746 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	689a      	ldr	r2, [r3, #8]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003742:	609a      	str	r2, [r3, #8]
 8003744:	e006      	b.n	8003754 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	689a      	ldr	r2, [r3, #8]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003752:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	68db      	ldr	r3, [r3, #12]
 8003758:	2b02      	cmp	r3, #2
 800375a:	d104      	bne.n	8003766 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003764:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	687a      	ldr	r2, [r7, #4]
 800376e:	6812      	ldr	r2, [r2, #0]
 8003770:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003774:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003778:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	68da      	ldr	r2, [r3, #12]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003788:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	691a      	ldr	r2, [r3, #16]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	695b      	ldr	r3, [r3, #20]
 8003792:	ea42 0103 	orr.w	r1, r2, r3
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	699b      	ldr	r3, [r3, #24]
 800379a:	021a      	lsls	r2, r3, #8
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	430a      	orrs	r2, r1
 80037a2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	69d9      	ldr	r1, [r3, #28]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6a1a      	ldr	r2, [r3, #32]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	430a      	orrs	r2, r1
 80037b2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f042 0201 	orr.w	r2, r2, #1
 80037c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2200      	movs	r2, #0
 80037c8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2220      	movs	r2, #32
 80037ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2200      	movs	r2, #0
 80037d6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2200      	movs	r2, #0
 80037dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80037e0:	2300      	movs	r3, #0
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	3708      	adds	r7, #8
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}
	...

080037ec <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b088      	sub	sp, #32
 80037f0:	af02      	add	r7, sp, #8
 80037f2:	60f8      	str	r0, [r7, #12]
 80037f4:	607a      	str	r2, [r7, #4]
 80037f6:	461a      	mov	r2, r3
 80037f8:	460b      	mov	r3, r1
 80037fa:	817b      	strh	r3, [r7, #10]
 80037fc:	4613      	mov	r3, r2
 80037fe:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003806:	b2db      	uxtb	r3, r3
 8003808:	2b20      	cmp	r3, #32
 800380a:	f040 80da 	bne.w	80039c2 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003814:	2b01      	cmp	r3, #1
 8003816:	d101      	bne.n	800381c <HAL_I2C_Master_Transmit+0x30>
 8003818:	2302      	movs	r3, #2
 800381a:	e0d3      	b.n	80039c4 <HAL_I2C_Master_Transmit+0x1d8>
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2201      	movs	r2, #1
 8003820:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003824:	f7ff fc80 	bl	8003128 <HAL_GetTick>
 8003828:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	9300      	str	r3, [sp, #0]
 800382e:	2319      	movs	r3, #25
 8003830:	2201      	movs	r2, #1
 8003832:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003836:	68f8      	ldr	r0, [r7, #12]
 8003838:	f000 f8f0 	bl	8003a1c <I2C_WaitOnFlagUntilTimeout>
 800383c:	4603      	mov	r3, r0
 800383e:	2b00      	cmp	r3, #0
 8003840:	d001      	beq.n	8003846 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e0be      	b.n	80039c4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2221      	movs	r2, #33	; 0x21
 800384a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2210      	movs	r2, #16
 8003852:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2200      	movs	r2, #0
 800385a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	687a      	ldr	r2, [r7, #4]
 8003860:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	893a      	ldrh	r2, [r7, #8]
 8003866:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2200      	movs	r2, #0
 800386c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003872:	b29b      	uxth	r3, r3
 8003874:	2bff      	cmp	r3, #255	; 0xff
 8003876:	d90e      	bls.n	8003896 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	22ff      	movs	r2, #255	; 0xff
 800387c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003882:	b2da      	uxtb	r2, r3
 8003884:	8979      	ldrh	r1, [r7, #10]
 8003886:	4b51      	ldr	r3, [pc, #324]	; (80039cc <HAL_I2C_Master_Transmit+0x1e0>)
 8003888:	9300      	str	r3, [sp, #0]
 800388a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800388e:	68f8      	ldr	r0, [r7, #12]
 8003890:	f000 f9e6 	bl	8003c60 <I2C_TransferConfig>
 8003894:	e06c      	b.n	8003970 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800389a:	b29a      	uxth	r2, r3
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038a4:	b2da      	uxtb	r2, r3
 80038a6:	8979      	ldrh	r1, [r7, #10]
 80038a8:	4b48      	ldr	r3, [pc, #288]	; (80039cc <HAL_I2C_Master_Transmit+0x1e0>)
 80038aa:	9300      	str	r3, [sp, #0]
 80038ac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80038b0:	68f8      	ldr	r0, [r7, #12]
 80038b2:	f000 f9d5 	bl	8003c60 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80038b6:	e05b      	b.n	8003970 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038b8:	697a      	ldr	r2, [r7, #20]
 80038ba:	6a39      	ldr	r1, [r7, #32]
 80038bc:	68f8      	ldr	r0, [r7, #12]
 80038be:	f000 f8ed 	bl	8003a9c <I2C_WaitOnTXISFlagUntilTimeout>
 80038c2:	4603      	mov	r3, r0
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d001      	beq.n	80038cc <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	e07b      	b.n	80039c4 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d0:	781a      	ldrb	r2, [r3, #0]
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038dc:	1c5a      	adds	r2, r3, #1
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038e6:	b29b      	uxth	r3, r3
 80038e8:	3b01      	subs	r3, #1
 80038ea:	b29a      	uxth	r2, r3
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038f4:	3b01      	subs	r3, #1
 80038f6:	b29a      	uxth	r2, r3
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003900:	b29b      	uxth	r3, r3
 8003902:	2b00      	cmp	r3, #0
 8003904:	d034      	beq.n	8003970 <HAL_I2C_Master_Transmit+0x184>
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800390a:	2b00      	cmp	r3, #0
 800390c:	d130      	bne.n	8003970 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	9300      	str	r3, [sp, #0]
 8003912:	6a3b      	ldr	r3, [r7, #32]
 8003914:	2200      	movs	r2, #0
 8003916:	2180      	movs	r1, #128	; 0x80
 8003918:	68f8      	ldr	r0, [r7, #12]
 800391a:	f000 f87f 	bl	8003a1c <I2C_WaitOnFlagUntilTimeout>
 800391e:	4603      	mov	r3, r0
 8003920:	2b00      	cmp	r3, #0
 8003922:	d001      	beq.n	8003928 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	e04d      	b.n	80039c4 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800392c:	b29b      	uxth	r3, r3
 800392e:	2bff      	cmp	r3, #255	; 0xff
 8003930:	d90e      	bls.n	8003950 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	22ff      	movs	r2, #255	; 0xff
 8003936:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800393c:	b2da      	uxtb	r2, r3
 800393e:	8979      	ldrh	r1, [r7, #10]
 8003940:	2300      	movs	r3, #0
 8003942:	9300      	str	r3, [sp, #0]
 8003944:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003948:	68f8      	ldr	r0, [r7, #12]
 800394a:	f000 f989 	bl	8003c60 <I2C_TransferConfig>
 800394e:	e00f      	b.n	8003970 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003954:	b29a      	uxth	r2, r3
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800395e:	b2da      	uxtb	r2, r3
 8003960:	8979      	ldrh	r1, [r7, #10]
 8003962:	2300      	movs	r3, #0
 8003964:	9300      	str	r3, [sp, #0]
 8003966:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800396a:	68f8      	ldr	r0, [r7, #12]
 800396c:	f000 f978 	bl	8003c60 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003974:	b29b      	uxth	r3, r3
 8003976:	2b00      	cmp	r3, #0
 8003978:	d19e      	bne.n	80038b8 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800397a:	697a      	ldr	r2, [r7, #20]
 800397c:	6a39      	ldr	r1, [r7, #32]
 800397e:	68f8      	ldr	r0, [r7, #12]
 8003980:	f000 f8cc 	bl	8003b1c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003984:	4603      	mov	r3, r0
 8003986:	2b00      	cmp	r3, #0
 8003988:	d001      	beq.n	800398e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e01a      	b.n	80039c4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	2220      	movs	r2, #32
 8003994:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	6859      	ldr	r1, [r3, #4]
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	4b0b      	ldr	r3, [pc, #44]	; (80039d0 <HAL_I2C_Master_Transmit+0x1e4>)
 80039a2:	400b      	ands	r3, r1
 80039a4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2220      	movs	r2, #32
 80039aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2200      	movs	r2, #0
 80039b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2200      	movs	r2, #0
 80039ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80039be:	2300      	movs	r3, #0
 80039c0:	e000      	b.n	80039c4 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80039c2:	2302      	movs	r3, #2
  }
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	3718      	adds	r7, #24
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}
 80039cc:	80002000 	.word	0x80002000
 80039d0:	fe00e800 	.word	0xfe00e800

080039d4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b083      	sub	sp, #12
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	699b      	ldr	r3, [r3, #24]
 80039e2:	f003 0302 	and.w	r3, r3, #2
 80039e6:	2b02      	cmp	r3, #2
 80039e8:	d103      	bne.n	80039f2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	2200      	movs	r2, #0
 80039f0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	699b      	ldr	r3, [r3, #24]
 80039f8:	f003 0301 	and.w	r3, r3, #1
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	d007      	beq.n	8003a10 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	699a      	ldr	r2, [r3, #24]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f042 0201 	orr.w	r2, r2, #1
 8003a0e:	619a      	str	r2, [r3, #24]
  }
}
 8003a10:	bf00      	nop
 8003a12:	370c      	adds	r7, #12
 8003a14:	46bd      	mov	sp, r7
 8003a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1a:	4770      	bx	lr

08003a1c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b084      	sub	sp, #16
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	60f8      	str	r0, [r7, #12]
 8003a24:	60b9      	str	r1, [r7, #8]
 8003a26:	603b      	str	r3, [r7, #0]
 8003a28:	4613      	mov	r3, r2
 8003a2a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a2c:	e022      	b.n	8003a74 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a34:	d01e      	beq.n	8003a74 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a36:	f7ff fb77 	bl	8003128 <HAL_GetTick>
 8003a3a:	4602      	mov	r2, r0
 8003a3c:	69bb      	ldr	r3, [r7, #24]
 8003a3e:	1ad3      	subs	r3, r2, r3
 8003a40:	683a      	ldr	r2, [r7, #0]
 8003a42:	429a      	cmp	r2, r3
 8003a44:	d302      	bcc.n	8003a4c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d113      	bne.n	8003a74 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a50:	f043 0220 	orr.w	r2, r3, #32
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2220      	movs	r2, #32
 8003a5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2200      	movs	r2, #0
 8003a64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	e00f      	b.n	8003a94 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	699a      	ldr	r2, [r3, #24]
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	4013      	ands	r3, r2
 8003a7e:	68ba      	ldr	r2, [r7, #8]
 8003a80:	429a      	cmp	r2, r3
 8003a82:	bf0c      	ite	eq
 8003a84:	2301      	moveq	r3, #1
 8003a86:	2300      	movne	r3, #0
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	461a      	mov	r2, r3
 8003a8c:	79fb      	ldrb	r3, [r7, #7]
 8003a8e:	429a      	cmp	r2, r3
 8003a90:	d0cd      	beq.n	8003a2e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003a92:	2300      	movs	r3, #0
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	3710      	adds	r7, #16
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}

08003a9c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b084      	sub	sp, #16
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	60f8      	str	r0, [r7, #12]
 8003aa4:	60b9      	str	r1, [r7, #8]
 8003aa6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003aa8:	e02c      	b.n	8003b04 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003aaa:	687a      	ldr	r2, [r7, #4]
 8003aac:	68b9      	ldr	r1, [r7, #8]
 8003aae:	68f8      	ldr	r0, [r7, #12]
 8003ab0:	f000 f870 	bl	8003b94 <I2C_IsAcknowledgeFailed>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d001      	beq.n	8003abe <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	e02a      	b.n	8003b14 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ac4:	d01e      	beq.n	8003b04 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ac6:	f7ff fb2f 	bl	8003128 <HAL_GetTick>
 8003aca:	4602      	mov	r2, r0
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	1ad3      	subs	r3, r2, r3
 8003ad0:	68ba      	ldr	r2, [r7, #8]
 8003ad2:	429a      	cmp	r2, r3
 8003ad4:	d302      	bcc.n	8003adc <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d113      	bne.n	8003b04 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ae0:	f043 0220 	orr.w	r2, r3, #32
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2220      	movs	r2, #32
 8003aec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2200      	movs	r2, #0
 8003af4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2200      	movs	r2, #0
 8003afc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	e007      	b.n	8003b14 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	699b      	ldr	r3, [r3, #24]
 8003b0a:	f003 0302 	and.w	r3, r3, #2
 8003b0e:	2b02      	cmp	r3, #2
 8003b10:	d1cb      	bne.n	8003aaa <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003b12:	2300      	movs	r3, #0
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	3710      	adds	r7, #16
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}

08003b1c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b084      	sub	sp, #16
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	60f8      	str	r0, [r7, #12]
 8003b24:	60b9      	str	r1, [r7, #8]
 8003b26:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b28:	e028      	b.n	8003b7c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b2a:	687a      	ldr	r2, [r7, #4]
 8003b2c:	68b9      	ldr	r1, [r7, #8]
 8003b2e:	68f8      	ldr	r0, [r7, #12]
 8003b30:	f000 f830 	bl	8003b94 <I2C_IsAcknowledgeFailed>
 8003b34:	4603      	mov	r3, r0
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d001      	beq.n	8003b3e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e026      	b.n	8003b8c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b3e:	f7ff faf3 	bl	8003128 <HAL_GetTick>
 8003b42:	4602      	mov	r2, r0
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	1ad3      	subs	r3, r2, r3
 8003b48:	68ba      	ldr	r2, [r7, #8]
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	d302      	bcc.n	8003b54 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d113      	bne.n	8003b7c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b58:	f043 0220 	orr.w	r2, r3, #32
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2220      	movs	r2, #32
 8003b64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2200      	movs	r2, #0
 8003b74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	e007      	b.n	8003b8c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	699b      	ldr	r3, [r3, #24]
 8003b82:	f003 0320 	and.w	r3, r3, #32
 8003b86:	2b20      	cmp	r3, #32
 8003b88:	d1cf      	bne.n	8003b2a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003b8a:	2300      	movs	r3, #0
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	3710      	adds	r7, #16
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}

08003b94 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b084      	sub	sp, #16
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	60f8      	str	r0, [r7, #12]
 8003b9c:	60b9      	str	r1, [r7, #8]
 8003b9e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	699b      	ldr	r3, [r3, #24]
 8003ba6:	f003 0310 	and.w	r3, r3, #16
 8003baa:	2b10      	cmp	r3, #16
 8003bac:	d151      	bne.n	8003c52 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003bae:	e022      	b.n	8003bf6 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003bb6:	d01e      	beq.n	8003bf6 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bb8:	f7ff fab6 	bl	8003128 <HAL_GetTick>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	1ad3      	subs	r3, r2, r3
 8003bc2:	68ba      	ldr	r2, [r7, #8]
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	d302      	bcc.n	8003bce <I2C_IsAcknowledgeFailed+0x3a>
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d113      	bne.n	8003bf6 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bd2:	f043 0220 	orr.w	r2, r3, #32
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2220      	movs	r2, #32
 8003bde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2200      	movs	r2, #0
 8003be6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2200      	movs	r2, #0
 8003bee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e02e      	b.n	8003c54 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	699b      	ldr	r3, [r3, #24]
 8003bfc:	f003 0320 	and.w	r3, r3, #32
 8003c00:	2b20      	cmp	r3, #32
 8003c02:	d1d5      	bne.n	8003bb0 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	2210      	movs	r2, #16
 8003c0a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	2220      	movs	r2, #32
 8003c12:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003c14:	68f8      	ldr	r0, [r7, #12]
 8003c16:	f7ff fedd 	bl	80039d4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	6859      	ldr	r1, [r3, #4]
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681a      	ldr	r2, [r3, #0]
 8003c24:	4b0d      	ldr	r3, [pc, #52]	; (8003c5c <I2C_IsAcknowledgeFailed+0xc8>)
 8003c26:	400b      	ands	r3, r1
 8003c28:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c2e:	f043 0204 	orr.w	r2, r3, #4
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2220      	movs	r2, #32
 8003c3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2200      	movs	r2, #0
 8003c42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e000      	b.n	8003c54 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8003c52:	2300      	movs	r3, #0
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	3710      	adds	r7, #16
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}
 8003c5c:	fe00e800 	.word	0xfe00e800

08003c60 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b085      	sub	sp, #20
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	60f8      	str	r0, [r7, #12]
 8003c68:	607b      	str	r3, [r7, #4]
 8003c6a:	460b      	mov	r3, r1
 8003c6c:	817b      	strh	r3, [r7, #10]
 8003c6e:	4613      	mov	r3, r2
 8003c70:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	685a      	ldr	r2, [r3, #4]
 8003c78:	69bb      	ldr	r3, [r7, #24]
 8003c7a:	0d5b      	lsrs	r3, r3, #21
 8003c7c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003c80:	4b0d      	ldr	r3, [pc, #52]	; (8003cb8 <I2C_TransferConfig+0x58>)
 8003c82:	430b      	orrs	r3, r1
 8003c84:	43db      	mvns	r3, r3
 8003c86:	ea02 0103 	and.w	r1, r2, r3
 8003c8a:	897b      	ldrh	r3, [r7, #10]
 8003c8c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003c90:	7a7b      	ldrb	r3, [r7, #9]
 8003c92:	041b      	lsls	r3, r3, #16
 8003c94:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003c98:	431a      	orrs	r2, r3
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	431a      	orrs	r2, r3
 8003c9e:	69bb      	ldr	r3, [r7, #24]
 8003ca0:	431a      	orrs	r2, r3
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	430a      	orrs	r2, r1
 8003ca8:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8003caa:	bf00      	nop
 8003cac:	3714      	adds	r7, #20
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb4:	4770      	bx	lr
 8003cb6:	bf00      	nop
 8003cb8:	03ff63ff 	.word	0x03ff63ff

08003cbc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b083      	sub	sp, #12
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
 8003cc4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	2b20      	cmp	r3, #32
 8003cd0:	d138      	bne.n	8003d44 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	d101      	bne.n	8003ce0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003cdc:	2302      	movs	r3, #2
 8003cde:	e032      	b.n	8003d46 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2224      	movs	r2, #36	; 0x24
 8003cec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f022 0201 	bic.w	r2, r2, #1
 8003cfe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003d0e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	6819      	ldr	r1, [r3, #0]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	683a      	ldr	r2, [r7, #0]
 8003d1c:	430a      	orrs	r2, r1
 8003d1e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f042 0201 	orr.w	r2, r2, #1
 8003d2e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2220      	movs	r2, #32
 8003d34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003d40:	2300      	movs	r3, #0
 8003d42:	e000      	b.n	8003d46 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003d44:	2302      	movs	r3, #2
  }
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	370c      	adds	r7, #12
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d50:	4770      	bx	lr

08003d52 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003d52:	b480      	push	{r7}
 8003d54:	b085      	sub	sp, #20
 8003d56:	af00      	add	r7, sp, #0
 8003d58:	6078      	str	r0, [r7, #4]
 8003d5a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d62:	b2db      	uxtb	r3, r3
 8003d64:	2b20      	cmp	r3, #32
 8003d66:	d139      	bne.n	8003ddc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d6e:	2b01      	cmp	r3, #1
 8003d70:	d101      	bne.n	8003d76 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003d72:	2302      	movs	r3, #2
 8003d74:	e033      	b.n	8003dde <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2201      	movs	r2, #1
 8003d7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2224      	movs	r2, #36	; 0x24
 8003d82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	681a      	ldr	r2, [r3, #0]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f022 0201 	bic.w	r2, r2, #1
 8003d94:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003da4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	021b      	lsls	r3, r3, #8
 8003daa:	68fa      	ldr	r2, [r7, #12]
 8003dac:	4313      	orrs	r3, r2
 8003dae:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	68fa      	ldr	r2, [r7, #12]
 8003db6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f042 0201 	orr.w	r2, r2, #1
 8003dc6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2220      	movs	r2, #32
 8003dcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	e000      	b.n	8003dde <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003ddc:	2302      	movs	r3, #2
  }
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	3714      	adds	r7, #20
 8003de2:	46bd      	mov	sp, r7
 8003de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de8:	4770      	bx	lr
	...

08003dec <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003dec:	b480      	push	{r7}
 8003dee:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003df0:	4b04      	ldr	r3, [pc, #16]	; (8003e04 <HAL_PWREx_GetVoltageRange+0x18>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr
 8003e02:	bf00      	nop
 8003e04:	40007000 	.word	0x40007000

08003e08 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b085      	sub	sp, #20
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e16:	d130      	bne.n	8003e7a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003e18:	4b23      	ldr	r3, [pc, #140]	; (8003ea8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003e20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e24:	d038      	beq.n	8003e98 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003e26:	4b20      	ldr	r3, [pc, #128]	; (8003ea8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003e2e:	4a1e      	ldr	r2, [pc, #120]	; (8003ea8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e30:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e34:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003e36:	4b1d      	ldr	r3, [pc, #116]	; (8003eac <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	2232      	movs	r2, #50	; 0x32
 8003e3c:	fb02 f303 	mul.w	r3, r2, r3
 8003e40:	4a1b      	ldr	r2, [pc, #108]	; (8003eb0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003e42:	fba2 2303 	umull	r2, r3, r2, r3
 8003e46:	0c9b      	lsrs	r3, r3, #18
 8003e48:	3301      	adds	r3, #1
 8003e4a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e4c:	e002      	b.n	8003e54 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	3b01      	subs	r3, #1
 8003e52:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e54:	4b14      	ldr	r3, [pc, #80]	; (8003ea8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e56:	695b      	ldr	r3, [r3, #20]
 8003e58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e60:	d102      	bne.n	8003e68 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d1f2      	bne.n	8003e4e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003e68:	4b0f      	ldr	r3, [pc, #60]	; (8003ea8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e6a:	695b      	ldr	r3, [r3, #20]
 8003e6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e74:	d110      	bne.n	8003e98 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003e76:	2303      	movs	r3, #3
 8003e78:	e00f      	b.n	8003e9a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003e7a:	4b0b      	ldr	r3, [pc, #44]	; (8003ea8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003e82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e86:	d007      	beq.n	8003e98 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003e88:	4b07      	ldr	r3, [pc, #28]	; (8003ea8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003e90:	4a05      	ldr	r2, [pc, #20]	; (8003ea8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e96:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003e98:	2300      	movs	r3, #0
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	3714      	adds	r7, #20
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea4:	4770      	bx	lr
 8003ea6:	bf00      	nop
 8003ea8:	40007000 	.word	0x40007000
 8003eac:	200000a8 	.word	0x200000a8
 8003eb0:	431bde83 	.word	0x431bde83

08003eb4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b088      	sub	sp, #32
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d102      	bne.n	8003ec8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	f000 bc11 	b.w	80046ea <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ec8:	4ba0      	ldr	r3, [pc, #640]	; (800414c <HAL_RCC_OscConfig+0x298>)
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	f003 030c 	and.w	r3, r3, #12
 8003ed0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ed2:	4b9e      	ldr	r3, [pc, #632]	; (800414c <HAL_RCC_OscConfig+0x298>)
 8003ed4:	68db      	ldr	r3, [r3, #12]
 8003ed6:	f003 0303 	and.w	r3, r3, #3
 8003eda:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 0310 	and.w	r3, r3, #16
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	f000 80e4 	beq.w	80040b2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003eea:	69bb      	ldr	r3, [r7, #24]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d007      	beq.n	8003f00 <HAL_RCC_OscConfig+0x4c>
 8003ef0:	69bb      	ldr	r3, [r7, #24]
 8003ef2:	2b0c      	cmp	r3, #12
 8003ef4:	f040 808b 	bne.w	800400e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	2b01      	cmp	r3, #1
 8003efc:	f040 8087 	bne.w	800400e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003f00:	4b92      	ldr	r3, [pc, #584]	; (800414c <HAL_RCC_OscConfig+0x298>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f003 0302 	and.w	r3, r3, #2
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d005      	beq.n	8003f18 <HAL_RCC_OscConfig+0x64>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	699b      	ldr	r3, [r3, #24]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d101      	bne.n	8003f18 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003f14:	2301      	movs	r3, #1
 8003f16:	e3e8      	b.n	80046ea <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6a1a      	ldr	r2, [r3, #32]
 8003f1c:	4b8b      	ldr	r3, [pc, #556]	; (800414c <HAL_RCC_OscConfig+0x298>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f003 0308 	and.w	r3, r3, #8
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d004      	beq.n	8003f32 <HAL_RCC_OscConfig+0x7e>
 8003f28:	4b88      	ldr	r3, [pc, #544]	; (800414c <HAL_RCC_OscConfig+0x298>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f30:	e005      	b.n	8003f3e <HAL_RCC_OscConfig+0x8a>
 8003f32:	4b86      	ldr	r3, [pc, #536]	; (800414c <HAL_RCC_OscConfig+0x298>)
 8003f34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f38:	091b      	lsrs	r3, r3, #4
 8003f3a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d223      	bcs.n	8003f8a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6a1b      	ldr	r3, [r3, #32]
 8003f46:	4618      	mov	r0, r3
 8003f48:	f000 fd78 	bl	8004a3c <RCC_SetFlashLatencyFromMSIRange>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d001      	beq.n	8003f56 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	e3c9      	b.n	80046ea <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003f56:	4b7d      	ldr	r3, [pc, #500]	; (800414c <HAL_RCC_OscConfig+0x298>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a7c      	ldr	r2, [pc, #496]	; (800414c <HAL_RCC_OscConfig+0x298>)
 8003f5c:	f043 0308 	orr.w	r3, r3, #8
 8003f60:	6013      	str	r3, [r2, #0]
 8003f62:	4b7a      	ldr	r3, [pc, #488]	; (800414c <HAL_RCC_OscConfig+0x298>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6a1b      	ldr	r3, [r3, #32]
 8003f6e:	4977      	ldr	r1, [pc, #476]	; (800414c <HAL_RCC_OscConfig+0x298>)
 8003f70:	4313      	orrs	r3, r2
 8003f72:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003f74:	4b75      	ldr	r3, [pc, #468]	; (800414c <HAL_RCC_OscConfig+0x298>)
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	69db      	ldr	r3, [r3, #28]
 8003f80:	021b      	lsls	r3, r3, #8
 8003f82:	4972      	ldr	r1, [pc, #456]	; (800414c <HAL_RCC_OscConfig+0x298>)
 8003f84:	4313      	orrs	r3, r2
 8003f86:	604b      	str	r3, [r1, #4]
 8003f88:	e025      	b.n	8003fd6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003f8a:	4b70      	ldr	r3, [pc, #448]	; (800414c <HAL_RCC_OscConfig+0x298>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a6f      	ldr	r2, [pc, #444]	; (800414c <HAL_RCC_OscConfig+0x298>)
 8003f90:	f043 0308 	orr.w	r3, r3, #8
 8003f94:	6013      	str	r3, [r2, #0]
 8003f96:	4b6d      	ldr	r3, [pc, #436]	; (800414c <HAL_RCC_OscConfig+0x298>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6a1b      	ldr	r3, [r3, #32]
 8003fa2:	496a      	ldr	r1, [pc, #424]	; (800414c <HAL_RCC_OscConfig+0x298>)
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003fa8:	4b68      	ldr	r3, [pc, #416]	; (800414c <HAL_RCC_OscConfig+0x298>)
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	69db      	ldr	r3, [r3, #28]
 8003fb4:	021b      	lsls	r3, r3, #8
 8003fb6:	4965      	ldr	r1, [pc, #404]	; (800414c <HAL_RCC_OscConfig+0x298>)
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003fbc:	69bb      	ldr	r3, [r7, #24]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d109      	bne.n	8003fd6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6a1b      	ldr	r3, [r3, #32]
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f000 fd38 	bl	8004a3c <RCC_SetFlashLatencyFromMSIRange>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d001      	beq.n	8003fd6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e389      	b.n	80046ea <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003fd6:	f000 fc6f 	bl	80048b8 <HAL_RCC_GetSysClockFreq>
 8003fda:	4601      	mov	r1, r0
 8003fdc:	4b5b      	ldr	r3, [pc, #364]	; (800414c <HAL_RCC_OscConfig+0x298>)
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	091b      	lsrs	r3, r3, #4
 8003fe2:	f003 030f 	and.w	r3, r3, #15
 8003fe6:	4a5a      	ldr	r2, [pc, #360]	; (8004150 <HAL_RCC_OscConfig+0x29c>)
 8003fe8:	5cd3      	ldrb	r3, [r2, r3]
 8003fea:	f003 031f 	and.w	r3, r3, #31
 8003fee:	fa21 f303 	lsr.w	r3, r1, r3
 8003ff2:	4a58      	ldr	r2, [pc, #352]	; (8004154 <HAL_RCC_OscConfig+0x2a0>)
 8003ff4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003ff6:	4b58      	ldr	r3, [pc, #352]	; (8004158 <HAL_RCC_OscConfig+0x2a4>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f7ff f848 	bl	8003090 <HAL_InitTick>
 8004000:	4603      	mov	r3, r0
 8004002:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004004:	7bfb      	ldrb	r3, [r7, #15]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d052      	beq.n	80040b0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800400a:	7bfb      	ldrb	r3, [r7, #15]
 800400c:	e36d      	b.n	80046ea <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	699b      	ldr	r3, [r3, #24]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d032      	beq.n	800407c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004016:	4b4d      	ldr	r3, [pc, #308]	; (800414c <HAL_RCC_OscConfig+0x298>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a4c      	ldr	r2, [pc, #304]	; (800414c <HAL_RCC_OscConfig+0x298>)
 800401c:	f043 0301 	orr.w	r3, r3, #1
 8004020:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004022:	f7ff f881 	bl	8003128 <HAL_GetTick>
 8004026:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004028:	e008      	b.n	800403c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800402a:	f7ff f87d 	bl	8003128 <HAL_GetTick>
 800402e:	4602      	mov	r2, r0
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	1ad3      	subs	r3, r2, r3
 8004034:	2b02      	cmp	r3, #2
 8004036:	d901      	bls.n	800403c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004038:	2303      	movs	r3, #3
 800403a:	e356      	b.n	80046ea <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800403c:	4b43      	ldr	r3, [pc, #268]	; (800414c <HAL_RCC_OscConfig+0x298>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f003 0302 	and.w	r3, r3, #2
 8004044:	2b00      	cmp	r3, #0
 8004046:	d0f0      	beq.n	800402a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004048:	4b40      	ldr	r3, [pc, #256]	; (800414c <HAL_RCC_OscConfig+0x298>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a3f      	ldr	r2, [pc, #252]	; (800414c <HAL_RCC_OscConfig+0x298>)
 800404e:	f043 0308 	orr.w	r3, r3, #8
 8004052:	6013      	str	r3, [r2, #0]
 8004054:	4b3d      	ldr	r3, [pc, #244]	; (800414c <HAL_RCC_OscConfig+0x298>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6a1b      	ldr	r3, [r3, #32]
 8004060:	493a      	ldr	r1, [pc, #232]	; (800414c <HAL_RCC_OscConfig+0x298>)
 8004062:	4313      	orrs	r3, r2
 8004064:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004066:	4b39      	ldr	r3, [pc, #228]	; (800414c <HAL_RCC_OscConfig+0x298>)
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	69db      	ldr	r3, [r3, #28]
 8004072:	021b      	lsls	r3, r3, #8
 8004074:	4935      	ldr	r1, [pc, #212]	; (800414c <HAL_RCC_OscConfig+0x298>)
 8004076:	4313      	orrs	r3, r2
 8004078:	604b      	str	r3, [r1, #4]
 800407a:	e01a      	b.n	80040b2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800407c:	4b33      	ldr	r3, [pc, #204]	; (800414c <HAL_RCC_OscConfig+0x298>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a32      	ldr	r2, [pc, #200]	; (800414c <HAL_RCC_OscConfig+0x298>)
 8004082:	f023 0301 	bic.w	r3, r3, #1
 8004086:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004088:	f7ff f84e 	bl	8003128 <HAL_GetTick>
 800408c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800408e:	e008      	b.n	80040a2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004090:	f7ff f84a 	bl	8003128 <HAL_GetTick>
 8004094:	4602      	mov	r2, r0
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	1ad3      	subs	r3, r2, r3
 800409a:	2b02      	cmp	r3, #2
 800409c:	d901      	bls.n	80040a2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800409e:	2303      	movs	r3, #3
 80040a0:	e323      	b.n	80046ea <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80040a2:	4b2a      	ldr	r3, [pc, #168]	; (800414c <HAL_RCC_OscConfig+0x298>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f003 0302 	and.w	r3, r3, #2
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d1f0      	bne.n	8004090 <HAL_RCC_OscConfig+0x1dc>
 80040ae:	e000      	b.n	80040b2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80040b0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f003 0301 	and.w	r3, r3, #1
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d073      	beq.n	80041a6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80040be:	69bb      	ldr	r3, [r7, #24]
 80040c0:	2b08      	cmp	r3, #8
 80040c2:	d005      	beq.n	80040d0 <HAL_RCC_OscConfig+0x21c>
 80040c4:	69bb      	ldr	r3, [r7, #24]
 80040c6:	2b0c      	cmp	r3, #12
 80040c8:	d10e      	bne.n	80040e8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	2b03      	cmp	r3, #3
 80040ce:	d10b      	bne.n	80040e8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040d0:	4b1e      	ldr	r3, [pc, #120]	; (800414c <HAL_RCC_OscConfig+0x298>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d063      	beq.n	80041a4 <HAL_RCC_OscConfig+0x2f0>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d15f      	bne.n	80041a4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	e300      	b.n	80046ea <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040f0:	d106      	bne.n	8004100 <HAL_RCC_OscConfig+0x24c>
 80040f2:	4b16      	ldr	r3, [pc, #88]	; (800414c <HAL_RCC_OscConfig+0x298>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a15      	ldr	r2, [pc, #84]	; (800414c <HAL_RCC_OscConfig+0x298>)
 80040f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040fc:	6013      	str	r3, [r2, #0]
 80040fe:	e01d      	b.n	800413c <HAL_RCC_OscConfig+0x288>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004108:	d10c      	bne.n	8004124 <HAL_RCC_OscConfig+0x270>
 800410a:	4b10      	ldr	r3, [pc, #64]	; (800414c <HAL_RCC_OscConfig+0x298>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a0f      	ldr	r2, [pc, #60]	; (800414c <HAL_RCC_OscConfig+0x298>)
 8004110:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004114:	6013      	str	r3, [r2, #0]
 8004116:	4b0d      	ldr	r3, [pc, #52]	; (800414c <HAL_RCC_OscConfig+0x298>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a0c      	ldr	r2, [pc, #48]	; (800414c <HAL_RCC_OscConfig+0x298>)
 800411c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004120:	6013      	str	r3, [r2, #0]
 8004122:	e00b      	b.n	800413c <HAL_RCC_OscConfig+0x288>
 8004124:	4b09      	ldr	r3, [pc, #36]	; (800414c <HAL_RCC_OscConfig+0x298>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a08      	ldr	r2, [pc, #32]	; (800414c <HAL_RCC_OscConfig+0x298>)
 800412a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800412e:	6013      	str	r3, [r2, #0]
 8004130:	4b06      	ldr	r3, [pc, #24]	; (800414c <HAL_RCC_OscConfig+0x298>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a05      	ldr	r2, [pc, #20]	; (800414c <HAL_RCC_OscConfig+0x298>)
 8004136:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800413a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d01b      	beq.n	800417c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004144:	f7fe fff0 	bl	8003128 <HAL_GetTick>
 8004148:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800414a:	e010      	b.n	800416e <HAL_RCC_OscConfig+0x2ba>
 800414c:	40021000 	.word	0x40021000
 8004150:	080074a4 	.word	0x080074a4
 8004154:	200000a8 	.word	0x200000a8
 8004158:	200000e4 	.word	0x200000e4
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800415c:	f7fe ffe4 	bl	8003128 <HAL_GetTick>
 8004160:	4602      	mov	r2, r0
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	1ad3      	subs	r3, r2, r3
 8004166:	2b64      	cmp	r3, #100	; 0x64
 8004168:	d901      	bls.n	800416e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800416a:	2303      	movs	r3, #3
 800416c:	e2bd      	b.n	80046ea <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800416e:	4baf      	ldr	r3, [pc, #700]	; (800442c <HAL_RCC_OscConfig+0x578>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004176:	2b00      	cmp	r3, #0
 8004178:	d0f0      	beq.n	800415c <HAL_RCC_OscConfig+0x2a8>
 800417a:	e014      	b.n	80041a6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800417c:	f7fe ffd4 	bl	8003128 <HAL_GetTick>
 8004180:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004182:	e008      	b.n	8004196 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004184:	f7fe ffd0 	bl	8003128 <HAL_GetTick>
 8004188:	4602      	mov	r2, r0
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	1ad3      	subs	r3, r2, r3
 800418e:	2b64      	cmp	r3, #100	; 0x64
 8004190:	d901      	bls.n	8004196 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004192:	2303      	movs	r3, #3
 8004194:	e2a9      	b.n	80046ea <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004196:	4ba5      	ldr	r3, [pc, #660]	; (800442c <HAL_RCC_OscConfig+0x578>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d1f0      	bne.n	8004184 <HAL_RCC_OscConfig+0x2d0>
 80041a2:	e000      	b.n	80041a6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f003 0302 	and.w	r3, r3, #2
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d060      	beq.n	8004274 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80041b2:	69bb      	ldr	r3, [r7, #24]
 80041b4:	2b04      	cmp	r3, #4
 80041b6:	d005      	beq.n	80041c4 <HAL_RCC_OscConfig+0x310>
 80041b8:	69bb      	ldr	r3, [r7, #24]
 80041ba:	2b0c      	cmp	r3, #12
 80041bc:	d119      	bne.n	80041f2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	2b02      	cmp	r3, #2
 80041c2:	d116      	bne.n	80041f2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80041c4:	4b99      	ldr	r3, [pc, #612]	; (800442c <HAL_RCC_OscConfig+0x578>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d005      	beq.n	80041dc <HAL_RCC_OscConfig+0x328>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	68db      	ldr	r3, [r3, #12]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d101      	bne.n	80041dc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80041d8:	2301      	movs	r3, #1
 80041da:	e286      	b.n	80046ea <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041dc:	4b93      	ldr	r3, [pc, #588]	; (800442c <HAL_RCC_OscConfig+0x578>)
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	691b      	ldr	r3, [r3, #16]
 80041e8:	061b      	lsls	r3, r3, #24
 80041ea:	4990      	ldr	r1, [pc, #576]	; (800442c <HAL_RCC_OscConfig+0x578>)
 80041ec:	4313      	orrs	r3, r2
 80041ee:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80041f0:	e040      	b.n	8004274 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	68db      	ldr	r3, [r3, #12]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d023      	beq.n	8004242 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041fa:	4b8c      	ldr	r3, [pc, #560]	; (800442c <HAL_RCC_OscConfig+0x578>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a8b      	ldr	r2, [pc, #556]	; (800442c <HAL_RCC_OscConfig+0x578>)
 8004200:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004204:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004206:	f7fe ff8f 	bl	8003128 <HAL_GetTick>
 800420a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800420c:	e008      	b.n	8004220 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800420e:	f7fe ff8b 	bl	8003128 <HAL_GetTick>
 8004212:	4602      	mov	r2, r0
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	1ad3      	subs	r3, r2, r3
 8004218:	2b02      	cmp	r3, #2
 800421a:	d901      	bls.n	8004220 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800421c:	2303      	movs	r3, #3
 800421e:	e264      	b.n	80046ea <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004220:	4b82      	ldr	r3, [pc, #520]	; (800442c <HAL_RCC_OscConfig+0x578>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004228:	2b00      	cmp	r3, #0
 800422a:	d0f0      	beq.n	800420e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800422c:	4b7f      	ldr	r3, [pc, #508]	; (800442c <HAL_RCC_OscConfig+0x578>)
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	691b      	ldr	r3, [r3, #16]
 8004238:	061b      	lsls	r3, r3, #24
 800423a:	497c      	ldr	r1, [pc, #496]	; (800442c <HAL_RCC_OscConfig+0x578>)
 800423c:	4313      	orrs	r3, r2
 800423e:	604b      	str	r3, [r1, #4]
 8004240:	e018      	b.n	8004274 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004242:	4b7a      	ldr	r3, [pc, #488]	; (800442c <HAL_RCC_OscConfig+0x578>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a79      	ldr	r2, [pc, #484]	; (800442c <HAL_RCC_OscConfig+0x578>)
 8004248:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800424c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800424e:	f7fe ff6b 	bl	8003128 <HAL_GetTick>
 8004252:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004254:	e008      	b.n	8004268 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004256:	f7fe ff67 	bl	8003128 <HAL_GetTick>
 800425a:	4602      	mov	r2, r0
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	1ad3      	subs	r3, r2, r3
 8004260:	2b02      	cmp	r3, #2
 8004262:	d901      	bls.n	8004268 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004264:	2303      	movs	r3, #3
 8004266:	e240      	b.n	80046ea <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004268:	4b70      	ldr	r3, [pc, #448]	; (800442c <HAL_RCC_OscConfig+0x578>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004270:	2b00      	cmp	r3, #0
 8004272:	d1f0      	bne.n	8004256 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f003 0308 	and.w	r3, r3, #8
 800427c:	2b00      	cmp	r3, #0
 800427e:	d03c      	beq.n	80042fa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	695b      	ldr	r3, [r3, #20]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d01c      	beq.n	80042c2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004288:	4b68      	ldr	r3, [pc, #416]	; (800442c <HAL_RCC_OscConfig+0x578>)
 800428a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800428e:	4a67      	ldr	r2, [pc, #412]	; (800442c <HAL_RCC_OscConfig+0x578>)
 8004290:	f043 0301 	orr.w	r3, r3, #1
 8004294:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004298:	f7fe ff46 	bl	8003128 <HAL_GetTick>
 800429c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800429e:	e008      	b.n	80042b2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042a0:	f7fe ff42 	bl	8003128 <HAL_GetTick>
 80042a4:	4602      	mov	r2, r0
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	1ad3      	subs	r3, r2, r3
 80042aa:	2b02      	cmp	r3, #2
 80042ac:	d901      	bls.n	80042b2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80042ae:	2303      	movs	r3, #3
 80042b0:	e21b      	b.n	80046ea <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80042b2:	4b5e      	ldr	r3, [pc, #376]	; (800442c <HAL_RCC_OscConfig+0x578>)
 80042b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042b8:	f003 0302 	and.w	r3, r3, #2
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d0ef      	beq.n	80042a0 <HAL_RCC_OscConfig+0x3ec>
 80042c0:	e01b      	b.n	80042fa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042c2:	4b5a      	ldr	r3, [pc, #360]	; (800442c <HAL_RCC_OscConfig+0x578>)
 80042c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042c8:	4a58      	ldr	r2, [pc, #352]	; (800442c <HAL_RCC_OscConfig+0x578>)
 80042ca:	f023 0301 	bic.w	r3, r3, #1
 80042ce:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042d2:	f7fe ff29 	bl	8003128 <HAL_GetTick>
 80042d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80042d8:	e008      	b.n	80042ec <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042da:	f7fe ff25 	bl	8003128 <HAL_GetTick>
 80042de:	4602      	mov	r2, r0
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	1ad3      	subs	r3, r2, r3
 80042e4:	2b02      	cmp	r3, #2
 80042e6:	d901      	bls.n	80042ec <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80042e8:	2303      	movs	r3, #3
 80042ea:	e1fe      	b.n	80046ea <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80042ec:	4b4f      	ldr	r3, [pc, #316]	; (800442c <HAL_RCC_OscConfig+0x578>)
 80042ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042f2:	f003 0302 	and.w	r3, r3, #2
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d1ef      	bne.n	80042da <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f003 0304 	and.w	r3, r3, #4
 8004302:	2b00      	cmp	r3, #0
 8004304:	f000 80a6 	beq.w	8004454 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004308:	2300      	movs	r3, #0
 800430a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800430c:	4b47      	ldr	r3, [pc, #284]	; (800442c <HAL_RCC_OscConfig+0x578>)
 800430e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004310:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004314:	2b00      	cmp	r3, #0
 8004316:	d10d      	bne.n	8004334 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004318:	4b44      	ldr	r3, [pc, #272]	; (800442c <HAL_RCC_OscConfig+0x578>)
 800431a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800431c:	4a43      	ldr	r2, [pc, #268]	; (800442c <HAL_RCC_OscConfig+0x578>)
 800431e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004322:	6593      	str	r3, [r2, #88]	; 0x58
 8004324:	4b41      	ldr	r3, [pc, #260]	; (800442c <HAL_RCC_OscConfig+0x578>)
 8004326:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004328:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800432c:	60bb      	str	r3, [r7, #8]
 800432e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004330:	2301      	movs	r3, #1
 8004332:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004334:	4b3e      	ldr	r3, [pc, #248]	; (8004430 <HAL_RCC_OscConfig+0x57c>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800433c:	2b00      	cmp	r3, #0
 800433e:	d118      	bne.n	8004372 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004340:	4b3b      	ldr	r3, [pc, #236]	; (8004430 <HAL_RCC_OscConfig+0x57c>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a3a      	ldr	r2, [pc, #232]	; (8004430 <HAL_RCC_OscConfig+0x57c>)
 8004346:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800434a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800434c:	f7fe feec 	bl	8003128 <HAL_GetTick>
 8004350:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004352:	e008      	b.n	8004366 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004354:	f7fe fee8 	bl	8003128 <HAL_GetTick>
 8004358:	4602      	mov	r2, r0
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	1ad3      	subs	r3, r2, r3
 800435e:	2b02      	cmp	r3, #2
 8004360:	d901      	bls.n	8004366 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004362:	2303      	movs	r3, #3
 8004364:	e1c1      	b.n	80046ea <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004366:	4b32      	ldr	r3, [pc, #200]	; (8004430 <HAL_RCC_OscConfig+0x57c>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800436e:	2b00      	cmp	r3, #0
 8004370:	d0f0      	beq.n	8004354 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	2b01      	cmp	r3, #1
 8004378:	d108      	bne.n	800438c <HAL_RCC_OscConfig+0x4d8>
 800437a:	4b2c      	ldr	r3, [pc, #176]	; (800442c <HAL_RCC_OscConfig+0x578>)
 800437c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004380:	4a2a      	ldr	r2, [pc, #168]	; (800442c <HAL_RCC_OscConfig+0x578>)
 8004382:	f043 0301 	orr.w	r3, r3, #1
 8004386:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800438a:	e024      	b.n	80043d6 <HAL_RCC_OscConfig+0x522>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	2b05      	cmp	r3, #5
 8004392:	d110      	bne.n	80043b6 <HAL_RCC_OscConfig+0x502>
 8004394:	4b25      	ldr	r3, [pc, #148]	; (800442c <HAL_RCC_OscConfig+0x578>)
 8004396:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800439a:	4a24      	ldr	r2, [pc, #144]	; (800442c <HAL_RCC_OscConfig+0x578>)
 800439c:	f043 0304 	orr.w	r3, r3, #4
 80043a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80043a4:	4b21      	ldr	r3, [pc, #132]	; (800442c <HAL_RCC_OscConfig+0x578>)
 80043a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043aa:	4a20      	ldr	r2, [pc, #128]	; (800442c <HAL_RCC_OscConfig+0x578>)
 80043ac:	f043 0301 	orr.w	r3, r3, #1
 80043b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80043b4:	e00f      	b.n	80043d6 <HAL_RCC_OscConfig+0x522>
 80043b6:	4b1d      	ldr	r3, [pc, #116]	; (800442c <HAL_RCC_OscConfig+0x578>)
 80043b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043bc:	4a1b      	ldr	r2, [pc, #108]	; (800442c <HAL_RCC_OscConfig+0x578>)
 80043be:	f023 0301 	bic.w	r3, r3, #1
 80043c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80043c6:	4b19      	ldr	r3, [pc, #100]	; (800442c <HAL_RCC_OscConfig+0x578>)
 80043c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043cc:	4a17      	ldr	r2, [pc, #92]	; (800442c <HAL_RCC_OscConfig+0x578>)
 80043ce:	f023 0304 	bic.w	r3, r3, #4
 80043d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d016      	beq.n	800440c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043de:	f7fe fea3 	bl	8003128 <HAL_GetTick>
 80043e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043e4:	e00a      	b.n	80043fc <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043e6:	f7fe fe9f 	bl	8003128 <HAL_GetTick>
 80043ea:	4602      	mov	r2, r0
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	1ad3      	subs	r3, r2, r3
 80043f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d901      	bls.n	80043fc <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80043f8:	2303      	movs	r3, #3
 80043fa:	e176      	b.n	80046ea <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043fc:	4b0b      	ldr	r3, [pc, #44]	; (800442c <HAL_RCC_OscConfig+0x578>)
 80043fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004402:	f003 0302 	and.w	r3, r3, #2
 8004406:	2b00      	cmp	r3, #0
 8004408:	d0ed      	beq.n	80043e6 <HAL_RCC_OscConfig+0x532>
 800440a:	e01a      	b.n	8004442 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800440c:	f7fe fe8c 	bl	8003128 <HAL_GetTick>
 8004410:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004412:	e00f      	b.n	8004434 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004414:	f7fe fe88 	bl	8003128 <HAL_GetTick>
 8004418:	4602      	mov	r2, r0
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	1ad3      	subs	r3, r2, r3
 800441e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004422:	4293      	cmp	r3, r2
 8004424:	d906      	bls.n	8004434 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004426:	2303      	movs	r3, #3
 8004428:	e15f      	b.n	80046ea <HAL_RCC_OscConfig+0x836>
 800442a:	bf00      	nop
 800442c:	40021000 	.word	0x40021000
 8004430:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004434:	4baa      	ldr	r3, [pc, #680]	; (80046e0 <HAL_RCC_OscConfig+0x82c>)
 8004436:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800443a:	f003 0302 	and.w	r3, r3, #2
 800443e:	2b00      	cmp	r3, #0
 8004440:	d1e8      	bne.n	8004414 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004442:	7ffb      	ldrb	r3, [r7, #31]
 8004444:	2b01      	cmp	r3, #1
 8004446:	d105      	bne.n	8004454 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004448:	4ba5      	ldr	r3, [pc, #660]	; (80046e0 <HAL_RCC_OscConfig+0x82c>)
 800444a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800444c:	4aa4      	ldr	r2, [pc, #656]	; (80046e0 <HAL_RCC_OscConfig+0x82c>)
 800444e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004452:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f003 0320 	and.w	r3, r3, #32
 800445c:	2b00      	cmp	r3, #0
 800445e:	d03c      	beq.n	80044da <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004464:	2b00      	cmp	r3, #0
 8004466:	d01c      	beq.n	80044a2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004468:	4b9d      	ldr	r3, [pc, #628]	; (80046e0 <HAL_RCC_OscConfig+0x82c>)
 800446a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800446e:	4a9c      	ldr	r2, [pc, #624]	; (80046e0 <HAL_RCC_OscConfig+0x82c>)
 8004470:	f043 0301 	orr.w	r3, r3, #1
 8004474:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004478:	f7fe fe56 	bl	8003128 <HAL_GetTick>
 800447c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800447e:	e008      	b.n	8004492 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004480:	f7fe fe52 	bl	8003128 <HAL_GetTick>
 8004484:	4602      	mov	r2, r0
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	1ad3      	subs	r3, r2, r3
 800448a:	2b02      	cmp	r3, #2
 800448c:	d901      	bls.n	8004492 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800448e:	2303      	movs	r3, #3
 8004490:	e12b      	b.n	80046ea <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004492:	4b93      	ldr	r3, [pc, #588]	; (80046e0 <HAL_RCC_OscConfig+0x82c>)
 8004494:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004498:	f003 0302 	and.w	r3, r3, #2
 800449c:	2b00      	cmp	r3, #0
 800449e:	d0ef      	beq.n	8004480 <HAL_RCC_OscConfig+0x5cc>
 80044a0:	e01b      	b.n	80044da <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80044a2:	4b8f      	ldr	r3, [pc, #572]	; (80046e0 <HAL_RCC_OscConfig+0x82c>)
 80044a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80044a8:	4a8d      	ldr	r2, [pc, #564]	; (80046e0 <HAL_RCC_OscConfig+0x82c>)
 80044aa:	f023 0301 	bic.w	r3, r3, #1
 80044ae:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044b2:	f7fe fe39 	bl	8003128 <HAL_GetTick>
 80044b6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80044b8:	e008      	b.n	80044cc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80044ba:	f7fe fe35 	bl	8003128 <HAL_GetTick>
 80044be:	4602      	mov	r2, r0
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	1ad3      	subs	r3, r2, r3
 80044c4:	2b02      	cmp	r3, #2
 80044c6:	d901      	bls.n	80044cc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80044c8:	2303      	movs	r3, #3
 80044ca:	e10e      	b.n	80046ea <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80044cc:	4b84      	ldr	r3, [pc, #528]	; (80046e0 <HAL_RCC_OscConfig+0x82c>)
 80044ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80044d2:	f003 0302 	and.w	r3, r3, #2
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d1ef      	bne.n	80044ba <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044de:	2b00      	cmp	r3, #0
 80044e0:	f000 8102 	beq.w	80046e8 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044e8:	2b02      	cmp	r3, #2
 80044ea:	f040 80c5 	bne.w	8004678 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80044ee:	4b7c      	ldr	r3, [pc, #496]	; (80046e0 <HAL_RCC_OscConfig+0x82c>)
 80044f0:	68db      	ldr	r3, [r3, #12]
 80044f2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	f003 0203 	and.w	r2, r3, #3
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044fe:	429a      	cmp	r2, r3
 8004500:	d12c      	bne.n	800455c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800450c:	3b01      	subs	r3, #1
 800450e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004510:	429a      	cmp	r2, r3
 8004512:	d123      	bne.n	800455c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800451e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004520:	429a      	cmp	r2, r3
 8004522:	d11b      	bne.n	800455c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800452e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004530:	429a      	cmp	r2, r3
 8004532:	d113      	bne.n	800455c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800453e:	085b      	lsrs	r3, r3, #1
 8004540:	3b01      	subs	r3, #1
 8004542:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004544:	429a      	cmp	r2, r3
 8004546:	d109      	bne.n	800455c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004552:	085b      	lsrs	r3, r3, #1
 8004554:	3b01      	subs	r3, #1
 8004556:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004558:	429a      	cmp	r2, r3
 800455a:	d067      	beq.n	800462c <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800455c:	69bb      	ldr	r3, [r7, #24]
 800455e:	2b0c      	cmp	r3, #12
 8004560:	d062      	beq.n	8004628 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004562:	4b5f      	ldr	r3, [pc, #380]	; (80046e0 <HAL_RCC_OscConfig+0x82c>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800456a:	2b00      	cmp	r3, #0
 800456c:	d001      	beq.n	8004572 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800456e:	2301      	movs	r3, #1
 8004570:	e0bb      	b.n	80046ea <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004572:	4b5b      	ldr	r3, [pc, #364]	; (80046e0 <HAL_RCC_OscConfig+0x82c>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a5a      	ldr	r2, [pc, #360]	; (80046e0 <HAL_RCC_OscConfig+0x82c>)
 8004578:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800457c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800457e:	f7fe fdd3 	bl	8003128 <HAL_GetTick>
 8004582:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004584:	e008      	b.n	8004598 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004586:	f7fe fdcf 	bl	8003128 <HAL_GetTick>
 800458a:	4602      	mov	r2, r0
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	1ad3      	subs	r3, r2, r3
 8004590:	2b02      	cmp	r3, #2
 8004592:	d901      	bls.n	8004598 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8004594:	2303      	movs	r3, #3
 8004596:	e0a8      	b.n	80046ea <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004598:	4b51      	ldr	r3, [pc, #324]	; (80046e0 <HAL_RCC_OscConfig+0x82c>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d1f0      	bne.n	8004586 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80045a4:	4b4e      	ldr	r3, [pc, #312]	; (80046e0 <HAL_RCC_OscConfig+0x82c>)
 80045a6:	68da      	ldr	r2, [r3, #12]
 80045a8:	4b4e      	ldr	r3, [pc, #312]	; (80046e4 <HAL_RCC_OscConfig+0x830>)
 80045aa:	4013      	ands	r3, r2
 80045ac:	687a      	ldr	r2, [r7, #4]
 80045ae:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80045b0:	687a      	ldr	r2, [r7, #4]
 80045b2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80045b4:	3a01      	subs	r2, #1
 80045b6:	0112      	lsls	r2, r2, #4
 80045b8:	4311      	orrs	r1, r2
 80045ba:	687a      	ldr	r2, [r7, #4]
 80045bc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80045be:	0212      	lsls	r2, r2, #8
 80045c0:	4311      	orrs	r1, r2
 80045c2:	687a      	ldr	r2, [r7, #4]
 80045c4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80045c6:	0852      	lsrs	r2, r2, #1
 80045c8:	3a01      	subs	r2, #1
 80045ca:	0552      	lsls	r2, r2, #21
 80045cc:	4311      	orrs	r1, r2
 80045ce:	687a      	ldr	r2, [r7, #4]
 80045d0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80045d2:	0852      	lsrs	r2, r2, #1
 80045d4:	3a01      	subs	r2, #1
 80045d6:	0652      	lsls	r2, r2, #25
 80045d8:	4311      	orrs	r1, r2
 80045da:	687a      	ldr	r2, [r7, #4]
 80045dc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80045de:	06d2      	lsls	r2, r2, #27
 80045e0:	430a      	orrs	r2, r1
 80045e2:	493f      	ldr	r1, [pc, #252]	; (80046e0 <HAL_RCC_OscConfig+0x82c>)
 80045e4:	4313      	orrs	r3, r2
 80045e6:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80045e8:	4b3d      	ldr	r3, [pc, #244]	; (80046e0 <HAL_RCC_OscConfig+0x82c>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a3c      	ldr	r2, [pc, #240]	; (80046e0 <HAL_RCC_OscConfig+0x82c>)
 80045ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80045f2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80045f4:	4b3a      	ldr	r3, [pc, #232]	; (80046e0 <HAL_RCC_OscConfig+0x82c>)
 80045f6:	68db      	ldr	r3, [r3, #12]
 80045f8:	4a39      	ldr	r2, [pc, #228]	; (80046e0 <HAL_RCC_OscConfig+0x82c>)
 80045fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80045fe:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004600:	f7fe fd92 	bl	8003128 <HAL_GetTick>
 8004604:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004606:	e008      	b.n	800461a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004608:	f7fe fd8e 	bl	8003128 <HAL_GetTick>
 800460c:	4602      	mov	r2, r0
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	1ad3      	subs	r3, r2, r3
 8004612:	2b02      	cmp	r3, #2
 8004614:	d901      	bls.n	800461a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8004616:	2303      	movs	r3, #3
 8004618:	e067      	b.n	80046ea <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800461a:	4b31      	ldr	r3, [pc, #196]	; (80046e0 <HAL_RCC_OscConfig+0x82c>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004622:	2b00      	cmp	r3, #0
 8004624:	d0f0      	beq.n	8004608 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004626:	e05f      	b.n	80046e8 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004628:	2301      	movs	r3, #1
 800462a:	e05e      	b.n	80046ea <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800462c:	4b2c      	ldr	r3, [pc, #176]	; (80046e0 <HAL_RCC_OscConfig+0x82c>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004634:	2b00      	cmp	r3, #0
 8004636:	d157      	bne.n	80046e8 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004638:	4b29      	ldr	r3, [pc, #164]	; (80046e0 <HAL_RCC_OscConfig+0x82c>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a28      	ldr	r2, [pc, #160]	; (80046e0 <HAL_RCC_OscConfig+0x82c>)
 800463e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004642:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004644:	4b26      	ldr	r3, [pc, #152]	; (80046e0 <HAL_RCC_OscConfig+0x82c>)
 8004646:	68db      	ldr	r3, [r3, #12]
 8004648:	4a25      	ldr	r2, [pc, #148]	; (80046e0 <HAL_RCC_OscConfig+0x82c>)
 800464a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800464e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004650:	f7fe fd6a 	bl	8003128 <HAL_GetTick>
 8004654:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004656:	e008      	b.n	800466a <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004658:	f7fe fd66 	bl	8003128 <HAL_GetTick>
 800465c:	4602      	mov	r2, r0
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	1ad3      	subs	r3, r2, r3
 8004662:	2b02      	cmp	r3, #2
 8004664:	d901      	bls.n	800466a <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8004666:	2303      	movs	r3, #3
 8004668:	e03f      	b.n	80046ea <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800466a:	4b1d      	ldr	r3, [pc, #116]	; (80046e0 <HAL_RCC_OscConfig+0x82c>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004672:	2b00      	cmp	r3, #0
 8004674:	d0f0      	beq.n	8004658 <HAL_RCC_OscConfig+0x7a4>
 8004676:	e037      	b.n	80046e8 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004678:	69bb      	ldr	r3, [r7, #24]
 800467a:	2b0c      	cmp	r3, #12
 800467c:	d02d      	beq.n	80046da <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800467e:	4b18      	ldr	r3, [pc, #96]	; (80046e0 <HAL_RCC_OscConfig+0x82c>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a17      	ldr	r2, [pc, #92]	; (80046e0 <HAL_RCC_OscConfig+0x82c>)
 8004684:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004688:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800468a:	4b15      	ldr	r3, [pc, #84]	; (80046e0 <HAL_RCC_OscConfig+0x82c>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004692:	2b00      	cmp	r3, #0
 8004694:	d105      	bne.n	80046a2 <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004696:	4b12      	ldr	r3, [pc, #72]	; (80046e0 <HAL_RCC_OscConfig+0x82c>)
 8004698:	68db      	ldr	r3, [r3, #12]
 800469a:	4a11      	ldr	r2, [pc, #68]	; (80046e0 <HAL_RCC_OscConfig+0x82c>)
 800469c:	f023 0303 	bic.w	r3, r3, #3
 80046a0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80046a2:	4b0f      	ldr	r3, [pc, #60]	; (80046e0 <HAL_RCC_OscConfig+0x82c>)
 80046a4:	68db      	ldr	r3, [r3, #12]
 80046a6:	4a0e      	ldr	r2, [pc, #56]	; (80046e0 <HAL_RCC_OscConfig+0x82c>)
 80046a8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80046ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046b0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046b2:	f7fe fd39 	bl	8003128 <HAL_GetTick>
 80046b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046b8:	e008      	b.n	80046cc <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046ba:	f7fe fd35 	bl	8003128 <HAL_GetTick>
 80046be:	4602      	mov	r2, r0
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	1ad3      	subs	r3, r2, r3
 80046c4:	2b02      	cmp	r3, #2
 80046c6:	d901      	bls.n	80046cc <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 80046c8:	2303      	movs	r3, #3
 80046ca:	e00e      	b.n	80046ea <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046cc:	4b04      	ldr	r3, [pc, #16]	; (80046e0 <HAL_RCC_OscConfig+0x82c>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d1f0      	bne.n	80046ba <HAL_RCC_OscConfig+0x806>
 80046d8:	e006      	b.n	80046e8 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80046da:	2301      	movs	r3, #1
 80046dc:	e005      	b.n	80046ea <HAL_RCC_OscConfig+0x836>
 80046de:	bf00      	nop
 80046e0:	40021000 	.word	0x40021000
 80046e4:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 80046e8:	2300      	movs	r3, #0
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	3720      	adds	r7, #32
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}
 80046f2:	bf00      	nop

080046f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b084      	sub	sp, #16
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
 80046fc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d101      	bne.n	8004708 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004704:	2301      	movs	r3, #1
 8004706:	e0c8      	b.n	800489a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004708:	4b66      	ldr	r3, [pc, #408]	; (80048a4 <HAL_RCC_ClockConfig+0x1b0>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f003 0307 	and.w	r3, r3, #7
 8004710:	683a      	ldr	r2, [r7, #0]
 8004712:	429a      	cmp	r2, r3
 8004714:	d910      	bls.n	8004738 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004716:	4b63      	ldr	r3, [pc, #396]	; (80048a4 <HAL_RCC_ClockConfig+0x1b0>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f023 0207 	bic.w	r2, r3, #7
 800471e:	4961      	ldr	r1, [pc, #388]	; (80048a4 <HAL_RCC_ClockConfig+0x1b0>)
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	4313      	orrs	r3, r2
 8004724:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004726:	4b5f      	ldr	r3, [pc, #380]	; (80048a4 <HAL_RCC_ClockConfig+0x1b0>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f003 0307 	and.w	r3, r3, #7
 800472e:	683a      	ldr	r2, [r7, #0]
 8004730:	429a      	cmp	r2, r3
 8004732:	d001      	beq.n	8004738 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004734:	2301      	movs	r3, #1
 8004736:	e0b0      	b.n	800489a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f003 0301 	and.w	r3, r3, #1
 8004740:	2b00      	cmp	r3, #0
 8004742:	d04c      	beq.n	80047de <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	2b03      	cmp	r3, #3
 800474a:	d107      	bne.n	800475c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800474c:	4b56      	ldr	r3, [pc, #344]	; (80048a8 <HAL_RCC_ClockConfig+0x1b4>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004754:	2b00      	cmp	r3, #0
 8004756:	d121      	bne.n	800479c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8004758:	2301      	movs	r3, #1
 800475a:	e09e      	b.n	800489a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	2b02      	cmp	r3, #2
 8004762:	d107      	bne.n	8004774 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004764:	4b50      	ldr	r3, [pc, #320]	; (80048a8 <HAL_RCC_ClockConfig+0x1b4>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800476c:	2b00      	cmp	r3, #0
 800476e:	d115      	bne.n	800479c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004770:	2301      	movs	r3, #1
 8004772:	e092      	b.n	800489a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d107      	bne.n	800478c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800477c:	4b4a      	ldr	r3, [pc, #296]	; (80048a8 <HAL_RCC_ClockConfig+0x1b4>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f003 0302 	and.w	r3, r3, #2
 8004784:	2b00      	cmp	r3, #0
 8004786:	d109      	bne.n	800479c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004788:	2301      	movs	r3, #1
 800478a:	e086      	b.n	800489a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800478c:	4b46      	ldr	r3, [pc, #280]	; (80048a8 <HAL_RCC_ClockConfig+0x1b4>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004794:	2b00      	cmp	r3, #0
 8004796:	d101      	bne.n	800479c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004798:	2301      	movs	r3, #1
 800479a:	e07e      	b.n	800489a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800479c:	4b42      	ldr	r3, [pc, #264]	; (80048a8 <HAL_RCC_ClockConfig+0x1b4>)
 800479e:	689b      	ldr	r3, [r3, #8]
 80047a0:	f023 0203 	bic.w	r2, r3, #3
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	493f      	ldr	r1, [pc, #252]	; (80048a8 <HAL_RCC_ClockConfig+0x1b4>)
 80047aa:	4313      	orrs	r3, r2
 80047ac:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047ae:	f7fe fcbb 	bl	8003128 <HAL_GetTick>
 80047b2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047b4:	e00a      	b.n	80047cc <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047b6:	f7fe fcb7 	bl	8003128 <HAL_GetTick>
 80047ba:	4602      	mov	r2, r0
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	1ad3      	subs	r3, r2, r3
 80047c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d901      	bls.n	80047cc <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80047c8:	2303      	movs	r3, #3
 80047ca:	e066      	b.n	800489a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047cc:	4b36      	ldr	r3, [pc, #216]	; (80048a8 <HAL_RCC_ClockConfig+0x1b4>)
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	f003 020c 	and.w	r2, r3, #12
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	009b      	lsls	r3, r3, #2
 80047da:	429a      	cmp	r2, r3
 80047dc:	d1eb      	bne.n	80047b6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f003 0302 	and.w	r3, r3, #2
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d008      	beq.n	80047fc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047ea:	4b2f      	ldr	r3, [pc, #188]	; (80048a8 <HAL_RCC_ClockConfig+0x1b4>)
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	492c      	ldr	r1, [pc, #176]	; (80048a8 <HAL_RCC_ClockConfig+0x1b4>)
 80047f8:	4313      	orrs	r3, r2
 80047fa:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80047fc:	4b29      	ldr	r3, [pc, #164]	; (80048a4 <HAL_RCC_ClockConfig+0x1b0>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f003 0307 	and.w	r3, r3, #7
 8004804:	683a      	ldr	r2, [r7, #0]
 8004806:	429a      	cmp	r2, r3
 8004808:	d210      	bcs.n	800482c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800480a:	4b26      	ldr	r3, [pc, #152]	; (80048a4 <HAL_RCC_ClockConfig+0x1b0>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f023 0207 	bic.w	r2, r3, #7
 8004812:	4924      	ldr	r1, [pc, #144]	; (80048a4 <HAL_RCC_ClockConfig+0x1b0>)
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	4313      	orrs	r3, r2
 8004818:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800481a:	4b22      	ldr	r3, [pc, #136]	; (80048a4 <HAL_RCC_ClockConfig+0x1b0>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f003 0307 	and.w	r3, r3, #7
 8004822:	683a      	ldr	r2, [r7, #0]
 8004824:	429a      	cmp	r2, r3
 8004826:	d001      	beq.n	800482c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8004828:	2301      	movs	r3, #1
 800482a:	e036      	b.n	800489a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f003 0304 	and.w	r3, r3, #4
 8004834:	2b00      	cmp	r3, #0
 8004836:	d008      	beq.n	800484a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004838:	4b1b      	ldr	r3, [pc, #108]	; (80048a8 <HAL_RCC_ClockConfig+0x1b4>)
 800483a:	689b      	ldr	r3, [r3, #8]
 800483c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	68db      	ldr	r3, [r3, #12]
 8004844:	4918      	ldr	r1, [pc, #96]	; (80048a8 <HAL_RCC_ClockConfig+0x1b4>)
 8004846:	4313      	orrs	r3, r2
 8004848:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f003 0308 	and.w	r3, r3, #8
 8004852:	2b00      	cmp	r3, #0
 8004854:	d009      	beq.n	800486a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004856:	4b14      	ldr	r3, [pc, #80]	; (80048a8 <HAL_RCC_ClockConfig+0x1b4>)
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	691b      	ldr	r3, [r3, #16]
 8004862:	00db      	lsls	r3, r3, #3
 8004864:	4910      	ldr	r1, [pc, #64]	; (80048a8 <HAL_RCC_ClockConfig+0x1b4>)
 8004866:	4313      	orrs	r3, r2
 8004868:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800486a:	f000 f825 	bl	80048b8 <HAL_RCC_GetSysClockFreq>
 800486e:	4601      	mov	r1, r0
 8004870:	4b0d      	ldr	r3, [pc, #52]	; (80048a8 <HAL_RCC_ClockConfig+0x1b4>)
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	091b      	lsrs	r3, r3, #4
 8004876:	f003 030f 	and.w	r3, r3, #15
 800487a:	4a0c      	ldr	r2, [pc, #48]	; (80048ac <HAL_RCC_ClockConfig+0x1b8>)
 800487c:	5cd3      	ldrb	r3, [r2, r3]
 800487e:	f003 031f 	and.w	r3, r3, #31
 8004882:	fa21 f303 	lsr.w	r3, r1, r3
 8004886:	4a0a      	ldr	r2, [pc, #40]	; (80048b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004888:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800488a:	4b0a      	ldr	r3, [pc, #40]	; (80048b4 <HAL_RCC_ClockConfig+0x1c0>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4618      	mov	r0, r3
 8004890:	f7fe fbfe 	bl	8003090 <HAL_InitTick>
 8004894:	4603      	mov	r3, r0
 8004896:	72fb      	strb	r3, [r7, #11]

  return status;
 8004898:	7afb      	ldrb	r3, [r7, #11]
}
 800489a:	4618      	mov	r0, r3
 800489c:	3710      	adds	r7, #16
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}
 80048a2:	bf00      	nop
 80048a4:	40022000 	.word	0x40022000
 80048a8:	40021000 	.word	0x40021000
 80048ac:	080074a4 	.word	0x080074a4
 80048b0:	200000a8 	.word	0x200000a8
 80048b4:	200000e4 	.word	0x200000e4

080048b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b089      	sub	sp, #36	; 0x24
 80048bc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80048be:	2300      	movs	r3, #0
 80048c0:	61fb      	str	r3, [r7, #28]
 80048c2:	2300      	movs	r3, #0
 80048c4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80048c6:	4b3d      	ldr	r3, [pc, #244]	; (80049bc <HAL_RCC_GetSysClockFreq+0x104>)
 80048c8:	689b      	ldr	r3, [r3, #8]
 80048ca:	f003 030c 	and.w	r3, r3, #12
 80048ce:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80048d0:	4b3a      	ldr	r3, [pc, #232]	; (80049bc <HAL_RCC_GetSysClockFreq+0x104>)
 80048d2:	68db      	ldr	r3, [r3, #12]
 80048d4:	f003 0303 	and.w	r3, r3, #3
 80048d8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d005      	beq.n	80048ec <HAL_RCC_GetSysClockFreq+0x34>
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	2b0c      	cmp	r3, #12
 80048e4:	d121      	bne.n	800492a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2b01      	cmp	r3, #1
 80048ea:	d11e      	bne.n	800492a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80048ec:	4b33      	ldr	r3, [pc, #204]	; (80049bc <HAL_RCC_GetSysClockFreq+0x104>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f003 0308 	and.w	r3, r3, #8
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d107      	bne.n	8004908 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80048f8:	4b30      	ldr	r3, [pc, #192]	; (80049bc <HAL_RCC_GetSysClockFreq+0x104>)
 80048fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048fe:	0a1b      	lsrs	r3, r3, #8
 8004900:	f003 030f 	and.w	r3, r3, #15
 8004904:	61fb      	str	r3, [r7, #28]
 8004906:	e005      	b.n	8004914 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004908:	4b2c      	ldr	r3, [pc, #176]	; (80049bc <HAL_RCC_GetSysClockFreq+0x104>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	091b      	lsrs	r3, r3, #4
 800490e:	f003 030f 	and.w	r3, r3, #15
 8004912:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004914:	4a2a      	ldr	r2, [pc, #168]	; (80049c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004916:	69fb      	ldr	r3, [r7, #28]
 8004918:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800491c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d10d      	bne.n	8004940 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004924:	69fb      	ldr	r3, [r7, #28]
 8004926:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004928:	e00a      	b.n	8004940 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	2b04      	cmp	r3, #4
 800492e:	d102      	bne.n	8004936 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004930:	4b24      	ldr	r3, [pc, #144]	; (80049c4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004932:	61bb      	str	r3, [r7, #24]
 8004934:	e004      	b.n	8004940 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	2b08      	cmp	r3, #8
 800493a:	d101      	bne.n	8004940 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800493c:	4b22      	ldr	r3, [pc, #136]	; (80049c8 <HAL_RCC_GetSysClockFreq+0x110>)
 800493e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	2b0c      	cmp	r3, #12
 8004944:	d133      	bne.n	80049ae <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004946:	4b1d      	ldr	r3, [pc, #116]	; (80049bc <HAL_RCC_GetSysClockFreq+0x104>)
 8004948:	68db      	ldr	r3, [r3, #12]
 800494a:	f003 0303 	and.w	r3, r3, #3
 800494e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	2b02      	cmp	r3, #2
 8004954:	d002      	beq.n	800495c <HAL_RCC_GetSysClockFreq+0xa4>
 8004956:	2b03      	cmp	r3, #3
 8004958:	d003      	beq.n	8004962 <HAL_RCC_GetSysClockFreq+0xaa>
 800495a:	e005      	b.n	8004968 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800495c:	4b19      	ldr	r3, [pc, #100]	; (80049c4 <HAL_RCC_GetSysClockFreq+0x10c>)
 800495e:	617b      	str	r3, [r7, #20]
      break;
 8004960:	e005      	b.n	800496e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004962:	4b19      	ldr	r3, [pc, #100]	; (80049c8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004964:	617b      	str	r3, [r7, #20]
      break;
 8004966:	e002      	b.n	800496e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004968:	69fb      	ldr	r3, [r7, #28]
 800496a:	617b      	str	r3, [r7, #20]
      break;
 800496c:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800496e:	4b13      	ldr	r3, [pc, #76]	; (80049bc <HAL_RCC_GetSysClockFreq+0x104>)
 8004970:	68db      	ldr	r3, [r3, #12]
 8004972:	091b      	lsrs	r3, r3, #4
 8004974:	f003 0307 	and.w	r3, r3, #7
 8004978:	3301      	adds	r3, #1
 800497a:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800497c:	4b0f      	ldr	r3, [pc, #60]	; (80049bc <HAL_RCC_GetSysClockFreq+0x104>)
 800497e:	68db      	ldr	r3, [r3, #12]
 8004980:	0a1b      	lsrs	r3, r3, #8
 8004982:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004986:	697a      	ldr	r2, [r7, #20]
 8004988:	fb02 f203 	mul.w	r2, r2, r3
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004992:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004994:	4b09      	ldr	r3, [pc, #36]	; (80049bc <HAL_RCC_GetSysClockFreq+0x104>)
 8004996:	68db      	ldr	r3, [r3, #12]
 8004998:	0e5b      	lsrs	r3, r3, #25
 800499a:	f003 0303 	and.w	r3, r3, #3
 800499e:	3301      	adds	r3, #1
 80049a0:	005b      	lsls	r3, r3, #1
 80049a2:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80049a4:	697a      	ldr	r2, [r7, #20]
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80049ac:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80049ae:	69bb      	ldr	r3, [r7, #24]
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	3724      	adds	r7, #36	; 0x24
 80049b4:	46bd      	mov	sp, r7
 80049b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ba:	4770      	bx	lr
 80049bc:	40021000 	.word	0x40021000
 80049c0:	080074bc 	.word	0x080074bc
 80049c4:	00f42400 	.word	0x00f42400
 80049c8:	007a1200 	.word	0x007a1200

080049cc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049cc:	b480      	push	{r7}
 80049ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80049d0:	4b03      	ldr	r3, [pc, #12]	; (80049e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80049d2:	681b      	ldr	r3, [r3, #0]
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	46bd      	mov	sp, r7
 80049d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049dc:	4770      	bx	lr
 80049de:	bf00      	nop
 80049e0:	200000a8 	.word	0x200000a8

080049e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80049e8:	f7ff fff0 	bl	80049cc <HAL_RCC_GetHCLKFreq>
 80049ec:	4601      	mov	r1, r0
 80049ee:	4b06      	ldr	r3, [pc, #24]	; (8004a08 <HAL_RCC_GetPCLK1Freq+0x24>)
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	0a1b      	lsrs	r3, r3, #8
 80049f4:	f003 0307 	and.w	r3, r3, #7
 80049f8:	4a04      	ldr	r2, [pc, #16]	; (8004a0c <HAL_RCC_GetPCLK1Freq+0x28>)
 80049fa:	5cd3      	ldrb	r3, [r2, r3]
 80049fc:	f003 031f 	and.w	r3, r3, #31
 8004a00:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	bd80      	pop	{r7, pc}
 8004a08:	40021000 	.word	0x40021000
 8004a0c:	080074b4 	.word	0x080074b4

08004a10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004a14:	f7ff ffda 	bl	80049cc <HAL_RCC_GetHCLKFreq>
 8004a18:	4601      	mov	r1, r0
 8004a1a:	4b06      	ldr	r3, [pc, #24]	; (8004a34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	0adb      	lsrs	r3, r3, #11
 8004a20:	f003 0307 	and.w	r3, r3, #7
 8004a24:	4a04      	ldr	r2, [pc, #16]	; (8004a38 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004a26:	5cd3      	ldrb	r3, [r2, r3]
 8004a28:	f003 031f 	and.w	r3, r3, #31
 8004a2c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	bd80      	pop	{r7, pc}
 8004a34:	40021000 	.word	0x40021000
 8004a38:	080074b4 	.word	0x080074b4

08004a3c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b086      	sub	sp, #24
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004a44:	2300      	movs	r3, #0
 8004a46:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004a48:	4b2a      	ldr	r3, [pc, #168]	; (8004af4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004a4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d003      	beq.n	8004a5c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004a54:	f7ff f9ca 	bl	8003dec <HAL_PWREx_GetVoltageRange>
 8004a58:	6178      	str	r0, [r7, #20]
 8004a5a:	e014      	b.n	8004a86 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004a5c:	4b25      	ldr	r3, [pc, #148]	; (8004af4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004a5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a60:	4a24      	ldr	r2, [pc, #144]	; (8004af4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004a62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a66:	6593      	str	r3, [r2, #88]	; 0x58
 8004a68:	4b22      	ldr	r3, [pc, #136]	; (8004af4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004a6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a70:	60fb      	str	r3, [r7, #12]
 8004a72:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004a74:	f7ff f9ba 	bl	8003dec <HAL_PWREx_GetVoltageRange>
 8004a78:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004a7a:	4b1e      	ldr	r3, [pc, #120]	; (8004af4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004a7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a7e:	4a1d      	ldr	r2, [pc, #116]	; (8004af4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004a80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a84:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a8c:	d10b      	bne.n	8004aa6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2b80      	cmp	r3, #128	; 0x80
 8004a92:	d919      	bls.n	8004ac8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2ba0      	cmp	r3, #160	; 0xa0
 8004a98:	d902      	bls.n	8004aa0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004a9a:	2302      	movs	r3, #2
 8004a9c:	613b      	str	r3, [r7, #16]
 8004a9e:	e013      	b.n	8004ac8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	613b      	str	r3, [r7, #16]
 8004aa4:	e010      	b.n	8004ac8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2b80      	cmp	r3, #128	; 0x80
 8004aaa:	d902      	bls.n	8004ab2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004aac:	2303      	movs	r3, #3
 8004aae:	613b      	str	r3, [r7, #16]
 8004ab0:	e00a      	b.n	8004ac8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2b80      	cmp	r3, #128	; 0x80
 8004ab6:	d102      	bne.n	8004abe <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004ab8:	2302      	movs	r3, #2
 8004aba:	613b      	str	r3, [r7, #16]
 8004abc:	e004      	b.n	8004ac8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2b70      	cmp	r3, #112	; 0x70
 8004ac2:	d101      	bne.n	8004ac8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004ac8:	4b0b      	ldr	r3, [pc, #44]	; (8004af8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f023 0207 	bic.w	r2, r3, #7
 8004ad0:	4909      	ldr	r1, [pc, #36]	; (8004af8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004ad8:	4b07      	ldr	r3, [pc, #28]	; (8004af8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f003 0307 	and.w	r3, r3, #7
 8004ae0:	693a      	ldr	r2, [r7, #16]
 8004ae2:	429a      	cmp	r2, r3
 8004ae4:	d001      	beq.n	8004aea <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	e000      	b.n	8004aec <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004aea:	2300      	movs	r3, #0
}
 8004aec:	4618      	mov	r0, r3
 8004aee:	3718      	adds	r7, #24
 8004af0:	46bd      	mov	sp, r7
 8004af2:	bd80      	pop	{r7, pc}
 8004af4:	40021000 	.word	0x40021000
 8004af8:	40022000 	.word	0x40022000

08004afc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b086      	sub	sp, #24
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004b04:	2300      	movs	r3, #0
 8004b06:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004b08:	2300      	movs	r3, #0
 8004b0a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d02f      	beq.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b1c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004b20:	d005      	beq.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8004b22:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004b26:	d015      	beq.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x58>
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d007      	beq.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x40>
 8004b2c:	e00f      	b.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0x52>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8004b2e:	4b5d      	ldr	r3, [pc, #372]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004b30:	68db      	ldr	r3, [r3, #12]
 8004b32:	4a5c      	ldr	r2, [pc, #368]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004b34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b38:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004b3a:	e00c      	b.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x5a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	3304      	adds	r3, #4
 8004b40:	2100      	movs	r1, #0
 8004b42:	4618      	mov	r0, r3
 8004b44:	f000 fa1e 	bl	8004f84 <RCCEx_PLLSAI1_Config>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004b4c:	e003      	b.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x5a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	74fb      	strb	r3, [r7, #19]
      break;
 8004b52:	e000      	b.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x5a>
      break;
 8004b54:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b56:	7cfb      	ldrb	r3, [r7, #19]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d10b      	bne.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004b5c:	4b51      	ldr	r3, [pc, #324]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004b5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b62:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b6a:	494e      	ldr	r1, [pc, #312]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004b72:	e001      	b.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b74:	7cfb      	ldrb	r3, [r7, #19]
 8004b76:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	f000 809e 	beq.w	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b86:	2300      	movs	r3, #0
 8004b88:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004b8a:	4b46      	ldr	r3, [pc, #280]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004b8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d101      	bne.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8004b96:	2301      	movs	r3, #1
 8004b98:	e000      	b.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d00d      	beq.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ba0:	4b40      	ldr	r3, [pc, #256]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004ba2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ba4:	4a3f      	ldr	r2, [pc, #252]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004ba6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004baa:	6593      	str	r3, [r2, #88]	; 0x58
 8004bac:	4b3d      	ldr	r3, [pc, #244]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004bae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bb4:	60bb      	str	r3, [r7, #8]
 8004bb6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004bbc:	4b3a      	ldr	r3, [pc, #232]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a39      	ldr	r2, [pc, #228]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004bc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bc6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004bc8:	f7fe faae 	bl	8003128 <HAL_GetTick>
 8004bcc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004bce:	e009      	b.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bd0:	f7fe faaa 	bl	8003128 <HAL_GetTick>
 8004bd4:	4602      	mov	r2, r0
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	1ad3      	subs	r3, r2, r3
 8004bda:	2b02      	cmp	r3, #2
 8004bdc:	d902      	bls.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        ret = HAL_TIMEOUT;
 8004bde:	2303      	movs	r3, #3
 8004be0:	74fb      	strb	r3, [r7, #19]
        break;
 8004be2:	e005      	b.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004be4:	4b30      	ldr	r3, [pc, #192]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d0ef      	beq.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      }
    }

    if(ret == HAL_OK)
 8004bf0:	7cfb      	ldrb	r3, [r7, #19]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d15a      	bne.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004bf6:	4b2b      	ldr	r3, [pc, #172]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004bf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bfc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c00:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d01e      	beq.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c0c:	697a      	ldr	r2, [r7, #20]
 8004c0e:	429a      	cmp	r2, r3
 8004c10:	d019      	beq.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x14a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004c12:	4b24      	ldr	r3, [pc, #144]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004c14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c1c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004c1e:	4b21      	ldr	r3, [pc, #132]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004c20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c24:	4a1f      	ldr	r2, [pc, #124]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004c26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c2a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004c2e:	4b1d      	ldr	r3, [pc, #116]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004c30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c34:	4a1b      	ldr	r2, [pc, #108]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004c36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004c3e:	4a19      	ldr	r2, [pc, #100]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	f003 0301 	and.w	r3, r3, #1
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d016      	beq.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0x182>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c50:	f7fe fa6a 	bl	8003128 <HAL_GetTick>
 8004c54:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c56:	e00b      	b.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0x174>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c58:	f7fe fa66 	bl	8003128 <HAL_GetTick>
 8004c5c:	4602      	mov	r2, r0
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	1ad3      	subs	r3, r2, r3
 8004c62:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d902      	bls.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0x174>
          {
            ret = HAL_TIMEOUT;
 8004c6a:	2303      	movs	r3, #3
 8004c6c:	74fb      	strb	r3, [r7, #19]
            break;
 8004c6e:	e006      	b.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0x182>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c70:	4b0c      	ldr	r3, [pc, #48]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004c72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c76:	f003 0302 	and.w	r3, r3, #2
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d0ec      	beq.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x15c>
          }
        }
      }

      if(ret == HAL_OK)
 8004c7e:	7cfb      	ldrb	r3, [r7, #19]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d10b      	bne.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c84:	4b07      	ldr	r3, [pc, #28]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004c86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c8a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c92:	4904      	ldr	r1, [pc, #16]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004c94:	4313      	orrs	r3, r2
 8004c96:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004c9a:	e009      	b.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004c9c:	7cfb      	ldrb	r3, [r7, #19]
 8004c9e:	74bb      	strb	r3, [r7, #18]
 8004ca0:	e006      	b.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8004ca2:	bf00      	nop
 8004ca4:	40021000 	.word	0x40021000
 8004ca8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cac:	7cfb      	ldrb	r3, [r7, #19]
 8004cae:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004cb0:	7c7b      	ldrb	r3, [r7, #17]
 8004cb2:	2b01      	cmp	r3, #1
 8004cb4:	d105      	bne.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004cb6:	4bb2      	ldr	r3, [pc, #712]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8004cb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cba:	4ab1      	ldr	r2, [pc, #708]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8004cbc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004cc0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f003 0301 	and.w	r3, r3, #1
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d00a      	beq.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004cce:	4bac      	ldr	r3, [pc, #688]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8004cd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cd4:	f023 0203 	bic.w	r2, r3, #3
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6a1b      	ldr	r3, [r3, #32]
 8004cdc:	49a8      	ldr	r1, [pc, #672]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f003 0302 	and.w	r3, r3, #2
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d00a      	beq.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x20a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004cf0:	4ba3      	ldr	r3, [pc, #652]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8004cf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cf6:	f023 020c 	bic.w	r2, r3, #12
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cfe:	49a0      	ldr	r1, [pc, #640]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8004d00:	4313      	orrs	r3, r2
 8004d02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f003 0304 	and.w	r3, r3, #4
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d00a      	beq.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004d12:	4b9b      	ldr	r3, [pc, #620]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8004d14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d18:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d20:	4997      	ldr	r1, [pc, #604]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8004d22:	4313      	orrs	r3, r2
 8004d24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f003 0320 	and.w	r3, r3, #32
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d00a      	beq.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0x24e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004d34:	4b92      	ldr	r3, [pc, #584]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8004d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d3a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d42:	498f      	ldr	r1, [pc, #572]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8004d44:	4313      	orrs	r3, r2
 8004d46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d00a      	beq.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x270>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004d56:	4b8a      	ldr	r3, [pc, #552]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8004d58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d5c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d64:	4986      	ldr	r1, [pc, #536]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8004d66:	4313      	orrs	r3, r2
 8004d68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d00a      	beq.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004d78:	4b81      	ldr	r3, [pc, #516]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8004d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d7e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d86:	497e      	ldr	r1, [pc, #504]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d00a      	beq.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004d9a:	4b79      	ldr	r3, [pc, #484]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8004d9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004da0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004da8:	4975      	ldr	r1, [pc, #468]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8004daa:	4313      	orrs	r3, r2
 8004dac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d00a      	beq.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004dbc:	4b70      	ldr	r3, [pc, #448]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8004dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dc2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dca:	496d      	ldr	r1, [pc, #436]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d00a      	beq.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004dde:	4b68      	ldr	r3, [pc, #416]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8004de0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004de4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dec:	4964      	ldr	r1, [pc, #400]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8004dee:	4313      	orrs	r3, r2
 8004df0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d028      	beq.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x356>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004e00:	4b5f      	ldr	r3, [pc, #380]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8004e02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e06:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e0e:	495c      	ldr	r1, [pc, #368]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8004e10:	4313      	orrs	r3, r2
 8004e12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e1a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e1e:	d106      	bne.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x332>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e20:	4b57      	ldr	r3, [pc, #348]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8004e22:	68db      	ldr	r3, [r3, #12]
 8004e24:	4a56      	ldr	r2, [pc, #344]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8004e26:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e2a:	60d3      	str	r3, [r2, #12]
 8004e2c:	e011      	b.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x356>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e32:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e36:	d10c      	bne.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x356>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	3304      	adds	r3, #4
 8004e3c:	2101      	movs	r1, #1
 8004e3e:	4618      	mov	r0, r3
 8004e40:	f000 f8a0 	bl	8004f84 <RCCEx_PLLSAI1_Config>
 8004e44:	4603      	mov	r3, r0
 8004e46:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004e48:	7cfb      	ldrb	r3, [r7, #19]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d001      	beq.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x356>
        {
          /* set overall return value */
          status = ret;
 8004e4e:	7cfb      	ldrb	r3, [r7, #19]
 8004e50:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d028      	beq.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004e5e:	4b48      	ldr	r3, [pc, #288]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8004e60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e64:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e6c:	4944      	ldr	r1, [pc, #272]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e78:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e7c:	d106      	bne.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x390>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e7e:	4b40      	ldr	r3, [pc, #256]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8004e80:	68db      	ldr	r3, [r3, #12]
 8004e82:	4a3f      	ldr	r2, [pc, #252]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8004e84:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e88:	60d3      	str	r3, [r2, #12]
 8004e8a:	e011      	b.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e90:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e94:	d10c      	bne.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	3304      	adds	r3, #4
 8004e9a:	2101      	movs	r1, #1
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	f000 f871 	bl	8004f84 <RCCEx_PLLSAI1_Config>
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004ea6:	7cfb      	ldrb	r3, [r7, #19]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d001      	beq.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
      {
        /* set overall return value */
        status = ret;
 8004eac:	7cfb      	ldrb	r3, [r7, #19]
 8004eae:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d028      	beq.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004ebc:	4b30      	ldr	r3, [pc, #192]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8004ebe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ec2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004eca:	492d      	ldr	r1, [pc, #180]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ed6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004eda:	d106      	bne.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x3ee>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004edc:	4b28      	ldr	r3, [pc, #160]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8004ede:	68db      	ldr	r3, [r3, #12]
 8004ee0:	4a27      	ldr	r2, [pc, #156]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8004ee2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ee6:	60d3      	str	r3, [r2, #12]
 8004ee8:	e011      	b.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x412>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004eee:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004ef2:	d10c      	bne.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	3304      	adds	r3, #4
 8004ef8:	2101      	movs	r1, #1
 8004efa:	4618      	mov	r0, r3
 8004efc:	f000 f842 	bl	8004f84 <RCCEx_PLLSAI1_Config>
 8004f00:	4603      	mov	r3, r0
 8004f02:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004f04:	7cfb      	ldrb	r3, [r7, #19]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d001      	beq.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x412>
      {
        /* set overall return value */
        status = ret;
 8004f0a:	7cfb      	ldrb	r3, [r7, #19]
 8004f0c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d01c      	beq.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004f1a:	4b19      	ldr	r3, [pc, #100]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8004f1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f20:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f28:	4915      	ldr	r1, [pc, #84]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f34:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f38:	d10c      	bne.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	3304      	adds	r3, #4
 8004f3e:	2102      	movs	r1, #2
 8004f40:	4618      	mov	r0, r3
 8004f42:	f000 f81f 	bl	8004f84 <RCCEx_PLLSAI1_Config>
 8004f46:	4603      	mov	r3, r0
 8004f48:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004f4a:	7cfb      	ldrb	r3, [r7, #19]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d001      	beq.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x458>
      {
        /* set overall return value */
        status = ret;
 8004f50:	7cfb      	ldrb	r3, [r7, #19]
 8004f52:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d00a      	beq.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0x47a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004f60:	4b07      	ldr	r3, [pc, #28]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8004f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f66:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f6e:	4904      	ldr	r1, [pc, #16]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8004f70:	4313      	orrs	r3, r2
 8004f72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004f76:	7cbb      	ldrb	r3, [r7, #18]
}
 8004f78:	4618      	mov	r0, r3
 8004f7a:	3718      	adds	r7, #24
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bd80      	pop	{r7, pc}
 8004f80:	40021000 	.word	0x40021000

08004f84 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b084      	sub	sp, #16
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
 8004f8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004f8e:	2300      	movs	r3, #0
 8004f90:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004f92:	4b73      	ldr	r3, [pc, #460]	; (8005160 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004f94:	68db      	ldr	r3, [r3, #12]
 8004f96:	f003 0303 	and.w	r3, r3, #3
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d018      	beq.n	8004fd0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004f9e:	4b70      	ldr	r3, [pc, #448]	; (8005160 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004fa0:	68db      	ldr	r3, [r3, #12]
 8004fa2:	f003 0203 	and.w	r2, r3, #3
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	429a      	cmp	r2, r3
 8004fac:	d10d      	bne.n	8004fca <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
       ||
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d009      	beq.n	8004fca <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004fb6:	4b6a      	ldr	r3, [pc, #424]	; (8005160 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004fb8:	68db      	ldr	r3, [r3, #12]
 8004fba:	091b      	lsrs	r3, r3, #4
 8004fbc:	f003 0307 	and.w	r3, r3, #7
 8004fc0:	1c5a      	adds	r2, r3, #1
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	685b      	ldr	r3, [r3, #4]
       ||
 8004fc6:	429a      	cmp	r2, r3
 8004fc8:	d044      	beq.n	8005054 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	73fb      	strb	r3, [r7, #15]
 8004fce:	e041      	b.n	8005054 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	2b02      	cmp	r3, #2
 8004fd6:	d00c      	beq.n	8004ff2 <RCCEx_PLLSAI1_Config+0x6e>
 8004fd8:	2b03      	cmp	r3, #3
 8004fda:	d013      	beq.n	8005004 <RCCEx_PLLSAI1_Config+0x80>
 8004fdc:	2b01      	cmp	r3, #1
 8004fde:	d120      	bne.n	8005022 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004fe0:	4b5f      	ldr	r3, [pc, #380]	; (8005160 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f003 0302 	and.w	r3, r3, #2
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d11d      	bne.n	8005028 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8004fec:	2301      	movs	r3, #1
 8004fee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ff0:	e01a      	b.n	8005028 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004ff2:	4b5b      	ldr	r3, [pc, #364]	; (8005160 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d116      	bne.n	800502c <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8004ffe:	2301      	movs	r3, #1
 8005000:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005002:	e013      	b.n	800502c <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005004:	4b56      	ldr	r3, [pc, #344]	; (8005160 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800500c:	2b00      	cmp	r3, #0
 800500e:	d10f      	bne.n	8005030 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005010:	4b53      	ldr	r3, [pc, #332]	; (8005160 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005018:	2b00      	cmp	r3, #0
 800501a:	d109      	bne.n	8005030 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 800501c:	2301      	movs	r3, #1
 800501e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005020:	e006      	b.n	8005030 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8005022:	2301      	movs	r3, #1
 8005024:	73fb      	strb	r3, [r7, #15]
      break;
 8005026:	e004      	b.n	8005032 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8005028:	bf00      	nop
 800502a:	e002      	b.n	8005032 <RCCEx_PLLSAI1_Config+0xae>
      break;
 800502c:	bf00      	nop
 800502e:	e000      	b.n	8005032 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8005030:	bf00      	nop
    }

    if(status == HAL_OK)
 8005032:	7bfb      	ldrb	r3, [r7, #15]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d10d      	bne.n	8005054 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005038:	4b49      	ldr	r3, [pc, #292]	; (8005160 <RCCEx_PLLSAI1_Config+0x1dc>)
 800503a:	68db      	ldr	r3, [r3, #12]
 800503c:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6819      	ldr	r1, [r3, #0]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	3b01      	subs	r3, #1
 800504a:	011b      	lsls	r3, r3, #4
 800504c:	430b      	orrs	r3, r1
 800504e:	4944      	ldr	r1, [pc, #272]	; (8005160 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005050:	4313      	orrs	r3, r2
 8005052:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005054:	7bfb      	ldrb	r3, [r7, #15]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d17c      	bne.n	8005154 <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800505a:	4b41      	ldr	r3, [pc, #260]	; (8005160 <RCCEx_PLLSAI1_Config+0x1dc>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a40      	ldr	r2, [pc, #256]	; (8005160 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005060:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005064:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005066:	f7fe f85f 	bl	8003128 <HAL_GetTick>
 800506a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800506c:	e009      	b.n	8005082 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800506e:	f7fe f85b 	bl	8003128 <HAL_GetTick>
 8005072:	4602      	mov	r2, r0
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	1ad3      	subs	r3, r2, r3
 8005078:	2b02      	cmp	r3, #2
 800507a:	d902      	bls.n	8005082 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 800507c:	2303      	movs	r3, #3
 800507e:	73fb      	strb	r3, [r7, #15]
        break;
 8005080:	e005      	b.n	800508e <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005082:	4b37      	ldr	r3, [pc, #220]	; (8005160 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800508a:	2b00      	cmp	r3, #0
 800508c:	d1ef      	bne.n	800506e <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800508e:	7bfb      	ldrb	r3, [r7, #15]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d15f      	bne.n	8005154 <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d110      	bne.n	80050bc <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800509a:	4b31      	ldr	r3, [pc, #196]	; (8005160 <RCCEx_PLLSAI1_Config+0x1dc>)
 800509c:	691b      	ldr	r3, [r3, #16]
 800509e:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80050a2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80050a6:	687a      	ldr	r2, [r7, #4]
 80050a8:	6892      	ldr	r2, [r2, #8]
 80050aa:	0211      	lsls	r1, r2, #8
 80050ac:	687a      	ldr	r2, [r7, #4]
 80050ae:	68d2      	ldr	r2, [r2, #12]
 80050b0:	06d2      	lsls	r2, r2, #27
 80050b2:	430a      	orrs	r2, r1
 80050b4:	492a      	ldr	r1, [pc, #168]	; (8005160 <RCCEx_PLLSAI1_Config+0x1dc>)
 80050b6:	4313      	orrs	r3, r2
 80050b8:	610b      	str	r3, [r1, #16]
 80050ba:	e027      	b.n	800510c <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	2b01      	cmp	r3, #1
 80050c0:	d112      	bne.n	80050e8 <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80050c2:	4b27      	ldr	r3, [pc, #156]	; (8005160 <RCCEx_PLLSAI1_Config+0x1dc>)
 80050c4:	691b      	ldr	r3, [r3, #16]
 80050c6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80050ca:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80050ce:	687a      	ldr	r2, [r7, #4]
 80050d0:	6892      	ldr	r2, [r2, #8]
 80050d2:	0211      	lsls	r1, r2, #8
 80050d4:	687a      	ldr	r2, [r7, #4]
 80050d6:	6912      	ldr	r2, [r2, #16]
 80050d8:	0852      	lsrs	r2, r2, #1
 80050da:	3a01      	subs	r2, #1
 80050dc:	0552      	lsls	r2, r2, #21
 80050de:	430a      	orrs	r2, r1
 80050e0:	491f      	ldr	r1, [pc, #124]	; (8005160 <RCCEx_PLLSAI1_Config+0x1dc>)
 80050e2:	4313      	orrs	r3, r2
 80050e4:	610b      	str	r3, [r1, #16]
 80050e6:	e011      	b.n	800510c <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80050e8:	4b1d      	ldr	r3, [pc, #116]	; (8005160 <RCCEx_PLLSAI1_Config+0x1dc>)
 80050ea:	691b      	ldr	r3, [r3, #16]
 80050ec:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80050f0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80050f4:	687a      	ldr	r2, [r7, #4]
 80050f6:	6892      	ldr	r2, [r2, #8]
 80050f8:	0211      	lsls	r1, r2, #8
 80050fa:	687a      	ldr	r2, [r7, #4]
 80050fc:	6952      	ldr	r2, [r2, #20]
 80050fe:	0852      	lsrs	r2, r2, #1
 8005100:	3a01      	subs	r2, #1
 8005102:	0652      	lsls	r2, r2, #25
 8005104:	430a      	orrs	r2, r1
 8005106:	4916      	ldr	r1, [pc, #88]	; (8005160 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005108:	4313      	orrs	r3, r2
 800510a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800510c:	4b14      	ldr	r3, [pc, #80]	; (8005160 <RCCEx_PLLSAI1_Config+0x1dc>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a13      	ldr	r2, [pc, #76]	; (8005160 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005112:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005116:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005118:	f7fe f806 	bl	8003128 <HAL_GetTick>
 800511c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800511e:	e009      	b.n	8005134 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005120:	f7fe f802 	bl	8003128 <HAL_GetTick>
 8005124:	4602      	mov	r2, r0
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	1ad3      	subs	r3, r2, r3
 800512a:	2b02      	cmp	r3, #2
 800512c:	d902      	bls.n	8005134 <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 800512e:	2303      	movs	r3, #3
 8005130:	73fb      	strb	r3, [r7, #15]
          break;
 8005132:	e005      	b.n	8005140 <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005134:	4b0a      	ldr	r3, [pc, #40]	; (8005160 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800513c:	2b00      	cmp	r3, #0
 800513e:	d0ef      	beq.n	8005120 <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 8005140:	7bfb      	ldrb	r3, [r7, #15]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d106      	bne.n	8005154 <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005146:	4b06      	ldr	r3, [pc, #24]	; (8005160 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005148:	691a      	ldr	r2, [r3, #16]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	699b      	ldr	r3, [r3, #24]
 800514e:	4904      	ldr	r1, [pc, #16]	; (8005160 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005150:	4313      	orrs	r3, r2
 8005152:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005154:	7bfb      	ldrb	r3, [r7, #15]
}
 8005156:	4618      	mov	r0, r3
 8005158:	3710      	adds	r7, #16
 800515a:	46bd      	mov	sp, r7
 800515c:	bd80      	pop	{r7, pc}
 800515e:	bf00      	nop
 8005160:	40021000 	.word	0x40021000

08005164 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b082      	sub	sp, #8
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d101      	bne.n	8005176 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005172:	2301      	movs	r3, #1
 8005174:	e040      	b.n	80051f8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800517a:	2b00      	cmp	r3, #0
 800517c:	d106      	bne.n	800518c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2200      	movs	r2, #0
 8005182:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f7fd fd1a 	bl	8002bc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2224      	movs	r2, #36	; 0x24
 8005190:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	681a      	ldr	r2, [r3, #0]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f022 0201 	bic.w	r2, r2, #1
 80051a0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	f000 f82c 	bl	8005200 <UART_SetConfig>
 80051a8:	4603      	mov	r3, r0
 80051aa:	2b01      	cmp	r3, #1
 80051ac:	d101      	bne.n	80051b2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80051ae:	2301      	movs	r3, #1
 80051b0:	e022      	b.n	80051f8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d002      	beq.n	80051c0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80051ba:	6878      	ldr	r0, [r7, #4]
 80051bc:	f000 fb34 	bl	8005828 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	685a      	ldr	r2, [r3, #4]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80051ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	689a      	ldr	r2, [r3, #8]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80051de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	681a      	ldr	r2, [r3, #0]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f042 0201 	orr.w	r2, r2, #1
 80051ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80051f0:	6878      	ldr	r0, [r7, #4]
 80051f2:	f000 fbbb 	bl	800596c <UART_CheckIdleState>
 80051f6:	4603      	mov	r3, r0
}
 80051f8:	4618      	mov	r0, r3
 80051fa:	3708      	adds	r7, #8
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bd80      	pop	{r7, pc}

08005200 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005200:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8005204:	b08a      	sub	sp, #40	; 0x28
 8005206:	af00      	add	r7, sp, #0
 8005208:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800520a:	2300      	movs	r3, #0
 800520c:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 800520e:	2300      	movs	r3, #0
 8005210:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8005212:	2300      	movs	r3, #0
 8005214:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	689a      	ldr	r2, [r3, #8]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	691b      	ldr	r3, [r3, #16]
 800521e:	431a      	orrs	r2, r3
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	695b      	ldr	r3, [r3, #20]
 8005224:	431a      	orrs	r2, r3
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	69db      	ldr	r3, [r3, #28]
 800522a:	4313      	orrs	r3, r2
 800522c:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	681a      	ldr	r2, [r3, #0]
 8005234:	4bbc      	ldr	r3, [pc, #752]	; (8005528 <UART_SetConfig+0x328>)
 8005236:	4013      	ands	r3, r2
 8005238:	687a      	ldr	r2, [r7, #4]
 800523a:	6812      	ldr	r2, [r2, #0]
 800523c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800523e:	430b      	orrs	r3, r1
 8005240:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	68da      	ldr	r2, [r3, #12]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	430a      	orrs	r2, r1
 8005256:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	699b      	ldr	r3, [r3, #24]
 800525c:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4ab2      	ldr	r2, [pc, #712]	; (800552c <UART_SetConfig+0x32c>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d004      	beq.n	8005272 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6a1b      	ldr	r3, [r3, #32]
 800526c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800526e:	4313      	orrs	r3, r2
 8005270:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	689b      	ldr	r3, [r3, #8]
 8005278:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005282:	430a      	orrs	r2, r1
 8005284:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4aa9      	ldr	r2, [pc, #676]	; (8005530 <UART_SetConfig+0x330>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d126      	bne.n	80052de <UART_SetConfig+0xde>
 8005290:	4ba8      	ldr	r3, [pc, #672]	; (8005534 <UART_SetConfig+0x334>)
 8005292:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005296:	f003 0303 	and.w	r3, r3, #3
 800529a:	2b03      	cmp	r3, #3
 800529c:	d81a      	bhi.n	80052d4 <UART_SetConfig+0xd4>
 800529e:	a201      	add	r2, pc, #4	; (adr r2, 80052a4 <UART_SetConfig+0xa4>)
 80052a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052a4:	080052b5 	.word	0x080052b5
 80052a8:	080052c5 	.word	0x080052c5
 80052ac:	080052bd 	.word	0x080052bd
 80052b0:	080052cd 	.word	0x080052cd
 80052b4:	2301      	movs	r3, #1
 80052b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052ba:	e0ab      	b.n	8005414 <UART_SetConfig+0x214>
 80052bc:	2302      	movs	r3, #2
 80052be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052c2:	e0a7      	b.n	8005414 <UART_SetConfig+0x214>
 80052c4:	2304      	movs	r3, #4
 80052c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052ca:	e0a3      	b.n	8005414 <UART_SetConfig+0x214>
 80052cc:	2308      	movs	r3, #8
 80052ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052d2:	e09f      	b.n	8005414 <UART_SetConfig+0x214>
 80052d4:	2310      	movs	r3, #16
 80052d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052da:	bf00      	nop
 80052dc:	e09a      	b.n	8005414 <UART_SetConfig+0x214>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4a95      	ldr	r2, [pc, #596]	; (8005538 <UART_SetConfig+0x338>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d138      	bne.n	800535a <UART_SetConfig+0x15a>
 80052e8:	4b92      	ldr	r3, [pc, #584]	; (8005534 <UART_SetConfig+0x334>)
 80052ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052ee:	f003 030c 	and.w	r3, r3, #12
 80052f2:	2b0c      	cmp	r3, #12
 80052f4:	d82c      	bhi.n	8005350 <UART_SetConfig+0x150>
 80052f6:	a201      	add	r2, pc, #4	; (adr r2, 80052fc <UART_SetConfig+0xfc>)
 80052f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052fc:	08005331 	.word	0x08005331
 8005300:	08005351 	.word	0x08005351
 8005304:	08005351 	.word	0x08005351
 8005308:	08005351 	.word	0x08005351
 800530c:	08005341 	.word	0x08005341
 8005310:	08005351 	.word	0x08005351
 8005314:	08005351 	.word	0x08005351
 8005318:	08005351 	.word	0x08005351
 800531c:	08005339 	.word	0x08005339
 8005320:	08005351 	.word	0x08005351
 8005324:	08005351 	.word	0x08005351
 8005328:	08005351 	.word	0x08005351
 800532c:	08005349 	.word	0x08005349
 8005330:	2300      	movs	r3, #0
 8005332:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005336:	e06d      	b.n	8005414 <UART_SetConfig+0x214>
 8005338:	2302      	movs	r3, #2
 800533a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800533e:	e069      	b.n	8005414 <UART_SetConfig+0x214>
 8005340:	2304      	movs	r3, #4
 8005342:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005346:	e065      	b.n	8005414 <UART_SetConfig+0x214>
 8005348:	2308      	movs	r3, #8
 800534a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800534e:	e061      	b.n	8005414 <UART_SetConfig+0x214>
 8005350:	2310      	movs	r3, #16
 8005352:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005356:	bf00      	nop
 8005358:	e05c      	b.n	8005414 <UART_SetConfig+0x214>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a77      	ldr	r2, [pc, #476]	; (800553c <UART_SetConfig+0x33c>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d125      	bne.n	80053b0 <UART_SetConfig+0x1b0>
 8005364:	4b73      	ldr	r3, [pc, #460]	; (8005534 <UART_SetConfig+0x334>)
 8005366:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800536a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800536e:	2b10      	cmp	r3, #16
 8005370:	d011      	beq.n	8005396 <UART_SetConfig+0x196>
 8005372:	2b10      	cmp	r3, #16
 8005374:	d802      	bhi.n	800537c <UART_SetConfig+0x17c>
 8005376:	2b00      	cmp	r3, #0
 8005378:	d005      	beq.n	8005386 <UART_SetConfig+0x186>
 800537a:	e014      	b.n	80053a6 <UART_SetConfig+0x1a6>
 800537c:	2b20      	cmp	r3, #32
 800537e:	d006      	beq.n	800538e <UART_SetConfig+0x18e>
 8005380:	2b30      	cmp	r3, #48	; 0x30
 8005382:	d00c      	beq.n	800539e <UART_SetConfig+0x19e>
 8005384:	e00f      	b.n	80053a6 <UART_SetConfig+0x1a6>
 8005386:	2300      	movs	r3, #0
 8005388:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800538c:	e042      	b.n	8005414 <UART_SetConfig+0x214>
 800538e:	2302      	movs	r3, #2
 8005390:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005394:	e03e      	b.n	8005414 <UART_SetConfig+0x214>
 8005396:	2304      	movs	r3, #4
 8005398:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800539c:	e03a      	b.n	8005414 <UART_SetConfig+0x214>
 800539e:	2308      	movs	r3, #8
 80053a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053a4:	e036      	b.n	8005414 <UART_SetConfig+0x214>
 80053a6:	2310      	movs	r3, #16
 80053a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053ac:	bf00      	nop
 80053ae:	e031      	b.n	8005414 <UART_SetConfig+0x214>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a5d      	ldr	r2, [pc, #372]	; (800552c <UART_SetConfig+0x32c>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d129      	bne.n	800540e <UART_SetConfig+0x20e>
 80053ba:	4b5e      	ldr	r3, [pc, #376]	; (8005534 <UART_SetConfig+0x334>)
 80053bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053c0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80053c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053c8:	d014      	beq.n	80053f4 <UART_SetConfig+0x1f4>
 80053ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053ce:	d802      	bhi.n	80053d6 <UART_SetConfig+0x1d6>
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d007      	beq.n	80053e4 <UART_SetConfig+0x1e4>
 80053d4:	e016      	b.n	8005404 <UART_SetConfig+0x204>
 80053d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053da:	d007      	beq.n	80053ec <UART_SetConfig+0x1ec>
 80053dc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80053e0:	d00c      	beq.n	80053fc <UART_SetConfig+0x1fc>
 80053e2:	e00f      	b.n	8005404 <UART_SetConfig+0x204>
 80053e4:	2300      	movs	r3, #0
 80053e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053ea:	e013      	b.n	8005414 <UART_SetConfig+0x214>
 80053ec:	2302      	movs	r3, #2
 80053ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053f2:	e00f      	b.n	8005414 <UART_SetConfig+0x214>
 80053f4:	2304      	movs	r3, #4
 80053f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053fa:	e00b      	b.n	8005414 <UART_SetConfig+0x214>
 80053fc:	2308      	movs	r3, #8
 80053fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005402:	e007      	b.n	8005414 <UART_SetConfig+0x214>
 8005404:	2310      	movs	r3, #16
 8005406:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800540a:	bf00      	nop
 800540c:	e002      	b.n	8005414 <UART_SetConfig+0x214>
 800540e:	2310      	movs	r3, #16
 8005410:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a44      	ldr	r2, [pc, #272]	; (800552c <UART_SetConfig+0x32c>)
 800541a:	4293      	cmp	r3, r2
 800541c:	f040 80fb 	bne.w	8005616 <UART_SetConfig+0x416>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005420:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005424:	2b08      	cmp	r3, #8
 8005426:	d824      	bhi.n	8005472 <UART_SetConfig+0x272>
 8005428:	a201      	add	r2, pc, #4	; (adr r2, 8005430 <UART_SetConfig+0x230>)
 800542a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800542e:	bf00      	nop
 8005430:	08005455 	.word	0x08005455
 8005434:	08005473 	.word	0x08005473
 8005438:	0800545d 	.word	0x0800545d
 800543c:	08005473 	.word	0x08005473
 8005440:	08005463 	.word	0x08005463
 8005444:	08005473 	.word	0x08005473
 8005448:	08005473 	.word	0x08005473
 800544c:	08005473 	.word	0x08005473
 8005450:	0800546b 	.word	0x0800546b
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8005454:	f7ff fac6 	bl	80049e4 <HAL_RCC_GetPCLK1Freq>
 8005458:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800545a:	e00d      	b.n	8005478 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 800545c:	4b38      	ldr	r3, [pc, #224]	; (8005540 <UART_SetConfig+0x340>)
 800545e:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005460:	e00a      	b.n	8005478 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8005462:	f7ff fa29 	bl	80048b8 <HAL_RCC_GetSysClockFreq>
 8005466:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005468:	e006      	b.n	8005478 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 800546a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800546e:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005470:	e002      	b.n	8005478 <UART_SetConfig+0x278>
      default:
        ret = HAL_ERROR;
 8005472:	2301      	movs	r3, #1
 8005474:	76fb      	strb	r3, [r7, #27]
        break;
 8005476:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	2b00      	cmp	r3, #0
 800547c:	f000 81c8 	beq.w	8005810 <UART_SetConfig+0x610>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	685a      	ldr	r2, [r3, #4]
 8005484:	4613      	mov	r3, r2
 8005486:	005b      	lsls	r3, r3, #1
 8005488:	4413      	add	r3, r2
 800548a:	697a      	ldr	r2, [r7, #20]
 800548c:	429a      	cmp	r2, r3
 800548e:	d305      	bcc.n	800549c <UART_SetConfig+0x29c>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005496:	697a      	ldr	r2, [r7, #20]
 8005498:	429a      	cmp	r2, r3
 800549a:	d902      	bls.n	80054a2 <UART_SetConfig+0x2a2>
      {
        ret = HAL_ERROR;
 800549c:	2301      	movs	r3, #1
 800549e:	76fb      	strb	r3, [r7, #27]
 80054a0:	e1b6      	b.n	8005810 <UART_SetConfig+0x610>
      }
      else
      {
        switch (clocksource)
 80054a2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80054a6:	2b08      	cmp	r3, #8
 80054a8:	f200 80a2 	bhi.w	80055f0 <UART_SetConfig+0x3f0>
 80054ac:	a201      	add	r2, pc, #4	; (adr r2, 80054b4 <UART_SetConfig+0x2b4>)
 80054ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054b2:	bf00      	nop
 80054b4:	080054d9 	.word	0x080054d9
 80054b8:	080055f1 	.word	0x080055f1
 80054bc:	08005545 	.word	0x08005545
 80054c0:	080055f1 	.word	0x080055f1
 80054c4:	08005579 	.word	0x08005579
 80054c8:	080055f1 	.word	0x080055f1
 80054cc:	080055f1 	.word	0x080055f1
 80054d0:	080055f1 	.word	0x080055f1
 80054d4:	080055c7 	.word	0x080055c7
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 80054d8:	f7ff fa84 	bl	80049e4 <HAL_RCC_GetPCLK1Freq>
 80054dc:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80054de:	693b      	ldr	r3, [r7, #16]
 80054e0:	4619      	mov	r1, r3
 80054e2:	f04f 0200 	mov.w	r2, #0
 80054e6:	f04f 0300 	mov.w	r3, #0
 80054ea:	f04f 0400 	mov.w	r4, #0
 80054ee:	0214      	lsls	r4, r2, #8
 80054f0:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80054f4:	020b      	lsls	r3, r1, #8
 80054f6:	687a      	ldr	r2, [r7, #4]
 80054f8:	6852      	ldr	r2, [r2, #4]
 80054fa:	0852      	lsrs	r2, r2, #1
 80054fc:	4611      	mov	r1, r2
 80054fe:	f04f 0200 	mov.w	r2, #0
 8005502:	eb13 0b01 	adds.w	fp, r3, r1
 8005506:	eb44 0c02 	adc.w	ip, r4, r2
 800550a:	4658      	mov	r0, fp
 800550c:	4661      	mov	r1, ip
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	f04f 0400 	mov.w	r4, #0
 8005516:	461a      	mov	r2, r3
 8005518:	4623      	mov	r3, r4
 800551a:	f7fb f8cd 	bl	80006b8 <__aeabi_uldivmod>
 800551e:	4603      	mov	r3, r0
 8005520:	460c      	mov	r4, r1
 8005522:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8005524:	e067      	b.n	80055f6 <UART_SetConfig+0x3f6>
 8005526:	bf00      	nop
 8005528:	efff69f3 	.word	0xefff69f3
 800552c:	40008000 	.word	0x40008000
 8005530:	40013800 	.word	0x40013800
 8005534:	40021000 	.word	0x40021000
 8005538:	40004400 	.word	0x40004400
 800553c:	40004800 	.word	0x40004800
 8005540:	00f42400 	.word	0x00f42400
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	085b      	lsrs	r3, r3, #1
 800554a:	f04f 0400 	mov.w	r4, #0
 800554e:	49ae      	ldr	r1, [pc, #696]	; (8005808 <UART_SetConfig+0x608>)
 8005550:	f04f 0200 	mov.w	r2, #0
 8005554:	eb13 0b01 	adds.w	fp, r3, r1
 8005558:	eb44 0c02 	adc.w	ip, r4, r2
 800555c:	4658      	mov	r0, fp
 800555e:	4661      	mov	r1, ip
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	f04f 0400 	mov.w	r4, #0
 8005568:	461a      	mov	r2, r3
 800556a:	4623      	mov	r3, r4
 800556c:	f7fb f8a4 	bl	80006b8 <__aeabi_uldivmod>
 8005570:	4603      	mov	r3, r0
 8005572:	460c      	mov	r4, r1
 8005574:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8005576:	e03e      	b.n	80055f6 <UART_SetConfig+0x3f6>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8005578:	f7ff f99e 	bl	80048b8 <HAL_RCC_GetSysClockFreq>
 800557c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	4619      	mov	r1, r3
 8005582:	f04f 0200 	mov.w	r2, #0
 8005586:	f04f 0300 	mov.w	r3, #0
 800558a:	f04f 0400 	mov.w	r4, #0
 800558e:	0214      	lsls	r4, r2, #8
 8005590:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8005594:	020b      	lsls	r3, r1, #8
 8005596:	687a      	ldr	r2, [r7, #4]
 8005598:	6852      	ldr	r2, [r2, #4]
 800559a:	0852      	lsrs	r2, r2, #1
 800559c:	4611      	mov	r1, r2
 800559e:	f04f 0200 	mov.w	r2, #0
 80055a2:	eb13 0b01 	adds.w	fp, r3, r1
 80055a6:	eb44 0c02 	adc.w	ip, r4, r2
 80055aa:	4658      	mov	r0, fp
 80055ac:	4661      	mov	r1, ip
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	f04f 0400 	mov.w	r4, #0
 80055b6:	461a      	mov	r2, r3
 80055b8:	4623      	mov	r3, r4
 80055ba:	f7fb f87d 	bl	80006b8 <__aeabi_uldivmod>
 80055be:	4603      	mov	r3, r0
 80055c0:	460c      	mov	r4, r1
 80055c2:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 80055c4:	e017      	b.n	80055f6 <UART_SetConfig+0x3f6>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	085b      	lsrs	r3, r3, #1
 80055cc:	f04f 0400 	mov.w	r4, #0
 80055d0:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 80055d4:	f144 0100 	adc.w	r1, r4, #0
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	f04f 0400 	mov.w	r4, #0
 80055e0:	461a      	mov	r2, r3
 80055e2:	4623      	mov	r3, r4
 80055e4:	f7fb f868 	bl	80006b8 <__aeabi_uldivmod>
 80055e8:	4603      	mov	r3, r0
 80055ea:	460c      	mov	r4, r1
 80055ec:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 80055ee:	e002      	b.n	80055f6 <UART_SetConfig+0x3f6>
          default:
            ret = HAL_ERROR;
 80055f0:	2301      	movs	r3, #1
 80055f2:	76fb      	strb	r3, [r7, #27]
            break;
 80055f4:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80055f6:	69fb      	ldr	r3, [r7, #28]
 80055f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80055fc:	d308      	bcc.n	8005610 <UART_SetConfig+0x410>
 80055fe:	69fb      	ldr	r3, [r7, #28]
 8005600:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005604:	d204      	bcs.n	8005610 <UART_SetConfig+0x410>
        {
          huart->Instance->BRR = usartdiv;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	69fa      	ldr	r2, [r7, #28]
 800560c:	60da      	str	r2, [r3, #12]
 800560e:	e0ff      	b.n	8005810 <UART_SetConfig+0x610>
        }
        else
        {
          ret = HAL_ERROR;
 8005610:	2301      	movs	r3, #1
 8005612:	76fb      	strb	r3, [r7, #27]
 8005614:	e0fc      	b.n	8005810 <UART_SetConfig+0x610>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	69db      	ldr	r3, [r3, #28]
 800561a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800561e:	f040 8083 	bne.w	8005728 <UART_SetConfig+0x528>
  {
    switch (clocksource)
 8005622:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005626:	2b08      	cmp	r3, #8
 8005628:	d85e      	bhi.n	80056e8 <UART_SetConfig+0x4e8>
 800562a:	a201      	add	r2, pc, #4	; (adr r2, 8005630 <UART_SetConfig+0x430>)
 800562c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005630:	08005655 	.word	0x08005655
 8005634:	08005675 	.word	0x08005675
 8005638:	08005695 	.word	0x08005695
 800563c:	080056e9 	.word	0x080056e9
 8005640:	080056b1 	.word	0x080056b1
 8005644:	080056e9 	.word	0x080056e9
 8005648:	080056e9 	.word	0x080056e9
 800564c:	080056e9 	.word	0x080056e9
 8005650:	080056d1 	.word	0x080056d1
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005654:	f7ff f9c6 	bl	80049e4 <HAL_RCC_GetPCLK1Freq>
 8005658:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	005a      	lsls	r2, r3, #1
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	085b      	lsrs	r3, r3, #1
 8005664:	441a      	add	r2, r3
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	fbb2 f3f3 	udiv	r3, r2, r3
 800566e:	b29b      	uxth	r3, r3
 8005670:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005672:	e03c      	b.n	80056ee <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005674:	f7ff f9cc 	bl	8004a10 <HAL_RCC_GetPCLK2Freq>
 8005678:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	005a      	lsls	r2, r3, #1
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	085b      	lsrs	r3, r3, #1
 8005684:	441a      	add	r2, r3
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	685b      	ldr	r3, [r3, #4]
 800568a:	fbb2 f3f3 	udiv	r3, r2, r3
 800568e:	b29b      	uxth	r3, r3
 8005690:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005692:	e02c      	b.n	80056ee <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	085b      	lsrs	r3, r3, #1
 800569a:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 800569e:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 80056a2:	687a      	ldr	r2, [r7, #4]
 80056a4:	6852      	ldr	r2, [r2, #4]
 80056a6:	fbb3 f3f2 	udiv	r3, r3, r2
 80056aa:	b29b      	uxth	r3, r3
 80056ac:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80056ae:	e01e      	b.n	80056ee <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80056b0:	f7ff f902 	bl	80048b8 <HAL_RCC_GetSysClockFreq>
 80056b4:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80056b6:	693b      	ldr	r3, [r7, #16]
 80056b8:	005a      	lsls	r2, r3, #1
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	685b      	ldr	r3, [r3, #4]
 80056be:	085b      	lsrs	r3, r3, #1
 80056c0:	441a      	add	r2, r3
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80056ca:	b29b      	uxth	r3, r3
 80056cc:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80056ce:	e00e      	b.n	80056ee <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	085b      	lsrs	r3, r3, #1
 80056d6:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	fbb2 f3f3 	udiv	r3, r2, r3
 80056e2:	b29b      	uxth	r3, r3
 80056e4:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80056e6:	e002      	b.n	80056ee <UART_SetConfig+0x4ee>
      default:
        ret = HAL_ERROR;
 80056e8:	2301      	movs	r3, #1
 80056ea:	76fb      	strb	r3, [r7, #27]
        break;
 80056ec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80056ee:	69fb      	ldr	r3, [r7, #28]
 80056f0:	2b0f      	cmp	r3, #15
 80056f2:	d916      	bls.n	8005722 <UART_SetConfig+0x522>
 80056f4:	69fb      	ldr	r3, [r7, #28]
 80056f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056fa:	d212      	bcs.n	8005722 <UART_SetConfig+0x522>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80056fc:	69fb      	ldr	r3, [r7, #28]
 80056fe:	b29b      	uxth	r3, r3
 8005700:	f023 030f 	bic.w	r3, r3, #15
 8005704:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005706:	69fb      	ldr	r3, [r7, #28]
 8005708:	085b      	lsrs	r3, r3, #1
 800570a:	b29b      	uxth	r3, r3
 800570c:	f003 0307 	and.w	r3, r3, #7
 8005710:	b29a      	uxth	r2, r3
 8005712:	89fb      	ldrh	r3, [r7, #14]
 8005714:	4313      	orrs	r3, r2
 8005716:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	89fa      	ldrh	r2, [r7, #14]
 800571e:	60da      	str	r2, [r3, #12]
 8005720:	e076      	b.n	8005810 <UART_SetConfig+0x610>
    }
    else
    {
      ret = HAL_ERROR;
 8005722:	2301      	movs	r3, #1
 8005724:	76fb      	strb	r3, [r7, #27]
 8005726:	e073      	b.n	8005810 <UART_SetConfig+0x610>
    }
  }
  else
  {
    switch (clocksource)
 8005728:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800572c:	2b08      	cmp	r3, #8
 800572e:	d85c      	bhi.n	80057ea <UART_SetConfig+0x5ea>
 8005730:	a201      	add	r2, pc, #4	; (adr r2, 8005738 <UART_SetConfig+0x538>)
 8005732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005736:	bf00      	nop
 8005738:	0800575d 	.word	0x0800575d
 800573c:	0800577b 	.word	0x0800577b
 8005740:	08005799 	.word	0x08005799
 8005744:	080057eb 	.word	0x080057eb
 8005748:	080057b5 	.word	0x080057b5
 800574c:	080057eb 	.word	0x080057eb
 8005750:	080057eb 	.word	0x080057eb
 8005754:	080057eb 	.word	0x080057eb
 8005758:	080057d3 	.word	0x080057d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800575c:	f7ff f942 	bl	80049e4 <HAL_RCC_GetPCLK1Freq>
 8005760:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	085a      	lsrs	r2, r3, #1
 8005768:	693b      	ldr	r3, [r7, #16]
 800576a:	441a      	add	r2, r3
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	685b      	ldr	r3, [r3, #4]
 8005770:	fbb2 f3f3 	udiv	r3, r2, r3
 8005774:	b29b      	uxth	r3, r3
 8005776:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005778:	e03a      	b.n	80057f0 <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800577a:	f7ff f949 	bl	8004a10 <HAL_RCC_GetPCLK2Freq>
 800577e:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	085a      	lsrs	r2, r3, #1
 8005786:	693b      	ldr	r3, [r7, #16]
 8005788:	441a      	add	r2, r3
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	685b      	ldr	r3, [r3, #4]
 800578e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005792:	b29b      	uxth	r3, r3
 8005794:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005796:	e02b      	b.n	80057f0 <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	085b      	lsrs	r3, r3, #1
 800579e:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80057a2:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80057a6:	687a      	ldr	r2, [r7, #4]
 80057a8:	6852      	ldr	r2, [r2, #4]
 80057aa:	fbb3 f3f2 	udiv	r3, r3, r2
 80057ae:	b29b      	uxth	r3, r3
 80057b0:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80057b2:	e01d      	b.n	80057f0 <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80057b4:	f7ff f880 	bl	80048b8 <HAL_RCC_GetSysClockFreq>
 80057b8:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	085a      	lsrs	r2, r3, #1
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	441a      	add	r2, r3
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	685b      	ldr	r3, [r3, #4]
 80057c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80057cc:	b29b      	uxth	r3, r3
 80057ce:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80057d0:	e00e      	b.n	80057f0 <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	685b      	ldr	r3, [r3, #4]
 80057d6:	085b      	lsrs	r3, r3, #1
 80057d8:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80057e4:	b29b      	uxth	r3, r3
 80057e6:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80057e8:	e002      	b.n	80057f0 <UART_SetConfig+0x5f0>
      default:
        ret = HAL_ERROR;
 80057ea:	2301      	movs	r3, #1
 80057ec:	76fb      	strb	r3, [r7, #27]
        break;
 80057ee:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80057f0:	69fb      	ldr	r3, [r7, #28]
 80057f2:	2b0f      	cmp	r3, #15
 80057f4:	d90a      	bls.n	800580c <UART_SetConfig+0x60c>
 80057f6:	69fb      	ldr	r3, [r7, #28]
 80057f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057fc:	d206      	bcs.n	800580c <UART_SetConfig+0x60c>
    {
      huart->Instance->BRR = usartdiv;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	69fa      	ldr	r2, [r7, #28]
 8005804:	60da      	str	r2, [r3, #12]
 8005806:	e003      	b.n	8005810 <UART_SetConfig+0x610>
 8005808:	f4240000 	.word	0xf4240000
    }
    else
    {
      ret = HAL_ERROR;
 800580c:	2301      	movs	r3, #1
 800580e:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2200      	movs	r2, #0
 8005814:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2200      	movs	r2, #0
 800581a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800581c:	7efb      	ldrb	r3, [r7, #27]
}
 800581e:	4618      	mov	r0, r3
 8005820:	3728      	adds	r7, #40	; 0x28
 8005822:	46bd      	mov	sp, r7
 8005824:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08005828 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005828:	b480      	push	{r7}
 800582a:	b083      	sub	sp, #12
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005834:	f003 0301 	and.w	r3, r3, #1
 8005838:	2b00      	cmp	r3, #0
 800583a:	d00a      	beq.n	8005852 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	685b      	ldr	r3, [r3, #4]
 8005842:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	430a      	orrs	r2, r1
 8005850:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005856:	f003 0302 	and.w	r3, r3, #2
 800585a:	2b00      	cmp	r3, #0
 800585c:	d00a      	beq.n	8005874 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	430a      	orrs	r2, r1
 8005872:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005878:	f003 0304 	and.w	r3, r3, #4
 800587c:	2b00      	cmp	r3, #0
 800587e:	d00a      	beq.n	8005896 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	685b      	ldr	r3, [r3, #4]
 8005886:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	430a      	orrs	r2, r1
 8005894:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800589a:	f003 0308 	and.w	r3, r3, #8
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d00a      	beq.n	80058b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	430a      	orrs	r2, r1
 80058b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058bc:	f003 0310 	and.w	r3, r3, #16
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d00a      	beq.n	80058da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	689b      	ldr	r3, [r3, #8]
 80058ca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	430a      	orrs	r2, r1
 80058d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058de:	f003 0320 	and.w	r3, r3, #32
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d00a      	beq.n	80058fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	689b      	ldr	r3, [r3, #8]
 80058ec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	430a      	orrs	r2, r1
 80058fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005900:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005904:	2b00      	cmp	r3, #0
 8005906:	d01a      	beq.n	800593e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	430a      	orrs	r2, r1
 800591c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005922:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005926:	d10a      	bne.n	800593e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	430a      	orrs	r2, r1
 800593c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005942:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005946:	2b00      	cmp	r3, #0
 8005948:	d00a      	beq.n	8005960 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	685b      	ldr	r3, [r3, #4]
 8005950:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	430a      	orrs	r2, r1
 800595e:	605a      	str	r2, [r3, #4]
  }
}
 8005960:	bf00      	nop
 8005962:	370c      	adds	r7, #12
 8005964:	46bd      	mov	sp, r7
 8005966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596a:	4770      	bx	lr

0800596c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b086      	sub	sp, #24
 8005970:	af02      	add	r7, sp, #8
 8005972:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2200      	movs	r2, #0
 8005978:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800597a:	f7fd fbd5 	bl	8003128 <HAL_GetTick>
 800597e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f003 0308 	and.w	r3, r3, #8
 800598a:	2b08      	cmp	r3, #8
 800598c:	d10e      	bne.n	80059ac <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800598e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005992:	9300      	str	r3, [sp, #0]
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	2200      	movs	r2, #0
 8005998:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800599c:	6878      	ldr	r0, [r7, #4]
 800599e:	f000 f82a 	bl	80059f6 <UART_WaitOnFlagUntilTimeout>
 80059a2:	4603      	mov	r3, r0
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d001      	beq.n	80059ac <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80059a8:	2303      	movs	r3, #3
 80059aa:	e020      	b.n	80059ee <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f003 0304 	and.w	r3, r3, #4
 80059b6:	2b04      	cmp	r3, #4
 80059b8:	d10e      	bne.n	80059d8 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80059ba:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80059be:	9300      	str	r3, [sp, #0]
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	2200      	movs	r2, #0
 80059c4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80059c8:	6878      	ldr	r0, [r7, #4]
 80059ca:	f000 f814 	bl	80059f6 <UART_WaitOnFlagUntilTimeout>
 80059ce:	4603      	mov	r3, r0
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d001      	beq.n	80059d8 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80059d4:	2303      	movs	r3, #3
 80059d6:	e00a      	b.n	80059ee <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2220      	movs	r2, #32
 80059dc:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2220      	movs	r2, #32
 80059e2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2200      	movs	r2, #0
 80059e8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80059ec:	2300      	movs	r3, #0
}
 80059ee:	4618      	mov	r0, r3
 80059f0:	3710      	adds	r7, #16
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bd80      	pop	{r7, pc}

080059f6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80059f6:	b580      	push	{r7, lr}
 80059f8:	b084      	sub	sp, #16
 80059fa:	af00      	add	r7, sp, #0
 80059fc:	60f8      	str	r0, [r7, #12]
 80059fe:	60b9      	str	r1, [r7, #8]
 8005a00:	603b      	str	r3, [r7, #0]
 8005a02:	4613      	mov	r3, r2
 8005a04:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a06:	e05d      	b.n	8005ac4 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a08:	69bb      	ldr	r3, [r7, #24]
 8005a0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a0e:	d059      	beq.n	8005ac4 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a10:	f7fd fb8a 	bl	8003128 <HAL_GetTick>
 8005a14:	4602      	mov	r2, r0
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	1ad3      	subs	r3, r2, r3
 8005a1a:	69ba      	ldr	r2, [r7, #24]
 8005a1c:	429a      	cmp	r2, r3
 8005a1e:	d302      	bcc.n	8005a26 <UART_WaitOnFlagUntilTimeout+0x30>
 8005a20:	69bb      	ldr	r3, [r7, #24]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d11b      	bne.n	8005a5e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	681a      	ldr	r2, [r3, #0]
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005a34:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	689a      	ldr	r2, [r3, #8]
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f022 0201 	bic.w	r2, r2, #1
 8005a44:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	2220      	movs	r2, #32
 8005a4a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	2220      	movs	r2, #32
 8005a50:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	2200      	movs	r2, #0
 8005a56:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8005a5a:	2303      	movs	r3, #3
 8005a5c:	e042      	b.n	8005ae4 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f003 0304 	and.w	r3, r3, #4
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d02b      	beq.n	8005ac4 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	69db      	ldr	r3, [r3, #28]
 8005a72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a7a:	d123      	bne.n	8005ac4 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005a84:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	681a      	ldr	r2, [r3, #0]
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005a94:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	689a      	ldr	r2, [r3, #8]
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f022 0201 	bic.w	r2, r2, #1
 8005aa4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	2220      	movs	r2, #32
 8005aaa:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	2220      	movs	r2, #32
 8005ab0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	2220      	movs	r2, #32
 8005ab6:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	2200      	movs	r2, #0
 8005abc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8005ac0:	2303      	movs	r3, #3
 8005ac2:	e00f      	b.n	8005ae4 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	69da      	ldr	r2, [r3, #28]
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	4013      	ands	r3, r2
 8005ace:	68ba      	ldr	r2, [r7, #8]
 8005ad0:	429a      	cmp	r2, r3
 8005ad2:	bf0c      	ite	eq
 8005ad4:	2301      	moveq	r3, #1
 8005ad6:	2300      	movne	r3, #0
 8005ad8:	b2db      	uxtb	r3, r3
 8005ada:	461a      	mov	r2, r3
 8005adc:	79fb      	ldrb	r3, [r7, #7]
 8005ade:	429a      	cmp	r2, r3
 8005ae0:	d092      	beq.n	8005a08 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005ae2:	2300      	movs	r3, #0
}
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	3710      	adds	r7, #16
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	bd80      	pop	{r7, pc}

08005aec <__errno>:
 8005aec:	4b01      	ldr	r3, [pc, #4]	; (8005af4 <__errno+0x8>)
 8005aee:	6818      	ldr	r0, [r3, #0]
 8005af0:	4770      	bx	lr
 8005af2:	bf00      	nop
 8005af4:	200000ec 	.word	0x200000ec

08005af8 <__libc_init_array>:
 8005af8:	b570      	push	{r4, r5, r6, lr}
 8005afa:	4e0d      	ldr	r6, [pc, #52]	; (8005b30 <__libc_init_array+0x38>)
 8005afc:	4c0d      	ldr	r4, [pc, #52]	; (8005b34 <__libc_init_array+0x3c>)
 8005afe:	1ba4      	subs	r4, r4, r6
 8005b00:	10a4      	asrs	r4, r4, #2
 8005b02:	2500      	movs	r5, #0
 8005b04:	42a5      	cmp	r5, r4
 8005b06:	d109      	bne.n	8005b1c <__libc_init_array+0x24>
 8005b08:	4e0b      	ldr	r6, [pc, #44]	; (8005b38 <__libc_init_array+0x40>)
 8005b0a:	4c0c      	ldr	r4, [pc, #48]	; (8005b3c <__libc_init_array+0x44>)
 8005b0c:	f001 f90c 	bl	8006d28 <_init>
 8005b10:	1ba4      	subs	r4, r4, r6
 8005b12:	10a4      	asrs	r4, r4, #2
 8005b14:	2500      	movs	r5, #0
 8005b16:	42a5      	cmp	r5, r4
 8005b18:	d105      	bne.n	8005b26 <__libc_init_array+0x2e>
 8005b1a:	bd70      	pop	{r4, r5, r6, pc}
 8005b1c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005b20:	4798      	blx	r3
 8005b22:	3501      	adds	r5, #1
 8005b24:	e7ee      	b.n	8005b04 <__libc_init_array+0xc>
 8005b26:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005b2a:	4798      	blx	r3
 8005b2c:	3501      	adds	r5, #1
 8005b2e:	e7f2      	b.n	8005b16 <__libc_init_array+0x1e>
 8005b30:	080076b0 	.word	0x080076b0
 8005b34:	080076b0 	.word	0x080076b0
 8005b38:	080076b0 	.word	0x080076b0
 8005b3c:	080076b4 	.word	0x080076b4

08005b40 <memset>:
 8005b40:	4402      	add	r2, r0
 8005b42:	4603      	mov	r3, r0
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d100      	bne.n	8005b4a <memset+0xa>
 8005b48:	4770      	bx	lr
 8005b4a:	f803 1b01 	strb.w	r1, [r3], #1
 8005b4e:	e7f9      	b.n	8005b44 <memset+0x4>

08005b50 <siprintf>:
 8005b50:	b40e      	push	{r1, r2, r3}
 8005b52:	b500      	push	{lr}
 8005b54:	b09c      	sub	sp, #112	; 0x70
 8005b56:	ab1d      	add	r3, sp, #116	; 0x74
 8005b58:	9002      	str	r0, [sp, #8]
 8005b5a:	9006      	str	r0, [sp, #24]
 8005b5c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005b60:	4809      	ldr	r0, [pc, #36]	; (8005b88 <siprintf+0x38>)
 8005b62:	9107      	str	r1, [sp, #28]
 8005b64:	9104      	str	r1, [sp, #16]
 8005b66:	4909      	ldr	r1, [pc, #36]	; (8005b8c <siprintf+0x3c>)
 8005b68:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b6c:	9105      	str	r1, [sp, #20]
 8005b6e:	6800      	ldr	r0, [r0, #0]
 8005b70:	9301      	str	r3, [sp, #4]
 8005b72:	a902      	add	r1, sp, #8
 8005b74:	f000 f892 	bl	8005c9c <_svfiprintf_r>
 8005b78:	9b02      	ldr	r3, [sp, #8]
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	701a      	strb	r2, [r3, #0]
 8005b7e:	b01c      	add	sp, #112	; 0x70
 8005b80:	f85d eb04 	ldr.w	lr, [sp], #4
 8005b84:	b003      	add	sp, #12
 8005b86:	4770      	bx	lr
 8005b88:	200000ec 	.word	0x200000ec
 8005b8c:	ffff0208 	.word	0xffff0208

08005b90 <siscanf>:
 8005b90:	b40e      	push	{r1, r2, r3}
 8005b92:	b530      	push	{r4, r5, lr}
 8005b94:	b09c      	sub	sp, #112	; 0x70
 8005b96:	ac1f      	add	r4, sp, #124	; 0x7c
 8005b98:	f44f 7201 	mov.w	r2, #516	; 0x204
 8005b9c:	f854 5b04 	ldr.w	r5, [r4], #4
 8005ba0:	f8ad 2014 	strh.w	r2, [sp, #20]
 8005ba4:	9002      	str	r0, [sp, #8]
 8005ba6:	9006      	str	r0, [sp, #24]
 8005ba8:	f7fa fb1c 	bl	80001e4 <strlen>
 8005bac:	4b0b      	ldr	r3, [pc, #44]	; (8005bdc <siscanf+0x4c>)
 8005bae:	9003      	str	r0, [sp, #12]
 8005bb0:	9007      	str	r0, [sp, #28]
 8005bb2:	930b      	str	r3, [sp, #44]	; 0x2c
 8005bb4:	480a      	ldr	r0, [pc, #40]	; (8005be0 <siscanf+0x50>)
 8005bb6:	9401      	str	r4, [sp, #4]
 8005bb8:	2300      	movs	r3, #0
 8005bba:	930f      	str	r3, [sp, #60]	; 0x3c
 8005bbc:	9314      	str	r3, [sp, #80]	; 0x50
 8005bbe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005bc2:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005bc6:	462a      	mov	r2, r5
 8005bc8:	4623      	mov	r3, r4
 8005bca:	a902      	add	r1, sp, #8
 8005bcc:	6800      	ldr	r0, [r0, #0]
 8005bce:	f000 f9b7 	bl	8005f40 <__ssvfiscanf_r>
 8005bd2:	b01c      	add	sp, #112	; 0x70
 8005bd4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005bd8:	b003      	add	sp, #12
 8005bda:	4770      	bx	lr
 8005bdc:	08005be5 	.word	0x08005be5
 8005be0:	200000ec 	.word	0x200000ec

08005be4 <__seofread>:
 8005be4:	2000      	movs	r0, #0
 8005be6:	4770      	bx	lr

08005be8 <__ssputs_r>:
 8005be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005bec:	688e      	ldr	r6, [r1, #8]
 8005bee:	429e      	cmp	r6, r3
 8005bf0:	4682      	mov	sl, r0
 8005bf2:	460c      	mov	r4, r1
 8005bf4:	4690      	mov	r8, r2
 8005bf6:	4699      	mov	r9, r3
 8005bf8:	d837      	bhi.n	8005c6a <__ssputs_r+0x82>
 8005bfa:	898a      	ldrh	r2, [r1, #12]
 8005bfc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005c00:	d031      	beq.n	8005c66 <__ssputs_r+0x7e>
 8005c02:	6825      	ldr	r5, [r4, #0]
 8005c04:	6909      	ldr	r1, [r1, #16]
 8005c06:	1a6f      	subs	r7, r5, r1
 8005c08:	6965      	ldr	r5, [r4, #20]
 8005c0a:	2302      	movs	r3, #2
 8005c0c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005c10:	fb95 f5f3 	sdiv	r5, r5, r3
 8005c14:	f109 0301 	add.w	r3, r9, #1
 8005c18:	443b      	add	r3, r7
 8005c1a:	429d      	cmp	r5, r3
 8005c1c:	bf38      	it	cc
 8005c1e:	461d      	movcc	r5, r3
 8005c20:	0553      	lsls	r3, r2, #21
 8005c22:	d530      	bpl.n	8005c86 <__ssputs_r+0x9e>
 8005c24:	4629      	mov	r1, r5
 8005c26:	f000 ffd7 	bl	8006bd8 <_malloc_r>
 8005c2a:	4606      	mov	r6, r0
 8005c2c:	b950      	cbnz	r0, 8005c44 <__ssputs_r+0x5c>
 8005c2e:	230c      	movs	r3, #12
 8005c30:	f8ca 3000 	str.w	r3, [sl]
 8005c34:	89a3      	ldrh	r3, [r4, #12]
 8005c36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c3a:	81a3      	strh	r3, [r4, #12]
 8005c3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005c40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c44:	463a      	mov	r2, r7
 8005c46:	6921      	ldr	r1, [r4, #16]
 8005c48:	f000 ff54 	bl	8006af4 <memcpy>
 8005c4c:	89a3      	ldrh	r3, [r4, #12]
 8005c4e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005c52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c56:	81a3      	strh	r3, [r4, #12]
 8005c58:	6126      	str	r6, [r4, #16]
 8005c5a:	6165      	str	r5, [r4, #20]
 8005c5c:	443e      	add	r6, r7
 8005c5e:	1bed      	subs	r5, r5, r7
 8005c60:	6026      	str	r6, [r4, #0]
 8005c62:	60a5      	str	r5, [r4, #8]
 8005c64:	464e      	mov	r6, r9
 8005c66:	454e      	cmp	r6, r9
 8005c68:	d900      	bls.n	8005c6c <__ssputs_r+0x84>
 8005c6a:	464e      	mov	r6, r9
 8005c6c:	4632      	mov	r2, r6
 8005c6e:	4641      	mov	r1, r8
 8005c70:	6820      	ldr	r0, [r4, #0]
 8005c72:	f000 ff4a 	bl	8006b0a <memmove>
 8005c76:	68a3      	ldr	r3, [r4, #8]
 8005c78:	1b9b      	subs	r3, r3, r6
 8005c7a:	60a3      	str	r3, [r4, #8]
 8005c7c:	6823      	ldr	r3, [r4, #0]
 8005c7e:	441e      	add	r6, r3
 8005c80:	6026      	str	r6, [r4, #0]
 8005c82:	2000      	movs	r0, #0
 8005c84:	e7dc      	b.n	8005c40 <__ssputs_r+0x58>
 8005c86:	462a      	mov	r2, r5
 8005c88:	f001 f800 	bl	8006c8c <_realloc_r>
 8005c8c:	4606      	mov	r6, r0
 8005c8e:	2800      	cmp	r0, #0
 8005c90:	d1e2      	bne.n	8005c58 <__ssputs_r+0x70>
 8005c92:	6921      	ldr	r1, [r4, #16]
 8005c94:	4650      	mov	r0, sl
 8005c96:	f000 ff51 	bl	8006b3c <_free_r>
 8005c9a:	e7c8      	b.n	8005c2e <__ssputs_r+0x46>

08005c9c <_svfiprintf_r>:
 8005c9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ca0:	461d      	mov	r5, r3
 8005ca2:	898b      	ldrh	r3, [r1, #12]
 8005ca4:	061f      	lsls	r7, r3, #24
 8005ca6:	b09d      	sub	sp, #116	; 0x74
 8005ca8:	4680      	mov	r8, r0
 8005caa:	460c      	mov	r4, r1
 8005cac:	4616      	mov	r6, r2
 8005cae:	d50f      	bpl.n	8005cd0 <_svfiprintf_r+0x34>
 8005cb0:	690b      	ldr	r3, [r1, #16]
 8005cb2:	b96b      	cbnz	r3, 8005cd0 <_svfiprintf_r+0x34>
 8005cb4:	2140      	movs	r1, #64	; 0x40
 8005cb6:	f000 ff8f 	bl	8006bd8 <_malloc_r>
 8005cba:	6020      	str	r0, [r4, #0]
 8005cbc:	6120      	str	r0, [r4, #16]
 8005cbe:	b928      	cbnz	r0, 8005ccc <_svfiprintf_r+0x30>
 8005cc0:	230c      	movs	r3, #12
 8005cc2:	f8c8 3000 	str.w	r3, [r8]
 8005cc6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005cca:	e0c8      	b.n	8005e5e <_svfiprintf_r+0x1c2>
 8005ccc:	2340      	movs	r3, #64	; 0x40
 8005cce:	6163      	str	r3, [r4, #20]
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	9309      	str	r3, [sp, #36]	; 0x24
 8005cd4:	2320      	movs	r3, #32
 8005cd6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005cda:	2330      	movs	r3, #48	; 0x30
 8005cdc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005ce0:	9503      	str	r5, [sp, #12]
 8005ce2:	f04f 0b01 	mov.w	fp, #1
 8005ce6:	4637      	mov	r7, r6
 8005ce8:	463d      	mov	r5, r7
 8005cea:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005cee:	b10b      	cbz	r3, 8005cf4 <_svfiprintf_r+0x58>
 8005cf0:	2b25      	cmp	r3, #37	; 0x25
 8005cf2:	d13e      	bne.n	8005d72 <_svfiprintf_r+0xd6>
 8005cf4:	ebb7 0a06 	subs.w	sl, r7, r6
 8005cf8:	d00b      	beq.n	8005d12 <_svfiprintf_r+0x76>
 8005cfa:	4653      	mov	r3, sl
 8005cfc:	4632      	mov	r2, r6
 8005cfe:	4621      	mov	r1, r4
 8005d00:	4640      	mov	r0, r8
 8005d02:	f7ff ff71 	bl	8005be8 <__ssputs_r>
 8005d06:	3001      	adds	r0, #1
 8005d08:	f000 80a4 	beq.w	8005e54 <_svfiprintf_r+0x1b8>
 8005d0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d0e:	4453      	add	r3, sl
 8005d10:	9309      	str	r3, [sp, #36]	; 0x24
 8005d12:	783b      	ldrb	r3, [r7, #0]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	f000 809d 	beq.w	8005e54 <_svfiprintf_r+0x1b8>
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005d20:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005d24:	9304      	str	r3, [sp, #16]
 8005d26:	9307      	str	r3, [sp, #28]
 8005d28:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005d2c:	931a      	str	r3, [sp, #104]	; 0x68
 8005d2e:	462f      	mov	r7, r5
 8005d30:	2205      	movs	r2, #5
 8005d32:	f817 1b01 	ldrb.w	r1, [r7], #1
 8005d36:	4850      	ldr	r0, [pc, #320]	; (8005e78 <_svfiprintf_r+0x1dc>)
 8005d38:	f7fa fa62 	bl	8000200 <memchr>
 8005d3c:	9b04      	ldr	r3, [sp, #16]
 8005d3e:	b9d0      	cbnz	r0, 8005d76 <_svfiprintf_r+0xda>
 8005d40:	06d9      	lsls	r1, r3, #27
 8005d42:	bf44      	itt	mi
 8005d44:	2220      	movmi	r2, #32
 8005d46:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005d4a:	071a      	lsls	r2, r3, #28
 8005d4c:	bf44      	itt	mi
 8005d4e:	222b      	movmi	r2, #43	; 0x2b
 8005d50:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005d54:	782a      	ldrb	r2, [r5, #0]
 8005d56:	2a2a      	cmp	r2, #42	; 0x2a
 8005d58:	d015      	beq.n	8005d86 <_svfiprintf_r+0xea>
 8005d5a:	9a07      	ldr	r2, [sp, #28]
 8005d5c:	462f      	mov	r7, r5
 8005d5e:	2000      	movs	r0, #0
 8005d60:	250a      	movs	r5, #10
 8005d62:	4639      	mov	r1, r7
 8005d64:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005d68:	3b30      	subs	r3, #48	; 0x30
 8005d6a:	2b09      	cmp	r3, #9
 8005d6c:	d94d      	bls.n	8005e0a <_svfiprintf_r+0x16e>
 8005d6e:	b1b8      	cbz	r0, 8005da0 <_svfiprintf_r+0x104>
 8005d70:	e00f      	b.n	8005d92 <_svfiprintf_r+0xf6>
 8005d72:	462f      	mov	r7, r5
 8005d74:	e7b8      	b.n	8005ce8 <_svfiprintf_r+0x4c>
 8005d76:	4a40      	ldr	r2, [pc, #256]	; (8005e78 <_svfiprintf_r+0x1dc>)
 8005d78:	1a80      	subs	r0, r0, r2
 8005d7a:	fa0b f000 	lsl.w	r0, fp, r0
 8005d7e:	4318      	orrs	r0, r3
 8005d80:	9004      	str	r0, [sp, #16]
 8005d82:	463d      	mov	r5, r7
 8005d84:	e7d3      	b.n	8005d2e <_svfiprintf_r+0x92>
 8005d86:	9a03      	ldr	r2, [sp, #12]
 8005d88:	1d11      	adds	r1, r2, #4
 8005d8a:	6812      	ldr	r2, [r2, #0]
 8005d8c:	9103      	str	r1, [sp, #12]
 8005d8e:	2a00      	cmp	r2, #0
 8005d90:	db01      	blt.n	8005d96 <_svfiprintf_r+0xfa>
 8005d92:	9207      	str	r2, [sp, #28]
 8005d94:	e004      	b.n	8005da0 <_svfiprintf_r+0x104>
 8005d96:	4252      	negs	r2, r2
 8005d98:	f043 0302 	orr.w	r3, r3, #2
 8005d9c:	9207      	str	r2, [sp, #28]
 8005d9e:	9304      	str	r3, [sp, #16]
 8005da0:	783b      	ldrb	r3, [r7, #0]
 8005da2:	2b2e      	cmp	r3, #46	; 0x2e
 8005da4:	d10c      	bne.n	8005dc0 <_svfiprintf_r+0x124>
 8005da6:	787b      	ldrb	r3, [r7, #1]
 8005da8:	2b2a      	cmp	r3, #42	; 0x2a
 8005daa:	d133      	bne.n	8005e14 <_svfiprintf_r+0x178>
 8005dac:	9b03      	ldr	r3, [sp, #12]
 8005dae:	1d1a      	adds	r2, r3, #4
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	9203      	str	r2, [sp, #12]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	bfb8      	it	lt
 8005db8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005dbc:	3702      	adds	r7, #2
 8005dbe:	9305      	str	r3, [sp, #20]
 8005dc0:	4d2e      	ldr	r5, [pc, #184]	; (8005e7c <_svfiprintf_r+0x1e0>)
 8005dc2:	7839      	ldrb	r1, [r7, #0]
 8005dc4:	2203      	movs	r2, #3
 8005dc6:	4628      	mov	r0, r5
 8005dc8:	f7fa fa1a 	bl	8000200 <memchr>
 8005dcc:	b138      	cbz	r0, 8005dde <_svfiprintf_r+0x142>
 8005dce:	2340      	movs	r3, #64	; 0x40
 8005dd0:	1b40      	subs	r0, r0, r5
 8005dd2:	fa03 f000 	lsl.w	r0, r3, r0
 8005dd6:	9b04      	ldr	r3, [sp, #16]
 8005dd8:	4303      	orrs	r3, r0
 8005dda:	3701      	adds	r7, #1
 8005ddc:	9304      	str	r3, [sp, #16]
 8005dde:	7839      	ldrb	r1, [r7, #0]
 8005de0:	4827      	ldr	r0, [pc, #156]	; (8005e80 <_svfiprintf_r+0x1e4>)
 8005de2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005de6:	2206      	movs	r2, #6
 8005de8:	1c7e      	adds	r6, r7, #1
 8005dea:	f7fa fa09 	bl	8000200 <memchr>
 8005dee:	2800      	cmp	r0, #0
 8005df0:	d038      	beq.n	8005e64 <_svfiprintf_r+0x1c8>
 8005df2:	4b24      	ldr	r3, [pc, #144]	; (8005e84 <_svfiprintf_r+0x1e8>)
 8005df4:	bb13      	cbnz	r3, 8005e3c <_svfiprintf_r+0x1a0>
 8005df6:	9b03      	ldr	r3, [sp, #12]
 8005df8:	3307      	adds	r3, #7
 8005dfa:	f023 0307 	bic.w	r3, r3, #7
 8005dfe:	3308      	adds	r3, #8
 8005e00:	9303      	str	r3, [sp, #12]
 8005e02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e04:	444b      	add	r3, r9
 8005e06:	9309      	str	r3, [sp, #36]	; 0x24
 8005e08:	e76d      	b.n	8005ce6 <_svfiprintf_r+0x4a>
 8005e0a:	fb05 3202 	mla	r2, r5, r2, r3
 8005e0e:	2001      	movs	r0, #1
 8005e10:	460f      	mov	r7, r1
 8005e12:	e7a6      	b.n	8005d62 <_svfiprintf_r+0xc6>
 8005e14:	2300      	movs	r3, #0
 8005e16:	3701      	adds	r7, #1
 8005e18:	9305      	str	r3, [sp, #20]
 8005e1a:	4619      	mov	r1, r3
 8005e1c:	250a      	movs	r5, #10
 8005e1e:	4638      	mov	r0, r7
 8005e20:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005e24:	3a30      	subs	r2, #48	; 0x30
 8005e26:	2a09      	cmp	r2, #9
 8005e28:	d903      	bls.n	8005e32 <_svfiprintf_r+0x196>
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d0c8      	beq.n	8005dc0 <_svfiprintf_r+0x124>
 8005e2e:	9105      	str	r1, [sp, #20]
 8005e30:	e7c6      	b.n	8005dc0 <_svfiprintf_r+0x124>
 8005e32:	fb05 2101 	mla	r1, r5, r1, r2
 8005e36:	2301      	movs	r3, #1
 8005e38:	4607      	mov	r7, r0
 8005e3a:	e7f0      	b.n	8005e1e <_svfiprintf_r+0x182>
 8005e3c:	ab03      	add	r3, sp, #12
 8005e3e:	9300      	str	r3, [sp, #0]
 8005e40:	4622      	mov	r2, r4
 8005e42:	4b11      	ldr	r3, [pc, #68]	; (8005e88 <_svfiprintf_r+0x1ec>)
 8005e44:	a904      	add	r1, sp, #16
 8005e46:	4640      	mov	r0, r8
 8005e48:	f3af 8000 	nop.w
 8005e4c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8005e50:	4681      	mov	r9, r0
 8005e52:	d1d6      	bne.n	8005e02 <_svfiprintf_r+0x166>
 8005e54:	89a3      	ldrh	r3, [r4, #12]
 8005e56:	065b      	lsls	r3, r3, #25
 8005e58:	f53f af35 	bmi.w	8005cc6 <_svfiprintf_r+0x2a>
 8005e5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005e5e:	b01d      	add	sp, #116	; 0x74
 8005e60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e64:	ab03      	add	r3, sp, #12
 8005e66:	9300      	str	r3, [sp, #0]
 8005e68:	4622      	mov	r2, r4
 8005e6a:	4b07      	ldr	r3, [pc, #28]	; (8005e88 <_svfiprintf_r+0x1ec>)
 8005e6c:	a904      	add	r1, sp, #16
 8005e6e:	4640      	mov	r0, r8
 8005e70:	f000 fa2c 	bl	80062cc <_printf_i>
 8005e74:	e7ea      	b.n	8005e4c <_svfiprintf_r+0x1b0>
 8005e76:	bf00      	nop
 8005e78:	080074ec 	.word	0x080074ec
 8005e7c:	080074f2 	.word	0x080074f2
 8005e80:	080074f6 	.word	0x080074f6
 8005e84:	00000000 	.word	0x00000000
 8005e88:	08005be9 	.word	0x08005be9

08005e8c <_sungetc_r>:
 8005e8c:	b538      	push	{r3, r4, r5, lr}
 8005e8e:	1c4b      	adds	r3, r1, #1
 8005e90:	4614      	mov	r4, r2
 8005e92:	d103      	bne.n	8005e9c <_sungetc_r+0x10>
 8005e94:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8005e98:	4628      	mov	r0, r5
 8005e9a:	bd38      	pop	{r3, r4, r5, pc}
 8005e9c:	8993      	ldrh	r3, [r2, #12]
 8005e9e:	f023 0320 	bic.w	r3, r3, #32
 8005ea2:	8193      	strh	r3, [r2, #12]
 8005ea4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005ea6:	6852      	ldr	r2, [r2, #4]
 8005ea8:	b2cd      	uxtb	r5, r1
 8005eaa:	b18b      	cbz	r3, 8005ed0 <_sungetc_r+0x44>
 8005eac:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	dd08      	ble.n	8005ec4 <_sungetc_r+0x38>
 8005eb2:	6823      	ldr	r3, [r4, #0]
 8005eb4:	1e5a      	subs	r2, r3, #1
 8005eb6:	6022      	str	r2, [r4, #0]
 8005eb8:	f803 5c01 	strb.w	r5, [r3, #-1]
 8005ebc:	6863      	ldr	r3, [r4, #4]
 8005ebe:	3301      	adds	r3, #1
 8005ec0:	6063      	str	r3, [r4, #4]
 8005ec2:	e7e9      	b.n	8005e98 <_sungetc_r+0xc>
 8005ec4:	4621      	mov	r1, r4
 8005ec6:	f000 fdb7 	bl	8006a38 <__submore>
 8005eca:	2800      	cmp	r0, #0
 8005ecc:	d0f1      	beq.n	8005eb2 <_sungetc_r+0x26>
 8005ece:	e7e1      	b.n	8005e94 <_sungetc_r+0x8>
 8005ed0:	6921      	ldr	r1, [r4, #16]
 8005ed2:	6823      	ldr	r3, [r4, #0]
 8005ed4:	b151      	cbz	r1, 8005eec <_sungetc_r+0x60>
 8005ed6:	4299      	cmp	r1, r3
 8005ed8:	d208      	bcs.n	8005eec <_sungetc_r+0x60>
 8005eda:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8005ede:	42a9      	cmp	r1, r5
 8005ee0:	d104      	bne.n	8005eec <_sungetc_r+0x60>
 8005ee2:	3b01      	subs	r3, #1
 8005ee4:	3201      	adds	r2, #1
 8005ee6:	6023      	str	r3, [r4, #0]
 8005ee8:	6062      	str	r2, [r4, #4]
 8005eea:	e7d5      	b.n	8005e98 <_sungetc_r+0xc>
 8005eec:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8005ef0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005ef4:	6363      	str	r3, [r4, #52]	; 0x34
 8005ef6:	2303      	movs	r3, #3
 8005ef8:	63a3      	str	r3, [r4, #56]	; 0x38
 8005efa:	4623      	mov	r3, r4
 8005efc:	f803 5f46 	strb.w	r5, [r3, #70]!
 8005f00:	6023      	str	r3, [r4, #0]
 8005f02:	2301      	movs	r3, #1
 8005f04:	e7dc      	b.n	8005ec0 <_sungetc_r+0x34>

08005f06 <__ssrefill_r>:
 8005f06:	b510      	push	{r4, lr}
 8005f08:	460c      	mov	r4, r1
 8005f0a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8005f0c:	b169      	cbz	r1, 8005f2a <__ssrefill_r+0x24>
 8005f0e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005f12:	4299      	cmp	r1, r3
 8005f14:	d001      	beq.n	8005f1a <__ssrefill_r+0x14>
 8005f16:	f000 fe11 	bl	8006b3c <_free_r>
 8005f1a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005f1c:	6063      	str	r3, [r4, #4]
 8005f1e:	2000      	movs	r0, #0
 8005f20:	6360      	str	r0, [r4, #52]	; 0x34
 8005f22:	b113      	cbz	r3, 8005f2a <__ssrefill_r+0x24>
 8005f24:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005f26:	6023      	str	r3, [r4, #0]
 8005f28:	bd10      	pop	{r4, pc}
 8005f2a:	6923      	ldr	r3, [r4, #16]
 8005f2c:	6023      	str	r3, [r4, #0]
 8005f2e:	2300      	movs	r3, #0
 8005f30:	6063      	str	r3, [r4, #4]
 8005f32:	89a3      	ldrh	r3, [r4, #12]
 8005f34:	f043 0320 	orr.w	r3, r3, #32
 8005f38:	81a3      	strh	r3, [r4, #12]
 8005f3a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005f3e:	e7f3      	b.n	8005f28 <__ssrefill_r+0x22>

08005f40 <__ssvfiscanf_r>:
 8005f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f44:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8005f48:	460c      	mov	r4, r1
 8005f4a:	2100      	movs	r1, #0
 8005f4c:	9144      	str	r1, [sp, #272]	; 0x110
 8005f4e:	9145      	str	r1, [sp, #276]	; 0x114
 8005f50:	499f      	ldr	r1, [pc, #636]	; (80061d0 <__ssvfiscanf_r+0x290>)
 8005f52:	91a0      	str	r1, [sp, #640]	; 0x280
 8005f54:	f10d 0804 	add.w	r8, sp, #4
 8005f58:	499e      	ldr	r1, [pc, #632]	; (80061d4 <__ssvfiscanf_r+0x294>)
 8005f5a:	f8df 927c 	ldr.w	r9, [pc, #636]	; 80061d8 <__ssvfiscanf_r+0x298>
 8005f5e:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8005f62:	4606      	mov	r6, r0
 8005f64:	4692      	mov	sl, r2
 8005f66:	91a1      	str	r1, [sp, #644]	; 0x284
 8005f68:	9300      	str	r3, [sp, #0]
 8005f6a:	270a      	movs	r7, #10
 8005f6c:	f89a 3000 	ldrb.w	r3, [sl]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	f000 812a 	beq.w	80061ca <__ssvfiscanf_r+0x28a>
 8005f76:	4655      	mov	r5, sl
 8005f78:	f000 fd9c 	bl	8006ab4 <__locale_ctype_ptr>
 8005f7c:	f815 bb01 	ldrb.w	fp, [r5], #1
 8005f80:	4458      	add	r0, fp
 8005f82:	7843      	ldrb	r3, [r0, #1]
 8005f84:	f013 0308 	ands.w	r3, r3, #8
 8005f88:	d01c      	beq.n	8005fc4 <__ssvfiscanf_r+0x84>
 8005f8a:	6863      	ldr	r3, [r4, #4]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	dd12      	ble.n	8005fb6 <__ssvfiscanf_r+0x76>
 8005f90:	f000 fd90 	bl	8006ab4 <__locale_ctype_ptr>
 8005f94:	6823      	ldr	r3, [r4, #0]
 8005f96:	781a      	ldrb	r2, [r3, #0]
 8005f98:	4410      	add	r0, r2
 8005f9a:	7842      	ldrb	r2, [r0, #1]
 8005f9c:	0712      	lsls	r2, r2, #28
 8005f9e:	d401      	bmi.n	8005fa4 <__ssvfiscanf_r+0x64>
 8005fa0:	46aa      	mov	sl, r5
 8005fa2:	e7e3      	b.n	8005f6c <__ssvfiscanf_r+0x2c>
 8005fa4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8005fa6:	3201      	adds	r2, #1
 8005fa8:	9245      	str	r2, [sp, #276]	; 0x114
 8005faa:	6862      	ldr	r2, [r4, #4]
 8005fac:	3301      	adds	r3, #1
 8005fae:	3a01      	subs	r2, #1
 8005fb0:	6062      	str	r2, [r4, #4]
 8005fb2:	6023      	str	r3, [r4, #0]
 8005fb4:	e7e9      	b.n	8005f8a <__ssvfiscanf_r+0x4a>
 8005fb6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005fb8:	4621      	mov	r1, r4
 8005fba:	4630      	mov	r0, r6
 8005fbc:	4798      	blx	r3
 8005fbe:	2800      	cmp	r0, #0
 8005fc0:	d0e6      	beq.n	8005f90 <__ssvfiscanf_r+0x50>
 8005fc2:	e7ed      	b.n	8005fa0 <__ssvfiscanf_r+0x60>
 8005fc4:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8005fc8:	f040 8082 	bne.w	80060d0 <__ssvfiscanf_r+0x190>
 8005fcc:	9343      	str	r3, [sp, #268]	; 0x10c
 8005fce:	9341      	str	r3, [sp, #260]	; 0x104
 8005fd0:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8005fd4:	2b2a      	cmp	r3, #42	; 0x2a
 8005fd6:	d103      	bne.n	8005fe0 <__ssvfiscanf_r+0xa0>
 8005fd8:	2310      	movs	r3, #16
 8005fda:	9341      	str	r3, [sp, #260]	; 0x104
 8005fdc:	f10a 0502 	add.w	r5, sl, #2
 8005fe0:	46aa      	mov	sl, r5
 8005fe2:	f815 1b01 	ldrb.w	r1, [r5], #1
 8005fe6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8005fea:	2a09      	cmp	r2, #9
 8005fec:	d922      	bls.n	8006034 <__ssvfiscanf_r+0xf4>
 8005fee:	2203      	movs	r2, #3
 8005ff0:	4879      	ldr	r0, [pc, #484]	; (80061d8 <__ssvfiscanf_r+0x298>)
 8005ff2:	f7fa f905 	bl	8000200 <memchr>
 8005ff6:	b138      	cbz	r0, 8006008 <__ssvfiscanf_r+0xc8>
 8005ff8:	eba0 0309 	sub.w	r3, r0, r9
 8005ffc:	2001      	movs	r0, #1
 8005ffe:	4098      	lsls	r0, r3
 8006000:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8006002:	4318      	orrs	r0, r3
 8006004:	9041      	str	r0, [sp, #260]	; 0x104
 8006006:	46aa      	mov	sl, r5
 8006008:	f89a 3000 	ldrb.w	r3, [sl]
 800600c:	2b67      	cmp	r3, #103	; 0x67
 800600e:	f10a 0501 	add.w	r5, sl, #1
 8006012:	d82b      	bhi.n	800606c <__ssvfiscanf_r+0x12c>
 8006014:	2b65      	cmp	r3, #101	; 0x65
 8006016:	f080 809f 	bcs.w	8006158 <__ssvfiscanf_r+0x218>
 800601a:	2b47      	cmp	r3, #71	; 0x47
 800601c:	d810      	bhi.n	8006040 <__ssvfiscanf_r+0x100>
 800601e:	2b45      	cmp	r3, #69	; 0x45
 8006020:	f080 809a 	bcs.w	8006158 <__ssvfiscanf_r+0x218>
 8006024:	2b00      	cmp	r3, #0
 8006026:	d06c      	beq.n	8006102 <__ssvfiscanf_r+0x1c2>
 8006028:	2b25      	cmp	r3, #37	; 0x25
 800602a:	d051      	beq.n	80060d0 <__ssvfiscanf_r+0x190>
 800602c:	2303      	movs	r3, #3
 800602e:	9347      	str	r3, [sp, #284]	; 0x11c
 8006030:	9742      	str	r7, [sp, #264]	; 0x108
 8006032:	e027      	b.n	8006084 <__ssvfiscanf_r+0x144>
 8006034:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8006036:	fb07 1303 	mla	r3, r7, r3, r1
 800603a:	3b30      	subs	r3, #48	; 0x30
 800603c:	9343      	str	r3, [sp, #268]	; 0x10c
 800603e:	e7cf      	b.n	8005fe0 <__ssvfiscanf_r+0xa0>
 8006040:	2b5b      	cmp	r3, #91	; 0x5b
 8006042:	d06a      	beq.n	800611a <__ssvfiscanf_r+0x1da>
 8006044:	d80c      	bhi.n	8006060 <__ssvfiscanf_r+0x120>
 8006046:	2b58      	cmp	r3, #88	; 0x58
 8006048:	d1f0      	bne.n	800602c <__ssvfiscanf_r+0xec>
 800604a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800604c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006050:	9241      	str	r2, [sp, #260]	; 0x104
 8006052:	2210      	movs	r2, #16
 8006054:	9242      	str	r2, [sp, #264]	; 0x108
 8006056:	2b6e      	cmp	r3, #110	; 0x6e
 8006058:	bf8c      	ite	hi
 800605a:	2304      	movhi	r3, #4
 800605c:	2303      	movls	r3, #3
 800605e:	e010      	b.n	8006082 <__ssvfiscanf_r+0x142>
 8006060:	2b63      	cmp	r3, #99	; 0x63
 8006062:	d065      	beq.n	8006130 <__ssvfiscanf_r+0x1f0>
 8006064:	2b64      	cmp	r3, #100	; 0x64
 8006066:	d1e1      	bne.n	800602c <__ssvfiscanf_r+0xec>
 8006068:	9742      	str	r7, [sp, #264]	; 0x108
 800606a:	e7f4      	b.n	8006056 <__ssvfiscanf_r+0x116>
 800606c:	2b70      	cmp	r3, #112	; 0x70
 800606e:	d04b      	beq.n	8006108 <__ssvfiscanf_r+0x1c8>
 8006070:	d826      	bhi.n	80060c0 <__ssvfiscanf_r+0x180>
 8006072:	2b6e      	cmp	r3, #110	; 0x6e
 8006074:	d062      	beq.n	800613c <__ssvfiscanf_r+0x1fc>
 8006076:	d84c      	bhi.n	8006112 <__ssvfiscanf_r+0x1d2>
 8006078:	2b69      	cmp	r3, #105	; 0x69
 800607a:	d1d7      	bne.n	800602c <__ssvfiscanf_r+0xec>
 800607c:	2300      	movs	r3, #0
 800607e:	9342      	str	r3, [sp, #264]	; 0x108
 8006080:	2303      	movs	r3, #3
 8006082:	9347      	str	r3, [sp, #284]	; 0x11c
 8006084:	6863      	ldr	r3, [r4, #4]
 8006086:	2b00      	cmp	r3, #0
 8006088:	dd68      	ble.n	800615c <__ssvfiscanf_r+0x21c>
 800608a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800608c:	0659      	lsls	r1, r3, #25
 800608e:	d407      	bmi.n	80060a0 <__ssvfiscanf_r+0x160>
 8006090:	f000 fd10 	bl	8006ab4 <__locale_ctype_ptr>
 8006094:	6823      	ldr	r3, [r4, #0]
 8006096:	781a      	ldrb	r2, [r3, #0]
 8006098:	4410      	add	r0, r2
 800609a:	7842      	ldrb	r2, [r0, #1]
 800609c:	0712      	lsls	r2, r2, #28
 800609e:	d464      	bmi.n	800616a <__ssvfiscanf_r+0x22a>
 80060a0:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80060a2:	2b02      	cmp	r3, #2
 80060a4:	dc73      	bgt.n	800618e <__ssvfiscanf_r+0x24e>
 80060a6:	466b      	mov	r3, sp
 80060a8:	4622      	mov	r2, r4
 80060aa:	a941      	add	r1, sp, #260	; 0x104
 80060ac:	4630      	mov	r0, r6
 80060ae:	f000 fa1f 	bl	80064f0 <_scanf_chars>
 80060b2:	2801      	cmp	r0, #1
 80060b4:	f000 8089 	beq.w	80061ca <__ssvfiscanf_r+0x28a>
 80060b8:	2802      	cmp	r0, #2
 80060ba:	f47f af71 	bne.w	8005fa0 <__ssvfiscanf_r+0x60>
 80060be:	e01d      	b.n	80060fc <__ssvfiscanf_r+0x1bc>
 80060c0:	2b75      	cmp	r3, #117	; 0x75
 80060c2:	d0d1      	beq.n	8006068 <__ssvfiscanf_r+0x128>
 80060c4:	2b78      	cmp	r3, #120	; 0x78
 80060c6:	d0c0      	beq.n	800604a <__ssvfiscanf_r+0x10a>
 80060c8:	2b73      	cmp	r3, #115	; 0x73
 80060ca:	d1af      	bne.n	800602c <__ssvfiscanf_r+0xec>
 80060cc:	2302      	movs	r3, #2
 80060ce:	e7d8      	b.n	8006082 <__ssvfiscanf_r+0x142>
 80060d0:	6863      	ldr	r3, [r4, #4]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	dd0c      	ble.n	80060f0 <__ssvfiscanf_r+0x1b0>
 80060d6:	6823      	ldr	r3, [r4, #0]
 80060d8:	781a      	ldrb	r2, [r3, #0]
 80060da:	455a      	cmp	r2, fp
 80060dc:	d175      	bne.n	80061ca <__ssvfiscanf_r+0x28a>
 80060de:	3301      	adds	r3, #1
 80060e0:	6862      	ldr	r2, [r4, #4]
 80060e2:	6023      	str	r3, [r4, #0]
 80060e4:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80060e6:	3a01      	subs	r2, #1
 80060e8:	3301      	adds	r3, #1
 80060ea:	6062      	str	r2, [r4, #4]
 80060ec:	9345      	str	r3, [sp, #276]	; 0x114
 80060ee:	e757      	b.n	8005fa0 <__ssvfiscanf_r+0x60>
 80060f0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80060f2:	4621      	mov	r1, r4
 80060f4:	4630      	mov	r0, r6
 80060f6:	4798      	blx	r3
 80060f8:	2800      	cmp	r0, #0
 80060fa:	d0ec      	beq.n	80060d6 <__ssvfiscanf_r+0x196>
 80060fc:	9844      	ldr	r0, [sp, #272]	; 0x110
 80060fe:	2800      	cmp	r0, #0
 8006100:	d159      	bne.n	80061b6 <__ssvfiscanf_r+0x276>
 8006102:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006106:	e05c      	b.n	80061c2 <__ssvfiscanf_r+0x282>
 8006108:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800610a:	f042 0220 	orr.w	r2, r2, #32
 800610e:	9241      	str	r2, [sp, #260]	; 0x104
 8006110:	e79b      	b.n	800604a <__ssvfiscanf_r+0x10a>
 8006112:	2308      	movs	r3, #8
 8006114:	9342      	str	r3, [sp, #264]	; 0x108
 8006116:	2304      	movs	r3, #4
 8006118:	e7b3      	b.n	8006082 <__ssvfiscanf_r+0x142>
 800611a:	4629      	mov	r1, r5
 800611c:	4640      	mov	r0, r8
 800611e:	f000 fb3f 	bl	80067a0 <__sccl>
 8006122:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8006124:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006128:	9341      	str	r3, [sp, #260]	; 0x104
 800612a:	4605      	mov	r5, r0
 800612c:	2301      	movs	r3, #1
 800612e:	e7a8      	b.n	8006082 <__ssvfiscanf_r+0x142>
 8006130:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8006132:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006136:	9341      	str	r3, [sp, #260]	; 0x104
 8006138:	2300      	movs	r3, #0
 800613a:	e7a2      	b.n	8006082 <__ssvfiscanf_r+0x142>
 800613c:	9841      	ldr	r0, [sp, #260]	; 0x104
 800613e:	06c3      	lsls	r3, r0, #27
 8006140:	f53f af2e 	bmi.w	8005fa0 <__ssvfiscanf_r+0x60>
 8006144:	9b00      	ldr	r3, [sp, #0]
 8006146:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8006148:	1d19      	adds	r1, r3, #4
 800614a:	9100      	str	r1, [sp, #0]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	07c0      	lsls	r0, r0, #31
 8006150:	bf4c      	ite	mi
 8006152:	801a      	strhmi	r2, [r3, #0]
 8006154:	601a      	strpl	r2, [r3, #0]
 8006156:	e723      	b.n	8005fa0 <__ssvfiscanf_r+0x60>
 8006158:	2305      	movs	r3, #5
 800615a:	e792      	b.n	8006082 <__ssvfiscanf_r+0x142>
 800615c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800615e:	4621      	mov	r1, r4
 8006160:	4630      	mov	r0, r6
 8006162:	4798      	blx	r3
 8006164:	2800      	cmp	r0, #0
 8006166:	d090      	beq.n	800608a <__ssvfiscanf_r+0x14a>
 8006168:	e7c8      	b.n	80060fc <__ssvfiscanf_r+0x1bc>
 800616a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800616c:	3201      	adds	r2, #1
 800616e:	9245      	str	r2, [sp, #276]	; 0x114
 8006170:	6862      	ldr	r2, [r4, #4]
 8006172:	3a01      	subs	r2, #1
 8006174:	2a00      	cmp	r2, #0
 8006176:	6062      	str	r2, [r4, #4]
 8006178:	dd02      	ble.n	8006180 <__ssvfiscanf_r+0x240>
 800617a:	3301      	adds	r3, #1
 800617c:	6023      	str	r3, [r4, #0]
 800617e:	e787      	b.n	8006090 <__ssvfiscanf_r+0x150>
 8006180:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8006182:	4621      	mov	r1, r4
 8006184:	4630      	mov	r0, r6
 8006186:	4798      	blx	r3
 8006188:	2800      	cmp	r0, #0
 800618a:	d081      	beq.n	8006090 <__ssvfiscanf_r+0x150>
 800618c:	e7b6      	b.n	80060fc <__ssvfiscanf_r+0x1bc>
 800618e:	2b04      	cmp	r3, #4
 8006190:	dc06      	bgt.n	80061a0 <__ssvfiscanf_r+0x260>
 8006192:	466b      	mov	r3, sp
 8006194:	4622      	mov	r2, r4
 8006196:	a941      	add	r1, sp, #260	; 0x104
 8006198:	4630      	mov	r0, r6
 800619a:	f000 fa0d 	bl	80065b8 <_scanf_i>
 800619e:	e788      	b.n	80060b2 <__ssvfiscanf_r+0x172>
 80061a0:	4b0e      	ldr	r3, [pc, #56]	; (80061dc <__ssvfiscanf_r+0x29c>)
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	f43f aefc 	beq.w	8005fa0 <__ssvfiscanf_r+0x60>
 80061a8:	466b      	mov	r3, sp
 80061aa:	4622      	mov	r2, r4
 80061ac:	a941      	add	r1, sp, #260	; 0x104
 80061ae:	4630      	mov	r0, r6
 80061b0:	f3af 8000 	nop.w
 80061b4:	e77d      	b.n	80060b2 <__ssvfiscanf_r+0x172>
 80061b6:	89a3      	ldrh	r3, [r4, #12]
 80061b8:	f013 0f40 	tst.w	r3, #64	; 0x40
 80061bc:	bf18      	it	ne
 80061be:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80061c2:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 80061c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061ca:	9844      	ldr	r0, [sp, #272]	; 0x110
 80061cc:	e7f9      	b.n	80061c2 <__ssvfiscanf_r+0x282>
 80061ce:	bf00      	nop
 80061d0:	08005e8d 	.word	0x08005e8d
 80061d4:	08005f07 	.word	0x08005f07
 80061d8:	080074f2 	.word	0x080074f2
 80061dc:	00000000 	.word	0x00000000

080061e0 <_printf_common>:
 80061e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061e4:	4691      	mov	r9, r2
 80061e6:	461f      	mov	r7, r3
 80061e8:	688a      	ldr	r2, [r1, #8]
 80061ea:	690b      	ldr	r3, [r1, #16]
 80061ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80061f0:	4293      	cmp	r3, r2
 80061f2:	bfb8      	it	lt
 80061f4:	4613      	movlt	r3, r2
 80061f6:	f8c9 3000 	str.w	r3, [r9]
 80061fa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80061fe:	4606      	mov	r6, r0
 8006200:	460c      	mov	r4, r1
 8006202:	b112      	cbz	r2, 800620a <_printf_common+0x2a>
 8006204:	3301      	adds	r3, #1
 8006206:	f8c9 3000 	str.w	r3, [r9]
 800620a:	6823      	ldr	r3, [r4, #0]
 800620c:	0699      	lsls	r1, r3, #26
 800620e:	bf42      	ittt	mi
 8006210:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006214:	3302      	addmi	r3, #2
 8006216:	f8c9 3000 	strmi.w	r3, [r9]
 800621a:	6825      	ldr	r5, [r4, #0]
 800621c:	f015 0506 	ands.w	r5, r5, #6
 8006220:	d107      	bne.n	8006232 <_printf_common+0x52>
 8006222:	f104 0a19 	add.w	sl, r4, #25
 8006226:	68e3      	ldr	r3, [r4, #12]
 8006228:	f8d9 2000 	ldr.w	r2, [r9]
 800622c:	1a9b      	subs	r3, r3, r2
 800622e:	42ab      	cmp	r3, r5
 8006230:	dc28      	bgt.n	8006284 <_printf_common+0xa4>
 8006232:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006236:	6822      	ldr	r2, [r4, #0]
 8006238:	3300      	adds	r3, #0
 800623a:	bf18      	it	ne
 800623c:	2301      	movne	r3, #1
 800623e:	0692      	lsls	r2, r2, #26
 8006240:	d42d      	bmi.n	800629e <_printf_common+0xbe>
 8006242:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006246:	4639      	mov	r1, r7
 8006248:	4630      	mov	r0, r6
 800624a:	47c0      	blx	r8
 800624c:	3001      	adds	r0, #1
 800624e:	d020      	beq.n	8006292 <_printf_common+0xb2>
 8006250:	6823      	ldr	r3, [r4, #0]
 8006252:	68e5      	ldr	r5, [r4, #12]
 8006254:	f8d9 2000 	ldr.w	r2, [r9]
 8006258:	f003 0306 	and.w	r3, r3, #6
 800625c:	2b04      	cmp	r3, #4
 800625e:	bf08      	it	eq
 8006260:	1aad      	subeq	r5, r5, r2
 8006262:	68a3      	ldr	r3, [r4, #8]
 8006264:	6922      	ldr	r2, [r4, #16]
 8006266:	bf0c      	ite	eq
 8006268:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800626c:	2500      	movne	r5, #0
 800626e:	4293      	cmp	r3, r2
 8006270:	bfc4      	itt	gt
 8006272:	1a9b      	subgt	r3, r3, r2
 8006274:	18ed      	addgt	r5, r5, r3
 8006276:	f04f 0900 	mov.w	r9, #0
 800627a:	341a      	adds	r4, #26
 800627c:	454d      	cmp	r5, r9
 800627e:	d11a      	bne.n	80062b6 <_printf_common+0xd6>
 8006280:	2000      	movs	r0, #0
 8006282:	e008      	b.n	8006296 <_printf_common+0xb6>
 8006284:	2301      	movs	r3, #1
 8006286:	4652      	mov	r2, sl
 8006288:	4639      	mov	r1, r7
 800628a:	4630      	mov	r0, r6
 800628c:	47c0      	blx	r8
 800628e:	3001      	adds	r0, #1
 8006290:	d103      	bne.n	800629a <_printf_common+0xba>
 8006292:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006296:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800629a:	3501      	adds	r5, #1
 800629c:	e7c3      	b.n	8006226 <_printf_common+0x46>
 800629e:	18e1      	adds	r1, r4, r3
 80062a0:	1c5a      	adds	r2, r3, #1
 80062a2:	2030      	movs	r0, #48	; 0x30
 80062a4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80062a8:	4422      	add	r2, r4
 80062aa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80062ae:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80062b2:	3302      	adds	r3, #2
 80062b4:	e7c5      	b.n	8006242 <_printf_common+0x62>
 80062b6:	2301      	movs	r3, #1
 80062b8:	4622      	mov	r2, r4
 80062ba:	4639      	mov	r1, r7
 80062bc:	4630      	mov	r0, r6
 80062be:	47c0      	blx	r8
 80062c0:	3001      	adds	r0, #1
 80062c2:	d0e6      	beq.n	8006292 <_printf_common+0xb2>
 80062c4:	f109 0901 	add.w	r9, r9, #1
 80062c8:	e7d8      	b.n	800627c <_printf_common+0x9c>
	...

080062cc <_printf_i>:
 80062cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80062d0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80062d4:	460c      	mov	r4, r1
 80062d6:	7e09      	ldrb	r1, [r1, #24]
 80062d8:	b085      	sub	sp, #20
 80062da:	296e      	cmp	r1, #110	; 0x6e
 80062dc:	4617      	mov	r7, r2
 80062de:	4606      	mov	r6, r0
 80062e0:	4698      	mov	r8, r3
 80062e2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80062e4:	f000 80b3 	beq.w	800644e <_printf_i+0x182>
 80062e8:	d822      	bhi.n	8006330 <_printf_i+0x64>
 80062ea:	2963      	cmp	r1, #99	; 0x63
 80062ec:	d036      	beq.n	800635c <_printf_i+0x90>
 80062ee:	d80a      	bhi.n	8006306 <_printf_i+0x3a>
 80062f0:	2900      	cmp	r1, #0
 80062f2:	f000 80b9 	beq.w	8006468 <_printf_i+0x19c>
 80062f6:	2958      	cmp	r1, #88	; 0x58
 80062f8:	f000 8083 	beq.w	8006402 <_printf_i+0x136>
 80062fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006300:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006304:	e032      	b.n	800636c <_printf_i+0xa0>
 8006306:	2964      	cmp	r1, #100	; 0x64
 8006308:	d001      	beq.n	800630e <_printf_i+0x42>
 800630a:	2969      	cmp	r1, #105	; 0x69
 800630c:	d1f6      	bne.n	80062fc <_printf_i+0x30>
 800630e:	6820      	ldr	r0, [r4, #0]
 8006310:	6813      	ldr	r3, [r2, #0]
 8006312:	0605      	lsls	r5, r0, #24
 8006314:	f103 0104 	add.w	r1, r3, #4
 8006318:	d52a      	bpl.n	8006370 <_printf_i+0xa4>
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	6011      	str	r1, [r2, #0]
 800631e:	2b00      	cmp	r3, #0
 8006320:	da03      	bge.n	800632a <_printf_i+0x5e>
 8006322:	222d      	movs	r2, #45	; 0x2d
 8006324:	425b      	negs	r3, r3
 8006326:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800632a:	486f      	ldr	r0, [pc, #444]	; (80064e8 <_printf_i+0x21c>)
 800632c:	220a      	movs	r2, #10
 800632e:	e039      	b.n	80063a4 <_printf_i+0xd8>
 8006330:	2973      	cmp	r1, #115	; 0x73
 8006332:	f000 809d 	beq.w	8006470 <_printf_i+0x1a4>
 8006336:	d808      	bhi.n	800634a <_printf_i+0x7e>
 8006338:	296f      	cmp	r1, #111	; 0x6f
 800633a:	d020      	beq.n	800637e <_printf_i+0xb2>
 800633c:	2970      	cmp	r1, #112	; 0x70
 800633e:	d1dd      	bne.n	80062fc <_printf_i+0x30>
 8006340:	6823      	ldr	r3, [r4, #0]
 8006342:	f043 0320 	orr.w	r3, r3, #32
 8006346:	6023      	str	r3, [r4, #0]
 8006348:	e003      	b.n	8006352 <_printf_i+0x86>
 800634a:	2975      	cmp	r1, #117	; 0x75
 800634c:	d017      	beq.n	800637e <_printf_i+0xb2>
 800634e:	2978      	cmp	r1, #120	; 0x78
 8006350:	d1d4      	bne.n	80062fc <_printf_i+0x30>
 8006352:	2378      	movs	r3, #120	; 0x78
 8006354:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006358:	4864      	ldr	r0, [pc, #400]	; (80064ec <_printf_i+0x220>)
 800635a:	e055      	b.n	8006408 <_printf_i+0x13c>
 800635c:	6813      	ldr	r3, [r2, #0]
 800635e:	1d19      	adds	r1, r3, #4
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	6011      	str	r1, [r2, #0]
 8006364:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006368:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800636c:	2301      	movs	r3, #1
 800636e:	e08c      	b.n	800648a <_printf_i+0x1be>
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	6011      	str	r1, [r2, #0]
 8006374:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006378:	bf18      	it	ne
 800637a:	b21b      	sxthne	r3, r3
 800637c:	e7cf      	b.n	800631e <_printf_i+0x52>
 800637e:	6813      	ldr	r3, [r2, #0]
 8006380:	6825      	ldr	r5, [r4, #0]
 8006382:	1d18      	adds	r0, r3, #4
 8006384:	6010      	str	r0, [r2, #0]
 8006386:	0628      	lsls	r0, r5, #24
 8006388:	d501      	bpl.n	800638e <_printf_i+0xc2>
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	e002      	b.n	8006394 <_printf_i+0xc8>
 800638e:	0668      	lsls	r0, r5, #25
 8006390:	d5fb      	bpl.n	800638a <_printf_i+0xbe>
 8006392:	881b      	ldrh	r3, [r3, #0]
 8006394:	4854      	ldr	r0, [pc, #336]	; (80064e8 <_printf_i+0x21c>)
 8006396:	296f      	cmp	r1, #111	; 0x6f
 8006398:	bf14      	ite	ne
 800639a:	220a      	movne	r2, #10
 800639c:	2208      	moveq	r2, #8
 800639e:	2100      	movs	r1, #0
 80063a0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80063a4:	6865      	ldr	r5, [r4, #4]
 80063a6:	60a5      	str	r5, [r4, #8]
 80063a8:	2d00      	cmp	r5, #0
 80063aa:	f2c0 8095 	blt.w	80064d8 <_printf_i+0x20c>
 80063ae:	6821      	ldr	r1, [r4, #0]
 80063b0:	f021 0104 	bic.w	r1, r1, #4
 80063b4:	6021      	str	r1, [r4, #0]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d13d      	bne.n	8006436 <_printf_i+0x16a>
 80063ba:	2d00      	cmp	r5, #0
 80063bc:	f040 808e 	bne.w	80064dc <_printf_i+0x210>
 80063c0:	4665      	mov	r5, ip
 80063c2:	2a08      	cmp	r2, #8
 80063c4:	d10b      	bne.n	80063de <_printf_i+0x112>
 80063c6:	6823      	ldr	r3, [r4, #0]
 80063c8:	07db      	lsls	r3, r3, #31
 80063ca:	d508      	bpl.n	80063de <_printf_i+0x112>
 80063cc:	6923      	ldr	r3, [r4, #16]
 80063ce:	6862      	ldr	r2, [r4, #4]
 80063d0:	429a      	cmp	r2, r3
 80063d2:	bfde      	ittt	le
 80063d4:	2330      	movle	r3, #48	; 0x30
 80063d6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80063da:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80063de:	ebac 0305 	sub.w	r3, ip, r5
 80063e2:	6123      	str	r3, [r4, #16]
 80063e4:	f8cd 8000 	str.w	r8, [sp]
 80063e8:	463b      	mov	r3, r7
 80063ea:	aa03      	add	r2, sp, #12
 80063ec:	4621      	mov	r1, r4
 80063ee:	4630      	mov	r0, r6
 80063f0:	f7ff fef6 	bl	80061e0 <_printf_common>
 80063f4:	3001      	adds	r0, #1
 80063f6:	d14d      	bne.n	8006494 <_printf_i+0x1c8>
 80063f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80063fc:	b005      	add	sp, #20
 80063fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006402:	4839      	ldr	r0, [pc, #228]	; (80064e8 <_printf_i+0x21c>)
 8006404:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006408:	6813      	ldr	r3, [r2, #0]
 800640a:	6821      	ldr	r1, [r4, #0]
 800640c:	1d1d      	adds	r5, r3, #4
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	6015      	str	r5, [r2, #0]
 8006412:	060a      	lsls	r2, r1, #24
 8006414:	d50b      	bpl.n	800642e <_printf_i+0x162>
 8006416:	07ca      	lsls	r2, r1, #31
 8006418:	bf44      	itt	mi
 800641a:	f041 0120 	orrmi.w	r1, r1, #32
 800641e:	6021      	strmi	r1, [r4, #0]
 8006420:	b91b      	cbnz	r3, 800642a <_printf_i+0x15e>
 8006422:	6822      	ldr	r2, [r4, #0]
 8006424:	f022 0220 	bic.w	r2, r2, #32
 8006428:	6022      	str	r2, [r4, #0]
 800642a:	2210      	movs	r2, #16
 800642c:	e7b7      	b.n	800639e <_printf_i+0xd2>
 800642e:	064d      	lsls	r5, r1, #25
 8006430:	bf48      	it	mi
 8006432:	b29b      	uxthmi	r3, r3
 8006434:	e7ef      	b.n	8006416 <_printf_i+0x14a>
 8006436:	4665      	mov	r5, ip
 8006438:	fbb3 f1f2 	udiv	r1, r3, r2
 800643c:	fb02 3311 	mls	r3, r2, r1, r3
 8006440:	5cc3      	ldrb	r3, [r0, r3]
 8006442:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006446:	460b      	mov	r3, r1
 8006448:	2900      	cmp	r1, #0
 800644a:	d1f5      	bne.n	8006438 <_printf_i+0x16c>
 800644c:	e7b9      	b.n	80063c2 <_printf_i+0xf6>
 800644e:	6813      	ldr	r3, [r2, #0]
 8006450:	6825      	ldr	r5, [r4, #0]
 8006452:	6961      	ldr	r1, [r4, #20]
 8006454:	1d18      	adds	r0, r3, #4
 8006456:	6010      	str	r0, [r2, #0]
 8006458:	0628      	lsls	r0, r5, #24
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	d501      	bpl.n	8006462 <_printf_i+0x196>
 800645e:	6019      	str	r1, [r3, #0]
 8006460:	e002      	b.n	8006468 <_printf_i+0x19c>
 8006462:	066a      	lsls	r2, r5, #25
 8006464:	d5fb      	bpl.n	800645e <_printf_i+0x192>
 8006466:	8019      	strh	r1, [r3, #0]
 8006468:	2300      	movs	r3, #0
 800646a:	6123      	str	r3, [r4, #16]
 800646c:	4665      	mov	r5, ip
 800646e:	e7b9      	b.n	80063e4 <_printf_i+0x118>
 8006470:	6813      	ldr	r3, [r2, #0]
 8006472:	1d19      	adds	r1, r3, #4
 8006474:	6011      	str	r1, [r2, #0]
 8006476:	681d      	ldr	r5, [r3, #0]
 8006478:	6862      	ldr	r2, [r4, #4]
 800647a:	2100      	movs	r1, #0
 800647c:	4628      	mov	r0, r5
 800647e:	f7f9 febf 	bl	8000200 <memchr>
 8006482:	b108      	cbz	r0, 8006488 <_printf_i+0x1bc>
 8006484:	1b40      	subs	r0, r0, r5
 8006486:	6060      	str	r0, [r4, #4]
 8006488:	6863      	ldr	r3, [r4, #4]
 800648a:	6123      	str	r3, [r4, #16]
 800648c:	2300      	movs	r3, #0
 800648e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006492:	e7a7      	b.n	80063e4 <_printf_i+0x118>
 8006494:	6923      	ldr	r3, [r4, #16]
 8006496:	462a      	mov	r2, r5
 8006498:	4639      	mov	r1, r7
 800649a:	4630      	mov	r0, r6
 800649c:	47c0      	blx	r8
 800649e:	3001      	adds	r0, #1
 80064a0:	d0aa      	beq.n	80063f8 <_printf_i+0x12c>
 80064a2:	6823      	ldr	r3, [r4, #0]
 80064a4:	079b      	lsls	r3, r3, #30
 80064a6:	d413      	bmi.n	80064d0 <_printf_i+0x204>
 80064a8:	68e0      	ldr	r0, [r4, #12]
 80064aa:	9b03      	ldr	r3, [sp, #12]
 80064ac:	4298      	cmp	r0, r3
 80064ae:	bfb8      	it	lt
 80064b0:	4618      	movlt	r0, r3
 80064b2:	e7a3      	b.n	80063fc <_printf_i+0x130>
 80064b4:	2301      	movs	r3, #1
 80064b6:	464a      	mov	r2, r9
 80064b8:	4639      	mov	r1, r7
 80064ba:	4630      	mov	r0, r6
 80064bc:	47c0      	blx	r8
 80064be:	3001      	adds	r0, #1
 80064c0:	d09a      	beq.n	80063f8 <_printf_i+0x12c>
 80064c2:	3501      	adds	r5, #1
 80064c4:	68e3      	ldr	r3, [r4, #12]
 80064c6:	9a03      	ldr	r2, [sp, #12]
 80064c8:	1a9b      	subs	r3, r3, r2
 80064ca:	42ab      	cmp	r3, r5
 80064cc:	dcf2      	bgt.n	80064b4 <_printf_i+0x1e8>
 80064ce:	e7eb      	b.n	80064a8 <_printf_i+0x1dc>
 80064d0:	2500      	movs	r5, #0
 80064d2:	f104 0919 	add.w	r9, r4, #25
 80064d6:	e7f5      	b.n	80064c4 <_printf_i+0x1f8>
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d1ac      	bne.n	8006436 <_printf_i+0x16a>
 80064dc:	7803      	ldrb	r3, [r0, #0]
 80064de:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80064e2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80064e6:	e76c      	b.n	80063c2 <_printf_i+0xf6>
 80064e8:	080074fd 	.word	0x080074fd
 80064ec:	0800750e 	.word	0x0800750e

080064f0 <_scanf_chars>:
 80064f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064f4:	4615      	mov	r5, r2
 80064f6:	688a      	ldr	r2, [r1, #8]
 80064f8:	4680      	mov	r8, r0
 80064fa:	460c      	mov	r4, r1
 80064fc:	b932      	cbnz	r2, 800650c <_scanf_chars+0x1c>
 80064fe:	698a      	ldr	r2, [r1, #24]
 8006500:	2a00      	cmp	r2, #0
 8006502:	bf14      	ite	ne
 8006504:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 8006508:	2201      	moveq	r2, #1
 800650a:	608a      	str	r2, [r1, #8]
 800650c:	6822      	ldr	r2, [r4, #0]
 800650e:	06d1      	lsls	r1, r2, #27
 8006510:	bf5f      	itttt	pl
 8006512:	681a      	ldrpl	r2, [r3, #0]
 8006514:	1d11      	addpl	r1, r2, #4
 8006516:	6019      	strpl	r1, [r3, #0]
 8006518:	6817      	ldrpl	r7, [r2, #0]
 800651a:	2600      	movs	r6, #0
 800651c:	69a3      	ldr	r3, [r4, #24]
 800651e:	b1db      	cbz	r3, 8006558 <_scanf_chars+0x68>
 8006520:	2b01      	cmp	r3, #1
 8006522:	d107      	bne.n	8006534 <_scanf_chars+0x44>
 8006524:	682b      	ldr	r3, [r5, #0]
 8006526:	6962      	ldr	r2, [r4, #20]
 8006528:	781b      	ldrb	r3, [r3, #0]
 800652a:	5cd3      	ldrb	r3, [r2, r3]
 800652c:	b9a3      	cbnz	r3, 8006558 <_scanf_chars+0x68>
 800652e:	2e00      	cmp	r6, #0
 8006530:	d132      	bne.n	8006598 <_scanf_chars+0xa8>
 8006532:	e006      	b.n	8006542 <_scanf_chars+0x52>
 8006534:	2b02      	cmp	r3, #2
 8006536:	d007      	beq.n	8006548 <_scanf_chars+0x58>
 8006538:	2e00      	cmp	r6, #0
 800653a:	d12d      	bne.n	8006598 <_scanf_chars+0xa8>
 800653c:	69a3      	ldr	r3, [r4, #24]
 800653e:	2b01      	cmp	r3, #1
 8006540:	d12a      	bne.n	8006598 <_scanf_chars+0xa8>
 8006542:	2001      	movs	r0, #1
 8006544:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006548:	f000 fab4 	bl	8006ab4 <__locale_ctype_ptr>
 800654c:	682b      	ldr	r3, [r5, #0]
 800654e:	781b      	ldrb	r3, [r3, #0]
 8006550:	4418      	add	r0, r3
 8006552:	7843      	ldrb	r3, [r0, #1]
 8006554:	071b      	lsls	r3, r3, #28
 8006556:	d4ef      	bmi.n	8006538 <_scanf_chars+0x48>
 8006558:	6823      	ldr	r3, [r4, #0]
 800655a:	06da      	lsls	r2, r3, #27
 800655c:	bf5e      	ittt	pl
 800655e:	682b      	ldrpl	r3, [r5, #0]
 8006560:	781b      	ldrbpl	r3, [r3, #0]
 8006562:	703b      	strbpl	r3, [r7, #0]
 8006564:	682a      	ldr	r2, [r5, #0]
 8006566:	686b      	ldr	r3, [r5, #4]
 8006568:	f102 0201 	add.w	r2, r2, #1
 800656c:	602a      	str	r2, [r5, #0]
 800656e:	68a2      	ldr	r2, [r4, #8]
 8006570:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8006574:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8006578:	606b      	str	r3, [r5, #4]
 800657a:	f106 0601 	add.w	r6, r6, #1
 800657e:	bf58      	it	pl
 8006580:	3701      	addpl	r7, #1
 8006582:	60a2      	str	r2, [r4, #8]
 8006584:	b142      	cbz	r2, 8006598 <_scanf_chars+0xa8>
 8006586:	2b00      	cmp	r3, #0
 8006588:	dcc8      	bgt.n	800651c <_scanf_chars+0x2c>
 800658a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800658e:	4629      	mov	r1, r5
 8006590:	4640      	mov	r0, r8
 8006592:	4798      	blx	r3
 8006594:	2800      	cmp	r0, #0
 8006596:	d0c1      	beq.n	800651c <_scanf_chars+0x2c>
 8006598:	6823      	ldr	r3, [r4, #0]
 800659a:	f013 0310 	ands.w	r3, r3, #16
 800659e:	d105      	bne.n	80065ac <_scanf_chars+0xbc>
 80065a0:	68e2      	ldr	r2, [r4, #12]
 80065a2:	3201      	adds	r2, #1
 80065a4:	60e2      	str	r2, [r4, #12]
 80065a6:	69a2      	ldr	r2, [r4, #24]
 80065a8:	b102      	cbz	r2, 80065ac <_scanf_chars+0xbc>
 80065aa:	703b      	strb	r3, [r7, #0]
 80065ac:	6923      	ldr	r3, [r4, #16]
 80065ae:	441e      	add	r6, r3
 80065b0:	6126      	str	r6, [r4, #16]
 80065b2:	2000      	movs	r0, #0
 80065b4:	e7c6      	b.n	8006544 <_scanf_chars+0x54>
	...

080065b8 <_scanf_i>:
 80065b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065bc:	469a      	mov	sl, r3
 80065be:	4b74      	ldr	r3, [pc, #464]	; (8006790 <_scanf_i+0x1d8>)
 80065c0:	460c      	mov	r4, r1
 80065c2:	4683      	mov	fp, r0
 80065c4:	4616      	mov	r6, r2
 80065c6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80065ca:	b087      	sub	sp, #28
 80065cc:	ab03      	add	r3, sp, #12
 80065ce:	68a7      	ldr	r7, [r4, #8]
 80065d0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80065d4:	4b6f      	ldr	r3, [pc, #444]	; (8006794 <_scanf_i+0x1dc>)
 80065d6:	69a1      	ldr	r1, [r4, #24]
 80065d8:	4a6f      	ldr	r2, [pc, #444]	; (8006798 <_scanf_i+0x1e0>)
 80065da:	2903      	cmp	r1, #3
 80065dc:	bf08      	it	eq
 80065de:	461a      	moveq	r2, r3
 80065e0:	1e7b      	subs	r3, r7, #1
 80065e2:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 80065e6:	bf84      	itt	hi
 80065e8:	f240 135d 	movwhi	r3, #349	; 0x15d
 80065ec:	60a3      	strhi	r3, [r4, #8]
 80065ee:	6823      	ldr	r3, [r4, #0]
 80065f0:	9200      	str	r2, [sp, #0]
 80065f2:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80065f6:	bf88      	it	hi
 80065f8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80065fc:	f104 091c 	add.w	r9, r4, #28
 8006600:	6023      	str	r3, [r4, #0]
 8006602:	bf8c      	ite	hi
 8006604:	197f      	addhi	r7, r7, r5
 8006606:	2700      	movls	r7, #0
 8006608:	464b      	mov	r3, r9
 800660a:	f04f 0800 	mov.w	r8, #0
 800660e:	9301      	str	r3, [sp, #4]
 8006610:	6831      	ldr	r1, [r6, #0]
 8006612:	ab03      	add	r3, sp, #12
 8006614:	2202      	movs	r2, #2
 8006616:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800661a:	7809      	ldrb	r1, [r1, #0]
 800661c:	f7f9 fdf0 	bl	8000200 <memchr>
 8006620:	9b01      	ldr	r3, [sp, #4]
 8006622:	b330      	cbz	r0, 8006672 <_scanf_i+0xba>
 8006624:	f1b8 0f01 	cmp.w	r8, #1
 8006628:	d15a      	bne.n	80066e0 <_scanf_i+0x128>
 800662a:	6862      	ldr	r2, [r4, #4]
 800662c:	b92a      	cbnz	r2, 800663a <_scanf_i+0x82>
 800662e:	6822      	ldr	r2, [r4, #0]
 8006630:	2108      	movs	r1, #8
 8006632:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006636:	6061      	str	r1, [r4, #4]
 8006638:	6022      	str	r2, [r4, #0]
 800663a:	6822      	ldr	r2, [r4, #0]
 800663c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8006640:	6022      	str	r2, [r4, #0]
 8006642:	68a2      	ldr	r2, [r4, #8]
 8006644:	1e51      	subs	r1, r2, #1
 8006646:	60a1      	str	r1, [r4, #8]
 8006648:	b19a      	cbz	r2, 8006672 <_scanf_i+0xba>
 800664a:	6832      	ldr	r2, [r6, #0]
 800664c:	1c51      	adds	r1, r2, #1
 800664e:	6031      	str	r1, [r6, #0]
 8006650:	7812      	ldrb	r2, [r2, #0]
 8006652:	701a      	strb	r2, [r3, #0]
 8006654:	1c5d      	adds	r5, r3, #1
 8006656:	6873      	ldr	r3, [r6, #4]
 8006658:	3b01      	subs	r3, #1
 800665a:	2b00      	cmp	r3, #0
 800665c:	6073      	str	r3, [r6, #4]
 800665e:	dc07      	bgt.n	8006670 <_scanf_i+0xb8>
 8006660:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006664:	4631      	mov	r1, r6
 8006666:	4658      	mov	r0, fp
 8006668:	4798      	blx	r3
 800666a:	2800      	cmp	r0, #0
 800666c:	f040 8086 	bne.w	800677c <_scanf_i+0x1c4>
 8006670:	462b      	mov	r3, r5
 8006672:	f108 0801 	add.w	r8, r8, #1
 8006676:	f1b8 0f03 	cmp.w	r8, #3
 800667a:	d1c8      	bne.n	800660e <_scanf_i+0x56>
 800667c:	6862      	ldr	r2, [r4, #4]
 800667e:	b90a      	cbnz	r2, 8006684 <_scanf_i+0xcc>
 8006680:	220a      	movs	r2, #10
 8006682:	6062      	str	r2, [r4, #4]
 8006684:	6862      	ldr	r2, [r4, #4]
 8006686:	4945      	ldr	r1, [pc, #276]	; (800679c <_scanf_i+0x1e4>)
 8006688:	6960      	ldr	r0, [r4, #20]
 800668a:	9301      	str	r3, [sp, #4]
 800668c:	1a89      	subs	r1, r1, r2
 800668e:	f000 f887 	bl	80067a0 <__sccl>
 8006692:	9b01      	ldr	r3, [sp, #4]
 8006694:	f04f 0800 	mov.w	r8, #0
 8006698:	461d      	mov	r5, r3
 800669a:	68a3      	ldr	r3, [r4, #8]
 800669c:	6822      	ldr	r2, [r4, #0]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d03a      	beq.n	8006718 <_scanf_i+0x160>
 80066a2:	6831      	ldr	r1, [r6, #0]
 80066a4:	6960      	ldr	r0, [r4, #20]
 80066a6:	f891 c000 	ldrb.w	ip, [r1]
 80066aa:	f810 000c 	ldrb.w	r0, [r0, ip]
 80066ae:	2800      	cmp	r0, #0
 80066b0:	d032      	beq.n	8006718 <_scanf_i+0x160>
 80066b2:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80066b6:	d121      	bne.n	80066fc <_scanf_i+0x144>
 80066b8:	0510      	lsls	r0, r2, #20
 80066ba:	d51f      	bpl.n	80066fc <_scanf_i+0x144>
 80066bc:	f108 0801 	add.w	r8, r8, #1
 80066c0:	b117      	cbz	r7, 80066c8 <_scanf_i+0x110>
 80066c2:	3301      	adds	r3, #1
 80066c4:	3f01      	subs	r7, #1
 80066c6:	60a3      	str	r3, [r4, #8]
 80066c8:	6873      	ldr	r3, [r6, #4]
 80066ca:	3b01      	subs	r3, #1
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	6073      	str	r3, [r6, #4]
 80066d0:	dd1b      	ble.n	800670a <_scanf_i+0x152>
 80066d2:	6833      	ldr	r3, [r6, #0]
 80066d4:	3301      	adds	r3, #1
 80066d6:	6033      	str	r3, [r6, #0]
 80066d8:	68a3      	ldr	r3, [r4, #8]
 80066da:	3b01      	subs	r3, #1
 80066dc:	60a3      	str	r3, [r4, #8]
 80066de:	e7dc      	b.n	800669a <_scanf_i+0xe2>
 80066e0:	f1b8 0f02 	cmp.w	r8, #2
 80066e4:	d1ad      	bne.n	8006642 <_scanf_i+0x8a>
 80066e6:	6822      	ldr	r2, [r4, #0]
 80066e8:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80066ec:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80066f0:	d1bf      	bne.n	8006672 <_scanf_i+0xba>
 80066f2:	2110      	movs	r1, #16
 80066f4:	6061      	str	r1, [r4, #4]
 80066f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80066fa:	e7a1      	b.n	8006640 <_scanf_i+0x88>
 80066fc:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8006700:	6022      	str	r2, [r4, #0]
 8006702:	780b      	ldrb	r3, [r1, #0]
 8006704:	702b      	strb	r3, [r5, #0]
 8006706:	3501      	adds	r5, #1
 8006708:	e7de      	b.n	80066c8 <_scanf_i+0x110>
 800670a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800670e:	4631      	mov	r1, r6
 8006710:	4658      	mov	r0, fp
 8006712:	4798      	blx	r3
 8006714:	2800      	cmp	r0, #0
 8006716:	d0df      	beq.n	80066d8 <_scanf_i+0x120>
 8006718:	6823      	ldr	r3, [r4, #0]
 800671a:	05d9      	lsls	r1, r3, #23
 800671c:	d50c      	bpl.n	8006738 <_scanf_i+0x180>
 800671e:	454d      	cmp	r5, r9
 8006720:	d908      	bls.n	8006734 <_scanf_i+0x17c>
 8006722:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8006726:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800672a:	4632      	mov	r2, r6
 800672c:	4658      	mov	r0, fp
 800672e:	4798      	blx	r3
 8006730:	1e6f      	subs	r7, r5, #1
 8006732:	463d      	mov	r5, r7
 8006734:	454d      	cmp	r5, r9
 8006736:	d029      	beq.n	800678c <_scanf_i+0x1d4>
 8006738:	6822      	ldr	r2, [r4, #0]
 800673a:	f012 0210 	ands.w	r2, r2, #16
 800673e:	d113      	bne.n	8006768 <_scanf_i+0x1b0>
 8006740:	702a      	strb	r2, [r5, #0]
 8006742:	6863      	ldr	r3, [r4, #4]
 8006744:	9e00      	ldr	r6, [sp, #0]
 8006746:	4649      	mov	r1, r9
 8006748:	4658      	mov	r0, fp
 800674a:	47b0      	blx	r6
 800674c:	f8da 3000 	ldr.w	r3, [sl]
 8006750:	6821      	ldr	r1, [r4, #0]
 8006752:	1d1a      	adds	r2, r3, #4
 8006754:	f8ca 2000 	str.w	r2, [sl]
 8006758:	f011 0f20 	tst.w	r1, #32
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	d010      	beq.n	8006782 <_scanf_i+0x1ca>
 8006760:	6018      	str	r0, [r3, #0]
 8006762:	68e3      	ldr	r3, [r4, #12]
 8006764:	3301      	adds	r3, #1
 8006766:	60e3      	str	r3, [r4, #12]
 8006768:	eba5 0509 	sub.w	r5, r5, r9
 800676c:	44a8      	add	r8, r5
 800676e:	6925      	ldr	r5, [r4, #16]
 8006770:	4445      	add	r5, r8
 8006772:	6125      	str	r5, [r4, #16]
 8006774:	2000      	movs	r0, #0
 8006776:	b007      	add	sp, #28
 8006778:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800677c:	f04f 0800 	mov.w	r8, #0
 8006780:	e7ca      	b.n	8006718 <_scanf_i+0x160>
 8006782:	07ca      	lsls	r2, r1, #31
 8006784:	bf4c      	ite	mi
 8006786:	8018      	strhmi	r0, [r3, #0]
 8006788:	6018      	strpl	r0, [r3, #0]
 800678a:	e7ea      	b.n	8006762 <_scanf_i+0x1aa>
 800678c:	2001      	movs	r0, #1
 800678e:	e7f2      	b.n	8006776 <_scanf_i+0x1be>
 8006790:	080072b8 	.word	0x080072b8
 8006794:	080068fd 	.word	0x080068fd
 8006798:	08006a15 	.word	0x08006a15
 800679c:	0800752f 	.word	0x0800752f

080067a0 <__sccl>:
 80067a0:	b570      	push	{r4, r5, r6, lr}
 80067a2:	780b      	ldrb	r3, [r1, #0]
 80067a4:	2b5e      	cmp	r3, #94	; 0x5e
 80067a6:	bf13      	iteet	ne
 80067a8:	1c4a      	addne	r2, r1, #1
 80067aa:	1c8a      	addeq	r2, r1, #2
 80067ac:	784b      	ldrbeq	r3, [r1, #1]
 80067ae:	2100      	movne	r1, #0
 80067b0:	bf08      	it	eq
 80067b2:	2101      	moveq	r1, #1
 80067b4:	1e44      	subs	r4, r0, #1
 80067b6:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 80067ba:	f804 1f01 	strb.w	r1, [r4, #1]!
 80067be:	42ac      	cmp	r4, r5
 80067c0:	d1fb      	bne.n	80067ba <__sccl+0x1a>
 80067c2:	b913      	cbnz	r3, 80067ca <__sccl+0x2a>
 80067c4:	3a01      	subs	r2, #1
 80067c6:	4610      	mov	r0, r2
 80067c8:	bd70      	pop	{r4, r5, r6, pc}
 80067ca:	f081 0401 	eor.w	r4, r1, #1
 80067ce:	54c4      	strb	r4, [r0, r3]
 80067d0:	1c51      	adds	r1, r2, #1
 80067d2:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 80067d6:	2d2d      	cmp	r5, #45	; 0x2d
 80067d8:	f101 36ff 	add.w	r6, r1, #4294967295	; 0xffffffff
 80067dc:	460a      	mov	r2, r1
 80067de:	d006      	beq.n	80067ee <__sccl+0x4e>
 80067e0:	2d5d      	cmp	r5, #93	; 0x5d
 80067e2:	d0f0      	beq.n	80067c6 <__sccl+0x26>
 80067e4:	b90d      	cbnz	r5, 80067ea <__sccl+0x4a>
 80067e6:	4632      	mov	r2, r6
 80067e8:	e7ed      	b.n	80067c6 <__sccl+0x26>
 80067ea:	462b      	mov	r3, r5
 80067ec:	e7ef      	b.n	80067ce <__sccl+0x2e>
 80067ee:	780e      	ldrb	r6, [r1, #0]
 80067f0:	2e5d      	cmp	r6, #93	; 0x5d
 80067f2:	d0fa      	beq.n	80067ea <__sccl+0x4a>
 80067f4:	42b3      	cmp	r3, r6
 80067f6:	dcf8      	bgt.n	80067ea <__sccl+0x4a>
 80067f8:	3301      	adds	r3, #1
 80067fa:	429e      	cmp	r6, r3
 80067fc:	54c4      	strb	r4, [r0, r3]
 80067fe:	dcfb      	bgt.n	80067f8 <__sccl+0x58>
 8006800:	3102      	adds	r1, #2
 8006802:	e7e6      	b.n	80067d2 <__sccl+0x32>

08006804 <_strtol_l.isra.0>:
 8006804:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006808:	4680      	mov	r8, r0
 800680a:	4689      	mov	r9, r1
 800680c:	4692      	mov	sl, r2
 800680e:	461e      	mov	r6, r3
 8006810:	460f      	mov	r7, r1
 8006812:	463d      	mov	r5, r7
 8006814:	9808      	ldr	r0, [sp, #32]
 8006816:	f815 4b01 	ldrb.w	r4, [r5], #1
 800681a:	f000 f947 	bl	8006aac <__locale_ctype_ptr_l>
 800681e:	4420      	add	r0, r4
 8006820:	7843      	ldrb	r3, [r0, #1]
 8006822:	f013 0308 	ands.w	r3, r3, #8
 8006826:	d132      	bne.n	800688e <_strtol_l.isra.0+0x8a>
 8006828:	2c2d      	cmp	r4, #45	; 0x2d
 800682a:	d132      	bne.n	8006892 <_strtol_l.isra.0+0x8e>
 800682c:	787c      	ldrb	r4, [r7, #1]
 800682e:	1cbd      	adds	r5, r7, #2
 8006830:	2201      	movs	r2, #1
 8006832:	2e00      	cmp	r6, #0
 8006834:	d05d      	beq.n	80068f2 <_strtol_l.isra.0+0xee>
 8006836:	2e10      	cmp	r6, #16
 8006838:	d109      	bne.n	800684e <_strtol_l.isra.0+0x4a>
 800683a:	2c30      	cmp	r4, #48	; 0x30
 800683c:	d107      	bne.n	800684e <_strtol_l.isra.0+0x4a>
 800683e:	782b      	ldrb	r3, [r5, #0]
 8006840:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006844:	2b58      	cmp	r3, #88	; 0x58
 8006846:	d14f      	bne.n	80068e8 <_strtol_l.isra.0+0xe4>
 8006848:	786c      	ldrb	r4, [r5, #1]
 800684a:	2610      	movs	r6, #16
 800684c:	3502      	adds	r5, #2
 800684e:	2a00      	cmp	r2, #0
 8006850:	bf14      	ite	ne
 8006852:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8006856:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800685a:	2700      	movs	r7, #0
 800685c:	fbb1 fcf6 	udiv	ip, r1, r6
 8006860:	4638      	mov	r0, r7
 8006862:	fb06 1e1c 	mls	lr, r6, ip, r1
 8006866:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800686a:	2b09      	cmp	r3, #9
 800686c:	d817      	bhi.n	800689e <_strtol_l.isra.0+0x9a>
 800686e:	461c      	mov	r4, r3
 8006870:	42a6      	cmp	r6, r4
 8006872:	dd23      	ble.n	80068bc <_strtol_l.isra.0+0xb8>
 8006874:	1c7b      	adds	r3, r7, #1
 8006876:	d007      	beq.n	8006888 <_strtol_l.isra.0+0x84>
 8006878:	4584      	cmp	ip, r0
 800687a:	d31c      	bcc.n	80068b6 <_strtol_l.isra.0+0xb2>
 800687c:	d101      	bne.n	8006882 <_strtol_l.isra.0+0x7e>
 800687e:	45a6      	cmp	lr, r4
 8006880:	db19      	blt.n	80068b6 <_strtol_l.isra.0+0xb2>
 8006882:	fb00 4006 	mla	r0, r0, r6, r4
 8006886:	2701      	movs	r7, #1
 8006888:	f815 4b01 	ldrb.w	r4, [r5], #1
 800688c:	e7eb      	b.n	8006866 <_strtol_l.isra.0+0x62>
 800688e:	462f      	mov	r7, r5
 8006890:	e7bf      	b.n	8006812 <_strtol_l.isra.0+0xe>
 8006892:	2c2b      	cmp	r4, #43	; 0x2b
 8006894:	bf04      	itt	eq
 8006896:	1cbd      	addeq	r5, r7, #2
 8006898:	787c      	ldrbeq	r4, [r7, #1]
 800689a:	461a      	mov	r2, r3
 800689c:	e7c9      	b.n	8006832 <_strtol_l.isra.0+0x2e>
 800689e:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80068a2:	2b19      	cmp	r3, #25
 80068a4:	d801      	bhi.n	80068aa <_strtol_l.isra.0+0xa6>
 80068a6:	3c37      	subs	r4, #55	; 0x37
 80068a8:	e7e2      	b.n	8006870 <_strtol_l.isra.0+0x6c>
 80068aa:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80068ae:	2b19      	cmp	r3, #25
 80068b0:	d804      	bhi.n	80068bc <_strtol_l.isra.0+0xb8>
 80068b2:	3c57      	subs	r4, #87	; 0x57
 80068b4:	e7dc      	b.n	8006870 <_strtol_l.isra.0+0x6c>
 80068b6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80068ba:	e7e5      	b.n	8006888 <_strtol_l.isra.0+0x84>
 80068bc:	1c7b      	adds	r3, r7, #1
 80068be:	d108      	bne.n	80068d2 <_strtol_l.isra.0+0xce>
 80068c0:	2322      	movs	r3, #34	; 0x22
 80068c2:	f8c8 3000 	str.w	r3, [r8]
 80068c6:	4608      	mov	r0, r1
 80068c8:	f1ba 0f00 	cmp.w	sl, #0
 80068cc:	d107      	bne.n	80068de <_strtol_l.isra.0+0xda>
 80068ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068d2:	b102      	cbz	r2, 80068d6 <_strtol_l.isra.0+0xd2>
 80068d4:	4240      	negs	r0, r0
 80068d6:	f1ba 0f00 	cmp.w	sl, #0
 80068da:	d0f8      	beq.n	80068ce <_strtol_l.isra.0+0xca>
 80068dc:	b10f      	cbz	r7, 80068e2 <_strtol_l.isra.0+0xde>
 80068de:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 80068e2:	f8ca 9000 	str.w	r9, [sl]
 80068e6:	e7f2      	b.n	80068ce <_strtol_l.isra.0+0xca>
 80068e8:	2430      	movs	r4, #48	; 0x30
 80068ea:	2e00      	cmp	r6, #0
 80068ec:	d1af      	bne.n	800684e <_strtol_l.isra.0+0x4a>
 80068ee:	2608      	movs	r6, #8
 80068f0:	e7ad      	b.n	800684e <_strtol_l.isra.0+0x4a>
 80068f2:	2c30      	cmp	r4, #48	; 0x30
 80068f4:	d0a3      	beq.n	800683e <_strtol_l.isra.0+0x3a>
 80068f6:	260a      	movs	r6, #10
 80068f8:	e7a9      	b.n	800684e <_strtol_l.isra.0+0x4a>
	...

080068fc <_strtol_r>:
 80068fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80068fe:	4c06      	ldr	r4, [pc, #24]	; (8006918 <_strtol_r+0x1c>)
 8006900:	4d06      	ldr	r5, [pc, #24]	; (800691c <_strtol_r+0x20>)
 8006902:	6824      	ldr	r4, [r4, #0]
 8006904:	6a24      	ldr	r4, [r4, #32]
 8006906:	2c00      	cmp	r4, #0
 8006908:	bf08      	it	eq
 800690a:	462c      	moveq	r4, r5
 800690c:	9400      	str	r4, [sp, #0]
 800690e:	f7ff ff79 	bl	8006804 <_strtol_l.isra.0>
 8006912:	b003      	add	sp, #12
 8006914:	bd30      	pop	{r4, r5, pc}
 8006916:	bf00      	nop
 8006918:	200000ec 	.word	0x200000ec
 800691c:	20000150 	.word	0x20000150

08006920 <_strtoul_l.isra.0>:
 8006920:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006924:	4680      	mov	r8, r0
 8006926:	4689      	mov	r9, r1
 8006928:	4692      	mov	sl, r2
 800692a:	461e      	mov	r6, r3
 800692c:	460f      	mov	r7, r1
 800692e:	463d      	mov	r5, r7
 8006930:	9808      	ldr	r0, [sp, #32]
 8006932:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006936:	f000 f8b9 	bl	8006aac <__locale_ctype_ptr_l>
 800693a:	4420      	add	r0, r4
 800693c:	7843      	ldrb	r3, [r0, #1]
 800693e:	f013 0308 	ands.w	r3, r3, #8
 8006942:	d130      	bne.n	80069a6 <_strtoul_l.isra.0+0x86>
 8006944:	2c2d      	cmp	r4, #45	; 0x2d
 8006946:	d130      	bne.n	80069aa <_strtoul_l.isra.0+0x8a>
 8006948:	787c      	ldrb	r4, [r7, #1]
 800694a:	1cbd      	adds	r5, r7, #2
 800694c:	2101      	movs	r1, #1
 800694e:	2e00      	cmp	r6, #0
 8006950:	d05c      	beq.n	8006a0c <_strtoul_l.isra.0+0xec>
 8006952:	2e10      	cmp	r6, #16
 8006954:	d109      	bne.n	800696a <_strtoul_l.isra.0+0x4a>
 8006956:	2c30      	cmp	r4, #48	; 0x30
 8006958:	d107      	bne.n	800696a <_strtoul_l.isra.0+0x4a>
 800695a:	782b      	ldrb	r3, [r5, #0]
 800695c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006960:	2b58      	cmp	r3, #88	; 0x58
 8006962:	d14e      	bne.n	8006a02 <_strtoul_l.isra.0+0xe2>
 8006964:	786c      	ldrb	r4, [r5, #1]
 8006966:	2610      	movs	r6, #16
 8006968:	3502      	adds	r5, #2
 800696a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800696e:	2300      	movs	r3, #0
 8006970:	fbb2 f2f6 	udiv	r2, r2, r6
 8006974:	fb06 fc02 	mul.w	ip, r6, r2
 8006978:	ea6f 0c0c 	mvn.w	ip, ip
 800697c:	4618      	mov	r0, r3
 800697e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8006982:	2f09      	cmp	r7, #9
 8006984:	d817      	bhi.n	80069b6 <_strtoul_l.isra.0+0x96>
 8006986:	463c      	mov	r4, r7
 8006988:	42a6      	cmp	r6, r4
 800698a:	dd23      	ble.n	80069d4 <_strtoul_l.isra.0+0xb4>
 800698c:	2b00      	cmp	r3, #0
 800698e:	db1e      	blt.n	80069ce <_strtoul_l.isra.0+0xae>
 8006990:	4282      	cmp	r2, r0
 8006992:	d31c      	bcc.n	80069ce <_strtoul_l.isra.0+0xae>
 8006994:	d101      	bne.n	800699a <_strtoul_l.isra.0+0x7a>
 8006996:	45a4      	cmp	ip, r4
 8006998:	db19      	blt.n	80069ce <_strtoul_l.isra.0+0xae>
 800699a:	fb00 4006 	mla	r0, r0, r6, r4
 800699e:	2301      	movs	r3, #1
 80069a0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80069a4:	e7eb      	b.n	800697e <_strtoul_l.isra.0+0x5e>
 80069a6:	462f      	mov	r7, r5
 80069a8:	e7c1      	b.n	800692e <_strtoul_l.isra.0+0xe>
 80069aa:	2c2b      	cmp	r4, #43	; 0x2b
 80069ac:	bf04      	itt	eq
 80069ae:	1cbd      	addeq	r5, r7, #2
 80069b0:	787c      	ldrbeq	r4, [r7, #1]
 80069b2:	4619      	mov	r1, r3
 80069b4:	e7cb      	b.n	800694e <_strtoul_l.isra.0+0x2e>
 80069b6:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80069ba:	2f19      	cmp	r7, #25
 80069bc:	d801      	bhi.n	80069c2 <_strtoul_l.isra.0+0xa2>
 80069be:	3c37      	subs	r4, #55	; 0x37
 80069c0:	e7e2      	b.n	8006988 <_strtoul_l.isra.0+0x68>
 80069c2:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80069c6:	2f19      	cmp	r7, #25
 80069c8:	d804      	bhi.n	80069d4 <_strtoul_l.isra.0+0xb4>
 80069ca:	3c57      	subs	r4, #87	; 0x57
 80069cc:	e7dc      	b.n	8006988 <_strtoul_l.isra.0+0x68>
 80069ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80069d2:	e7e5      	b.n	80069a0 <_strtoul_l.isra.0+0x80>
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	da09      	bge.n	80069ec <_strtoul_l.isra.0+0xcc>
 80069d8:	2322      	movs	r3, #34	; 0x22
 80069da:	f8c8 3000 	str.w	r3, [r8]
 80069de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80069e2:	f1ba 0f00 	cmp.w	sl, #0
 80069e6:	d107      	bne.n	80069f8 <_strtoul_l.isra.0+0xd8>
 80069e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069ec:	b101      	cbz	r1, 80069f0 <_strtoul_l.isra.0+0xd0>
 80069ee:	4240      	negs	r0, r0
 80069f0:	f1ba 0f00 	cmp.w	sl, #0
 80069f4:	d0f8      	beq.n	80069e8 <_strtoul_l.isra.0+0xc8>
 80069f6:	b10b      	cbz	r3, 80069fc <_strtoul_l.isra.0+0xdc>
 80069f8:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 80069fc:	f8ca 9000 	str.w	r9, [sl]
 8006a00:	e7f2      	b.n	80069e8 <_strtoul_l.isra.0+0xc8>
 8006a02:	2430      	movs	r4, #48	; 0x30
 8006a04:	2e00      	cmp	r6, #0
 8006a06:	d1b0      	bne.n	800696a <_strtoul_l.isra.0+0x4a>
 8006a08:	2608      	movs	r6, #8
 8006a0a:	e7ae      	b.n	800696a <_strtoul_l.isra.0+0x4a>
 8006a0c:	2c30      	cmp	r4, #48	; 0x30
 8006a0e:	d0a4      	beq.n	800695a <_strtoul_l.isra.0+0x3a>
 8006a10:	260a      	movs	r6, #10
 8006a12:	e7aa      	b.n	800696a <_strtoul_l.isra.0+0x4a>

08006a14 <_strtoul_r>:
 8006a14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006a16:	4c06      	ldr	r4, [pc, #24]	; (8006a30 <_strtoul_r+0x1c>)
 8006a18:	4d06      	ldr	r5, [pc, #24]	; (8006a34 <_strtoul_r+0x20>)
 8006a1a:	6824      	ldr	r4, [r4, #0]
 8006a1c:	6a24      	ldr	r4, [r4, #32]
 8006a1e:	2c00      	cmp	r4, #0
 8006a20:	bf08      	it	eq
 8006a22:	462c      	moveq	r4, r5
 8006a24:	9400      	str	r4, [sp, #0]
 8006a26:	f7ff ff7b 	bl	8006920 <_strtoul_l.isra.0>
 8006a2a:	b003      	add	sp, #12
 8006a2c:	bd30      	pop	{r4, r5, pc}
 8006a2e:	bf00      	nop
 8006a30:	200000ec 	.word	0x200000ec
 8006a34:	20000150 	.word	0x20000150

08006a38 <__submore>:
 8006a38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a3c:	460c      	mov	r4, r1
 8006a3e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8006a40:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006a44:	4299      	cmp	r1, r3
 8006a46:	d11d      	bne.n	8006a84 <__submore+0x4c>
 8006a48:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006a4c:	f000 f8c4 	bl	8006bd8 <_malloc_r>
 8006a50:	b918      	cbnz	r0, 8006a5a <__submore+0x22>
 8006a52:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006a56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006a5e:	63a3      	str	r3, [r4, #56]	; 0x38
 8006a60:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8006a64:	6360      	str	r0, [r4, #52]	; 0x34
 8006a66:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8006a6a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8006a6e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8006a72:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8006a76:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8006a7a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8006a7e:	6020      	str	r0, [r4, #0]
 8006a80:	2000      	movs	r0, #0
 8006a82:	e7e8      	b.n	8006a56 <__submore+0x1e>
 8006a84:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8006a86:	0077      	lsls	r7, r6, #1
 8006a88:	463a      	mov	r2, r7
 8006a8a:	f000 f8ff 	bl	8006c8c <_realloc_r>
 8006a8e:	4605      	mov	r5, r0
 8006a90:	2800      	cmp	r0, #0
 8006a92:	d0de      	beq.n	8006a52 <__submore+0x1a>
 8006a94:	eb00 0806 	add.w	r8, r0, r6
 8006a98:	4601      	mov	r1, r0
 8006a9a:	4632      	mov	r2, r6
 8006a9c:	4640      	mov	r0, r8
 8006a9e:	f000 f829 	bl	8006af4 <memcpy>
 8006aa2:	f8c4 8000 	str.w	r8, [r4]
 8006aa6:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8006aaa:	e7e9      	b.n	8006a80 <__submore+0x48>

08006aac <__locale_ctype_ptr_l>:
 8006aac:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8006ab0:	4770      	bx	lr
	...

08006ab4 <__locale_ctype_ptr>:
 8006ab4:	4b04      	ldr	r3, [pc, #16]	; (8006ac8 <__locale_ctype_ptr+0x14>)
 8006ab6:	4a05      	ldr	r2, [pc, #20]	; (8006acc <__locale_ctype_ptr+0x18>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	6a1b      	ldr	r3, [r3, #32]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	bf08      	it	eq
 8006ac0:	4613      	moveq	r3, r2
 8006ac2:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8006ac6:	4770      	bx	lr
 8006ac8:	200000ec 	.word	0x200000ec
 8006acc:	20000150 	.word	0x20000150

08006ad0 <__ascii_mbtowc>:
 8006ad0:	b082      	sub	sp, #8
 8006ad2:	b901      	cbnz	r1, 8006ad6 <__ascii_mbtowc+0x6>
 8006ad4:	a901      	add	r1, sp, #4
 8006ad6:	b142      	cbz	r2, 8006aea <__ascii_mbtowc+0x1a>
 8006ad8:	b14b      	cbz	r3, 8006aee <__ascii_mbtowc+0x1e>
 8006ada:	7813      	ldrb	r3, [r2, #0]
 8006adc:	600b      	str	r3, [r1, #0]
 8006ade:	7812      	ldrb	r2, [r2, #0]
 8006ae0:	1c10      	adds	r0, r2, #0
 8006ae2:	bf18      	it	ne
 8006ae4:	2001      	movne	r0, #1
 8006ae6:	b002      	add	sp, #8
 8006ae8:	4770      	bx	lr
 8006aea:	4610      	mov	r0, r2
 8006aec:	e7fb      	b.n	8006ae6 <__ascii_mbtowc+0x16>
 8006aee:	f06f 0001 	mvn.w	r0, #1
 8006af2:	e7f8      	b.n	8006ae6 <__ascii_mbtowc+0x16>

08006af4 <memcpy>:
 8006af4:	b510      	push	{r4, lr}
 8006af6:	1e43      	subs	r3, r0, #1
 8006af8:	440a      	add	r2, r1
 8006afa:	4291      	cmp	r1, r2
 8006afc:	d100      	bne.n	8006b00 <memcpy+0xc>
 8006afe:	bd10      	pop	{r4, pc}
 8006b00:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006b04:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006b08:	e7f7      	b.n	8006afa <memcpy+0x6>

08006b0a <memmove>:
 8006b0a:	4288      	cmp	r0, r1
 8006b0c:	b510      	push	{r4, lr}
 8006b0e:	eb01 0302 	add.w	r3, r1, r2
 8006b12:	d807      	bhi.n	8006b24 <memmove+0x1a>
 8006b14:	1e42      	subs	r2, r0, #1
 8006b16:	4299      	cmp	r1, r3
 8006b18:	d00a      	beq.n	8006b30 <memmove+0x26>
 8006b1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006b1e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006b22:	e7f8      	b.n	8006b16 <memmove+0xc>
 8006b24:	4283      	cmp	r3, r0
 8006b26:	d9f5      	bls.n	8006b14 <memmove+0xa>
 8006b28:	1881      	adds	r1, r0, r2
 8006b2a:	1ad2      	subs	r2, r2, r3
 8006b2c:	42d3      	cmn	r3, r2
 8006b2e:	d100      	bne.n	8006b32 <memmove+0x28>
 8006b30:	bd10      	pop	{r4, pc}
 8006b32:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006b36:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006b3a:	e7f7      	b.n	8006b2c <memmove+0x22>

08006b3c <_free_r>:
 8006b3c:	b538      	push	{r3, r4, r5, lr}
 8006b3e:	4605      	mov	r5, r0
 8006b40:	2900      	cmp	r1, #0
 8006b42:	d045      	beq.n	8006bd0 <_free_r+0x94>
 8006b44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b48:	1f0c      	subs	r4, r1, #4
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	bfb8      	it	lt
 8006b4e:	18e4      	addlt	r4, r4, r3
 8006b50:	f000 f8df 	bl	8006d12 <__malloc_lock>
 8006b54:	4a1f      	ldr	r2, [pc, #124]	; (8006bd4 <_free_r+0x98>)
 8006b56:	6813      	ldr	r3, [r2, #0]
 8006b58:	4610      	mov	r0, r2
 8006b5a:	b933      	cbnz	r3, 8006b6a <_free_r+0x2e>
 8006b5c:	6063      	str	r3, [r4, #4]
 8006b5e:	6014      	str	r4, [r2, #0]
 8006b60:	4628      	mov	r0, r5
 8006b62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006b66:	f000 b8d5 	b.w	8006d14 <__malloc_unlock>
 8006b6a:	42a3      	cmp	r3, r4
 8006b6c:	d90c      	bls.n	8006b88 <_free_r+0x4c>
 8006b6e:	6821      	ldr	r1, [r4, #0]
 8006b70:	1862      	adds	r2, r4, r1
 8006b72:	4293      	cmp	r3, r2
 8006b74:	bf04      	itt	eq
 8006b76:	681a      	ldreq	r2, [r3, #0]
 8006b78:	685b      	ldreq	r3, [r3, #4]
 8006b7a:	6063      	str	r3, [r4, #4]
 8006b7c:	bf04      	itt	eq
 8006b7e:	1852      	addeq	r2, r2, r1
 8006b80:	6022      	streq	r2, [r4, #0]
 8006b82:	6004      	str	r4, [r0, #0]
 8006b84:	e7ec      	b.n	8006b60 <_free_r+0x24>
 8006b86:	4613      	mov	r3, r2
 8006b88:	685a      	ldr	r2, [r3, #4]
 8006b8a:	b10a      	cbz	r2, 8006b90 <_free_r+0x54>
 8006b8c:	42a2      	cmp	r2, r4
 8006b8e:	d9fa      	bls.n	8006b86 <_free_r+0x4a>
 8006b90:	6819      	ldr	r1, [r3, #0]
 8006b92:	1858      	adds	r0, r3, r1
 8006b94:	42a0      	cmp	r0, r4
 8006b96:	d10b      	bne.n	8006bb0 <_free_r+0x74>
 8006b98:	6820      	ldr	r0, [r4, #0]
 8006b9a:	4401      	add	r1, r0
 8006b9c:	1858      	adds	r0, r3, r1
 8006b9e:	4282      	cmp	r2, r0
 8006ba0:	6019      	str	r1, [r3, #0]
 8006ba2:	d1dd      	bne.n	8006b60 <_free_r+0x24>
 8006ba4:	6810      	ldr	r0, [r2, #0]
 8006ba6:	6852      	ldr	r2, [r2, #4]
 8006ba8:	605a      	str	r2, [r3, #4]
 8006baa:	4401      	add	r1, r0
 8006bac:	6019      	str	r1, [r3, #0]
 8006bae:	e7d7      	b.n	8006b60 <_free_r+0x24>
 8006bb0:	d902      	bls.n	8006bb8 <_free_r+0x7c>
 8006bb2:	230c      	movs	r3, #12
 8006bb4:	602b      	str	r3, [r5, #0]
 8006bb6:	e7d3      	b.n	8006b60 <_free_r+0x24>
 8006bb8:	6820      	ldr	r0, [r4, #0]
 8006bba:	1821      	adds	r1, r4, r0
 8006bbc:	428a      	cmp	r2, r1
 8006bbe:	bf04      	itt	eq
 8006bc0:	6811      	ldreq	r1, [r2, #0]
 8006bc2:	6852      	ldreq	r2, [r2, #4]
 8006bc4:	6062      	str	r2, [r4, #4]
 8006bc6:	bf04      	itt	eq
 8006bc8:	1809      	addeq	r1, r1, r0
 8006bca:	6021      	streq	r1, [r4, #0]
 8006bcc:	605c      	str	r4, [r3, #4]
 8006bce:	e7c7      	b.n	8006b60 <_free_r+0x24>
 8006bd0:	bd38      	pop	{r3, r4, r5, pc}
 8006bd2:	bf00      	nop
 8006bd4:	200002e0 	.word	0x200002e0

08006bd8 <_malloc_r>:
 8006bd8:	b570      	push	{r4, r5, r6, lr}
 8006bda:	1ccd      	adds	r5, r1, #3
 8006bdc:	f025 0503 	bic.w	r5, r5, #3
 8006be0:	3508      	adds	r5, #8
 8006be2:	2d0c      	cmp	r5, #12
 8006be4:	bf38      	it	cc
 8006be6:	250c      	movcc	r5, #12
 8006be8:	2d00      	cmp	r5, #0
 8006bea:	4606      	mov	r6, r0
 8006bec:	db01      	blt.n	8006bf2 <_malloc_r+0x1a>
 8006bee:	42a9      	cmp	r1, r5
 8006bf0:	d903      	bls.n	8006bfa <_malloc_r+0x22>
 8006bf2:	230c      	movs	r3, #12
 8006bf4:	6033      	str	r3, [r6, #0]
 8006bf6:	2000      	movs	r0, #0
 8006bf8:	bd70      	pop	{r4, r5, r6, pc}
 8006bfa:	f000 f88a 	bl	8006d12 <__malloc_lock>
 8006bfe:	4a21      	ldr	r2, [pc, #132]	; (8006c84 <_malloc_r+0xac>)
 8006c00:	6814      	ldr	r4, [r2, #0]
 8006c02:	4621      	mov	r1, r4
 8006c04:	b991      	cbnz	r1, 8006c2c <_malloc_r+0x54>
 8006c06:	4c20      	ldr	r4, [pc, #128]	; (8006c88 <_malloc_r+0xb0>)
 8006c08:	6823      	ldr	r3, [r4, #0]
 8006c0a:	b91b      	cbnz	r3, 8006c14 <_malloc_r+0x3c>
 8006c0c:	4630      	mov	r0, r6
 8006c0e:	f000 f863 	bl	8006cd8 <_sbrk_r>
 8006c12:	6020      	str	r0, [r4, #0]
 8006c14:	4629      	mov	r1, r5
 8006c16:	4630      	mov	r0, r6
 8006c18:	f000 f85e 	bl	8006cd8 <_sbrk_r>
 8006c1c:	1c43      	adds	r3, r0, #1
 8006c1e:	d124      	bne.n	8006c6a <_malloc_r+0x92>
 8006c20:	230c      	movs	r3, #12
 8006c22:	6033      	str	r3, [r6, #0]
 8006c24:	4630      	mov	r0, r6
 8006c26:	f000 f875 	bl	8006d14 <__malloc_unlock>
 8006c2a:	e7e4      	b.n	8006bf6 <_malloc_r+0x1e>
 8006c2c:	680b      	ldr	r3, [r1, #0]
 8006c2e:	1b5b      	subs	r3, r3, r5
 8006c30:	d418      	bmi.n	8006c64 <_malloc_r+0x8c>
 8006c32:	2b0b      	cmp	r3, #11
 8006c34:	d90f      	bls.n	8006c56 <_malloc_r+0x7e>
 8006c36:	600b      	str	r3, [r1, #0]
 8006c38:	50cd      	str	r5, [r1, r3]
 8006c3a:	18cc      	adds	r4, r1, r3
 8006c3c:	4630      	mov	r0, r6
 8006c3e:	f000 f869 	bl	8006d14 <__malloc_unlock>
 8006c42:	f104 000b 	add.w	r0, r4, #11
 8006c46:	1d23      	adds	r3, r4, #4
 8006c48:	f020 0007 	bic.w	r0, r0, #7
 8006c4c:	1ac3      	subs	r3, r0, r3
 8006c4e:	d0d3      	beq.n	8006bf8 <_malloc_r+0x20>
 8006c50:	425a      	negs	r2, r3
 8006c52:	50e2      	str	r2, [r4, r3]
 8006c54:	e7d0      	b.n	8006bf8 <_malloc_r+0x20>
 8006c56:	428c      	cmp	r4, r1
 8006c58:	684b      	ldr	r3, [r1, #4]
 8006c5a:	bf16      	itet	ne
 8006c5c:	6063      	strne	r3, [r4, #4]
 8006c5e:	6013      	streq	r3, [r2, #0]
 8006c60:	460c      	movne	r4, r1
 8006c62:	e7eb      	b.n	8006c3c <_malloc_r+0x64>
 8006c64:	460c      	mov	r4, r1
 8006c66:	6849      	ldr	r1, [r1, #4]
 8006c68:	e7cc      	b.n	8006c04 <_malloc_r+0x2c>
 8006c6a:	1cc4      	adds	r4, r0, #3
 8006c6c:	f024 0403 	bic.w	r4, r4, #3
 8006c70:	42a0      	cmp	r0, r4
 8006c72:	d005      	beq.n	8006c80 <_malloc_r+0xa8>
 8006c74:	1a21      	subs	r1, r4, r0
 8006c76:	4630      	mov	r0, r6
 8006c78:	f000 f82e 	bl	8006cd8 <_sbrk_r>
 8006c7c:	3001      	adds	r0, #1
 8006c7e:	d0cf      	beq.n	8006c20 <_malloc_r+0x48>
 8006c80:	6025      	str	r5, [r4, #0]
 8006c82:	e7db      	b.n	8006c3c <_malloc_r+0x64>
 8006c84:	200002e0 	.word	0x200002e0
 8006c88:	200002e4 	.word	0x200002e4

08006c8c <_realloc_r>:
 8006c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c8e:	4607      	mov	r7, r0
 8006c90:	4614      	mov	r4, r2
 8006c92:	460e      	mov	r6, r1
 8006c94:	b921      	cbnz	r1, 8006ca0 <_realloc_r+0x14>
 8006c96:	4611      	mov	r1, r2
 8006c98:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006c9c:	f7ff bf9c 	b.w	8006bd8 <_malloc_r>
 8006ca0:	b922      	cbnz	r2, 8006cac <_realloc_r+0x20>
 8006ca2:	f7ff ff4b 	bl	8006b3c <_free_r>
 8006ca6:	4625      	mov	r5, r4
 8006ca8:	4628      	mov	r0, r5
 8006caa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006cac:	f000 f833 	bl	8006d16 <_malloc_usable_size_r>
 8006cb0:	42a0      	cmp	r0, r4
 8006cb2:	d20f      	bcs.n	8006cd4 <_realloc_r+0x48>
 8006cb4:	4621      	mov	r1, r4
 8006cb6:	4638      	mov	r0, r7
 8006cb8:	f7ff ff8e 	bl	8006bd8 <_malloc_r>
 8006cbc:	4605      	mov	r5, r0
 8006cbe:	2800      	cmp	r0, #0
 8006cc0:	d0f2      	beq.n	8006ca8 <_realloc_r+0x1c>
 8006cc2:	4631      	mov	r1, r6
 8006cc4:	4622      	mov	r2, r4
 8006cc6:	f7ff ff15 	bl	8006af4 <memcpy>
 8006cca:	4631      	mov	r1, r6
 8006ccc:	4638      	mov	r0, r7
 8006cce:	f7ff ff35 	bl	8006b3c <_free_r>
 8006cd2:	e7e9      	b.n	8006ca8 <_realloc_r+0x1c>
 8006cd4:	4635      	mov	r5, r6
 8006cd6:	e7e7      	b.n	8006ca8 <_realloc_r+0x1c>

08006cd8 <_sbrk_r>:
 8006cd8:	b538      	push	{r3, r4, r5, lr}
 8006cda:	4c06      	ldr	r4, [pc, #24]	; (8006cf4 <_sbrk_r+0x1c>)
 8006cdc:	2300      	movs	r3, #0
 8006cde:	4605      	mov	r5, r0
 8006ce0:	4608      	mov	r0, r1
 8006ce2:	6023      	str	r3, [r4, #0]
 8006ce4:	f7fb ffe4 	bl	8002cb0 <_sbrk>
 8006ce8:	1c43      	adds	r3, r0, #1
 8006cea:	d102      	bne.n	8006cf2 <_sbrk_r+0x1a>
 8006cec:	6823      	ldr	r3, [r4, #0]
 8006cee:	b103      	cbz	r3, 8006cf2 <_sbrk_r+0x1a>
 8006cf0:	602b      	str	r3, [r5, #0]
 8006cf2:	bd38      	pop	{r3, r4, r5, pc}
 8006cf4:	20000aac 	.word	0x20000aac

08006cf8 <__ascii_wctomb>:
 8006cf8:	b149      	cbz	r1, 8006d0e <__ascii_wctomb+0x16>
 8006cfa:	2aff      	cmp	r2, #255	; 0xff
 8006cfc:	bf85      	ittet	hi
 8006cfe:	238a      	movhi	r3, #138	; 0x8a
 8006d00:	6003      	strhi	r3, [r0, #0]
 8006d02:	700a      	strbls	r2, [r1, #0]
 8006d04:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8006d08:	bf98      	it	ls
 8006d0a:	2001      	movls	r0, #1
 8006d0c:	4770      	bx	lr
 8006d0e:	4608      	mov	r0, r1
 8006d10:	4770      	bx	lr

08006d12 <__malloc_lock>:
 8006d12:	4770      	bx	lr

08006d14 <__malloc_unlock>:
 8006d14:	4770      	bx	lr

08006d16 <_malloc_usable_size_r>:
 8006d16:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d1a:	1f18      	subs	r0, r3, #4
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	bfbc      	itt	lt
 8006d20:	580b      	ldrlt	r3, [r1, r0]
 8006d22:	18c0      	addlt	r0, r0, r3
 8006d24:	4770      	bx	lr
	...

08006d28 <_init>:
 8006d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d2a:	bf00      	nop
 8006d2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d2e:	bc08      	pop	{r3}
 8006d30:	469e      	mov	lr, r3
 8006d32:	4770      	bx	lr

08006d34 <_fini>:
 8006d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d36:	bf00      	nop
 8006d38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d3a:	bc08      	pop	{r3}
 8006d3c:	469e      	mov	lr, r3
 8006d3e:	4770      	bx	lr
